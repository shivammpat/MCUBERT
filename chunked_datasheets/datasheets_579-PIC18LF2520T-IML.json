[
    "Peripheral Highlights (Continued):\n\u00b7 Run: CPU on, Peripherals on\n\u00b7 Idle: CPU off, Peripherals on\n\u00b7 Sleep: CPU off, Peripherals off\n\u00b7 Ultra Low 50nA Input Leakage\n\u00b7 Run mode Currents Down to 11 \uf06d A Typical\n\u00b7 Idle mode Currents Down to 2.5 \uf06d A Typical\n\u00b7 Sleep mode Current Down to 100 nA Typical\n\u00b7 Timer1 Oscillator: 900 nA, 32 kHz, 2V\n\u00b7 Watchdog Timer: 1.4 \uf06d A, 2V Typical\n\u00b7 Two-Speed Oscillator Start-up",
    "Flexible Oscillator Structure:\n\u00b7 Four Crystal modes, up to 40 MHz\n\u00b7 4x Phase Lock Loop (PLL) - Available for Crystal and Internal Oscillators\n\u00b7 Two External RC modes, up to 4 MHz\n\u00b7 Two External Clock modes, up to 40 MHz\n\u00b7 Internal Oscillator Block:\n-Fast wake from Sleep and Idle, 1 \uf06d s typical\n-8 use-selectable frequencies, from 31 kHz to 8 MHz\n-Provides a complete range of clock speeds from 31 kHz to 32 MHz when used with PLL\n-User-tunable to compensate for frequency drift\n\u00b7 Secondary Oscillator using Timer1 @ 32 kHz\n\u00b7 Fail-Safe Clock Monitor:\n-Allows for safe shutdown if peripheral clock stops",
    "Peripheral Highlights:\n\u00b7 High-Current Sink/Source 25 mA/25 mA\n\u00b7 Three Programmable External Interrupts\n\u00b7 Four Input Change Interrupts\n\u00b7 Up to 2 Capture/Compare/PWM (CCP) modules, one with Auto-Shutdown (28-pin devices)\n\u00b7 Enhanced Capture/Compare/PWM (ECCP) module (40/44-pin devices only):\n-One, two or four PWM outputs\n-Selectable polarity\n-Programmable dead time\n-Auto-shutdown and auto-restart\n\u00b7 Host Synchronous Serial Port (MSSP) module Supporting 3-Wire SPI (all 4 modes) and I 2 C\u2122 Host and Client modes\n\u00b7 Enhanced Addressable USART module:\n-Supports RS-485, RS-232 and LIN/J2602\n-RS-232 operation using internal oscillator block (no external crystal required)\n-Auto-wake-up on Start bit\n-Auto-Baud Detect\n\u00b7 10-Bit, up to 13-Channel Analog-to-Digital (A/D) Converter module:\n-Auto-acquisition capability\n-Conversion available during Sleep\n\u00b7 Dual Analog Comparators with Input Multiplexing",
    "Peripheral Highlights:\n\u00b7 Programmable 16-Level High/Low-Voltage Detection (HLVD) module:\n-Supports interrupt on High/Low-Voltage Detection",
    "Special Microcontroller Features:\n\u00b7 C Compiler Optimized Architecture:\n-Optional extended instruction set designed to optimize re-entrant code\n\u00b7 100,000 Erase/Write Cycle Enhanced Flash Program Memory Typical\n\u00b7 1,000,000 Erase/Write Cycle Data EEPROM Memory Typical\n\u00b7 Flash/Data EEPROM Retention: 100 Years Typical\n\u00b7 Self-Programmable under Software Control\n\u00b7 Priority Levels for Interrupts\n\u00b7 8 x 8 Single-Cycle Hardware Multiplier\n\u00b7 Extended Watchdog Timer (WDT):\n-Programmable period from 4 ms to 131s\n\u00b7 Single-Supply 5V In-Circuit Serial Programming\u2122 (ICSP\u2122) via Two Pins\n\u00b7 In-Circuit Debug (ICD) via Two Pins\n\u00b7 Wide Operating Voltage Range: 2.0V to 5.5V\n\u00b7 Programmable Brown-out Reset (BOR) with Software Enable Option\n-",
    "Special Microcontroller Features:\nPIC18F2420, Program Memory.Flash (bytes) = 16K. PIC18F2420, Program Memory.# Single-Word Instructions = 8192. PIC18F2420, Data Memory.SRAM (bytes) = 768. PIC18F2420, Data Memory.EEPROM (bytes) = 256. PIC18F2420, I/O.I/O = 25. PIC18F2420, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2420, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 2/0. PIC18F2420, MSSP.SPI = Y. PIC18F2420, MSSP.Host I 2 C\u2122 = Y. PIC18F2420, EUSART.EUSART = 1. PIC18F2420, Comp. = 2. PIC18F2420, Timers.8/16-Bit = 1/3. PIC18F2520, Program Memory.Flash (bytes) = 32K. PIC18F2520,",
    "Special Microcontroller Features:\nProgram Memory.# Single-Word Instructions = 16384. PIC18F2520, Data Memory.SRAM (bytes) = 1536. PIC18F2520, Data Memory.EEPROM (bytes) = 256. PIC18F2520, I/O.I/O = 25. PIC18F2520, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2520, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 2/0. PIC18F2520, MSSP.SPI = Y. PIC18F2520, MSSP.Host I 2 C\u2122 = Y. PIC18F2520, EUSART.EUSART = 1. PIC18F2520, Comp. = 2. PIC18F2520, Timers.8/16-Bit = 1/3. PIC18F4420, Program Memory.Flash (bytes) = 16K. PIC18F4420, Program Memory.# Single-Word Instructions = 8192. PIC18F4420, Data Memory.SRAM",
    "Special Microcontroller Features:\n(bytes) = 768. PIC18F4420, Data Memory.EEPROM (bytes) = 256. PIC18F4420, I/O.I/O = 36. PIC18F4420, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4420, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 1/1. PIC18F4420, MSSP.SPI = Y. PIC18F4420, MSSP.Host I 2 C\u2122 = Y. PIC18F4420, EUSART.EUSART = 1. PIC18F4420, Comp. = 2. PIC18F4420, Timers.8/16-Bit = 1/3. PIC18F4520, Program Memory.Flash (bytes) = 32K. PIC18F4520, Program Memory.# Single-Word Instructions = 16384. PIC18F4520, Data Memory.SRAM (bytes) = 1536. PIC18F4520, Data Memory.EEPROM (bytes) =",
    "Special Microcontroller Features:\n256. PIC18F4520, I/O.I/O = 36. PIC18F4520, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4520, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 1/1. PIC18F4520, MSSP.SPI = Y. PIC18F4520, MSSP.Host I 2 C\u2122 = Y. PIC18F4520, EUSART.EUSART = 1. PIC18F4520, Comp. = 2. PIC18F4520, Timers.8/16-Bit = 1/3",
    "Table of Contents\n1.0, 1 = Device Overview .......................................................................................................................................................................... 1.0, 2 = 5. 2.0, 1 = Oscillator Configurations",
    "Table of Contents\n............................................................................................................................................................ 2.0, 2 = 20. 3.0, 1 = Power-Managed Modes",
    "Table of Contents\n............................................................................................................................................................. 3.0, 2 = 29. 4.0, 1 = Reset",
    "Table of Contents\n.......................................................................................................................................................................................... 4.0, 2 = 37. 5.0, 1 = Memory Organization",
    "Table of Contents\n................................................................................................................................................................. 5.0, 2 = 49. 6.0, 1 = Flash Program Memory",
    "Table of Contents\n.............................................................................................................................................................. 6.0, 2 = 69. 7.0, 1 = Data EEPROM Memory",
    "Table of Contents\n............................................................................................................................................................. 7.0, 2 = 78. 8.0, 1 = 8 x 8 Hardware Multiplier",
    "Table of Contents\n............................................................................................................................................................ 8.0, 2 = 83. 9.0, 1 = Interrupts",
    "Table of Contents\n.................................................................................................................................................................................... 9.0, 2 = 85. 10.0, 1 = I/O Ports",
    "Table of Contents\n..................................................................................................................................................................................... 10.0, 2 = 98. 11.0, 1 = Timer0 Module",
    "Table of Contents\n......................................................................................................................................................................... 11.0, 2 = 115. 12.0, 1 = Timer1 Module",
    "Table of Contents\n......................................................................................................................................................................... 12.0, 2 = 118. 13.0, 1 = Timer2 Module",
    "Table of Contents\n......................................................................................................................................................................... 13.0, 2 = 124. 14.0, 1 = Timer3 Module",
    "Table of Contents\n......................................................................................................................................................................... 14.0, 2 = 126. 15.0, 1 = Capture/Compare/PWM (CCP) Modules",
    "Table of Contents\n................................................................................................................................. 15.0, 2 = 129. 16.0, 1 = Enhanced Capture/Compare/PWM (ECCP) Module",
    "Table of Contents\n................................................................................................................ 16.0, 2 = 137. 17.0, 1 = Host Synchronous Serial Port (MSSP) Module",
    "Table of Contents\n........................................................................................................................ 17.0, 2 = 151. 18.0, 1 = Enhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART) ............................................................... 18.0, 2 = 190. 19.0, 1 = 10-Bit Analog-to-Digital Converter (A/D) Module",
    "Table of Contents\n..................................................................................................................... 19.0, 2 = 214. 20.0, 1 = Comparator Module",
    "Table of Contents\n.................................................................................................................................................................. 20.0, 2 = 224. 21.0, 1 = Comparator Voltage Reference Module",
    "Table of Contents\n................................................................................................................................... 21.0, 2 = 229. 22.0, 1 = High/Low-Voltage Detect (HLVD)",
    "Table of Contents\n............................................................................................................................................. 22.0, 2 = 232. 23.0, 1 = Special Features of the",
    "Table of Contents\nCPU.................................................................................................................................................... 23.0, 2 = 237. 24.0, 1 = Instruction Set Summary",
    "Table of Contents\n.......................................................................................................................................................... 24.0, 2 = 255. 25.0, 1 = Development Support",
    "Table of Contents\n............................................................................................................................................................... 25.0, 2 = 305. 26.0, 1 = Electrical Characteristics",
    "Table of Contents\n.......................................................................................................................................................... 26.0, 2 = 307. 27.0, 1 = DC and AC Characteristics Graphs and Tables",
    "Table of Contents\n....................................................................................................................... 27.0, 2 = 346. 28.0, 1 = Packaging Information",
    "Table of Contents\n.............................................................................................................................................................. 28.0, 2 = 367. Appendix A: Revision History",
    "Table of Contents\n............................................................................................................................................................, 1 = Appendix A: Revision History",
    "Table of Contents\n............................................................................................................................................................. Appendix A: Revision History",
    "Table of Contents\n............................................................................................................................................................, 2 = 378. Appendix B: Device Differences",
    "Table of Contents\n........................................................................................................................................................, 1 = Appendix B: Device Differences",
    "Table of Contents\n......................................................................................................................................................... Appendix B: Device Differences",
    "Table of Contents\n........................................................................................................................................................, 2 = 378. The Microchip WebSite",
    "Table of Contents\n....................................................................................................................................................................., 1 = The Microchip WebSite",
    "Table of Contents\n...................................................................................................................................................................... The Microchip WebSite",
    "Table of Contents\n....................................................................................................................................................................., 2 = 379. Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................., 1 = Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................. Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................., 2 = 379. Customer Support",
    "Table of Contents\n............................................................................................................................................................................., 1 = Customer Support",
    "Table of Contents\n.............................................................................................................................................................................. Customer Support",
    "Table of Contents\n............................................................................................................................................................................., 2 = 379. PIC18F2420/2520/4420/4520 Product Identification System",
    "Table of Contents\n..........................................................................................................., 1 = PIC18F2420/2520/4420/4520 Product Identification System ............................................................................................................ PIC18F2420/2520/4420/4520 Product Identification System",
    "Table of Contents\n..........................................................................................................., 2 = 380",
    "1.0 DEVICE OVERVIEW\nThis document contains device-specific information for the following devices:\n\u2022 PIC18F2420\n\u2022 PIC18LF2420\n\u2022 PIC18F2520\n\u2022 PIC18LF2520\n\u2022 PIC18F4420\n\u2022 PIC18LF4420\n\u2022 PIC18F4520\n\u2022 PIC18LF4520\nThis family offers the advantages of all PIC18 microcontrollers - namely, high computational performance at an economical price - with the addition of high-endurance,  Enhanced  Flash  program  memory. On top of these features, the PIC18F2420/2520/4420/ 4520  family  introduces  design  enhancements  that make these microcontrollers a logical choice for many high-performance, power sensitive applications.",
    "1.1.1 eXtreme Low Power (XLP) TECHNOLOGY\nAll of the devices in the PIC18F2420/2520/4420/4520 family incorporate a range of features that can significantly  reduce  power  consumption  during  operation. Key items include:\n\u00b7 Alternate Run Modes: By clocking the controller from the Timer1 source or the internal oscillator block, power consumption during code execution can be reduced by as much as 90%.\n\u00b7 Multiple Idle Modes: The controller can also run with its CPU core disabled but the peripherals still active. In these states, power consumption can be reduced even further, to as little as 4% of normal operation requirements.\n\u00b7 On-the-Fly Mode Switching: The powermanaged modes are invoked by user code during operation, allowing the user to incorporate power-saving ideas into their application's software design.\n\u00b7 Low Consumption in Key Modules: The power requirements for both Timer1 and the Watchdog Timer are minimized. See Section 26.0 'Electrical Characteristics' for values.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nAll of the devices in the PIC18F2420/2520/4420/4520 family  offer  ten  different  oscillator  options,  allowing users a wide range of choices in developing application hardware. These include:",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\n\u00b7 Four Crystal modes, using crystals or ceramic resonators\n\u00b7 Two External Clock modes, offering the option of using two pins (oscillator input and a divide-by-4 clock output) or one pin (oscillator input, with the second pin reassigned as general I/O)\n\u00b7 Two External RC Oscillator modes with the same pin options as the External Clock modes\n\u00b7 An internal oscillator block which provides an 8 MHz clock and an INTRC source (approximately 31 kHz), as well as a range of 6 user-selectable clock frequencies, between 125 kHz to 4 MHz, for a total of 8 clock frequencies. This option frees the two oscillator pins for use as additional general purpose I/O.\n\u00b7 A Phase Lock Loop (PLL) frequency multiplier, available to both the High-Speed Crystal and Internal Oscillator modes, which allows clock speeds of up to 40 MHz. Used with the internal oscillator, the PLL gives users a complete selection of clock speeds, from 31 kHz to 32 MHz - all without using an external crystal or clock circuit.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nBesides its availability as a clock source, the internal oscillator block provides a stable reference source that gives the family additional features for robust operation:\n\u00b7 Fail-Safe Clock Monitor: This option constantly monitors the main clock source against a reference signal provided by the internal oscillator. If a clock failure occurs, the controller is switched to the internal oscillator block, allowing for continued low-speed operation or a safe application shutdown.\n\u00b7 Two-Speed Start-up: This option allows the internal oscillator to serve as the clock source from Power-on Reset, or wake-up from Sleep mode, until the primary clock source is available.",
    "1.2 Other Special Features\n\u00b7 Memory Endurance: The Enhanced Flash cells for both program memory and data EEPROM are rated to last for many thousands of erase/write cycles - up to 100,000 for program memory and 1,000,000 for EEPROM. Data retention without refresh is conservatively estimated to be greater than 40 years.\n\u00b7 Self-Programmability: These devices can write to their own program memory spaces under internal software control. By using a bootloader routine located in the protected Boot Block at the top of program memory, it becomes possible to create an application that can update itself in the field.\n\u00b7 Extended Instruction Set: The PIC18F2420/ 2520/4420/4520 family introduces an optional extension to the PIC18 instruction set, which adds 8 new instructions and an Indexed Addressing mode. This extension, enabled as a device configuration option, has been specifically designed to optimize re-entrant application code originally developed in high-level languages, such as C.",
    "1.2 Other Special Features\n\u00b7 Enhanced CCP Module: In PWM mode, this module provides 1, 2 or 4 modulated outputs for controlling half-bridge and full-bridge drivers. Other features include auto-shutdown, for disabling PWM outputs on interrupt, or other select conditions, and auto-restart to reactivate outputs once the condition has cleared.\n\u00b7 Enhanced Addressable USART: This serial communication module is capable of standard RS-232 operation and provides support for the LIN bus protocol. Other enhancements include automatic baud rate detection and a 16-bit Baud Rate Generator for improved resolution. When the microcontroller is using the internal oscillator block, the EUSART provides stable operation for applications that talk to the outside world without using an external crystal (or its accompanying power requirement).\n\u00b7 10-Bit A/D Converter: This module incorporates programmable acquisition time, allowing for a channel to be selected and a conversion to be initiated without waiting for a sampling period and thus, reducing code overhead.",
    "1.2 Other Special Features\n\u00b7 Extended Watchdog Timer (WDT): This enhanced version incorporates a 16-bit prescaler, allowing an extended time-out range that is stable across operating voltage and temperature. See Section 26.0 'Electrical Characteristics' for time-out periods.",
    "1.3 Details on Individual Family Members\nDevices in the PIC18F2420/2520/4420/4520 family are available  in  28-pin  and  40/44-pin  packages.  Block diagrams for the two groups are shown in Figure 1-1 and Figure 1-2 .\nThe devices are differentiated from each other in five ways:\n1. Flash program memory (16 Kbytes for PIC18F2420/4420  devices  and  32 Kbytes  for PIC18F2520/4520 devices).\n2. A/D  channels  (10  for  28-pin  devices,  13  for 40/44-pin devices).\n3. I/O ports (3 bidirectional ports on 28-pin devices, 5 bidirectional ports on 40/44-pin devices).\n4. CCP  and  Enhanced  CCP  implementation (28-pin devices have 2 standard CCP modules, 40/44-pin devices have one standard CCP module and one ECCP module).\n5. Parallel  Client  Port  (present  only  on  40/44-pin devices).\nAll other features for devices in this family are identical. These are summarized in Table 1-1 .",
    "1.3 Details on Individual Family Members\nThe pinouts for all devices are listed in Table 1-2 and Table 1-3 .\nLike  all  Microchip  PIC18  devices,  members  of  the PIC18F2420/2520/4420/4520  family  are  available  as both standard and  low-voltage devices. Standard devices with Enhanced Flash memory, designated with an  'F'  in  the  part  number  (such  as  PIC18 F 2420), accommodate an operating VDD range of 4.2V to 5.5V. Low-voltage parts, designated by 'LF' (such as PIC18 LF 2420), function over an extended VDD range of 2.0V to 5.5V.",
    "TABLE 1-1: DEVICE FEATURES\nOperating Frequency, PIC18F2420 = DC - 40 MHz. Operating Frequency, PIC18F2520 = DC - 40 MHz. Operating Frequency, PIC18F4420 = DC - 40 MHz. Operating Frequency, PIC18F4520 = DC- 40 MHz. Program Memory (Bytes), PIC18F2420 = 16384. Program Memory (Bytes), PIC18F2520 = 32768. Program Memory (Bytes), PIC18F4420 = 16384. Program Memory (Bytes), PIC18F4520 = 32768. Program Memory (Instructions), PIC18F2420 = 8192. Program Memory (Instructions), PIC18F2520 = 16384. Program Memory (Instructions), PIC18F4420 = 8192. Program Memory (Instructions), PIC18F4520 = 16384. Data Memory (Bytes), PIC18F2420 = 768. Data Memory (Bytes), PIC18F2520 = 1536. Data Memory (Bytes), PIC18F4420 = 768. Data Memory (Bytes), PIC18F4520 = 1536. Data EEPROM Memory (Bytes),",
    "TABLE 1-1: DEVICE FEATURES\nPIC18F2420 = 256. Data EEPROM Memory (Bytes), PIC18F2520 = 256. Data EEPROM Memory (Bytes), PIC18F4420 = 256. Data EEPROM Memory (Bytes), PIC18F4520 = 256. Interrupt Sources, PIC18F2420 = 19. Interrupt Sources, PIC18F2520 = 19. Interrupt Sources, PIC18F4420 = 20. Interrupt Sources, PIC18F4520 = 20. I/O Ports, PIC18F2420 = Ports A, B, C, (E). I/O Ports, PIC18F2520 = Ports A, B, C, (E). I/O Ports, PIC18F4420 = Ports A, B, C, D, E. I/O Ports, PIC18F4520 = Ports A, B, C, D, E. Timers, PIC18F2420 = 4. Timers, PIC18F2520 = 4. Timers, PIC18F4420 = 4. Timers, PIC18F4520 = 4. Capture/Compare/PWM Modules, PIC18F2420",
    "TABLE 1-1: DEVICE FEATURES\n= 2. Capture/Compare/PWM Modules, PIC18F2520 = 2. Capture/Compare/PWM Modules, PIC18F4420 = 1. Capture/Compare/PWM Modules, PIC18F4520 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F2420 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2520 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F4420 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4520 = 1. Serial Communications, PIC18F2420 = MSSP, Enhanced USART. Serial Communications, PIC18F2520 = MSSP, Enhanced USART. Serial Communications, PIC18F4420 = MSSP, Enhanced USART. Serial Communications, PIC18F4520 = MSSP, Enhanced USART. Parallel Communications (PSP), PIC18F2420 = No. Parallel Communications (PSP), PIC18F2520 = No. Parallel Communications (PSP), PIC18F4420 = Yes. Parallel Communications (PSP), PIC18F4520 =",
    "TABLE 1-1: DEVICE FEATURES\nYes. 10-Bit Analog-to-Digital Module, PIC18F2420 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F2520 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4420 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4520 = 13 Input Channels. Resets (and Delays), PIC18F2420 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2520 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4420 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4520 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT,",
    "TABLE 1-1: DEVICE FEATURES\nOST), MCLR (optional), WDT. Programmable High/Low-Voltage Detect, PIC18F2420 = Yes. Programmable High/Low-Voltage Detect, PIC18F2520 = Yes. Programmable High/Low-Voltage Detect, PIC18F4420 = Yes. Programmable High/Low-Voltage Detect, PIC18F4520 = Yes. Programmable Brown-out Reset, PIC18F2420 = Yes. Programmable Brown-out Reset, PIC18F2520 = Yes. Programmable Brown-out Reset, PIC18F4420 = Yes. Programmable Brown-out Reset, PIC18F4520 = Yes. Instruction Set, PIC18F2420 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F2520 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F4420 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F4520 = 75 Instructions; 83 with Extended Instruction Set Enabled. Packages, PIC18F2420 = 28-Pin SPDIP 28-Pin SOIC 28-Pin QFN. Packages, PIC18F2520",
    "TABLE 1-1: DEVICE FEATURES\n= 28-Pin SPDIP 28-Pin SOIC 28-Pin QFN. Packages, PIC18F4420 = 40-Pin PDIP 44-Pin QFN 44-Pin TQFP. Packages, PIC18F4520 = 40-Pin PDIP 44-Pin QFN 44-Pin TQFP",
    "PIC18F2420/2520/4420/4520\nFIGURE 1-1:",
    "PIC18F2420/2520 (28-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "PIC18F4420/4520 (40/44-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3 MCLR, Pin Number.SPDIP, SOIC = 1. MCLR/VPP/RE3 MCLR, Pin Number.QFN = 26. MCLR/VPP/RE3 MCLR, Pin.Type = . MCLR/VPP/RE3 MCLR, Buffer Type = . MCLR/VPP/RE3 MCLR, Description = Master Clear (input) or programming voltage (input).. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = ST. , Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number.SPDIP, SOIC = . VPP, Pin Number.QFN = . VPP, Pin.Type = P. VPP, Buffer Type = . VPP, Description = Programming voltage input.. RE3, Pin Number.SPDIP, SOIC = . RE3, Pin Number.QFN = . RE3, Pin.Type =",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS\nI. RE3, Buffer Type = ST. RE3, Description = Digital input.. OSC1/CLKI/RA7, Pin Number.SPDIP, SOIC = 9. OSC1/CLKI/RA7, Pin Number.QFN = 6. OSC1/CLKI/RA7, Pin.Type = . OSC1/CLKI/RA7, Buffer Type = . OSC1/CLKI/RA7, Description = Oscillator crystal or external clock input.. OSC1, Pin Number.SPDIP, SOIC = . OSC1, Pin Number.QFN = . OSC1, Pin.Type = I. OSC1, Buffer Type = ST. OSC1, Description = Oscillator crystal input or external clock source input. ST buffer when configured in RC mode; CMOSotherwise.. CLKI, Pin Number.SPDIP, SOIC = . CLKI, Pin Number.QFN = . CLKI, Pin.Type = I. CLKI, Buffer Type = CMOS. CLKI, Description = External clock",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS\nsource input. Always associated with pin function, OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Number.QFN = . RA7, Pin.Type = I/O. RA7, Buffer Type = TTL. RA7, Description = General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number.SPDIP, SOIC = 10. OSC2/CLKO/RA6, Pin Number.QFN = 7. OSC2/CLKO/RA6, Pin.Type = . OSC2/CLKO/RA6, Buffer Type = . OSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number.SPDIP, SOIC = . OSC2, Pin Number.QFN = . OSC2, Pin.Type = O. OSC2, Buffer Type = -. OSC2, Description = Oscillator crystal",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS\noutput. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number.SPDIP, SOIC = . CLKO, Pin Number.QFN = . CLKO, Pin.Type = O. CLKO, Buffer Type = -. CLKO, Description = In RC mode, OSC2 pin outputs CLKO which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Number.QFN = . RA6, Pin.Type = I/O. RA6, Buffer Type = TTL. RA6, Description = General purpose I/O pin.\nLegend: TTL = TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0, Pin Number.SPDIP, SOIC = 2. RA0/AN0, Pin Number.QFN = 27. RA0/AN0, Pin Type = . RA0/AN0, Buffer Type = . RA0/AN0, Description = . RA0, Pin Number.SPDIP, SOIC = . RA0, Pin Number.QFN = . RA0, Pin Type = I/O. RA0, Buffer Type = TTL. RA0, Description = Digital I/O.. AN0, Pin Number.SPDIP, SOIC = . AN0, Pin Number.QFN = . AN0, Pin Type = I. AN0, Buffer Type = Analog. AN0, Description = Analog input 0.. RA1/AN1, Pin Number.SPDIP, SOIC = 3. RA1/AN1, Pin Number.QFN = 28. RA1/AN1, Pin Type = . RA1/AN1, Buffer Type = . RA1/AN1, Description = . RA1, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.SPDIP, SOIC = . RA1, Pin Number.QFN = . RA1, Pin Type = I/O. RA1, Buffer Type = TTL. RA1, Description = Digital I/O.. AN1, Pin Number.SPDIP, SOIC = . AN1, Pin Number.QFN = . AN1, Pin Type = I. AN1, Buffer Type = Analog. AN1, Description = Analog input 1.. RA2/AN2/VREF-/CV REF, Pin Number.SPDIP, SOIC = 4. RA2/AN2/VREF-/CV REF, Pin Number.QFN = 1. RA2/AN2/VREF-/CV REF, Pin Type = . RA2/AN2/VREF-/CV REF, Buffer Type = . RA2/AN2/VREF-/CV REF, Description = . RA2, Pin Number.SPDIP, SOIC = . RA2, Pin Number.QFN = . RA2, Pin Type = I/O. RA2, Buffer",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType = TTL. RA2, Description = Digital I/O.. AN2, Pin Number.SPDIP, SOIC = . AN2, Pin Number.QFN = . AN2, Pin Type = I. AN2, Buffer Type = Analog. AN2, Description = Analog input 2.. VREF-, Pin Number.SPDIP, SOIC = . VREF-, Pin Number.QFN = . VREF-, Pin Type = I. VREF-, Buffer Type = Analog. VREF-, Description = A/D reference voltage (low) input.. CVREF, Pin Number.SPDIP, SOIC = . CVREF, Pin Number.QFN = . CVREF, Pin Type = O. CVREF, Buffer Type = Analog. CVREF, Description = Comparator reference voltage output.. RA3/AN3/VREF+, Pin Number.SPDIP, SOIC = 5. RA3/AN3/VREF+, Pin Number.QFN = 2.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA3/AN3/VREF+, Pin Type = . RA3/AN3/VREF+, Buffer Type = . RA3/AN3/VREF+, Description = . RA3, Pin Number.SPDIP, SOIC = . RA3, Pin Number.QFN = . RA3, Pin Type = I/O. RA3, Buffer Type = TTL. RA3, Description = Digital I/O.. AN3, Pin Number.SPDIP, SOIC = . AN3, Pin Number.QFN = . AN3, Pin Type = I. AN3, Buffer Type = Analog. AN3, Description = Analog input. VREF+, Pin Number.SPDIP, SOIC = . VREF+, Pin Number.QFN = . VREF+, Pin Type = I. VREF+, Buffer Type = Analog. VREF+, Description = 3. A/D reference voltage (high) input.. RA4/T0CKI/C1OUT, Pin Number.SPDIP, SOIC = 6.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA4/T0CKI/C1OUT, Pin Number.QFN = 3. RA4/T0CKI/C1OUT, Pin Type = . RA4/T0CKI/C1OUT, Buffer Type = . RA4/T0CKI/C1OUT, Description = . RA4, Pin Number.SPDIP, SOIC = . RA4, Pin Number.QFN = . RA4, Pin Type = I/O. RA4, Buffer Type = ST. RA4, Description = Digital I/O.. T0CKI, Pin Number.SPDIP, SOIC = . T0CKI, Pin Number.QFN = . T0CKI, Pin Type = I. T0CKI, Buffer Type = ST. T0CKI, Description = Timer0 external clock input.. C1OUT, Pin Number.SPDIP, SOIC = . C1OUT, Pin Number.QFN = . C1OUT, Pin Type = O. C1OUT, Buffer Type = -. C1OUT, Description = Comparator 1 output..",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA5/AN4/SS/HLVDIN/ C2OUT, Pin Number.SPDIP, SOIC = 7. RA5/AN4/SS/HLVDIN/ C2OUT, Pin Number.QFN = 4. RA5/AN4/SS/HLVDIN/ C2OUT, Pin Type = . RA5/AN4/SS/HLVDIN/ C2OUT, Buffer Type = . RA5/AN4/SS/HLVDIN/ C2OUT, Description = . RA5, Pin Number.SPDIP, SOIC = . RA5, Pin Number.QFN = . RA5, Pin Type = I/O. RA5, Buffer Type = TTL. RA5, Description = Digital I/O.. AN4, Pin Number.SPDIP, SOIC = . AN4, Pin Number.QFN = . AN4, Pin Type = I. AN4, Buffer Type = Analog. AN4, Description = Analog input 4.. SS, Pin Number.SPDIP, SOIC = . SS, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . SS, Pin Type = I. SS, Buffer Type = TTL. SS, Description = SPI Client select input.. HLVDIN, Pin Number.SPDIP, SOIC = . HLVDIN, Pin Number.QFN = . HLVDIN, Pin Type = I. HLVDIN, Buffer Type = Analog. HLVDIN, Description = High/Low-Voltage Detect input.. C2OUT, Pin Number.SPDIP, SOIC = . C2OUT, Pin Number.QFN = . C2OUT, Pin Type = O. C2OUT, Buffer Type = -. C2OUT, Description = Comparator 2 output.. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Number.QFN = . RA6, Pin Type = . RA6, Buffer Type = . RA6, Description = See the OSC2/CLKO/RA6 pin.. RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Number.QFN = . RA7, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType = . RA7, Buffer Type = . RA7, Description = See the OSC1/CLKI/RA7 pin.\nLegend: TTL = TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0/FLT0/AN12, Pin Number.SPDIP, SOIC = 21. RB0/INT0/FLT0/AN12, Pin Number.QFN = 18. RB0/INT0/FLT0/AN12, Pin.Type = . RB0/INT0/FLT0/AN12, Buffer.Type = . RB0/INT0/FLT0/AN12, Description = PORTB is a bidirectional I/O port. PORTB can be software programmed for internal weak pull-ups on all inputs.. RB0, Pin Number.SPDIP, SOIC = . RB0, Pin Number.QFN = . RB0, Pin.Type = I/O. RB0, Buffer.Type = TTL. RB0, Description = Digital I/O.. INT0, Pin Number.SPDIP, SOIC = . INT0, Pin Number.QFN = . INT0, Pin.Type = I. INT0, Buffer.Type = ST. INT0, Description = External interrupt",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n0.. FLT0, Pin Number.SPDIP, SOIC = . FLT0, Pin Number.QFN = . FLT0, Pin.Type = I. FLT0, Buffer.Type = ST. FLT0, Description = PWM Fault input for CCP1.. AN12, Pin Number.SPDIP, SOIC = . AN12, Pin Number.QFN = . AN12, Pin.Type = I. AN12, Buffer.Type = Analog. AN12, Description = Analog input 12.. RB1/INT1/AN10, Pin Number.SPDIP, SOIC = 22. RB1/INT1/AN10, Pin Number.QFN = 19. RB1/INT1/AN10, Pin.Type = . RB1/INT1/AN10, Buffer.Type = . RB1/INT1/AN10, Description = . RB1, Pin Number.SPDIP, SOIC = . RB1, Pin Number.QFN = . RB1, Pin.Type = I/O. RB1,",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = TTL. RB1, Description = Digital I/O.. INT1, Pin Number.SPDIP, SOIC = . INT1, Pin Number.QFN = . INT1, Pin.Type = I. INT1, Buffer.Type = ST. INT1, Description = External interrupt 1.. AN10, Pin Number.SPDIP, SOIC = . AN10, Pin Number.QFN = . AN10, Pin.Type = I. AN10, Buffer.Type = Analog. AN10, Description = Analog input 10.. RB2/INT2/AN8, Pin Number.SPDIP, SOIC = 23. RB2/INT2/AN8, Pin Number.QFN = 20. RB2/INT2/AN8, Pin.Type = . RB2/INT2/AN8, Buffer.Type = . RB2/INT2/AN8, Description = . RB2, Pin Number.SPDIP, SOIC = . RB2, Pin Number.QFN = . RB2, Pin.Type =",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. RB2, Buffer.Type = TTL. RB2, Description = Digital I/O.. INT2, Pin Number.SPDIP, SOIC = . INT2, Pin Number.QFN = . INT2, Pin.Type = I. INT2, Buffer.Type = ST. INT2, Description = External interrupt 2.. AN8, Pin Number.SPDIP, SOIC = . AN8, Pin Number.QFN = . AN8, Pin.Type = I. AN8, Buffer.Type = Analog. AN8, Description = Analog input 8.. RB3/AN9/CCP2, Pin Number.SPDIP, SOIC = 24. RB3/AN9/CCP2, Pin Number.QFN = 21. RB3/AN9/CCP2, Pin.Type = . RB3/AN9/CCP2, Buffer.Type = . RB3/AN9/CCP2, Description = . RB3, Pin Number.SPDIP, SOIC = . RB3, Pin Number.QFN",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . RB3, Pin.Type = I/O. RB3, Buffer.Type = TTL. RB3, Description = Digital I/O.. AN9, Pin Number.SPDIP, SOIC = . AN9, Pin Number.QFN = . AN9, Pin.Type = I. AN9, Buffer.Type = Analog. AN9, Description = Analog input 9.. CCP2 (1), Pin Number.SPDIP, SOIC = . CCP2 (1), Pin Number.QFN = . CCP2 (1), Pin.Type = I/O. CCP2 (1), Buffer.Type = ST. CCP2 (1), Description = Capture 2 input/Compare 2 output/PWM2 output.. RB4/KBI0/AN11, Pin Number.SPDIP, SOIC = 25. RB4/KBI0/AN11, Pin Number.QFN = 22. RB4/KBI0/AN11, Pin.Type = .",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB4/KBI0/AN11, Buffer.Type = . RB4/KBI0/AN11, Description = . RB4, Pin Number.SPDIP, SOIC = . RB4, Pin Number.QFN = . RB4, Pin.Type = I/O. RB4, Buffer.Type = TTL. RB4, Description = Digital I/O.. KBI0, Pin Number.SPDIP, SOIC = . KBI0, Pin Number.QFN = . KBI0, Pin.Type = I. KBI0, Buffer.Type = TTL. KBI0, Description = Interrupt-on-change pin.. AN11, Pin Number.SPDIP, SOIC = . AN11, Pin Number.QFN = . AN11, Pin.Type = I. AN11, Buffer.Type = Analog. AN11, Description = Analog input 11.. RB5/KBI1/PGM, Pin Number.SPDIP, SOIC = 26. RB5/KBI1/PGM, Pin Number.QFN",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= 23. RB5/KBI1/PGM, Pin.Type = . RB5/KBI1/PGM, Buffer.Type = . RB5/KBI1/PGM, Description = . RB5, Pin Number.SPDIP, SOIC = . RB5, Pin Number.QFN = . RB5, Pin.Type = I/O. RB5, Buffer.Type = TTL. RB5, Description = Digital I/O.. KBI1, Pin Number.SPDIP, SOIC = . KBI1, Pin Number.QFN = . KBI1, Pin.Type = I. KBI1, Buffer.Type = TTL. KBI1, Description = Interrupt-on-change pin.. PGM, Pin Number.SPDIP, SOIC = . PGM, Pin Number.QFN = . PGM, Pin.Type = I/O. PGM, Buffer.Type = ST. PGM, Description = Low-Voltage ICSP\u2122 Programming enable pin.. RB6/KBI2/PGC, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.SPDIP, SOIC = 27. RB6/KBI2/PGC, Pin Number.QFN = 24. RB6/KBI2/PGC, Pin.Type = . RB6/KBI2/PGC, Buffer.Type = . RB6/KBI2/PGC, Description = . RB6, Pin Number.SPDIP, SOIC = . RB6, Pin Number.QFN = . RB6, Pin.Type = I/O. RB6, Buffer.Type = TTL. RB6, Description = Digital I/O.. KBI2, Pin Number.SPDIP, SOIC = . KBI2, Pin Number.QFN = . KBI2, Pin.Type = I. KBI2, Buffer.Type = TTL. KBI2, Description = Interrupt-on-change pin.. PGC, Pin Number.SPDIP, SOIC = . PGC, Pin Number.QFN = . PGC, Pin.Type = I/O. PGC, Buffer.Type = ST.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPGC, Description = In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD, Pin Number.SPDIP, SOIC = 28. RB7/KBI3/PGD, Pin Number.QFN = 25. RB7/KBI3/PGD, Pin.Type = . RB7/KBI3/PGD, Buffer.Type = . RB7/KBI3/PGD, Description = . RB7, Pin Number.SPDIP, SOIC = . RB7, Pin Number.QFN = . RB7, Pin.Type = I/O. RB7, Buffer.Type = TTL. RB7, Description = Digital I/O.. KBI3, Pin Number.SPDIP, SOIC = . KBI3, Pin Number.QFN = . KBI3, Pin.Type = I. KBI3, Buffer.Type = TTL. KBI3, Description = Interrupt-on-change pin.. PGD, Pin Number.SPDIP, SOIC = .",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPGD, Pin Number.QFN = . PGD, Pin.Type = I/O. PGD, Buffer.Type = ST. PGD, Description = In-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL = TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI RC0 T1OSO, Pin Number.SPDIP, SOIC = 11. RC0/T1OSO/T13CKI RC0 T1OSO, Pin Number.QFN = 8. RC0/T1OSO/T13CKI RC0 T1OSO, Pin.Type = . RC0/T1OSO/T13CKI RC0 T1OSO, Buffer Type = . RC0/T1OSO/T13CKI RC0 T1OSO, Description = PORTC is a bidirectional I/O port.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type = ST. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = O. , Buffer Type = -. , Description = Timer1 oscillator output.. T13CKI, Pin Number.SPDIP, SOIC = . T13CKI, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . T13CKI, Pin.Type = I. T13CKI, Buffer Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.SPDIP, SOIC = 12. RC1/T1OSI/CCP2, Pin Number.QFN = 9. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.SPDIP, SOIC = . RC1, Pin Number.QFN = . RC1, Pin.Type = I/O. RC1, Buffer Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number.SPDIP, SOIC = . T1OSI, Pin Number.QFN = . T1OSI, Pin.Type = I. T1OSI, Buffer Type = Analog. T1OSI, Description =",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTimer1 oscillator input.. CCP2 (2), Pin Number.SPDIP, SOIC = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer Type = . CCP2 (2), Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = . , Buffer Type = ST. , Description = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1, Pin Number.SPDIP, SOIC = 13. RC2/CCP1, Pin Number.QFN = 10. RC2/CCP1, Pin.Type = . RC2/CCP1, Buffer Type = . RC2/CCP1, Description = . RC2, Pin Number.SPDIP, SOIC = . RC2, Pin Number.QFN = . RC2, Pin.Type = I/O. RC2, Buffer Type",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= ST. RC2, Description = Digital I/O.. CCP1, Pin Number.SPDIP, SOIC = . CCP1, Pin Number.QFN = . CCP1, Pin.Type = . CCP1, Buffer Type = . CCP1, Description = Capture 1 input/Compare 1 output/PWM1 output.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type = ST. , Description = . RC3/SCK/SCL, Pin Number.SPDIP, SOIC = 14. RC3/SCK/SCL, Pin Number.QFN = 11. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.SPDIP, SOIC = . RC3, Pin Number.QFN = . RC3, Pin.Type = I/O. RC3, Buffer Type",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= ST. RC3, Description = Digital I/O.. SCK, Pin Number.SPDIP, SOIC = . SCK, Pin Number.QFN = . SCK, Pin.Type = I/O. SCK, Buffer Type = ST. SCK, Description = Synchronous serial clock input/output. SCL, Pin Number.SPDIP, SOIC = . SCL, Pin Number.QFN = . SCL, Pin.Type = I/O. SCL, Buffer Type = ST. SCL, Description = Synchronous serial clock input/output for I 2 C\u2122mode.. RC4/SDI/SDA, Pin Number.SPDIP, SOIC = 15. RC4/SDI/SDA, Pin Number.QFN = 12. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.SPDIP, SOIC = . RC4, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . RC4, Pin.Type = I/O. RC4, Buffer Type = ST. RC4, Description = Digital I/O.. SDI, Pin Number.SPDIP, SOIC = . SDI, Pin Number.QFN = . SDI, Pin.Type = I. SDI, Buffer Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.SPDIP, SOIC = . SDA, Pin Number.QFN = . SDA, Pin.Type = I/O. SDA, Buffer Type = ST. SDA, Description = 2. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = . , Buffer Type = . , Description = I C data I/O.. RC5/SDO, Pin Number.SPDIP, SOIC = 16. RC5/SDO, Pin Number.QFN = 13. RC5/SDO, Pin.Type = . RC5/SDO, Buffer Type = .",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC5/SDO, Description = . RC5, Pin Number.SPDIP, SOIC = . RC5, Pin Number.QFN = . RC5, Pin.Type = I/O. RC5, Buffer Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.SPDIP, SOIC = . SDO, Pin Number.QFN = . SDO, Pin.Type = O. SDO, Buffer Type = -. SDO, Description = SPI data. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = . , Buffer Type = . , Description = out.. RC6/TX/CK, Pin Number.SPDIP, SOIC = 17. RC6/TX/CK, Pin Number.QFN = 14. RC6/TX/CK, Pin.Type = O. RC6/TX/CK, Buffer Type = -. RC6/TX/CK, Description = . TX, Pin Number.SPDIP, SOIC = . TX, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . TX, Pin.Type = I/O. TX, Buffer Type = ST. TX, Description = EUSART asynchronous transmit. EUSART synchronous clock (see. RC7/RX/DT, Pin Number.SPDIP, SOIC = . RC7/RX/DT, Pin Number.QFN = . RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer Type = . RC7/RX/DT, Description = . RC6, Pin Number.SPDIP, SOIC = . RC6, Pin Number.QFN = . RC6, Pin.Type = I/O. RC6, Buffer Type = ST. RC6, Description = Digital I/O.. CK, Pin Number.SPDIP, SOIC = 18. CK, Pin Number.QFN = 15. CK, Pin.Type = I/O I. CK, Buffer Type = ST ST. CK, Description = Digital I/O.. RC7 RX, Pin",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.SPDIP, SOIC = . RC7 RX, Pin Number.QFN = . RC7 RX, Pin.Type = I/O. RC7 RX, Buffer Type = . RC7 RX, Description = EUSART asynchronous receive.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = . , Buffer Type = ST. , Description = EUSART synchronous data (see related TX/CK).. DT RE3, Pin Number.SPDIP, SOIC = -. DT RE3, Pin Number.QFN = -. DT RE3, Pin.Type = -. DT RE3, Buffer Type = -. DT RE3, Description = See MCLR/VPP/RE3 pin.. VSS, Pin Number.SPDIP, SOIC = 8, 19. VSS, Pin Number.QFN = 5, 16. VSS, Pin.Type = P. VSS, Buffer Type = -. VSS, Description = Ground reference for",
    "TABLE 1-2: PIC18F2420/2520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nlogic and I/O pins.. VDD, Pin Number.SPDIP, SOIC = 20. VDD, Pin Number.QFN = 17. VDD, Pin.Type = P. VDD, Buffer Type = -. VDD, Description = Positive supply for logic and I/O pins.\nLegend: TTL = TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3, Pin Number.PDIP = 1. MCLR/VPP/RE3, Pin Number.QFN = 18. MCLR/VPP/RE3, Pin Number.TQFP = 18. MCLR/VPP/RE3, Pin.Type = . MCLR/VPP/RE3, Buffer.Type = . MCLR/VPP/RE3, Description = Master Clear (input) or programming voltage (input).. MCLR, Pin Number.PDIP = . MCLR, Pin Number.QFN = . MCLR, Pin Number.TQFP = . MCLR, Pin.Type = I. MCLR, Buffer.Type = ST. MCLR, Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number.PDIP = . VPP, Pin Number.QFN = . VPP, Pin Number.TQFP = . VPP, Pin.Type = P. VPP, Buffer.Type = . VPP, Description = Programming voltage input..",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS\nRE3, Pin Number.PDIP = . RE3, Pin Number.QFN = . RE3, Pin Number.TQFP = . RE3, Pin.Type = I. RE3, Buffer.Type = ST. RE3, Description = Digital input.. OSC1/CLKI/RA7 OSC1, Pin Number.PDIP = 13. OSC1/CLKI/RA7 OSC1, Pin Number.QFN = 32. OSC1/CLKI/RA7 OSC1, Pin Number.TQFP = 30. OSC1/CLKI/RA7 OSC1, Pin.Type = I. OSC1/CLKI/RA7 OSC1, Buffer.Type = ST. OSC1/CLKI/RA7 OSC1, Description = Oscillator crystal or external clock input. Oscillator crystal input or external clock source input.. CLKI, Pin Number.PDIP = . CLKI, Pin Number.QFN = . CLKI, Pin Number.TQFP = . CLKI, Pin.Type =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS\nI. CLKI, Buffer.Type = CMOS. CLKI, Description = analog otherwise. External clock source input. Always associated with pin function, OSC1. (See related OSC1/CLKI,. RA7, Pin Number.PDIP = . RA7, Pin Number.QFN = . RA7, Pin Number.TQFP = . RA7, Pin.Type = I/O. RA7, Buffer.Type = TTL. RA7, Description = OSC2/CLKO pins.) General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number.PDIP = 14. OSC2/CLKO/RA6, Pin Number.QFN = 33. OSC2/CLKO/RA6, Pin Number.TQFP = 31. OSC2/CLKO/RA6, Pin.Type = . OSC2/CLKO/RA6, Buffer.Type = . OSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number.PDIP =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS\n. OSC2, Pin Number.QFN = . OSC2, Pin Number.TQFP = . OSC2, Pin.Type = O. OSC2, Buffer.Type = -. OSC2, Description = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number.PDIP = . CLKO, Pin Number.QFN = . CLKO, Pin Number.TQFP = . CLKO, Pin.Type = O. CLKO, Buffer.Type = -. CLKO, Description = In RCmode, OSC2 pin outputs CLKO which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number.PDIP = . RA6, Pin Number.QFN = . RA6, Pin Number.TQFP = . RA6, Pin.Type = I/O. RA6, Buffer.Type = TTL. RA6, Description = General purpose I/O pin.\nLegend:\nTTL= TTL compatible input CMOS=",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Pin Number.PDIP = 2. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Pin Number.QFN = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Pin Number.TQFP = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Pin.Type = I/O I I/O I I/O I I O I/O I I I/O I O I/O I I I O. RA0/AN0",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Buffer.Type = TTL Analog TTL Analog TTL Analog Analog Analog TTL Analog Analog ST ST - TTL Analog TTL Analog -. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/V REF -/CV RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI/C1OUT RA4 T0CKI C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4 SS HLVDIN C2OUT RA6, Description = PORTAis a bidirectional",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O port. Digital I/O. Analog input 0. Digital I/O. Analog input 1. Digital I/O. Analog input 2. A/D reference voltage (low) input. Comparator reference voltage output. Digital I/O. Analog input 3. A/D reference voltage (high) input.\nLegend:\nTTL= TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote\n1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Pin Number.PDIP = 33. RB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Pin Number.QFN = 9. RB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Pin Number.TQFP = 8. RB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Pin.Type = . RB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Buffer.Type = . RB0/INT0/FLT0/AN12 RB0 INT0 FLT0, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = TTL. , Description = Digital I/O.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = .",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n, Pin.Type = I. , Buffer.Type = ST. , Description = External interrupt 0.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I. , Buffer.Type = ST. , Description = PWM Fault input for Enhanced CCP1.. AN12, Pin Number.PDIP = . AN12, Pin Number.QFN = . AN12, Pin Number.TQFP = . AN12, Pin.Type = I. AN12, Buffer.Type = Analog. AN12, Description = Analog input 12.. RB1/INT1/AN10, Pin Number.PDIP = 34. RB1/INT1/AN10, Pin Number.QFN = 10. RB1/INT1/AN10, Pin Number.TQFP = 9. RB1/INT1/AN10, Pin.Type = . RB1/INT1/AN10, Buffer.Type = . RB1/INT1/AN10, Description = . RB1, Pin",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . RB1, Pin Number.QFN = . RB1, Pin Number.TQFP = . RB1, Pin.Type = I/O. RB1, Buffer.Type = TTL. RB1, Description = Digital I/O.. INT1, Pin Number.PDIP = . INT1, Pin Number.QFN = . INT1, Pin Number.TQFP = . INT1, Pin.Type = I. INT1, Buffer.Type = ST. INT1, Description = External interrupt 1.. AN10, Pin Number.PDIP = . AN10, Pin Number.QFN = . AN10, Pin Number.TQFP = . AN10, Pin.Type = I. AN10, Buffer.Type = . AN10, Description = Analog input 10.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = Analog. , Description = . RB2/INT2/AN8, Pin Number.PDIP =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n35. RB2/INT2/AN8, Pin Number.QFN = 11. RB2/INT2/AN8, Pin Number.TQFP = 10. RB2/INT2/AN8, Pin.Type = . RB2/INT2/AN8, Buffer.Type = . RB2/INT2/AN8, Description = . RB2, Pin Number.PDIP = . RB2, Pin Number.QFN = . RB2, Pin Number.TQFP = . RB2, Pin.Type = I/O. RB2, Buffer.Type = TTL. RB2, Description = Digital I/O.. INT2, Pin Number.PDIP = . INT2, Pin Number.QFN = . INT2, Pin Number.TQFP = . INT2, Pin.Type = I. INT2, Buffer.Type = ST. INT2, Description = External interrupt 2.. AN8, Pin Number.PDIP = . AN8, Pin Number.QFN = . AN8, Pin Number.TQFP = . AN8,",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = . AN8, Buffer.Type = . AN8, Description = Analog input 8.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I. , Buffer.Type = Analog. , Description = . RB3/AN9/CCP2, Pin Number.PDIP = 36. RB3/AN9/CCP2, Pin Number.QFN = 12. RB3/AN9/CCP2, Pin Number.TQFP = 11. RB3/AN9/CCP2, Pin.Type = . RB3/AN9/CCP2, Buffer.Type = . RB3/AN9/CCP2, Description = . RB3, Pin Number.PDIP = . RB3, Pin Number.QFN = . RB3, Pin Number.TQFP = . RB3, Pin.Type = I/O. RB3, Buffer.Type = TTL. RB3, Description = Digital I/O.. AN9, Pin",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . AN9, Pin Number.QFN = . AN9, Pin Number.TQFP = . AN9, Pin.Type = I. AN9, Buffer.Type = Analog. AN9, Description = Analog input 9.. CCP2 (1), Pin Number.PDIP = . CCP2 (1), Pin Number.QFN = . CCP2 (1), Pin Number.TQFP = . CCP2 (1), Pin.Type = I/O. CCP2 (1), Buffer.Type = ST. CCP2 (1), Description = Capture 2 input/Compare 2 output/PWM2 output.. RB4/KBI0/AN11, Pin Number.PDIP = 37. RB4/KBI0/AN11, Pin Number.QFN = 14. RB4/KBI0/AN11, Pin Number.TQFP = 14. RB4/KBI0/AN11, Pin.Type = . RB4/KBI0/AN11, Buffer.Type =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RB4/KBI0/AN11, Description = . RB4, Pin Number.PDIP = . RB4, Pin Number.QFN = . RB4, Pin Number.TQFP = . RB4, Pin.Type = I/O. RB4, Buffer.Type = TTL. RB4, Description = Digital I/O.. KBI0, Pin Number.PDIP = . KBI0, Pin Number.QFN = . KBI0, Pin Number.TQFP = . KBI0, Pin.Type = I. KBI0, Buffer.Type = TTL. KBI0, Description = Interrupt-on-change pin.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = . , Description = Analog input 11.. AN11, Pin Number.PDIP = . AN11, Pin Number.QFN = . AN11, Pin Number.TQFP = . AN11, Pin.Type = I. AN11,",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = Analog. AN11, Description = . RB5/KBI1/PGM, Pin Number.PDIP = 38. RB5/KBI1/PGM, Pin Number.QFN = 15. RB5/KBI1/PGM, Pin Number.TQFP = 15. RB5/KBI1/PGM, Pin.Type = . RB5/KBI1/PGM, Buffer.Type = . RB5/KBI1/PGM, Description = . RB5, Pin Number.PDIP = . RB5, Pin Number.QFN = . RB5, Pin Number.TQFP = . RB5, Pin.Type = I/O. RB5, Buffer.Type = TTL. RB5, Description = Digital I/O.. KBI1, Pin Number.PDIP = . KBI1, Pin Number.QFN = . KBI1, Pin Number.TQFP = . KBI1, Pin.Type = I. KBI1, Buffer.Type = TTL. KBI1, Description =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nInterrupt-on-change pin.. PGM, Pin Number.PDIP = . PGM, Pin Number.QFN = . PGM, Pin Number.TQFP = . PGM, Pin.Type = I/O. PGM, Buffer.Type = ST. PGM, Description = Low-Voltage ICSP\u2122 Programming enable pin.. RB6/KBI2/PGC, Pin Number.PDIP = 39. RB6/KBI2/PGC, Pin Number.QFN = 16. RB6/KBI2/PGC, Pin Number.TQFP = 16. RB6/KBI2/PGC, Pin.Type = . RB6/KBI2/PGC, Buffer.Type = . RB6/KBI2/PGC, Description = . RB6, Pin Number.PDIP = . RB6, Pin Number.QFN = . RB6, Pin Number.TQFP = . RB6, Pin.Type = I/O. RB6, Buffer.Type = TTL. RB6, Description = Digital",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. KBI2, Pin Number.PDIP = . KBI2, Pin Number.QFN = . KBI2, Pin Number.TQFP = . KBI2, Pin.Type = I. KBI2, Buffer.Type = TTL. KBI2, Description = Interrupt-on-change pin.. PGC, Pin Number.PDIP = . PGC, Pin Number.QFN = . PGC, Pin Number.TQFP = . PGC, Pin.Type = . PGC, Buffer.Type = . PGC, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = ST. , Description = In-Circuit Debugger and ICSP programming. RB7/KBI3/PGD, Pin Number.PDIP = 40. RB7/KBI3/PGD, Pin Number.QFN = 17. RB7/KBI3/PGD, Pin Number.TQFP",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= 17. RB7/KBI3/PGD, Pin.Type = . RB7/KBI3/PGD, Buffer.Type = . RB7/KBI3/PGD, Description = . RB7, Pin Number.PDIP = . RB7, Pin Number.QFN = . RB7, Pin Number.TQFP = . RB7, Pin.Type = I/O. RB7, Buffer.Type = TTL. RB7, Description = Digital I/O.. KBI3, Pin Number.PDIP = . KBI3, Pin Number.QFN = . KBI3, Pin Number.TQFP = . KBI3, Pin.Type = I. KBI3, Buffer.Type = TTL. KBI3, Description = Interrupt-on-change pin.. PGD, Pin Number.PDIP = . PGD, Pin Number.QFN = . PGD, Pin Number.TQFP = . PGD, Pin.Type = I/O. PGD, Buffer.Type = ST. PGD, Description =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nIn-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL= TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number.PDIP = 15. RC0/T1OSO/T13CKI, Pin Number.QFN = 34. RC0/T1OSO/T13CKI, Pin Number.TQFP = 32. RC0/T1OSO/T13CKI, Pin.Type = . RC0/T1OSO/T13CKI, Buffer.Type = . RC0/T1OSO/T13CKI, Description = . RC0, Pin Number.PDIP = . RC0, Pin Number.QFN = . RC0, Pin Number.TQFP = . RC0, Pin.Type = I/O. RC0, Buffer.Type = ST. RC0, Description = Digital I/O.. T1OSO, Pin Number.PDIP = . T1OSO, Pin Number.QFN = . T1OSO, Pin Number.TQFP = . T1OSO, Pin.Type = O. T1OSO, Buffer.Type = -. T1OSO, Description = Timer1 oscillator",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\noutput.. T13CKI, Pin Number.PDIP = . T13CKI, Pin Number.QFN = . T13CKI, Pin Number.TQFP = . T13CKI, Pin.Type = I. T13CKI, Buffer.Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.PDIP = 16. RC1/T1OSI/CCP2, Pin Number.QFN = 35. RC1/T1OSI/CCP2, Pin Number.TQFP = 35. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer.Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.PDIP = . RC1, Pin Number.QFN = . RC1, Pin Number.TQFP = . RC1, Pin.Type = I/O. RC1, Buffer.Type = ST. RC1, Description = Digital",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. T1OSI, Pin Number.PDIP = . T1OSI, Pin Number.QFN = . T1OSI, Pin Number.TQFP = . T1OSI, Pin.Type = I. T1OSI, Buffer.Type = CMOS. T1OSI, Description = Timer1 oscillator input.. CCP2 (2), Pin Number.PDIP = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin Number.TQFP = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer.Type = ST. CCP2 (2), Description = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1/P1A, Pin Number.PDIP = 17. RC2/CCP1/P1A, Pin Number.QFN = 36. RC2/CCP1/P1A, Pin Number.TQFP = 36.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC2/CCP1/P1A, Pin.Type = . RC2/CCP1/P1A, Buffer.Type = . RC2/CCP1/P1A, Description = . RC2, Pin Number.PDIP = . RC2, Pin Number.QFN = . RC2, Pin Number.TQFP = . RC2, Pin.Type = I/O. RC2, Buffer.Type = ST. RC2, Description = Digital I/O.. CCP1, Pin Number.PDIP = . CCP1, Pin Number.QFN = . CCP1, Pin Number.TQFP = . CCP1, Pin.Type = I/O. CCP1, Buffer.Type = ST. CCP1, Description = Capture 1 input/Compare 1 output/PWM1 output.. P1A, Pin Number.PDIP = . P1A, Pin Number.QFN = . P1A, Pin Number.TQFP = . P1A, Pin.Type = O. P1A,",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = -. P1A, Description = Enhanced CCP1 output.. RC3/SCK/SCL, Pin Number.PDIP = 18. RC3/SCK/SCL, Pin Number.QFN = 37. RC3/SCK/SCL, Pin Number.TQFP = 37. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer.Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.PDIP = . RC3, Pin Number.QFN = . RC3, Pin Number.TQFP = . RC3, Pin.Type = I/O. RC3, Buffer.Type = ST. RC3, Description = Digital I/O.. SCK, Pin Number.PDIP = . SCK, Pin Number.QFN = . SCK, Pin Number.TQFP = . SCK, Pin.Type = I/O. SCK, Buffer.Type = ST. SCK, Description = Synchronous serial",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nclock input/output for SPI mode.. SCL, Pin Number.PDIP = . SCL, Pin Number.QFN = . SCL, Pin Number.TQFP = . SCL, Pin.Type = I/O. SCL, Buffer.Type = ST. SCL, Description = Synchronous serial clock input/output for I 2 C\u2122mode.. RC4/SDI/SDA, Pin Number.PDIP = 23. RC4/SDI/SDA, Pin Number.QFN = 42. RC4/SDI/SDA, Pin Number.TQFP = 42. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer.Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.PDIP = . RC4, Pin Number.QFN = . RC4, Pin Number.TQFP = . RC4, Pin.Type = I/O. RC4, Buffer.Type = ST. RC4, Description = Digital",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. SDI, Pin Number.PDIP = . SDI, Pin Number.QFN = . SDI, Pin Number.TQFP = . SDI, Pin.Type = I. SDI, Buffer.Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.PDIP = . SDA, Pin Number.QFN = . SDA, Pin Number.TQFP = . SDA, Pin.Type = I/O. SDA, Buffer.Type = ST. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number.PDIP = 24. RC5/SDO, Pin Number.QFN = 43. RC5/SDO, Pin Number.TQFP = 43. RC5/SDO, Pin.Type = . RC5/SDO, Buffer.Type = . RC5/SDO, Description = . RC5, Pin Number.PDIP = . RC5, Pin Number.QFN = . RC5, Pin Number.TQFP =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RC5, Pin.Type = I/O. RC5, Buffer.Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.PDIP = . SDO, Pin Number.QFN = . SDO, Pin Number.TQFP = . SDO, Pin.Type = O. SDO, Buffer.Type = -. SDO, Description = SPI data out.. RC6/TX/CK, Pin Number.PDIP = 25. RC6/TX/CK, Pin Number.QFN = 44. RC6/TX/CK, Pin Number.TQFP = 44. RC6/TX/CK, Pin.Type = I/O. RC6/TX/CK, Buffer.Type = ST. RC6/TX/CK, Description = Digital I/O.. RC6, Pin Number.PDIP = . RC6, Pin Number.QFN = . RC6, Pin Number.TQFP = . RC6, Pin.Type = O. RC6, Buffer.Type = -. RC6, Description",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= EUSART asynchronous transmit.. TX CK, Pin Number.PDIP = . TX CK, Pin Number.QFN = . TX CK, Pin Number.TQFP = . TX CK, Pin.Type = . TX CK, Buffer.Type = . TX CK, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = ST. , Description = EUSART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.PDIP = 26. RC7/RX/DT, Pin Number.QFN = 1. RC7/RX/DT, Pin Number.TQFP = 1. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer.Type = . RC7/RX/DT, Description = . RC7, Pin Number.PDIP = . RC7, Pin Number.QFN = .",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC7, Pin Number.TQFP = . RC7, Pin.Type = I/O. RC7, Buffer.Type = ST. RC7, Description = Digital I/O.. RX, Pin Number.PDIP = . RX, Pin Number.QFN = . RX, Pin Number.TQFP = . RX, Pin.Type = I. RX, Buffer.Type = ST. RX, Description = EUSART asynchronous receive.. DT, Pin Number.PDIP = . DT, Pin Number.QFN = . DT, Pin Number.TQFP = . DT, Pin.Type = I/O. DT, Buffer.Type = ST. DT, Description = EUSART synchronous data (see related TX/CK).\nLegend:\nTTL= TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/PSP0 RD0 PSP0, Pin Number.PDIP = 19. RD0/PSP0 RD0 PSP0, Pin Number.QFN = 38. RD0/PSP0 RD0 PSP0, Pin Number.TQFP = 38. RD0/PSP0 RD0 PSP0, Pin.Type = I/O I/O. RD0/PSP0 RD0 PSP0, Buffer.Type = ST TTL. RD0/PSP0 RD0 PSP0, Description = Digital I/O. Parallel Client Port data.. RD1/PSP1 RD1 PSP1, Pin Number.PDIP = 20. RD1/PSP1 RD1 PSP1, Pin Number.QFN = 39. RD1/PSP1 RD1 PSP1, Pin Number.TQFP = 39. RD1/PSP1 RD1 PSP1, Pin.Type = I/O I/O. RD1/PSP1 RD1 PSP1, Buffer.Type = ST TTL.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD1/PSP1 RD1 PSP1, Description = Digital I/O. Parallel Client Port data.. PSP2 RD3/PSP3 RD3 PSP3, Pin Number.PDIP = 22. PSP2 RD3/PSP3 RD3 PSP3, Pin Number.QFN = 41. PSP2 RD3/PSP3 RD3 PSP3, Pin Number.TQFP = 41. PSP2 RD3/PSP3 RD3 PSP3, Pin.Type = I/O I/O I/O. PSP2 RD3/PSP3 RD3 PSP3, Buffer.Type = TTL ST TTL. PSP2 RD3/PSP3 RD3 PSP3, Description = Parallel Client Port data. Digital I/O. Parallel Client Port data.. RD4/PSP4 RD4, Pin Number.PDIP = . RD4/PSP4 RD4, Pin Number.QFN = 2. RD4/PSP4 RD4, Pin Number.TQFP = 2.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD4/PSP4 RD4, Pin.Type = I/O. RD4/PSP4 RD4, Buffer.Type = ST. RD4/PSP4 RD4, Description = . PSP4 RD5/PSP5/P1B RD5, Pin Number.PDIP = 27. PSP4 RD5/PSP5/P1B RD5, Pin Number.QFN = . PSP4 RD5/PSP5/P1B RD5, Pin Number.TQFP = . PSP4 RD5/PSP5/P1B RD5, Pin.Type = I/O. PSP4 RD5/PSP5/P1B RD5, Buffer.Type = TTL. PSP4 RD5/PSP5/P1B RD5, Description = Digital I/O. Parallel Client Port data.. PSP5 P1B, Pin Number.PDIP = 28. PSP5 P1B, Pin Number.QFN = 3. PSP5 P1B, Pin Number.TQFP",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= 3 4. PSP5 P1B, Pin.Type = I/O I/O O. PSP5 P1B, Buffer.Type = ST TTL -. PSP5 P1B, Description = Digital I/O. Parallel Client Port data. Enhanced CCP1 output.. RD6/PSP6/P1C RD6 PSP6, Pin Number.PDIP = 29. RD6/PSP6/P1C RD6 PSP6, Pin Number.QFN = 4. RD6/PSP6/P1C RD6 PSP6, Pin Number.TQFP = . RD6/PSP6/P1C RD6 PSP6, Pin.Type = I/O I/O O. RD6/PSP6/P1C RD6 PSP6, Buffer.Type = ST TTL. RD6/PSP6/P1C RD6 PSP6, Description = Digital I/O. Parallel Client Port data.. RD7/PSP7/P1D RD7, Pin",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = 30. RD7/PSP7/P1D RD7, Pin Number.QFN = 5. RD7/PSP7/P1D RD7, Pin Number.TQFP = 5. RD7/PSP7/P1D RD7, Pin.Type = I/O. RD7/PSP7/P1D RD7, Buffer.Type = ST. RD7/PSP7/P1D RD7, Description = Digital I/O.. PSP7 P1D, Pin Number.PDIP = . PSP7 P1D, Pin Number.QFN = . PSP7 P1D, Pin Number.TQFP = . PSP7 P1D, Pin.Type = I/O O. PSP7 P1D, Buffer.Type = TTL. PSP7 P1D, Description = Parallel Client Port data.\nLegend:\nTTL= TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.PDIP = 8. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.QFN = 25. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.TQFP = 25 26. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Type.Pin Type = I/O I I I/O I I I/O I. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Buffer Type.Buffer Type = ST TTL Analog ST TTL Analog. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Description.Description =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPORTE is a bidirectional I/O port. Digital I/O. Read control for Parallel Client Port (see also WRand CS pins). Analog input 5. Digital I/O.. RE1/WR/AN6, Pin Number.PDIP = 9. RE1/WR/AN6, Pin Number.QFN = 26. RE1/WR/AN6, Pin Number.TQFP = . RE1/WR/AN6, Pin Type.Pin Type = . RE1/WR/AN6, Buffer Type.Buffer Type = . RE1/WR/AN6, Description.Description = Write control for Parallel Client Port (see CS and RD pins).. AN7, Pin Number.PDIP = 10. AN7, Pin Number.QFN = 27. AN7, Pin Number.TQFP = 27. AN7, Pin Type.Pin Type = I. AN7, Buffer Type.Buffer Type = ST TTL Analog. AN7, Description.Description = Digital I/O. Chip Select control for Parallel Client Port (see related RD and WR). Analog",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\ninput 7.. RE3, Pin Number.PDIP = -. RE3, Pin Number.QFN = -. RE3, Pin Number.TQFP = -. RE3, Pin Type.Pin Type = -. RE3, Buffer Type.Buffer Type = -. RE3, Description.Description = See MCLR/VPP/RE3 pin.. VSS, Pin Number.PDIP = 12, 31. VSS, Pin Number.QFN = 6, 30, 31. VSS, Pin Number.TQFP = 6, 29. VSS, Pin Type.Pin Type = P. VSS, Buffer Type.Buffer Type = -. VSS, Description.Description = Ground reference for logic and I/O pins.. VDD, Pin Number.PDIP = 11, 32. VDD, Pin Number.QFN = 7, 8, 28, 29. VDD, Pin Number.TQFP = 7, 28. VDD, Pin Type.Pin Type = P. VDD, Buffer Type.Buffer Type = -. VDD, Description.Description =",
    "TABLE 1-3: PIC18F4420/4520 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPositive supply for logic and I/O pins.. NC, Pin Number.PDIP = -. NC, Pin Number.QFN = 13. NC, Pin Number.TQFP = 12,13, 33, 34. NC, Pin Type.Pin Type = -. NC, Buffer Type.Buffer Type = -. NC, Description.Description = No Connect.\nLegend:\nTTL= TTL compatible input CMOS=\nCMOS compatible input or output\nST= Schmitt Trigger input with CMOS levelsI=\nInput\nO = Output\nP\n=\nPower\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "2.1 Oscillator Types\nPIC18F2420/2520/4420/4520 devices can be operated in ten different oscillator modes. The user can program the  Configuration  bits,  FOSC<3:0>,  in  Configuration Register 1H to select one of these ten modes:\n1. LP\nLow-Power Crystal\n2. XT\nCrystal/Resonator\n3. HS\nHigh-Speed Crystal/Resonator\n4. HSPLL\nHigh-Speed Crystal/Resonator with PLL Enabled\n5. RC\nExternal Resistor/Capacitor with\nFOSC/4 Output on RA6\n6. RCIO\nExternal Resistor/Capacitor with I/O on RA6\n7. INTIO1\nInternal Oscillator with FOSC/4 Output on RA6 and I/O on RA7\n8. INTIO2\nInternal Oscillator with I/O on RA6 and RA7\n9. EC\nExternal Clock with FOSC/4 Output\n10. ECIO\nExternal Clock with I/O on RA6",
    "2.2 Crystal Oscillator/Ceramic Resonators\nIn XT, LP, HS or HSPLL Oscillator modes, a crystal or ceramic  resonator  is  connected  to  the  OSC1  and OSC2 pins to establish oscillation. Figure 2-1 shows the pin connections.\nThe oscillator design requires the use of a parallel cut crystal.\nNote:\nUse of a series cut crystal may give a fre- quency out of the crystal  manufacturer's specifications.\nCRYSTAL/CERAMIC RESONATOR OPERATION (XT, LP, HS OR HSPLL CONFIGURATION)\nNote 1: See Table 2-1 and Table 2-2 for initial values of C1 and C2.\n2: A series resistor (RS) may be required for AT strip cut crystals.\n3: RF varies with the oscillator mode chosen.",
    "Typical Capacitor Values Used:\nXT, Freq = 3.58 MHz. XT, OSC1 = 15 pF. XT, OSC2 = 15 pF 15 pF 30 pF. XT, Freq = 4.19 MHz. XT, OSC1 = 15 pF. XT, OSC2 = . XT, Freq = 4 MHz. XT, OSC1 = 30 pF. XT, OSC2 = . XT, Freq = 4 MHz. XT, OSC1 = 50 pF. XT, OSC2 = 50 pF",
    "Capacitor values are for design guidance only.\nDifferent capacitor values may be required to produce acceptable  oscillator  operation.  The  user  needs  to test the performance  of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following Table 2-2 for additional information.",
    "Note:\nWhen using  resonators  with  frequencies above  3.5  MHz,  the  use  of  HS  mode, rather  than  XT  mode,  is  recommended. HS  mode  may  be  used  at  any  VDD  for which  the  controller  is  rated.  If  HS  is selected, it is possible that the gain of the oscillator will overdrive the resonator. Therefore, a series resistor needs toClient be placed between the OSC2 pin and the resonator. As  a  good  starting  point,  the recommended value of RS is 330 \uf057 .",
    "PIC18F2420/2520/4420/4520\nTABLE 2-2:",
    "CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nAn external clock source may also be connected to the OSC1 pin in the HS mode, as shown in Figure 2-2 .",
    "CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nLP, Crystal Freq.Crystal Freq = 32 kHz. LP, Typical Capacitor Values Tested:.C1 = 30 pF. LP, Typical Capacitor Values Tested:.C2 = 30 pF. XT, Crystal Freq.Crystal Freq = 1 MHz 4 MHz. XT, Typical Capacitor Values Tested:.C1 = 15 pF 15 pF. XT, Typical Capacitor Values Tested:.C2 = 15 pF 15 pF. HS, Crystal Freq.Crystal Freq = 4 MHz 10 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = . HS, Typical Capacitor Values Tested:.C1 = . HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 20 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF.",
    "CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nHS, Crystal Freq.Crystal Freq = 25 MHz. HS, Typical Capacitor Values Tested:.C1 = 0 pF. HS, Typical Capacitor Values Tested:.C2 = 5 pF. HS, Crystal Freq.Crystal Freq = 25 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF\nCapacitor values are for design guidance only.\nThese capacitors were tested with the crystals listed below for basic start-up and operation. These values are not optimized.\nDifferent capacitor values may be required to produce acceptable  oscillator  operation.  The  user  needs  to test the performance  of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following  this  table  for  additional information.\n32 kHz, Crystals Used: = 4 MHz. 25 MHz, Crystals Used: = 10 MHz. 1 MHz, Crystals Used: = 20 MHz",
    "CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nNote 1: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n2: When operating below 3V VDD, or when using certain ceramic resonators at any voltage, it may be necessary to use the HS mode or switch to a crystal oscillator.\n3: Since each resonator/crystal has its own characteristics, the user needs to consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Rs may be required to avoid overdriving crystals with low drive level specification.\n5: Always verify oscillator performance over the  VDD  and  temperature  range  that  is expected for the application.\nFIGURE 2-2: EXTERNAL CLOCK INPUT OPERATION (HS OSC CONFIGURATION)",
    "2.3 External Clock Input\nThe EC and ECIO Oscillator modes require an external clock source to be connected to the OSC1 pin. There is no  oscillator  start-up  time  required  after  a  Power-on Reset or after an exit from Sleep mode.\nIn  the  EC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 2-3 shows the pin connections for the EC Oscillator mode.",
    "EXTERNAL CLOCK INPUT OPERATION (EC CONFIGURATION)\nThe ECIO Oscillator mode functions like the EC mode, except that the OSC2 pin becomes an additional general  purpose  I/O  pin.  The  I/O  pin  becomes  bit  6  of PORTA (RA6). Figure 2-4 shows the pin connections for the ECIO Oscillator mode.",
    "2.4 RC Oscillator\nFor timing insensitive applications, the 'RC'  and 'RCIO'  device  options  offer  additional  cost  savings. The actual oscillator frequency is a function of several factors:\n\u00b7 supply voltage\n\u00b7 values of the external resistor (REXT) and capacitor (CEXT)\n\u00b7 operating temperature\nGiven the same device, operating voltage and temperature and component values, there will also be unit-to-unit frequency variations. These are due to factors such as:\n\u00b7 normal manufacturing variation\n\u00b7 difference in lead frame capacitance between package types (especially for low CEXT values)\n\u00b7 variations within the tolerance of limits of REXT and CEXT\nIn  the  RC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 2-5 shows  how  the  R/C  combination  is connected.",
    "FIGURE 2-5: RC OSCILLATOR MODE\nThe RCIO Oscillator mode ( Figure 2-6 ) functions like the RC mode, except that the OSC2 pin becomes an additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6).",
    "2.5 PLL Frequency Multiplier\nA Phase Locked Loop (PLL) circuit is provided as an option  for  users  who  wish  to  use  a  lower  frequency oscillator circuit or to clock the device up to its highest rated frequency from a crystal oscillator. This may be useful for customers who are concerned with EMI due to high-frequency crystals or users who require higher clock speeds from an internal oscillator.",
    "2.5.1 HSPLL OSCILLATOR MODE\nThe  HSPLL  mode  makes  use  of  the  HS  Oscillator mode for frequencies up to 10 MHz. A PLL then multiplies the oscillator output frequency by 4 to produce an internal clock frequency up to 40 MHz. The PLLEN bit is not available in this oscillator mode.\nThe PLL is only available to the crystal oscillator when the FOSC<3:0> Configuration bits are programmed for HSPLL mode (= 0110 ).",
    "2.5.2 PLL AND INTOSC\nThe PLL is also available to the internal oscillator block in selected oscillator modes. In this configuration, the PLL is enabled in software and generates a clock output of up to 32 MHz. The operation of INTOSC with the PLL  is  described  in Section 2.6.4  'PLL  in  INTOSC Modes' .",
    "2.6 Internal Oscillator Block\nThe PIC18F2420/2520/4420/4520 devices include an internal oscillator block which generates two different clock signals; either can  be  used  as  the  microcontroller's clock source. This may eliminate the need for  external  oscillator  circuits  on  the  OSC1  and/or OSC2 pins.\nThe main output (INTOSC) is an 8 MHz clock source which can be used to directly drive the device clock. It also drives a postscaler which can provide a range of clock frequencies from 31 kHz to 4 MHz. The INTOSC output is enabled when a clock frequency from 125 kHz to 8 MHz is selected.\nThe  other  clock  source  is  the  internal  RC  oscillator (INTRC),  which  provides  a  nominal  31 kHz  output. INTRC is enabled if it is selected as the device clock source; it is also enabled automatically when any of the following are enabled:\n\u00b7 Power-up Timer\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Watchdog Timer\n\u00b7 Two-Speed Start-up\nThese  features  are  discussed  in  greater  detail  in Section 23.0 'Special Features of the CPU' .",
    "2.6 Internal Oscillator Block\nThe  clock  source  frequency  (INTOSC  direct,  INTRC direct or INTOSC postscaler) is selected by configuring the IRCF bits of the OSCCON register (page 27).",
    "2.6.1 INTIO MODES\nUsing the internal oscillator as the clock source eliminates the need for up to two external oscillator pins, which  can  then  be  used  for  digital  I/O.  Two  distinct configurations are available:\n\u00b7 In INTIO1 mode, the OSC2 pin outputs FOSC/4, while OSC1 functions as RA7 for digital input and output.\n\u00b7 In INTIO2 mode, OSC1 functions as RA7 and OSC2 functions as RA6, both for digital input and output.",
    "2.6.2 INTOSC OUTPUT FREQUENCY\nThe internal oscillator block is calibrated at the factory to produce an INTOSC output frequency of 8.0 MHz.\nThe  INTRC  oscillator  operates  independently  of  the INTOSC  source.  Any  changes  in  INTOSC  across voltage and temperature are not necessarily reflected by changes in INTRC and vice versa.",
    "2.6.3 OSCTUNE REGISTER\nThe internal oscillator's output has been calibrated at the factory but can be adjusted in the user's application. This is done by writing to the OSCTUNE register ( Register 2-1 ).\nWhen the OSCTUNE register is modified, the INTOSC frequency will begin shifting to the new frequency. The INTRC  clock  will  reach  the  new  frequency  within 8 clock cycles (approximately 8 * 32 \uf06d s = 256 \uf06d s). The INTOSC clock will stabilize within 1 ms. Code execution continues during this shift. There is no indication that the shift has occurred.\nThe OSCTUNE register also implements the INTSRC and PLLEN bits, which control certain features of the internal oscillator block. The INTSRC bit allows users to  select  which  internal  oscillator  provides  the  clock source when the 31 kHz frequency option is selected. This  is  covered  in  greater  detail  in Section 2.7.1 'Oscillator Control Register' .\nThe PLLEN bit controls the operation of the frequency multiplier, PLL, in internal oscillator modes.",
    "2.6.4 PLL IN INTOSC MODES\nThe 4x frequency multiplier can be used with the internal  oscillator  block  to  produce  faster  device  clock speeds  than  are  normally  possible  with  an  internal oscillator.  When  enabled,  the  PLL  produces  a  clock speed of up to 32 MHz.\nUnlike  HSPLL  mode,  the  PLL  is  controlled  through software. The control bit,  PLLEN (OSCTUNE<6>), is used to enable or disable its operation.\nThe PLL is available when the device is configured to use  the  internal  oscillator  block  as  its  primary  clock source (FOSC<3:0> = 1001 or 1000 ). Additionally, the PLL  will  only  function  when  the  selected  output  frequency is either 4 MHz or 8 MHz (OSCCON<6:4> = 111 or 110 ). If both of these conditions are not met, the PLL is disabled.\nThe PLLEN control bit is only functional in those internal oscillator modes where the PLL is available. In all other  modes,  it  is  forced  to  ' 0 ' and  is  effectively unavailable.",
    "2.6.5 INTOSC FREQUENCY DRIFT\nThe  factory  calibrates  the  internal  oscillator  block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes, which can affect the controller operation in a variety of ways. It is possible to adjust the INTOSC frequency by modifying the value in the OSCTUNE register. This has no effect on the INTRC clock source frequency.\nTuning the INTOSC source requires knowing when to make the adjustment, in which direction it needs to be made,  and  in  some  cases,  how  large  a  change  is needed. Three compensation techniques are discussed in Section 2.6.5.1 'Compensating with the EUSART' , Section 2.6.5.2 'Compensating with the Timers' and Section 2.6.5.3 'Compensating with the CCP Module in Capture Mode' , but other techniques may be used.",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nINTSRC, R/W-0 (1) = PLLEN (1). INTSRC, U-0 = -. INTSRC, R/W-0 = TUN4. INTSRC, R/W-0 = TUN3. INTSRC, R/W-0 = TUN2. INTSRC, R/W-0 = TUN1. INTSRC, R/W-0 = TUN0. bit 7 bit 0, R/W-0 (1) = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nINTSRC: Internal Oscillator Low-Frequency Source Select bit\n1 = 31.25 kHz device clock derived from 8 MHz INTOSC source (divide-by-256 enabled) 0 = 31 kHz device clock derived directly from INTRC internal oscillator\nbit 6\nPLLEN: Frequency Multiplier PLL for INTOSC Enable bit (1)\n1 = PLL enabled for INTOSC (4 MHz and 8 MHz only)\n0 = PLL disabled\nbit 5\nUnimplemented: Read as ' 0 '",
    "bit 4-0 TUN<4:0>: Frequency Tuning bits\n011111 = Maximum frequency\n\u2022\n\u2022\n\u2022\n\u2022\n000001\n000000 = Center frequency. Oscillator module is running at the calibrated frequency.\n111111\n\u2022\n\u2022\n\u2022\n\u2022\n100000 = Minimum frequency",
    "2.6.5.1 Compensating with the EUSART\nAn  adjustment  may  be  required  when  the  EUSART begins to generate framing errors or receives data with errors  while  in  Asynchronous  mode.  Framing  errors indicate that the device clock frequency is too high. To adjust  for  this,  decrement  the  value  in  OSCTUNE  to reduce the clock frequency. On the other hand, errors in data may suggest that the clock speed is too low. To compensate,  increment  OSCTUNE  to  increase  the clock frequency.",
    "2.6.5.2 Compensating with the Timers\nThis technique compares device clock speed to some reference clock. Two timers may be used; one timer is clocked  by  the  peripheral  clock,  while  the  other  is clocked by a fixed reference source, such as the Timer1 oscillator.\nBoth timers are cleared, but the timer clocked by the reference  generates  interrupts.  When  an  interrupt occurs,  the  internally  clocked  timer  is  read  and  both timers are cleared. If the internally clocked timer value is  greater  than  expected,  then  the  internal  oscillator block is running too fast. To adjust for this, decrement the OSCTUNE register.",
    "2.6.5.2 Compensating with the Timers\nA CCP module can use free-running Timer1 (or Timer3),  clocked  by  the  internal  oscillator  block  and  an external event with a known period (i.e., AC power frequency). The time of the first event is captured in the CCPRxH:CCPRxL  registers  and  is  recorded  for  use later.  When  the  second  event  causes  a  capture,  the time of the first event is subtracted from the time of the second event. Since the period of the external event is known,  the  time  difference  between  events  can  be calculated.\nIf  the  measured time is much greater than the calculated  time,  the  internal  oscillator  block  is  running  too fast; to compensate, decrement the OSCTUNE register. If the measured time is much less than the calculated time, the internal oscillator block is running too slow; to compensate, increment the OSCTUNE register.",
    "2.7 Clock Sources and Oscillator Switching\nLike  previous  PIC18  devices,  the  PIC18F2420/2520/ 4420/4520  family  includes  a  feature  that  allows  the device clock source to be switched from the main oscillator to an alternate low-frequency clock source. PIC18F2420/2520/4420/4520 devices offer two alternate clock sources. When an alternate clock source is enabled, the various power-managed operating modes are available.\nEssentially,  there  are  three  clock  sources  for  these devices:\n\u00b7 Primary oscillators\n\u00b7 Secondary oscillators\n\u00b7 Internal oscillator block\nThe primary oscillators include the External Crystal and  Resonator  modes,  the  External  RC  modes,  the External Clock modes and the internal oscillator block. The particular mode is defined by the FOSC<3:0> Configuration bits. The details of these modes are covered earlier in this chapter.\nThe secondary oscillators are those external sources not  connected  to  the  OSC1  or  OSC2  pins.  These sources  may  continue  to  operate  even  after  the controller is placed in a power-managed mode.",
    "2.7 Clock Sources and Oscillator Switching\nPIC18F2420/2520/4420/4520 devices offer the Timer1 oscillator as a secondary oscillator. This oscillator, in all power-managed  modes,  is  often  the  time  base  for functions such as a Real-Time Clock (RTC).\nMost often, a 32.768 kHz watch crystal is connected between  the  RC0/T1OSO/T13CKI  and  RC1/T1OSI pins.  Like  the  LP  Oscillator  mode  circuit,  loading capacitors are also connected from each pin to ground.\nThe Timer1 oscillator is discussed in greater detail in Section 12.3 'Timer1 Oscillator' .\nIn addition to being a primary clock source, the internal oscillator  block is  available  as  a  power-managed mode clock source. The INTRC source is also used as the clock source for several special features, such as the WDT and Fail-Safe Clock Monitor.",
    "2.7 Clock Sources and Oscillator Switching\nThe clock sources for the PIC18F2420/2520/4420/4520 devices  are  shown  in Figure 2-8 .  See Section 23.0 'Special Features of the CPU' for Configuration register details.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe OSCCON register ( Register 2-2 )  controls  several aspects of the device clock's operation, both in full-power operation and in power-managed modes.\nThe IDLEN bit determines if the device goes into Sleep mode  or  one  of  the  Idle  modes  when  the SLEEP instruction is executed.\nThe System Clock Select bits, SCS<1:0>, select the clock  source.  The  available  clock  sources  are  the primary clock (defined by the FOSC<3:0> Configuration bits), the secondary clock (Timer1 oscillator) and the internal oscillator block. The clock source changes immediately after one or more of the bits is written to, following a brief clock transition interval. The SCS bits are cleared on all forms of Reset.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe Internal Oscillator Frequency Select bits (IRCF<2:0>) select the frequency output of the internal oscillator block to drive the device clock. The choices are the INTRC source, the INTOSC source (8 MHz) or one of the frequencies derived from the INTOSC postscaler  (31.25 kHz  to  4 MHz).  If  the  internal  oscillator block is supplying the device clock, changing the states of  these  bits  will  have  an  immediate  change  on  the internal  oscillator's output.  On  device  Resets,  the default output frequency of the internal oscillator block is set at 1 MHz.\nWhen a nominal output frequency of 31 kHz is selected (IRCF<2:0> = 000 ), users may choose which internal oscillator  acts  as  the  source.  This  is  done  with  the INTSRC bit in the OSCTUNE (OSCTUNE<7>) register. Setting this bit selects INTOSC as a 31.25 kHz clock source  by  enabling  the  divide-by-256  output  of  the INTOSC postscaler. Clearing INTSRC selects INTRC (nominally 31 kHz) as the clock source.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThis option allows users to select the tunable and more precise INTOSC as a clock source, while maintaining power savings with a very low clock speed. Regardless of the setting of INTSRC, INTRC always remains the clock source for features such as the Watchdog Timer and the Fail-Safe Clock Monitor.\nThe OSTS, IOFS and T1RUN bits indicate which clock source  is  currently  providing  the  device  clock.  The OSTS bit indicates  that  the  Oscillator  Start-up Timer (OST) has timed out and the primary clock is providing the device clock in primary clock modes. The IOFS bit indicates when the internal oscillator block has stabilized  and  is  providing  the  device  clock  in  RC  Clock modes. The T1RUN (T1CON<6>) bit indicates when the Timer1  oscillator  is  providing  the  device  clock  in secondary  clock  modes.  In  power-managed  modes, only one of these three bits will be set at any time. If none of these bits are set, the INTRC is providing the clock or the internal oscillator block has just started and is not yet stable.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe use of the flag and control bits in the OSCCON register  is  discussed  in  more  detail  in Section 3.0 'Power-Managed Modes' .\nNote 1: The Timer1 oscillator must be enabled to select  the  secondary  clock  source.  The Timer1 oscillator is enabled by setting the T1OSCEN  bit  in the Timer1 Control (T1CON<3>) register. If the Timer1 oscillator is not enabled, then any attempt to select  a  secondary  clock  source  will  be ignored.\n2: It is recommended that the Timer1 oscillator be operating and stable before selecting the secondary clock source or a very long delay may occur while the Timer1 oscillator starts.",
    "2.7.2 OSCILLATOR TRANSITIONS\nPIC18F2420/2520/4420/4520 devices contain circuitry to  prevent  clock  'glitches'  when  switching  between clock sources. A short pause in the device clock occurs during the clock switch. The length of this pause is the sum of two cycles of the old clock source and three to four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nClock  transitions  are  discussed  in  greater  detail  in Section 3.1.2 'Entering Power-Managed Modes' .",
    "OSCCON: OSCILLATOR CONTROL REGISTER\nIDLEN, R/W-1 = IRCF2. IDLEN, R/W-0 = IRCF1. IDLEN, R/W-0 = IRCF0. IDLEN, R (1) = OSTS. IDLEN, R-0 = IOFS. IDLEN, R/W-0 = SCS1. IDLEN, R/W-0 = SCS0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R (1) = bit 7 bit 0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "OSCCON: OSCILLATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IDLEN: Idle Enable bit\n1 = Device enters an Idle mode on SLEEP instruction\n0 = Device enters Sleep mode on SLEEP instruction\nbit 6-4\nIRCF<2:0>: Internal Oscillator Frequency Select bits\n111 = 8 MHz (INTOSC drives clock directly)\n110 = 4 MHz\n101 = 2 MHz\n100 = 1 MHz (3)\n011 = 500 kHz\n010 = 250 kHz\n001 = 125 kHz\n000 = 31 kHz (from either INTOSC/256 or INTRC directly) (2)",
    "bit 3\nOSTS: Oscillator Start-up Timer Time-out Status bit (1)\n1 = Oscillator Start-up Timer (OST) time-out has expired; primary oscillator is running\n0 = Oscillator Start-up Timer (OST) time-out is running; primary oscillator is not ready",
    "bit 2\nIOFS: INTOSC Frequency Stable bit\n1 = INTOSC frequency is stable\n0 = INTOSC frequency is not stable",
    "bit 1-0\nSCS<1:0>: System Clock Select bits\n1x = Internal oscillator block\n01 = Secondary (Timer1) oscillator\n00 = Primary oscillator\nNote 1: Reset state depends on state of the IESO Configuration bit.\n2: Source selected by the INTSRC (OSCTUNE<7>) bit, see text.\n3: Default output frequency of INTOSC on Reset.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nWhen PRI_IDLE mode is selected, the designated primary  oscillator  continues  to  run  without  interruption. For  all  other  power-managed  modes,  the  oscillator using the OSC1 pin is disabled. The OSC1 pin (and OSC2 pin, if used by the oscillator) will stop oscillating.\nIn  secondary  clock  modes  (SEC_RUN  and  SEC_I-DLE), the Timer1 oscillator is operating and providing the device clock. The Timer1 oscillator may also run in all power-managed modes if required to clock Timer1 or Timer3.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nIn internal oscillator modes (RC_RUN and RC_IDLE), the internal oscillator block provides the device clock source. The 31 kHz INTRC output can be used directly to  provide  the  clock  and  may  be  enabled  to  support various  special  features,  regardless  of  the  powermanaged mode (see Section 23.2 'Watchdog Timer (WDT)' , Section 23.3  'Two-Speed  Start-up' and Section 23.4  'Fail-Safe  Clock  Monitor' for more information on WDT, Fail-Safe Clock Monitor and TwoSpeed Start-up). The INTOSC output at 8 MHz may be used  directly  to  clock  the  device  or  may  be  divided down by the postscaler. The INTOSC output is disabled if the clock is provided directly from the INTRC output.\nIf Sleep  mode  is  selected,  all  clock  sources  are stopped.  Since  all  the  transistor  switching  currents have been stopped, Sleep mode achieves the lowest current consumption  of the device (only leakage currents).",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nnot require a device clock source (i.e., MSSP Client, PSP, INTx pins and others). Peripherals that may add significant current consumption are listed in Section 26.2 'DC Characteristics'.",
    "2.9 Power-up Delays\nPower-up delays are controlled by two timers so that no external  Reset  circuitry  is  required  for  most  applications.  The  delays  ensure  that  the  device  is  kept  in Reset until the device power supply is stable under normal circumstances and the primary clock is operating and  stable.  For  additional  information  on  power-up delays, see Section 4.5 'Device Reset Timers' .\nThe first timer is the Power-up Timer (PWRT), which provides  a  fixed  delay  on  power-up  (parameter  33, Table 26-10 ). It is enabled  by  clearing  (= 0 ) the PWRTEN Configuration bit.\nThe  second  timer  is  the  Oscillator  Start-up  Timer (OST),  intended  to  keep  the  chip  in  Reset  until  the crystal oscillator is stable (LP, XT and HS modes). The OST  does  this  by  counting  1024  oscillator  cycles before allowing the oscillator to clock the device.\nWhen  the  HSPLL  Oscillator  mode  is  selected,  the device is kept in Reset for an additional 2 ms, following the HS mode OST delay, so the PLL can lock to the incoming clock frequency.",
    "2.9 Power-up Delays\nEnabling any on-chip feature that will operate during Sleep will increase the current consumed during Sleep. The INTRC is required to support WDT operation. The Timer1 oscillator may be operating to support a RealTime Clock. Other features may be operating that do\nThere  is  a  delay  of  interval,  TCSD  (parameter  38, Table 26-10 ), following POR,  while the controller becomes ready to execute instructions. This delay runs concurrently  with  any  other  delays. This  may  be  the only delay that occurs when any of the EC, RC or INTIO modes are used as the primary clock source.",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nRC, INTIO1, OSC1 Pin = Floating, external resistor needs to pull high. RC, INTIO1, OSC2 Pin = At logic low (clock/4 output). RCIO, OSC1 Pin = Floating, external resistor needs to pull high. RCIO, OSC2 Pin = Configured as PORTA, bit 6. INTIO2, OSC1 Pin = Configured as PORTA, bit 7. INTIO2, OSC2 Pin = Configured as PORTA, bit 6. ECIO, OSC1 Pin = Floating, pulled by external clock. ECIO, OSC2 Pin = Configured as PORTA, bit 6. EC, OSC1 Pin = Floating, pulled by external clock. EC, OSC2 Pin = At logic low (clock/4 output). LP, XT and HS, OSC1 Pin = Feedback inverter disabled at quiescent voltage level. LP, XT and HS, OSC2 Pin = Feedback inverter disabled at quiescent voltage level",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nNote: See Table 4-2 in Section 4.0 'Reset' for time-outs due to Sleep and MCLR Reset.",
    "3.0 POWER-MANAGED MODES\nPIC18F2420/2520/4420/4520  devices  offer  a  total  of seven  operating  modes  for  more  efficient  powermanagement.  These  modes  provide  a  variety  of options for selective power conservation in applications where resources may be limited (i.e., batterypowered devices).\nThere are three categories of power-managed modes:\n\u00b7 Run modes\n\u00b7 Idle modes\n\u00b7 Sleep mode\nThese categories define which portions of the device are clocked and sometimes, what speed. The Run and Idle modes may use any of the three available clock sources (primary, secondary or internal oscillator block); the Sleep mode does not use a clock source.\nThe  power-managed  modes  include  several  powersaving features offered on previous PIC \u00ae  devices. One is  the  clock  switching feature, offered in other PIC18 devices,  allowing  the  controller  to  use  the  Timer1 oscillator in place of the primary oscillator.  Also included is the Sleep mode, offered by all PIC devices, where all device clocks are stopped.",
    "3.1 Selecting Power-Managed Modes\nSelecting a power-managed mode requires two decisions:  if  the  CPU  is  to  be  clocked  or  not  and  the selection of a clock source. The IDLEN (OSCCON<7>) bit  controls  CPU clocking, while the SCS<1:0> (OSCCON<1:0>) bits select the clock source. The individual modes, bit settings, clock sources and affected modules are summarized in Table 3-1 .",
    "3.1.1 CLOCK SOURCES\nThe SCS<1:0> bits allow the selection of one of three clock sources for power-managed modes. They are:\n\u00b7 the primary clock, as defined by the FOSC<3:0> Configuration bits\n\u00b7 the secondary clock (the Timer1 oscillator)\n\u00b7 the internal oscillator block (for RC modes)",
    "3.1.2 ENTERING POWER-MANAGED MODES\nSwitching from one power-managed mode to another begins by loading the OSCCON register. The SCS<1:0> bits select the clock source and determine which Run or Idle mode is to be used. Changing these bits  causes  an  immediate  switch  to  the  new  clock source,  assuming  that  it  is  running.  The  switch  may also  be  subject  to  clock  transition  delays. These  are discussed  in Section 3.1.3  'Clock  Transitions  and Status Indicators' and subsequent sections.\nEntry  to  the  power-managed  Idle  or  Sleep  modes  is triggered by the execution of a SLEEP instruction. The actual mode that results depends on the status of the IDLEN bit.\nDepending on the  current  mode  and  the  mode  being switched to, a change to a power-managed mode does not  always  require  setting  all  of  these  bits.  Many transitions may be done by changing the oscillator select bits, or changing the IDLEN bit, prior to issuing a SLEEP instruction. If the IDLEN  bit  is already configured correctly, it may only be necessary to perform a SLEEP instruction to switch to the desired mode.",
    "TABLE 3-1: POWER-MANAGED MODES\nSleep, OSCCON<7,1:0> Bits.IDLEN (1) = 0. Sleep, OSCCON<7,1:0> Bits.SCS<1:0> = N/A. Sleep, Module Clocking.CPU = Off. Sleep, Module Clocking.Peripherals = Off. Sleep, Available Clock and Oscillator Source.Available Clock and Oscillator Source = None - All clocks are disabled. PRI_RUN, OSCCON<7,1:0> Bits.IDLEN (1) = N/A. PRI_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 00. PRI_RUN, Module Clocking.CPU = Clocked. PRI_RUN, Module Clocking.Peripherals = Clocked. PRI_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC and Internal Oscillator Block (2) . This is the normal full-power execution mode.. SEC_RUN,",
    "TABLE 3-1: POWER-MANAGED MODES\nOSCCON<7,1:0> Bits.IDLEN (1) = N/A. SEC_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 01. SEC_RUN, Module Clocking.CPU = Clocked. SEC_RUN, Module Clocking.Peripherals = Clocked. SEC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_RUN, OSCCON<7,1:0> Bits.IDLEN (1) = N/A. RC_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 1x. RC_RUN, Module Clocking.CPU = Clocked. RC_RUN, Module Clocking.Peripherals = Clocked. RC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2). PRI_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. PRI_IDLE,",
    "TABLE 3-1: POWER-MANAGED MODES\nOSCCON<7,1:0> Bits.SCS<1:0> = 00. PRI_IDLE, Module Clocking.CPU = Off. PRI_IDLE, Module Clocking.Peripherals = Clocked. PRI_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC. SEC_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. SEC_IDLE, OSCCON<7,1:0> Bits.SCS<1:0> = 01. SEC_IDLE, Module Clocking.CPU = Off. SEC_IDLE, Module Clocking.Peripherals = Clocked. SEC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. RC_IDLE, OSCCON<7,1:0> Bits.SCS<1:0> = 1x.",
    "TABLE 3-1: POWER-MANAGED MODES\nRC_IDLE, Module Clocking.CPU = Off. RC_IDLE, Module Clocking.Peripherals = Clocked. RC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2)\nNote 1: IDLEN reflects its value when the SLEEP instruction is executed.\n2: Includes INTOSC and INTOSC postscaler, as well as the INTRC source.",
    "3.2 Run Modes\nThe length of the transition between clock sources is the sum of two cycles of the old clock source and three to  four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nThree  bits  indicate  the  current  clock  source  and  its status. They are:\n\u00b7 OSTS (OSCCON<3>)\n\u00b7 IOFS (OSCCON<2>)\n\u00b7 T1RUN (T1CON<6>)\nIn general, only one of these bits will be set while in a given  power-managed  mode.  When  the  OSTS  bit  is set,  the  primary  clock  is  providing  the  device  clock. When  the  IOFS  bit  is  set,  the  INTOSC  output  is providing a stable 8 MHz clock source to a divider that actually drives the device clock. When the T1RUN bit is set, the Timer1 oscillator is providing the clock. If none of  these  bits  are  set,  then  either  the  INTRC  clock source is clocking the device or the INTOSC source is not yet stable.",
    "3.2 Run Modes\nIf the  internal  oscillator  block  is  configured  as  the primary clock source by the FOSC<3:0> Configuration bits,  then  both  the  OSTS  and  IOFS  bits  may  be  set when in PRI_RUN or PRI_IDLE modes. This indicates that the primary clock (INTOSC output) is generating a stable 8 MHz output. Entering another power-managed RC mode at the same frequency would clear the OSTS bit.\nNote 1: Caution needs to be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible to select a higher clock speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\n2: Executing a SLEEP instruction  does  not necessarily  place  the  device  into  Sleep mode. It acts as the trigger to place the controller  into  either  the  Sleep  mode  or one of the Idle modes, depending on the setting of the IDLEN bit.",
    "3.1.4 MULTIPLE SLEEP COMMANDS\nThe  power-managed  mode  that  is  invoked  with  the SLEEP instruction is determined by the setting of the IDLEN  bit  at  the  time  the  instruction  is  executed.  If another SLEEP instruction is executed, the device will enter the power-managed mode specified by IDLEN at that time. If IDLEN has changed, the device will enter the new power-managed mode specified by the new setting.\nIn the  Run  modes,  clocks  to  both  the  core  and peripherals are active. The difference between these modes is the clock source.",
    "3.2.1 PRI_RUN MODE\nThe PRI_RUN mode is the normal, full-power execution mode of the microcontroller. This is also the default mode upon a device Reset unless Two-Speed Start-up is enabled (see Section 23.3 'Two-Speed Start-up' for details). In this mode, the OSTS bit is set. The IOFS bit  may  be  set  if  the  internal  oscillator  block  is  the primary  clock  source  (see Section 2.7.1  'Oscillator Control Register' ).",
    "3.2.2 SEC_RUN MODE\nThe SEC_RUN mode is the compatible mode to the 'clock switching' feature offered in other PIC18 devices.  In  this  mode,  the  CPU  and  peripherals  are clocked from the Timer1 oscillator. This gives users the option of lower power consumption while still using a high-accuracy clock source.\nSEC_RUN mode is entered by setting the SCS<1:0> bits to ' 01 '. The device clock source is switched to the Timer1 oscillator (see Figure 3-1 ), the primary oscillator is shut down, the T1RUN (T1CON<6>) bit is set and the OSTS bit is cleared.",
    "3.2.2 SEC_RUN MODE\nNote: The Timer1 oscillator needs to already be running prior to entering SEC_RUN mode. If  the  T1OSCEN  bit  is  not  set  when  the SCS<1:0>  bits  are  set  to  ' 01 ',  entry  to SEC_RUN mode will not occur. If the Timer1 oscillator is enabled, but not yet running,  device  clocks  will  be  delayed  until the  oscillator  has  started.  In  such  situations, initial oscillator operation is far from stable  and  unpredictable  operation  may result.\nOn  transitions  from  SEC_RUN  mode  to  PRI_RUN mode, the peripherals and CPU continue to be clocked from  the  Timer1  oscillator  while  the  primary  clock  is started.  When  the  primary  clock  becomes  ready,  a clock  switch  back  to  the  primary  clock  occurs  (see Figure 3-2 ).  When  the  clock  switch  is  complete,  the T1RUN  bit  is  cleared,  the  OSTS  bit  is  set  and  the primary  clock  is  providing  the  clock. The  IDLEN  and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "3.2.3 RC_RUN MODE\nIn RC_RUN  mode,  the  CPU  and  peripherals  are clocked  from  the  internal  oscillator  block  using  the INTOSC multiplexer. In this mode, the primary clock is shut down. When using the INTRC source, this mode provides  the  best  power  conservation  of  all  the  Run modes while still executing code. It works well for user applications which are not highly timing sensitive or do not require high-speed clocks at all times.\nIf  the  primary  clock  source  is  the  internal  oscillator block (either INTRC or INTOSC), there are no distinguishable differences between PRI_RUN and RC_RUN modes during execution. However, a clock switch  delay  will  occur  during  entry  to  and  exit  from RC_RUN mode. Therefore, if the primary clock source is  the  internal  oscillator  block,  the  use  of  RC_RUN mode is not recommended.",
    "3.2.3 RC_RUN MODE\nThis  mode  is  entered  by  setting  the  SCS1  bit  to  ' 1 '. Although it is ignored, it is recommended that the SCS0 bit also be cleared; this is to maintain software compatibility  with  future  devices.  When  the  clock  source  is switched to the INTOSC multiplexer (see Figure 3-3 ), the primary oscillator is shut down and the OSTS bit is cleared. The IRCF bits may be modified at any time to immediately change the clock speed.",
    "Note:\nCaution needs to be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible to select a higher clock speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.",
    "PIC18F2420/2520/4420/4520\nIf  the IRCF bits and the INTSRC bit are all clear, the INTOSC output is  not  enabled  and  the  IOFS  bit  will remain clear; there will be no indication of the current clock  source.  The  INTRC  source  is  providing  the device clocks.\nIf the  IRCF  bits  are  changed  from  all  clear  (thus, enabling the INTOSC output), or if INTSRC is set, the IOFS  bit becomes  set  after the INTOSC  output becomes stable. Clocks to the device continue while the  INTOSC  source  stabilizes  after  an  interval  of TIOBST.\nOn transitions from RC_RUN mode to PRI_RUN mode, the device continues to be clocked from the INTOSC multiplexer while the primary clock is started. When the primary clock becomes ready, a clock switch to the primary clock occurs (see Figure 3-4 ).  When  the  clock switch is complete, the IOFS bit is cleared, the OSTS bit is set and the primary clock is providing the device clock. The IDLEN and SCS bits are not affected by the switch. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "PIC18F2420/2520/4420/4520\nIf the IRCF bits were previously at a non-zero value, or if INTSRC  was  set  before  setting  SCS1  and  the INTOSC source was already stable, the IOFS bit will remain set.",
    "3.3 Sleep Mode\nThe power-managed Sleep mode in the PIC18F2420/ 2520/4420/4520  devices  is  identical  to  the  legacy Sleep  mode  offered  in  all  other  PIC  devices.  It  is entered by clearing the IDLEN bit (the default state on device  Reset)  and  executing  the SLEEP instruction. This shuts down the selected oscillator ( Figure 3-5 ).  All clock source status bits are cleared.\nEntering the Sleep mode from any other mode does not require a clock switch. This is because no clocks are needed once the controller has entered Sleep. If the WDT is selected,  the  INTRC  source  will  continue  to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.3 Sleep Mode\nWhen a wake event occurs in Sleep mode (by interrupt, Reset or WDT time-out), the device will not be clocked until the clock source selected by the SCS<1:0> bits becomes ready (see Figure 3-6 ), or it will be clocked from the internal oscillator block if either the Two-Speed Start-up  or  the  Fail-Safe  Clock  Monitor  are  enabled (see Section 23.0 'Special Features of the CPU' ). In either case, the OSTS bit is set when the primary clock is providing the device clocks. The IDLEN and SCS bits are not affected by the wake-up.",
    "3.4 Idle Modes\nThe  Idle  modes  allow  the  controller's  CPU  to  be selectively shut down while the peripherals continue to operate. Selecting a particular Idle mode allows users to further manage power consumption.\nIf the IDLEN bit is set to ' 1 ' when a SLEEP instruction is executed, the peripherals will be clocked from the clock source selected using the SCS<1:0> bits; however, the CPU will not be clocked. The clock source status bits are not  affected.  Setting  IDLEN  and  executing  a SLEEP instruction provides a quick method of switching from a given Run mode to its corresponding Idle mode.\nIf the WDT is selected, the INTRC source will continue to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.4 Idle Modes\nSince the CPU is not executing instructions, the only exits from any of the Idle modes are by interrupt, WDT time-out or a Reset. When a wake event occurs, CPU execution is delayed by an interval of TCSD (parameter 38, Table 26-10 ) while it becomes ready to execute code. When the CPU begins executing code, it resumes with the same clock source for the current Idle mode. For example, when waking from RC_IDLE mode, the internal oscillator block will clock the CPU and peripherals (in other words, RC_RUN mode). The IDLEN and SCS bits are not affected by the wake-up.\nWhile in any Idle mode or the Sleep mode, a WDT time-out will result in a WDT wake-up to the Run mode currently specified by the SCS1:SCS0 bits.",
    "FIGURE 3-5: TRANSITION TIMING FOR ENTRY TO SLEEP MODE\nQ4 Q3 Q2 Q1 Q1, 1 = Q4 Q3 Q2 Q1 Q1. OSC1, 1 = OSC1. CPU, 1 = CPU. Clock, 1 = Clock. Peripheral, 1 = Peripheral. Clock, 1 = Clock. Sleep, 1 = Sleep. Program Counter PC, 1 = PC + 2\nFIGURE 3-6:",
    "3.4.1 PRI_IDLE MODE\nThis mode is unique among the three low-power Idle modes in that it does not disable the primary device clock. For timing-sensitive applications, this allows for the fastest resumption of device operation with its more accurate primary clock source, since the clock source does not have to 'warm-up' or transition from another oscillator.\nsetting the IDLEN bit and executing a SLEEP instruction.  If  the  device  is  in  another  Run  mode,  set  the IDLEN bit first, then set the SCS<1:0> bits to ' 01 ' and execute SLEEP . When the clock source is switched to the  Timer1  oscillator,  the  primary  oscillator  is  shut down, the OSTS bit is cleared and the T1RUN bit is set.",
    "3.4.1 PRI_IDLE MODE\nPRI_IDLE mode is entered from PRI_RUN mode by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first,  then  clear  the  SCS  bits  and  execute SLEEP . Although the CPU is disabled, the peripherals continue to be clocked from the primary clock source specified by  the  FOSC<3:0> Configuration bits. The OSTS bit remains set (see Figure 3-7 ).\nWhen a wake event occurs, the CPU is clocked from the primary  clock  source.  A  delay  of  interval  TCSD  is required  between  the  wake  event  and  when  code execution starts. This is required to allow the CPU to become ready to execute instructions. After the wakeup, the OSTS bit remains set. The IDLEN and SCS bits are not affected by the wake-up (see Figure 3-8 ).",
    "3.4.2 SEC_IDLE MODE\nIn  SEC_IDLE  mode,  the  CPU  is  disabled  but  the peripherals  continue  to  be  clocked  from  the  Timer1 oscillator.  This  mode  is  entered  from  SEC_RUN  by",
    "FIGURE 3-7: TRANSITION TIMING FOR ENTRY TO IDLE MODE\nFIGURE 3-8:",
    "TRANSITION TIMING FOR WAKE FROM IDLE TO RUN MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the Timer1 oscillator. After an interval of TCSD, following the wake event, the CPU begins executing code being clocked by the Timer1 oscillator. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run (see Figure 3-8 ).",
    "Note:\nThe Timer1 oscillator needs to already be running prior to entering SEC_IDLE mode. If  the  T1OSCEN  bit  is  not  set  when  the SLEEP instruction is executed, the SLEEP instruction  will  be  ignored  and  entry  to SEC_IDLE mode will not occur. If the Timer1  oscillator  is  enabled  but  not  yet  running, peripheral clocks will be delayed until the oscillator has started. In such situations, initial oscillator operation is far from  stable  and  unpredictable  operation may result.",
    "3.4.3 RC_IDLE MODE\nIn RC_IDLE mode, the CPU is disabled but the peripherals continue to be clocked from the internal oscillator block using the INTOSC multiplexer. This mode allows for controllable power conservation during Idle periods.\nFrom  RC_RUN,  this  mode  is  entered  by  setting  the IDLEN  bit  and  executing  a SLEEP instruction.  If  the device is in another Run mode, first set IDLEN, then set the SCS1 bit and execute SLEEP . Although its value is ignored, it is recommended that SCS0 also be cleared; this  is  to  maintain  software  compatibility  with  future devices.  The  INTOSC  multiplexer  may  be  used  to select a higher clock frequency by modifying the IRCF bits before executing the SLEEP instruction. When the clock source is switched to the INTOSC multiplexer, the primary  oscillator  is  shut  down  and  the  OSTS  bit  is cleared.",
    "3.4.3 RC_IDLE MODE\nIf  the IRCF bits are set to any non-zero value, or the INTSRC bit is set, the INTOSC output is enabled. The IOFS  bit  becomes  set,  after  the INTOSC  output becomes stable, after an interval of TIOBST (parameter 39, Table 26-10 ). Clocks to the peripherals continue  while  the  INTOSC  source  stabilizes.  If  the IRCF  bits  were  previously  at  a  non-zero  value,  or INTSRC was set before the SLEEP instruction was executed and the INTOSC source was already stable, the IOFS bit will remain set. If the IRCF bits and INTSRC are all clear, the INTOSC output will not be enabled, the IOFS bit will remain clear and there will be no indication of the current clock source.",
    "3.4.3 RC_IDLE MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the INTOSC multiplexer. After a delay of TCSD  following the wake  event, the CPU  begins executing  code  being  clocked  by  the  INTOSC  multiplexer. The IDLEN and SCS bits are not affected by the wake-up. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "3.5 Exiting Idle and Sleep Modes\nAn exit from Sleep mode or any of the Idle modes is triggered by an interrupt, a Reset or a WDT time-out. This  section  discusses  the  triggers  that  cause  exits from power-managed modes. The clocking subsystem actions are discussed in each of the power-managed modes (see Section 3.2 'Run Modes', Section 3.3 'Sleep Mode' and Section 3.4 'Idle Modes' ).",
    "3.5.1 EXIT BY INTERRUPT\nAny of the available interrupt sources can cause the device to exit from an Idle mode or the Sleep mode to a Run mode. To enable this functionality, an interrupt source must be enabled by setting its enable bit in one of the INTCON or PIE registers. The exit sequence is initiated when the corresponding interrupt flag bit is set.\nOn all exits from Idle or Sleep modes by interrupt, code execution branches to the interrupt vector if the GIE/ GIEH (INTCON<7>) bit is set. Otherwise, code execution  continues  or  resumes  without  branching  (see Section 9.0 'Interrupts' ).\nA fixed delay of interval TCSD following the wake event is required when leaving Sleep and Idle modes. This delay is required for the CPU to prepare for execution. Instruction execution resumes on the first clock cycle following this delay.",
    "3.5.2 EXIT BY WDT TIME-OUT\nA WDT time-out will cause different actions depending on which power-managed mode the device is in when the time-out occurs.\nIf the device is not executing code (all Idle modes and Sleep mode), the time-out will result in an exit from the power-managed mode (see Section 3.2 'Run Modes' and Section 3.3 'Sleep Mode' ). If the device is  executing  code  (all  Run  modes),  the  time-out  will result in a WDT Reset (see Section 23.2 'Watchdog Timer (WDT)' ).\nThe WDT  timer and postscaler are cleared by executing a SLEEP or CLRWDT instruction, the loss of a currently selected clock source (if the Fail-Safe Clock Monitor is enabled) and modifying the IRCF bits in the OSCCON register if the internal oscillator block is the device clock source.",
    "3.5.3 EXIT BY RESET\nNormally, the device is held in Reset by the Oscillator Start-up Timer (OST) until the primary clock becomes ready. At that time, the OSTS bit is set and the device begins executing code. If the internal oscillator block is the new clock source, the IOFS bit is set instead.\nThe  exit  delay  time  from  Reset  to  the  start  of  code execution depends on both the clock sources before and after the wake-up and the type of oscillator if the new clock source is the primary clock. Exit delays are summarized in Table 3-2 .",
    "3.5.3 EXIT BY RESET\nCode  execution  can  begin  before  the  primary  clock becomes ready. If either the Two-Speed Start-up (see Section 23.3  'Two-Speed  Start-up' ) or Fail-Safe Clock  Monitor  (see Section 23.4  'Fail-Safe  Clock Monitor' ) is enabled, the device may begin execution as soon as the Reset source has cleared. Execution is clocked by the INTOSC multiplexer driven by the internal oscillator block. Execution is clocked by the internal oscillator block until either the primary clock becomes ready or a power-managed mode is entered before the primary clock becomes ready; the primary clock is then shut down.",
    "3.5.4 EXIT WITHOUT AN OSCILLATOR START-UP DELAY\nCertain  exits  from  power-managed  modes  do  not invoke the OST at all. There are two cases:\n\u00b7 PRI_IDLE mode, where the primary clock source is not stopped and\n\u00b7 the primary clock source is not any of the LP, XT, HS or HSPLL modes.\nIn  these  instances,  the  primary  clock  source  either does not require an oscillator start-up delay, since it is already  running  (PRI_IDLE),  or  normally  does  not require an oscillator start-up delay (RC, EC and INTIO Oscillator  modes).  However, a fixed delay  of  interval TCSD following the wake event is still  required  when leaving  Sleep  and  Idle  modes  to  allow  the  CPU  to prepare for  execution.  Instruction  execution  resumes on the first clock cycle following this delay.",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nPrimary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = LP, XT, HS. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status (OSCCON) Bit = . Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = HSPLL. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status (OSCCON) Bit = OSTS. Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = EC, RC. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status (OSCCON) Bit = . Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = INTOSC (2). Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nDevice Clock (PRI_IDLE mode), Clock Ready Status (OSCCON) Bit = IOFS. T1OSC or INTRC (1), Clock Source After Wake-up = LP, XT, HS. T1OSC or INTRC (1), Exit Delay = TOST (3). T1OSC or INTRC (1), Clock Ready Status (OSCCON) Bit = OSTS. T1OSC or INTRC (1), Clock Source After Wake-up = HSPLL. T1OSC or INTRC (1), Exit Delay = TOST + t rc (3). T1OSC or INTRC (1), Clock Ready Status (OSCCON) Bit = OSTS. T1OSC or INTRC (1), Clock Source After Wake-up = EC, RC. T1OSC or INTRC (1), Exit Delay = TCSD (1). T1OSC or INTRC (1), Clock Ready Status (OSCCON) Bit = OSTS. T1OSC or",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nINTRC (1), Clock Source After Wake-up = INTOSC (2). T1OSC or INTRC (1), Exit Delay = TCSD (1). T1OSC or INTRC (1), Clock Ready Status (OSCCON) Bit = IOFS. INTOSC (2), Clock Source After Wake-up = LP, XT, HS. INTOSC (2), Exit Delay = TOST (3). INTOSC (2), Clock Ready Status (OSCCON) Bit = OSTS. INTOSC (2), Clock Source After Wake-up = HSPLL. INTOSC (2), Exit Delay = TOST + t rc (3). INTOSC (2), Clock Ready Status (OSCCON) Bit = OSTS. INTOSC (2), Clock Source After Wake-up = EC, RC. INTOSC (2), Exit Delay = TCSD (1). INTOSC (2), Clock Ready Status (OSCCON) Bit = OSTS. INTOSC (2), Clock Source After",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nWake-up = INTOSC (2). INTOSC (2), Exit Delay = TCSD (1). INTOSC (2), Clock Ready Status (OSCCON) Bit = IOFS. None (Sleep mode), Clock Source After Wake-up = LP, XT, HS. None (Sleep mode), Exit Delay = TOST (3). None (Sleep mode), Clock Ready Status (OSCCON) Bit = OSTS. None (Sleep mode), Clock Source After Wake-up = HSPLL. None (Sleep mode), Exit Delay = TOST + t rc (3). None (Sleep mode), Clock Ready Status (OSCCON) Bit = OSTS. None (Sleep mode), Clock Source After Wake-up = EC, RC. None (Sleep mode), Exit Delay = TCSD (1). None (Sleep mode), Clock Ready Status (OSCCON) Bit = OSTS. None (Sleep mode), Clock Source After Wake-up = INTOSC (2). None (Sleep mode), Exit Delay =",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nTCSD (1). None (Sleep mode), Clock Ready Status (OSCCON) Bit = IOFS\nNote 1: TCSD (parameter 38) is a required delay when waking from Sleep and all Idle modes and runs concurrently with any other required delays (see Section 3.4 'Idle Modes' ). On Reset, INTOSC defaults to 1 MHz.\n2: Includes both the INTOSC 8 MHz source and postscaler derived frequencies.\n3: TOST is the Oscillator Start-up Timer (parameter 32). t rc is the PLL lock-out timer (parameter F12); it is also designated as TPLL.",
    "4.0 RESET\nThe PIC18F2420/2520/4420/4520 devices differentiate between various kinds of Reset:\na) Power-on Reset (POR)\nb) MCLR Reset during normal operation\nc) MCLR Reset during power-managed modes\nd) Watchdog Timer (WDT) Reset (during execution)\ne) Programmable Brown-out Reset (BOR)\nf) RESET Instruction\ng) Stack Full Reset\nh) Stack Underflow Reset\nThis  section  discusses  Resets  generated  by  MCLR, POR and BOR and covers the operation of the various start-up  timers.  Stack  Reset  events  are  covered  in Section 5.1.2.4 'Stack Full and Underflow Resets' . WDT Resets are covered in Section 23.2 'Watchdog Timer (WDT)' .\nA simplified block diagram of the On-Chip Reset Circuit is shown in Figure 4-1 .",
    "4.1 RCON Register\nDevice Reset events are tracked through the RCON register ( Register 4-1 ). The lower five bits of the register indicate that a specific Reset event has occurred. In most cases, these bits can only be cleared by the event and must be set by the application after the event. The state of these flag bits, taken together, can be read to indicate  the  type  of  Reset  that  just  occurred. This  is described in more detail in Section 4.6 'Reset State of Registers' .\nThe  RCON  register  also  has  control  bits  for  setting interrupt  priority  (IPEN)  and  software  control  of  the BOR  (SBOREN).  Interrupt  priority  is  discussed  in Section 9.0 'Interrupts' . BOR is covered in Section 4.4 'Brown-out Reset (BOR)' .",
    "REGISTER 4-1: RCON: RESET CONTROL REGISTER\nIPEN, R/W-1 (1) = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 (2) = POR. IPEN, R/W-0 = BOR. bit 7, R/W-1 (1) = . bit 7, U-0 = . bit 7, R/W-1 = . bit 7, R-1 = . bit 7, R-1 = . bit 7, R/W-0 (2) = . bit 7, R/W-0 = bit 0",
    "REGISTER 4-1: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)",
    "bit 6 SBOREN: BOR Software Enable bit (1)\nIf BOREN1:BOREN0 = 01 :\n1 = BOR is enabled\n0 = BOR is disabled\nIf BOREN1:BOREN0 = 00 10 , or 11 :\nBit is disabled and read as ' 0 '.",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a Brown-out Reset occurs)",
    "bit 3 TO: Watchdog Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred\nPD: Power-Down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Set by execution of the SLEEP instruction",
    "bit 1 POR: Power-on Reset Status bit\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)\nBOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)\nNote 1: If SBOREN is enabled, its Reset state is ' 1 '; otherwise, it is ' 0 '.\n2: The actual Reset value of POR is determined by the type of device Reset. See the notes following this register and Section 4.6 'Reset State of Registers' for additional information.\nNote 1: It is recommended that the POR bit be set after a Power-on Reset has been detected so that subsequent Power-on Resets may be detected.\n2: Brown-out Reset is said to have occurred when BOR is ' 0 ' and POR is ' 1 ' (assuming that POR was set to ' 1 ' by software immediately after a Power-on Reset).",
    "4.2 Master Clear (MCLR)\nThe  MCLR  pin  provides  a  method  for  triggering  an external Reset of the device. A Reset is generated by holding the pin low. These devices have a noise filter in the MCLR Reset path which detects and ignores small pulses.\nThe MCLR pin is not driven low by any internal Resets, including the WDT.\nIn  PIC18F2420/2520/4420/4520  devices,  the  MCLR input can be disabled with the MCLRE Configuration bit. When MCLR is disabled, the pin becomes a digital input.  See Section 10.5 'PORTE, TRISE and LATE Registers' for more information.",
    "4.3 Power-on Reset (POR)\nA Power-on Reset pulse is generated on-chip whenever  VDD  rises  above  a  certain  threshold.  This allows the device to start in the initialized state when VDD is adequate for operation.\nTo take advantage of the POR circuitry, tie the MCLR pin through a resistor (1 k \uf057 to 10 k \uf057 ) to VDD. This will eliminate external RC components usually needed to create a Power-on Reset delay. A minimum rise rate for VDD  is  specified  (parameter  D004).  For  a  slow  rise time, see Figure 4-2 .\nWhen the device starts normal operation (i.e., exits the Reset  condition),  device  operating  parameters  (voltage,  frequency,  temperature,  etc.)  must  be  met  to ensure operation. If these conditions are not met, the device  must  be  held  in  Reset  until  the  operating conditions are met.",
    "4.3 Power-on Reset (POR)\nPOR events are captured by the POR (RCON<1>) bit. The state of the bit is set to ' 0 ' whenever a POR occurs; it does not change for any other Reset event. POR is not  reset  to  ' 1 ' by  any  hardware  event.  To  capture multiple events, the user manually resets the bit to ' 1 ' in software following any POR.\nFIGURE 4-2:\nEXTERNAL POWER-ON RESET CIRCUIT (FOR SLOW VDD POWER-UP)\nNote 1: External  Power-on  Reset  circuit  is  required only  if  the  VDD  power-up  slope  is  too  slow. The  diode  D  helps  discharge  the  capacitor quickly when VDD powers down.\n2: R < 40 k \uf057 is recommended to make sure that the  voltage  drop  across  R  does  not  violate the device's electrical specification.\n3: R1 \uf0b3 1  k \uf057 will  limit  any  current flowing into MCLR from external capacitor C, in the event of MCLR/VPP pin breakdown, due to Electrostatic  Discharge  (ESD)  or  Electrical Overstress (EOS).",
    "4.4 Brown-out Reset (BOR)\nPIC18F2420/2520/4420/4520 devices implement a BOR circuit  that  provides  the  user  with  a  number  of configuration  and  power-saving  options. The  BOR  is controlled by the BORV<1:0>  and BOREN<1:0> Configuration  bits.  There  are  a  total  of  four  BOR configurations which are summarized in Table 4-1 .\nPlacing the BOR under software control gives the user the additional flexibility of tailoring the application to its environment without having to reprogram the device to change BOR configuration. It also allows the user to tailor device power consumption in software by eliminating the incremental current that the BOR consumes. While the BOR current is typically very small, it may have some impact in low-power applications.",
    "4.4 Brown-out Reset (BOR)\nThe BOR threshold is set by the BORV<1:0> bits. If BOR is  enabled  (any  values  of  BOREN<1:0>,  except  ' 00 '), any  drop  of  VDD  below  VBOR  (parameter  D005)  for greater than TBOR (parameter 35) will reset the device. A Reset may or may not occur if VDD falls below VBOR for  less  than TBOR. The chip will remain in Brown-out Reset until VDD rises above VBOR.\nIf the Power-up Timer is enabled, it will be invoked after VDD  rises  above  VBOR;  it  then  will  keep  the  chip  in Reset for an additional time delay, TPWRT (parameter 33).  If  VDD  drops  below  VBOR  while  the Power-up Timer is running, the chip will go back into a Brown-out  Reset  and  the  Power-up  Timer  will  be initialized. Once VDD rises above VBOR, the Power-up Timer will execute the additional time delay.\nBOR and the Power-up Timer (PWRT) are independently configured. Enabling the Brown-out Reset does not automatically enable the PWRT.",
    "4.4.1 SOFTWARE ENABLED BOR\nWhen BOREN<1:0> = 01 , the BOR can be enabled or disabled by the user in software. This is done with the control  bit,  SBOREN  (RCON<6>).  Setting  SBOREN enables the BOR to function as previously described. Clearing  SBOREN  disables  the  BOR  entirely.  The SBOREN bit operates only in this mode; otherwise it is read as ' 0 '.\nNote:\nEven when BOR is under software control, the Brown-out Reset voltage level is still set by the BORV<1:0> Configuration bits; it cannot be changed in software.",
    "4.4.2 DETECTING BOR\nWhen BOR is enabled, the BOR bit always resets to ' 0 ' on any BOR or POR event. This makes it difficult to determine if a BOR event has occurred just by reading the state of BOR alone. A more reliable method is to simultaneously check the state of both POR and BOR. This assumes that the POR bit is reset to ' 1 ' in software immediately after any POR event. If BOR is ' 0 '  while POR is ' 1 ', it can be reliably assumed that a BOR event has occurred.",
    "4.4.3 DISABLING BOR IN SLEEP MODE\nWhen  BOREN<1:0>  = 10 ,  the  BOR  remains  under hardware control and operates as previously described. Whenever the device enters Sleep mode, however, the BOR is automatically disabled. When the device  returns  to  any  other  operating  mode,  BOR  is automatically re-enabled.\nThis  mode  allows  for  applications  to  recover  from brown-out  situations,  while  actively  executing  code, when the device requires BOR protection the most. At the same time, it saves additional power in Sleep mode by eliminating the small incremental BOR current.",
    "TABLE 4-1: BOR CONFIGURATIONS\n0, BOR Configuration.BOREN0 = 0. 0, Status of SBOREN.(RCON<6>) = Unavailable. 0, BOR Operation = BOR disabled; must be enabled by reprogramming the Configuration bits.. 0, BOR Configuration.BOREN0 = 1. 0, Status of SBOREN.(RCON<6>) = Available. 0, BOR Operation = BOR enabled in software; operation controlled by SBOREN.. 1, BOR Configuration.BOREN0 = 0. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware in Run and Idle modes, disabled during Sleep mode.. 1, BOR Configuration.BOREN0 = 1. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware; must be disabled by reprogramming the Configuration bits.",
    "4.5 Device Reset Timers\nPIC18F2420/2520/4420/4520 devices incorporate three separate on-chip timers that help regulate the Power-on Reset process. Their main function is to ensure that the device clock is stable before code is executed. These timers are:\n\u00b7 Power-up Timer (PWRT)\n\u00b7 Oscillator Start-up Timer (OST)\n\u00b7 PLL Lock Time-out",
    "4.5.1 POWER-UP TIMER (PWRT)\nThe Power-up Timer (PWRT) of PIC18F2420/2520/ 4420/4520 devices is an 11-bit counter which uses the INTRC source as the clock input. This yields an approximate time interval of 2048 x 32 \uf06d s = 65.6 ms. While  the  PWRT  is  counting,  the  device  is  held  in Reset.\nThe power-up time delay depends on the INTRC clock and will vary from chip to chip due to temperature and process variation. See DC parameter 33 for details.\nThe  PWRT  is  enabled  by  clearing  the  PWRTEN Configuration bit.",
    "4.5.2 OSCILLATOR START-UP TIMER (OST)\nThe Oscillator Start-up Timer (OST) provides a 1024 oscillator cycle (from OSC1 input) delay after the PWRT delay is over (parameter 33). This ensures that the  crystal  oscillator  or  resonator  has  started  and stabilized.\nThe OST time-out is invoked only for XT, LP, HS and HSPLL modes and only on Power-on Reset, or on exit from most power-managed modes.",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\nHSPLL, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC + 2 ms (2). HSPLL, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC + 2 ms (2). HSPLL, Exit from Power-Managed Mode. = 1024 TOSC + 2 ms (2). HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC. HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC. HS, XT, LP, Exit from Power-Managed Mode. = 1024 TOSC. EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. EC, ECIO, Exit from Power-Managed Mode. = -.",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\nRC, RCIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. RC, RCIO, Exit from Power-Managed Mode. = -. INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 1 = -. INTIO1, INTIO2, Exit from Power-Managed Mode. = -\nNote 1: 66 ms (65.5 ms) is the nominal Power-up Timer (PWRT) delay.\n- 2: 2 ms is the nominal time required for the PLL to lock.",
    "4.5.3 PLL LOCK TIME-OUT\nWith  the  PLL  enabled  in  its  PLL  mode,  the  time-out sequence following a Power-on Reset is slightly different  from  other  oscillator  modes. A  separate  timer  is used to provide a fixed time-out that is sufficient for the PLL to lock to the main oscillator frequency. This PLL lock time-out (TPLL) is typically 2 ms and follows the oscillator start-up time-out.",
    "4.5.4 TIME-OUT SEQUENCE\nOn power-up, the time-out sequence is as follows:\n1. After the POR pulse has cleared, PWRT time-out is invoked (if enabled).\n2. Then, the OST is activated.\nThe total time-out will vary based on oscillator configuration and the status of the PWRT. Figure 4-3 , Figure 4-4 , Figure 4-5 , Figure 4-6 and Figure 4-7 all depict  time-out  sequences  on  power-up,  with  the Power-up Timer enabled and the device operating in HS  Oscillator  mode. Figure 4-3 through Figure 4-6 also apply to devices operating in XT or LP modes. For devices in RC mode and with the PWRT disabled, on the other hand, there will be no time-out at all.\nSince the time-outs occur from the POR pulse, if MCLR is kept low long enough, all time-outs will expire. Bringing MCLR  high  will begin execution immediately ( Figure 4-5 ). This is useful for testing purposes or to synchronize more  than one PIC18FXXXX  device operating in parallel.",
    "FIGURE 4-3: TIME-OUT SEQUENCE ON POWER-UP (MCLR TIED TO VDD, VDD RISE < TPWRT)\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "TIME-OUT SEQUENCE ON POWER-UP (MCLR NOT TIED TO VDD): CASE 1\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "FIGURE 4-6: SLOW RISE TIME (MCLR TIED TO VDD, VDD RISE > TPWRT)\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET\n0V\n5V\nTPWRT\nTOST",
    "FIGURE 4-7: TIME-OUT SEQUENCE ON POR W/PLL ENABLED (MCLR TIED TO VDD)\nNote:\nTOST = 1024 clock cycles.\nTPLL \uf0bb 2 ms max. First three stages of the PWRT timer.",
    "4.6 Reset State of Registers\nMost registers are unaffected by a Reset. Their status is unknown  on  POR  and  unchanged  by  all  other Resets.  The  other  registers  are  forced  to  a  'Reset state' depending on the type of Reset that occurred.\nTable 4-4 describes  the  Reset  states  for  all  of  the Special Function Registers. These are categorized by Power-on  and  Brown-out  Resets,  Master  Clear  and WDT Resets and WDT wake-ups.\nMost  registers  are  not  affected  by  a  WDT  wake-up, since this is viewed as the resumption of normal operation. Status bits from the RCON register, RI, TO, PD, POR and BOR, are set or cleared differently in different Reset situations, as indicated in Table 4-3 . These bits are  used  in  software  to  determine  the  nature  of  the Reset.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nPower-on Reset, Program.Counter = 0000h. Power-on Reset, RCON Register.RI = 1. Power-on Reset, RCON Register.TO = 1. Power-on Reset, RCON Register.PD = 1. Power-on Reset, RCON Register.POR = 0. Power-on Reset, RCON Register.BOR = 0. Power-on Reset, STKPTR Register.STKFUL = 0. Power-on Reset, STKPTR Register.STKUNF = 0. RESET Instruction, Program.Counter = 0000h. RESET Instruction, RCON Register.RI = 0. RESET Instruction, RCON Register.TO = u. RESET Instruction, RCON Register.PD = u. RESET Instruction, RCON Register.POR = u. RESET Instruction, RCON Register.BOR = u. RESET Instruction, STKPTR Register.STKFUL = u. RESET Instruction, STKPTR Register.STKUNF = u. Brown-out Reset, Program.Counter = 0000h. Brown-out Reset, RCON Register.RI =",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n1. Brown-out Reset, RCON Register.TO = 1. Brown-out Reset, RCON Register.PD = 1. Brown-out Reset, RCON Register.POR = u. Brown-out Reset, RCON Register.BOR = 0. Brown-out Reset, STKPTR Register.STKFUL = u. Brown-out Reset, STKPTR Register.STKUNF = u. MCLR Reset during Power-Managed Run Modes, Program.Counter = 0000h. MCLR Reset during Power-Managed Run Modes, RCON Register.RI = u. MCLR Reset during Power-Managed Run Modes, RCON Register.TO = 1. MCLR Reset during Power-Managed Run Modes, RCON Register.PD = u. MCLR Reset during Power-Managed Run Modes, RCON Register.POR = u. MCLR Reset during Power-Managed Run Modes, RCON Register.BOR = u. MCLR Reset during Power-Managed Run Modes, STKPTR Register.STKFUL = u. MCLR Reset during Power-Managed Run Modes, STKPTR",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nRegister.STKUNF = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, Program.Counter = 0000h. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.RI = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.TO = 1. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.PD = 0. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.POR = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.BOR = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, STKPTR Register.STKFUL = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, STKPTR Register.STKUNF = u. WDTTime-out during Full Power or Power-Managed Run Mode, Program.Counter = 0000h. WDTTime-out during Full Power or Power-Managed Run Mode, RCON Register.RI = u.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nWDTTime-out during Full Power or Power-Managed Run Mode, RCON Register.TO = 0. WDTTime-out during Full Power or Power-Managed Run Mode, RCON Register.PD = u. WDTTime-out during Full Power or Power-Managed Run Mode, RCON Register.POR = u. WDTTime-out during Full Power or Power-Managed Run Mode, RCON Register.BOR = u. WDTTime-out during Full Power or Power-Managed Run Mode, STKPTR Register.STKFUL = u. WDTTime-out during Full Power or Power-Managed Run Mode, STKPTR Register.STKUNF = u. MCLR Reset during Full-Power Execution, Program.Counter = 0000h. MCLR Reset during Full-Power Execution, RCON Register.RI = u. MCLR Reset during Full-Power Execution, RCON Register.TO = u. MCLR Reset during Full-Power Execution, RCON Register.PD = u. MCLR Reset during Full-Power Execution, RCON Register.POR = u. MCLR Reset during",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nFull-Power Execution, RCON Register.BOR = u. MCLR Reset during Full-Power Execution, STKPTR Register.STKFUL = u. MCLR Reset during Full-Power Execution, STKPTR Register.STKUNF = u. Stack Full Reset (STVREN = 1 ), Program.Counter = 0000h. Stack Full Reset (STVREN = 1 ), RCON Register.RI = u. Stack Full Reset (STVREN = 1 ), RCON Register.TO = u. Stack Full Reset (STVREN = 1 ), RCON Register.PD = u. Stack Full Reset (STVREN = 1 ), RCON Register.POR = u. Stack Full Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKFUL = 1. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKUNF = u. Stack Underflow Reset (STVREN = 1 ), Program.Counter =",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n0000h. Stack Underflow Reset (STVREN = 1 ), RCON Register.RI = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.TO = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.PD = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.POR = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKFUL = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKUNF = 1. Stack Underflow Error (not an actual Reset, STVREN = 0 ), Program.Counter = 0000h. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.RI = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.TO = u. Stack Underflow Error (not an actual",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nReset, STVREN = 0 ), RCON Register.PD = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.POR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.BOR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKFUL = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKUNF = 1. WDTTime-out during Power-Managed Idle or Sleep Modes, Program.Counter = PC + 2. WDTTime-out during Power-Managed Idle or Sleep Modes, RCON Register.RI = u. WDTTime-out during Power-Managed Idle or Sleep Modes, RCON Register.TO = 0. WDTTime-out during Power-Managed Idle or Sleep Modes, RCON Register.PD = 0. WDTTime-out during Power-Managed Idle or Sleep Modes, RCON Register.POR = u.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nWDTTime-out during Power-Managed Idle or Sleep Modes, RCON Register.BOR = u. WDTTime-out during Power-Managed Idle or Sleep Modes, STKPTR Register.STKFUL = u. WDTTime-out during Power-Managed Idle or Sleep Modes, STKPTR Register.STKUNF = u. Interrupt Exit from Power-Managed Modes, Program.Counter = PC + 2 (1). Interrupt Exit from Power-Managed Modes, RCON Register.RI = u. Interrupt Exit from Power-Managed Modes, RCON Register.TO = u. Interrupt Exit from Power-Managed Modes, RCON Register.PD = 0. Interrupt Exit from Power-Managed Modes, RCON Register.POR = u. Interrupt Exit from Power-Managed Modes, RCON Register.BOR = u. Interrupt Exit from Power-Managed Modes, STKPTR Register.STKFUL = u. Interrupt Exit from Power-Managed Modes, STKPTR Register.STKUNF = u\nLegend:\nu = unchanged",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nNote 1: When the wake-up is due to an interrupt and the GIEH or GIEL bits are set, the PC is loaded with the interrupt vector (008h or 0018h).",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSU, Applicable Devices = 2420. TOSU, Applicable Devices = 2520. TOSU, Applicable Devices = 4420. TOSU, Applicable Devices = 4520. TOSU, Power-on Reset, Brown-out Reset = ---0 0000. TOSU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0 0000. TOSU, Wake-up via WDT or Interrupt = ---0 uuuu (3). TOSH, Applicable Devices = 2420. TOSH, Applicable Devices = 2520. TOSH, Applicable Devices = 4420. TOSH, Applicable Devices = 4520. TOSH, Power-on Reset, Brown-out Reset = 0000 0000. TOSH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TOSH, Wake-up via WDT or Interrupt = uuuu uuuu (3). TOSL, Applicable Devices = 2420. TOSL, Applicable Devices = 2520. TOSL, Applicable Devices = 4420. TOSL, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSL, Power-on Reset, Brown-out Reset = 0000 0000. TOSL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TOSL, Wake-up via WDT or Interrupt = uuuu uuuu (3). STKPTR, Applicable Devices = 2420. STKPTR, Applicable Devices = 2520. STKPTR, Applicable Devices = 4420. STKPTR, Applicable Devices = 4520. STKPTR, Power-on Reset, Brown-out Reset = 00-0 0000. STKPTR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu-0 0000. STKPTR, Wake-up via WDT or Interrupt = uu-u uuuu (3). PCLATU, Applicable Devices = 2420. PCLATU, Applicable Devices = 2520. PCLATU, Applicable Devices = 4420. PCLATU, Applicable Devices = 4520. PCLATU, Power-on Reset, Brown-out Reset = ---0",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n0000. PCLATU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0 0000. PCLATU, Wake-up via WDT or Interrupt = ---u uuuu. PCLATH, Applicable Devices = 2420. PCLATH, Applicable Devices = 2520. PCLATH, Applicable Devices = 4420. PCLATH, Applicable Devices = 4520. PCLATH, Power-on Reset, Brown-out Reset = 0000 0000. PCLATH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PCLATH, Wake-up via WDT or Interrupt = uuuu uuuu. PCL, Applicable Devices = 2420. PCL, Applicable Devices = 2520. PCL, Applicable Devices = 4420. PCL, Applicable Devices = 4520. PCL, Power-on Reset, Brown-out Reset = 0000 0000. PCL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PCL, Wake-up via WDT",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nor Interrupt = PC + 2 (2). TBLPTRU, Applicable Devices = 2420. TBLPTRU, Applicable Devices = 2520. TBLPTRU, Applicable Devices = 4420. TBLPTRU, Applicable Devices = 4520. TBLPTRU, Power-on Reset, Brown-out Reset = --00 0000. TBLPTRU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00 0000. TBLPTRU, Wake-up via WDT or Interrupt = --uu uuuu. TBLPTRH, Applicable Devices = 2420. TBLPTRH, Applicable Devices = 2520. TBLPTRH, Applicable Devices = 4420. TBLPTRH, Applicable Devices = 4520. TBLPTRH, Power-on Reset, Brown-out Reset = 0000 0000. TBLPTRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TBLPTRH, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRL, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= 2420. TBLPTRL, Applicable Devices = 2520. TBLPTRL, Applicable Devices = 4420. TBLPTRL, Applicable Devices = 4520. TBLPTRL, Power-on Reset, Brown-out Reset = 0000 0000. TBLPTRL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TBLPTRL, Wake-up via WDT or Interrupt = uuuu uuuu. TABLAT, Applicable Devices = 2420. TABLAT, Applicable Devices = 2520. TABLAT, Applicable Devices = 4420. TABLAT, Applicable Devices = 4520. TABLAT, Power-on Reset, Brown-out Reset = 0000 0000. TABLAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TABLAT, Wake-up via WDT or Interrupt = uuuu uuuu. PRODH, Applicable Devices = 2420. PRODH, Applicable Devices = 2520. PRODH, Applicable Devices = 4420. PRODH, Applicable Devices = 4520. PRODH,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPower-on Reset, Brown-out Reset = xxxx xxxx. PRODH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PRODH, Wake-up via WDT or Interrupt = uuuu uuuu. PRODL, Applicable Devices = 2420. PRODL, Applicable Devices = 2520. PRODL, Applicable Devices = 4420. PRODL, Applicable Devices = 4520. PRODL, Power-on Reset, Brown-out Reset = xxxx xxxx. PRODL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PRODL, Wake-up via WDT or Interrupt = uuuu uuuu. INTCON, Applicable Devices = 2420. INTCON, Applicable Devices = 2520. INTCON, Applicable Devices = 4420. INTCON, Applicable Devices = 4520. INTCON, Power-on Reset, Brown-out Reset = 0000 000x. INTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 000u.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nINTCON, Wake-up via WDT or Interrupt = uuuu uuuu (1). INTCON2, Applicable Devices = 2420. INTCON2, Applicable Devices = 2520. INTCON2, Applicable Devices = 4420. INTCON2, Applicable Devices = 4520. INTCON2, Power-on Reset, Brown-out Reset = 1111 -1-1. INTCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 -1-1. INTCON2, Wake-up via WDT or Interrupt = uuuu -u-u (1). INTCON3, Applicable Devices = 2420. INTCON3, Applicable Devices = 2520. INTCON3, Applicable Devices = 4420. INTCON3, Applicable Devices = 4520. INTCON3, Power-on Reset, Brown-out Reset = 11-0 0-00. INTCON3, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-0 0-00. INTCON3, Wake-up via WDT or Interrupt = uu-u",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nu-uu (1). INDF0, Applicable Devices = 2420. INDF0, Applicable Devices = 2520. INDF0, Applicable Devices = 4420. INDF0, Applicable Devices = 4520. INDF0, Power-on Reset, Brown-out Reset = N/A. INDF0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF0, Wake-up via WDT or Interrupt = N/A. POSTINC0, Applicable Devices = 2420. POSTINC0, Applicable Devices = 2520. POSTINC0, Applicable Devices = 4420. POSTINC0, Applicable Devices = 4520. POSTINC0, Power-on Reset, Brown-out Reset = N/A. POSTINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC0, Wake-up via WDT or Interrupt = N/A. POSTDEC0, Applicable Devices = 2420. POSTDEC0, Applicable Devices = 2520. POSTDEC0, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n4420. POSTDEC0, Applicable Devices = 4520. POSTDEC0, Power-on Reset, Brown-out Reset = N/A. POSTDEC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC0, Wake-up via WDT or Interrupt = N/A. PREINC0, Applicable Devices = 2420. PREINC0, Applicable Devices = 2520. PREINC0, Applicable Devices = 4420. PREINC0, Applicable Devices = 4520. PREINC0, Power-on Reset, Brown-out Reset = N/A. PREINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC0, Wake-up via WDT or Interrupt = N/A. PLUSW0, Applicable Devices = 2420. PLUSW0, Applicable Devices = 2520. PLUSW0, Applicable Devices = 4420. PLUSW0, Applicable Devices = 4520. PLUSW0, Power-on Reset, Brown-out Reset = N/A. PLUSW0,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nMCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW0, Wake-up via WDT or Interrupt = N/A. FSR0H, Applicable Devices = 2420. FSR0H, Applicable Devices = 2520. FSR0H, Applicable Devices = 4420. FSR0H, Applicable Devices = 4520. FSR0H, Power-on Reset, Brown-out Reset = ---- 0000. FSR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR0H, Wake-up via WDT or Interrupt = ---- uuuu. FSR0L, Applicable Devices = 2420. FSR0L, Applicable Devices = 2520. FSR0L, Applicable Devices = 4420. FSR0L, Applicable Devices = 4520. FSR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nuuuu. FSR0L, Wake-up via WDT or Interrupt = uuuu uuuu. WREG, Applicable Devices = 2420. WREG, Applicable Devices = 2520. WREG, Applicable Devices = 4420. WREG, Applicable Devices = 4520. WREG, Power-on Reset, Brown-out Reset = xxxx xxxx. WREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. WREG, Wake-up via WDT or Interrupt = uuuu uuuu. INDF1, Applicable Devices = 2420. INDF1, Applicable Devices = 2520. INDF1, Applicable Devices = 4420. INDF1, Applicable Devices = 4520. INDF1, Power-on Reset, Brown-out Reset = N/A. INDF1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF1, Wake-up via WDT or Interrupt = N/A. POSTINC1, Applicable Devices = 2420.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPOSTINC1, Applicable Devices = 2520. POSTINC1, Applicable Devices = 4420. POSTINC1, Applicable Devices = 4520. POSTINC1, Power-on Reset, Brown-out Reset = N/A. POSTINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC1, Wake-up via WDT or Interrupt = N/A. POSTDEC1, Applicable Devices = 2420. POSTDEC1, Applicable Devices = 2520. POSTDEC1, Applicable Devices = 4420. POSTDEC1, Applicable Devices = 4520. POSTDEC1, Power-on Reset, Brown-out Reset = N/A. POSTDEC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC1, Wake-up via WDT or Interrupt = N/A. PREINC1, Applicable Devices = 2420. PREINC1, Applicable Devices = 2520. PREINC1, Applicable Devices = 4420. PREINC1, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPREINC1, Power-on Reset, Brown-out Reset = N/A. PREINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC1, Wake-up via WDT or Interrupt = N/A. PLUSW1, Applicable Devices = 2420. PLUSW1, Applicable Devices = 2520. PLUSW1, Applicable Devices = 4420. PLUSW1, Applicable Devices = 4520. PLUSW1, Power-on Reset, Brown-out Reset = N/A. PLUSW1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW1, Wake-up via WDT or Interrupt = N/A\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n6: The Reset value of the PCFG bits depends on the value of the PBADEN Configuration (CONFIG3H<1>) bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nFSR1H, Applicable Devices = 2420. FSR1H, Applicable Devices = 2520. FSR1H, Applicable Devices = 4420. FSR1H, Applicable Devices = 4520. FSR1H, Power-on Reset, Brown-out Reset = ---- 0000. FSR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR1H, Wake-up via WDT or Interrupt = ---- uuuu. FSR1L, Applicable Devices = 2420. FSR1L, Applicable Devices = 2520. FSR1L, Applicable Devices = 4420. FSR1L, Applicable Devices = 4520. FSR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR1L, Wake-up via WDT or Interrupt = uuuu uuuu. BSR, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2420. BSR, Applicable Devices = 2520. BSR, Applicable Devices = 4420. BSR, Applicable Devices = 4520. BSR, Power-on Reset, Brown-out Reset = ---- 0000. BSR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. BSR, Wake-up via WDT or Interrupt = ---- uuuu. INDF2, Applicable Devices = 2420. INDF2, Applicable Devices = 2520. INDF2, Applicable Devices = 4420. INDF2, Applicable Devices = 4520. INDF2, Power-on Reset, Brown-out Reset = N/A. INDF2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF2, Wake-up via WDT or Interrupt = N/A. POSTINC2, Applicable Devices = 2420. POSTINC2, Applicable Devices = 2520. POSTINC2, Applicable Devices = 4420. POSTINC2, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPOSTINC2, Power-on Reset, Brown-out Reset = N/A. POSTINC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC2, Wake-up via WDT or Interrupt = N/A. POSTDEC2, Applicable Devices = 2420. POSTDEC2, Applicable Devices = 2520. POSTDEC2, Applicable Devices = 4420. POSTDEC2, Applicable Devices = 4520. POSTDEC2, Power-on Reset, Brown-out Reset = N/A. POSTDEC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC2, Wake-up via WDT or Interrupt = N/A. PREINC2, Applicable Devices = 2420. PREINC2, Applicable Devices = 2520. PREINC2, Applicable Devices = 4420. PREINC2, Applicable Devices = 4520. PREINC2, Power-on Reset, Brown-out Reset = N/A. PREINC2, MCLR Resets,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT Reset, RESET Instruction, Stack Resets = N/A. PREINC2, Wake-up via WDT or Interrupt = N/A. PLUSW2, Applicable Devices = 2420. PLUSW2, Applicable Devices = 2520. PLUSW2, Applicable Devices = 4420. PLUSW2, Applicable Devices = 4520. PLUSW2, Power-on Reset, Brown-out Reset = N/A. PLUSW2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW2, Wake-up via WDT or Interrupt = N/A. FSR2H, Applicable Devices = 2420. FSR2H, Applicable Devices = 2520. FSR2H, Applicable Devices = 4420. FSR2H, Applicable Devices = 4520. FSR2H, Power-on Reset, Brown-out Reset = ---- 0000. FSR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR2H, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n---- uuuu. FSR2L, Applicable Devices = 2420. FSR2L, Applicable Devices = 2520. FSR2L, Applicable Devices = 4420. FSR2L, Applicable Devices = 4520. FSR2L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR2L, Wake-up via WDT or Interrupt = uuuu uuuu. STATUS, Applicable Devices = 2420. STATUS, Applicable Devices = 2520. STATUS, Applicable Devices = 4420. STATUS, Applicable Devices = 4520. STATUS, Power-on Reset, Brown-out Reset = ---x xxxx. STATUS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---u uuuu. STATUS, Wake-up via WDT or Interrupt = ---u uuuu. TMR0H, Applicable Devices = 2420. TMR0H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 2520. TMR0H, Applicable Devices = 4420. TMR0H, Applicable Devices = 4520. TMR0H, Power-on Reset, Brown-out Reset = 0000 0000. TMR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR0H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0L, Applicable Devices = 2420. TMR0L, Applicable Devices = 2520. TMR0L, Applicable Devices = 4420. TMR0L, Applicable Devices = 4520. TMR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR0L, Wake-up via WDT or Interrupt = uuuu uuuu. T0CON, Applicable Devices = 2420. T0CON, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2520. T0CON, Applicable Devices = 4420. T0CON, Applicable Devices = 4520. T0CON, Power-on Reset, Brown-out Reset = 1111 1111. T0CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. T0CON, Wake-up via WDT or Interrupt = uuuu uuuu. OSCCON, Applicable Devices = 2420. OSCCON, Applicable Devices = 2520. OSCCON, Applicable Devices = 4420. OSCCON, Applicable Devices = 4520. OSCCON, Power-on Reset, Brown-out Reset = 0100 q000. OSCCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0100 q000. OSCCON, Wake-up via WDT or Interrupt = uuuu quuu. HLVDCON, Applicable Devices = 2420. HLVDCON, Applicable Devices = 2520. HLVDCON, Applicable Devices = 4420. HLVDCON, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nHLVDCON, Power-on Reset, Brown-out Reset = 0-00 0101. HLVDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00 0101. HLVDCON, Wake-up via WDT or Interrupt = u-uu uuuu. WDTCON, Applicable Devices = 2420. WDTCON, Applicable Devices = 2520. WDTCON, Applicable Devices = 4420. WDTCON, Applicable Devices = 4520. WDTCON, Power-on Reset, Brown-out Reset = ---- ---0. WDTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- ---0. WDTCON, Wake-up via WDT or Interrupt = ---- ---u. RCON (4), Applicable Devices = 2420. RCON (4), Applicable Devices = 2520. RCON (4), Applicable Devices = 4420. RCON (4), Applicable Devices = 4520. RCON (4), Power-on",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nReset, Brown-out Reset = 0q-1 11q0. RCON (4), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0q-q qquu. RCON (4), Wake-up via WDT or Interrupt = uq-u qquu. TMR1H, Applicable Devices = 2420. TMR1H, Applicable Devices = 2520. TMR1H, Applicable Devices = 4420. TMR1H, Applicable Devices = 4520. TMR1H, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1L, Applicable Devices = 2420. TMR1L, Applicable Devices = 2520. TMR1L, Applicable Devices = 4420. TMR1L, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTMR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1L, Wake-up via WDT or Interrupt = uuuu uuuu. T1CON, Applicable Devices = 2420. T1CON, Applicable Devices = 2520. T1CON, Applicable Devices = 4420. T1CON, Applicable Devices = 4520. T1CON, Power-on Reset, Brown-out Reset = 0000 0000. T1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = u0uu uuuu. T1CON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR2, Applicable Devices = 2420. TMR2, Applicable Devices = 2520. TMR2, Applicable Devices = 4420. TMR2, Applicable Devices = 4520. TMR2, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000 0000. TMR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR2, Wake-up via WDT or Interrupt = uuuu uuuu. PR2, Applicable Devices = 2420. PR2, Applicable Devices = 2520. PR2, Applicable Devices = 4420. PR2, Applicable Devices = 4520. PR2, Power-on Reset, Brown-out Reset = 1111 1111. PR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. PR2, Wake-up via WDT or Interrupt = 1111 1111. T2CON, Applicable Devices = 2420. T2CON, Applicable Devices = 2520. T2CON, Applicable Devices = 4420. T2CON, Applicable Devices = 4520. T2CON, Power-on Reset, Brown-out Reset = -000 0000. T2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. T2CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = -uuu uuuu. SSPBUF, Applicable Devices = 2420. SSPBUF, Applicable Devices = 2520. SSPBUF, Applicable Devices = 4420. SSPBUF, Applicable Devices = 4520. SSPBUF, Power-on Reset, Brown-out Reset = xxxx xxxx. SSPBUF, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. SSPBUF, Wake-up via WDT or Interrupt = uuuu uuuu. SSPADD, Applicable Devices = 2420. SSPADD, Applicable Devices = 2520. SSPADD, Applicable Devices = 4420. SSPADD, Applicable Devices = 4520. SSPADD, Power-on Reset, Brown-out Reset = 0000 0000. SSPADD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPADD, Wake-up via WDT or Interrupt = uuuu uuuu.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nSSPSTAT, Applicable Devices = 2420. SSPSTAT, Applicable Devices = 2520. SSPSTAT, Applicable Devices = 4420. SSPSTAT, Applicable Devices = 4520. SSPSTAT, Power-on Reset, Brown-out Reset = 0000 0000. SSPSTAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPSTAT, Wake-up via WDT or Interrupt = uuuu uuuu\nLegend: u = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n6: The Reset value of the PCFG bits depends on the value of the PBADEN Configuration (CONFIG3H<1>) bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nADRESH, Applicable Devices = 2420. ADRESH, Applicable Devices = 2520. ADRESH, Applicable Devices = 4420. ADRESH, Applicable Devices = 4520. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESL, Applicable Devices = 2420. ADRESL, Applicable Devices = 2520. ADRESL, Applicable Devices = 4420. ADRESL, Applicable Devices = 4520. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = uuuu. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADCON0, Applicable Devices = 2420. ADCON0, Applicable Devices = 2520. ADCON0, Applicable Devices = 4420. ADCON0, Applicable Devices = 4520. ADCON0, Power-on Reset, Brown-out Reset = --00. ADCON0, Power-on Reset, Brown-out Reset = 0000. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON0, Wake-up via WDT or Interrupt = --uu. ADCON0, Wake-up via WDT or Interrupt = uuuu. ADCON1, Applicable Devices = 2420. ADCON1, Applicable",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nDevices = 2520. ADCON1, Applicable Devices = 4420. ADCON1, Applicable Devices = 4520. ADCON1, Power-on Reset, Brown-out Reset = --00. ADCON1, Power-on Reset, Brown-out Reset = 0qqq (6). ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0qqq (6). ADCON1, Wake-up via WDT or Interrupt = --uu. ADCON1, Wake-up via WDT or Interrupt = uuuu. ADCON2, Applicable Devices = 2420. ADCON2, Applicable Devices = 2520. ADCON2, Applicable Devices = 4420. ADCON2, Applicable Devices = 4520. ADCON2, Power-on Reset, Brown-out Reset = 0-00. ADCON2, Power-on Reset, Brown-out Reset = 0000. ADCON2, MCLR Resets, WDT Reset, RESET",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nInstruction, Stack Resets = 0-00. ADCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON2, Wake-up via WDT or Interrupt = u-uu. ADCON2, Wake-up via WDT or Interrupt = uuuu. CCPR1H, Applicable Devices = 2420. CCPR1H, Applicable Devices = 2520. CCPR1H, Applicable Devices = 4420. CCPR1H, Applicable Devices = 4520. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCPR1L, Applicable Devices = 2420. CCPR1L, Applicable Devices = 2520. CCPR1L, Applicable Devices = 4420. CCPR1L, Applicable Devices = 4520. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Applicable Devices = 2420. CCP1CON, Applicable Devices = 2520. CCP1CON, Applicable Devices = 4420. CCP1CON, Applicable Devices = 4520. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Applicable Devices = 2420. CCP1CON, Applicable Devices = 2520. CCP1CON, Applicable Devices = 4420. CCP1CON, Applicable Devices = 4520. CCP1CON, Power-on Reset, Brown-out Reset = --00. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n--uu. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCPR2H, Applicable Devices = 2420. CCPR2H, Applicable Devices = 2520. CCPR2H, Applicable Devices = 4420. CCPR2H, Applicable Devices = 4520. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2L, Applicable Devices = 2420. CCPR2L, Applicable Devices = 2520. CCPR2L, Applicable Devices = 4420. CCPR2L, Applicable Devices = 4520.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCP2CON, Applicable Devices = 2420. CCP2CON, Applicable Devices = 2520. CCP2CON, Applicable Devices = 4420. CCP2CON, Applicable Devices = 4520. CCP2CON, Power-on Reset, Brown-out Reset = --00. CCP2CON, Power-on Reset, Brown-out Reset = 0000. CCP2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP2CON, MCLR Resets,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT Reset, RESET Instruction, Stack Resets = 0000. CCP2CON, Wake-up via WDT or Interrupt = --uu. CCP2CON, Wake-up via WDT or Interrupt = uuuu. BAUDCON, Applicable Devices = 2420. BAUDCON, Applicable Devices = 2520. BAUDCON, Applicable Devices = 4420. BAUDCON, Applicable Devices = 4520. BAUDCON, Power-on Reset, Brown-out Reset = 0100. BAUDCON, Power-on Reset, Brown-out Reset = 0-00. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0100. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00. BAUDCON, Wake-up via WDT or Interrupt = uuuu. BAUDCON, Wake-up via WDT or Interrupt = u-uu. PWM1CON, Applicable Devices = 2420. PWM1CON, Applicable Devices = 2520. PWM1CON, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4420. PWM1CON, Applicable Devices = 4520. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, Wake-up via WDT or Interrupt = uuuu. PWM1CON, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Applicable Devices = 2420. ECCP1AS, Applicable Devices = 2520. ECCP1AS, Applicable Devices = 4420. ECCP1AS, Applicable Devices = 4520. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. , Applicable Devices = 2420. , Applicable Devices = 2520. , Applicable Devices = 4420. , Applicable Devices = 4520. , Power-on Reset, Brown-out Reset = 0000. , Power-on Reset, Brown-out Reset = 00--. , MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. , MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00--. , Wake-up via WDT or Interrupt = uuuu. , Wake-up via WDT or Interrupt = uu--. CVRCON, Applicable Devices = 2420. CVRCON, Applicable Devices = 2520. CVRCON, Applicable Devices = 4420. CVRCON, Applicable Devices = 4520. CVRCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPower-on Reset, Brown-out Reset = 0000. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, Wake-up via WDT or Interrupt = uuuu. CVRCON, Wake-up via WDT or Interrupt = uuuu. CMCON, Applicable Devices = 2420. CMCON, Applicable Devices = 2520. CMCON, Applicable Devices = 4420. CMCON, Applicable Devices = 4520. CMCON, Power-on Reset, Brown-out Reset = 0000. CMCON, Power-on Reset, Brown-out Reset = 0111. CMCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CMCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0111. CMCON, Wake-up via WDT or Interrupt = uuuu.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCMCON, Wake-up via WDT or Interrupt = uuuu. TMR3H, Applicable Devices = 2420. TMR3H, Applicable Devices = 2520. TMR3H, Applicable Devices = 4420. TMR3H, Applicable Devices = 4520. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3L, Applicable Devices = 2420. TMR3L, Applicable Devices = 2520. TMR3L, Applicable Devices = 4420. TMR3L, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n4520. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. T3CON, Applicable Devices = 2420. T3CON, Applicable Devices = 2520. T3CON, Applicable Devices = 4420. T3CON, Applicable Devices = 4520. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, MCLR",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. SPBRGH, Applicable Devices = 2420. SPBRGH, Applicable Devices = 2520. SPBRGH, Applicable Devices = 4420. SPBRGH, Applicable Devices = 4520. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRG, Applicable Devices = 2420. SPBRG, Applicable Devices = 2520. SPBRG, Applicable Devices = 4420.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nSPBRG, Applicable Devices = 4520. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, Wake-up via WDT or Interrupt = uuuu. SPBRG, Wake-up via WDT or Interrupt = uuuu. RCREG, Applicable Devices = 2420. RCREG, Applicable Devices = 2520. RCREG, Applicable Devices = 4420. RCREG, Applicable Devices = 4520. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 0000. RCREG, Wake-up via WDT or Interrupt = uuuu. RCREG, Wake-up via WDT or Interrupt = uuuu. TXREG, Applicable Devices = 2420. TXREG, Applicable Devices = 2520. TXREG, Applicable Devices = 4420. TXREG, Applicable Devices = 4520. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, Wake-up via WDT or Interrupt = uuuu. TXREG, Wake-up via WDT or Interrupt = uuuu. TXSTA, Applicable Devices = 2420. TXSTA, Applicable Devices = 2520. TXSTA, Applicable Devices = 4420. TXSTA, Applicable Devices = 4520. TXSTA, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000. TXSTA, Power-on Reset, Brown-out Reset = 0010. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0010. TXSTA, Wake-up via WDT or Interrupt = uuuu. TXSTA, Wake-up via WDT or Interrupt = uuuu. RCSTA, Applicable Devices = 2420. RCSTA, Applicable Devices = 2520. RCSTA, Applicable Devices = 4420. RCSTA, Applicable Devices = 4520. RCSTA, Power-on Reset, Brown-out Reset = 0000. RCSTA, Power-on Reset, Brown-out Reset = 000x. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 000x. RCSTA, Wake-up via WDT or Interrupt = uuuu. RCSTA, Wake-up via WDT or Interrupt",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= uuuu. EEADR, Applicable Devices = 2420. EEADR, Applicable Devices = 2520. EEADR, Applicable Devices = 4420. EEADR, Applicable Devices = 4520. EEADR, Power-on Reset, Brown-out Reset = 0000. EEADR, Power-on Reset, Brown-out Reset = 0000. EEADR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEADR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEADR, Wake-up via WDT or Interrupt = uuuu. EEADR, Wake-up via WDT or Interrupt = uuuu. EEDATA, Applicable Devices = 2420. EEDATA, Applicable Devices = 2520. EEDATA, Applicable Devices = 4420. EEDATA, Applicable Devices = 4520. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, MCLR",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEDATA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEDATA, Wake-up via WDT or Interrupt = uuuu. EEDATA, Wake-up via WDT or Interrupt = uuuu. EECON2, Applicable Devices = 2420. EECON2, Applicable Devices = 2520. EECON2, Applicable Devices = 4420. EECON2, Applicable Devices = 4520. EECON2, Power-on Reset, Brown-out Reset = 0000. EECON2, Power-on Reset, Brown-out Reset = 0000. EECON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EECON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EECON2, Wake-up via WDT or Interrupt = 0000. EECON2, Wake-up via WDT or Interrupt = 0000. EECON1, Applicable Devices = 2420. EECON1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 2520. EECON1, Applicable Devices = 4420. EECON1, Applicable Devices = 4520. EECON1, Power-on Reset, Brown-out Reset = xx-0. EECON1, Power-on Reset, Brown-out Reset = x000. EECON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu-0. EECON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = u000. EECON1, Wake-up via WDT or Interrupt = uu-0. EECON1, Wake-up via WDT or Interrupt = u000\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n6: The Reset value of the PCFG bits depends on the value of the PBADEN Configuration (CONFIG3H<1>) bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nIPR2, Applicable Devices = 2420. IPR2, Applicable Devices = 2520. IPR2, Applicable Devices = 4420. IPR2, Applicable Devices = 4520. IPR2, Power-on Reset, Brown-out Reset = 11-1 1111. IPR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-1 1111. IPR2, Wake-up via WDT or Interrupt = uu-u uuuu. PIR2, Applicable Devices = 2420. PIR2, Applicable Devices = 2520. PIR2, Applicable Devices = 4420. PIR2, Applicable Devices = 4520. PIR2, Power-on Reset, Brown-out Reset = 00-0 0000. PIR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. PIR2, Wake-up via WDT or Interrupt = uu-u uuuu (1). PIE2, Applicable Devices = 2420. PIE2, Applicable Devices = 2520. PIE2, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4420. PIE2, Applicable Devices = 4520. PIE2, Power-on Reset, Brown-out Reset = 00-0 0000. PIE2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. PIE2, Wake-up via WDT or Interrupt = uu-u uuuu. IPR1, Applicable Devices = 2420. IPR1, Applicable Devices = 2520. IPR1, Applicable Devices = 4420. IPR1, Applicable Devices = 4520. IPR1, Power-on Reset, Brown-out Reset = 1111 1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. IPR1, Wake-up via WDT or Interrupt = uuuu uuuu. IPR1, Applicable Devices = 2420. IPR1, Applicable Devices = 2520. IPR1, Applicable Devices = 4420. IPR1, Applicable Devices = 4520. IPR1, Power-on Reset, Brown-out Reset = -111",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -111 1111. IPR1, Wake-up via WDT or Interrupt = -uuu uuuu. PIR1, Applicable Devices = 2420. PIR1, Applicable Devices = 2520. PIR1, Applicable Devices = 4420. PIR1, Applicable Devices = 4520. PIR1, Power-on Reset, Brown-out Reset = 0000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIR1, Wake-up via WDT or Interrupt = uuuu uuuu (1). PIR1, Applicable Devices = 2420. PIR1, Applicable Devices = 2520. PIR1, Applicable Devices = 4420. PIR1, Applicable Devices = 4520. PIR1, Power-on Reset, Brown-out Reset = -000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. PIR1, Wake-up via WDT or Interrupt = -uuu uuuu (1). PIE1, Applicable Devices = 2420. PIE1, Applicable Devices = 2520. PIE1, Applicable Devices = 4420. PIE1, Applicable Devices = 4520. PIE1, Power-on Reset, Brown-out Reset = 0000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIE1, Wake-up via WDT or Interrupt = uuuu uuuu. PIE1, Applicable Devices = 2420. PIE1, Applicable Devices = 2520. PIE1, Applicable Devices = 4420. PIE1, Applicable Devices = 4520. PIE1, Power-on Reset, Brown-out Reset = -000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. PIE1, Wake-up via WDT or Interrupt = -uuu uuuu. OSCTUNE, Applicable Devices = 2420. OSCTUNE, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2520. OSCTUNE, Applicable Devices = 4420. OSCTUNE, Applicable Devices = 4520. OSCTUNE, Power-on Reset, Brown-out Reset = 00-0 0000. OSCTUNE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. OSCTUNE, Wake-up via WDT or Interrupt = uu-u uuuu. TRISE, Applicable Devices = 2420. TRISE, Applicable Devices = 2520. TRISE, Applicable Devices = 4420. TRISE, Applicable Devices = 4520. TRISE, Power-on Reset, Brown-out Reset = 0000 -111. TRISE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 -111. TRISE, Wake-up via WDT or Interrupt = uuuu -uuu. TRISD, Applicable Devices = 2420. TRISD, Applicable Devices = 2520. TRISD, Applicable Devices = 4420. TRISD, Applicable Devices = 4520. TRISD, Power-on Reset, Brown-out Reset = 1111",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1111. TRISD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISD, Wake-up via WDT or Interrupt = uuuu uuuu. TRISC, Applicable Devices = 2420. TRISC, Applicable Devices = 2520. TRISC, Applicable Devices = 4420. TRISC, Applicable Devices = 4520. TRISC, Power-on Reset, Brown-out Reset = 1111 1111. TRISC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISC, Wake-up via WDT or Interrupt = uuuu uuuu. TRISB, Applicable Devices = 2420. TRISB, Applicable Devices = 2520. TRISB, Applicable Devices = 4420. TRISB, Applicable Devices = 4520. TRISB, Power-on Reset, Brown-out Reset = 1111 1111. TRISB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISB, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. TRISA (5), Applicable Devices = 2420. TRISA (5), Applicable Devices = 2520. TRISA (5), Applicable Devices = 4420. TRISA (5), Applicable Devices = 4520. TRISA (5), Power-on Reset, Brown-out Reset = 1111 1111 (5). TRISA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111 (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). LATE, Applicable Devices = 2420. LATE, Applicable Devices = 2520. LATE, Applicable Devices = 4420. LATE, Applicable Devices = 4520. LATE, Power-on Reset, Brown-out Reset = ---- -xxx. LATE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- -uuu. LATE, Wake-up via WDT or Interrupt = ---- -uuu. LATD, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2420. LATD, Applicable Devices = 2520. LATD, Applicable Devices = 4420. LATD, Applicable Devices = 4520. LATD, Power-on Reset, Brown-out Reset = xxxx xxxx. LATD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATD, Wake-up via WDT or Interrupt = uuuu uuuu. LATC, Applicable Devices = 2420. LATC, Applicable Devices = 2520. LATC, Applicable Devices = 4420. LATC, Applicable Devices = 4520. LATC, Power-on Reset, Brown-out Reset = xxxx xxxx. LATC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATC, Wake-up via WDT or Interrupt = uuuu uuuu. LATB, Applicable Devices = 2420. LATB, Applicable Devices = 2520. LATB, Applicable Devices = 4420. LATB, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4520. LATB, Power-on Reset, Brown-out Reset = xxxx xxxx. LATB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATB, Wake-up via WDT or Interrupt = uuuu uuuu. LATA (5), Applicable Devices = 2420. LATA (5), Applicable Devices = 2520. LATA (5), Applicable Devices = 4420. LATA (5), Applicable Devices = 4520. LATA (5), Power-on Reset, Brown-out Reset = xxxx xxxx (5). LATA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu (5). LATA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). PORTE, Applicable Devices = 2420. PORTE, Applicable Devices = 2520. PORTE, Applicable Devices = 4420. PORTE, Applicable Devices = 4520. PORTE,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPower-on Reset, Brown-out Reset = ---- xxxx. PORTE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- uuuu. PORTE, Wake-up via WDT or Interrupt = ---- uuuu. PORTD, Applicable Devices = 2420. PORTD, Applicable Devices = 2520. PORTD, Applicable Devices = 4420. PORTD, Applicable Devices = 4520. PORTD, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu uuuu. PORTC, Applicable Devices = 2420. PORTC, Applicable Devices = 2520. PORTC, Applicable Devices = 4420. PORTC, Applicable Devices = 4520. PORTC, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu uuuu. PORTB, Applicable Devices = 2420. PORTB, Applicable Devices = 2520. PORTB, Applicable Devices = 4420. PORTB, Applicable Devices = 4520. PORTB, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu uuuu. PORTA (5), Applicable Devices = 2420. PORTA (5), Applicable Devices = 2520. PORTA (5), Applicable Devices = 4420. PORTA (5), Applicable Devices = 4520. PORTA (5), Power-on Reset, Brown-out Reset = xx0x 0000 (5). PORTA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu0u 0000 (5). PORTA",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n(5), Wake-up via WDT or Interrupt = uuuu uuuu (5)\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n6: The Reset value of the PCFG bits depends on the value of the PBADEN Configuration (CONFIG3H<1>) bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .",
    "5.0 MEMORY ORGANIZATION\nThere are three types of memory in PIC18 enhanced microcontroller devices:\n\u00b7 Program Memory\n\u00b7 Data RAM\n\u00b7 Data EEPROM\nAs Harvard architecture devices, the data and program memories use separate busses; this allows for concurrent  access  of  the  two  memory  spaces.  The  data EEPROM, for practical purposes, can be regarded as a peripheral device, since it is addressed and accessed through a set of control registers.",
    "5.1 Program Memory Organization\nPIC18  microcontrollers  implement  a  21-bit  program counter,  which  is  capable  of  addressing  a  2-Mbyte program memory space. Accessing a location between the  upper  boundary  of  the  physically  implemented memory and the 2-Mbyte address will return all ' 0 's (a NOP instruction).\nThe PIC18F2420 and PIC18F4420 each have 16 Kbytes of Flash memory and can store up to 8,192 single-word instructions.  The  PIC18F2520  and  PIC18F4520  each have 32 Kbytes of Flash memory and can store up to 16,384 single-word instructions.\nAdditional detailed information on the operation of the Flash  program  memory  is  provided  in Section 6.0 'Flash Program Memory' . Data EEPROM is discussed separately in Section 7.0 'Data EEPROM Memory' .\nPIC18 devices have two interrupt vectors. The Reset vector  address  is  at  0000h  and  the  interrupt  vector addresses are at 0008h and 0018h.\nThe  program  memory  map  for  PIC18F2420/2520/ 4420/4520 devices is shown in Figure 5-1 .",
    "5.1.1 PROGRAM COUNTER\nThe Program Counter (PC) specifies the address of the instruction to fetch for execution. The PC is 21 bits wide and is contained in three separate 8-bit registers. The low byte, known as the PCL register, is both readable and writable. The high byte, or PCH register, contains the PC<15:8> bits; it is not directly readable or writable. Updates to the PCH register are performed through the PCLATH register. The upper byte is called PCU. This register  contains  the  PC<20:16>  bits;  it  is  also  not directly  readable  or  writable.  Updates  to  the  PCU register are performed through the PCLATU register.\nThe stack operates as a 31-word by 21-bit RAM and a 5-bit  Stack Pointer, STKPTR. The stack space is not part of either program or data space. The Stack Pointer is readable and writable and the address on the top of the stack is readable and writable through the Top-ofStack (TOS) Special Function Registers. Data can also be pushed to, or popped from the stack, using these registers.",
    "5.1.1 PROGRAM COUNTER\nThe contents of PCLATH and PCLATU are transferred to  the  program  counter  by  any  operation  that  writes PCL.  Similarly,  the  upper  two  bytes  of  the  program counter are transferred to PCLATH and PCLATU by an operation that reads PCL. This is useful for computed offsets  to  the  PC  (see Section 5.1.4.1  'Computed GOTO' ).\nThe PC addresses bytes in the program memory. To prevent the PC from becoming misaligned with word instructions, the Least Significant bit of PCL is fixed to a  value  of  ' 0 '.  The  PC  increments  by  2  to  address sequential instructions in the program memory.\nThe CALL , RCALL , GOTO and program branch instructions write to the program counter directly. For these instructions, the contents of PCLATH  and PCLATU are not transferred to the program counter.",
    "5.1.2 RETURN ADDRESS STACK\nThe return address stack allows any combination of up to 31 program calls and interrupts to occur. The PC is pushed onto the stack when a CALL or RCALL instruction is executed or an interrupt is Acknowledged. The PC value is pulled off the stack on a RETURN, RETLW or a RETFIE instruction. PCLATU and PCLATH are not affected by any of the RETURN or CALL instructions.\nA CALL type instruction causes a push onto the stack; the Stack Pointer is first incremented and the location pointed  to  by  the  Stack  Pointer  is  written  with  the contents of the PC (already pointing to the instruction following the CALL ). A RETURN type instruction causes a  pop  from  the  stack;  the  contents  of  the  location pointed to by the STKPTR are transferred to the PC and then the Stack Pointer is decremented.\nThe  Stack  Pointer  is  initialized  to  ' 00000 ' after  all Resets. There is no RAM associated with the location corresponding to a Stack Pointer value of ' 00000 '; this is only a Reset value. Status bits indicate if the stack is full, or has overflowed or underflowed.",
    "5.1.2.1 Top-of-Stack Access\nOnly  the  top  of  the  return  address  stack  (TOS)  is readable and writable. A set of three registers, TOSU:TOSH:TOSL, hold the contents of the stack location  pointed  to  by  the  STKPTR  register  ( Figure 5-2 ). This allows users to implement a software stack if necessary. After a CALL, RCALL or interrupt, the software can read the pushed value by reading the TOSU:TOSH:TOSL  registers.  These  values  can  be placed on a user-defined software stack. At return time, the software can return these values to TOSU:TOSH:TOSL and do a return.\nThe user must disable the global interrupt enable bits while accessing the stack to prevent inadvertent stack corruption.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe  STKPTR  register  ( Register 5-1 ) contains  the Stack Pointer value, the STKFUL (Stack Full) status bit and  the  STKUNF  (Stack  Underflow)  status  bits. The value of the Stack Pointer can be 0 through 31. The Stack  Pointer  increments  before  values  are  pushed onto the stack and decrements after values are popped off the stack. On Reset, the Stack Pointer value will be zero. The user may read and write the Stack Pointer value. This feature can be used by a Real-Time Operating System (RTOS) for return stack maintenance.\nAfter the PC is pushed onto the stack 31 times (without popping any values off the stack), the STKFUL bit is set.  The  STKFUL  bit  is  cleared  by  software  or  by  a POR.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe action that takes place when the stack becomes full depends on the state of the STVREN (Stack Overflow Reset Enable) Configuration bit. (Refer to Section 23.1 'Configuration Bits' for a description of the device  Configuration  bits.) If STVREN  is  set (default),  the  31st  push  will  push  the  (PC  +  2)  value onto  the  stack,  set  the  STKFUL  bit  and  reset  the device. The STKFUL bit will remain set and the Stack Pointer will be set to zero.\nWhen  the  stack  has  been  popped  enough  times  to unload the stack, the next pop will return a value of zero to  the  PC and sets the STKUNF bit, while the Stack Pointer remains at zero. The STKUNF bit will remain set until cleared by software or until a POR occurs.\nNote:\nReturning a value of zero to the PC on an underflow has the effect of vectoring the program  to  the  Reset  vector,  where  the stack conditions can be verified and appropriate actions can be taken. This is not the same as a Reset, as the contents of the SFRs are not affected.",
    "5.1.2.3 PUSH and POP Instructions\nSince  the  Top-of-Stack  is  readable  and  writable,  the ability to push values onto the stack and pull values off the stack without disturbing normal program execution is a desirable feature.  The  PIC18  instruction  set includes two instructions, PUSH and POP ,  that  permit the  TOS  to  be  manipulated  under  software  control. TOSU, TOSH and TOSL can be modified to place data or a return address on the stack.\nIf STVREN is cleared, the STKFUL bit will be set on the 31st push and the Stack Pointer will increment to 31. Any additional pushes will not overwrite the 31st push and STKPTR will remain at 31.\nThe PUSH instruction places the current PC value onto the stack. This increments the Stack Pointer and loads the current PC value onto the stack.\nThe POP instruction discards the current TOS by decrementing the Stack Pointer. The previous value pushed onto the stack then becomes the TOS value.",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nR/C-0, 1 = R/C-0. R/C-0, 2 = U-0. R/C-0, 3 = R/W-0. R/C-0, 4 = R/W-0. R/C-0, 5 = R/W-0. R/C-0, 6 = R/W-0. R/C-0, 7 = R/W-0. STKFUL (1), 1 = STKUNF (1). STKFUL (1), 2 = -. STKFUL (1), 3 = SP4. STKFUL (1), 4 = SP3. STKFUL (1), 5 = SP2. STKFUL (1), 6 = SP1. STKFUL (1), 7 = SP0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nLegend:, 1 = C = Clearable bit. Legend:, 2 = C = Clearable bit. Legend:, 3 = C = Clearable bit. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nSTKFUL: Stack Full Flag bit (1)\nbit 7\n1 = Stack became full or overflowed\n0 = Stack has not become full or overflowed\nbit 6\nSTKUNF: Stack Underflow Flag bit\n(1)\n1 = Stack underflow occurred\n0 = Stack underflow did not occur\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4-0\nSP<4:0>: Stack Pointer Location bits",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nNote 1: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "5.1.2.4 Stack Full and Underflow Resets\nDevice Resets on stack overflow and stack underflow conditions are enabled by setting the STVREN bit in Configuration Register 4L. When STVREN is set, a full or underflow  will set the appropriate  STKFUL  or STKUNF bit  and  then  cause  a  device  Reset.  When STVREN is cleared, a full or underflow condition will set the appropriate STKFUL or STKUNF bit but not cause a  device  Reset.  The  STKFUL  or  STKUNF  bits  are cleared by the user software or a Power-on Reset.",
    "5.1.3 FAST REGISTER STACK\nA  Fast  Register  Stack  is  provided  for  the  STATUS, WREG and BSR registers, to provide a 'fast  return' option for interrupts. The stack for each register is only one level deep and is neither readable nor writable. It is loaded with the current value of the corresponding register  when  the  processor  vectors  for  an  interrupt. All interrupt sources will push values into the stack registers. The values in the registers are then loaded back into  their  associated  registers  if  the RETFIE, FAST instruction is used to return from the interrupt.\nIf both low and high-priority interrupts are enabled, the stack registers cannot be used reliably to return from low-priority interrupts. If a high-priority interrupt occurs while servicing a low-priority interrupt, the stack register  values  stored  by  the  low-priority  interrupt  will  be overwritten. In these cases, users must save the key registers in software during a low-priority interrupt.",
    "5.1.3 FAST REGISTER STACK\nIf interrupt priority is not used, all interrupts may use the Fast  Register  Stack  for  returns  from  interrupt.  If  no interrupts  are  used,  the  Fast  Register  Stack  can  be used to restore the STATUS, WREG and BSR registers at the end of a subroutine call. To use the Fast Register Stack  for  a  subroutine  call,  a CALL label , FAST instruction  must  be  executed  to  save  the  STATUS, WREG and BSR registers to the Fast Register Stack. A RETURN , FAST instruction is then executed to restore these registers from the Fast Register Stack.\nExample 5-1 shows a source code example that uses the Fast Register Stack during a subroutine call and return.",
    "EXAMPLE 5-1: FAST REGISTER STACK CODE EXAMPLE\nCALL, 1 = ;STATUS, WREG, BSR ;SAVED IN FAST REGISTER ;STACK. SUB1 RETURN,, 1 = ;RESTORE VALUES SAVED ;IN FAST REGISTER STACK",
    "5.1.4 LOOK-UP TABLES IN PROGRAM MEMORY\nThere may be programming situations that require the creation of data structures, or look-up tables, in program memory. For PIC18 devices, look-up tables can be implemented in two ways:\n\u00b7 Computed GOTO\n\u00b7 Table Reads",
    "5.1.4.1 Computed GOTO\nA computed GOTO is accomplished by adding an offset to the  program  counter.  An  example  is  shown  in Example 5-2 .\nA  look-up  table  can  be  formed  with  an ADDWF  PCL instruction and a group of RETLW nn instructions. The W register is loaded with an offset into the table before executing a call to that table. The first instruction of the called routine is the ADDWF PCL instruction. The next instruction  executed  will  be  one  of  the RETLW  nn instructions  that  returns  the  value  ' nn '  to  the  calling function.\nThe offset  value  (in  WREG)  specifies  the  number  of bytes that the program counter needs to advance and needs to be multiples of 2 (LSb = 0 ).\nIn  this  method,  only  one data  byte  may  be  stored  in each  instruction  location  and  room  on  the  return address stack is required.",
    "EXAMPLE 5-2: COMPUTED GOTO USING AN OFFSET VALUE\n, 1 = MOVF CALL. , 2 = OFFSET, W TABLE. ORG, 1 = nn00h. ORG, 2 = . TABLE, 1 = ADDWF. TABLE, 2 = PCL. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = .. , 2 = . , 1 = .. , 2 = . , 1 = .. , 2 = ",
    "5.1.4.2 Table Reads and Table Writes\nA  better  method  of  storing  data  in  program  memory allows two bytes of data to be stored in each instruction location.\nLook-up table data may be stored two bytes per program word by using table reads and writes. The Table Pointer (TBLPTR) register specifies the byte address and  the  Table  Latch  (TABLAT)  register  contains  the data that is read from or written to program memory. Data  is  transferred  to  or  from  program  memory  one byte at a time.\nTable  read  and  table  write  operations  are  discussed further in Section 6.1 'Table Reads  and  Table Writes' .",
    "5.2.1 CLOCKING SCHEME\nThe microcontroller clock input, whether from an internal or external source, is internally divided by four to generate four non-overlapping quadrature clocks (Q1, Q2,  Q3  and  Q4).  Internally,  the  program  counter  is incremented  on  every  Q1;  the  instruction  is  fetched from the program memory and latched into the instruction register during Q4. The instruction is decoded and executed  during  the  following  Q1  through  Q4.  The clocks  and  instruction  execution  flow  are  shown  in Figure 5-3 .",
    "5.2.2 INSTRUCTION FLOW/PIPELINING\nAn  'Instruction  Cycle'  consists  of  four  Q  cycles:  Q1 through  Q4.  The  instruction  fetch  and  execute  are pipelined  in  such  a  manner  that  a  fetch  takes  one instruction  cycle,  while  the  decode  and  execute  take another  instruction  cycle.  However,  due  to  the  pipelining, each  instruction  effectively  executes  in  one cycle. If an instruction causes the program counter to change (e.g., GOTO ),  then  two cycles are required to complete the instruction ( Example 5-3 ).\nA  fetch  cycle  begins  with  the  Program  Counter  (PC) incrementing in Q1.\nIn the execution cycle, the fetched instruction is latched into  the  Instruction  (IR)  Register  in  cycle  Q1.  This instruction  is  then  decoded  and  executed  during  the Q2, Q3 and Q4 cycles. Data memory is read during Q2 (operand  read)  and  written  during  Q4  (destination write).",
    "EXAMPLE 5-3: INSTRUCTION PIPELINE FLOW\n1.,  = MOVLW 55h. 1., TCY0 = Fetch 1. 1., TCY1 = Execute 1. 1., TCY2 = . 1., TCY3 TCY4 = . 1., TCY5 = . 2.,  = MOVWF PORTB. 2., TCY0 = . 2., TCY1 = Fetch 2. 2., TCY2 = Execute 2. 2., TCY3 TCY4 = . 2., TCY5 = . 3. BRA,  = SUB_1. 3. BRA, TCY0 = . 3. BRA, TCY1 = . 3. BRA, TCY2 = Fetch 3. 3. BRA, TCY3 TCY4 = Execute 3. 3. BRA, TCY5 = . 4. BSF,",
    "EXAMPLE 5-3: INSTRUCTION PIPELINE FLOW\n= PORTA, BIT3. 4. BSF, TCY0 = (Forced NOP). 4. BSF, TCY1 = . 4. BSF, TCY2 = . 4. BSF, TCY3 TCY4 = Fetch 4 Flush ( NOP ). 4. BSF, TCY5 = . 5.,  = Instruction @. 5., TCY0 = address SUB_1. 5., TCY1 = . 5., TCY2 = . 5., TCY3 TCY4 = Fetch SUB_1. 5., TCY5 = Execute SUB_1\nAll instructions are single cycle, except for any program branches. These take two cycles since the fetch instruction is 'flushed' from the pipeline while the new instruction is being fetched and then executed.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe program memory is addressed in bytes. Instructions are stored as two bytes or four bytes in program memory. The Least Significant Byte of an instruction word is always stored in a program memory location with an even address (LSb = 0 ). To maintain alignment with instruction boundaries, the PC increments in steps of 2 and the LSb will always read ' 0 ' (see Section 5.1.1 'Program Counter' ).\nFigure 5-4 shows an example of how instruction words are stored in the program memory.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe CALL and GOTO instructions have the absolute program memory address embedded into the instruction. Since instructions are always stored on word boundaries,  the  data  contained  in  the  instruction  is  a  word address.  The  word  address  is  written  to  PC<20:1>, which  accesses  the  desired  byte  address  in  program memory.  Instruction  #2  in Figure 5-4 shows  how  the instruction GOTO  0006h is  encoded  in  the  program memory. Program branch instructions, which encode a relative address offset, operate in the same manner. The offset value stored in a branch instruction represents the number of single-word instructions that the PC will be offset  by. Section 24.0  'Instruction  Set  Summary' provides further details of the instruction set.",
    "FIGURE 5-4: INSTRUCTIONS IN PROGRAM MEMORY\nProgram Memory\nByte Locations\n\uf0ae\uf020\nInstruction 1:\nInstruction 2:\nMOVLW\n055h\nGOTO\n0006h\nInstruction 3:\nLSB = 1, 1 = LSB = 0. LSB = 1, 2 = Word Address \uf0af. , 1 = . , 2 = 000000h. , 1 = . , 2 = 000002h. , 1 = . , 2 = 000004h. , 1 = . , 2 = 000006h. 0Fh, 1 = 55h. 0Fh, 2 = 000008h. EFh, 1 = 03h. EFh, 2 = 00000Ah. F0h, 1 = 00h. F0h, 2 = 00000Ch. C1h, 1 = 23h. C1h, 2 = 00000Eh. F4h, 1 = 56h. F4h, 2 = 000010h. , 1 = . , 2 = 000012h. , 1 = . , 2 = 000014h\nMOVFF\n123h, 456h",
    "5.2.4 TWO-WORD INSTRUCTIONS\nThe standard PIC18 instruction set has four two-word instructions: CALL , MOVFF , GOTO and LSFR . In  all cases, the second word of the instructions always has ' 1111 ' as its four Most Significant bits; the other 12 bits are literal data, usually a data memory address.\nthe instruction sequence. If the first word is skipped for some reason and the second word is executed by itself, a NOP is executed instead. This is necessary for cases when the two-word instruction is preceded by a conditional  instruction  that  changes  the  PC. Example 5-4 shows how this works.\nThe use of ' 1111 ' in the 4 MSbs of an instruction specifies a special form of NOP . If the instruction is executed in proper sequence - immediately after the first word the data in the second word is accessed and used by",
    "Note:\nSee Section 5.6 'PIC18 Instruction Execution  and  the  Extended  Instruction Set' for information  on  two-word instructions in the extended instruction set.",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:.Source Code = ; is RAM location. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010. 1100, CASE 1:.Object Code = 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1,. 1100, CASE 1:.Source Code = REG2. 1100, CASE 1:.Source Code = ; No, skip this word. 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101. 1111, CASE 1:.Object Code = 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n1:.Source Code = . 1111, CASE 1:.Source Code = ; Execute this word as a. 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = . 0010, CASE 1:.Source Code = ; continue code. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Object Code = Object Code. Object",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\nCode, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. 0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:.Source Code = ; is RAM location. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010. 1100, CASE 1:.Object Code = 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1,. 1100, CASE 1:.Source Code = REG2. 1100, CASE 1:.Source Code = ; Yes, execute this word.",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101. 1111, CASE 1:.Object Code = 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = ; 2nd word of instruction. 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = . 0010, CASE 1:.Source Code = ; continue code",
    "5.3.1 BANK SELECT (BSR) REGISTER\nNote:\nThe  operation  of  some  aspects  of  data memory  are  changed  when  the  PIC18 extended instruction  set  is  enabled.  See Section 5.5 'Data Memory  and the Extended Instruction Set' for more information.\nThe data memory in PIC18 devices is implemented as static RAM. Each register in the data memory has a 12-bit  address,  allowing  up  to  4096  bytes  of  data memory. The memory space is divided into as many as 16 banks  that  contain  256  bytes  each;  PIC18F2420/ 2520/4420/4520 devices implement all 16 banks. Figure 5-5 shows the data memory organization for the PIC18F2420/2520/4420/4520 devices.\nThe data memory contains Special Function Registers (SFRs) and General Purpose Registers (GPRs). The SFRs are used for control and status of the controller and peripheral functions, while GPRs are used for data storage and scratchpad operations in the user's application. Any read of an unimplemented location will read as ' 0 's.",
    "5.3.1 BANK SELECT (BSR) REGISTER\nThe instruction  set  and  architecture  allow  operations across  all  banks.  The  entire  data  memory  may  be accessed  by  Direct,  Indirect  or  Indexed  Addressing modes. Addressing modes are discussed later in this subsection.\nTo  ensure  that  commonly  used  registers  (SFRs  and select GPRs) can be accessed in a single cycle, PIC18 devices implement an Access Bank. This is a 256-byte memory space that provides fast access to SFRs and the  lower  portion  of  GPR  Bank  0  without  using  the BSR. Section 5.3.2 'Access Bank' provides a detailed description of the Access RAM.\nLarge  areas  of  data  memory  require  an  efficient addressing  scheme  to  make  rapid  access  to  any address  possible.  Ideally,  this  means  that  an  entire address does not need to be provided for each read or write  operation.  For  PIC18  devices,  this  is  accomplished with a RAM banking scheme. This divides the memory space into 16 contiguous banks of 256 bytes. Depending  on  the  instruction,  each  location  can  be addressed directly by its full 12-bit address, or an 8-bit low-order address and a 4-bit Bank Pointer.",
    "5.3.1 BANK SELECT (BSR) REGISTER\nMost instructions in the PIC18 instruction set make use of the Bank Pointer, known as the Bank Select (BSR) Register. This SFR holds the 4 Most Significant bits of a location's address; the instruction itself includes the 8 Least Significant bits. Only the four lower bits of the BSR are implemented (BSR<3:0>). The upper four bits are  unused;  they  will  always  read  ' 0 '  and  cannot  be written to. The BSR can be loaded directly by using the MOVLB instruction.\nThe  value  of  the  BSR  indicates  the  bank  in  data memory; the 8 bits in the instruction show the location in the bank and can be thought of as an offset from the bank's lower boundary. The relationship between the BSR's value and the bank division in data memory is shown in Figure 5-7 .",
    "5.3.1 BANK SELECT (BSR) REGISTER\nSince up to 16 registers may share the same low-order address, the user must always be careful to ensure that the proper bank is selected before performing a data read or write. For example, writing what needs to be program data to an 8-bit address of F9h while the BSR is 0Fh will end up resetting the program counter.\nWhile any bank can be selected, only those banks that are  actually  implemented  can  be  read  or  written  to. Writes  to  unimplemented  banks  are  ignored,  while reads from unimplemented banks will return ' 0 's. Even so, the STATUS register will still be affected as if the operation  was  successful.  The  data  memory  map  in Figure 5-5 indicates which banks are implemented.\nIn  the  core  PIC18  instruction  set,  only  the MOVFF instruction  fully  specifies  the  12-bit  address  of  the source and target registers. This instruction ignores the BSR completely when it executes. All other instructions include only the low-order address as an operand and must use either the BSR or the Access Bank to locate their target registers.",
    "PIC18F2420/2520/4420/4520\nFIGURE 5-5:\nDATA MEMORY MAP FOR PIC18F2420/4420 DEVICES",
    "PIC18F2420/2520/4420/4520\n=,  = Bank 0. =,  = 00h. =, Data Memory = Access RAM. =,  = 07Fh The BSR is ignored and Access Bank is used. The first 128 bytes are 000h. =,  = 0000. = 0001,  = . = 0001,  = FFh 00h. = 0001, Data Memory = GPR. = 0001,  = 080h 100h 0FFh. = 0001,  = . = 0010,  = Bank 1. = 0010,  = FFh 00h. = 0010, Data Memory = GPR. = 0010,  = 1FFh 200h. = 0010,  = . ,  = Bank 2 Bank 3. ,  = FFh 00h. , Data Memory = GPR. ,  = 2FFh 300h. ,  = = 0011. = 0100,  = Bank 4. = 0100,  = FFh 00h. = 0100, Data Memory = Unused. = 0100,  = 3FFh 400h. = 0100,  = . = 0101,  = Bank 5. = 0101,",
    "PIC18F2420/2520/4420/4520\n= FFh 00h. = 0101, Data Memory = . = 0101,  = 4FFh 500h. = 0101,  = . = 0110,  = Bank 6. = 0110,  = FFh 00h. = 0110, Data Memory = . = 0110,  = 5FFh 6FFh 600h. = 0110,  = = 0111. ,  = 7. ,  = FFh 00h. , Data Memory = . ,  = 7FFh 700h 800h. ,  = Bank. ,  = Bank 8. ,  = FFh 00h. , Data Memory = . ,  = . ,  = = 1000. 1001,  = Bank 9. 1001,  = FFh 00h. 1001, Data Memory = Read 00h. 1001,  = 8FFh 900h. 1001,  = =. 1010,  = Bank 10. 1010,  = FFh 00h. 1010, Data Memory = . 1010,  = 9FFh A00h. 1010,  = =. ,  = Bank 11. ,  = FFh 00h. , Data Memory = . ,",
    "PIC18F2420/2520/4420/4520\n= AFFh BFFh B00h C00h. ,  = = 1011. = 1100,  = Bank 12. = 1100,  = FFh 00h. = 1100, Data Memory = . = 1100,  = . = 1100,  = . = 1101,  = Bank 13. = 1101,  = FFh 00h. = 1101, Data Memory = . = 1101,  = CFFh D00h. = 1101,  = . =,  = Bank 14. =,  = FFh 00h. =, Data Memory = . =,  = DFFh E00h. =,  = 1110. = 1111,  = Bank 15. = 1111,  = FFh 00h FFh. = 1111, Data Memory = SFR Unused. = 1111,  = F80h FFFh F7Fh F00h EFFh. = 1111,  = ",
    "PIC18F2420/2520/4420/4520\n= 0000,  = . = 0000,  = 00h. = 0000, Data Memory Map = Access RAM. = 0000,  = 000h. = 0000, = 0 : = The BSR is ignored and the Access Bank is used.. = 0001,  = Bank 0. = 0001,  = FFh 00h. = 0001, Data Memory Map = GPR. = 0001,  = 080h 07Fh 100h 0FFh. = 0001, = 0 : = The first 128 bytes are general purpose RAM (from Bank 0).. = 0010,  = Bank 1. = 0010,  = FFh 00h. = 0010, Data Memory Map = GPR. = 0010,  = 1FFh 200h. = 0010, = 0 : = The second 128 bytes are Special Function Registers (from Bank 15).. = 0011,  = Bank Bank 3. = 0011,  = FFh 00h. = 0011, Data Memory Map = GPR GPR. = 0011,",
    "PIC18F2420/2520/4420/4520\n= 2FFh 300h. = 0011, = 0 : = When 'a' = 1 : The BSR specifies the Bank used by the instruction.. = 0100,  = Bank 4. = 0100,  = FFh 00h. = 0100, Data Memory Map = GPR. = 0100,  = 3FFh 400h. = 0100, = 0 : = . = 0101,  = Bank 5. = 0101,  = FFh 00h. = 0101, Data Memory Map = . = 0101,  = 4FFh 500h. = 0101, = 0 : = . = 0110,  = Bank 6. = 0110,  = FFh 00h. = 0110, Data Memory Map = GPR. = 0110,  = 5FFh 600h. = 0110, = 0 : = Access Bank. = 0111,  = Bank 7. = 0111,  = FFh 00h. = 0111, Data Memory Map = . = 0111,  = 6FFh 700h. = 0111, = 0 : = 00h 7Fh Access RAM Low. = 1000,",
    "PIC18F2420/2520/4420/4520\n= Bank 8. = 1000,  = FFh 00h. = 1000, Data Memory Map = . = 1000,  = 7FFh 800h. = 1000, = 0 : = 80h FFh Access RAM High (SFRs). = 1001,  = Bank 9. = 1001,  = FFh 00h. = 1001, Data Memory Map = . = 1001,  = 8FFh 900h. = 1001, = 0 : = . = 1010,  = Bank 10. = 1010,  = FFh 00h. = 1010, Data Memory Map = Unused. = 1010,  = 9FFh A00h. = 1010, = 0 : = . = 1011,  = . = 1011,  = FFh 00h. = 1011, Data Memory Map = Read 00h. = 1011,  = AFFh B00h. = 1011, = 0 : = . = 1100,  = Bank 11. = 1100,  = FFh 00h. = 1100, Data Memory Map = . = 1100,  = BFFh C00h. = 1100, = 0 : = . =,",
    "PIC18F2420/2520/4420/4520\n= Bank 12. =,  = FFh 00h. =, Data Memory Map = . =,  = CFFh D00h. =, = 0 : = . = 1110,  = Bank 13. = 1110,  = FFh 00h. = 1110, Data Memory Map = . = 1110,  = DFFh E00h. = 1110, = 0 : = . =,  = Bank 14. =,  = 00h FFh. =, Data Memory Map = Unused. =,  = F7Fh F00h EFFh. =, = 0 : = . ,  = Bank 15. ,  = FFh. , Data Memory Map = SFR. ,  = F80h FFFh. , = 0 : = ",
    "FIGURE 5-7: USE OF THE BANK SELECT REGISTER (DIRECT ADDRESSING)\nNote 1: The Access RAM bit of the instruction can be used to force an override of the selected bank (BSR<3:0>) to the registers of the Access Bank.\n2: The MOVFF instruction embeds the entire 12-bit address in the instruction.",
    "5.3.2 ACCESS BANK\nWhile  the  use  of  the  BSR  with  an  embedded  8-bit address  allows  users  to  address  the  entire  range  of data memory, it also means that the user must always ensure  that  the  correct  bank  is  selected.  Otherwise, data may be read from or written to the wrong location. This can be disastrous if a GPR is the intended target of  an  operation,  but  an  SFR  is  written  to  instead. Verifying  and/or  changing  the  BSR  for  each  read  or write to data memory can become very inefficient.\nhowever,  the  instruction  is  forced  to  use  the Access Bank  address  map;  the  current  value  of  the  BSR  is ignored entirely.",
    "5.3.2 ACCESS BANK\nTo streamline access for the most commonly used data memory locations, the data memory is configured with an  Access  Bank,  which  allows  users  to  access  a mapped block of  memory  without  specifying  a  BSR. The Access  Bank  consists  of  the  first  128  bytes  of memory (00h-7Fh) in Bank 0 and the last 128 bytes of memory (80h-FFh) in Block 15. The lower half is known as the 'Access RAM' and is composed of GPRs. This upper  half  is also  where  the  device's  SFRs  are mapped. These two areas are mapped contiguously in the Access  Bank  and  can  be  addressed  in  a  linear fashion by an 8-bit address ( Figure 5-5 ).\nThe Access Bank is used by core PIC18 instructions that include the Access RAM bit (the 'a' parameter in the instruction). When 'a' is equal to ' 1 ', the instruction uses  the  BSR  and  the  8-bit  address  included  in  the opcode for the data memory address. When 'a' is ' 0 ',",
    "5.3.2 ACCESS BANK\nUsing this 'forced' addressing allows the instruction to operate on a data address in a single cycle, without updating the BSR first. For 8-bit addresses of 80h and above, this means that users can evaluate and operate on SFRs more efficiently. The Access RAM below 80h is a good place for data values that the user might need to  access  rapidly,  such  as  immediate  computational results  or  common  program  variables. Access  RAM also allows for faster and more code efficient context saving and switching of variables.\nThe mapping of the Access Bank is slightly  different when the extended instruction set is enabled (XINST Configuration bit = 1 ). This is discussed in more detail in Section 5.5.3  'Mapping  the  Access  Bank  in Indexed Literal Offset Mode' .",
    "5.3.3 GENERAL PURPOSE REGISTER FILE\nPIC18 devices may have banked memory in the GPR area. This is data RAM, which is available for use by all instructions. GPRs  start  at  the  bottom  of  Bank  0 (address 000h) and grow upwards towards the bottom of the SFR area. GPRs are not initialized by a Power-on Reset and are unchanged on all other Resets.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nThe Special Function Registers (SFRs) are registers used by the CPU and peripheral modules for controlling the desired operation of the device. These registers are implemented as static RAM. SFRs start at the top of data memory (FFFh) and extend downward to occupy the top half of Bank 15 (F80h to FFFh). A list of these registers is given in Table 5-1 and Table 5-2 .\nThe SFRs can be classified into two sets: those associated with the 'core' device functionality (ALU, Resets and interrupts) and those related to the peripheral functions. The Reset and Interrupt registers are described in their respective chapters, while the ALU's STATUS register  is  described  later  in  this  section.  Registers related  to  the  operation  of  a  peripheral  feature  are described in the chapter for that peripheral.\nThe SFRs are typically distributed among the peripherals whose functions they control. Unused SFR locations are unimplemented and read as ' 0 's.\n\nTABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2420/2520/4420/4520 DEVICES",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFFFh, Name = TOSU. FFFh, Address = FDFh. FFFh, Name = INDF2 (1). FFFh, Address = FBFh. FFFh, Name = CCPR1H. FFFh, Address = F9Fh. FFFh, Name = IPR1. FFEh, Name = TOSH. FFEh, Address = FDEh. FFEh, Name = POSTINC2 (1). FFEh, Address = FBEh. FFEh, Name = CCPR1L. FFEh, Address = F9Eh. FFEh, Name = PIR1. FFDh, Name = TOSL. FFDh, Address = FDDh. FFDh, Name = POSTDEC2 (1). FFDh, Address = FBDh. FFDh, Name = CCP1CON. FFDh, Address = F9Dh. FFDh, Name = PIE1. FFCh, Name = STKPTR. FFCh, Address = FDCh. FFCh, Name = PREINC2 (1). FFCh, Address = FBCh.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFFCh, Name = CCPR2H. FFCh, Address = F9Ch. FFCh, Name = - (2). FFBh, Name = PCLATU. FFBh, Address = FDBh. FFBh, Name = PLUSW2 (1). FFBh, Address = FBBh. FFBh, Name = CCPR2L. FFBh, Address = F9Bh. FFBh, Name = OSCTUNE. FFAh, Name = PCLATH. FFAh, Address = FDAh. FFAh, Name = FSR2H. FFAh, Address = FBAh. FFAh, Name = CCP2CON. FFAh, Address = F9Ah. FFAh, Name = - (2). FF9h, Name = PCL. FF9h, Address = FD9h. FF9h, Name = FSR2L. FF9h, Address = FB9h. FF9h, Name = - (2). FF9h, Address = F99h. FF9h, Name = - (2). FF8h, Name = TBLPTRU.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFF8h, Address = FD8h. FF8h, Name = STATUS. FF8h, Address = FB8h. FF8h, Name = BAUDCON. FF8h, Address = F98h. FF8h, Name = - (2). FF7h, Name = TBLPTRH. FF7h, Address = FD7h. FF7h, Name = TMR0H. FF7h, Address = FB7h. FF7h, Name = PWM1CON (3). FF7h, Address = F97h. FF7h, Name = - (2). FF6h, Name = TBLPTRL. FF6h, Address = FD6h. FF6h, Name = TMR0L. FF6h, Address = FB6h. FF6h, Name = ECCP1AS (3). FF6h, Address = F96h. FF6h, Name = TRISE (3). FF5h, Name = TABLAT. FF5h, Address = FD5h.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFF5h, Name = T0CON. FF5h, Address = FB5h. FF5h, Name = CVRCON. FF5h, Address = F95h. FF5h, Name = TRISD (3). FF4h, Name = PRODH. FF4h, Address = FD4h. FF4h, Name = - (2). FF4h, Address = FB4h. FF4h, Name = CMCON. FF4h, Address = F94h. FF4h, Name = TRISC. FF3h, Name = PRODL. FF3h, Address = FD3h. FF3h, Name = OSCCON. FF3h, Address = FB3h. FF3h, Name = TMR3H. FF3h, Address = F93h. FF3h, Name = TRISB. FF2h, Name = INTCON. FF2h, Address = FD2h. FF2h, Name = HLVDCON. FF2h, Address = FB2h. FF2h, Name =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nTMR3L. FF2h, Address = F92h. FF2h, Name = TRISA. FF1h, Name = INTCON2. FF1h, Address = FD1h. FF1h, Name = WDTCON. FF1h, Address = FB1h. FF1h, Name = T3CON. FF1h, Address = F91h. FF1h, Name = - (2). FF0h, Name = INTCON3. FF0h, Address = FD0h. FF0h, Name = RCON. FF0h, Address = FB0h. FF0h, Name = SPBRGH. FF0h, Address = F90h. FF0h, Name = - (2). FEFh, Name = INDF0 (1). FEFh, Address = FCFh. FEFh, Name = TMR1H. FEFh, Address = FAFh. FEFh, Name = SPBRG. FEFh, Address = F8Fh. FEFh, Name = -",
    "5.3.4 SPECIAL FUNCTION REGISTERS\n(2). FEEh, Name = POSTINC0 (1). FEEh, Address = FCEh. FEEh, Name = TMR1L. FEEh, Address = FAEh. FEEh, Name = RCREG. FEEh, Address = F8Eh. FEEh, Name = - (2). FEDh, Name = POSTDEC0 (1). FEDh, Address = FCDh. FEDh, Name = T1CON. FEDh, Address = FADh. FEDh, Name = TXREG. FEDh, Address = F8Dh. FEDh, Name = LATE (3). FECh, Name = PREINC0 (1). FECh, Address = FCCh. FECh, Name = TMR2. FECh, Address = FACh. FECh, Name = TXSTA. FECh, Address = F8Ch. FECh, Name = LATD (3). FEBh, Name = PLUSW0 (1). FEBh, Address = FCBh. FEBh, Name = PR2. FEBh, Address = FABh. FEBh, Name =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nRCSTA. FEBh, Address = F8Bh. FEBh, Name = LATC. FEAh, Name = FSR0H. FEAh, Address = FCAh. FEAh, Name = T2CON. FEAh, Address = FAAh. FEAh, Name = - (2). FEAh, Address = F8Ah. FEAh, Name = LATB. FE9h, Name = FSR0L. FE9h, Address = FC9h. FE9h, Name = SSPBUF. FE9h, Address = FA9h. FE9h, Name = EEADR. FE9h, Address = F89h. FE9h, Name = LATA. FE8h, Name = WREG. FE8h, Address = FC8h. FE8h, Name = SSPADD. FE8h, Address = FA8h. FE8h, Name = EEDATA. FE8h, Address = F88h. FE8h, Name = - (2). FE7h, Name = INDF1 (1). FE7h, Address =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFC7h. FE7h, Name = SSPSTAT. FE7h, Address = FA7h FA6h. FE7h, Name = EECON2 (1) EECON1. FE7h, Address = F87h. FE7h, Name = - (2) (2). FE6h, Name = POSTINC1 (1). FE6h, Address = FC6h. FE6h, Name = SSPCON1. FE6h, Address = . FE6h, Name = . FE6h, Address = F86h. FE6h, Name = -. FE5h, Name = POSTDEC1 (1). FE5h, Address = FC5h. FE5h, Name = SSPCON2. FE5h, Address = FA5h. FE5h, Name = - (2). FE5h, Address = F85h. FE5h, Name = - (2). FE4h, Name = PREINC1 (1). FE4h, Address = FC4h. FE4h, Name = ADRESH.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFE4h, Address = FA4h. FE4h, Name = - (2). FE4h, Address = F84h. FE4h, Name = PORTE (3). FE3h, Name = PLUSW1 (1). FE3h, Address = FC3h. FE3h, Name = ADRESL. FE3h, Address = FA3h. FE3h, Name = - (2). FE3h, Address = F83h. FE3h, Name = PORTD (3). FE2h, Name = FSR1H. FE2h, Address = FC2h. FE2h, Name = ADCON0. FE2h, Address = FA2h. FE2h, Name = IPR2. FE2h, Address = F82h. FE2h, Name = PORTC. FE1h, Name = FSR1L. FE1h, Address = FC1h. FE1h, Name = ADCON1. FE1h, Address = FA1h. FE1h, Name = PIR2. FE1h, Address =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nF81h. FE1h, Name = PORTB. FE0h, Name = BSR. FE0h, Address = FC0h. FE0h, Name = ADCON2. FE0h, Address = FA0h. FE0h, Name = PIE2. FE0h, Address = F80h. FE0h, Name = PORTA\nNote 1: This is not a physical register.\n2: Unimplemented registers are read as ' 0 '.\n3: This register is not available on 28-pin devices.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nTOSU, Bit 7 = -. TOSU, Bit 6 = -. TOSU, Bit 5 = -. TOSU, Bit 4 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 3 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 2 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 1 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 0 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Value on POR, BOR = ---0. TOSU, Value on POR, BOR = 0000. TOSU, Details on page: = 45, 50. TOSH, Bit 7 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 6 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 5 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nTop-of-Stack High Byte (TOS<15:8>). TOSH, Bit 4 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 3 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 2 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 1 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 0 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Value on POR, BOR = 0000. TOSH, Value on POR, BOR = 0000. TOSH, Details on page: = 45, 50. TOSL, Bit 7 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 6 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 5 = Top-of-Stack Low Byte",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n(TOS<7:0>). TOSL, Bit 4 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 3 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 2 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 1 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 0 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Value on POR, BOR = 0000. TOSL, Value on POR, BOR = 0000. TOSL, Details on page: = 45, 50. STKPTR, Bit 7 = STKFUL. STKPTR, Bit 6 = STKUNF. STKPTR, Bit 5 = -. STKPTR, Bit 4 = SP4. STKPTR, Bit 3 = SP3. STKPTR, Bit 2 = SP2.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nSTKPTR, Bit 1 = SP1. STKPTR, Bit 0 = SP0. STKPTR, Value on POR, BOR = 00-0. STKPTR, Value on POR, BOR = 0000. STKPTR, Details on page: = 45, 51. PCLATU, Bit 7 = -. PCLATU, Bit 6 = -. PCLATU, Bit 5 = -. PCLATU, Bit 4 = Holding Register for PC<20:16>. PCLATU, Bit 3 = Holding Register for PC<20:16>. PCLATU, Bit 2 = Holding Register for PC<20:16>. PCLATU, Bit 1 = Holding Register for PC<20:16>. PCLATU, Bit 0 = Holding Register for PC<20:16>. PCLATU, Value on POR, BOR = ---0. PCLATU, Value on POR, BOR = 0000. PCLATU, Details on page: = 45, 50. PCLATH, Bit 7 = Holding Register for",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nPC<15:8>. PCLATH, Bit 6 = Holding Register for PC<15:8>. PCLATH, Bit 5 = Holding Register for PC<15:8>. PCLATH, Bit 4 = Holding Register for PC<15:8>. PCLATH, Bit 3 = Holding Register for PC<15:8>. PCLATH, Bit 2 = Holding Register for PC<15:8>. PCLATH, Bit 1 = Holding Register for PC<15:8>. PCLATH, Bit 0 = Holding Register for PC<15:8>. PCLATH, Value on POR, BOR = 0000. PCLATH, Value on POR, BOR = 0000. PCLATH, Details on page: = 45, 50. PCL, Bit 7 = PC Low Byte (PC<7:0>). PCL, Bit 6 = PC Low Byte (PC<7:0>). PCL, Bit 5 = PC Low Byte (PC<7:0>). PCL, Bit 4 = PC Low Byte",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n(PC<7:0>). PCL, Bit 3 = PC Low Byte (PC<7:0>). PCL, Bit 2 = PC Low Byte (PC<7:0>). PCL, Bit 1 = PC Low Byte (PC<7:0>). PCL, Bit 0 = PC Low Byte (PC<7:0>). PCL, Value on POR, BOR = 0000. PCL, Value on POR, BOR = 0000. PCL, Details on page: = 45, 50. TBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nMemory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Value on POR, BOR = --00. TBLPTRU, Value on POR, BOR = 0000. TBLPTRU, Details on page: = 45, 72. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n(TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Details on page: = 45, 72. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>).",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nTBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Details on page: = 45, 72. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on POR, BOR = 0000. TABLAT, Value on POR, BOR = 0000.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nTABLAT, Details on page: = 45, 72. PRODH, Bit 7 = Product Register High Byte. PRODH, Bit 6 = Product Register High Byte. PRODH, Bit 5 = Product Register High Byte. PRODH, Bit 4 = Product Register High Byte. PRODH, Bit 3 = Product Register High Byte. PRODH, Bit 2 = Product Register High Byte. PRODH, Bit 1 = Product Register High Byte. PRODH, Bit 0 = Product Register High Byte. PRODH, Value on POR, BOR = xxxx. PRODH, Value on POR, BOR = xxxx. PRODH, Details on page: = 45, 83. PRODL, Bit 7 = Product Register Low Byte. PRODL, Bit 6 = Product Register Low Byte. PRODL, Bit 5 = Product Register Low Byte. PRODL, Bit 4 = Product Register Low Byte. PRODL, Bit 3 = Product Register Low Byte. PRODL, Bit 2 = Product Register Low Byte. PRODL, Bit 1 = Product Register Low Byte. PRODL, Bit 0 = Product Register Low Byte. PRODL, Value on POR,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nBOR = xxxx. PRODL, Value on POR, BOR = xxxx. PRODL, Details on page: = 45, 83. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000 000x. INTCON, Value on POR, BOR = . INTCON, Details on page: = 45, 87. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = -.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nINTCON2, Bit 0 = RBIP. INTCON2, Value on POR, BOR = 1111 -1-1. INTCON2, Value on POR, BOR = . INTCON2, Details on page: = 45, 88. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 11-0 0-00. INTCON3, Value on POR, BOR = . INTCON3, Details on page: = 45, 89. INDF0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 6 = Uses contents of FSR0 to address data memory - value of",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nFSR0 not changed (not a physical register). INDF0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Value on POR, BOR = N/A. INDF0, Value on POR, BOR = .",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nINDF0, Details on page: = 45, 65. POSTINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nBit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Value on POR, BOR = N/A. POSTINC0, Value on POR, BOR = . POSTINC0, Details on page: = 45, 65. POSTDEC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 4 = Uses contents of FSR0 to address",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\ndata memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Value on POR, BOR = N/A. POSTDEC0, Value on POR, BOR = . POSTDEC0, Details on page: = 45, 65. PREINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\npre-incremented (not a physical register). PREINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Value on POR, BOR = N/A. PREINC0, Value on POR, BOR = . PREINC0, Details on page: = 45, 65. PLUSW0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 6 = offset by W. PLUSW0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\npre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Value on POR, BOR = N/A. PLUSW0, Value on POR, BOR = 45,. PLUSW0, Details on page: = 65. FSR0H, Bit 7 = -. FSR0H, Bit 6 = -. FSR0H, Bit 5 = -. FSR0H, Bit 4 = -. FSR0H, Bit 3 = Indirect Data Memory Address Pointer",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n0 High Byte. FSR0H, Bit 2 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 1 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 0 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Value on POR, BOR = ---- 0000. FSR0H, Value on POR, BOR = 45,. FSR0H, Details on page: = 65. FSR0L, Bit 7 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 6 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 5 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 4 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 3 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 2 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 1 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 0 = Indirect Data Memory Address Pointer 0",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nLow Byte. FSR0L, Value on POR, BOR = xxxx. FSR0L, Value on POR, BOR = xxxx. FSR0L, Details on page: = 45, 65. WREG, Bit 7 = Working Register. WREG, Bit 6 = Working Register. WREG, Bit 5 = Working Register. WREG, Bit 4 = Working Register. WREG, Bit 3 = Working Register. WREG, Bit 2 = Working Register. WREG, Bit 1 = Working Register. WREG, Bit 0 = Working Register. WREG, Value on POR, BOR = xxxx. WREG, Value on POR, BOR = xxxx. WREG, Details on page: = 45. INDF1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 5 = Uses contents of FSR1 to address",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\ndata memory - value of FSR1 not changed (not a physical register). INDF1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Value on POR, BOR = N/A. INDF1, Value on POR, BOR = 45,. INDF1, Details on page: = 65. POSTINC1, Bit 7 = Uses contents of FSR1 to address data",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nmemory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nregister). POSTINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Value on POR, BOR = N/A. POSTINC1, Value on POR, BOR = . POSTINC1, Details on page: = 45, 65. POSTDEC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 3 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nUses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Value on POR, BOR = N/A. POSTDEC1, Value on POR, BOR = 45,. POSTDEC1, Details on page: = 65. PREINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 6 = Uses contents of FSR1 to address data memory -",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nvalue of FSR1 pre-incremented (not a physical register). PREINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register).",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nPREINC1, Value on POR, BOR = N/A. PREINC1, Value on POR, BOR = . PREINC1, Details on page: = 45, 65. PLUSW1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 3 = Uses contents of FSR1 to address",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\ndata memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Value on POR, BOR = N/A. PLUSW1, Value on POR, BOR = . PLUSW1, Details on page: = 45, 65. FSR1H, Bit 7 = -. FSR1H, Bit 6 = -. FSR1H, Bit 5 = -.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nFSR1H, Bit 4 = -. FSR1H, Bit 3 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 2 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 1 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 0 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Value on POR, BOR = ----. FSR1H, Value on POR, BOR = 0000. FSR1H, Details on page: = 46, 65. FSR1L, Bit 7 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 6 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 5 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 4 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 3 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 2 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 1 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nIndirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 0 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Value on POR, BOR = xxxx. FSR1L, Value on POR, BOR = xxxx. FSR1L, Details on page: = 46, 65. BSR, Bit 7 = -. BSR, Bit 6 = -. BSR, Bit 5 = -. BSR, Bit 4 = -. BSR, Bit 3 = Bank Select Register. BSR, Bit 2 = Bank Select Register. BSR, Bit 1 = Bank Select Register. BSR, Bit 0 = Bank Select Register. BSR, Value on POR, BOR = ---- 0000. BSR, Value on POR, BOR = . BSR, Details on page: = 46, 55. INDF2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 6 = Uses contents of FSR2 to address data memory - value of",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nFSR2 not changed (not a physical register). INDF2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Value on POR, BOR = N/A. INDF2, Value on POR, BOR = .",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nINDF2, Details on page: = 46, 65. , Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nregister). , Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Value on POR, BOR = . , Value on POR, BOR = . , Details on page: = . POSTDEC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n(not a physical register). POSTDEC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Value on POR, BOR = N/A. POSTDEC2, Value on POR, BOR = . POSTDEC2, Details on page: = 46, 65. PREINC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register).",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nPREINC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Value on POR, BOR = N/A.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nPREINC2, Value on POR, BOR = . PREINC2, Details on page: = 46, 65. PLUSW2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nphysical register) - value of FSR2 offset by W. PLUSW2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Value on POR, BOR = N/A. PLUSW2, Value on POR, BOR = . PLUSW2, Details on page: = 46, 65. FSR2H, Bit 7 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 6 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 5",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n= - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 4 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 3 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 2 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 1 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 0 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Value on POR, BOR = ----. FSR2H, Value on POR, BOR = 0000. FSR2H, Details on page: = 46, 65. FSR2L, Bit 7 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 6 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 5 = Indirect Data Memory Address Pointer 2 Low Byte -",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\n- - N OV Z DC C. FSR2L, Bit 4 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 3 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 2 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 1 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Bit 0 = Indirect Data Memory Address Pointer 2 Low Byte - - - N OV Z DC C. FSR2L, Value on POR, BOR = xxxx. FSR2L, Value on POR, BOR = xxxx. FSR2L, Details on page: = 46, 65 46, 63. STATUS, Bit 7 = . STATUS, Bit 6 = . STATUS, Bit 5 = . STATUS, Bit 4 = . STATUS, Bit 3 = . STATUS, Bit 2 = . STATUS, Bit 1 = . STATUS, Bit 0 = .",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY\nSTATUS, Value on POR, BOR = ---x. STATUS, Value on POR, BOR = xxxx. STATUS, Details on page: = ",
    "Legend:\nx = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded cells are unimplemented, read as ' 0 '.\nNote 1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits need to be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.",
    "Legend:\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nTMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0 = Timer0 Register High Byte. TMR0H, Value on POR, BOR = 0000 0000. TMR0H, Details on page: = 46, 117. TMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nTMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Value on POR, BOR = xxxx xxxx. TMR0L, Details on page: = 46, 117. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Value on POR, BOR = 1111 1111. T0CON, Details on page: = 46, 115. OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nIRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0100 q000. OSCCON, Details on page: = 27, 46. HLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Value on POR, BOR = 0-00 0101. HLVDCON, Details on page: = 46, 245. WDTCON, Bit 7",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Value on POR, BOR = --- ---0. WDTCON, Details on page: = 46, 247. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Value on POR, BOR = 0q-1 11q0. RCON, Details on page: = 38, 44, 96. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nByte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Value on POR, BOR = xxxx xxxx. TMR1H, Details on page: = 46, 123. TMR1L, Bit 7 = Timer1 Register Low Bytes. TMR1L, Bit 6 = Timer1 Register Low Bytes. TMR1L, Bit 5 = Timer1 Register Low Bytes. TMR1L, Bit 4 = Timer1 Register Low Bytes. TMR1L, Bit 3 = Timer1 Register Low Bytes. TMR1L, Bit 2 = Timer1 Register Low Bytes. TMR1L, Bit 1 = Timer1 Register Low Bytes.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nTMR1L, Bit 0 = Timer1 Register Low Bytes. TMR1L, Value on POR, BOR = xxxx xxxx. TMR1L, Details on page: = 46, 123. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR = 0000 0000. T1CON, Details on page: = 46, 118. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nTimer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Value on POR, BOR = 0000 0000. TMR2, Details on page: = 46, 125. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Value on POR, BOR = 1111 1111. PR2, Details on page: = 46, 125. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nT2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000 0000. T2CON, Details on page: = 46, 124. SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive Buffer/Transmit Register. SSPBUF, Value on POR, BOR = xxxx",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nxxxx. SSPBUF, Details on page: = 46, 159, 160. SSPADD, Bit 7 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 6 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 5 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 4 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 3 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 2 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nReload Register in I 2 C Host Mode.. SSPADD, Bit 1 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Bit 0 = MSSPAddress Register in I 2 C\u2122 Client Mode. MSSP Baud Rate Reload Register in I 2 C Host Mode.. SSPADD, Value on POR, BOR = 0000 0000. SSPADD, Details on page: = 46, 160. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Value on POR, BOR = 0000 0000. SSPSTAT, Details on page: = 46, 152, 161. SSPCON1, Bit 7 =",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nWCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Value on POR, BOR = 0000 0000. SSPCON1, Details on page: = 46, 153, 162. SSPCON2, Bit 7 = GCEN. SSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN. SSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN. SSPCON2, Bit 0 = SEN. SSPCON2, Value on POR, BOR = 0000 0000. SSPCON2, Details on",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\npage: = 46, 163. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Value on POR, BOR = xxxx xxxx. ADRESH, Details on page: = 47, 223. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nResult Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Value on POR, BOR = xxxx xxxx. ADRESL, Details on page: = 47, 223. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Value on POR, BOR = --00 0000. ADCON0, Details on page: = 47, 214. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00 0qqq. ADCON1, Details on page: = 47, 215. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Value on POR, BOR = 0-00 0000. ADCON2, Details on page: = 47, 216. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nBit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Value on POR, BOR = xxxx xxxx. CCPR1H, Details on page: = 47, 130. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nBit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Value on POR, BOR = xxxx xxxx. CCPR1L, Details on page: = 47, 130. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= 0000 0000. CCP1CON, Details on page: = 47, 129, 137. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Value on POR, BOR = xxxx xxxx. CCPR2H, Details on page: = 47, 130. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nByte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Value on POR, BOR = xxxx. CCPR2L, Details on page: = 47, 130. CCP2CON, Bit 7 = . CCP2CON, Bit 6 = . CCP2CON, Bit 5 = . CCP2CON, Bit 4 = . CCP2CON, Bit 3 = . CCP2CON, Bit 2 = . CCP2CON, Bit",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n1 = . CCP2CON, Bit 0 = . CCP2CON, Value on POR, BOR = xxxx. CCP2CON, Details on page: = . , Bit 7 = -. , Bit 6 = -. , Bit 5 = DC2B1. , Bit 4 = DC2B0. , Bit 3 = CCP2M3. , Bit 2 = CCP2M2. , Bit 1 = CCP2M1. , Bit 0 = CCP2M0. , Value on POR, BOR = --00 0000. , Details on page: = 47, 129. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Value on POR, BOR = 0100",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n0-00. BAUDCON, Details on page: = 47, 193. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (2). PWM1CON, Bit 5 = PDC5 (2). PWM1CON, Bit 4 = PDC4 (2). PWM1CON, Bit 3 = PDC3 (2). PWM1CON, Bit 2 = PDC2 (2). PWM1CON, Bit 1 = PDC1 (2). PWM1CON, Bit 0 = PDC0 (2). PWM1CON, Value on POR, BOR = 0000 0000. PWM1CON, Details on page: = 47, 146. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (2). ECCP1AS, Bit 0 = PSSBD0 (2). ECCP1AS, Value on POR, BOR = 0000 0000. ECCP1AS, Details on page: = 47, 147. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR, BOR = 0000 0000. CVRCON, Details on page: = 47, 229. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Value on POR, BOR = 0000 0111. CMCON, Details on page: = 47, 224. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Value on POR, BOR = xxxx xxxx. TMR3H, Details on page: = 47, 128. TMR3L, Bit 7 = Timer3",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nRegister Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Value on POR, BOR = xxxx xxxx. TMR3L, Details on page: = 47, 128. T3CON, Bit 7 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 6 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nT3CON, Bit 5 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 4 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 3 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 2 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 1 = RD16 T3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Bit 0 = RD16",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nT3CCP2 T3CKPS1 T3CKPS0 T3CCP1 T3SYNC TMR3CS TMR3ON. T3CON, Value on POR, BOR = 0000 0000. T3CON, Details on page: = 47, 126",
    "Legend:\n- x = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded cells are unimplemented, read as ' 0 '.\nNote",
    "Legend:\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits need to be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nSPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Value on POR, BOR on = 0000 0000. SPBRGH, Details page: = 47, 195. SPBRGH,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Value on POR, BOR on = 0000 0000. SPBRG, Details page: = 47, 195. SPBRG,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . RCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Value on POR, BOR on = 0000 0000. RCREG, Details page: = 47, 203. RCREG,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Value on POR, BOR on = 0000 0000. TXREG, Details page: = 47, 200. TXREG,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR on = 0000 0010. TXSTA, Details page: = 47, 191. TXSTA,  = . RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR on = 0000 000x. RCSTA, Details page: = 47, 192. RCSTA,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . EEADR, Bit 7 = EEPROMAddress Register. EEADR, Bit 6 = EEPROMAddress Register. EEADR, Bit 5 = EEPROMAddress Register. EEADR, Bit 4 = EEPROMAddress Register. EEADR, Bit 3 = EEPROMAddress Register. EEADR, Bit 2 = EEPROMAddress Register. EEADR, Bit 1 = EEPROMAddress Register. EEADR, Bit 0 = EEPROMAddress Register. EEADR, Value on POR, BOR on = 0000 0000. EEADR, Details page: = 47, 70, 78. EEADR,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register. EEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data Register. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit 0 = EEPROM Data Register. EEDATA, Value on POR, BOR on = 0000 0000. EEDATA, Details page: = 47, 70, 78. EEDATA,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Value on POR, BOR on = 0000 0000. EECON2, Details page: = 47, 70, 78. EECON2,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Value on POR, BOR on = xx-0 x000. EECON1, Details page: = 47, 71, 79. EECON1,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR on = 11-1 1111. IPR2, Details page: = 48, 95. IPR2,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR on = 00-0 0000. PIR2, Details page: = 48, 91. PIR2,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR on = 00-0 0000. PIE2, Details page: = 48, 93. PIE2,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR on = 1111 1111. IPR1, Details page: = 48, 94. IPR1,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR on = 0000 0000. PIR1, Details page: = 48, 90. PIR1,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR on = 0000 0000. PIE1, Details page: = 48, 92. PIE1,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . OSCTUNE, Bit 7 = INTSRC. OSCTUNE, Bit 6 = PLLEN (3). OSCTUNE, Bit 5 = -. OSCTUNE, Bit 4 = TUN4. OSCTUNE, Bit 3 = TUN3. OSCTUNE, Bit 2 = TUN2. OSCTUNE, Bit 1 = TUN1. OSCTUNE, Bit 0 = TUN0. OSCTUNE, Value on POR, BOR on = 0q-0 0000. OSCTUNE, Details page: = 24, 48. OSCTUNE,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TRISE (2), Bit 7 = IBF. TRISE (2), Bit 6 = OBF. TRISE (2), Bit 5 = IBOV. TRISE (2), Bit 4 = PSPMODE. TRISE (2), Bit 3 = -. TRISE (2), Bit 2 = TRISE2. TRISE (2), Bit 1 = TRISE1. TRISE (2), Bit 0 = TRISE0. TRISE (2), Value on POR, BOR on = 0000 -111. TRISE (2), Details page: = 48, 111. TRISE (2),",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TRISD (2), Bit 7 = PORTD Data Direction Register. TRISD (2), Bit 6 = PORTD Data Direction Register. TRISD (2), Bit 5 = PORTD Data Direction Register. TRISD (2), Bit 4 = PORTD Data Direction Register. TRISD (2), Bit 3 = PORTD Data Direction Register. TRISD (2), Bit 2 = PORTD Data Direction Register. TRISD (2), Bit 1 = PORTD Data Direction Register. TRISD (2), Bit 0 = PORTD Data Direction Register. TRISD (2), Value on POR, BOR on = 1111 1111. TRISD (2), Details page: = 48, 107. TRISD (2),",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR on = 1111 1111. TRISC, Details page: = 48, 104. TRISC,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Value on POR, BOR on = 1111 1111. TRISB, Details page: = 48, 101. TRISB,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . TRISA, Bit 7 = TRISA7 (5). TRISA, Bit 6 = TRISA6 (5). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Value on POR, BOR on = 1111 1111. TRISA, Details page: = 48, 98. TRISA,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Bit 1 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Bit 0 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Value on POR, BOR on = ---- -xxx. LATE (2), Details page: = 48, 110. LATE (2),",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . LATD (2), Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 0 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Value on POR, BOR on = xxxx xxxx. LATD (2), Details page: = 48, 107.",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\nLATD (2),\n= . LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Value on POR, BOR on = xxxx xxxx. LATC, Details page: = 48, 104. LATC,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Value on POR, BOR on = xxxx xxxx. LATB, Details page: = 48, 101. LATB,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . LATA, Bit 7 = LATA7 (5). LATA, Bit 6 = LATA6 (5). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Value on POR, BOR on = xxxx xxxx. LATA, Details page: = 48, 98. LATA,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (4). PORTE, Bit 2 = RE2 (2). PORTE, Bit 1 = RE1 (2). PORTE, Bit 0 = RE0 (2). PORTE, Value on POR, BOR on = ---- xxxx. PORTE, Details page: = 48, 110. PORTE,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PORTD (2), Bit 7 = RD7. PORTD (2), Bit 6 = RD6. PORTD (2), Bit 5 = RD5. PORTD (2), Bit 4 = RD4. PORTD (2), Bit 3 = RD3. PORTD (2), Bit 2 = RD2. PORTD (2), Bit 1 = RD1. PORTD (2), Bit 0 = RD0. PORTD (2), Value on POR, BOR on = xxxx xxxx. PORTD (2), Details page: = 48, 107. PORTD (2),",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Value on POR, BOR on = xxxx xxxx. PORTC, Details page: = 48, 104. PORTC,  = . PORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Value on POR, BOR on = xxxx xxxx. PORTB, Details page: = 48, 101. PORTB,",
    "TABLE 5-2: PIC18F2420/2520/4420/4520 REGISTER FILE SUMMARY (CONTINUED)\n= . PORTA, Bit 7 = RA7 (5). PORTA, Bit 6 = RA6 (5). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR, BOR on = xx0x 0000. PORTA, Details page: = 48, 98. PORTA,  = ",
    "Legend:\nx = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded cells are unimplemented, read as ' 0 '.\nNote",
    "Legend:\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits need to be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "5.3.5 STATUS REGISTER\nThe STATUS register, shown in Register 5-2 , contains the arithmetic status of the ALU. As with any other SFR, it can be the operand for any instruction.\nIt is recommended that only BCF BSF SWAPF MOVFF , , , and MOVWF instructions are used to alter the STATUS register, because these instructions do not affect the Z, C, DC, OV or N bits in the STATUS register.\nIf the STATUS register is the destination for an instruction that affects the Z, DC, C, OV or N bits, the results of the instruction are not written; instead, the STATUS register  is  updated  according  to  the  instruction  performed. Therefore, the result of an instruction with the STATUS  register  as  its  destination  may  be  different than intended. As an example, CLRF STATUS will set the Z bit and leave the remaining Status bits unchanged (' 000u u1uu ').\nFor other instructions that do not affect Status bits, see the instruction set summaries  in Table 24-2 and Table 24-3 .\nNote: The C and DC bits operate as the borrow and digit borrow bits, respectively, in subtraction.",
    "REGISTER 5-2: STATUS REGISTER\n-, U-0 = -. -, U-0 = -. -, R/W-x = N. -, R/W-x = OV. -, R/W-x = Z. -, R/W-x = DC (1). -, R/W-x = C (2). bit 7, U-0 = . bit 7, U-0 = . bit 7, R/W-x = . bit 7, R/W-x = . bit 7, R/W-x = . bit 7, R/W-x = . bit 7, R/W-x = bit 0",
    "REGISTER 5-2: STATUS REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 4 N: Negative bit\nThis bit is used for signed arithmetic (2's complement). It indicates whether the result was negative (ALU MSB = 1 ).\n1 = Result was negative\n0 = Result was positive",
    "bit 3 OV: Overflow bit\nThis bit is used for signed arithmetic (2's complement). It indicates an overflow of the 7-bit magnitude which causes the sign bit (bit 7) to change state.\n1 = Overflow occurred for signed arithmetic (in this arithmetic operation)\n0 = No overflow occurred",
    "bit 2 Z: Zero bit\n1 = The result of an arithmetic or logic operation is zero\n0 = The result of an arithmetic or logic operation is not zero\nDC: Digit Carry/borrow bit (1)\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:\n1 = A carry-out from the 4th low-order bit of the result occurred\n0 = No carry-out from the 4th low-order bit of the result\nC: Carry/borrow bit (2)\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:",
    "bit 2 Z: Zero bit\n1 = A carry-out from the Most Significant bit of the result occurred\n0 = No carry-out from the Most Significant bit of the result occurred\nNote 1: For borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF, RLF ) instructions, this bit is loaded with either bit 4 or bit 3 of the source register.\n2: For borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF, RLF ) instructions, this bit is loaded with either the high or low-order bit of the source register.",
    "5.4 Data Addressing Modes\nNote:\nThe Access RAM bit 'a' determines how the address is interpreted.  When  'a'  is  ' 1 ',  the  contents  of  the  BSR ( Section 5.3.1  'Bank  Select  (BSR)  Register' )  are used with the address to determine the complete 12-bit address of the register. When 'a' is ' 0 ', the address is interpreted  as  being  a  register  in  the Access  Bank. Addressing that uses the Access RAM is sometimes also known as Direct Forced Addressing mode.\nThe execution of some instructions in the core  PIC18  instruction  set  are  changed when the PIC18 extended instruction set is enabled. See Section 5.5 'Data Memory and  the  Extended  Instruction  Set' for more information.\nWhile the program memory can be addressed in only one way - through the program counter - information in the data memory space can be addressed in several ways. For most instructions, the addressing mode is fixed. Other instructions may use up to three modes, depending on which operands are used and whether or not the extended instruction set is enabled.\nThe addressing modes are:\n\u00b7 Inherent\n\u00b7 Literal\n\u00b7 Direct\n\u00b7 Indirect",
    "5.4 Data Addressing Modes\nAn additional addressing mode, Indexed Literal Offset, is available  when  the  extended  instruction  set  is enabled (XINST Configuration bit = 1 ). Its operation is discussed in greater detail in Section 5.5.1 'Indexed Addressing with Literal Offset' .",
    "5.4.1 INHERENT AND LITERAL ADDRESSING\nMany  PIC18  control  instructions  do  not  need  any argument at all;  they  either  perform  an  operation  that globally affects the device or they operate implicitly on one register. This addressing mode is known as Inherent Addressing. Examples include SLEEP RESET , and DAW .\nOther instructions work in a similar way but require an additional  explicit  argument  in  the  opcode.  This  is known  as  Literal  Addressing  mode  because  they require some literal value as an argument. Examples include ADDLW and MOVLW , which respectively, add or move a literal value to the W register. Other examples include CALL and GOTO , which include a 20-bit program memory address.",
    "5.4.2 DIRECT ADDRESSING\nDirect Addressing  specifies  all  or  part  of  the  source and/or destination address of the operation within the opcode itself. The options are specified by the arguments accompanying the instruction.\nIn the core PIC18 instruction set, bit-oriented and byteoriented instructions use some  version of Direct Addressing by default. All of these instructions include some  8-bit  literal  address  as  their  Least  Significant Byte. This address specifies either a register address in one of the banks of data RAM ( Section 5.3.3 'General Purpose Register File' )  or  a  location  in  the Access Bank  ( Section 5.3.2  'Access  Bank' ) as  the  data source for the instruction.\nA few instructions, such as MOVFF ,  include the entire 12-bit  address  (either  source  or  destination)  in  their opcodes. In these cases, the BSR is ignored entirely.",
    "5.4.2 DIRECT ADDRESSING\nThe destination of the operation's results is determined by the destination bit 'd'. When 'd' is ' 1 ', the results are stored back in the source register, overwriting its original contents. When 'd' is ' 0 ',  the results are stored in the  W  register.  Instructions  without  the  'd'  argument have a destination that is implicit in the instruction; their destination is either the target register being operated on or the W register.",
    "5.4.3 INDIRECT ADDRESSING\nIndirect Addressing allows the user to access a location in data memory without giving a fixed address in the instruction. This is done by using File Select Registers (FSRs) as pointers to the locations to be read or written to. Since the FSRs are themselves located in RAM as Special Function Registers, they can also be directly manipulated under program control. This makes FSRs very useful  in  implementing  data  structures,  such  as tables and arrays in data memory.\nThe registers for Indirect Addressing are also implemented with Indirect File Operands (INDFs) that permit automatic manipulation of the pointer value with auto-incrementing, auto-decrementing or offsetting with another value. This allows for efficient code, using loops, such as the example of clearing an entire RAM bank in Example 5-5 .",
    "EXAMPLE 5-5:\nHOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nNEXT, 1 = LFSR CLRF. NEXT, 2 = FSR0, 100h; POSTINC0. NEXT, 3 = ; Clear INDF ; register then ; inc pointer. BRA, 1 = BTFSS FSR0H,. BRA, 2 = 1; NEXT. BRA, 3 = All done with ; Bank1? ; NO, clear next. CONTINUE, 1 = CONTINUE. CONTINUE, 2 = CONTINUE. CONTINUE, 3 = ; YES, continue",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nAt the core of Indirect Addressing are three sets of registers: FSR0, FSR1 and FSR2. Each represents a pair of 8-bit registers, FSRnH and FSRnL. The four upper bits of the FSRnH register are not used so each FSR pair holds a 12-bit value. This represents a value that can address the entire range of the data memory in a linear fashion. The FSR register pairs, then, serve as pointers to data memory locations.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIndirect  Addressing  is  accomplished  with  a  set  of Indirect File Operands, INDF0 through INDF2. These can  be  thought  of  as  'virtual'  registers:  they  are mapped in the SFR space but are not physically implemented. Reading or writing to a particular INDF register actually accesses its corresponding FSR register pair. A read from INDF1, for example, reads the data at the address indicated by FSR1H:FSR1L. Instructions that use the INDF registers as operands actually use the contents of their corresponding FSR as a pointer to the instruction's target. The  INDF  operand  is just a convenient way of using the pointer.\nBecause Indirect Addressing uses a full 12-bit address, data RAM banking is not necessary. Thus, the current contents of the BSR and the Access RAM bit have no effect on determining the target address.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn addition to the INDF operand, each FSR register pair also has four additional indirect operands. Like INDF, these  are  'virtual'  registers  that  cannot  be  indirectly read or written to. Accessing these registers actually accesses  the  associated  FSR  register  pair,  but  also performs a specific action on it stored value. They are:\n\u00b7 POSTDEC: accesses the FSR value, then automatically decrements it by 1 afterwards\n\u00b7 POSTINC: accesses the FSR value, then automatically increments it by 1 afterwards\n\u00b7 PREINC: increments the FSR value by 1, then uses it in the operation\n\u00b7 PLUSW: adds the signed value of the W register (range of -127 to 128) to that of the FSR and uses the new value in the operation.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn  this  context,  accessing  an  INDF  register  uses  the value in the FSR registers without changing them. Similarly, accessing a PLUSW register gives the FSR value offset by that in the W register; neither value is actually changed in the operation. Accessing the other virtual registers changes the value of the FSR registers.\nOperations  on  the  FSRs  with  POSTDEC,  POSTINC and PREINC affect the entire register pair; that is, rollovers of the FSRnL register from FFh to 00h carry over to  the  FSRnH register. On the other hand, results of these operations do not change the value of any flags in the STATUS register (e.g., Z, N, OV, etc.).",
    "PIC18F2420/2520/4420/4520\nThe PLUSW register can be used to implement a form of Indexed Addressing in the data memory space. By manipulating  the  value  in  the  W  register,  users  can reach  addresses  that  are  fixed  offsets  from  pointer addresses. In some applications, this can be used to implement  some  powerful  program  control  structure, such as software stacks, inside of data memory.",
    "5.4.3.3 Operations by FSRs on FSRs\nIndirect Addressing operations that target other FSRs or virtual registers represent special cases. For example, using an FSR to point to one of the virtual registers will not result in successful operations. As a specific  case,  assume  that  FSR0H:FSR0L  contains FE7h,  the  address  of  INDF1.  Attempts  to  read  the value  of  the  INDF1  using  INDF0  as  an  operand  will return 00h. Attempts to write to INDF1 using INDF0 as the operand will result in a NOP .\nOn the other hand, using the virtual registers to write to an FSR pair may not occur as planned. In these cases, the value will be written to the FSR pair but without any incrementing or decrementing. Thus, writing to INDF2 or POSTDEC2  will  write  the  same  value  to  the FSR2H:FSR2L.\nSince the FSRs are physical registers mapped in the SFR space, they can be manipulated through all direct operations.  Users  need  to  proceed  cautiously  when working  on  these  registers,  particularly  if  their  code uses indirect addressing.",
    "5.4.3.3 Operations by FSRs on FSRs\nSimilarly, operations by Indirect Addressing are generally permitted on all other SFRs. Users need to exercise the appropriate caution that they do not inadvertently  change  settings  that  might  affect  the operation of the device.",
    "5.5 Data Memory and the Extended Instruction Set\nEnabling  the  PIC18  extended  instruction  set  (XINST Configuration  bit  = 1 ) significantly  changes  certain aspects  of  data  memory  and  its  addressing.  Specifically, the use of the Access Bank for many of the core PIC18  instructions  is  different;  this  is  due  to  the introduction  of  a  new  addressing  mode  for  the  data memory space.\nWhat does not change is just as important. The size of the data memory space is unchanged, as well as its linear  addressing. The  SFR  map  remains  the  same. Core PIC18 instructions can still operate in both Direct and  Indirect  Addressing  mode;  inherent  and  literal instructions  do not change at all. Indirect Addressing with FSR0 and FSR1 also remains unchanged.\nEnabling the PIC18 extended instruction set changes the  behavior  of  Indirect Addressing  using  the  FSR2 register  pair  within  Access  RAM.  Under  the  proper conditions, instructions that use the Access Bank - that is,  most  bit-oriented  and  byte-oriented  instructions  can  invoke  a  form  of  Indexed  Addressing  using  an offset specified in the instruction. This special addressing mode is known as Indexed Addressing with Literal Offset, or Indexed Literal Offset mode.\nWhen using the extended instruction set, this addressing mode requires the following:",
    "5.5 Data Memory and the Extended Instruction Set\n\u00b7 The use of the Access Bank is forced ('a' = 0 ) and\n\u00b7 The file address argument is less than or equal to 5Fh.\nUnder these conditions, the file address of the instruction is not interpreted as the lower byte of an address (used with the BSR in direct addressing), or as an 8-bit address  in  the  Access  Bank.  Instead,  the  value  is interpreted  as  an  offset  value  to  an Address  Pointer, specified  by  FSR2.  The  offset  and  the  contents  of FSR2 are added to obtain the  target  address  of  the operation.",
    "5.5.2 INSTRUCTIONS AFFECTED BY INDEXED LITERAL OFFSET MODE\nAny of the core PIC18 instructions that can use Direct Addressing  are  potentially  affected  by  the  Indexed Literal  Offset  Addressing  mode.  This  includes  all byte-oriented and bit-oriented instructions, or almost one-half of the standard PIC18 instruction set. Instructions that only use Inherent or Literal Addressing modes are unaffected.\nAdditionally, byte-oriented and bit-oriented instructions are  not  affected  if  they  do  not  use  the Access  Bank (Access RAM bit is ' 1 '), or include a file address of 60h or above. Instructions meeting these criteria will continue to execute as before. A comparison of the different possible addressing modes when the extended instruction set is enabled in shown in Figure 5-9 .\nThose who desire to use byte-oriented or bit-oriented instructions in the Indexed Literal Offset mode need to note the changes to assembler syntax for this mode. This  is  described  in  more  detail  in Section 24.2.1 'Extended Instruction Syntax' .\nFIGURE 5-9:",
    "COMPARING ADDRESSING OPTIONS FOR BIT-ORIENTED AND BYTE-ORIENTED INSTRUCTIONS (EXTENDED INSTRUCTION SET ENABLED)\nEXAMPLE INSTRUCTION: ADDWF, f, d, a (Opcode: 0010 01da ffff ffff )",
    "When 'a' = 0 and f \uf0b3 60h:\nThe  instruction executes  in Direct Forced mode. 'f' is interpreted  as  a  location  in  the Access  RAM  between  060h and 0FFh. This is the same as locations 060h to 07Fh (Bank 0)  and  F80h  to  FFFh (Bank 15) of data memory.\nLocations  below  60h  are  not available in this addressing mode.",
    "When 'a' = 0 and f \uf020\uf0a3\uf020 5Fh:\nThe instruction executes in Indexed Literal Offset mode. 'f' is interpreted as an offset to the address  value  in  FSR2.  The two are added together to obtain the address of the target register for the instruction. The address  can  be  anywhere  in the data memory space.\nNote  that  in  this mode,  the correct syntax is now:\nADDWF [k], d where 'k' is the same as 'f'.",
    "When 'a' = 1 (all values of f):\nThe  instruction executes  in Direct  mode  (also  known  as Direct Long mode). 'f' is interpreted as a location in one of the 16 banks of the data memory  space.  The  bank  is designated by the Bank Select (BSR)  Register.  The  address can  be  in  any  implemented bank in the data memory space.",
    "5.5.3 MAPPING THE ACCESS BANK IN INDEXED LITERAL OFFSET MODE\nThe  use  of  Indexed  Literal  Offset Addressing  mode effectively changes how the first 96 locations of Access RAM (00h to 5Fh) are mapped. Rather than containing just the contents of the bottom half of Bank 0, this mode maps  the  contents  from  Bank  0  and  a  user-defined 'window'  that  can  be  located  anywhere  in  the  data memory  space.  The  value  of  FSR2  establishes  the lower  boundary  of  the  addresses  mapped  into  the window, while the upper boundary is defined by FSR2 plus  95  (5Fh). Addresses  in  the Access  RAM  above 5Fh are mapped as previously described (see Section 5.3.2 'Access Bank' ). An example of Access Bank remapping in this addressing mode is shown in Figure 5-10 .\nRemapping of the Access Bank applies only to operations using the Indexed Literal Offset mode. Operations that use the BSR (Access RAM bit is ' 1 ') will continue to use Direct Addressing as before.",
    "5.6 PIC18 Instruction Execution and the Extended Instruction Set\nEnabling the extended instruction set adds eight additional commands to the existing PIC18 instruction set.  These  instructions  are  executed  as  described  in Section 24.2 'Extended Instruction Set' .",
    "Example Situation:\nADDWF f, d, a FSR2H:FSR2L = 120h\nLocations in the region from the FSR2 Pointer (120h)  to  the  pointer  plus 05Fh  (17Fh)  are  mapped to the bottom of the Access RAM (000h-05Fh).\nLocations  in  Bank  0  from 060h to 07Fh are mapped, as usual, to the middle half of the Access Bank.\nSpecial Function Registers at F80h through FFFh are mapped to 80h through FFh, as usual.\nBank  0  addresses  below 5Fh can still be addressed by using the BSR.",
    "6.0 FLASH PROGRAM MEMORY\nThe Flash program memory is readable, writable and erasable during normal operation over the entire VDD range.\nA read from program memory is executed on one byte at a time. A write to program memory is executed on blocks  of  32  bytes  at  a  time.  Program  memory  is erased in blocks of 64 bytes at a time. A bulk erase operation may not be issued from user code.\nWriting or erasing program memory will cease instruction fetches until the operation is complete. The program memory cannot be accessed during the write or erase, therefore, code cannot execute. An internal programming timer terminates program memory writes and erases.\nA value written to program memory does not need to be a valid instruction. Executing  a  program  memory location  that  forms  an  invalid  instruction  results  in  a NOP .",
    "6.1 Table Reads and Table Writes\nIn order to read and write program memory, there are two operations that allow the processor to move bytes between the program memory space and the data RAM:\n\u00b7 Table Read ( TBLRD )\n\u00b7 Table Write ( TBLWT )\nThe program memory space is 16 bits wide, while the data RAM space is 8 bits wide. Table reads and table writes move data between these two memory spaces through an 8-bit register (TABLAT).\nTable  read  operations  retrieve  data  from  program memory  and  places  it  into  the  data  RAM  space. Figure 6-1 shows  the  operation  of  a  table  read  with program memory and data RAM.\nTable write operations store data from the data memory space  into  holding  registers  in  program  memory.  The procedure to write the contents of the holding registers into program memory is detailed in Section 6.5 'Writing to  Flash  Program  Memory' . Figure 6-2 shows  the operation of a table write with program memory and data RAM.",
    "6.1 Table Reads and Table Writes\nTable operations work with byte entities. A table block containing data, rather than program instructions, is not required to be word aligned. Therefore, a table block can start and end at any byte address. If a table write is being used  to  write  executable  code  into  program  memory, program instructions will need to be word aligned.",
    "6.2 Control Registers\nSeveral control registers are used in conjunction with the TBLRD and TBLWT instructions. These include the:\nThe FREE bit, when set, will allow a program memory erase operation. When  FREE  is  set, the erase operation is initiated on the next WR command. When FREE is clear, only writes are enabled.\n\u00b7 EECON1 register\n\u00b7 EECON2 register\n\u00b7 TABLAT register\n\u00b7 TBLPTR registers",
    "6.2.1 EECON1 AND EECON2 REGISTERS\nThe  EECON1  register  ( Register 6-1 )  is  the  control register for memory accesses. The EECON2 register is not  a  physical  register;  it  is  used  exclusively  in  the memory write and erase sequences. Reading EECON2 will read all ' 0 's.\nThe EEPGD control bit determines if the access will be a  program or  data  EEPROM memory access. When clear,  any  subsequent  operations will  operate on  the data  EEPROM  memory.  When  set,  any  subsequent operations will operate on the program memory.\nThe CFGS control bit determines if the access will be to the Configuration/Calibration registers or to program memory/data EEPROM memory. When set, subsequent  operations  will  operate  on  Configuration registers  regardless  of  EEPGD  (see Section 23.0 'Special Features of the CPU' ). When clear, memory selection access is determined by EEPGD.\nThe WREN bit, when set, will allow a write operation. On power-up, the WREN bit is clear. The WRERR bit is set  in  hardware  when  the  WR  bit  is  set  and  cleared when the internal programming timer expires and the write operation is complete.",
    "6.2.1 EECON1 AND EECON2 REGISTERS\nNote:, 1 = During normal operation, the WRERR is read as ' 1 '. This can indicate that a write operation was prematurely terminated by a Reset, or a write operation was attempted improperly.\nThe WR control bit initiates write operations. The  bit cannot be cleared, only set, in software; it is cleared in hardware at the completion of the write operation.\nNote:, 1 = The EEIF interrupt flag (PIR2<4>) bit is set when the write is complete. It must be cleared in software.",
    "REGISTER 6-1: EECON1: EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = -. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7 bit 0, R/W-x = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-x = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/S-0 = bit 7 bit 0. bit 7 bit 0, R/S-0 = bit 7 bit 0",
    "REGISTER 6-1: EECON1: EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Settable bit (cannot be cleared in software). Legend:, 2 = S = Settable bit (cannot be cleared in software). Legend:, 3 = S = Settable bit (cannot be cleared in software). R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory",
    "bit 6\nCFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 4 FREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write only",
    "bit 3 WRERR: Flash Program/Data EEPROM Error Flag bit (1)\n1 = A write operation is prematurely terminated (any Reset during self-timed programming in normal operation, or an improper write attempt)\n0 = The write operation completed",
    "bit 2 WREN: Flash Program/Data EEPROM Write Enable bit\n1 = Allows write cycles to Flash program/data EEPROM\n0 = Inhibits write cycles to Flash program/data EEPROM",
    "bit 1 WR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle to the EEPROM is complete",
    "bit 0 RD: Read Control bit\n1 = Initiates an EEPROM read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 or CFGS = 1 .)\n0 = Does not initiate an EEPROM read\nNote 1: When a WRERR occurs, the EEPGD and CFGS bits are not cleared. This allows tracing of the error condition.",
    "6.2.4 TABLE POINTER BOUNDARIES\nThe Table Latch (TABLAT) is an 8-bit register mapped into the SFR space. The Table Latch register is used to hold 8-bit data during data transfers between program memory and data RAM.",
    "6.2.3 TBLPTR - TABLE POINTER REGISTER\nThe Table Pointer (TBLPTR) register addresses a byte within the program memory. The TBLPTR is comprised of  three  SFR  registers:  Table  Pointer  Upper  Byte, Table Pointer High Byte and Table Pointer Low Byte (TBLPTRU:TBLPTRH:TBLPTRL).  These  three  registers  join  to  form  a  22-bit  wide  pointer. The  low-order 21 bits allow the device to address up to 2 Mbytes of program memory space. The 22nd bit allows access to the device ID, the user ID and the Configuration bits.\nTBLPTR  is  used  in  reads,  writes  and  erases  of  the Flash program memory.\nWhen a TBLRD is executed, all 22 bits of the TBLPTR determine  which  byte  is  read  from  program  memory into TABLAT.",
    "6.2.3 TBLPTR - TABLE POINTER REGISTER\nWhen a TBLWT is executed, the five LSbs of the Table Pointer  register  (TBLPTR<4:0>)  determine  which  of the 32 program memory holding registers is written to. When the timed write to program memory begins (via the WR bit), the 16 MSbs of the TBLPTR (TBLPTR<21:6>)  determine  which  program  memory block  of  32  bytes  is  written  to.  For  more  detail,  see Section 6.5 'Writing to Flash Program Memory' .\nThe  Table  Pointer  register,  TBLPTR,  is  used  by  the TBLRD and TBLWT instructions. These instructions can update the TBLPTR in one of four ways based on the table operation. These operations are shown in Table 6-1 . These  operations  on  the  TBLPTR  only affect the low-order 21 bits.\nWhen an erase of program memory is executed, the 16 MSbs of the Table Pointer register (TBLPTR<21:6>) point to the 64-byte block that will be erased. The Least Significant bits (TBLPTR<5:0>) are ignored.",
    "6.2.3 TBLPTR - TABLE POINTER REGISTER\nFigure 6-3 describes the relevant boundaries of TBLPTR based on Flash program memory operations.\nTABLE 6-1: TABLE POINTER OPERATIONS WITH TBLRD AND TBLWT INSTRUCTIONS\n\nTBLRD* TBLWT*, Operation on Table Pointer = TBLPTR is not modified. TBLRD*+ TBLWT*+, Operation on Table Pointer = TBLPTR is incremented after the read/write. TBLRD*- TBLWT*-, Operation on Table Pointer = TBLPTR is decremented after the read/write. TBLRD+* TBLWT+*, Operation on Table Pointer = TBLPTR is incremented before the read/write",
    "6.3 Reading the Flash Program Memory\nThe TBLRD instruction  is  used  to  retrieve  data  from program memory and places it into data RAM. Table reads from program memory are performed one byte at a time.\nTBLPTR points to a byte address in program space. Executing TBLRD places  the  byte  pointed  to  into TABLAT. In addition, TBLPTR can be modified automatically for the next table read operation.\nThe internal program memory is typically organized by words. The Least Significant bit of the address selects between the high and low bytes of the word. Figure 6-4 shows  the  interface  between  the  internal  program memory and the TABLAT.",
    "EXAMPLE 6-1: READING A FLASH PROGRAM MEMORY WORD\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. READ_WORD, 1 = READ_WORD. READ_WORD, 2 = READ_WORD. , 1 = TBLRD*+. , 2 = TBLRD*+. , 1 = MOVF. , 2 = TABLAT, W. , 1 = MOVWF TBLRD*+. , 2 = WORD_EVEN. , 1 = MOVFW MOVF. , 2 = TABLAT, W WORD_ODD",
    "6.4 Erasing Flash Program Memory\nThe minimum erase block is 32 words or 64 bytes. Only through the use of an external programmer, or through ICSP control, can larger blocks of program memory be bulk  erased.  Word  erase  in  the  Flash  array  is  not supported.\nWhen  initiating  an  erase  sequence  from  the  microcontroller itself, a block of 64 bytes of program memory is erased. The Most Significant 16 bits of the TBLPTR<21:6>  point  to  the block being erased. TBLPTR<5:0> are ignored.\nThe EECON1 register commands the erase operation. The EEPGD bit must be set to point to the Flash program memory. The WREN bit must be set to enable write operations. The FREE bit is set to select an erase operation.\nFor protection, the write initiate sequence for EECON2 must be used.",
    "6.4.1 FLASH PROGRAM MEMORY ERASE SEQUENCE\nThe sequence of events for erasing a block of internal program memory location is:\n1. Load Table Pointer register with address of row being erased.\n2. Set the EECON1 register for the erase operation:\n\u00b7 set EEPGD bit to point to program memory;\n\u00b7 clear the CFGS bit to access program memory;\n\u00b7 set WREN bit to enable writes;\n\u00b7 set FREE bit to enable the erase.\n3. Disable interrupts.\n4. Write 55h to EECON2.\n5. Write 0AAh to EECON2.\n6. Set  the  WR  bit.  This  will  begin  the  row  erase cycle.\nA long write is necessary for erasing the internal Flash. Instruction  execution  is  halted  while  in  a  long  write cycle. The long write will be terminated by the internal programming timer.\n7. The  CPU  will  stall  for  duration  of  the  erase (about 2 ms using internal timer).\n8. Re-enable interrupts.",
    "EXAMPLE 6-2: ERASING A FLASH PROGRAM MEMORY ROW\nERASE_ROW, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF BSF. ERASE_ROW, 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. ERASE_ROW, 3 = ; load TBLPTR with the base ; address of the memory block. Required Sequence, 1 = MOVLW MOVWF MOVLW MOVWF BSF. Required Sequence, 2 = 55h EECON2 EECON2. Required Sequence, 3 = ; write 55h ; write 0AAh ; start erase (CPU ; re-enable interrupts",
    "6.5 Writing to Flash Program Memory\nThe  minimum  programming  block  is  16  words  or 32 bytes. Word or byte programming is not supported. Table  writes  are  used  internally  to  load  the  holding registers needed to program the Flash memory. There are  32  holding  registers  used  by  the  table  writes  for programming.\nThe long write is necessary for programming the internal Flash. Instruction execution is halted while in a long write  cycle.  The  long  write  will  be  terminated  by  the internal programming timer.\nSince the Table Latch (TABLAT) is only a single byte, the TBLWT instruction may  need  to  be  executed 32 times  for  each  programming  operation. All  of  the table  write  operations  will  essentially  be  short  writes because only the holding registers are written. At the end of updating the 32 holding registers, the EECON1 register must  be  written  to  in order  to start the programming operation with a long write.\nThe  EEPROM  on-chip  timer  controls  the  write  time. The write/erase voltages are generated by an on-chip charge pump, rated to operate over the voltage range of the device.",
    "Note:\nThe default value of the holding registers on device Resets and after write operations is FFh. A  write  of  FFh  to  a  holding  register does not modify that byte. This means individual  bytes  of  program  memory  may  be modified, provided that the change does not attempt to change any bit from a ' 0 ' to a ' 1 '. When modifying  individual  bytes,  it  is  not necessary  to  load  all  32  holding  registers before executing a write operation.",
    "6.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\nThe sequence of events for programming an internal program memory location needs to be:\n1. Read 64 bytes into RAM.\n2. Update data values in RAM as necessary.\n3. Load Table Pointer register with address being erased.\n4. Execute the row erase procedure.\n5. Load Table Pointer register with address of first byte being written.\n6. Write the 32 bytes into the holding registers with auto-increment.\n7. Set the EECON1 register for the write operation:\n\u00b7 set EEPGD bit to point to program memory;\n\u00b7 clear the CFGS bit to access program memory;\n\u00b7 set WREN to enable byte writes.\n8. Disable interrupts.\n9. Write 55h to EECON2.\n10. Write 0AAh to EECON2.\n11. Set the WR bit. This will begin the write cycle.\n12. The CPU will stall for duration of the write (about 2 ms using internal timer).\n13. Re-enable interrupts.\n14. Verify the memory (table read).\nThis procedure will require about 6 ms to update one row of 64 bytes of memory. An example of the required code is given in Example 6-3 .",
    "6.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\nNote:, 1 = Before setting the WR bit, the Table Pointer address needs to be within the intended address range of the 32 bytes in the holding register.",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nMOVLW, 1 = D'64 COUNTER BUFFER_ADDR_HIGH FSR0H. MOVLW, 2 = ; number of bytes in erase block. , 1 = TBLPTRL. , 2 = . TBLRD*+ MOVF MOVWF, 1 = TABLAT, W POSTINC0 COUNTER READ_BLOCK. TBLRD*+ MOVF MOVWF, 2 = ; read into TABLAT, and inc ; get data ; store data. MOVLW, 1 = DATA_ADDR_HIGH FSR0H. MOVLW, 2 = ; point to buffer. MOVWF, 1 = . MOVWF, 2 = . MOVLW MOVWF FSR0L, 1 = DATA_ADDR_LOW. MOVLW MOVWF FSR0L, 2 = ; update buffer word. MOVLW MOVWF MOVLW, 1 = NEW_DATA_LOW POSTINC0 NEW_DATA_HIGH. MOVLW MOVWF MOVLW, 2 = . MOVWF",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nMOVLW MOVWF, 1 = TBLPTRH CODE_ADDR_LOW TBLPTRL. MOVWF MOVLW MOVWF, 2 = . BSF EECON1, BCF EECON1, BSF, 1 = EEPGD CFGS EECON1, WREN FREE GIE. BSF EECON1, BCF EECON1, BSF, 2 = ; point to Flash program memory ; access Flash program memory ; enable write to memory. BSF, 1 = . BSF, 2 = ; disable interrupts. BCF, 1 = . BCF, 2 = . MOVLW, 1 = GIE. MOVLW, 2 = dummy read decrement. MOVLW MOVWF, 1 = BUFFER_ADDR_HIGH. MOVLW MOVWF, 2 = . MOVLW, 1 = . MOVLW, 2 = ;. MOVLW MOVWF WRITE_BUFFER_BACK, 1 = . MOVLW MOVWF WRITE_BUFFER_BACK, 2 = ; ; point to buffer.",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nMOVWF MOVWF BSF BSF, 1 = . MOVWF MOVWF BSF BSF, 2 = ; write 0AAh ; start erase (CPU stall) ; re-enable interrupts. TBLRD*- MOVLW, 1 = . TBLRD*- MOVLW, 2 = ; number of bytes in holding register. MOVWF WRITE_BYTE_TO_HREGS MOVFF MOVWF, 1 = . MOVWF WRITE_BYTE_TO_HREGS MOVFF MOVWF, 2 = . 55h, 1 = . 55h, 2 = ; write 55h. , 1 = WREG. , 2 = ; get low byte of buffer data. EECON1, INTCON,, 1 = . EECON1, INTCON,, 2 = . EECON1, INTCON,, 1 = WR. EECON1, INTCON,, 2 = enable Row Erase operation. EECON2 0AAh EECON2, 1 = . EECON2 0AAh EECON2, 2 = . FSR0H, 1 =",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\n. FSR0H, 2 = . FSR0L D'32, 1 = . FSR0L D'32, 2 = ; present data to table latch ; write data, perform a short write. TABLAT, 1 = . TABLAT, 2 = . , 1 = . , 2 = ; to internal TBLWT holding. , 1 = . , 2 = register.. DECFSZ BRA, 1 = . DECFSZ BRA, 2 = ; loop until buffers are full. COUNTER, 1 = . COUNTER, 2 = . , 1 = WRITE_WORD_TO_HREGS. , 2 = . POSTINC0,, 1 = . POSTINC0,, 2 = . COUNTER, 1 = . COUNTER, 2 = . , 1 = BUFFER_ADDR_LOW. , 2 = . TBLWT+*, 1 = . TBLWT+*, 2 = ",
    "WRITING TO FLASH PROGRAM MEMORY (CONTINUED)\nPROGRAM_MEMORY, 1 = PROGRAM_MEMORY. PROGRAM_MEMORY, 2 = PROGRAM_MEMORY. PROGRAM_MEMORY, 3 = PROGRAM_MEMORY. PROGRAM_MEMORY, 4 = PROGRAM_MEMORY. PROGRAM_MEMORY, 5 = PROGRAM_MEMORY. , 1 = BSF. , 2 = EECON1,. , 3 = EEPGD. , 4 = . , 5 = ; point to Flash program memory. , 1 = BCF. , 2 = EECON1,. , 3 = CFGS. , 4 = . , 5 = ; access Flash program memory. , 1 = BSF. , 2 = EECON1,. , 3 = WREN. , 4 = ;. , 5 = enable write to memory. , 1 = BCF. , 2 = INTCON,. , 3 = GIE. , 4 = ;. , 5 = disable interrupts. , 1 = MOVLW. , 2 = 55h. , 3 = . , 4 = . , 5 = . Required, 1 = MOVWF. Required, 2 = EECON2. Required, 3 = . Required, 4 = ;. Required, 5 = write 55h. Sequence, 1 =",
    "WRITING TO FLASH PROGRAM MEMORY (CONTINUED)\nMOVLW. Sequence, 2 = 0AAh. Sequence, 3 = . Sequence, 4 = . Sequence, 5 = . , 1 = MOVWF. , 2 = EECON2. , 3 = . , 4 = ;. , 5 = write 0AAh. , 1 = BSF. , 2 = EECON1,. , 3 = WR. , 4 = ;. , 5 = start program (CPU stall). , 1 = BSF. , 2 = INTCON,. , 3 = GIE. , 4 = . , 5 = ; re-enable interrupts. , 1 = BCF. , 2 = EECON1,. , 3 = WREN. , 4 = . , 5 = ; disable write to memory",
    "6.5.2 WRITE VERIFY\nDepending  on  the  application,  good  programming practice  may  dictate  that  the  value  written  to  the memory needs to be verified against the original value. This needs to be used in applications where excessive writes can stress bits near the specification limit.",
    "6.5.3 UNEXPECTED TERMINATION OF WRITE OPERATION\nIf a write is terminated by an unplanned event, such as loss  of  power  or  an  unexpected  Reset,  the  memory location  just  programmed  needs  to  be  verified  and reprogrammed if needed. If the write operation is interrupted  by  a  MCLR  Reset  or  a  WDT Time-out  Reset during  normal  operation,  the  user  can  check  the WRERR bit and rewrite the location(s) as needed.",
    "6.5.4 PROTECTION AGAINST SPURIOUS WRITES\nTo  protect  against  spurious  writes  to  Flash  program memory,  the  write  initiate  sequence  must  also  be followed.  See Section 23.0  'Special  Features  of the CPU' for more detail.",
    "6.6 Flash Program Operation During Code Protection\nSee Section 23.5 'Program Verification and Code Protection' for  details  on  code  protection  of  Flash program memory.",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Reset Values on page = 45. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>).",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Reset Values on page = 45. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nProgram Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Reset Values on page = 45. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Reset Values on page = 45. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nINT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Reset Values on page = 47. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nCFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Reset Values on page = 47. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during Flash/EEPROM access.",
    "7.0 DATA EEPROM MEMORY\nThe  data  EEPROM  is  a  nonvolatile  memory  array, separate from the data RAM and program memory, that is used for long-term storage of program data. It is not directly  mapped in either  the register  file  or  program memory space but is indirectly addressed through the Special Function Registers (SFRs). The EEPROM is readable and writable during normal operation over the entire VDD range.\nThe  EECON1  register  ( Register 7-1 )  is  the  control register for data and program memory access. Control bit EEPGD determines if the access will be to program or data EEPROM memory. When clear, operations will access the data EEPROM memory. When set, program memory is accessed.\nFive  SFRs  are  used  to  read  and  write  to  the  data EEPROM as well as the program memory. They are:\n\u00b7 EECON1\n\u00b7 EECON2\n\u00b7 EEDATA\n\u00b7 EEADR\nThe data EEPROM allows byte read and write. When interfacing to the data memory block, EEDATA holds the  8-bit  data  for  read/write  and  the  EEADR  register holds  the  address  of  the  EEPROM  location  being accessed.",
    "7.0 DATA EEPROM MEMORY\nThe  EEPROM data memory is rated  for  high  erase/ write cycle endurance.  A  byte  write automatically erases  the  location  and  writes  the  new  data  (erasebefore-write). The write time is controlled by an on-chip timer; it will vary with voltage and temperature as well as from chip to chip. Please refer to parameter D122 ( Table 26-1 in Section 26.0 'Electrical Characteristics' ) for exact limits.",
    "7.1 EEADR Register\nThe  EEADR  register  is  used  to  address  the  data EEPROM  for  read  and  write  operations.  The  8-bit range of the register can address a memory range of 256 bytes (00h to FFh).",
    "7.2 EECON1 and EECON2 Registers\nAccess  to  the  data  EEPROM  is  controlled  by  two registers: EECON1 and EECON2. These are the same registers which control access to the program memory and  are  used  in a similar manner  for  the data EEPROM.\nControl bit, CFGS, determines if the access will be to the Configuration registers or to program memory/data EEPROM memory. When set, subsequent operations access Configuration registers. When CFGS is clear, the  EEPGD bit selects  either  program  Flash  or  data EEPROM memory.\nThe WREN bit, when set, will allow a write operation. On power-up, the WREN bit is clear. The WRERR bit is set  in  hardware  when  the  WR  bit  is  set  and  cleared when the internal programming timer expires and the write operation is complete.\nNote:, 1 = During normal operation, the WRERR may read as ' 1 '. This can indicate that a write operation was prematurely termi- nated by a Reset, or a write operation was attempted improperly.\nThe WR control bit initiates write operations. The  bit can be set but not cleared in software. It is only cleared in hardware at the completion of the write operation.",
    "Note:\nThe EEIF interrupt flag (PIR2<4>) bit is set when  the  write  is  complete.  It  must  be cleared in software.\nControl  bits,  RD  and  WR,  start  read  and  erase/write operations, respectively. These bits are set by firmware and  cleared  by  hardware  at  the  completion  of  the operation.\nThe  RD  bit  cannot  be  set  when  accessing  program memory (EEPGD = 1 ). Program memory is read using table read instructions. See Section 6.1 'Table Reads and Table Writes' regarding table reads.\nThe EECON2 register is not a physical register. It is used  exclusively  in the memory  write  and  erase sequences. Reading EECON2 will read all ' 0 's.",
    "REGISTER 7-1: EECON1: EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = -. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7, R/W-x = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/S-0 = bit 7. bit 7, R/S-0 = bit 0",
    "REGISTER 7-1: EECON1: EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Settable bit (cannot be cleared in software). Legend:, 2 = S = Settable bit (cannot be cleared in software). Legend:, 3 = S = Settable bit (cannot be cleared in software). R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory",
    "bit 6 CFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 4 FREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write only",
    "bit 3 WRERR: Flash Program/Data EEPROM Error Flag bit (1)\n1 = A write operation is prematurely terminated (any Reset during self-timed programming in normal operation, or an improper write attempt)\n0 = The write operation completed\nbit 2 WREN: Flash Program/Data EEPROM Write Enable bit\n1 = Allows write cycles to Flash program/data EEPROM\n0 = Inhibits write cycles to Flash program/data EEPROM",
    "bit 1 WR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle to the EEPROM is complete",
    "bit 0 RD: Read Control bit\n1 = Initiates an EEPROM read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 or CFGS = 1 .)\n0 = Does not initiate an EEPROM read\nNote 1: When a WRERR occurs, the EEPGD and CFGS bits are not cleared. This allows tracing of the error condition.",
    "7.3 Reading the Data EEPROM Memory\nTo read a data memory location, the user must write the address to the EEADR register, clear the EEPGD control (EECON1<7>) bit and then set control bit, RD (EECON1<0>). The data is available on the very next instruction  cycle;  therefore,  the  EEDATA  register  can be read by the next instruction. EEDATA will hold this value until another read operation, or until it is written to by the user (during a write operation).\nAdditionally, the WREN bit in EECON1 must be set to enable  writes.  This  mechanism  prevents  accidental writes to data EEPROM due to unexpected code execution (i.e., runaway programs). The WREN bit needs to be kept clear at all times, except when updating the EEPROM. The WREN bit is not cleared by hardware.\nThe basic process is shown in Example 7-1 .",
    "7.4 Writing to the Data EEPROM Memory\nTo write an EEPROM data location, the address must first  be  written  to  the  EEADR  register  and  the  data written  to the  EEDATA  register.  The  sequence  in Example 7-2 must  be  followed  to  initiate  the  write cycle.\nThe write will not begin if this sequence is not exactly followed (write 55h to EECON2,  write 0AAh  to EECON2, then set WR bit) for each byte. It is strongly recommended that interrupts  be  disabled  during  this code segment.\nAfter  a  write  sequence  has  been  initiated,  EECON1, EEADR and EEDATA cannot be modified. The WR bit will be inhibited from being set unless the WREN bit is set. Both WR and WREN cannot be set with the same instruction.\nAt  the  completion  of  the  write  cycle,  the  WR  bit  is cleared in hardware and the EEPROM Interrupt Flag bit,  EEIF,  is  set.  The  user  may  either  enable  this interrupt  or  poll  this  bit.  EEIF  must  be  cleared  by software.",
    "7.5 Write Verify\nDepending  on  the  application,  good  programming practice  may  dictate  that  the  value  written  to  the memory needs to be verified against the original value. This needs to be used in applications where excessive writes can stress bits near the specification limit.",
    "EXAMPLE 7-1: DATA EEPROM READ\nMOVLW, 1 = DATA_EE_ADDR. MOVLW, 2 = ;. MOVWF, 1 = EEADR. MOVWF, 2 = ; Data Memory Address to read. BCF, 1 = EECON1, EEPGD. BCF, 2 = ; Point to DATA memory. BCF, 1 = EECON1, CFGS. BCF, 2 = ; Access EEPROM. BSF, 1 = EECON1, RD. BSF, 2 = ; EEPROM Read. MOVF, 1 = EEDATA, W. MOVF, 2 = ; W = EEDATA",
    "EXAMPLE 7-2: DATA EEPROM WRITE\nMOVLW MOVWF MOVLW BCF BCF BSF, 1 = DATA_EE_ADDR EEADR DATA_EE_DATA EEDATA EECON1, EEPGD EECON1, CFGS EECON1, WREN. MOVLW MOVWF MOVLW BCF BCF BSF, 2 = ; ; ; ; ;. MOVLW MOVWF MOVLW BCF BCF BSF, 3 = Data Memory Address to write Data Memory Value to write Point to DATA memory Access EEPROM Enable writes. , 1 = . , 2 = ;. , 3 = Write 55h. MOVWF, 1 = . MOVWF, 2 = . MOVWF, 3 = ;. , 1 = . , 2 = GIE ;. , 3 = Disable. BCF, 1 = INTCON,. BCF, 2 = . BCF, 3 = Interrupts. MOVLW, 1 = 55h. MOVLW, 2 = ;. MOVLW, 3 = ;. MOVWF, 1 = EECON2.",
    "EXAMPLE 7-2: DATA EEPROM WRITE\nMOVWF, 2 = . MOVWF, 3 = . MOVLW MOVWF, 1 = 0AAh. MOVLW MOVWF, 2 = ;. MOVLW MOVWF, 3 = ; Write. BSF, 1 = EECON2 EECON1,. BSF, 2 = . BSF, 3 = 0AAh ; Set WR bit to begin. BSF, 1 = . BSF, 2 = WR. BSF, 3 = Enable Interrupts. , 1 = INTCON,. , 2 = GIE. , 3 = ;. BCF, 1 = EECON1,. BCF, 2 = . BCF, 3 = ; User code execution Disable writes on write complete (EEIF set). , 1 = . , 2 = WREN. , 3 = ;",
    "7.6 Operation During Code-Protect\nData EEPROM memory has its own code-protect bits in Configuration Words. External read and write operations are disabled if code protection is enabled.\nThe microcontroller itself can both read and write to the internal data EEPROM, regardless of the state of the code-protect Configuration bit. Refer to Section 23.0 'Special Features of the CPU' for additional information.",
    "7.7 Protection Against Spurious Write\nThere are conditions when the user may not want to write to the data EEPROM memory. To protect against spurious EEPROM writes, various mechanisms have been implemented. On power-up, the WREN bit is cleared. In addition, writes to the EEPROM are blocked during the Power-up Timer period (TPWRT, parameter 33).",
    "7.8 Using the Data EEPROM\nThe data EEPROM is a high-endurance, byte addressable  array  that  has  been  optimized  for  the storage of frequently changing information (e.g., program  variables  or  other  data  that  are  updated often).  Frequently  changing  values  will  typically  be updated more often than specification D124. If this is not the case, an array refresh must be performed. For this reason, variables that change infrequently (such as constants, IDs, calibration, etc.) need to be stored in Flash program memory.\nA  simple  data  EEPROM  refresh  routine  is  shown  in Example 7-3 .\nNote:, 1 = If data EEPROM is only used to store constants and/or data that changes rarely, an array refresh is likely not required. See specification D124.\nThe write initiate sequence and the WREN bit together help  prevent  an  accidental  write  during  brown-out, power glitch or software malfunction.",
    "EXAMPLE 7-3: DATA EEPROM REFRESH ROUTINE\n, 1 = CLRF. , 2 = EEADR. , 3 = . , 4 = ;. , 5 = Start at address 0. , 1 = BCF. , 2 = EECON1,. , 3 = CFGS. , 4 = ;. , 5 = Set for memory. , 1 = BCF. , 2 = EECON1,. , 3 = EEPGD. , 4 = ;. , 5 = Set for Data EEPROM. , 1 = BCF. , 2 = INTCON,. , 3 = GIE. , 4 = ;. , 5 = Disable interrupts. , 1 = BSF. , 2 = EECON1,. , 3 = WREN. , 4 = ;. , 5 = Enable writes. Loop, 1 = . Loop, 2 = . Loop, 3 = . Loop, 4 = ;. Loop, 5 = Loop to refresh array. , 1 = BSF. , 2 = EECON1,. , 3 = RD. , 4 = ;. , 5 = Read current address. , 1 = MOVLW. , 2 = 55h. , 3 = . , 4 =",
    "EXAMPLE 7-3: DATA EEPROM REFRESH ROUTINE\n;. , 5 = . , 1 = MOVWF. , 2 = EECON2. , 3 = . , 4 = ;. , 5 = Write 55h. , 1 = MOVLW. , 2 = 0AAh. , 3 = . , 4 = ;. , 5 = . , 1 = MOVWF. , 2 = EECON2. , 3 = . , 4 = ;. , 5 = Write 0AAh. , 1 = BSF. , 2 = EECON1,. , 3 = WR. , 4 = ;. , 5 = Set WR bit to begin write. , 1 = BTFSC. , 2 = EECON1,. , 3 = WR. , 4 = ;. , 5 = Wait for write to complete. , 1 = BRA. , 2 = $-2. , 3 = . , 4 = . , 5 = . , 1 = INCFSZ. , 2 = EEADR,. , 3 = F. , 4 = ;. , 5 = Increment address. , 1 = BRA. , 2 = LOOP. , 3 = . , 4 = ;. , 5 =",
    "EXAMPLE 7-3: DATA EEPROM REFRESH ROUTINE\nNot zero, do it again. , 1 = BCF. , 2 = EECON1,. , 3 = WREN. , 4 = ;. , 5 = Disable writes. , 1 = BSF. , 2 = INTCON,. , 3 = GIE. , 4 = ;. , 5 = Enable interrupts",
    "REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. EEADR, Bit 7 = EEPROMAddress Register. EEADR, Bit 6 = EEPROMAddress Register. EEADR, Bit 5 = EEPROMAddress Register. EEADR, Bit 4 = EEPROMAddress Register. EEADR, Bit 3 = EEPROMAddress Register. EEADR, Bit 2 = EEPROMAddress Register. EEADR, Bit 1 = EEPROMAddress Register. EEADR, Bit 0 = EEPROMAddress Register. EEADR, Reset Values on page = 47. EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register.",
    "REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nEEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data Register. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit 0 = EEPROM Data Register. EEDATA, Reset Values on page = 47. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical",
    "REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nregister). EECON2, Reset Values on page = 47. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Reset Values on page = 47. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3",
    "REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\n= BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during Flash/EEPROM access.",
    "8.1 Introduction\nAll PIC18 devices include an 8 x 8 hardware multiplier as part of the ALU. The multiplier performs an unsigned operation and yields a 16-bit result that is stored in the product register pair, PRODH:PRODL. The multiplier's operation  does  not  affect  any  flags  in  the  STATUS register.\nMaking multiplication a hardware operation allows it to be completed in a single instruction cycle. This has the advantages  of  higher  computational  throughput  and reduced  code  size  for  multiplication  algorithms  and allows the PIC18 devices to be used in many applications previously reserved for digital signal processors. A comparison  of various hardware  and  software multiply operations, along with the savings in memory and execution time, is shown in Table 8-1 .",
    "8.2 Operation\nExample 8-1 shows the instruction sequence for an 8 x 8 unsigned multiplication. Only one instruction is required when one of the arguments is already loaded in the WREG register.\nExample 8-2 shows  the  sequence  to  do  an  8  x  8 signed multiplication. To account for the sign bits of the arguments, each argument's Most Significant bit (MSb) is tested and the appropriate subtractions are done.",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n8 x 8 unsigned, Multiply Method = Without hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 13. 8 x 8 unsigned, Cycles (Max). = 69. 8 x 8 unsigned, Time.@40 MHz = 6.9 \uf06d s. 8 x 8 unsigned, Time.@10 MHz = 27.6 \uf06d s. 8 x 8 unsigned, Time.@4MHz = 69 \uf06d s. 8 x 8 unsigned, Multiply Method = Hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 1. 8 x 8 unsigned, Cycles (Max). = 1. 8 x 8 unsigned, Time.@40 MHz = 100 ns. 8 x 8 unsigned, Time.@10 MHz = 400 ns. 8 x 8 unsigned, Time.@4MHz = 1 \uf06d s. 8 x 8 signed, Multiply Method = Without hardware multiply. 8 x 8 signed, Program Memory (Words). = 33. 8 x 8 signed, Cycles (Max). = 91. 8 x 8 signed, Time.@40 MHz = 9.1 \uf06d s. 8 x 8 signed, Time.@10 MHz = 36.4 \uf06d",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\ns. 8 x 8 signed, Time.@4MHz = 91 \uf06d s. 8 x 8 signed, Multiply Method = Hardware multiply. 8 x 8 signed, Program Memory (Words). = 6. 8 x 8 signed, Cycles (Max). = 6. 8 x 8 signed, Time.@40 MHz = 600 ns. 8 x 8 signed, Time.@10 MHz = 2.4 \uf06d s. 8 x 8 signed, Time.@4MHz = 6 \uf06d s. 16 x 16 unsigned, Multiply Method = Without hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 21. 16 x 16 unsigned, Cycles (Max). = 242. 16 x 16 unsigned, Time.@40 MHz = 24.2 \uf06d s. 16 x 16 unsigned, Time.@10 MHz = 96.8 \uf06d s. 16 x 16 unsigned, Time.@4MHz = 242 \uf06d s. 16 x 16 unsigned, Multiply Method = Hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 28. 16 x 16 unsigned, Cycles (Max). = 28. 16 x 16 unsigned, Time.@40 MHz =",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n2.8 \uf06d s. 16 x 16 unsigned, Time.@10 MHz = 11.2 \uf06d s. 16 x 16 unsigned, Time.@4MHz = 28 \uf06d s. 16 x 16 signed, Multiply Method = Without hardware multiply. 16 x 16 signed, Program Memory (Words). = 52. 16 x 16 signed, Cycles (Max). = 254. 16 x 16 signed, Time.@40 MHz = 25.4 \uf06d s. 16 x 16 signed, Time.@10 MHz = 102.6 \uf06d s. 16 x 16 signed, Time.@4MHz = 254 \uf06d s. 16 x 16 signed, Multiply Method = Hardware multiply. 16 x 16 signed, Program Memory (Words). = 35. 16 x 16 signed, Cycles (Max). = 40. 16 x 16 signed, Time.@40 MHz = 4.0 \uf06d s. 16 x 16 signed, Time.@10 MHz = 16.0 \uf06d s. 16 x 16 signed, Time.@4MHz = 40 \uf06d s",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\nEXAMPLE 8-1:, 1 = 8 x 8 UNSIGNED MULTIPLY ROUTINE. MOVF ARG1, W MULWF ARG2, 1 = ; ; ARG1 * ARG2 -> ; PRODH:PRODL",
    "EXAMPLE 8-2: 8 x 8 SIGNED MULTIPLY\nROUTINE\nMOVF MULWF BTFSC SUBWF MOVF BTFSC, 1 = ARG1, W ARG2. MOVF MULWF BTFSC SUBWF MOVF BTFSC, 2 = ; ARG1 * ARG2 -> ; PRODH:PRODL",
    "PIC18F2420/2520/4420/4520\nExample 8-3 shows  the  sequence  to  do  a  16  x  16 unsigned multiplication. Equation 8-1 shows the algorithm that is used. The 32-bit result is stored in four registers (RES<3:0>).",
    "EQUATION 8-1:\n16 x 16 UNSIGNED MULTIPLICATION ALGORITHM\nRES<3:0>\n= ARG1H:ARG1L   ARG2H:ARG2L \uf0b7\n= (ARG1H   ARG2H   2 16 ) + \uf0b7 \uf0b7\n(ARG1H   ARG2L   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2H   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2L) \uf0b7",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF MULWF, 1 = ARG1L, ARG2L. MOVF MULWF, 2 = W. MOVF MULWF, 3 = . MOVF MULWF, 4 = . , 1 = PRODH,. , 2 = RES1. , 3 = ; ;. , 4 = ARG1L * ARG2L-> PRODH:PRODL. MOVFF MOVFF, 1 = PRODL,. MOVFF MOVFF, 2 = RES0. MOVFF MOVFF, 3 = ; ;. MOVFF MOVFF, 4 = . MOVF MULWF, 1 = ARG1H, ARG2H. MOVF MULWF, 2 = W. MOVF MULWF, 3 = ; ;. MOVF MULWF, 4 = ARG1H * ARG2H-> PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\n= . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF MULWF, 1 = ARG1L, ARG2H. MOVF MULWF, 2 = W. MOVF MULWF, 3 = ; ;. MOVF MULWF, 4 = ARG1L * ARG2H-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1, F. ADDWF, 2 = . ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2, F. ADDWFC, 2 = . ADDWFC, 3 = ;. ADDWFC, 4 = .",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nCLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ; ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF MULWF, 1 = ARG1H,. MOVF MULWF, 2 = W. MOVF MULWF, 3 = ;. MOVF MULWF, 4 = ARG1H * ARG2L->. MOVF, 1 = ARG2L. MOVF, 2 = . MOVF, 3 = ;. MOVF, 4 = PRODH:PRODL. ADDWF, 1 = PRODL, RES1,. ADDWF, 2 = W F. ADDWF, 3 = ; ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 =",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nRES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = \nExample 8-4 shows  the  sequence  to  do  a  16  x  16 signed  multiply. Equation 8-2 shows  the  algorithm used.  The  32-bit  result  is  stored  in  four  registers (RES<3:0>). To account for the sign bits of the arguments, the MSb for each argument pair is tested and the appropriate subtractions are done.\nEQUATION 8-2:\n16 x 16 SIGNED MULTIPLICATION ALGORITHM\nRES<3:0> =\nARG1H:ARG1L   ARG2H:ARG2L \uf0b7\n= (ARG1H   ARG2H   2 16 ) + \uf0b7 \uf0b7\n(ARG1H   ARG2L   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2H   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2L) + \uf0b7\n(-1 \uf0b7 ARG2H<7>   ARG1H:ARG1L   2 16 ) + \uf0b7 \uf0b7",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\n(-1 \uf0b7 ARG1H<7>   ARG2H:ARG2L   2 16 ) \uf0b7 \uf0b7",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1L * ARG2L ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES1. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES0. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 =",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nARG1H * ARG2H ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1L * ARG2H ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1H * ARG2L ->. , 1 = .",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n, 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = . ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = F W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2, F. ADDWFC, 2 = . ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . BTFSS, 1 = ARG2H,. BTFSS, 2 = 7. BTFSS, 3 = ;.",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nBTFSS, 4 = ARG2H:ARG2L neg?. BRA, 1 = SIGN_ARG1. BRA, 2 = . BRA, 3 = ;. BRA, 4 = no, check ARG1. MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWF, 1 = RES2. SUBWF, 2 = . SUBWF, 3 = ;. SUBWF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWFB, 1 = RES3. SUBWFB, 2 = . SUBWFB, 3 = . SUBWFB, 4 = . SIGN_ARG1, 1 = . SIGN_ARG1, 2 = . SIGN_ARG1, 3 = . SIGN_ARG1, 4 = . BTFSS, 1 = ARG1H,. BTFSS, 2 = 7. BTFSS, 3 =",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n;. BTFSS, 4 = ARG1H:ARG1L neg?. BRA, 1 = CONT_CODE. BRA, 2 = . BRA, 3 = ;. BRA, 4 = no, done. MOVF, 1 = ARG2L,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWF, 1 = RES2. SUBWF, 2 = . SUBWF, 3 = ;. SUBWF, 4 = . MOVF, 1 = ARG2H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWFB ;, 1 = RES3. SUBWFB ;, 2 = . SUBWFB ;, 3 = . SUBWFB ;, 4 = . CONT_CODE :, 1 = . CONT_CODE :, 2 = . CONT_CODE :, 3 = . CONT_CODE :, 4 = ",
    "9.0 INTERRUPTS\nThe PIC18F2420/2520/4420/4520 devices have multiple  interrupt  sources  and  an  interrupt  priority feature that allows most  interrupt sources  to be assigned a high-priority level or a low-priority level. The high-priority interrupt vector is at 0008h and the lowpriority interrupt vector is at 0018h. High-priority interrupt events will interrupt any low-priority interrupts that may be in progress.\nWhen  the  IPEN  bit  is  cleared  (default  state),  the interrupt priority feature is disabled and interrupts are compatible with PIC \u00ae  mid-range devices. In Compatibility  mode,  the  interrupt  priority  bits  for  each  source have  no  effect.  INTCON<6>  is  the  PEIE  bit,  which enables/disables all peripheral interrupt sources. INTCON<7> is the GIE bit, which enables/disables all interrupt  sources.  All  interrupts  branch  to  address 0008h in Compatibility mode.\nThere  are  ten  registers  which  are  used  to  control interrupt operation. These registers are:\n\u00b7 RCON\n\u00b7 INTCON\n\u00b7 INTCON2\n\u00b7 INTCON3\n\u00b7 PIR1, PIR2\n\u00b7 PIE1, PIE2\n\u00b7 IPR1, IPR2",
    "9.0 INTERRUPTS\nIt is recommended that the Microchip header files supplied  with  MPLAB \u00ae   IDE  be  used  for  the  symbolic  bit names in these registers. This allows the assembler/ compiler to automatically take care of the placement of these bits within the specified register.\nIn general, interrupt sources have three bits to control their operation. They are:\n\u00b7 Flag bit to indicate that an interrupt event occurred\n\u00b7 Enable bit that allows program execution to branch to the interrupt vector address when the flag bit is set\n\u00b7 Priority bit to select high priority or low priority\nThe interrupt priority feature is enabled by setting the IPEN (RCON<7>) bit. When  interrupt priority is enabled,  there  are  two  bits  which  enable  interrupts globally. Setting the GIEH (INTCON<7>) bit enables all interrupts  that  have  the  priority  bit  set  (high  priority). Setting the GIEL (INTCON<6>) bit enables all interrupts that have the priority bit cleared (low priority). When  the  interrupt  flag,  enable  bit  and  appropriate global interrupt enable bit are set, the interrupt will vector immediately to address 0008h or 0018h, depending on the priority bit setting. Individual interrupts can be disabled through their corresponding enable bits.",
    "9.0 INTERRUPTS\nWhen an interrupt is responded to, the global interrupt enable bit is cleared to disable further interrupts. If the IPEN bit is cleared, this is the GIE bit. If interrupt priority levels are used, this will be either the GIEH or GIEL bit. High-priority  interrupt  sources  can  interrupt  a  lowpriority interrupt. Low-priority interrupts are not processed while high-priority interrupts are in progress.\nThe return address is pushed onto the stack and the PC is loaded with the interrupt vector address (0008h or 0018h). Once in the Interrupt Service Routine, the source(s) of the interrupt can be determined by polling the interrupt flag  bits. The  interrupt  flag  bits  must  be cleared  in  software  before  re-enabling  interrupts  to avoid recursive interrupts.\nThe 'return  from  interrupt'  instruction, RETFIE ,  exits the interrupt routine and sets the GIE (GIEH or GIEL if priority levels are used) bit, which re-enables interrupts.",
    "9.0 INTERRUPTS\nFor external interrupt events, such as the INTx pins or the PORTB input change interrupt, the interrupt latency will be  three  to  four  instruction  cycles.  The  exact latency is the same for one or two-cycle instructions. Individual interrupt flag bits are set, regardless of the status of their corresponding enable bit or the GIE bit.\nNote:\nDo not use the MOVFF instruction to modify any of the interrupt control registers while any interrupt  is  enabled.  Doing  so  may cause erratic microcontroller behavior.",
    "PIC18F2420/2520/4420/4520\nFIGURE 9-1:\nPIC18 INTERRUPT LOGIC",
    "9.1 INTCON Registers\nNote:\nThe  INTCON  registers  are  readable  and  writable registers,  which  contain  various  enable,  priority  and flag bits.\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global enable bit. User software needs to ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 9-1: INTCON: INTERRUPT CONTROL REGISTER\nGIE/GIEH, R/W-0 = PEIE/GIEL. GIE/GIEH, R/W-0 = TMR0IE. GIE/GIEH, R/W-0 = INT0IE. GIE/GIEH, R/W-0 = RBIE. GIE/GIEH, R/W-0 = TMR0IF. GIE/GIEH, R/W-0 = INT0IF. GIE/GIEH, R/W-x = RBIF (1). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-x = bit 7 bit 0",
    "REGISTER 9-1: INTCON: INTERRUPT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 GIE/GIEH: Global Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked interrupts\n0 = Disables all interrupts",
    "When IPEN = 1 :\n1 = Enables all high-priority interrupts\n0 = Disables all interrupts\nbit 6\nPEIE/GIEL: Peripheral Interrupt Enable bit",
    "When IPEN = 0 :\n1 = Enables all unmasked peripheral interrupts\n0 = Disables all peripheral interrupts",
    "When IPEN = 1 :\n1 = Enables all low-priority peripheral interrupts\n0 = Disables all low-priority peripheral interrupts\nbit 5\nTMR0IE: TMR0 Overflow Interrupt Enable bit\n1 = Enables the TMR0 overflow interrupt\n0 = Disables the TMR0 overflow interrupt",
    "bit 4\nINT0IE: INT0 External Interrupt Enable bit\n1 = Enables the INT0 external interrupt\n0 = Disables the INT0 external interrupt",
    "bit 3 RBIE: RB Port Change Interrupt Enable bit\n1 = Enables the RB port change interrupt\n0 = Disables the RB port change interrupt\nbit 2\nTMR0IF: TMR0 Overflow Interrupt Flag bit\n1 = TMR0 register has overflowed (must be cleared in software)\n0 = TMR0 register did not overflow",
    "bit 1\nINT0IF: INT0 External Interrupt Flag bit\n1 = The INT0 external interrupt occurred (must be cleared in software)\n0 = The INT0 external interrupt did not occur",
    "bit 0\nRBIF: RB Port Change Interrupt Flag bit (1)\n1 = At least one of the RB<7:4> pins changed state (must be cleared in software)\n0 = None of the RB<7:4> pins have changed state\nNote 1: A mismatch condition will continue to set this bit. Reading PORTB will end the mismatch condition and allow the bit to be cleared.",
    "REGISTER 9-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nRBPU, R/W-1 = INTEDG0. RBPU, R/W-1 = INTEDG1. RBPU, R/W-1 = INTEDG2. RBPU, U-0 = -. RBPU, R/W-1 = TMR0IP. RBPU, U-0 = -. RBPU, R/W-1 = RBIP. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 9-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 RBPU: PORTB Pull-up Enable bit\n1 = All PORTB pull-ups are disabled\n0 = PORTB pull-ups are enabled by individual port latch values\nbit 6\nINTEDG0: External Interrupt 0 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 5\nINTEDG1: External Interrupt 1 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 4\nINTEDG2: External Interrupt 2 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 3 Unimplemented: Read as ' 0 '\nbit 2\nTMR0IP: TMR0 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 1 Unimplemented: Read as ' 0 '\nbit 0\nRBIP: RB Port Change Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote:\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global enable bit. User software needs to ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "INTCON3: INTERRUPT CONTROL REGISTER 3\nINT2IP, R/W-1 = INT1IP. INT2IP, U-0 = -. INT2IP, R/W-0 = INT2IE. INT2IP, R/W-0 = INT1IE. INT2IP, U-0 = -. INT2IP, R/W-0 = INT2IF. INT2IP, R/W-0 = INT1IF. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "INTCON3: INTERRUPT CONTROL REGISTER 3\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nINT2IP:\nINT2 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nINT1IP: INT1 External Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nINT2IE: INT2 External Interrupt Enable bit\n1 = Enables the INT2 external interrupt\n0 = Disables the INT2 external interrupt\nbit 3\nINT1IE: INT1 External Interrupt Enable bit\n1 = Enables the INT1 external interrupt\n0 = Disables the INT1 external interrupt",
    "bit 2 Unimplemented: Read as ' 0 '\nbit 1\nINT2IF: INT2 External Interrupt Flag bit\n1 = The INT2 external interrupt occurred (must be cleared in software)\n0 = The INT2 external interrupt did not occur",
    "bit 0\nINT1IF: INT1 External Interrupt Flag bit\n1 = The INT1 external interrupt occurred (must be cleared in software)\n0 = The INT1 external interrupt did not occur\nNote: Interrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global enable bit. User software needs to ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "9.2 PIR Registers\nThe PIR registers contain the individual flag bits for the peripheral interrupts. Due to the number of peripheral interrupt  sources,  there  are  two  Peripheral  Interrupt Request Flag registers (PIR1 and PIR2).\nNote 1: Interrupt flag bits are set when an interrupt condition  occurs,  regardless of the state of  its corresponding  enable  bit  or  the Global  Interrupt  Enable  bit,  GIE  (INTCON<7>).\n2: User software needs to ensure the appropriate interrupt flag bits are cleared prior to enabling  an  interrupt  and  after  servicing that interrupt.",
    "REGISTER 9-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PSPIF (1), 1 = ADIF. PSPIF (1), 2 = RCIF. PSPIF (1), 3 = TXIF. PSPIF (1), 4 = SSPIF. PSPIF (1), 5 = CCP1IF. PSPIF (1), 6 = TMR2IF. PSPIF (1), 7 = TMR1IF. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7",
    "REGISTER 9-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\n= bit 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 PSPIF: Parallel Client Port Read/Write Interrupt Flag bit (1)\n1 = A read or a write operation has taken place (must be cleared in software)\n0 = No read or write has occurred",
    "bit 6 ADIF: A/D Converter Interrupt Flag bit\n1 = An A/D conversion completed (must be cleared in software)\n0 = The A/D conversion is not complete\nRCIF: EUSART Receive Interrupt Flag bit\n1 = The EUSART receive buffer, RCREG, is full (cleared when RCREG is read)\n0 = The EUSART receive buffer is empty\nTXIF: EUSART Transmit Interrupt Flag bit\n1 = The EUSART transmit buffer, TXREG, is empty (cleared when TXREG is written)\n0 = The EUSART transmit buffer is full",
    "bit 3 SSPIF: Host Synchronous Serial Port Interrupt Flag bit\n1 = The transmission/reception is complete (must be cleared in software)\n0 = Waiting to transmit/receive",
    "Capture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred",
    "PWM mode:\nUnused in this mode.\nTMR2IF: TMR2 to PR2 Match Interrupt Flag bit\n1 = TMR2 to PR2 match occurred (must be cleared in software)\n0 = No TMR2 to PR2 match occurred\nTMR1IF: TMR1 Overflow Interrupt Flag bit\n1 = TMR1 register overflowed (must be cleared in software)\n0 = TMR1 register did not overflow\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.\nbit 5\nbit 4\nbit 1",
    "REGISTER 9-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nOSCFIF, R/W-0 = CMIF. OSCFIF, U-0 = -. OSCFIF, R/W-0 = EEIF. OSCFIF, R/W-0 = BCLIF. OSCFIF, R/W-0 = HLVDIF. OSCFIF, R/W-0 = TMR3IF. OSCFIF, R/W-0 = CCP2IF. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIF: Oscillator Fail Interrupt Flag bit\n1 = Device oscillator failed, clock input has changed to INTOSC (must be cleared in software)\n0 = Device clock operating\nbit 6\nCMIF: Comparator Interrupt Flag bit\n1 = Comparator input has changed (must be cleared in software)\n0 = Comparator input has not changed",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nEEIF: Data EEPROM/Flash Write Operation Interrupt Flag bit\n1 = The write operation is complete (must be cleared in software)\n0 = The write operation is not complete or has not been started",
    "bit 3\nBCLIF: Bus Collision Interrupt Flag bit\n1 = A bus collision occurred (must be cleared in software)\n0 = No bus collision occurred",
    "bit 2 HLVDIF: High/Low-Voltage Detect Interrupt Flag bit\n1 = A high/low-voltage condition occurred (direction determined by VDIRMAG bit, HLVDCON<7>)\n0 = A high/low-voltage condition has not occurred\nbit 1\nTMR3IF: TMR3 Overflow Interrupt Flag bit\n1 = TMR3 register overflowed (must be cleared in software)\n0 = TMR3 register did not overflow",
    "bit 0 CCP2IF:\nCCP2 Interrupt Flag bit",
    "Capture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "9.3 PIE Registers\nThe PIE registers contain the individual enable bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Enable registers (PIE1 and PIE2). When IPEN = 0 , the PEIE bit must be set to enable any of these peripheral interrupts.",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nPSPIE (1), R/W-0 = ADIE. PSPIE (1), R/W-0 = RCIE. PSPIE (1), R/W-0 = TXIE. PSPIE (1), R/W-0 = SSPIE. PSPIE (1), R/W-0 = CCP1IE. PSPIE (1), R/W-0 = TMR2IE. PSPIE (1), R/W-0 = TMR1IE. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7 PSPIE: Parallel Client Port Read/Write Interrupt Enable bit (1)\n1 = Enables the PSP read/write interrupt\n0 = Disables the PSP read/write interrupt\nbit 6\nADIE: A/D Converter Interrupt Enable bit\n1 = Enables the A/D interrupt\n0 = Disables the A/D interrupt\nbit 5 RCIE: EUSART Receive Interrupt Enable bit\n1 = Enables the EUSART receive interrupt\n0 = Disables the EUSART receive interrupt\nbit 4",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nTXIE: EUSART Transmit Interrupt Enable bit\n1 = Enables the EUSART transmit interrupt\n0 = Disables the EUSART transmit interrupt\nbit 3\nSSPIE: Host Synchronous Serial Port Interrupt Enable bit\n1 = Enables the MSSP interrupt\n0 = Disables the MSSP interrupt",
    "bit 2 CCP1IE: CCP1 Interrupt Enable bit\n1 = Enables the CCP1 interrupt\n0 = Disables the CCP1 interrupt\nbit 1 TMR2IE: TMR2 to PR2 Match Interrupt Enable bit\n1 = Enables the TMR2 to PR2 match interrupt\n0 = Disables the TMR2 to PR2 match interrupt\nbit 0 TMR1IE: TMR1 Overflow Interrupt Enable bit\n1 = Enables the TMR1 overflow interrupt\n0 = Disables the TMR1 overflow interrupt\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.",
    "REGISTER 9-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nOSCFIE, R/W-0 = CMIE. OSCFIE, U-0 = -. OSCFIE, R/W-0 = EEIE. OSCFIE, R/W-0 = BCLIE. OSCFIE, R/W-0 = HLVDIE. OSCFIE, R/W-0 = TMR3IE. OSCFIE, R/W-0 = CCP2IE. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 9-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIE: Oscillator Fail Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 6\nCMIE: Comparator Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 5\nUnimplemented: Read as ' 0 '\nbit 4\nEEIE: Data EEPROM/Flash Write Operation Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 3\nBCLIE: Bus Collision Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 2\nHLVDIE: High/Low-Voltage Detect Interrupt Enable bit\n1 = Enabled\n0 =  Disabled\nbit 1\nTMR3IE: TMR3 Overflow Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 0\nCCP2IE: CCP2 Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "9.4 IPR Registers\nThe IPR registers contain the individual priority bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Priority registers (IPR1 and IPR2). Using the priority bits requires that the Interrupt Priority Enable (IPEN) bit be set.",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nPSPIP (1), R/W-1 = ADIP. PSPIP (1), R/W-1 = RCIP. PSPIP (1), R/W-1 = TXIP. PSPIP (1), R/W-1 = SSPIP. PSPIP (1), R/W-1 = CCP1IP. PSPIP (1), R/W-1 = TMR2IP. PSPIP (1), R/W-1 = TMR1IP. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPSPIP: Parallel Client Port Read/Write Interrupt Priority bit (1)\n1 = High priority\n0 = Low priority\nbit 6\nADIP: A/D Converter Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5\nRCIP: EUSART Receive Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 4\nTXIP: EUSART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nSSPIP:\nHost Synchronous Serial Port Interrupt Priority bit\n1 = High priority",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\n0 = Low priority",
    "bit 2\nCCP1IP: CCP1 Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR2IP: TMR2 to PR2 Match Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nTMR1IP: TMR1 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nOSCFIP, R/W-1 = CMIP. OSCFIP, U-0 = -. OSCFIP, R/W-1 = EEIP. OSCFIP, R/W-1 = BCLIP. OSCFIP, R/W-1 = HLVDIP. OSCFIP, R/W-1 = TMR3IP. OSCFIP, R/W-1 = CCP2IP. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nOSCFIP: Oscillator Fail Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nCMIP: Comparator Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5 Unimplemented: Read as ' 0 '\nbit 4\nEEIP: Data EEPROM/Flash Write Operation Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nBCLIP: Bus Collision Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 2",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nHLVDIP: High/Low-Voltage Detect Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR3IP: TMR3 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nCCP2IP: CCP2 Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "9.5 RCON Register\nThe RCON register contains flag bits which are used to determine the cause of the last Reset or wake-up from Idle or Sleep modes. RCON also contains the IPEN bit which enables interrupt priorities.\nThe operation of the SBOREN bit and the Reset flag bits is discussed in more detail in Section 4.1 'RCON Register' .",
    "REGISTER 9-10: RCON: RESET CONTROL REGISTER\nIPEN, R/W-1 (1) = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 (1) = POR. IPEN, R/W-0 = BOR. bit 7, R/W-1 (1) = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 (1) = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-10: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)\nbit 6\nSBOREN: Software BOR Enable bit (1)\nFor details of bit operation, see Register 4-1 .\nbit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI:\nRESET Instruction Flag bit\nFor details of bit operation, see Register 4-1 .\nbit 3\nTO: Watchdog Timer Time-out Flag bit\nFor details of bit operation, see Register 4-1 .\nbit 2\nPD: Power-Down Detection Flag bit\nFor details of bit operation, see Register 4-1 .\nbit 1\nPOR: Power-on Reset Status bit\n(1)\nFor details of bit operation, see Register 4-1 .\nbit 0\nBOR: Brown-out Reset Status bit\nFor details of bit operation, see Register 4-1 .\nNote 1: Actual Reset values are determined by device configuration and the nature of the device Reset. See Register 4-1 for additional information.",
    "9.6 INTx Pin Interrupts\nExternal  interrupts  on  the  RB0/INT0,  RB1/INT1  and RB2/INT2 pins are edge-triggered. If the corresponding INTEDGx bit in the INTCON2 register is set (= 1 ), the interrupt is triggered by a rising edge; if the bit is clear, the trigger is on the falling edge. When a valid edge appears on the RBx/INTx pin, the corresponding flag bit,  INTxIF,  is  set.  This  interrupt  can  be  disabled  by clearing the corresponding enable bit, INTxIE. Flag bit, INTxIF,  must  be  cleared  in  software  in  the  Interrupt Service Routine before re-enabling the interrupt.\nAll external interrupts (INT0, INT1 and INT2) can wakeup the processor from Idle or Sleep modes if bit INTxIE was set prior to going into those modes. If the Global Interrupt  Enable  bit,  GIE,  is  set,  the  processor  will branch to the interrupt vector following wake-up.",
    "9.6 INTx Pin Interrupts\nInterrupt priority for INT1 and INT2 is determined by the value  contained  in  the  Interrupt  Priority  bits,  INT1IP (INTCON3<6>)  and  INT2IP  (INTCON3<7>).  There is no  priority  bit  associated  with  INT0.  It  is  always  a high-priority interrupt source.",
    "9.7 TMR0 Interrupt\nIn 8-bit mode (which is the default), an overflow in the TMR0 register (FFh \uf0ae 00h) will set flag bit, TMR0IF. In 16-bit mode, an overflow in the TMR0H:TMR0L register pair (FFFFh \uf0ae\uf020 0000h) will set TMR0IF. The interrupt can be enabled/disabled by setting/clearing enable bit, TMR0IE (INTCON<5>). Interrupt priority for Timer0 is determined  by  the  value  contained  in  the  interrupt priority bit, TMR0IP (INTCON2<2>). See Section 11.0 'Timer0  Module' for  further  details  on  the  Timer0 module.",
    "9.8 PORTB Interrupt-on-Change\nAn input change on PORTB<7:4> sets flag bit, RBIF (INTCON<0>). The interrupt can be enabled/disabled by  setting/clearing  enable  bit,  RBIE  (INTCON<3>). Interrupt  priority  for  PORTB  interrupt-on-change  is determined  by  the  value  contained  in  the  interrupt priority bit, RBIP (INTCON2<0>).",
    "9.9 Context Saving During Interrupts\nDuring interrupts, the return PC address is saved on the stack. Additionally, the WREG, STATUS and BSR registers are saved on the Fast Return Stack. If a fast return  from  interrupt  is  not  used  (see Section 5.3 'Data Memory Organization' ), the user may need to save the WREG, STATUS and BSR registers on entry to  the  Interrupt  Service  Routine.  Depending  on  the user's application, other registers may also need to be saved. Example 9-1 saves  and  restores  the  WREG, STATUS and BSR registers during an Interrupt Service Routine.",
    "EXAMPLE 9-1: SAVING STATUS, WREG AND BSR REGISTERS IN RAM\nMOVWF MOVFF MOVFF ; ;, 1 = W_TEMP STATUS, STATUS_TEMP BSR, BSR_TEMP. MOVWF MOVFF MOVFF ; ;, 2 = ; W_TEMP is in virtual bank ; STATUS_TEMP located anywhere ; BSR_TMEP located anywhere. USER ;, 1 = ISR CODE. USER ;, 2 = . MOVFF, 1 = BSR_TEMP, BSR. MOVFF, 2 = ; Restore BSR. MOVF, 1 = W_TEMP, W. MOVF, 2 = ; Restore WREG. MOVFF, 1 = STATUS_TEMP, STATUS. MOVFF, 2 = ; Restore STATUS",
    "10.0 I/O PORTS\nDepending on the device selected and features enabled, there are up to five ports available. Some pins of  the  I/O  ports  are  multiplexed  with  an  alternate function from the peripheral features on the device. In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin.\nEach port has three registers for its operation. These registers are:\n\u00b7 TRIS register (Data Direction register)\n\u00b7 PORT register (reads the levels on the pins of the device)\n\u00b7 LAT register (Data Latch register)\nThe Data Latch (LAT register) is useful for read-modifywrite  operations  on  the  value  that  the  I/O  pins  are driving.\nA  simplified  model  of  a  generic  I/O  port,  without  the interfaces to other peripherals, is shown in Figure 10-1 .",
    "10.1 PORTA, TRISA and LATA Registers\nPORTA is an 8-bit wide, bidirectional port. The corresponding Data Direction register is TRISA. Setting  a TRISA (= 1 )  bit  will  make  the  corresponding  PORTA pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISA (= 0 )  bit will make the corresponding PORTA pin an output (i.e., put the contents of the output latch on the selected pin).\nReading the PORTA register reads the  status  of  the pins, whereas writing to it, will write to the port latch.\nThe Data Latch (LATA) register is also memory mapped. Read-modify-write operations on the LATA register read and write the latched output value for PORTA.",
    "10.1 PORTA, TRISA and LATA Registers\nThe  RA4  pin  is  multiplexed  with  the  Timer0  module clock  input  and  one  of  the  comparator  outputs  to become  the  RA4/T0CKI/C1OUT  pin.  Pins  RA6  and RA7 are multiplexed with the main oscillator pins; they are enabled as oscillator or I/O pins by the selection of the  main  oscillator  in  the  Configuration  register  (see Section 23.1 'Configuration Bits' for details). When they are not used as port pins, RA6 and RA7 and their associated TRIS and LAT bits are read as ' 0 '.\nThe  other  PORTA  pins  are  multiplexed  with  analog inputs, the analog VREF+ and VREF- inputs and the comparator voltage reference output. The operation of pins RA<3:0> and RA5 as A/D Converter inputs is selected by clearing or setting the control bits in the ADCON1 (A/ D Control Register 1) register.",
    "10.1 PORTA, TRISA and LATA Registers\nPins RA0 through RA5 may also be used as comparator inputs or outputs by setting the appropriate bits in the CMCON register. To use RA<3:0> as digital inputs, it is also necessary to turn off the comparators.\nNote:, 1 = On a Power-on Reset, RA5 and RA<3:0> are configured as analog inputs and read as ' 0 '. RA4 is configured as a digital input.\nThe RA4/T0CKI/C1OUT pin is a Schmitt Trigger input. All  other  PORTA  pins  have TTL  input  levels  and  full CMOS output drivers.\nThe TRISA register controls the direction of the PORTA pins, even when they are being used as analog inputs. The user must ensure the bits in the TRISA register are maintained set when using them as analog inputs.",
    "EXAMPLE 10-1: INITIALIZING PORTA\nCLRF, 1 = PORTA. CLRF, 2 = ; Initialize ; clearing ; data. CLRF, 1 = LATA. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVWF MOVWF MOVLW, 1 = 07h ADCON1 07h. MOVLW MOVWF MOVWF MOVWF MOVLW, 2 = ; Configure A/D ; for digital inputs ; Configure comparators. , 1 = CMCON. , 2 = . , 1 = . , 2 = ; for digital input ; Value used to ; initialize data. MOVWF, 1 = . MOVWF, 2 = ; direction ; Set RA<3:0> as inputs ; RA<5:4> as outputs. , 1 = TRISA. , 2 = ",
    "TABLE 10-1: PORTA I/O SUMMARY\nRA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 0. RA0/AN0, I/O = O. RA0/AN0, I/O Type = DIG. RA0/AN0, Description = LATA<0> data output; not affected by analog input.. RA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = TTL. RA0/AN0, Description = PORTA<0> data input; disabled when analog input enabled.. RA0/AN0, Function = AN0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = ANA. RA0/AN0, Description = A/D input channel 0 and comparator C1- input. Default input configuration on POR; does not affect digital output.. RA1/AN1, Function = RA1. RA1/AN1, TRIS",
    "TABLE 10-1: PORTA I/O SUMMARY\nSetting = 0. RA1/AN1, I/O = O. RA1/AN1, I/O Type = DIG. RA1/AN1, Description = LATA<1> data output; not affected by analog input.. RA1/AN1, Function = RA1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = TTL. RA1/AN1, Description = PORTA<1> data input; disabled when analog input enabled.. RA1/AN1, Function = AN1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = ANA. RA1/AN1, Description = A/D input channel 1 and comparator C2- input. Default input configuration on POR; does not affect digital output.. RA2/AN2/ VREF-/CV REF, Function = RA2. RA2/AN2/ VREF-/CV REF, TRIS Setting = 0.",
    "TABLE 10-1: PORTA I/O SUMMARY\nRA2/AN2/ VREF-/CV REF, I/O = O. RA2/AN2/ VREF-/CV REF, I/O Type = DIG. RA2/AN2/ VREF-/CV REF, Description = LATA<2> data output; not affected by analog input. Disabled when CVREF output enabled.. RA2/AN2/ VREF-/CV REF, Function = RA2. RA2/AN2/ VREF-/CV REF, TRIS Setting = 1. RA2/AN2/ VREF-/CV REF, I/O = I. RA2/AN2/ VREF-/CV REF, I/O Type = TTL. RA2/AN2/ VREF-/CV REF, Description = PORTA<2> data input. Disabled when analog functions enabled; disabled when CVREF output enabled.. RA2/AN2/ VREF-/CV REF, Function = AN2. RA2/AN2/ VREF-/CV REF, TRIS Setting = 1. RA2/AN2/ VREF-/CV REF, I/O",
    "TABLE 10-1: PORTA I/O SUMMARY\n= I. RA2/AN2/ VREF-/CV REF, I/O Type = ANA. RA2/AN2/ VREF-/CV REF, Description = A/D input channel 2 and comparator C2+ input. Default input configuration on POR; not affected by analog output.. RA2/AN2/ VREF-/CV REF, Function = VREF-. RA2/AN2/ VREF-/CV REF, TRIS Setting = 1. RA2/AN2/ VREF-/CV REF, I/O = I. RA2/AN2/ VREF-/CV REF, I/O Type = ANA. RA2/AN2/ VREF-/CV REF, Description = A/D and comparator voltage reference low input.. RA2/AN2/ VREF-/CV REF, Function = CVREF. RA2/AN2/ VREF-/CV REF, TRIS Setting = x. RA2/AN2/ VREF-/CV REF, I/O = O. RA2/AN2/ VREF-/CV REF, I/O Type =",
    "TABLE 10-1: PORTA I/O SUMMARY\nANA. RA2/AN2/ VREF-/CV REF, Description = Comparator voltage reference output. Enabling this feature disables digital I/O.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 0. RA3/AN3/VREF+, I/O = O. RA3/AN3/VREF+, I/O Type = DIG. RA3/AN3/VREF+, Description = LATA<3> data output; not affected by analog input.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = TTL. RA3/AN3/VREF+, Description = PORTA<3> data input; disabled when analog input enabled.. RA3/AN3/VREF+, Function = AN3. RA3/AN3/VREF+,",
    "TABLE 10-1: PORTA I/O SUMMARY\nTRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D input channel 3 and comparator C1+ input. Default input configuration on POR.. RA3/AN3/VREF+, Function = VREF+. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D and comparator voltage reference high input.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 0. RA4/T0CKI/C1OUT, I/O = O. RA4/T0CKI/C1OUT, I/O Type = DIG. RA4/T0CKI/C1OUT, Description = LATA<4> data",
    "TABLE 10-1: PORTA I/O SUMMARY\noutput.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = PORTA<4> data input; default configuration on POR.. RA4/T0CKI/C1OUT, Function = T0CKI. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = Timer0 clock input.. RA4/T0CKI/C1OUT, Function = C1OUT. RA4/T0CKI/C1OUT, TRIS Setting = 0. RA4/T0CKI/C1OUT, I/O = O. RA4/T0CKI/C1OUT, I/O Type = DIG.",
    "TABLE 10-1: PORTA I/O SUMMARY\nRA4/T0CKI/C1OUT, Description = Comparator 1 output; takes priority over port data.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description = LATA<5> data output; not affected by analog input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/",
    "TABLE 10-1: PORTA I/O SUMMARY\nHLVDIN/C2OUT, Description = PORTA<5> data input; disabled when analog input enabled.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = AN4. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = A/D input channel 4. Default configuration on POR.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = SS. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/",
    "TABLE 10-1: PORTA I/O SUMMARY\nHLVDIN/C2OUT, Description = Client select input for MSSP module.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = HLVDIN. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = High/Low-Voltage Detect external trip point input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = C2OUT. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description =",
    "TABLE 10-1: PORTA I/O SUMMARY\nComparator 2 output; takes priority over port data.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 0. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = LATA<6> data output. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 1. OSC2/CLKO/RA6, I/O = I. OSC2/CLKO/RA6, I/O Type = TTL. OSC2/CLKO/RA6, Description = PORTA<6> data input. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = OSC2. OSC2/CLKO/RA6, TRIS Setting = x.",
    "TABLE 10-1: PORTA I/O SUMMARY\nOSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = ANA. OSC2/CLKO/RA6, Description = Main oscillator feedback output connection (XT, HS and LP modes).. OSC2/CLKO/RA6, Function = CLKO. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = System cycle clock output (F OSC/4) in RC, INTIO1 and EC Oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 0. OSC1/CLKI/RA7, I/O = O. OSC1/CLKI/RA7, I/O Type = DIG. OSC1/CLKI/RA7, Description =",
    "TABLE 10-1: PORTA I/O SUMMARY\nLATA<7> data output. Disabled in external oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 1. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = TTL. OSC1/CLKI/RA7, Description = PORTA<7> data input. Disabled in external oscillator modes.. OSC1/CLKI/RA7, Function = OSC1. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main oscillator input connection.. OSC1/CLKI/RA7, Function = CLKI. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O =",
    "TABLE 10-1: PORTA I/O SUMMARY\nI. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main clock input connection.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output;\n- x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 48. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 48.",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nTRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Reset Values on page = 48. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 47. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 =",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nC1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 47. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTA.\nNote 1: RA<7:6> and their associated latch and data direction bits are enabled as I/O pins based on oscillator configuration; otherwise, they are read as ' 0 '.",
    "10.2 PORTB, TRISB and LATB Registers\nPORTB is an 8-bit wide, bidirectional port. The corresponding Data Direction register is TRISB. Setting  a TRISB (= 1 )  bit  will  make  the  corresponding PORTB pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISB (= 0 )  bit will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  (LATB)  register is also memory mapped.  Read-modify-write  operations  on  the  LATB register  read  and  write  the  latched  output  value  for PORTB.",
    "EXAMPLE 10-2: INITIALIZING PORTB\nCLRF, 1 = PORTB. CLRF, 2 = ; Initialize PORTB by ; clearing output ; data latches. CLRF, 1 = LATB. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0Fh. MOVLW, 2 = ; Set RB<4:0> as. MOVLW, 1 = 0CFh. MOVLW, 2 = ; PBADEN is set) ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISB. MOVWF, 2 = ; Set RB<3:0> as inputs ; RB<5:4> as outputs ; RB<7:6> as inputs\nEach of the PORTB pins has a weak internal pull-up. A single control bit  can  turn  on  all  the  pull-ups. This  is performed by clearing bit, RBPU (INTCON2<7>). The weak pull-up is automatically turned off when the port pin  is configured  as  an  output.  The  pull-ups  are disabled on a Power-on Reset.\nNote:",
    "EXAMPLE 10-2: INITIALIZING PORTB\nOn  a Power-on Reset, RB<4:0> are configured as analog inputs by default and read  as  ' 0 ';  RB<7:5>  are  configured  as digital inputs.\nBy  programming  the  Configuration  bit, PBADEN,  RB<4:0>  will  alternatively  be configured as digital inputs on POR.\nFour of the PORTB pins (RB<7:4>) have an interrupton-change feature. Only pins configured as inputs can cause  this  interrupt  to  occur  (i.e.,  any  RB<7:4>  pin configured as an output is excluded from the interrupton-change comparison). The input pins (of RB<7:4>) are  compared  with  the  old  value  latched  on  the  last read of PORTB. The 'mismatch' outputs of RB<7:4> are  ORed together to generate the RB Port Change Interrupt with Flag bit, RBIF (INTCON<0>).\nThis  interrupt  can  wake  the  device  from  the  Sleep mode,  or  any  of  the  Idle  modes.  The  user,  in  the Interrupt Service Routine, can clear the interrupt in the following manner:",
    "EXAMPLE 10-2: INITIALIZING PORTB\na) Any  read  or  write  of  PORTB  (except  with  the MOVFF (ANY), PORTB instruction).\nb) Clear flag bit, RBIF.\nA mismatch condition will continue to set flag bit, RBIF. Reading PORTB will end the mismatch condition and allow flag bit, RBIF, to be cleared.\nThe interrupt-on-change  feature  is  recommended  for wake-up on key depression operation and operations where PORTB is only used for the interrupt-on-change feature. Polling of PORTB is not recommended while using the interrupt-on-change feature.\nRB3  can  be  configured  by  the  Configuration  bit, CCP2MX, as the alternate peripheral pin for the CCP2 module (CCP2MX = 0 ).",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 0. RB0/INT0/FLT0/ AN12, I/O = O. RB0/INT0/FLT0/ AN12, I/O Type = DIG. RB0/INT0/FLT0/ AN12, Description = LATB<0> data output; not affected by analog input.. RB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = TTL. RB0/INT0/FLT0/ AN12, Description = PORTB<0> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB0/INT0/FLT0/ AN12, Function =",
    "TABLE 10-3: PORTB I/O SUMMARY\nINT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = External interrupt 0 input.. RB0/INT0/FLT0/ AN12, Function = FLT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = Enhanced PWM Fault input (ECCP1 module); enabled in software.. RB0/INT0/FLT0/ AN12, Function = AN12. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O",
    "TABLE 10-3: PORTB I/O SUMMARY\n= I. RB0/INT0/FLT0/ AN12, I/O Type = ANA. RB0/INT0/FLT0/ AN12, Description = A/D input channel 12. (1). RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 0. RB1/INT1/AN10, I/O = O. RB1/INT1/AN10, I/O Type = DIG. RB1/INT1/AN10, Description = LATB<1> data output; not affected by analog input.. RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = TTL. RB1/INT1/AN10, Description = PORTB<1> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1).",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB1/INT1/AN10, Function = INT1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ST. RB1/INT1/AN10, Description = External Interrupt 1 input.. RB1/INT1/AN10, Function = AN10. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ANA. RB1/INT1/AN10, Description = A/D input channel 10. (1). RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 0. RB2/INT2/AN8, I/O = O. RB2/INT2/AN8, I/O Type = DIG. RB2/INT2/AN8, Description = LATB<2> data output; not affected by analog",
    "TABLE 10-3: PORTB I/O SUMMARY\ninput.. RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = TTL. RB2/INT2/AN8, Description = PORTB<2> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB2/INT2/AN8, Function = INT2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ST. RB2/INT2/AN8, Description = External interrupt 2 input.. RB2/INT2/AN8, Function = AN8. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ANA.",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB2/INT2/AN8, Description = A/D input channel 8. (1). RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = LATB<3> data output; not affected by analog input.. RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = TTL. RB3/AN9/CCP2, Description = PORTB<3> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB3/AN9/CCP2, Function = AN9. RB3/AN9/CCP2,",
    "TABLE 10-3: PORTB I/O SUMMARY\nTRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ANA. RB3/AN9/CCP2, Description = A/D input channel 9. (1). RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = CCP2 compare and PWM output.. RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ST. RB3/AN9/CCP2, Description = CCP2 capture input.",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 0. RB4/KBI0/AN11, I/O = O. RB4/KBI0/AN11, I/O Type = DIG. RB4/KBI0/AN11, Description = LATB<4> data output; not affected by analog input.. RB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = PORTB<4> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB4/KBI0/AN11, Function = KBI0. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O =",
    "TABLE 10-3: PORTB I/O SUMMARY\nI. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = Interrupt-on-pin change.. RB4/KBI0/AN11, Function = AN11. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = ANA. RB4/KBI0/AN11, Description = A/D input channel 11. (1). RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 0. RB5/KBI1/PGM, I/O = O. RB5/KBI1/PGM, I/O Type = DIG. RB5/KBI1/PGM, Description = LATB<5> data output.. RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 1.",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = PORTB<5> data input; weak pull-up when RBPU bit is cleared.. RB5/KBI1/PGM, Function = KBI1. RB5/KBI1/PGM, TRIS Setting = 1. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = Interrupt-on-pin change.. RB5/KBI1/PGM, Function = PGM. RB5/KBI1/PGM, TRIS Setting = x. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = ST. RB5/KBI1/PGM, Description = Single-Supply In-Circuit Serial Programming\u2122 mode entry (ICSP\u2122).",
    "TABLE 10-3: PORTB I/O SUMMARY\nEnabled by LVP Configuration bit; all other pin functions disabled.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 0. RB6/KBI2/PGC, I/O = O. RB6/KBI2/PGC, I/O Type = DIG. RB6/KBI2/PGC, Description = LATB<6> data output.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = PORTB<6> data input; weak pull-up when RBPU bit is cleared.. RB6/KBI2/PGC, Function = KBI2. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O =",
    "TABLE 10-3: PORTB I/O SUMMARY\nI. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = Interrupt-on-pin change.. RB6/KBI2/PGC, Function = PGC. RB6/KBI2/PGC, TRIS Setting = x. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = ST. RB6/KBI2/PGC, Description = Serial execution (ICSP) clock input for ICSP and ICD operation. (3). RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS Setting = 0. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = LATB<7> data output.. RB7/KBI3/PGD, Function = RB7.",
    "TABLE 10-3: PORTB I/O SUMMARY\nRB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = PORTB<7> data input; weak pull-up when RBPU bit is cleared.. RB7/KBI3/PGD, Function = KBI3. RB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = Interrupt-on-pin change.. RB7/KBI3/PGD, Function = PGD. RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = Serial",
    "TABLE 10-3: PORTB I/O SUMMARY\nexecution data output for ICSP and ICD operation. (3). RB7/KBI3/PGD, Function = . RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = ST. RB7/KBI3/PGD, Description = Serial execution data input for ICSP and ICD operation. (3)\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output;\nx = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: Configuration on POR is determined by the PBADEN Configuration bit. Pins are configured as analog inputs by default\nwhen PBADEN is set and digital inputs when PBADEN is cleared.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is ' 0 '. Default assignment is RC1.\n3: All other pin functions are disabled when ICSP or ICD are enabled.",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 48. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nWrite to Data Latch). LATB, Reset Values on page = 48. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on page = 48. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0.",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nINTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = -. INTCON2, Bit 0 = RBIP. INTCON2, Reset Values on page = 45. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Reset Values on page = 45. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 =",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTB.",
    "10.3 PORTC, TRISC and LATC Registers\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nPORTC is an 8-bit wide, bidirectional port. The corresponding Data Direction register is TRISC. Setting a TRISC (= 1 )  bit  will  make the corresponding PORTC pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISC (= 0 )  bit will make the corresponding PORTC pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  (LATC)  register is also memory mapped.  Read-modify-write  operations  on  the  LATC register  read  and  write  the  latched  output  value  for PORTC.\nPORTC is multiplexed with several peripheral functions ( Table 10-5 ). The pins have Schmitt Trigger input buffers. RC1 is normally configured by Configuration bit, CCP2MX, as the default peripheral pin of the  CCP2 module (default/erased state, CCP2MX = 1 ).",
    "10.3 PORTC, TRISC and LATC Registers\nWhen enabling peripheral functions, care needs to be taken in defining TRIS bits for each PORTC pin. Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. The user needs to refer to the corresponding peripheral section for additional information.\nThe  contents  of  the  TRISC  register  are  affected  by peripheral  overrides.  Reading  TRISC  always  returns the current contents, even though a peripheral device may be overriding one or more of the pins.",
    "EXAMPLE 10-3: INITIALIZING PORTC\nCLRF, 1 = PORTC. CLRF, 2 = ; Initialize PORTC by ; clearing output ; data latches. CLRF, 1 = LATC. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RC<3:0> as inputs ; RC<5:4> as outputs ; RC<7:6> as inputs",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC0/T1OSO/ T13CKI, Function = RC0. RC0/T1OSO/ T13CKI, TRIS Setting = 0. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O Type = DIG. RC0/T1OSO/ T13CKI, Description = LATC<0> data output.. RC0/T1OSO/ T13CKI, Function = RC0. RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = PORTC<0> data input.. RC0/T1OSO/ T13CKI, Function = T1OSO. RC0/T1OSO/ T13CKI, TRIS Setting = x. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O",
    "TABLE 10-5: PORTC I/O SUMMARY\nType = ANA. RC0/T1OSO/ T13CKI, Description = Timer1 oscillator output; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC0/T1OSO/ T13CKI, Function = T13CKI. RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = Timer1/Timer3 counter input.. RC1/T1OSI/CCP2, Function = RC1. RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O. RC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = LATC<1> data output.. RC1/T1OSI/CCP2, Function = RC1.",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = PORTC<1> data input.. RC1/T1OSI/CCP2, Function = T1OSI. RC1/T1OSI/CCP2, TRIS Setting = x. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ANA. RC1/T1OSI/CCP2, Description = Timer1 oscillator input; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC1/T1OSI/CCP2, Function = CCP2 (1). RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O.",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = CCP2 compare and PWM output; takes priority over port data.. RC1/T1OSI/CCP2, Function = CCP2 (1). RC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = CCP2 capture input.. RC2/CCP1/P1A, Function = RC2. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = LATC<2> data output.. RC2/CCP1/P1A, Function =",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC2. RC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST. RC2/CCP1/P1A, Description = PORTC<2> data input.. RC2/CCP1/P1A, Function = CCP1. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 compare or PWM output; takes priority over port data.. RC2/CCP1/P1A, Function = CCP1. RC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST.",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC2/CCP1/P1A, Description = ECCP1 capture input.. RC2/CCP1/P1A, Function = P1A (2). RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 Enhanced PWM output, channel A. May be configured for tri-state during Enhanced PWM shutdown events. Takes priority over port data.. RC3/SCK/SCL, Function = RC3. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = LATC<3> data output.. RC3/SCK/SCL, Function = RC3. RC3/SCK/SCL, TRIS",
    "TABLE 10-5: PORTC I/O SUMMARY\nSetting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = PORTC<3> data input.. RC3/SCK/SCL, Function = SCK. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = SPI clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = SCK. RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = SPI clock input (MSSP module).. RC3/SCK/SCL, Function = SCL.",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = I 2 C\u2122clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = SCL. RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = I 2 C/SMB. RC3/SCK/SCL, Description = I 2 C clock input (MSSP module); input type depends on module setting.. RC4/SDI/SDA, Function = RC4. RC4/SDI/SDA, TRIS Setting = 0. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description =",
    "TABLE 10-5: PORTC I/O SUMMARY\nLATC<4> data output.. RC4/SDI/SDA, Function = RC4. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = PORTC<4> data input.. RC4/SDI/SDA, Function = SDI. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = SPI data input (MSSP module).. RC4/SDI/SDA, Function = SDA. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = I 2 C",
    "TABLE 10-5: PORTC I/O SUMMARY\ndata output (MSSP module); takes priority over port data.. RC4/SDI/SDA, Function = SDA. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = I 2 C/SMB. RC4/SDI/SDA, Description = I 2 C data input (MSSP module); input type depends on module setting.. RC5/SDO, Function = RC5. RC5/SDO, TRIS Setting = 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = LATC<5> data output.. RC5/SDO, Function = RC5. RC5/SDO, TRIS Setting = 1. RC5/SDO, I/O = I. RC5/SDO, I/O Type = ST. RC5/SDO, Description = PORTC<5> data input..",
    "TABLE 10-5: PORTC I/O SUMMARY\nRC5/SDO, Function = SDO. RC5/SDO, TRIS Setting = 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = SPI data output (MSSP module); takes priority over port data.. RC6/TX/CK, Function = RC6. RC6/TX/CK, TRIS Setting = 0. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = LATC<6> data output.. RC6/TX/CK, Function = RC6. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = PORTC<6> data input.. RC6/TX/CK, Function = TX. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK,",
    "TABLE 10-5: PORTC I/O SUMMARY\nI/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = Asynchronous serial transmit data output (EUSART module); takes priority over port data. User must configure as output.. RC6/TX/CK, Function = CK. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = Synchronous serial clock output (EUSART module); takes priority over port data.. RC6/TX/CK, Function = CK. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = Synchronous serial clock input (EUSART module).",
    "Legend:\nI 2 C/SMB = I 2 C/SMBus input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output;\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set. Alternate assignment is RB3.\n2: Enhanced PWM output is available only on PIC18F4520 devices.",
    "PIC18F2420/2520/4420/4520\nRC7/RX/DT, Function = RC7. RC7/RX/DT, TRIS Setting = 0. RC7/RX/DT, I/O = O. RC7/RX/DT, I/O Type = DIG. RC7/RX/DT, Description = LATC<7> data output.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = PORTC<7> data input.. RC7/RX/DT, Function = RX. RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Asynchronous serial receive data input (EUSART module).. RC7/RX/DT, Function =",
    "PIC18F2420/2520/4420/4520\nDT. RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = O. RC7/RX/DT, I/O Type = DIG. RC7/RX/DT, Description = Synchronous serial data output (EUSART module); takes priority over port data.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Synchronous serial data input (EUSART module). User must configure as an input.",
    "Legend:\nI 2 C/SMB = I 2 C/SMBus input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output;\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set. Alternate assignment is RB3.\n2: Enhanced PWM output is available only on PIC18F4520 devices.",
    "TABLE 10-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nPORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Reset Values on page = 48. LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch).",
    "TABLE 10-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nLATC, Reset Values on page = 48. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on page = 48",
    "10.4 PORTD, TRISD and LATD Registers\nNote:, 1 = PORTD is only available on 40/44-pin devices.\nPORTD is an 8-bit wide, bidirectional port. The corresponding Data Direction register is TRISD. Setting a TRISD (= 1 )  bit  will  make the corresponding PORTD pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISD (= 0 )  bit will make the corresponding PORTD pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  (LATD)  register  is also memory mapped.  Read-modify-write  operations  on  the  LATD register  read  and  write  the  latched  output  value  for PORTD.\nAll pins on PORTD are implemented with Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.",
    "10.4 PORTD, TRISD and LATD Registers\nThree of the PORTD pins are multiplexed with outputs P1B, P1C and P1D of the Enhanced CCP module. The operation  of  these  additional  PWM  output  pins  is covered in greater detail in Section 16.0 'Enhanced Capture/Compare/PWM (ECCP) Module' .\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nPORTD can also be configured as an 8-bit wide microprocessor port (Parallel Client Port) by setting control bit,  PSPMODE  (TRISE<4>).  In  this  mode,  the  input buffers  are  TTL.  See Section 10.6  'Parallel  Client Port' for  additional information on the Parallel Client Port (PSP).\nNote:\nWhen the enhanced PWM mode is used with either dual or quad outputs, the PSP functions of PORTD  are  automatically disabled.",
    "EXAMPLE 10-4: INITIALIZING PORTD\nCLRF, 1 = PORTD. CLRF, 2 = ; Initialize PORTD by ; clearing output ; data latches. CLRF, 1 = LATD. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISD. MOVWF, 2 = ; Set RD<3:0> as inputs ; RD<5:4> as outputs ; RD<7:6> as inputs",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD0/PSP0, Function = RD0. RD0/PSP0, TRIS Setting = 0. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = LATD<0> data output.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = 1. RD0/PSP0, I/O = I. RD0/PSP0, I/O Type = ST. RD0/PSP0, Description = PORTD<0> data input.. RD0/PSP0, Function = PSP0. RD0/PSP0, TRIS Setting = x. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = PSP read data output (LATD<0>); takes priority over port data.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = x.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD0/PSP0, I/O = I. RD0/PSP0, I/O Type = TTL. RD0/PSP0, Description = PSP write data input.. RD1/PSP1, Function = RD1. RD1/PSP1, TRIS Setting = 0. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description = LATD<1> data output.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = 1. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = ST. RD1/PSP1, Description = PORTD<1> data input.. RD1/PSP1, Function = PSP1. RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description =",
    "TABLE 10-7: PORTD I/O SUMMARY\nPSP read data output (LATD<1>); takes priority over port data.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = TTL. RD1/PSP1, Description = PSP write data input.. RD2/PSP2, Function = RD2. RD2/PSP2, TRIS Setting = 0. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = LATD<2> data output.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = 1. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = ST. RD2/PSP2, Description = PORTD<2> data input.. RD2/PSP2, Function = PSP2.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = PSP read data output (LATD<2>); takes priority over port data.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = TTL. RD2/PSP2, Description = PSP write data input.. RD3/PSP3, Function = RD3. RD3/PSP3, TRIS Setting = 0. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = LATD<3> data output.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = 1. RD3/PSP3, I/O = I.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD3/PSP3, I/O Type = ST. RD3/PSP3, Description = PORTD<3> data input.. RD3/PSP3, Function = PSP3. RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = PSP read data output (LATD<3>); takes priority over port data.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = I. RD3/PSP3, I/O Type = TTL. RD3/PSP3, Description = PSP write data input.. RD4/PSP4, Function = RD4. RD4/PSP4, TRIS Setting = 0. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description =",
    "TABLE 10-7: PORTD I/O SUMMARY\nLATD<4> data output.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = 1. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = ST. RD4/PSP4, Description = PORTD<4> data input.. RD4/PSP4, Function = PSP4. RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description = PSP read data output (LATD<4>); takes priority over port data.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = TTL. RD4/PSP4, Description = PSP write data input.. RD5/PSP5/P1B, Function = RD5.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = LATD<5> data output.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = 1. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = ST. RD5/PSP5/P1B, Description = PORTD<5> data input.. RD5/PSP5/P1B, Function = PSP5. RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description =",
    "TABLE 10-7: PORTD I/O SUMMARY\nPSP read data output (LATD<5>); takes priority over port data.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = TTL. RD5/PSP5/P1B, Description = PSP write data input.. RD5/PSP5/P1B, Function = P1B. RD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = ECCP1 Enhanced PWMoutput, channel B; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD6/PSP6/P1C, Function = RD6.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = LATD<6> data output.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = 1. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = ST. RD6/PSP6/P1C, Description = PORTD<6> data input.. RD6/PSP6/P1C, Function = PSP6. RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description =",
    "TABLE 10-7: PORTD I/O SUMMARY\nPSP read data output (LATD<6>); takes priority over port data.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = TTL. RD6/PSP6/P1C, Description = PSP write data input.. RD6/PSP6/P1C, Function = P1C. RD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = ECCP1 Enhanced PWMoutput, channel C; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD7/PSP7/P1D, Function = RD7.",
    "TABLE 10-7: PORTD I/O SUMMARY\nRD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = LATD<7> data output.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = 1. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = ST. RD7/PSP7/P1D, Description = PORTD<7> data input.. RD7/PSP7/P1D, Function = PSP7. RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description =",
    "TABLE 10-7: PORTD I/O SUMMARY\nPSP read data output (LATD<7>); takes priority over port data.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = TTL. RD7/PSP7/P1D, Description = PSP write data input.. RD7/PSP7/P1D, Function = P1D. RD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = ECCP1 Enhanced PWMoutput, channel D; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.",
    "TABLE 10-7: PORTD I/O SUMMARY\nLegend: DIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 48. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nWrite to Data Latch). LATD, Reset Values on page = 48. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Reset Values on page = 48. TRISE (1), Bit 7 = IBF. TRISE (1), Bit 6 = OBF. TRISE (1), Bit 5 = IBOV. TRISE (1), Bit 4 = PSPMODE. TRISE (1), Bit 3 = -. TRISE (1), Bit 2 = TRISE2. TRISE (1), Bit 1 = TRISE1. TRISE (1), Bit 0 = TRISE0. TRISE (1), Reset Values on page = 48. CCP1CON, Bit 7 =",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nP1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTD.\nNote 1: These registers and/or bits are unimplemented on 28-oin devices.",
    "10.5 PORTE, TRISE and LATE Registers\nDepending on the particular PIC18F2420/2520/4420/ 4520 device selected, PORTE is implemented in two different ways.\nFor  40/44-pin  devices,  PORTE  is  a  4-bit  wide  port. Three pins (RE0/RD/AN5, RE1/WR/AN6 and RE2/CS/ AN7) are individually configurable as inputs or outputs. These pins have Schmitt Trigger input buffers. When selected as an analog input, these pins will read as ' 0 's.\nThe fourth pin of PORTE (MCLR/VPP/RE3) is an input only pin. Its operation is controlled by the MCLRE Configuration bit. When selected as a port pin (MCLRE = 0 ), it functions as a digital input only pin; as such, it does not have  TRIS  or  LAT  bits  associated  with  its  operation. Otherwise,  it  functions  as  the  device's  Master  Clear input. In either configuration, RE3 also functions as the programming voltage input during programming.",
    "10.5 PORTE, TRISE and LATE Registers\nThe corresponding  Data  Direction  register  is TRISE. Setting a TRISE (= 1 ) bit will make the corresponding PORTE pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISE (= 0 ) bit will make the corresponding PORTE pin an output  (i.e.,  put  the  contents  of  the  output  latch  on  the selected pin).\nTRISE controls the direction of the RE pins, even when they are being used as analog inputs. The user must make sure to keep the pins configured as inputs when using them as analog inputs.\nNote: On  a Power-on Reset, RE<2:0> are configured as analog inputs.\nThe upper four bits of the TRISE register also control the operation of the Parallel Client Port. Their operation is explained in Register 10-1 .\nThe  Data  Latch  (LATE)  register is also memory mapped.  Read-modify-write  operations  on  the  LATE register,  read  and  write  the  latched  output  value  for PORTE.\nNote:, 1 = On a Power-on Reset, RE3 is enabled as a digital input only if Master Clear functionality is disabled.",
    "EXAMPLE 10-5: INITIALIZING PORTE\nCLRF, 1 = PORTE. CLRF, 2 = ; Initialize PORTE by ; clearing output ; data latches. CLRF, 1 = LATE. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVLW, 1 = 0Ah ADCON1 03h. MOVLW MOVWF MOVLW, 2 = ; Configure A/D ; for digital inputs ; Value used to ; initialize data. MOVWF, 1 = TRISE. MOVWF, 2 = ; Set RE<0> as inputs ; RE<1> as outputs ; RE<2> as inputs",
    "10.5.1 PORTE IN 28-PIN DEVICES\nFor  28-pin  devices,  PORTE  is  only  available  when Master Clear functionality is disabled (MCLRE = 0 ). In these cases, PORTE is a single bit, input only port comprised  of  RE3  only.  The  pin  operates  as  previously described.",
    "TRISE REGISTER (40/44-PIN DEVICES ONLY)\nIBF, R-0 = OBF. IBF, R/W-0 = IBOV. IBF, R/W-0 = PSPMODE. IBF, U-0 = -. IBF, R/W-1 = TRISE2. IBF, R/W-1 = TRISE1. IBF, R/W-1 = TRISE0. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "TRISE REGISTER (40/44-PIN DEVICES ONLY)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IBF: Input Buffer Full Status bit\n1 = A word has been received and waiting to be read by the CPU\n0 = No word has been received",
    "bit 6\nOBF: Output Buffer Full Status bit\n1 = The output buffer still holds a previously written word\n0 = The output buffer has been read",
    "bit 5 IBOV: Input Buffer Overflow Detect bit (in Microprocessor mode)\n1 = A write occurred when a previously input word has not been read (must be cleared in software)\n0 = No overflow occurred",
    "bit 4\nPSPMODE: Parallel Client Port Mode Select bit\n1 = Parallel Client Port mode\n0 = General purpose I/O mode",
    "bit 3 Unimplemented: Read as ' 0 '\nbit 2\nTRISE2: RE2 Direction Control bit\n1 = Input\n0 = Output\nbit 1\nTRISE1: RE1 Direction Control bit\n1 = Input\n0 = Output\nbit 0\nTRISE0: RE0 Direction Control bit\n1 = Input\n- 0 = Output",
    "TABLE 10-9: PORTE I/O SUMMARY\nRE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 0. RE0/RD/AN5, I/O = O. RE0/RD/AN5, I/O Type = DIG. RE0/RD/AN5, Description = LATE<0> data output; not affected by analog input.. RE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ST. RE0/RD/AN5, Description = PORTE<0> data input; disabled when analog input enabled.. RE0/RD/AN5, Function = RD. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = TTL. RE0/RD/AN5, Description = PSP read enable input (PSP enabled).. RE0/RD/AN5,",
    "TABLE 10-9: PORTE I/O SUMMARY\nFunction = AN5. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ANA. RE0/RD/AN5, Description = A/D input channel 5; default input configuration on POR.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 0. RE1/WR/AN6, I/O = O. RE1/WR/AN6, I/O Type = DIG. RE1/WR/AN6, Description = LATE<1> data output; not affected by analog input.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ST. RE1/WR/AN6, Description = PORTE<1> data input; disabled when analog input enabled.. RE1/WR/AN6, Function = WR.",
    "TABLE 10-9: PORTE I/O SUMMARY\nRE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = TTL. RE1/WR/AN6, Description = PSP write enable input (PSP enabled).. RE1/WR/AN6, Function = AN6. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ANA. RE1/WR/AN6, Description = A/D input channel 6; default input configuration on POR.. RE2/CS/AN7, Function = RE2. RE2/CS/AN7, TRIS Setting = 0. RE2/CS/AN7, I/O = O. RE2/CS/AN7, I/O Type = DIG. RE2/CS/AN7, Description = LATE<2> data output; not affected by analog input.. RE2/CS/AN7, Function = RE2.",
    "TABLE 10-9: PORTE I/O SUMMARY\nRE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ST. RE2/CS/AN7, Description = PORTE<2> data input; disabled when analog input enabled.. RE2/CS/AN7, Function = CS. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = TTL. RE2/CS/AN7, Description = PSP write enable input (PSP enabled).. RE2/CS/AN7, Function = AN7. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ANA. RE2/CS/AN7, Description = A/D input channel 7; default input configuration on POR.. MCLR/VPP/RE3 (1), Function = MCLR.",
    "TABLE 10-9: PORTE I/O SUMMARY\nMCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = External Master Clear input; enabled when MCLRE Configuration bit is set.. MCLR/VPP/RE3 (1), Function = VPP. MCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ANA. MCLR/VPP/RE3 (1), Description = High-voltage detection; used for ICSP\u2122 mode entry detection. Always available regardless of pin mode.. MCLR/VPP/RE3 (1), Function = RE3. MCLR/VPP/RE3 (1), TRIS Setting = - (2). MCLR/VPP/RE3 (1), I/O",
    "TABLE 10-9: PORTE I/O SUMMARY\n= I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = PORTE<3> data input; enabled when MCLRE Configuration bit is clear.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output;\nx = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: RE3 is available on both 28-pin and 40/44-pin devices. All other PORTE pins are only implemented on 40/44-pin devices.\n2: RE3 does not have a corresponding TRIS bit to control data direction.",
    "TABLE 10-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (1,2). PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 48. LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = LATE Data Latch Register. LATE (2), Bit 1 = LATE Data Latch Register. LATE (2), Bit 0 = LATE Data Latch Register. LATE (2), Reset Values on page = 48. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0",
    "TABLE 10-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\n= TRISE0. TRISE, Reset Values on page = 48. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 47\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by PORTE.\nNote\n1: Implemented only when Master Clear functionality is disabled (MCLRE Configuration bit = 0 ).\n2: RE3 is the only PORTE bit implemented on both 28-pin and 40/44-pin devices. All other bits are implemented only when PORTE is implemented (i.e., 40/44-pin devices).",
    "10.6 Parallel Client Port\nNote:\nThe Parallel Client  Port  is  only  available on 40/44-pin devices.\nIn addition to its function as a general I/O port, PORTD can also operate as an 8-bit wide Parallel Client Port (PSP) or microprocessor port. PSP operation is controlled  by  the  4  upper  bits  of  the  TRISE  register ( Register 10-1 ). Setting control bit, PSPMODE (TRISE<4>),  enables  PSP  operation  as  long  as  the Enhanced CCP module is not operating in dual output or quad output PWM mode. In Client mode, the port is asynchronously readable and writable by the external world.",
    "10.6 Parallel Client Port\nThe  PSP  can  directly  interface  to  an  8-bit  microprocessor data bus. The external microprocessor can read or write the PORTD latch as an 8-bit latch. Setting the  control  bit,  PSPMODE,  enables  the  PORTE  I/O pins to become control inputs for the microprocessor port. When set, port pin RE0 is the RD input, RE1 is the WR input and RE2 is the CS (Chip Select) input. For this functionality, the corresponding data direction bits of  the  TRISE  register  (TRISE<2:0>)  must  be  configured  as  inputs  (set).  The A/D  port  configuration  bits, PFCG<3:0> (ADCON1<3:0>),  must  also  be  set  to  a value in the range of ' 1010 ' through ' 1111 '.\nA write to the PSP occurs when both the CS and WR lines are first detected low and ends when either are detected high. The PSPIF and IBF flag bits are both set when the write ends.",
    "10.6 Parallel Client Port\nA read from the PSP occurs when both the CS and RD lines are first detected low. The data in PORTD is read out and the OBF bit is clear. If the user writes new data to PORTD to set OBF, the data is immediately read out; however, the OBF bit is not set.\nWhen either the CS or RD lines are detected high, the PORTD pins return to the input state and the PSPIF bit is set. User applications need to wait for PSPIF to be set before servicing the PSP; when this happens, the IBF and OBF bits can be polled and the appropriate action taken.\nThe timing for the  control  signals  in  Write  and  Read modes  is  shown  in Figure 10-3 and Figure 10-4 , respectively.",
    "FIGURE 10-2:\nPORTD AND PORTE BLOCK DIAGRAM (PARALLEL CLIENT PORT)\nNote: I/O pins have diode protection to VDD and VSS.",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL CLIENT PORT\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 48. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and Write",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL CLIENT PORT\nto Data Latch). LATD, Reset Values on page = 48. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Reset Values on page = 48. PORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 48. LATE, Bit 7 = -. LATE, Bit 6 = -. LATE, Bit 5 = -. LATE, Bit 4 = -. LATE, Bit 3 = -. LATE, Bit 2 = LATE Data Latch Register. LATE, Bit 1 = LATE Data Latch",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL CLIENT PORT\nRegister. LATE, Bit 0 = LATE Data Latch Register. LATE, Reset Values on page = 48. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0 = TRISE0. TRISE, Reset Values on page = 48. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IF. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF.",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL CLIENT PORT\nPIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL CLIENT PORT\nValues on page = 48. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Parallel Client Port.",
    "11.0 TIMER0 MODULE\nThe  Timer0  module  incorporates  the  following  features:\nThe T0CON  register ( Register 11-1 ) controls all aspects of the module's operation, including the prescale selection. It is both readable and writable.\n\u00b7 Software selectable operation as a timer or counter in both 8-bit or 16-bit modes\n\u00b7 Readable and writable registers\n\u00b7 Dedicated 8-bit, software programmable prescaler\n\u00b7 Selectable clock source (internal or external)\n\u00b7 Edge select for external clock\n\u00b7 Interrupt-on-overflow",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nTMR0ON, R/W-1 = T08BIT. TMR0ON, R/W-1 = T0CS. TMR0ON, R/W-1 = T0SE. TMR0ON, R/W-1 = PSA. TMR0ON, R/W-1 = T0PS2. TMR0ON, R/W-1 = T0PS1. TMR0ON, R/W-1 = T0PS0. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nTMR0ON:\nTimer0 On/Off Control bit\n1 = Enables Timer0\n0 = Stops Timer0\nbit 6\nT08BIT : Timer0 8-Bit/16-Bit Control bit\n1 = Timer0 is configured as an 8-bit timer/counter\n0 = Timer0 is configured as a 16-bit timer/counter",
    "bit 5 T0CS : Timer0 Clock Source Select bit\n1 = Transition on T0CKI pin\n0 = Internal instruction cycle clock (CLKO)",
    "bit 4\nT0SE : Timer0 Source Edge Select bit\n1 = Increment on high-to-low transition on T0CKI pin\n0 = Increment on low-to-high transition on T0CKI pin",
    "bit 3\nPSA : Timer0 Prescaler Assignment bit\n1 = TImer0 prescaler is not assigned. Timer0 clock input bypasses prescaler.\n0 = Timer0 prescaler is assigned. Timer0 clock input comes from prescaler output.",
    "bit 2-0\nT0PS<2:0> : Timer0 Prescaler Select bits\n111 = 1:256 Prescale value\n110 = 1:128 Prescale value\n101 = 1:64   Prescale value\n100 = 1:32   Prescale value\n011 = 1:16   Prescale value\n010 = 1:8     Prescale value\n001\n= 1:4     Prescale value\n000\n= 1:2     Prescale value\nA simplified block diagram of the Timer0 module in 8-bit mode  is  shown  in Figure 11-1 . Figure 11-2 shows  a simplified block diagram of the Timer0 module in 16-bit mode.",
    "11.1 Timer0 Operation\nTimer0 can operate as either a timer or a counter; the mode is selected with the T0CS (T0CON<5>) bit. In Timer  mode  (T0CS  = 0 ),  the  module  increments  on every clock by default unless a different prescaler value is selected  (see Section 11.3  'Prescaler' ). If the TMR0 register is written to, the increment is inhibited for the following two instruction cycles. The user can work around this by writing an adjusted value to the TMR0 register.\nThe Counter mode is selected by setting the T0CS (= 1 ) bit. In this mode, Timer0 increments either on every rising or falling edge of pin RA4/T0CKI. The incrementing  edge  is  determined  by  the  Timer0  Source  Edge Select bit, T0SE (T0CON<4>); clearing this bit selects the rising edge. Restrictions on the external clock input are discussed below.\ninternal phase clock (TOSC). There is a delay between synchronization  and  the  onset  of  incrementing  the timer/counter.",
    "11.2 Timer0 Reads and Writes in 16-Bit Mode\nTMR0H is not the actual high byte of Timer0 in 16-bit mode; it is actually a buffered version of the real high byte of Timer0 which is not directly readable nor writable (refer to Figure 11-2 ). TMR0H is updated with the contents of the high byte of Timer0 during a read of TMR0L. This provides the ability to read all 16 bits of Timer0 without having to verify that the read of the high and  low  byte  were  valid,  due  to  a  rollover  between successive reads of the high and low byte.\nAn external clock source can be used to drive Timer0; however, it must meet certain requirements to ensure that  the  external  clock  can  be  synchronized  with  the\nSimilarly, a write to the high byte of Timer0 must also take place through the TMR0H Buffer register. The high byte is updated with the contents of TMR0H when a write occurs to TMR0L. This allows all 16 bits of Timer0 to be updated at once.",
    "11.3 Prescaler\nAn 8-bit counter is available as a prescaler for the Timer0 module. The prescaler is not directly readable or writable; its value is set by the PSA  and  T0PS<2:0>  bits (T0CON<3:0>) which determine the prescaler assignment and prescale ratio.\nClearing the PSA bit assigns the prescaler to the Timer0 module. When it is assigned, prescale values from 1:2 through 1:256 in power-of-2 increments are selectable.\nWhen assigned to the Timer0 module, all instructions writing to the TMR0 register (e.g., CLRF TMR0 MOVWF , TMR0 BSF TMR0 , , etc.) clear the prescaler count.\nNote:, 1 = Writing to TMR0 when the prescaler is assigned to Timer0 will clear the prescaler count but will not change the prescaler assignment.",
    "11.3.1 SWITCHING PRESCALER ASSIGNMENT\nThe  prescaler  assignment  is  fully  under  software control and can be changed 'on-the-fly' during program execution.",
    "11.4 Timer0 Interrupt\nThe  TMR0  interrupt  is  generated  when  the  TMR0 register  overflows  from  FFh  to  00h  in  8-bit  mode,  or from FFFFh to 0000h in 16-bit mode. This overflow sets the TMR0IF flag bit. The interrupt can be masked by clearing  the  TMR0IE  (INTCON<5>)  bit.  Before  reenabling the interrupt, the TMR0IF bit must be cleared in software by the Interrupt Service Routine.\nSince Timer0 is shut down in Sleep mode, the TMR0 interrupt cannot awaken the processor from Sleep.",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nTMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte. TMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Reset Values on page = 46. TMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\n= Timer0 Register High Byte. TMR0H, Reset Values on page = 46. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Reset Values on page = 46. TRISA, Bit 7 = RA7 (1). TRISA, Bit 6 = RA6 (1).",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nTRISA, Bit 5 = RA5. TRISA, Bit 4 = RA4. TRISA, Bit 3 = RA3. TRISA, Bit 2 = RA2. TRISA, Bit 1 = RA1. TRISA, Bit 0 = RA0. TRISA, Reset Values on page = 48\nLegend: Shaded cells are not used by Timer0.\nNote 1: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "12.0 TIMER1 MODULE\nThe Timer1 timer/counter  module  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer1  module  is shown in Figure 12-1 . A block diagram of the module's operation in Read/Write mode is shown in Figure 12-2 .\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR1H and TMR1L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Reset on CCP Special Event Trigger\n\u00b7 Device clock status flag (T1RUN)\nThe module incorporates its own low-power oscillator to  provide  an  additional  clocking  option.  The  Timer1 oscillator can also be used as a low-power clock source for the microcontroller in power-managed operation.\nTimer1 can also be used to provide Real-Time Clock (RTC) functionality to applications with only a minimal addition of external components and code overhead.",
    "12.0 TIMER1 MODULE\nTimer1 is controlled through the T1CON  Control register  ( Register 12-1 ).  It  also  contains  the  Timer1 Oscillator Enable  (T1OSCEN)  bit.  Timer1  can  be enabled or disabled by setting or clearing control bit, TMR1ON (T1CON<0>).",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nRD16, R-0 = T1RUN. RD16, R/W-0 = T1CKPS1. RD16, R/W-0 = T1CKPS0. RD16, R/W-0 = T1OSCEN. RD16, R/W-0 = T1SYNC. RD16, R/W-0 = TMR1CS. RD16, R/W-0 = TMR1ON. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nRD16: 16-Bit Read/Write Mode Enable bit\n1 = Enables register read/write of TImer1 in one 16-bit operation\n0 = Enables register read/write of Timer1 in two 8-bit operations\nT1RUN: Timer1 System Clock Status bit\n1 = Device clock is derived from Timer1 oscillator\n0 = Device clock is derived from another source\nT1CKPS<1:0>: Timer1 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value\nT1OSCEN: Timer1 Oscillator Enable bit\n1 = Timer1 oscillator is enabled\n0 = Timer1 oscillator is shut off\nThe oscillator inverter and feedback resistor are turned off to eliminate power drain.\nT1SYNC: Timer1 External Clock Input Synchronization Select bit",
    "When TMR1CS = 1 :\n- 1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR1CS = 0 :\nThis bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 .\nTMR1CS: Timer1 Clock Source Select bit\n1 = External clock from pin RC0/T1OSO/T13CKI (on the rising edge)\n0 = Internal clock (FOSC/4)\nTMR1ON: Timer1 On bit\n1 = Enables Timer1\n0 = Stops Timer1\nbit 6",
    "bit 2\nbit 1",
    "12.1 Timer1 Operation\nTimer1 can operate in one of these modes:\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR1CS (T1CON<1>). When TMR1CS is cleared (= 0 ), Timer1 increments on every internal instruction",
    "PIC18F2420/2520/4420/4520\ncycle (FOSC/4). When the bit is set, Timer1 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\nWhen Timer1  is  enabled,  the  RC1/T1OSI  and  RC0/ T1OSO/T13CKI pins become inputs. This means the values  of  TRISC<1:0>  are  ignored  and  the  pins  are read as ' 0 '.",
    "FIGURE 12-2: TIMER1 BLOCK DIAGRAM (16-BIT READ/WRITE MODE)\nNote 1: When enable bit, T1OSCEN, is cleared, the inverter and feedback resistor are turned off to eliminate power drain.",
    "12.2 Timer1 16-Bit Read/Write Mode\nTimer1 can be configured for 16-bit reads and writes (see Figure 12-2 ). When the RD16 control (T1CON<7>)  bit  is  set,  the  address  for  TMR1H  is mapped to a buffer register for the high byte of Timer1. A read from TMR1L will load the contents of the high byte of Timer1 into the Timer1 high byte buffer. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte,  has  become  invalid  due  to  a  rollover  between reads.\nA write to the high byte of Timer1 must also take place through the TMR1H Buffer register. The Timer1 high byte is updated with the contents of TMR1H when a write occurs to TMR1L. This allows a user to write all 16 bits to both the high and low bytes of Timer1 at once.",
    "12.2 Timer1 16-Bit Read/Write Mode\nThe  high  byte  of  Timer1  is  not  directly  readable  or writable in this mode. All reads and writes must take place  through  the  Timer1  High  Byte  Buffer  register. Writes  to TMR1H  do  not  clear  the Timer1  prescaler. The prescaler is only cleared on writes to TMR1L.",
    "12.3 Timer1 Oscillator\nAn  on-chip  crystal oscillator circuit is incorporated between pins T1OSI (input) and T1OSO (amplifier output). It is enabled by setting the Timer1 Oscillator Enable bit,  T1OSCEN  (T1CON<3>).  The  oscillator  is  a  lowpower circuit rated for 32 kHz crystals. It will continue to run during all power-managed modes. The circuit for a typical LP oscillator is shown in Figure 12-3 . Table 12-1 shows the capacitor selection for the Timer1 oscillator.\nThe user must provide a software time delay to ensure proper start-up of the Timer1 oscillator.",
    "TABLE 12-1: CAPACITOR SELECTION FOR THE TIMER OSCILLATOR\nLP, Freq = 32 kHz. LP, C1 = 27 pF (1). LP, C2 = 27 pF (1)\nNote 1: Microchip  suggests  these  values  as  a starting  point  in  validating  the  oscillator circuit.\n2: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n3: Since each resonator/crystal has its own characteristics, the user needs to consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Capacitor values are for design guidance only.",
    "12.3.1 USING TIMER1 AS A CLOCK SOURCE\nThe  Timer1  oscillator  is  also  available  as  a  clock source in power-managed modes. By setting the clock select  bits,  SCS<1:0>  (OSCCON<1:0>),  to  ' 01 ',  the device switches to SEC_RUN mode; both the CPU and peripherals  are  clocked  from  the  Timer1  oscillator.  If the IDLEN (OSCCON<7>) bit is cleared and a SLEEP instruction  is  executed,  the  device  enters  SEC_IDLE mode. Additional  details  are  available  in Section 3.0 'Power-Managed Modes' .\nWhenever the Timer1 oscillator is providing the clock source,  the Timer1  system  clock  status  flag, T1RUN (T1CON<6>), is set. This can be used to determine the controller's current clocking mode. It can also indicate the clock source being currently used by the Fail-Safe Clock Monitor. If the Clock Monitor is enabled and the Timer1 oscillator fails while providing the clock, polling the T1RUN bit will indicate whether the clock is being provided by the Timer1 oscillator or another source.",
    "12.3.2 LOW-POWER TIMER1 OPTION\nThe Timer1 oscillator can operate at two distinct levels of power consumption based on device configuration. When the LPT1OSC Configuration bit is set, the Timer1  oscillator  operates  in  a  low-power  mode.  When LPT1OSC  is  not  set,  Timer1  operates  at  a  higher power level. Power consumption for a particular mode is relatively constant, regardless of the device's operating  mode.  The  default  Timer1  configuration  is  the higher power mode.\nAs  the  low-power  Timer1  mode  tends  to  be  more sensitive to interference, high noise environments may cause some oscillator instability. The low-power option is,  therefore,  best  suited  for  low  noise  applications where  power  conservation  is  an  important  design consideration.",
    "12.3.3 TIMER1 OSCILLATOR LAYOUT CONSIDERATIONS\nThe  Timer1  oscillator  circuit  draws  very  little  power during operation. Due to the low-power nature of the oscillator, it may also be sensitive to rapidly changing signals in close proximity.\nThe oscillator circuit, shown in Figure 12-3 ,  needs to be located as close as possible to the microcontroller. There needs to be no circuits passing within the oscillator circuit boundaries other than VSS or VDD.\nIf a high-speed circuit must be located near the oscillator (such as the CCP1 pin in Output Compare or PWM mode, or the primary oscillator using the OSC2 pin), a grounded  guard  ring  around  the  oscillator  circuit,  as shown in Figure 12-4 , may be helpful when used on a single-sided PCB or in addition to a ground plane.",
    "12.4 Timer1 Interrupt\nThe TMR1 register pair (TMR1H:TMR1L) increments from 0000h to FFFFh and rolls over to 0000h. The Timer1  interrupt,  if  enabled,  is  generated  on  overflow, which is latched in interrupt flag bit, TMR1IF (PIR1<0>). This interrupt can be enabled or disabled by setting or clearing the Timer1 Interrupt Enable bit, TMR1IE (PIE1<0>).",
    "12.5 Resetting Timer1 Using the CCP Special Event Trigger\nIf either of the CCP modules is configured to use Timer1 and generate a Special Event Trigger in Compare mode  (CCP1M<3:0>  or  CCP2M<3:0>  = 1011 ),  this signal will reset Timer1. The trigger from CCP2 will also start an A/D conversion if the A/D module is enabled (see Section 15.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or a synchronous counter to take advantage of this feature. When used  this  way,  the  CCPRxH:CCPRxL  register pair effectively becomes a Period register for Timer1.\nIf  Timer1  is  running  in Asynchronous  Counter  mode, this Reset operation may not work.\nIn  the  event  that  a  write  to  Timer1  coincides  with  a Special  Event  Trigger,  the  write  operation  will  take precedence.\nNote:, 1 = The Special Event Triggers from the CCP2 module will not set the TMR1IF interrupt flag (PIR1<0>) bit.",
    "12.6 Using Timer1 as a Real-Time Clock\nAdding an external LP oscillator to Timer1 (such as the one  described  in Section 12.3  'Timer1  Oscillator' ) gives users the option to include RTC functionality to their applications. This is accomplished with an inexpensive watch crystal to provide an accurate time base and several lines of application code to calculate the time. When operating in Sleep mode and using a battery  or  supercapacitor  as  a  power  source,  it  can completely  eliminate  the  need  for  a  separate  RTC device and battery backup.\nThe  application code  routine, RTCisr , shown  in Example 12-1 , demonstrates  a  simple  method  to increment a counter at one-second intervals using an Interrupt Service  Routine.  Incrementing  the  TMR1 register pair to overflow triggers the interrupt and calls the routine, which increments the seconds counter by one;  additional  counters  for  minutes  and  hours  are incremented as the previous counter overflow.",
    "12.6 Using Timer1 as a Real-Time Clock\nSince the register pair is 16 bits wide, counting up to overflow the register directly from a 32.768 kHz clock would  take  2  seconds.  To  force  the  overflow  at  the required one-second intervals, it is necessary to preload  it.  The  simplest  method  is  to  set  the  MSb  of TMR1H with a BSF instruction.  Note that the TMR1L register  is  never  preloaded  or  altered;  doing  so  may introduce cumulative error over many cycles.\nFor this method to be accurate, Timer1 must operate in Asynchronous mode and the Timer1 overflow interrupt must  be  enabled  (PIE1<0>  = 1 ),  as  shown  in  the routine, RTCinit . The Timer1 oscillator must also be enabled and running at all times.",
    "12.7 Considerations in Asynchronous Counter Mode\nFollowing  a  Timer1  interrupt  and  an  update  to  the TMR1 registers, the Timer1 module uses a falling edge on its clock source to trigger the next register update on the  rising  edge.  If  the  update  is  completed  after  the clock input has fallen, the next rising edge will not be counted.\nmonitoring TMR1L  within  the  interrupt  routine  until  it increments,  and  then  updating  the  TMR1H:TMR1L register pair while the clock is low, or one-half of the period  of  the  clock  source. Assuming  that  Timer1  is being used as a Real-Time Clock, the clock source is a 32.768 kHz  crystal  oscillator;  in  this  case,  one  half period of the clock is 15.25 \uf06d s.\nIf the application can reliably update TMR1 before the timer input  goes  low,  no  additional  action  is  needed. Otherwise,  an  adjusted  update  can  be  performed following a later Timer1 increment. This can be done by",
    "12.7 Considerations in Asynchronous Counter Mode\nThe Real-Time Clock application code in Example 12-1 shows a typical ISR for Timer1, as well as the optional code  required  if  the  update  cannot  be  done  reliably within the required interval.",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nRTCinit, 1 = MOVLW MOVWF CLRF MOVLW MOVWF CLRF CLRF MOVLW MOVWF BSF RETURN. RTCinit, 2 = 80h TMR1H TMR1L b'00001111' T1CON secs mins .12 hours PIE1, TMR1IE. RTCinit, 3 = ; ; ; ; ;. RTCinit, 4 = Preload TMR1 register pair for 1 second overflow Configure for external clock, Asynchronous operation, external oscillator Initialize timekeeping registers ;. RTCisr, 1 = BTFSC BRA BTFSS BRA. RTCisr, 2 = TMR1L,0 $-2 TMR1L,0 $-2. RTCisr, 3 = ; ; ; ;. RTCisr, 4 = Start ISR here Insert the next 4 lines of code when TMR1 can not be reliably updated before clock pulse goes low wait for TMR1L<0>",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nto become clear (may already be clear) wait for TMR1L<0> to become set. , 1 = BSF BCF INCF MOVLW CPFSGT. , 2 = TMR1H, 7 PIR1, TMR1IF secs, F .59 secs secs. , 3 = ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;. , 4 = If TMR1 update can be completed before clock pulse goes low Preload for 1 sec overflow Clear interrupt flag Increment seconds 60 seconds elapsed? No, done Clear seconds Increment minutes 60 minutes elapsed? No, done clear minutes Increment hours 24 hours elapsed?",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n= Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 46. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 46. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 =",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nT1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 46\nLegend:\nShaded cells are not used by the Timer1 module.\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "13.1 Timer2 Operation\nThe  Timer2  module  timer  incorporates  the  following features:\n\u00b7 8-Bit Timer and Period registers (TMR2 and PR2, respectively)\n\u00b7 Readable and writable (both registers)\n\u00b7 Software programmable prescaler (1:1, 1:4 and 1:16)\n\u00b7 Software programmable postscaler (1:1 through 1:16)\n\u00b7 Interrupt on TMR2 to PR2 match\n\u00b7 Optional use as the shift clock for the MSSP module\nThe module is controlled through the T2CON register ( Register 13-1 ),  which  enables  or  disables  the  timer and  configures  the  prescaler  and  postscaler.  Timer2 can  be  shut  off  by  clearing  control  bit,  TMR2ON (T2CON<2>), to minimize power consumption.\nA simplified block diagram of the module is shown in Figure 13-1 .",
    "13.1 Timer2 Operation\nIn normal operation, TMR2 is incremented from 00h on each  clock  (FOSC/4). A  4-bit  counter/prescaler  on  the clock input gives direct input, divide-by-4 and divide-by16 prescale options; these are selected by the prescaler control bits, T2CKPS<1:0> (T2CON<1:0>). The value of TMR2 is compared to that of the Period register, PR2, on each clock cycle. When the two values match, the comparator generates a match signal as the timer output. This signal also resets the value of TMR2 to 00h on the next cycle and drives the output counter/postscaler (see Section 13.2 'Timer2 Interrupt' ).\nThe TMR2 and PR2 registers are both directly readable and  writable.  The  TMR2  register  is  cleared  on  any device Reset, while the PR2 register initializes at FFh. Both the prescaler and postscaler counters are cleared on the following events:",
    "13.1 Timer2 Operation\n\u00b7 a write to the TMR2 register\n\u00b7 a write to the T2CON register\n\u00b7 any device Reset (Power-on Reset, MCLR Reset, Watchdog Timer Reset or Brown-out Reset)\nTMR2 is not cleared when T2CON is written.",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\n-, R/W-0 = T2OUTPS3. -, R/W-0 = T2OUTPS2. -, R/W-0 = T2OUTPS1. -, R/W-0 = T2OUTPS0. -, R/W-0 = TMR2ON. -, R/W-0 = T2CKPS1. -, R/W-0 = T2CKPS0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7 Unimplemented: Read as ' 0 '\nbit 6-3\nT2OUTPS<3:0>: Timer2 Output Postscale Select bits\n0000 = 1:1 Postscale\n0001 = 1:2 Postscale\n\u2022\n\u2022\n\u2022\n1111 = 1:16 Postscale",
    "bit 2 TMR2ON: Timer2 On bit\n1 = Timer2 is on\n0 = Timer2 is off\nbit 1-0\nT2CKPS<1:0>: Timer2 Clock Prescale Select bits\n00 = Prescaler is 1\n01 = Prescaler is 4\n1x = Prescaler is 16",
    "13.2 Timer2 Interrupt\nTimer2 also can generate an optional device interrupt. The Timer2 output signal (TMR2 to PR2 match) provides the input for the 4-bit output counter/postscaler. This counter generates the TMR2 match interrupt flag which is latched in TMR2IF (PIR1<1>). The interrupt is enabled by setting the TMR2 Match Interrupt Enable bit, TMR2IE (PIE1<1>).\nA range of 16 postscale options (from 1:1 through 1:16 inclusive) can be selected with the postscaler control bits, T2OUTPS<3:0> (T2CON<6:3>).",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nRegister. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 46. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 46. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 46\nLegend:",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer2 module.\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "13.3 Timer2 Output\nThe unscaled output of TMR2 is available primarily to the CCP modules, where it is used as a time base for operations in PWM mode.\nTimer2 can optionally be used as the shift clock source for  the  MSSP  module  operating  in  SPI  mode. Additional  information  is  provided  in Section 17.0  'Host Synchronous Serial Port (MSSP) Module' .",
    "14.0 TIMER3 MODULE\nThe Timer3 module timer/counter  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer3  module  is shown in Figure 14-1 . A block diagram of the module's operation in Read/Write mode is shown in Figure 14-2 .\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR3H and TMR3L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Module Reset on CCP Special Event Trigger",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nRD16, R/W-0 = T3CCP2. RD16, R/W-0 = T3CKPS1. RD16, R/W-0 = T3CKPS0. RD16, R/W-0 = T3CCP1. RD16, R/W-0 = T3SYNC. RD16, R/W-0 = TMR3CS. RD16, R/W-0 = TMR3ON. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 RD16: 16-Bit Read/Write Mode Enable bit\n1 = Enables register read/write of Timer3 in one 16-bit operation\n0 = Enables register read/write of Timer3 in two 8-bit operations",
    "bit 6,3 T3CCP<2:1>:\nTimer3 and Timer1 to CCPx Enable bits\n1x =Timer3 is the capture/compare clock source for the CCP modules\n01 =Timer3 is the capture/compare clock source for CCP2;\nTimer1 is the capture/compare clock source for CCP1\n00 =Timer1 is the capture/compare clock source for the CCP modules\nT3CKPS<1:0> : Timer3 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value\nT3SYNC: Timer3 External Clock Input Synchronization Control bit\n(Not usable if the device clock comes from Timer1/Timer3.)\nWhen TMR3CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR3CS = 0 :\nThis bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 .\nTMR3CS: Timer3 Clock Source Select bit",
    "bit 6,3 T3CCP<2:1>:\n1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the first falling edge)\n0 = Internal clock (FOSC/4)\nTMR3ON: Timer3 On bit\n1 = Enables Timer3\n0 = Stops Timer3\nThe Timer3 module is controlled through the T3CON register ( Register 14-1 ). It also selects the clock source options for the CCP modules (see Section 15.1.1 'CCP Modules and Timer Resources' for more information).\nbit 5-4",
    "bit 2\nbit 1",
    "14.1 Timer3 Operation\nTimer3 can operate in one of three modes:\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter",
    "PIC18F2420/2520/4420/4520\nThe operating mode is determined by the clock select bit, TMR3CS (T3CON<1>). When TMR3CS is cleared (= 0 ), Timer3 increments on every internal instruction cycle (FOSC/4). When the bit is set, Timer3 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\nAs  with  Timer1,  the  RC1/T1OSI  and  RC0/T1OSO/ T13CKI pins become inputs when the Timer1 oscillator is enabled. This means the values of TRISC<1:0> are ignored and the pins are read as ' 0 '.",
    "14.2 Timer3 16-Bit Read/Write Mode\nTimer3 can be configured for 16-bit reads and writes (see Figure 14-2 ). When the RD16 control (T3CON<7>)  bit  is  set,  the  address  for  TMR3H  is mapped to a buffer register for the high byte of Timer3. A read from TMR3L will load the contents of the high byte of Timer3 into the Timer3 High Byte Buffer register. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the  low  byte,  has  become  invalid  due  to  a  rollover between reads.\nA write to the high byte of Timer3 must also take place through the TMR3H Buffer register. The Timer3 high byte is updated with the contents of TMR3H when a write occurs to TMR3L. This allows a user to write all 16 bits to both the high and low bytes of Timer3 at once.\nThe  high  byte  of  Timer3  is  not  directly  readable  or writable in this mode. All reads and writes must take place through the Timer3 High Byte Buffer register.",
    "14.2 Timer3 16-Bit Read/Write Mode\nWrites  to  TMR3H  do  not  clear  the Timer3  prescaler. The prescaler is only cleared on writes to TMR3L.",
    "14.3 Using the Timer1 Oscillator as the Timer3 Clock Source\nThe Timer1 internal oscillator may be used as the clock source for Timer3. The Timer1 oscillator is enabled by setting the T1OSCEN (T1CON<3>) bit. To use it as the Timer3 clock source, the TMR3CS bit must also be set. As  previously  noted,  this  also  configures  Timer3  to increment on every rising edge of the oscillator source.",
    "14.4 Timer3 Interrupt\nThe TMR3 register pair (TMR3H:TMR3L) increments from 0000h to FFFFh and overflows to 0000h. The Timer3 interrupt, if enabled, is generated on overflow and is latched in interrupt flag bit, TMR3IF (PIR2<1>). This interrupt can be enabled or disabled by setting or clearing the Timer3 Interrupt Enable bit, TMR3IE (PIE2<1>).",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nIf either of the CCP modules is configured to use Timer3 and  to  generate  a  Special  Event  Trigger  in  Compare mode  (CCP1M<3:0>  or  CCP2M<3:0>  = 1011 ),  this signal will reset Timer3. It will also start an A/D conversion if the A/D module is enabled (see Section 15.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or synchronous counter to take advantage of this feature. When used  this  way,  the  CCPRxH:CCPRxL  register pair effectively becomes a Period register for Timer3.\nIf  Timer3  is  running  in Asynchronous  Counter  mode, the Reset operation may not work.\nIn  the  event  that  a  write  to  Timer3  coincides  with  a Special Event Trigger from a CCP module, the write will take precedence.",
    "Note:\nThe Special Event  Triggers from the CCP2  module  will  not  set  the  TMR3IF interrupt flag (PIR1<0>) bit.\nThe  Timer1  oscillator  is  described  in Section 12.0 'Timer1 Module' .",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 =",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nBCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte.",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nTMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 47. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 47. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\n= T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 46. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer3 module.",
    "15.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nThe capture and compare operations described in this chapter  apply  to  all  standard  and  Enhanced  CCP modules.\nPIC18F2420/2520/4420/4520  devices  all  have  two CCP (Capture/Compare/PWM) modules. Each module contains a 16-bit register which can operate as a 16-bit Capture register, a 16-bit Compare register or a PWM Host/Client Duty Cycle register.\nIn 28-pin devices, the two standard CCP modules (CCP1 and CCP2) operate as described in this chapter. In 40/ 44-pin devices, CCP1 is implemented as an Enhanced CCP  module  with  standard  Capture  and  Compare modes and Enhanced PWM modes. The ECCP implementation  is  discussed  in Section 16.0  'Enhanced Capture/Compare/PWM (ECCP) Module' .",
    "15.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nNote: Throughout  this section and Section 16.0 'Enhanced Capture/Compare/PWM (ECCP) Module' ,  references  to  the  register  and  bit names for CCP modules are referred to generically  by  the  use  of  'x'  or  'y'  in  place  of  the specific  module  number.  Thus,  'CCPxCON' might  refer  to  the  control  register  for  CCP1, CCP2 or ECCP1. 'CCPxCON' is used throughout these sections to refer to the module control register, regardless of whether the CCP  module  is  a  standard  or  enhanced implementation.",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = DCxB1. -, 3 = DCxB0. -, 4 = CCPxM3. -, 5 = CCPxM2. -, 6 = CCPxM1. -, 7 = CCPxM0. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as ' 0 '\nbit 5-4 DCxB<1:0>: PWM Duty Cycle bit 1 and bit 0 for CCPx Module\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:\nThese bits are the two LSbs (bit 1 and bit 0) of the 10-bit PWM duty cycle. The eight MSbs (DCxB<9:2>) of the duty cycle are found in CCPRxL.",
    "bit 3-0 CCPxM<3:0>: CCPx Module Mode Select bits\n0000 =Capture/Compare/PWM disabled (resets CCPx module)\n0001 =Reserved\n0010 =Compare mode, toggle output on match (CCPxIF bit is set)\n0011 =Reserved\n0100 =Capture mode, every falling edge\n0101 =Capture mode, every rising edge\n0110 =Capture mode, every 4th rising edge\n0111 =Capture mode, every 16th rising edge\n1000 =Compare mode, initialize CCPx pin low; on compare match, force CCPx pin high (CCPxIF bit is set)\n1001 =Compare mode, initialize CCPx pin high; on compare match, force CCPx pin low (CCPxIF bit is set)\n1010 =Compare  mode, generate software  interrupt  on  compare  match  (CCPxIF  bit  is  set,  CCPx  pin reflects I/O state)\n1011 =Compare mode, trigger special event; reset timer; CCP2 match starts A/D conversion (CCPxIF bit is set)\n11xx =PWM mode",
    "15.1 CCP Module Configuration\nEach  Capture/Compare/PWM  module  is  associated with a control register (generically, CCPxCON) and a data  register  (CCPRx).  The  data  register,  in  turn,  is comprised of  two  8-bit  registers:  CCPRxL  (low  byte) and CCPRxH  (high  byte).  All registers are both readable and writable.",
    "15.1.1 CCP MODULES AND TIMER RESOURCES\nThe  assignment  of  a  particular  timer  to  a  module  is determined  by  the  Timer  to  CCP  enable  bits  in  the T3CON register ( Register 14-1 ). Both modules may be active at any given time and may share the same timer resource if they are configured to operate in the same mode (Capture/Compare or PWM) at the same time. The interactions between the two modules are summarized in Figure 15-1 and Figure 15-2 . In Timer1 in Asynchronous Counter mode, the capture operation will not work.\nThe CCP modules utilize Timers 1, 2 or 3, depending on the mode selected. Timer1 and Timer3 are available to modules in Capture or Compare modes, while Timer2 is available for modules in PWM mode.\nTABLE 15-1: CCP MODE - TIMER RESOURCE",
    "15.1.2 CCP2 PIN ASSIGNMENT\nThe pin assignment for CCP2 (Capture input, Compare and PWM output) can change, based on device configuration.  The  CCP2MX  Configuration  bit  determines which  pin  CCP2  is  multiplexed  to.  By  default,  it  is assigned to RC1 (CCP2MX = 1 ). If the Configuration bit is cleared, CCP2 is multiplexed with RB3.\nCapture Compare PWM, Timer Resource = Timer1 or Timer3 Timer1 or Timer3 Timer2\nChanging the pin assignment of CCP2 does not automatically change any requirements for configuring the port pin. Users must always verify that the appropriate TRIS register is configured correctly for CCP2 operation, regardless of where it is located.",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\n\nNote 1: Includes standard and Enhanced PWM operation.",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nCapture, CCP2 Mode = Capture. Capture, Interaction = Each module can use TMR1 or TMR3 as the time base. The time base can be different for each CCP.. Capture, CCP2 Mode = Compare. Capture, Interaction = CCP2 can be configured for the Special Event Trigger to reset TMR1 or TMR3 (depending upon which time base is used). Automatic A/D conversions on trigger event can also be done. Operation of CCP1 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Capture. Compare, Interaction = CCP1 can be configured for the Special Event Trigger to reset TMR1 or TMR3 (depending upon which time base is used). Operation of CCP2 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Compare. Compare, Interaction = Either module can be configured for the Special Event Trigger to reset the time base. Automatic A/D conversions on CCP2 trigger event can be done. Conflicts may occur if both modules are",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nusing the same time base.. Capture, CCP2 Mode = PWM (1). Capture, Interaction = None. Compare, CCP2 Mode = PWM (1). Compare, Interaction = None. PWM (1), CCP2 Mode = Capture. PWM (1), Interaction = None. PWM (1), CCP2 Mode = Compare. PWM (1), Interaction = None. PWM (1), CCP2 Mode = PWM (1). PWM (1), Interaction = Both PWMs will have the same frequency and update rate (TMR2 interrupt).",
    "15.2 Capture Mode\nIn Capture mode, the CCPRxH:CCPRxL register pair captures the 16-bit value of the TMR1 or TMR3 register when an event occurs on the corresponding CCPx pin. An event is defined as one of the following:\n\u00b7 every falling edge\n\u00b7 every rising edge\n\u00b7 every 4th rising edge\n\u00b7 every 16th rising edge\nThe event is selected by the mode  select bits, CCPxM<3:0>  (CCPxCON<3:0>).  When  a  capture  is made, the interrupt  request  flag  bit,  CCPxIF,  is  set;  it must be cleared in software. If another capture occurs before  the  value  in  register  CCPRx  is  read,  the  old captured value is overwritten by the new captured value.",
    "15.2.1 CCP PIN CONFIGURATION\nIn Capture mode, the appropriate CCPx pin needs to be configured as an input by setting the corresponding TRIS direction bit.",
    "Note:\nIf RB3/CCP2 or RC1/CCP2 is configured as an output, a write to the port can cause a capture condition.",
    "15.2.3 SOFTWARE INTERRUPT\nWhen the Capture mode is changed, a false capture interrupt may be generated. The user needs to keep the  CCPxIE  interrupt  enable  bit  clear  to  avoid  false interrupts. The interrupt flag bit, CCPxIF, needs to also be  cleared  following  any  such  change  in  operating mode.",
    "15.2.4 CCP PRESCALER\nThere are four prescaler settings in Capture mode; they are specified as part of the operating mode selected by the  mode  select  bits  (CCPxM<3:0>).  Whenever  the CCP module is turned off, or Capture mode is disabled, the prescaler counter is cleared. This means that any Reset will clear the prescaler counter.\nSwitching from one capture prescaler to another may generate an interrupt. Also, the prescaler counter will not be cleared; therefore, the first capture may be from a non-zero prescaler. Example 15-1 shows the recommended method for switching between capture prescalers.  This  example  also  clears  the  prescaler counter and will not generate the 'false' interrupt.",
    "EXAMPLE 15-1: CHANGING BETWEEN CAPTURE PRESCALERS (CCP2 SHOWN)\nThe timers that are to be used with the capture feature (Timer1 and/or Timer3) must be running in Timer mode or Synchronized Counter mode. In Asynchronous Counter mode, the capture operation will not work. The timer to be used with each CCP module is selected in the T3CON  register  (see Section 15.1.1  'CCP  Modules and Timer Resources' ).\nCLRF\nCCP2CON\n; Turn CCP module off\nMOVLW\nNEW_CAPT_PS; Load WREG with the\n; new prescaler mode\n; value and CCP ON\nMOVWF CCP2CON\n; Load CCP2CON with\n; this value",
    "15.3.2 TIMER1/TIMER3 MODE SELECTION\nIn Compare mode, the 16-bit CCPRx register value is constantly compared against either the TMR1 or TMR3 register pair value. When a match occurs, the CCPx pin can be:\n\u00b7 driven high\n\u00b7 driven low\n\u00b7 toggled (high-to-low or low-to-high)\n\u00b7 remain unchanged (that is, reflects the state of the I/O latch)\nThe action on the pin is based on the value of the mode select  bits (CCPxM<3:0>).  At  the  same  time,  the interrupt flag bit, CCPxIF, is set.",
    "15.3.1 CCP PIN CONFIGURATION\nThe user must configure the CCPx pin as an output by clearing the appropriate TRIS bit.",
    "Note:\nTimer1 and/or Timer3 must be running in Timer mode or Synchronized Counter mode if the CCP module is using the compare feature. In Asynchronous Counter mode, the compare operation may not work.",
    "15.3.3 SOFTWARE INTERRUPT MODE\nWhen the Generate Software Interrupt mode is chosen (CCPxM<3:0> = 1010 ), the corresponding CCPx pin is not  affected. A  CCP  interrupt  is  generated  when  the CCPxIF interrupt flag is set while the CCPxIE bit is set.",
    "15.3.4 SPECIAL EVENT TRIGGER\nBoth CCP modules are equipped with a Special Event Trigger. This is an internal hardware signal generated in Compare mode to trigger actions by other modules. The Special Event Trigger is enabled by selecting the Compare Special Event Trigger mode (CCPxM<3:0> = 1011 ).\nFor either CCP module, the Special Event Trigger resets the Timer register pair for whichever timer resource is currently  assigned  as  the  module's  time  base.  This allows the CCPRx registers to serve as a programmable Period register for either timer.\nClearing the CCP2CON register will force the  RB3  or  RC1  compare  output  latch (depending on device configuration) to the default low level. This is not the PORTB or PORTC I/O data latch.\nThe Special Event Trigger for CCP2 can also start an A/D conversion. In order to do this, the A/D Converter must already be enabled.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 44. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nPIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on page = 48. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nRegister. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on page = 48. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 46. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 46. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 46. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 47. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 47. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nT3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 47. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n47. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 47. CCP1CON, Bit 7 = P1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n= CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 47. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset Values on page = 47. CCPR2H, Bit",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 47. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by Capture/Compare, Timer1 or Timer3.\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "15.4 PWM Mode\nIn Pulse-Width Modulation (PWM) mode, the CCPx pin produces up to a 10-bit resolution PWM output. Since the CCP2 pin is multiplexed with a PORTB or PORTC data latch, the appropriate TRIS bit must be cleared to make the CCP2 pin an output.\nNote:, 1 = Clearing the CCP2CON register will force the RB3 or RC1output latch (depending on device configuration) to the default low level. This is not the PORTB or PORTC I/O data latch.\nFigure 15-3 shows  a  simplified  block  diagram  of  the CCP module in PWM mode.\nFor a step-by-step procedure on how to set up the CCP module for PWM  operation, see Section 15.4.4 'Setup for PWM Operation' .",
    "FIGURE 15-3: SIMPLIFIED PWM BLOCK DIAGRAM\nA PWM output ( Figure 15-4 ) has a time base (period) and a time that the output stays high (duty cycle). The frequency of the PWM is the inverse of the period (1/period).",
    "15.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following formula:",
    "EQUATION 15-1:\nPWM Period = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period].\nWhen TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCPx pin is set (exception: if PWM duty cycle = 0%, the CCPx pin will not be set)\n\u00b7 The PWM duty cycle is latched from CCPRxL into CCPRxH\nNote:\nThe Timer2 postscalers (see Section 13.0 'Timer2  Module' )  are  not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "15.4.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPRxL register and to the CCPxCON<5:4> bits. Up to 10-bit resolution is available. The CCPRxL contains the eight MSbs and the CCPxCON<5:4> bits contain the  two  LSbs.  This  10-bit  value  is  represented  by CCPRxL:CCPxCON<5:4>.  The  following  equation  is used to calculate the PWM duty cycle in time:",
    "EQUATION 15-2:\nPWM Duty Cycle = (CCPRXL:CCPXCON<5:4>) \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nCCPRxL and CCPxCON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  latched  into CCPRxH until after a match between PR2 and TMR2 occurs  (i.e.,  the  period  is  complete).  In  PWM  mode, CCPRxH is a read-only register.",
    "PIC18F2420/2520/4420/4520\nThe  CCPRxH  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.",
    "EQUATION 15-3:\nWhen  the  CCPRxH  and  2-bit  latch  match  TMR2, concatenated with an internal 2-bit Q clock or 2 bits of the TMR2 prescaler, the CCPx pin is cleared.\n<!-- formula-not-decoded -->\nNote:\nThe maximum PWM resolution (bits) for a given PWM frequency is given by the equation:\nIf the PWM duty cycle value is longer than the PWM period, the CCPx pin will not be cleared.",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "15.4.4 SETUP FOR PWM OPERATION\nThe PWM auto-shutdown features of the Enhanced CCP module are also available to CCP1 in 28-pin devices. The operation of this feature is discussed in detail in Section 16.4.7 'Enhanced PWM Auto-Shutdown' .\nAuto-shutdown features are not available for CCP2.\nThe following steps need to be taken when configuring the CCP module for PWM operation:\n1. Set  the  PWM  period  by  writing  to  the  PR2 register.\n2. Set  the  PWM  duty  cycle  by  writing  to  the CCPRxL register and CCPxCON<5:4> bits.\n3. Make the CCPx pin an output by clearing the appropriate TRIS bit.\n4. Set the TMR2 prescale value, then enable Timer2 by writing to T2CON.\n5. Configure the CCPx module for PWM operation.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 44. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nPIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. TRISB, Bit 7 = PORTB",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nData Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on page = 48. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on page = 48. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nTMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 46. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 46. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 =",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nTMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 46. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 47. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 47. CCP1CON, Bit 7 = P1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 =",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 47. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset Values on page = 47. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nByte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 47. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nValues on page = 47. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (1). ECCP1AS, Bit 0 = PSSBD0 (1). ECCP1AS, Reset Values on page = 47. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (1). PWM1CON, Bit 5 = PDC5 (1). PWM1CON, Bit 4 = PDC4 (1). PWM1CON, Bit 3 = PDC3 (1). PWM1CON, Bit 2 = PDC2 (1). PWM1CON, Bit 1 = PDC1 (1). PWM1CON, Bit",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n0 = PDC0 (1). PWM1CON, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PWM or Timer2.\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "16.0 ENHANCED CAPTURE/ COMPARE/PWM (ECCP) MODULE\nNote:\nThe ECCP module is implemented only in 40/44-pin devices.\nand  automatic  shutdown  and  restart.  The  enhanced features are discussed in detail in Section 16.4 'Enhanced  PWM  Mode' . Capture, Compare  and single output PWM functions of the ECCP module are the same as described for the standard CCP module.\nIn PIC18F4420/4520 devices, CCP1 is implemented as a standard CCP module with Enhanced PWM capabilities. These include the provision for 2 or 4 output channels,  user-selectable  polarity,  dead-band  control\nThe control register for the Enhanced CCP module is shown in Register 16-2 . It differs from the CCPxCON registers in PIC18F2420/2520 devices in that the two Most Significant bits are implemented to control PWM functionality.",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. P1M1, 1 = P1M0. P1M1, 2 = DC1B1. P1M1, 3 = DC1B0. P1M1, 4 = CCP1M3. P1M1, 5 = CCP1M2. P1M1, 6 = CCP1M1. P1M1, 7 = CCP1M0\nbit 7\nbit 0",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6\nP1M<1:0>: Enhanced PWM Output Configuration bits\nIf CCP1M3:CCP1M2 = 00 01 10 , , :\nxx =P1A assigned as capture/compare input/output; P1B, P1C, P1D assigned as port pins\nIf CCP1M3:CCP1M2 = 11 :",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\n00 =Single output, P1A modulated; P1B, P1C, P1D assigned as port pins\n01 =Full-bridge output forward, P1D modulated; P1A active; P1B, P1C inactive\n10 =Half-bridge output, P1A, P1B modulated with dead-band control; P1C, P1D assigned as port pins\n11 =Full-bridge output reverse, P1B modulated; P1C active; P1A, P1D inactive",
    "bit 5-4 DC1B<1:0>: PWM Duty Cycle bit 1 and bit 0\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:\nThese bits are the two LSbs of the 10-bit PWM duty cycle. The eight MSbs of the duty cycle are found in CCPR1L.",
    "bit 3-0 CCP1M<3:0>: Enhanced CCP Mode Select bits\n0000 =Capture/Compare/PWM off (resets ECCP module)\n0001\n=Reserved\n0010 =Compare mode, toggle output on match\n0011 =Capture mode\n0100 =Capture mode, every falling edge\n0101 =Capture mode, every rising edge\n0110 =Capture mode, every 4th rising edge\n0111 =Capture mode, every 16th rising edge\n1000 =Compare mode, initialize CCP1 pin low; set output on compare match (set CCP1IF)\n1001 =Compare mode, initialize CCP1 pin high; clear output on compare match (set CCP1IF)\n1010 =Compare mode, generate software interrupt only; CCP1 pin reverts to I/O state\n1011 =Compare mode, trigger special event (ECCP resets TMR1 or TMR3, sets CCP1IF bit)\n1100 =PWM mode, P1A, P1C active-high; P1B, P1D active-high",
    "bit 3-0 CCP1M<3:0>: Enhanced CCP Mode Select bits\n1101 =PWM mode, P1A, P1C active-high; P1B, P1D active-low\n1110 =PWM mode, P1A, P1C active-low; P1B, P1D active-high\n1111 =PWM mode, P1A, P1C active-low; P1B, P1D active-low",
    "PIC18F2420/2520/4420/4520\nIn addition to the expanded range of modes available through the CCP1CON register and ECCP1AS register, the ECCP module has an additional register associated  with  Enhanced  PWM  operation  and auto-shutdown features. It is:",
    "16.2 Capture and Compare Modes\n- \u00b7 PWM1CON (PWM Dead-Band Delay)",
    "16.1 ECCP Outputs and Configuration\nThe Enhanced CCP module may have up to four PWM outputs,  depending  on  the  selected  operating  mode. These  outputs,  designated  P1A  through  P1D,  are multiplexed with I/O pins on PORTC and PORTD. The outputs that are active depend on the CCP operating mode selected. The pin assignments are summarized in Table 16-1 .\nTo configure the I/O pins as PWM outputs, the proper PWM mode must be selected by setting the P1M<1:0> and  CCP1M<3:0>  bits.  The  appropriate  TRISC  and TRISD direction bits for the port pins must also be set as outputs.",
    "16.1.1 ECCP MODULES AND TIMER RESOURCES\nExcept for the operation of the Special Event Trigger discussed below, the Capture and Compare modes of the ECCP module are identical in operation to that of CCP2. These are discussed in detail in Section 15.2 'Capture Mode' and Section 15.3 'Compare Mode' . No changes are required when  moving between 28-pin and 40/44-pin devices.",
    "16.2.1 SPECIAL EVENT TRIGGER\nThe Special Event Trigger output of ECCP resets the TMR1 or TMR3 register pair, depending on which timer resource is currently selected. This allows the CCPR1 register to effectively be a 16-Bit Programmable Period register for Timer1 or Timer3.",
    "16.3 Standard PWM Mode\nWhen configured  in  Single  Output  mode,  the  ECCP module  functions  identically  to  the  standard  CCP module in PWM mode, as described in Section 15.4 'PWM Mode' .  This is also sometimes referred to as 'Compatible CCP' mode, as in Table 16-1 .\nLike the standard CCP modules, the ECCP module can utilize  Timers  1,  2  or  3,  depending  on  the  mode selected. Timer1 and Timer3 are available for modules in Capture or Compare modes, while Timer2 is available for modules in PWM mode. Interactions between the standard and Enhanced CCP modules are identical to those described for standard CCP  modules. Additional  details  on  timer  resources  are  provided  in Section 15.1.1 'CCP Modules and Timer Resources' .\nNote:\nWhen setting up single output PWM operations, users are free to use either of the processes described in Section 15.4.4 'Setup for PWM Operation' or Section 16.4.9  'Setup  for  PWM  Operation' .  The  latter  is  more  generic  and  will work for either single or multi-output PWM.\n\nTABLE 16-1: PIN ASSIGNMENTS FOR VARIOUS ECCP MODES",
    "16.3 Standard PWM Mode\nAll 40/44-Pin Devices:, CCP1CON Configuration = All 40/44-Pin Devices:. All 40/44-Pin Devices:, RC2 = All 40/44-Pin Devices:. All 40/44-Pin Devices:, RD5 = All 40/44-Pin Devices:. All 40/44-Pin Devices:, RD6 = All 40/44-Pin Devices:. All 40/44-Pin Devices:, RD7 = All 40/44-Pin Devices:. Compatible CCP, CCP1CON Configuration = 00xx 11xx. Compatible CCP, RC2 = CCP1. Compatible CCP, RD5 = RD5/PSP5. Compatible CCP, RD6 = RD6/PSP6. Compatible CCP, RD7 = RD7/PSP7. Dual PWM, CCP1CON Configuration = 10xx 11xx. Dual PWM, RC2 = P1A. Dual PWM, RD5 = P1B. Dual PWM, RD6 = RD6/PSP6. Dual PWM, RD7 = RD7/PSP7. Quad",
    "16.3 Standard PWM Mode\nPWM, CCP1CON Configuration = x1xx 11xx. Quad PWM, RC2 = P1A. Quad PWM, RD5 = P1B. Quad PWM, RD6 = P1C. Quad PWM, RD7 = P1D\nLegend: x = Don't care. Shaded cells indicate pin assignments not used by ECCP in a given mode.",
    "16.4 Enhanced PWM Mode\nThe Enhanced PWM mode provides additional PWM output options for a broader range of control applications. The module is a backward compatible version of the standard CCP module and offers up to four outputs, designated P1A through P1D. Users are also able to select  the  polarity  of  the  signal  (either  active-high  or active-low). The module's output mode and polarity are configured by setting the P1M<1:0> and CCP1M<3:0> bits of the CCP1CON register.",
    "16.4 Enhanced PWM Mode\nFigure 16-1 shows a simplified block diagram of PWM operation. All control registers are double-buffered and are loaded at the beginning of a new PWM cycle (the period boundary when Timer2 resets) in order to prevent glitches on any of the outputs. The exception is the PWM Dead-Band Delay register, PWM1CON, which is loaded at either the duty cycle boundary or the period boundary (whichever comes first). Because of the buffering, the module waits until the assigned timer resets instead of starting immediately.  This means  that Enhanced PWM waveforms do not exactly match the standard  PWM waveforms, but are instead offset by one full instruction cycle (4 TOSC).",
    "16.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following equation.",
    "EQUATION 16-1:\nPWM Period   = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period]. When TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCP1 pin is set (if PWM duty cycle = 0%, the CCP1 pin will not be set)\n\u00b7 The PWM duty cycle is copied from CCPR1L into CCPR1H\nNote:\nAs  before,  the  user  must  manually  configure  the appropriate TRIS bits for output.\nThe Timer2 postscaler (see Section 13.0 'Timer2  Module' ) is not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "EQUATION 16-3:\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPR1L register and to the CCP1CON<5:4> bits. Up to 10-bit resolution is available. The CCPR1L contains the eight MSbs and the CCP1CON<5:4> bits contain the  two  LSbs.  This  10-bit  value  is  represented  by CCPR1L:CCP1CON<5:4>.  The  PWM  duty  cycle  is calculated by the following equation.",
    "EQUATION 16-2:\nPWM Duty Cycle =\n(CCPR1L:CCP1CON<5:4>) \u2022 TOSC \u2022 (TMR2 Prescale Value)\nCCPR1L and CCP1CON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  copied  into CCPR1H until a match between PR2 and TMR2 occurs (i.e., the period is complete). In PWM mode, CCPR1H is a read-only register.\n<!-- formula-not-decoded -->\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP1 pin will not be cleared.",
    "16.4.3 PWM OUTPUT CONFIGURATIONS\nThe P1M<1:0> bits in the CCP1CON register allow one of four configurations:\n\u00b7 Single Output\n\u00b7 Half-Bridge Output\n\u00b7 Full-Bridge Output, Forward mode\n\u00b7 Full-Bridge Output, Reverse mode\nThe  CCPR1H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation. When the CCPR1H and 2-bit latch match TMR2, concatenated with an internal 2-bit Q clock or two bits of the TMR2 prescaler, the CCP1 pin is cleared. The maximum  PWM  resolution  (bits)  for  a  given  PWM frequency is given by the following equation.\nThe Single Output mode is the standard PWM mode discussed in Section 16.4 'Enhanced PWM Mode' . The  Half-Bridge  and  Full-Bridge  Output  modes  are covered in detail in the sections that follow.\nThe general relationship of the outputs in all configurations is summarized  in Figure 16-2 and Figure 16-3 .\n\nTABLE 16-2: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz",
    "16.4.3 PWM OUTPUT CONFIGURATIONS\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz = 8. Maximum Resolution",
    "16.4.3 PWM OUTPUT CONFIGURATIONS\n(bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "FIGURE 16-2: PWM OUTPUT RELATIONSHIPS (ACTIVE-HIGH STATE)\n00, CCP1CON<7:6> = (Single Output). 00, SIGNAL = P1A Modulated. 00, 0 = Delay (1). 00,  = Delay (1). 00, PR2 + 1 = . 10, CCP1CON<7:6> = (Half-Bridge). 10, SIGNAL = P1A Modulated P1B Modulated. 10, 0 = . 10,  = . 10, PR2 + 1 = . , CCP1CON<7:6> = (Full-Bridge,. , SIGNAL = P1AActive. , 0 = . ,  = . , PR2 + 1 = . 01, CCP1CON<7:6> = Forward). 01, SIGNAL = P1B Inactive. 01, 0 = . 01,  = . 01, PR2 + 1 = . 11, CCP1CON<7:6> = P1D Modulated (Full-Bridge, Reverse). 11, SIGNAL = P1A Inactive P1B Modulated. 11, 0 = . 11,  = . 11, PR2 + 1 = ",
    "FIGURE 16-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n00,  = (Single Output). 00, SIGNAL. = P1A Modulated. 00, 0.Cycle = . 00,  = . 00, PR2 + 1. = . 10,  = (Half-Bridge). 10, SIGNAL. = P1B Modulated. 10, 0.Cycle = Delay (1). 10,  = Delay (1). 10, PR2 + 1. = . ,  = . , SIGNAL. = P1AActive. , 0.Cycle = . ,  = . , PR2 + 1. = . 01,  = (Full-Bridge, Forward). 01, SIGNAL. = P1B Inactive. 01, 0.Cycle = . 01,  = . 01, PR2 + 1. = . ,  = . , SIGNAL. = P1D Modulated. , 0.Cycle = . ,  = . , PR2 + 1. = . 11 Reverse),  = . 11 Reverse), SIGNAL. = . 11 Reverse), 0.Cycle = . 11 Reverse),  = . 11 Reverse), PR2 + 1. = . (Full-Bridge,,",
    "FIGURE 16-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n= P1B Modulated. (Full-Bridge,, SIGNAL. = . (Full-Bridge,, 0.Cycle = . (Full-Bridge,,  = . (Full-Bridge,, PR2 + 1. = . ,  = P1C Active. , SIGNAL. = . , 0.Cycle = . ,  = . , PR2 + 1. = . ,  = P1D Inactive. , SIGNAL. = . , 0.Cycle = . ,  = . , PR2 + 1. = ",
    "Relationships:\n\u00b7 Period = 4 * TOSC * (PR2 + 1) * (TMR2 Prescale Value)\n\u00b7 Duty Cycle = TOSC * (CCPR1L<7:0>:CCP1CON<5:4>) * (TMR2 Prescale Value)\n\u00b7 Delay = 4 * TOSC * (PWM1CON<6:0>)\nNote 1: Dead-band delay is programmed using the PWM1CON register (see Section 16.4.6 'Programmable Dead-Band Delay' ).",
    "FIGURE 16-4:\nIn the Half-Bridge Output mode, two pins are used as outputs to drive push-pull loads. The PWM output signal is output on the P1A pin, while the complementary PWM output  signal  is  output  on  the  P1B  pin  ( Figure 16-4 ). This mode can be used for half-bridge applications, as shown  in Figure 16-5 , or  for  full-bridge  applications where  four  power  switches  are  being  modulated  with two PWM signals.\nIn Half-Bridge Output mode, the programmable deadband  delay  can  be  used  to  prevent  shoot-through current in half-bridge power devices. The value of bits, PDC<6:0>, sets the number of instruction cycles before the output is driven active. If the value is greater than the  duty  cycle,  the  corresponding  output  remains inactive  during  the  entire  cycle.  See Section 16.4.6 'Programmable Dead-Band Delay' for more details of the dead-band delay operations.",
    "HALF-BRIDGE PWM OUTPUT\nSince the P1A and P1B outputs are multiplexed with the  PORTC<2>  and  PORTD<5>  data  latches,  the TRISC<2>  and  TRISD<5>  bits  must  be  cleared  to configure P1A and P1B as outputs.",
    "16.4.5 FULL-BRIDGE MODE\nIn  Full-Bridge  Output  mode,  four  pins  are  used  as outputs; however, only two outputs are active at a time. In  the  Forward mode, pin P1A is continuously active and pin P1D is modulated. In the Reverse mode, pin P1C is continuously active and pin P1B is modulated. These are illustrated in Figure 16-6 .\nP1A, P1B, P1C and P1D outputs are multiplexed with the  PORTC<2> and PORTD<7:5> data latches. The TRISC<2> and TRISD<7:5> bits  must  be  cleared  to make the P1A, P1B, P1C and P1D pins outputs.\nFIGURE 16-6: FULL-BRIDGE PWM OUTPUT",
    "16.4.5 FULL-BRIDGE MODE\nP1A (2), Forward Mode. = . P1A (2), Forward Mode.Period = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . , Forward Mode. = Duty Cycle. , Forward Mode.Period = . , Forward Mode. = . , Forward Mode. = . P1B (2), Forward Mode. = . P1B (2), Forward Mode.Period = . P1B (2), Forward Mode. = . P1B (2), Forward Mode. = . P1C (2), Forward Mode. = . P1C (2), Forward Mode.Period = . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = . P1D (2), Forward Mode. = . P1D (2), Forward Mode.Period = . P1D (2), Forward Mode. = . P1D (2), Forward Mode. = . , Forward Mode. = . , Forward Mode.Period = . , Forward Mode. = (1). , Forward",
    "16.4.5 FULL-BRIDGE MODE\nMode. = . Reverse Mode, Forward Mode. = Reverse Mode. Reverse Mode, Forward Mode.Period = Reverse Mode. Reverse Mode, Forward Mode. = Reverse Mode. Reverse Mode, Forward Mode. = Reverse Mode. , Forward Mode. = . , Forward Mode.Period = Period. , Forward Mode. = . , Forward Mode. = . , Forward Mode. = Duty Cycle. , Forward Mode.Period = . , Forward Mode. = . , Forward Mode. = . P1A (2), Forward Mode. = . P1A (2), Forward Mode.Period = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . P1B (2), Forward Mode. = . P1B (2), Forward Mode.Period = . P1B (2), Forward Mode. = . P1B (2), Forward Mode. = . P1C (2), Forward Mode. = . P1C (2), Forward Mode.Period = . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = .",
    "16.4.5 FULL-BRIDGE MODE\n(2), Forward Mode. = . (2), Forward Mode.Period = . (2), Forward Mode. = . (2), Forward Mode. = . P1D, Forward Mode. = . P1D, Forward Mode.Period = . P1D, Forward Mode. = . P1D, Forward Mode. = . , Forward Mode. = (1). , Forward Mode.Period = . , Forward Mode. = (1). , Forward Mode. = . Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode.Period = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the PR2",
    "16.4.5 FULL-BRIDGE MODE\nregister.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode.Period = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nIn  the  Full-Bridge  Output  mode,  the  P1M1  bit  in  the CCP1CON register allows user to control the forward/ reverse direction. When  the application firmware changes  this  direction  control  bit,  the  module  will assume the new direction on the next PWM cycle.\nJust  before  the  end  of  the  current  PWM  period,  the modulated outputs (P1B and P1D) are placed in their inactive state, while the unmodulated outputs (P1A and P1C) are switched to drive in the opposite direction. This  occurs  in  a  time  interval  of  4 TOSC  *  (Timer2 Prescale Value) before the next PWM period begins. The Timer2 prescaler will be either 1, 4 or 16, depending on the value of the T2CKPS<1:0> bits (T2CON<1:0>). During the interval from the switch of the unmodulated outputs to the beginning of the next period, the modulated outputs (P1B and P1D) remain inactive. This relationship is shown in Figure 16-8 .",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nNote that  in  the  Full-Bridge  Output  mode,  the  CCP1 module does not provide any dead-band delay. In general,  since only one output is modulated at all times, dead-band delay is not required. However, there is a situation where a dead-band delay might be required. This situation occurs  when  both  of  the  following conditions are true:\n1. The direction of the PWM output changes when the duty cycle of the output is at or near 100%.\n2. The turn-off time of the power switch, including the  power  device  and  driver  circuit,  is  greater than the turn-on time.",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nFigure 16-9 shows  an  example  where  the  PWM direction  changes  from  forward  to  reverse  at  a  near 100% duty cycle. At time t1, the outputs P1A and P1D become inactive, while output P1C becomes active. In this  example,  since  the  turn-off  time  of  the  power devices is longer than the turn-on time, a shoot-through current may flow through power devices, QC and QD (see Figure 16-7 ),  for  the  duration  of  't'.  The  same phenomenon will occur to power devices, QA and QB, for PWM direction change from reverse to forward.\nIf changing PWM direction at high duty cycle is required for  an  application,  one  of  the  following  requirements must be met:\n1. Reduce PWM  for a PWM  period before changing directions.\n2. Use switch drivers that can drive the switches off faster than they can drive them on.\nOther  options  to  prevent  shoot-through  current  may exist.",
    "FIGURE 16-8: PWM DIRECTION CHANGE\nNote\n1: The direction bit in the CCP1 Control (CCP1CON<7>) register is written any time during the PWM cycle.\n2: When changing directions, the P1A and P1C signals switch before the end of the current PWM cycle at intervals of 4 TOSC, 16 TOSC or 64 TOSC, depending on the Timer2 prescaler value. The modulated P1B and P1D signals are inactive at this time.",
    "16.4.6 PROGRAMMABLE DEAD-BAND DELAY\nNote:\nProgrammable  dead-band  delay  is  not implemented in 28-pin devices with standard CCP modules.\nIn half-bridge applications where all power switches are modulated  at  the  PWM  frequency  at  all  times,  the power switches normally require more time to turn off than  to  turn  on.  If  both  the  upper  and  lower  power switches are switched at the same time (one turned on and the other turned off), both switches may be on for a short period of time until one switch completely turns off. During this brief interval, a very high current ( shootthrough current ) may flow through both power switches,  shorting  the  bridge  supply.  To  avoid  this potentially destructive shoot-through current from flowing  during  switching,  turning  on  either  of  the  power switches is normally delayed to allow the other switch to completely turn off.",
    "16.4.6 PROGRAMMABLE DEAD-BAND DELAY\nA  shutdown  event  can  be  caused  by  either  of  the comparator modules, a low level on the Fault input pin (FLT0) or any combination of these three sources. The comparators  may  be  used  to  monitor  a  voltage  input proportional to a current being monitored in the bridge circuit. If the voltage exceeds a threshold, the comparator  switches  state  and  triggers  a  shutdown. Alternatively, a low digital signal on FLT0 can also trigger a shutdown. The auto-shutdown feature can be disabled by not selecting any auto-shutdown sources. The autoshutdown  sources  to  be  used  are  selected  using  the ECCPAS<2:0> bits (ECCP1AS<6:4>).",
    "16.4.6 PROGRAMMABLE DEAD-BAND DELAY\nIn the Half-Bridge Output mode, a digitally programmable dead-band  delay  is  available  to  avoid  shoot-through current from destroying the bridge power switches. The delay occurs at the signal transition from the nonactive state to the active state (see Figure 16-4 for illustration). Bits, PDC<6:0>, of the PWM1CON register ( Register 16-2 ) set the delay period in terms of microcontroller instruction cycles (TCY or 4 TOSC). These bits are not available on 28-pin devices as the standard CCP module does not support half-bridge operation.",
    "16.4.7 ENHANCED PWM AUTOSHUTDOWN\nWhen  a shutdown occurs, the output pins are asynchronously placed in their shutdown states, specified  by  the  PSSAC<1:0> and PSSBD<1:0> bits (ECCPAS<2:0>).  Each  pin  pair  (P1A/P1C  and  P1B/ P1D) may be set to drive high, drive low or be tri-stated (not driving). The ECCPASE (ECCP1AS<7>) bit is also set to hold  the  Enhanced  PWM  outputs  in  their shutdown states.\nThe ECCPASE bit is set by hardware when a shutdown event occurs. If automatic restarts are not enabled, the ECCPASE bit is cleared by firmware when the cause of the shutdown clears. If automatic restarts are enabled, the  ECCPASE  bit  is  automatically  cleared  when  the cause of the auto-shutdown has cleared.",
    "16.4.7 ENHANCED PWM AUTOSHUTDOWN\nIf the ECCPASE bit is set when a PWM period begins, the  PWM outputs  remain  in  their  shutdown  state  for that  entire  PWM  period.  When  the  ECCPASE  bit  is cleared, the PWM outputs will return to normal operation at the beginning of the next PWM period.\nWhen the CCP1 is programmed for any of the Enhanced PWM modes, the active output pins may be configured for  auto-shutdown. Auto-shutdown immediately places the Enhanced PWM output pins into a defined shutdown state when a shutdown event occurs.\nNote:\nWriting  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.",
    "REGISTER 16-2: PWM1CON: PWM DEAD-BAND DELAY REGISTER\nPRSEN, R/W-0 = PDC6 (1). PRSEN, R/W-0 = PDC5 (1). PRSEN, R/W-0 = PDC4 (1). PRSEN, R/W-0 = PDC3 (1). PRSEN, R/W-0 = PDC2 (1). PRSEN, R/W-0 = PDC1 (1). PRSEN, R/W-0 = PDC0 (1). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-2: PWM1CON: PWM DEAD-BAND DELAY REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 PRSEN: PWM Restart Enable bit\n1 = Upon auto-shutdown, the ECCPASE bit clears automatically once the shutdown event goes away; the PWM restarts automatically\n0 = Upon auto-shutdown, ECCPASE must be cleared in software to restart the PWM\nNote 1: Reserved on 28-pin devices; maintain these bits clear.",
    "REGISTER 16-2: PWM1CON: PWM DEAD-BAND DELAY REGISTER (CONTINUED)\nbit 6-0\nPDC6:PDC0: PWM Delay Count bits (1)\nDelay time, in number of FOSC/4 (4 * TOSC) cycles, between the scheduled and actual time for a PWM signal to transition to active.\nNote 1: Reserved on 28-pin devices; maintain these bits clear.",
    "REGISTER 16-3: ECCP1AS: ECCP AUTO-SHUTDOWN CONTROL REGISTER\nECCPASE, R/W-0 = ECCPAS2. ECCPASE, R/W-0 = ECCPAS1. ECCPASE, R/W-0 = ECCPAS0. ECCPASE, R/W-0 = PSSAC1. ECCPASE, R/W-0 = PSSAC0. ECCPASE, R/W-0 = PSSBD1 (1). ECCPASE, R/W-0 = PSSBD0 (1). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-3: ECCP1AS: ECCP AUTO-SHUTDOWN CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nECCPASE: ECCP Auto-Shutdown Event Status bit\n1 = A shutdown event has occurred; ECCP outputs are in shutdown state\n0 = ECCP outputs are operating",
    "bit 6-4 ECCPAS<2:0>: ECCP Auto-Shutdown Source Select bits\n111 =FLT0 or Comparator 1 or Comparator 2\n110 =FLT0 or Comparator 2\n101 =FLT0 or Comparator 1\n100 =FLT0\n011 =Either Comparator 1 or 2\n010 =Comparator 2 output\n001 =Comparator 1 output\n000 =Auto-shutdown is disabled",
    "bit 3-2\nPSSAC<1:0>: Pins A and C Shutdown State Control bits\n1x = Pins A and C are tri-state (40/44-pin devices); PWM output is tri-state (28-pin devices)\n01 = Drive Pins A and C to ' 1 '\n00 = Drive Pins A and C to ' 0 '",
    "bit 1-0\nPSSBD<1:0>: Pins B and D Shutdown State Control bits (1)\n1x = Pins B and D tri-state\n01 = Drive Pins B and D to ' 1 '\n00 = Drive Pins B and D to ' 0 '\nNote 1: Reserved on 28-pin devices; maintain these bits clear.",
    "16.4.8 START-UP CONSIDERATIONS\nThe auto-shutdown feature can be configured to allow automatic restarts of the module following a shutdown event. This is enabled by setting the PRSEN bit of the PWM1CON (PWM1CON<7>) register.\nIn  Shutdown  mode  with  PRSEN = 1 ( Figure 16-10 ), the  ECCPASE  bit  will  remain  set  for  as  long  as  the cause of the shutdown continues. When the shutdown condition clears, the ECCPASE  bit  is  cleared.  If PRSEN = 0 ( Figure 16-11 ), once a shutdown condition occurs,  the  ECCPASE  bit  will  remain  set  until  it  is cleared by firmware. Once ECCPASE is cleared, the Enhanced PWM will resume at the beginning  of  the next PWM period.\nNote:\nWriting  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.\nIndependent  of  the  PRSEN  bit  setting,  if  the  autoshutdown  source  is  one  of  the  comparators,  the shutdown  condition  is  a  level.  The  ECCPASE  bit cannot  be  cleared  as  long  as  the  cause  of  the shutdown persists.",
    "16.4.8 START-UP CONSIDERATIONS\nWhen the ECCP module is used in the PWM mode, the application hardware must use the proper external pullup and/or pull-down resistors on the PWM output pins. When the microcontroller is released from Reset, all of the  I/O  pins  are  in  the  high-impedance  state.  The external circuits must keep the power switch devices in the OFF state until the microcontroller drives the I/O pins with the proper signal levels or activates the PWM output(s).\nThe  CCP1M<1:0>  bits  (CCP1CON<1:0>)  allow  the user to choose whether the PWM output signals are active-high or active-low for each pair of PWM output pins (P1A/P1C  and  P1B/P1D).  The  PWM  output polarities must be selected before the PWM pins are configured as outputs. Changing the polarity configuration while the PWM pins are configured as outputs is not recommended, since it may result in damage to the application circuits.",
    "16.4.8 START-UP CONSIDERATIONS\nThe Auto-Shutdown mode can be forced by writing a ' 1 ' to the ECCPASE bit.\nThe P1A, P1B, P1C and P1D output latches may not be in the proper states when the PWM module is initialized. Enabling the PWM pins for output at the same time as the ECCP module may cause damage to the application circuit. The ECCP module must be enabled in the proper  output  mode  and  complete  a  full  PWM  cycle before configuring the PWM pins as outputs. The completion of a full PWM cycle is indicated by the TMR2IF bit being set as the second PWM period begins.",
    "FIGURE 16-10: PWM AUTO-SHUTDOWN (PRSEN =  , AUTO-RESTART ENABLED) 1\nFIGURE 16-11: PWM AUTO-SHUTDOWN (PRSEN =  , AUTO-RESTART DISABLED) 0",
    "16.4.9 SETUP FOR PWM OPERATION\nThe following steps need to be taken when configuring the ECCP module for PWM operation:",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n1. Configure  the  PWM  pins,  P1A  and  P1B  (and P1C and P1D, if used), as inputs by setting the corresponding TRIS bits.\n2. Set the PWM period by loading the PR2 register.\n3. If auto-shutdown is required:\n\u00b7 Disable auto-shutdown (ECCPASE = 0 )\n\u00b7 Configure source (FLT0, Comparator 1 or Comparator 2)\n\u00b7 Wait for non-shutdown condition\n4. Configure  the  ECCP  module  for  the  desired PWM mode  and  configuration  by  loading  the CCP1CON register with the appropriate values:\n\u00b7 Select one of the available output configurations and direction with the P1M<1:0> bits.\n\u00b7 Select the polarities of the PWM output signals with the CCP1M<3:0> bits.\n5. Set the PWM duty cycle by loading the CCPR1L register and CCP1CON<5:4> bits.",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n6. For  Half-Bridge  Output  mode,  set  the  deadband  delay  by  loading  PWM1CON<6:0>  with the appropriate value.\n7. If auto-shutdown operation is required, load the ECCP1AS register:\n\u00b7 Select the auto-shutdown sources using the ECCPAS<2:0> bits.\n\u00b7 Select the shutdown states of the PWM output pins using the PSSAC<1:0> and PSSBD<1:0> bits.\n\u00b7 Set the ECCPASE (ECCP1AS<7>) bit.\n\u00b7 Configure the comparators using the CMCON register.\n\u00b7 Configure the comparator inputs as analog inputs.\n8. If auto-restart  operation  is  required,  set  the PRSEN (PWM1CON<7>) bit.\n9. Configure and start TMR2:\n\u00b7 Clear the TMR2 interrupt flag bit by clearing the TMR2IF (PIR1<1>) bit.",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n\u00b7 Set the TMR2 prescale value by loading the T2CKPS bits (T2CON<1:0>).\n\u00b7 Enable Timer2 by setting the TMR2ON (T2CON<2>) bit.\n10. Enable  PWM outputs after  a  new  PWM  cycle has started:\n\u00b7 Wait until TMRx overflows (TMRxIF bit is set).\n\u00b7 Enable the CCP1/P1A, P1B, P1C and/or P1D pin outputs by clearing the respective TRIS bits.\n\u00b7 Clear the ECCPASE (ECCP1AS<7>) bit.\nIn Sleep mode, all clock sources are disabled. Timer2 will not increment and the state of the module will not change. If the ECCP pin is driving a value, it will continue to drive that value. When the device wakes up, it will continue from this state. If Two-Speed Start-ups are enabled,  the  initial  start-up  frequency  from  INTOSC and the postscaler may not be stable immediately.",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\nIn PRI_IDLE mode, the primary clock will continue to clock  the  ECCP  module  without  change.  In  all  other power-managed modes, the selected power-managed mode clock will clock Timer2. Other power-managed mode  clocks  will  most  likely  be  different  than  the primary clock frequency.",
    "16.4.10.1 Operation with Fail-Safe Clock Monitor\nIf the Fail-Safe Clock Monitor is enabled, a clock failure will force the device into the power-managed RC_RUN mode and the OSCFIF (PIR2<7>) bit will be set. The ECCP will then be clocked from the internal oscillator clock source, which may  have  a different clock frequency than the primary clock.\nSee the previous section for additional details.",
    "16.4.11 EFFECTS OF A RESET\nBoth Power-on Reset and subsequent Resets will force all ports to Input mode and the CCP registers to their Reset states.\nThis forces the Enhanced CCP module to reset to a state compatible with the standard CCP module.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 44. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nPIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. PIR2, Bit 7 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nOSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\n2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on page = 48. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nPORTC Data Direction Register. TRISC, Reset Values on page = 48. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Reset Values on page = 48. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nLow Byte. TMR1L, Reset Values on page = 46. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 46. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\n= TMR1ON. T1CON, Reset Values on page = 46. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 46. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 46.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nPR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 46. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 47. TMR3H, Bit 7",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\n= Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 47. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 47.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nCCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 47. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\n= Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 47. CCP1CON, Bit 7 = P1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 47. ECCP1AS, Bit 7 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (1). ECCP1AS, Bit 0 = PSSBD0 (1). ECCP1AS, Reset Values on page = 47. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (1). PWM1CON, Bit 5 = PDC5 (1). PWM1CON, Bit 4 = PDC4 (1). PWM1CON, Bit 3 = PDC3 (1). PWM1CON, Bit 2 = PDC2 (1). PWM1CON, Bit 1 = PDC1 (1). PWM1CON, Bit 0 = PDC0 (1).",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP MODULE AND TIMER1 TO TIMER3\nPWM1CON, Reset Values on page = 47\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used during ECCP operation.\n- Note 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "17.1 Host SSP (MSSP) Module Overview\nThe Host Synchronous Serial Port (MSSP) module is a serial  interface,  useful  for  communicating  with  other peripheral or microcontroller devices. These peripheral devices  may  be  serial  EEPROMs,  shift  registers, display drivers,  A/D Converters, etc. The MSSP module can operate in one of two modes:\n\u00b7 Serial Peripheral Interface (SPI)\n\u00b7 Inter-Integrated Circuit (I 2 C)\n-Full Host mode\n-Client mode (with general address call)\nThe  I 2 C  interface  supports  the  following  modes  in hardware:\n\u00b7 Host mode\n\u00b7 Multi-Host mode\n\u00b7 Client mode",
    "17.2 Control Registers\nThe  MSSP  module  has  three  associated  registers. These  include  a  status  register  (SSPSTAT)  and  two control registers (SSPCON1 and SSPCON2). The use of these registers and their individual configuration bits differ  significantly  depending  on  whether  the  MSSP module is operated in SPI or I 2 C mode.\nAdditional  details  are  provided  under  the  individual sections.2004-2021",
    "17.3 SPI Mode\nThe SPI mode allows 8 bits of data to be synchronously transmitted and received simultaneously.  All four modes of SPI are supported. To accomplish communication, typically three pins are used:\n\u00b7 Serial Data Out (SDO) - RC5/SDO\n\u00b7 Serial Data In (SDI) - RC4/SDI/SDA\n\u00b7 Serial Clock (SCK) - RC3/SCK/SCL\nAdditionally, a fourth pin may be used when in a Client mode of operation:\n- \u00b7 Client Select (SS) - RA5/SS\nFigure 17-1 shows  the  block  diagram  of  the  MSSP module when operating in SPI mode.",
    "17.3.1 REGISTERS\nThe  MSSP  module  has  four  registers  for  SPI  mode operation. These are:\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\n\u00b7 MSSP Control (SSPCON1) Register 1\n\u00b7 MSSP Status (SSPSTAT) Register\n\u00b7 Serial Receive/Transmit Buffer (SSPBUF) Register\n\u00b7 MSSP Shift (SSPSR) Register - Not directly accessible\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission, the SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.\nSSPCON1 and SSPSTAT are the control and status registers in SPI mode operation. The SSPCON1 register  is  readable  and  writable.  The  lower  6  bits  of  the SSPSTAT  are  read-only.  The  upper  two  bits  of  the SSPSTAT are read/write.",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-0. SMP, 1 = CKE (1). SMP, 2 = D/A. SMP, 3 = P. SMP, 4 = S. SMP, 5 = R/W. SMP, 6 = UA. SMP, 7 = BF. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Sample bit\nSPI Host mode:\n1 = Input data sampled at end of data output time\n0 = Input data sampled at middle of data output time\nSPI Client mode:\nSMP must be cleared when SPI is used in Client mode.",
    "bit 6\nCKE: SPI Clock Select bit (1)\n1 = Transmit occurs on transition from active to Idle clock state\n0 = Transmit occurs on transition from Idle to active clock state",
    "bit 5 D/A: Data/Address bit\nUsed in I 2 C\u2122 mode only.",
    "bit 4\nP: Stop bit\nUsed in I 2 C mode only. This bit is cleared when the MSSP module is disabled, SSPEN is cleared.",
    "bit 3\nS: Start bit\nUsed in I 2 C mode only.",
    "bit 2 R/W:\nRead/Write Information bit\nUsed in I 2 C mode only.",
    "bit 1\nUA: Update Address bit\nUsed in I 2 C mode only.",
    "bit 0\nBF: Buffer Full Status bit (Receive mode only)\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty\nNote 1: Polarity of clock state is set by the CKP (SSPCON1<4>) bit.",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nWCOL, R/W-0 = SSPOV (1). WCOL, R/W-0 = SSPEN (2). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3 (3). WCOL, R/W-0 = SSPM2 (3). WCOL, R/W-0 = SSPM1 (3). WCOL, R/W-0 = SSPM0 (3). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit\n1 = The SSPxBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision",
    "bit 6 SSPOV: Receive Overflow Indicator bit\n(1)",
    "SPI Client mode:\n1 = A new byte is received while the SSPBUF register is still holding the previous data. In case of overflow, the data in SSPSR is lost. Overflow can only occur in Client mode. The user must read the SSPBUF, even if only transmitting data, to avoid setting overflow (must be cleared in software).\n0 = No overflow",
    "bit 5 SSPEN: Host Synchronous Serial Port Enable bit (2)\n1 = Enables serial port and configures SCK, SDO, SDI and SS as serial port pins\n0 = Disables serial port and configures these pins as I/O port pins",
    "bit 4 CKP: Clock Polarity Select bit\n- 1 = Idle state for clock is a high level\n0 = Idle state for clock is a low level\nSSPM<3:0>: Host Synchronous Serial Port Mode Select bits (3)\n0101 = SPI Client mode, clock = SCK pin; SS pin control disabled; SS can be used as I/O pin\n0100 = SPI Client mode, clock = SCK pin; SS pin control enabled\n0011 = SPI Host mode, clock = TMR2 output/2\n0010 = SPI Host mode, clock = FOSC/64\n0001 = SPI Host mode, clock = FOSC/16\n0000 = SPI Host mode, clock = FOSC/4\nNote 1: In Host mode, the overflow bit is not set since each new reception (and transmission) is initiated by writing to the SSPBUF register.\n2: When enabled, these pins must be properly configured as input or output.\n3: Bit combinations not specifically listed here are either reserved or implemented in I 2 C\u2122 mode only.",
    "17.3.2 OPERATION\nWhen initializing the SPI, several options need to be specified. This is done by programming the appropriate control  bits  (SSPCON1<5:0>  and  SSPSTAT<7:6>). These control bits allow the following to be specified:\nwill be ignored and the write collision detect bit, WCOL (SSPCON1<7>), will be set. User software must clear the WCOL bit so that it can be determined if the following write(s) to the SSPBUF  register completed successfully.\n\u00b7 Host mode (SCK is the clock output)\n\u00b7 Client mode (SCK is the clock input)\n\u00b7 Clock Polarity (Idle state of SCK)\n\u00b7 Data Input Sample Phase (middle or end of data output time)\n\u00b7 Clock Edge (output data on rising/falling edge of SCK)\n\u00b7 Clock Rate (Host mode only)\n\u00b7 Client Select mode (Client mode only)",
    "17.3.2 OPERATION\nThe MSSP consists of a transmit/receive shift (SSPSR) register and a buffer (SSPBUF) register. The SSPSR shifts the data in and out of the device, MSb first. The SSPBUF holds the data that was written to the SSPSR until the received data is ready. Once the 8 bits of data have been received, that byte is moved to the SSPBUF register. Then, the Buffer Full detect bit, BF (SSPSTAT<0>) and the interrupt  flag  bit,  SSPIF,  are set. This double-buffering of the received data (SSPBUF) allows the next byte to start reception before reading the data that was just received. Any write to the SSPBUF register during transmission/reception of data",
    "17.3.2 OPERATION\nWhen the application software is expecting to receive valid data, the SSPBUF needs to be read before the next byte of data to transfer is written to the SSPBUF. The Buffer Full bit, BF (SSPSTAT<0>), indicates when SSPBUF  has  been  loaded  with  the  received  data (transmission is complete). When the SSPBUF is read, the BF bit is cleared. This data may be irrelevant if the SPI is only a transmitter. Generally, the MSSP interrupt is used to determine when the transmission/reception has  completed.  The  SSPBUF  must  be  read  and/or written. If the interrupt method is not going to be used, then software polling can be done to ensure that a write collision  does  not  occur. Example 17-1 shows  the loading of the SSPBUF (SSPSR) for data transmission.\nThe SSPSR is not directly readable or writable and can only be accessed by addressing the SSPBUF register. Additionally,  the  MSSP  Status  (SSPSTAT)  register indicates the various status conditions.",
    "Note:\nThe SSPBUF register cannot be used with read-modify-write instructions such as BCF, BTFSC and COMF, etc.",
    "EXAMPLE 17-1: LOADING THE SSPBUF (SSPSR) REGISTER\nLOOP, 1 = BTFSS. LOOP, 2 = SSPSTAT, BF. LOOP, 3 = ;Has data been received (transmit complete)?. , 1 = BRA. , 2 = LOOP. , 3 = ;No. , 1 = MOVF. , 2 = SSPBUF, W. , 3 = ;WREG reg = contents of SSPBUF. , 1 = MOVWF. , 2 = RXDATA. , 3 = ;Save in user RAM, if data is meaningful. , 1 = MOVF. , 2 = TXDATA, W. , 3 = ;W reg = contents of TXDATA. , 1 = MOVWF. , 2 = SSPBUF. , 3 = ;New data to xmit\nNote:\nTo avoid lost data in Host mode, a read of the SSPBUF must be performed to clear the Buffer Full (BF) detect (SSPSTAT<0>) bit between each transmission.",
    "17.3.3 ENABLING SPI I/O\nTo  enable  the  serial  port,  MSSP  Enable  bit,  SSPEN (SSPCON1<5>), must be set. To reset or reconfigure SPI mode, clear the SSPEN  bit, reinitialize the SSPCON registers and then set the SSPEN bit. This configures the SDI, SDO, SCK and SS pins as serial port pins. For the pins to behave as the serial port function,  some must have their data direction bits (in the TRIS register) appropriately programmed as follows:\n\u00b7 SDI is automatically controlled by the SPI module\n\u00b7 SDO must have TRISC<5> bit cleared\n\u00b7 SCK (Host mode) must have TRISC<3> bit cleared\n\u00b7 SCK (Client mode) must have TRISC<3> bit set\n\u00b7 SS must have TRISA<5> bit set",
    "17.3.4 TYPICAL CONNECTION\nFigure 17-2 shows a typical connection between two microcontrollers. The host controller (Processor 1) initiates the data transfer by sending the SCK signal. Data is shifted  out  of  both  shift  registers  on  their  programmed clock edge and latched on the opposite edge of the clock. Both processors need to be programmed to the same Clock Polarity (CKP), then both controllers would  send  and  receive  data  at  the  same  time. Whether  the  data  is  meaningful  (or  dummy  data) depends  on  the  application  software.  This  leads  to three scenarios for data transmission:\n\u00b7 Host sends data - Client sends dummy data \uf020 \uf020\n\u00b7 Host sends data - Client sends data \uf020 \uf020\n\u00b7 Host sends dummy data - Client sends data \uf020 \uf020\nAny  serial  port  function  that  is  not  desired  may  be overridden  by  programming  the  corresponding  data direction (TRIS) register to the opposite value.",
    "17.3.5 HOST MODE\nThe  host  can  initiate  the  data  transfer  at  any  time because  it  controls  the  SCK.  The  host  determines when  the  Client  (Processor  2, Figure 17-2 ) is to broadcast data by the software protocol.\nIn Host mode, the data is transmitted/received as soon as the SSPBUF register is written to. If the SPI is only going  to  receive,  the  SDO  output  could  be  disabled (programmed  as  an  input).  The  SSPSR  register  will continue to shift in the signal present on the SDI pin at the programmed clock rate. As each byte is received, it will be loaded into the SSPBUF register as if a normal received byte (interrupts and status bits appropriately set). This could be useful in receiver applications as a 'Line Activity Monitor' mode.\nThe clock polarity is selected by appropriately programming the CKP (SSPCON1<4>) bit. This, then, would  give  waveforms  for  SPI  communication  as shown in Figure 17-3 , Figure 17-5 and Figure 17-6 , where the MSB is transmitted first. In Host mode, the SPI clock rate (bit rate) is user-programmable to be one of the following:",
    "17.3.5 HOST MODE\n\u00b7 FOSC/4 (or TCY)\n\u00b7 FOSC/16 (or 4 \u00b7 TCY)\n\u00b7 FOSC/64 (or 16 \u00b7 TCY)\n\u00b7 Timer2 output/2\nThis  allows  a  maximum  data  rate  (at  40  MHz)  of 10.00 Mbps.\nFigure 17-3 shows  the  waveforms  for  Host  mode. When the CKE bit is set, the SDO data is valid before there is a clock edge on SCK. The change of the input sample is shown based on the state of the SMP bit. The time  when  the  SSPBUF  is  loaded  with  the  received data is shown.",
    "17.3.6 CLIENT MODE\nIn Client mode, the data is transmitted and received as the  external  clock  pulses  appear  on  SCK.  When  the last bit is latched, the SSPIF interrupt flag bit is set.\nBefore  enabling  the  module  in  SPI  Client  mode,  the clock line must match the proper Idle state. The clock line can be observed by reading the SCK pin. The Idle state is determined by the CKP (SSPCON1<4>) bit.\nWhile in Client mode, the external clock is supplied by the external clock source on the SCK pin. This external clock must meet the minimum high and low times as specified in the electrical specifications.\nWhile in Sleep mode, the Client can transmit/receive data. When a byte is received, the device will wake-up from Sleep.",
    "17.3.7 CLIENT SELECT SYNCHRONIZATION\nmust be high. When the SS pin is low, transmission and reception are enabled and the SDO pin is driven. When the SS pin goes high, the SDO pin is no longer driven, even if in the middle of a transmitted byte and becomes a  floating  output.  External  pull-up/pull-down  resistors may be desirable depending on the application.\nNote 1: When the SPI is in Client mode with SS pin control enabled (SSPCON<3:0> = 0100 ), the SPI module will reset if the SS pin is set to VDD.\n2: If the SPI is used in Client mode with CKE set,  then  the  SS  pin  control  must  be enabled.\nWhen the SPI module resets, the bit counter is forced to ' 0 '. This can be done by either forcing the SS pin to a high level or clearing the SSPEN bit.\nThe SS pin allows a Synchronous Client mode. The SPI must be in Client mode with SS pin control enabled (SSPCON1<3:0> = 04h). The pin must not be driven low for the SS pin to function as an input. The data latch",
    "17.3.7 CLIENT SELECT SYNCHRONIZATION\nTo emulate two-wire communication, the SDO pin can be connected to the SDI pin. When the SPI needs to operate as a receiver, the SDO pin can be configured as an input. This disables transmissions from the SDO. The SDI can always be left as an input (SDI function) since it cannot create a bus conflict.\nFIGURE 17-4: CLIENT SYNCHRONIZATION WAVEFORM",
    "PIC18F2420/2520/4420/4520\nFIGURE 17-6:\nSPI MODE WAVEFORM (CLIENT MODE WITH CKE =\n)\n1",
    "17.3.9 EFFECTS OF A RESET\nIn SPI Host mode, module clocks may be operating at a different speed than when in full-power mode; in the case of Sleep mode, all clocks are halted.\nIn most Idle modes, a clock is provided to the peripherals.  That  clock  needs  to  be  from  the  primary  clock source,  the secondary  clock  (Timer1  oscillator  at 32.768 kHz) or the INTOSC source. See Section 2.7 'Clock Sources and Oscillator Switching' for additional information.\nIn most cases, the speed that the host clocks SPI data is not important; however, this needs to be evaluated for each system.\nIf MSSP interrupts are enabled, they can wake the controller from Sleep mode, or one of the Idle modes, when the host completes sending data. If an exit from Sleep or Idle mode is not desired, MSSP interrupts need to be disabled.\nIf  the  Sleep  mode  is  selected,  all  module  clocks  are halted  and  the  transmission/reception  will  remain  in that  state  until  the  devices  wakes.  After  the  device returns to Run mode, the module will resume transmitting and receiving data.\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.3.10 BUS MODE COMPATIBILITY\nTable 17-1 shows the compatibility between the standard SPI modes and the states of the CKP and CKE control bits.",
    "TABLE 17-1: SPI BUS MODES\n0, 0, Control Bits State.CKP = 0. 0, 0, Control Bits State.CKE = 1. 0, 1, Control Bits State.CKP = 0. 0, 1, Control Bits State.CKE = 0. 1, 0, Control Bits State.CKP = 1. 1, 0, Control Bits State.CKE = 1. 1, 1, Control Bits State.CKP = 1. 1, 1, Control Bits State.CKE = 0\nThere is also an SMP bit which controls when the data is sampled.\nIn  SPI  Client  mode,  the  SPI  Transmit/Receive  Shift register  operates  asynchronously  to  the  device. This allows the device to be placed in any power-managed mode  and  data  to  be  shifted  into  the  SPI  Transmit/ Receive  Shift  register.  When  all  8  bits  have  been received, the MSSP interrupt flag bit will be set, and if enabled, will wake the device.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTAData Direction Register. TRISA, Bit 4 = PORTAData Direction Register. TRISA, Bit 3 = PORTAData Direction Register. TRISA, Bit 2 = PORTAData Direction Register. TRISA, Bit 1 = PORTAData Direction Register. TRISA, Bit 0 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nPORTAData Direction Register. TRISA, Reset Values on page = 48. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on page = 48. SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nBuffer/Transmit Register. SSPBUF, Reset Values on page = 46. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Reset Values on page = 46. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Reset Values on page = 46\nLegend:\nShaded cells are not used by the MSSP in SPI mode.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nNote 1: These bits are unimplemented in 28-pin devices; always maintain these bits clear.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "17.4.1 REGISTERS\nThe MSSP module in I 2 C  mode  fully  implements  all host and Client functions (including general call support) and provides interrupts on Start and Stop bits in hardware  to determine  a free bus (multi-host function). The MSSP module implements the standard mode  specifications, as well as  7-Bit and  10-Bit Addressing modes.\nTwo pins are used for data transfer:\n\u00b7 Serial clock (SCL) - RC3/SCK/SCL\n\u00b7 Serial data (SDA) - RC4/SDI/SDA\nThe user must configure these pins as inputs or outputs through the TRISC<4:3> bits.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C MODE)\nThe MSSP module has six registers for I 2 C operation. These are:\n\u00b7 MSSP Control (SSPCON1) Register 1\n\u00b7 MSSP Control (SSPCON2) Register 2\n\u00b7 MSSP Status (SSPSTAT) Register\n\u00b7 Serial Receive/Transmit Buffer (SSPBUF) Register\n\u00b7 MSSP Shift (SSPSR) Register - Not directly accessible\n\u00b7 MSSP Address (SSPADD) Register\nSSPCON1,  SSPCON2  and  SSPSTAT  are  the  control and status registers in I 2 C mode operation. The     SSPCON1 and SSPCON2 registers are readable and writable. The  lower  6  bits  of  the  SSPSTAT  are  read-only. The upper two bits of the SSPSTAT are read/write.\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C MODE)\nSSPADD  register  holds  the  Client  device  address when  the  MSSP  is  configured  in  I C  Client  mode. 2 When the MSSP is configured in Host mode, the lower seven bits of SSPADD act as the Baud Rate Generator reload value.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission, the SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nSMP, R/W-0 = CKE. SMP, R-0 = D/A. SMP, R-0 = P (1). SMP, R-0 = S (1). SMP, R-0 = R/W (2,3). SMP, R-0 = UA. SMP, R-0 = BF. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 0",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nSMP: Slew Rate Control bit",
    "In Host or Client mode:\n1 = Slew rate control disabled for Standard Speed mode (100 kHz and 1 MHz)\n0 = Slew rate control enabled for High-Speed mode (400 kHz)\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "In Host mode:\nReserved.",
    "In Client mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address",
    "bit 4 P: Stop bit (1)\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last",
    "bit 3 S: Start bit\n(1)\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last",
    "bit 2 R/W: Read/Write Information bit (I\n2 C mode only) (2,3)",
    "In Client mode:\n1 = Read\n0 = Write",
    "In Host mode:\n1 = Transmit is in progress\n0 = Transmit is not in progress",
    "UA: Update Address bit (10-Bit Client mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated",
    "In Transmit mode:\n1 = SSPBUF is full\n0 = SSPBUF is empty",
    "In Receive mode:\n1 = SSPBUF is full (does not include the ACK and Stop bits)\n0 = SSPBUF is empty (does not include the ACK and Stop bits)\nNote 1: This bit is cleared on Reset and when SSPEN is cleared.\n2: This bit holds the R/W bit information following the last address match. This bit is only valid from the address match to the next Start bit, Stop bit or not ACK bit.\n3: ORing this bit with SEN, RSEN, PEN, RCEN or ACKEN will indicate if the MSSP is in Active mode.",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C\u2122 MODE)\nWCOL, R/W-0 = SSPOV. WCOL, R/W-0 = SSPEN (1). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3. WCOL, R/W-0 = SSPM2. WCOL, R/W-0 = SSPM1. WCOL, R/W-0 = SSPM0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit\nIn Host Transmit mode:\n1 = A  write  to  the  SSPBUF  register  was  attempted  while  the  I 2 C  conditions  were  not  valid  for  a transmission to be started (must be cleared in software)\n0 = No collision",
    "In Client Transmit mode:\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision\nIn Receive mode (Host or Client modes):\nThis is a 'don't care' bit.",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nIn Receive mode:\n1 = A byte is received while the SSPBUF register is still holding the previous byte (must be cleared in software)\n0 = No overflow",
    "In Transmit mode:\nThis is a 'don't care' bit in Transmit mode.\nSSPEN:\nHost Synchronous Serial Port Enable bit\n(1)\n1 = Enables the serial port and configures the SDA and SCL pins as the serial port pins\n0 = Disables serial port and configures these pins as I/O port pins",
    "bit 4 CKP: SCK Release Control bit\nIn Client mode:\n1 = Releases clock\n0 = Holds clock low (clock stretch), used to ensure data setup time",
    "In Host mode:\nUnused in this mode.",
    "bit 3-0 SSPM<3:0>: Host Synchronous Serial Port Mode Select bits (2)\n1111 = I 2 C Client mode, 10-bit address with Start and Stop bit interrupts enabled\n1011 = I 2 C Firmware Controlled Host mode (Client Idle)\n1110 = I 2 C Client mode, 7-bit address with Start and Stop bit interrupts enabled\n1000 = I 2 C Host mode, clock = FOSC/(4 * (SSPADD + 1))\n0110 = I 2 C Client mode, 7-bit address\n0111 = I 2 C Client mode, 10-bit address\nBit combinations not specifically listed here are either reserved or implemented in SPI mode only.",
    "Note 1: When enabled, the SDA and SCL pins must be properly configured as inputs or outputs.\nbit 5",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nGCEN, R/W-0 = ACKSTAT. GCEN, R/W-0 = ACKDT (2). GCEN, R/W-0 = ACKEN (1). GCEN, R/W-0 = RCEN (1). GCEN, R/W-0 = PEN (1). GCEN, R/W-0 = RSEN (1). GCEN, R/W-0 = SEN (1). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7 GCEN: General Call Enable bit (Client mode only)\n1 = Enables interrupt when a general call address (0000h) is received in the SSPSR\n0 = General call address disabled.\nbit 6 ACKSTAT: Acknowledge Status bit (Host Transmit mode only)\n1 = Acknowledge was not received from Client\n0 = Acknowledge was received from Client\nbit 5\nACKDT: Acknowledge Data bit (Host Receive mode only) (2)\n1 = Not Acknowledge\n0 = Acknowledge\nbit 4",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nACKEN: Acknowledge Sequence Enable bit (Host Receive mode only) (1)\n1 = Initiates  Acknowledge sequence  on  SDA  and  SCL  pins  and  transmit  ACKDT  data  bit. Automatically cleared by hardware.\n0 = Acknowledge sequence Idle",
    "bit 3 RCEN: Receive Enable bit (Host mode only) (1)\n1 = Enables Receive mode for I 2 C\n0 = Receive Idle\nbit 2\nPEN: Stop Condition Enable bit (Host mode only) (1)\n1 = Initiates Stop condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Stop condition Idle\nbit 1 RSEN: Repeated Start Condition Enable bit (Host mode only) (1)\n1 = Initiates Repeated Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Repeated Start condition Idle",
    "bit 0\nSEN: Start Condition Enable/Stretch Enable bit (1)",
    "In Host mode:\n1 = Initiates Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Start condition Idle",
    "In Client mode:\n1 = Clock stretching is enabled for both Client transmit and Client receive (stretch enabled)\n0 = Clock stretching is disabled\nNote 1: For bits ACKEN, RCEN, PEN, RSEN, SEN: If the I 2 C module is not in the Idle mode, these bits may not be set (no spooling) and the SSPBUF may not be written (or writes to the SSPBUF are disabled).\n2: Value that will be transmitted when the user initiates an Acknowledge sequence at the end of a receive.",
    "17.4.3.1 Addressing\nThe MSSP module functions are enabled by setting the MSSP Enable bit, SSPEN (SSPCON1<5>).\nThe  SSPCON1  register  allows  control  of  the  I 2 C operation. Four mode selection bits (SSPCON1<3:0>) allow one of the following I 2 C modes to be selected:\n\u00b7 I 2 C Host mode, clock = (FOSC/4) x (SSPADD + 1)\n\u00b7 I 2 C Client mode (7-bit addressing)\n\u00b7 I 2 C Client mode (10-bit addressing)\n\u00b7 I 2 C Client mode (7-bit addressing) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Client mode (10-bit addressing) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Firmware Controlled Host mode, Client is Idle\nSelection  of  any  I 2 C  mode,  with  the  SSPEN  bit  set, forces  the  SCL  and  SDA  pins  to  be  open-drain, provided  these  pins  are  programmed  to  inputs  by setting the appropriate TRISC bits. To ensure proper operation  of  the  module,  pull-up  resistors  must  be provided externally to the SCL and SDA pins.",
    "17.4.3 CLIENT MODE\nIn Client mode, the SCL and SDA pins must be configured as inputs (TRISC<4:3> set). The MSSP module will override the input state with the output data when required (Client-transmitter).\nThe I 2 C Client mode hardware will always generate an interrupt  on  an  address  match.  Through  the  mode select  bits,  the  user  can  also  choose  to  interrupt  on Start and Stop bits\nWhen an address is matched, or the data transfer after an address match is received, the hardware automatically will generate the Acknowledge (ACK) pulse and load  the  SSPBUF  register  with  the  received  value currently in the SSPSR register.\nAny combination of the following conditions will cause the MSSP module not to give this ACK pulse:\n\u00b7 The Buffer Full bit, BF (SSPSTAT<0>), was set before the transfer was received.\n\u00b7 The overflow bit, SSPOV (SSPCON2<6>), was set before the transfer was received.",
    "17.4.3 CLIENT MODE\nIn this  case, the SSPSR register value is not loaded into the SSPBUF, but bit, SSPIF (PIR1<3>), is set. The BF bit is cleared by reading the SSPBUF register, while bit SSPOV is cleared through software.\nThe SCL clock input must have a minimum high and low for proper operation. The high and low times of the I 2 C  specification,  as  well  as  the  requirement  of  the MSSP module, are shown in timing parameter 100 and parameter 101.\nOnce the MSSP module has been enabled, it waits for a Start condition to occur. Following the Start condition, the  8  bits  are  shifted  into  the  SSPSR  register.  All incoming bits are sampled with the rising edge of the clock (SCL) line. The value of register SSPSR<7:1> is compared to the value of the SSPADD register. The address is compared on the falling edge of the eighth clock (SCL) pulse. If the addresses match and the BF and SSPOV bits are clear, the following events occur:",
    "17.4.3 CLIENT MODE\n1. The  SSPSR  register  value  is  loaded  into  the SSPBUF register.\n2. The Buffer Full bit, BF, is set.\n3. An ACK pulse is generated.\n4. MSSP Interrupt  Flag  bit,  SSPIF  (PIR1<3>),  is set  (interrupt  is  generated,  if  enabled)  on  the falling edge of the ninth SCL pulse.\nIn 10-Bit Addressing mode, two address bytes need to be received by the Client. The five Most Significant bits (MSbs) of the first address byte specify if this is a 10-bit address. Bit, R/W (SSPSTAT<2>), must specify a write so the Client device will receive the second address byte. For a 10-bit address, the first byte would equal ' 11110 A9 A8 0 ', where ' A9 ' and ' A8 ' are the two MSbs of the address. The sequence of events for 10-Bit Addressing  mode  is  as  follows,  with  steps  7 through 9 for the Client-transmitter:",
    "17.4.3 CLIENT MODE\n1. Receive first (high) byte of address (bits, SSPIF, BF and UA (SSPSTAT<1>), are set).\n2. Update the SSPADD register with second (low) byte of address (clears UA bit and releases the SCL line).\n3. Read the SSPBUF register (clears BF bit) and clear flag bit, SSPIF.\n4. Receive  second  (low)  byte  of  address  (bits, SSPIF, BF and UA, are set).\n5. Update the SSPADD register with the first (high) byte of address. If match releases SCL line, this will clear bit, UA.\n6. Read the SSPBUF register (clears BF bit) and clear flag bit, SSPIF.\n7. Receive Repeated Start condition.\n8. Receive first (high) byte of address (bits, SSPIF and BF, are set).\n9. Read the SSPBUF register (clears BF bit) and clear flag bit, SSPIF.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the address byte is clear and an address match occurs, the R/W bit  of  the  SSPSTAT register is cleared. The received address is loaded into the  SSPBUF  register  and  the  SDA  line  is  held  low (ACK).\nWhen the address byte overflow condition exists, then the no Acknowledge (ACK) pulse is given. An overflow condition is defined as either bit, BF (SSPSTAT<0>), is set, or bit, SSPOV (SSPCON1<6>), is set.\nAn MSSP interrupt is generated for each data transfer byte.  Flag  bit,  SSPIF  (PIR1<3>),  must  be  cleared  in software. The SSPSTAT register is used to determine the status of the byte.\nIf SEN is enabled (SSPCON2<0> = 1 ), RC3/SCK/SCL will  be  held  low  (clock  stretch)  following  each  data transfer.  The  clock  must  be  released  by  setting  bit, CKP  (SSPCON<4>). See Section 17.4.4 'Clock Stretching' for more details.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the incoming address byte is set and  an  address  match  occurs,  the  R/W  bit  of  the SSPSTAT  register  is  set.  The  received  address  is loaded into the SSPBUF register. The ACK pulse will be sent on the ninth bit and the RC3/SCK/SCL pin is held low regardless of SEN  (see Section 17.4.4 'Clock Stretching' for more detail). By stretching the clock, the host will be unable to assert another clock pulse  until  the  Client  is  done  preparing  the  transmit data.  The  transmit  data  must  be  loaded  into  the SSPBUF register which also loads the SSPSR register. Then the RC3/SCK/SCL pin needs to be enabled by setting  bit,  CKP  (SSPCON1<4>). The eight data bits are shifted out on the falling edge of the SCL input. This ensures that  the  SDA  signal  is  valid  during  the  SCL high time ( Figure 17-9 ).",
    "17.4.3.3 Transmission\nThe ACK pulse from the host-receiver is latched on the rising edge of the ninth SCL input pulse. If the SDA line is high (not ACK), then the data transfer is complete. In this case, when the ACK is latched by the Client, the Client logic is reset (resets SSPSTAT register) and the Client monitors for another occurrence of the Start bit. If the SDA line was low (ACK), the next transmit data must be loaded into the SSPBUF register. Again, the RC3/SCK/SCL pin must be enabled by setting bit, CKP.\nAn MSSP interrupt is generated for each data transfer byte. The SSPIF bit must be cleared in software and the SSPSTAT register is used to determine the status of the byte. The SSPIF bit is set on the falling edge of the ninth clock pulse.",
    "17.4.4 CLOCK STRETCHING\nBoth 7-Bit and 10-Bit Client modes implement automatic clock stretching during a transmit sequence.",
    "17.4.4.3 Clock Stretching for 7-Bit Client Transmit Mode\nThe SEN (SSPCON2<0>) bit allows clock stretching to be  enabled  during  receives.  Setting  SEN  will  cause the  SCL  pin  to  be  held  low  at  the  end  of  each  data receive sequence.",
    "17.4.4.1 Clock Stretching for 7-Bit Client Receive Mode (SEN = 1 )\nIn 7-Bit Client Receive mode, on the falling edge of the ninth clock at the end of the ACK sequence if the BF bit  is  set,  the  CKP  bit  in  the  SSPCON1  register  is automatically  cleared,  forcing  the  SCL  output  to  be held low. The CKP being cleared to ' 0 '  will assert the SCL line low. The CKP bit must be set in the user's Interrupt  Service  Routine  (ISR)  before  reception  is allowed to continue. By holding the SCL line low, the user has time to service the ISR and read the contents of  the  SSPBUF  before  the  host  device  can  initiate another  receive  sequence.  This  will  prevent  buffer overruns from occurring (see Figure 17-13 ).",
    "17.4.4.1 Clock Stretching for 7-Bit Client Receive Mode (SEN = 1 )\nNote 1: If the  user  reads  the  contents  of  the SSPBUF  before  the  falling  edge  of  the ninth clock, thus clearing the BF bit, the CKP  bit  will  not  be  cleared  and  clock stretching will not occur.\n2: The CKP bit can be set in software regardless  of  the  state  of  the  BF  bit.  The  user needs to be careful to clear the BF bit in the ISR before the next receive sequence in order to prevent an overflow condition.",
    "17.4.4.2 Clock Stretching for 10-Bit Client Receive Mode (SEN = 1 )\nIn  10-Bit  Client  Receive  mode  during  the  address sequence,  clock  stretching  automatically  takes  place but CKP is not cleared. During this time, if the UA bit is set  after  the  ninth  clock,  clock  stretching  is  initiated. The UA bit is set after receiving the upper byte of the 10-bit address and following the receive of the second byte of the 10-bit address with the R/W bit cleared to ' 0 '. The release of the clock line occurs upon updating SSPADD.  Clock  stretching  will  occur  on  each  data receive sequence as described in 7-bit mode.\nNote: If the user polls the UA bit and clears it by updating the SSPADD register before the falling edge of the ninth clock occurs and if the user hasn't cleared the BF bit by reading the SSPBUF register before that time, then the CKP bit will still NOT be asserted low.  Clock  stretching  on  the  basis  of  the state  of  the  BF  bit  only  occurs  during  a data sequence, not an address sequence.",
    "17.4.4.2 Clock Stretching for 10-Bit Client Receive Mode (SEN = 1 )\n7-Bit Client Transmit mode implements clock stretching by clearing the CKP bit after the falling edge of the ninth clock if the BF bit is clear. This occurs regardless of the state of the SEN bit.\nThe user's ISR must set the CKP bit before transmission  is  allowed  to  continue.  By  holding  the  SCL  line low, the user has time to service the ISR and load the contents  of  the  SSPBUF  before  the  host  device  can initiate another transmit sequence (see Figure 17-9 ).\nNote 1: If the user loads the contents of SSPBUF, setting the BF bit before the falling edge of the  ninth  clock,  the  CKP  bit  will  not  be cleared and clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit.",
    "17.4.4.4 Clock Stretching for 10-Bit Client Transmit Mode\nIn 10-Bit Client Transmit mode, clock stretching is controlled during the first two address sequences by the state of the UA bit, just as it is in 10-Bit Client Receive mode. The first two addresses are followed by a third address sequence which contains the high-order bits of the 10-bit address and the R/W bit set to ' 1 '.  After the third address sequence is performed, the UA bit is not  set,  the  module  is  now  configured  in  Transmit mode and clock stretching is controlled by the BF flag as in 7-Bit Client Transmit mode (see Figure 17-11 ).",
    "17.4.4.5 Clock Synchronization and the CKP bit\nWhen the CKP bit is cleared, the SCL output is forced to ' 0 '. However, clearing the CKP bit will not assert the SCL output low until the SCL output is already sampled  low.  Therefore,  the  CKP  bit  will  not  assert  the\nSCL line until an external I 2 C host device has already asserted the SCL line. The SCL output will remain low until the CKP bit is set and all other devices on the I 2 C bus have deasserted SCL. This ensures that a write to the  CKP  bit  will  not  violate  the  minimum  high  time requirement for SCL (see Figure 17-12 ).",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nThe addressing procedure for the I 2 C bus is such that the first byte after the Start condition usually determines which device will be the Client addressed by the host. The exception is the general call address which can address all devices. When this address is used, all devices need to, in theory, respond with an Acknowledge.\nThe  general  call  address  is  one  of  eight  addresses reserved for specific purposes by the I 2 C protocol. It consists of all ' 0 's with R/W = 0 .\nThe general call address is recognized when the General Call Enable bit, GCEN, is enabled (SSPCON2<7> is set). Following a Start bit detect, 8 bits are shifted into the SSPSR and the address is compared against the SSPADD.  It  is  also  compared  to  the  general  call address and fixed in hardware.\nIf  the  general  call  address  matches,  the  SSPSR  is transferred to the SSPBUF, the BF flag bit is set (eighth bit) and on the falling edge of the ninth bit (ACK bit), the SSPIF interrupt flag bit is set.",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nWhen  the  interrupt  is  serviced,  the  source  for  the interrupt can be checked by reading the contents of the SSPBUF. The value can be used to determine if the address was device specific or a general call address.\nIn 10-bit mode, the SSPADD is required to be updated for the second half of the address to match and the UA bit is set (SSPSTAT<1>). If the general call address is sampled when the GCEN bit is set, while the Client is configured in 10-Bit Addressing mode, then the second half of the address is not necessary, the UA bit will not be set and the Client will begin receiving data after the Acknowledge ( Figure 17-15 ).",
    "Note:\nHost  mode  is  enabled  by  setting  and  clearing  the appropriate SSPM bits in SSPCON1 and by setting the SSPEN bit. In Host mode, the SCL and SDA lines are manipulated by the MSSP hardware.\nHost mode of operation is supported by interrupt generation on the detection of the Start and Stop conditions. The Stop (P) and Start (S) bits are cleared from a Reset or when the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit is set, or the bus is Idle, with both the S and P bits clear.\nThe  MSSP  module,  when  configured  in I 2 C Host mode, does not allow queueing of events. For instance, the user is not allowed  to  initiate  a  Start  condition  and immediately write the SSPBUF register to initiate transmission before the Start condition is complete. In this case, the SSPBUF will not be written to and the WCOL bit will be set, indicating that a write to the SSPBUF did not occur.\nIn Firmware Controlled Host mode, user code conducts all I 2 C bus operations based on Start and Stop bit conditions.\nOnce Host mode is enabled, the user has six options.",
    "Note:\n1. Assert a Start condition on SDA and SCL.\n2. Assert a Repeated Start condition on SDA and SCL.\n3. Write to the SSPBUF register initiating transmission of data/address.\n4. Configure the I 2 C port to receive data.\n5. Generate an Acknowledge condition at the end of a received byte of data.\n6. Generate a Stop condition on SDA and SCL.",
    "FIGURE 17-16: MSSP BLOCK DIAGRAM (I 2 C\u2122 HOST MODE)\nThe  following  events  will  cause  the  MSSP  Interrupt Flag bit, SSPIF, to be set (MSSP interrupt, if enabled):\n\u00b7 Start condition\n\u00b7 Stop condition\n\u00b7 Data transfer byte transmitted/received\n\u00b7 Acknowledge transmit\n\u00b7 Repeated Start",
    "17.4.6.1 I 2 C Host Mode Operation\nA typical transmit sequence would go as follows:\nThe host device generates all of the serial clock pulses and the Start and Stop conditions.   A transfer is ended with a Stop condition or with a Repeated Start condition.  Since  the  Repeated  Start  condition  is  also  the beginning of the next serial transfer, the I 2 C bus will not be released.\nIn Host Transmitter mode, serial data is output through SDA, while SCL outputs the serial clock. The first byte transmitted contains the Client address of the receiving device  (7  bits)  and  the  Read/Write  (R/W)  bit.  In  this case, the R/W bit will be logic ' 0 '. Serial data is transmitted 8 bits at a time. After each byte is transmitted, an Acknowledge bit is received. Start and Stop conditions are output to indicate the beginning and the end of a serial transfer.",
    "17.4.6.1 I 2 C Host Mode Operation\nIn Host Receive mode, the first byte transmitted contains  the  Client  address  of  the  transmitting  device (7 bits) and the R/W bit. In this case, the R/W bit will be logic ' 1 '. Thus, the first byte transmitted is a 7-bit Client address  followed  by  a  ' 1 '  to  indicate  the  receive  bit. Serial data is received via SDA, while SCL outputs the serial clock. Serial data is received 8 bits at a time. After each byte is received, an Acknowledge bit is transmitted.  Start  and  Stop conditions indicate the beginning and end of transmission.\nThe  Baud  Rate  Generator  used  for  the  SPI  mode operation is used to set the SCL clock frequency for either 100 kHz, 400 kHz or 1 MHz I 2 C operation. See Section 17.4.7 'Baud Rate' for more detail.",
    "17.4.6.1 I 2 C Host Mode Operation\n1. The user generates a Start condition by setting the Start Enable bit, SEN (SSPCON2<0>).\n2. SSPIF is set. The MSSP module will wait the required  start  time  before  any  other  operation takes place.\n3. The  user  loads  the  SSPBUF  with  the  Client address to transmit.\n4. Address is shifted out the SDA pin until all 8 bits are transmitted.\n5. The MSSP module shifts in the ACK bit from the Client device and writes its value into the SSPCON2 (SSPCON2<6>) register.\n6. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.\n7. The user loads the SSPBUF with eight bits of data.\n8. Data is shifted out the SDA pin until all 8 bits are transmitted.\n9. The MSSP module shifts in the ACK bit from the Client device and writes its value into the SSPCON2 (SSPCON2<6>) register.\n10. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.",
    "17.4.6.1 I 2 C Host Mode Operation\n11. The user generates a Stop condition by setting the Stop Enable bit, PEN (SSPCON2<2>).\n12. Interrupt is generated once the Stop condition is complete.",
    "17.4.7 BAUD RATE\nIn  I 2 C  Host  mode,  the  Baud  Rate  Generator  (BRG) reload  value  is  placed  in  the  lower  7  bits  of  the SSPADD register ( Figure 17-17 ). When a write occurs to SSPBUF, the Baud Rate Generator will automatically begin counting. The BRG counts down to 0 and stops until another reload has taken place. The BRG count is decremented twice per instruction cycle (TCY) on the Q2  and  Q4  clocks.  In  I 2 C  Host  mode,  the  BRG  is reloaded automatically.\nOnce the given operation is complete (i.e., transmission of the last data bit is followed by ACK), the internal clock will automatically stop counting and the SCL pin will remain in its last state.\nTable 17-3 demonstrates clock rates based on instruction  cycles  and  the  BRG  value  loaded  into SSPADD.",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\n10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 18h. 10 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 1Fh. 10 MHz, FSCL (2 Rollovers of BRG) = 312.5 kHz. 10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 63h. 10 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 09h. 4 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 0Ch. 4 MHz, FSCL (2 Rollovers of BRG) = 308 kHz. 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 27h. 4 MHz, FSCL (2 Rollovers of BRG) = 100",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\nkHz. 1 MHz, FCY * 2 = 2 MHz. 1 MHz, BRG Value = 02h. 1 MHz, FSCL (2 Rollovers of BRG) = 333 kHz (1). 1 MHz, FCY * 2 = 2 MHz. 1 MHz, BRG Value = 09h. 1 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 1 MHz, FCY * 2 = 2 MHz. 1 MHz, BRG Value = 00h. 1 MHz, FSCL (2 Rollovers of BRG) = 1 MHz (1)\nNote 1: The I 2 C interface does not conform to the 400 kHz I 2 C specification (which applies to rates greater than 100 kHz) in all details, but may be used with care where higher rates are required by the application.",
    "17.4.7.1 Clock Arbitration\nClock  arbitration  occurs  when  the  host,  during  any receive,  transmit  or  Repeated  Start/Stop  condition, deasserts  the  SCL  pin  (SCL  allowed  to  float  high). When the SCL pin is allowed to float high, the Baud Rate  Generator  (BRG)  is  suspended  from  counting until the SCL pin is actually sampled high. When the\nSCL pin is sampled high, the Baud Rate Generator is reloaded  with  the  contents  of  SSPADD<6:0>  and begins counting. This ensures that the SCL high time will always be at least one BRG rollover count in the event that the clock is held low by an external device ( Figure 17-18 ).",
    "17.4.8 I 2 C HOST MODE START CONDITION TIMING\nTo  initiate  a  Start  condition,  the  user  sets  the  Start Enable bit, SEN (SSPCON2<0>). If the SDA and SCL pins  are  sampled  high,  the  Baud  Rate  Generator  is reloaded with the contents of SSPADD<6:0> and starts its count. If SCL and SDA are both sampled high when the Baud Rate Generator times out (TBRG), the SDA pin is driven low. The action of the SDA being driven low while SCL is high is the Start condition and causes the S (SSPSTAT<3>) bit to be set. Following this, the Baud Rate Generator is reloaded with the contents of SSPADD<6:0> and resumes its count. When the Baud Rate  Generator  times  out  (TBRG),  the  SEN  (SSPCON2<0>) bit will be automatically cleared by hardware;  the  Baud  Rate  Generator  is  suspended, leaving the SDA line held low and the Start condition is complete.\nNote:",
    "17.4.8 I 2 C HOST MODE START CONDITION TIMING\nIf, at the beginning of the Start condition, the SDA and SCL pins are already sampled  low,  or  if  during  the  Start  condition, the  SCL  line  is  sampled  low  before  the SDA  line  is  driven  low,  a  bus  collision occurs,  the  Bus  Collision  Interrupt  Flag, BCLIF, is set, the Start condition is aborted and  the  I 2 C  module  is  reset  into  its  Idle state.",
    "17.4.8.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Start sequence is in progress, the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nNote:, 1 = Because queueing of events is not allowed, writing to the lower 5 bits of SSP- CON2 is disabled until the Start condition is complete.",
    "17.4.9 I 2 C HOST MODE REPEATED START CONDITION TIMING\n- Note 1: If  RSEN is programmed while any other event is in progress, it will not take effect.",
    "17.4.9 I 2 C HOST MODE REPEATED START CONDITION TIMING\nA  Repeated  Start  condition  occurs  when  the  RSEN (SSPCON2<1>) bit is programmed high and the I 2 C logic module is in the Idle state. When the RSEN bit is set, the SCL pin is asserted low. When the SCL pin is sampled low, the Baud Rate Generator is loaded with the  contents  of  SSPADD<5:0>  and  begins  counting. The SDA pin is released (brought high) for one Baud Rate  Generator  count  (TBRG).  When  the  Baud  Rate Generator times out, if SDA is sampled high, the SCL pin  will  be  deasserted  (brought  high).  When  SCL  is sampled  high,  the  Baud  Rate  Generator  is  reloaded with the contents of SSPADD<6:0> and begins counting. SDA and SCL must be sampled high for one TBRG. This action is then followed by assertion of the SDA pin (SDA = 0 ) for one TBRG while SCL is high. Following this, the RSEN (SSPCON2<1>) bit will be automatically cleared  and  the  Baud  Rate  Generator  will  not",
    "17.4.9 I 2 C HOST MODE REPEATED START CONDITION TIMING\nbe reloaded, leaving the SDA pin held low. As soon as a Start condition is detected on the SDA and SCL pins, the S (SSPSTAT<3>) bit will be set. The SSPIF bit will not be set until the Baud Rate Generator has timed out.\n2: A bus collision during the Repeated Start condition occurs if:\n\u00b7SDA is sampled low when SCL goes from low-to-high.\n\u00b7SCL goes low before SDA is asserted low. This may indicate that another host is attempting to transmit a data ' 1 '.\nImmediately following the SSPIF bit getting set, the user may write the SSPBUF with the 7-bit address in 7-bit mode or the default first address in 10-bit mode. After the first eight bits are transmitted and an ACK is received, the  user  may  then  transmit  an  additional  eight  bits  of address (10-bit mode) or eight bits of data (7-bit mode).",
    "17.4.9.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Repeated Start sequence  is  in  progress,  the  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "Note:\nBecause queueing of events is not allowed, writing of the lower 5 bits of SSP- CON2 is disabled until the Repeated Start condition is complete.",
    "17.4.10 I 2 C HOST MODE TRANSMISSION\nTransmission  of  a  data  byte,  a  7-bit  address  or  the other half of a 10-bit address is accomplished by simply writing a value to the SSPBUF register. This action will set the Buffer Full flag bit, BF, and allow the Baud Rate Generator to begin counting and start the next transmission.  Each  bit  of  address/data  will  be  shifted  out onto  the  SDA  pin  after  the  falling  edge  of  SCL  is asserted (see data hold time specification parameter 106).  SCL  is  held  low  for  one  Baud",
    "17.4.10 I 2 C HOST MODE TRANSMISSION\nRate Generator rollover count (TBRG). Data needs to be valid before SCL is released high (see data setup time specification parameter 107). When the SCL pin is released high, it is held that way for TBRG. The data on the SDA pin must remain stable for that duration and some hold time after the next falling edge of SCL. After the eighth bit is shifted out (the falling edge of the eighth clock), the BF flag is cleared and the host releases SDA. This allows the Client device being addressed to respond with an ACK bit during the ninth bit time if an address match occurred, or if data was received properly. The status of ACK is written into the ACKDT bit on the falling  edge  of  the  ninth  clock.  If  the  host  receives  an Acknowledge, the Acknowledge Status bit, ACKSTAT, is cleared. If not, the bit is set. After the ninth clock, the SSPIF bit is set and the host clock (Baud Rate Generator)  is  suspended until the next data byte is loaded into the SSPBUF, leaving SCL low and SDA unchanged ( Figure 17-21 ).",
    "17.4.10 I 2 C HOST MODE TRANSMISSION\nAfter the write to the SSPBUF, each bit of the address will be shifted out on the falling edge of SCL until all seven address bits and the R/W bit are completed. On the falling edge of the eighth clock, the host will deassert the SDA pin, allowing the Client to respond with an Acknowledge. On the falling edge of the ninth clock, the host will sample the SDA pin to see if the address was recognized  by  a  Client.  The  status  of  the ACK  bit  is loaded into the ACKSTAT status (SSPCON2<6>) bit. Following the falling edge of the ninth clock transmission of the address, the SSPIF is set, the BF flag is cleared and the Baud Rate Generator is turned off until another write to the SSPBUF takes place, holding SCL low and allowing SDA to float.",
    "17.4.10.1 BF Status Flag\nIn  Transmit  mode,  the  BF  (SSPSTAT<0>)  bit  is  set when the CPU writes to SSPBUF and is cleared when all 8 bits are shifted out.",
    "17.4.10.2 WCOL Status Flag\nIf  the  user  writes  the  SSPBUF  when  a  transmit  is already in progress (i.e., SSPSR is still shifting out a data byte), the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nWCOL must be cleared in software.",
    "17.4.10.3 ACKSTAT Status Flag\nIn Transmit mode, the ACKSTAT (SSPCON2<6>) bit is cleared  when  the  Client  has  sent  an  Acknowledge (ACK = 0 ) and is set when the Client does not Acknowledge (ACK = 1 ). A Client sends an Acknowledge when it has recognized its address (including a general call), or when the Client has properly received its data.",
    "17.4.11 I 2 C HOST MODE RECEPTION\nHost mode reception is enabled by programming the Receive Enable bit, RCEN (SSPCON2<3>).\nNote:\nThe MSSP module must be in an Idle state before the RCEN bit is set or the RCEN bit will be disregarded.\nThe Baud Rate Generator begins counting and on each rollover, the state of the SCL pin changes (high-to-low/ low-to-high) and data is shifted into the SSPSR. After the falling edge of the eighth clock, the receive enable flag is automatically  cleared,  the  contents  of  the SSPSR are loaded into the SSPBUF, the BF flag bit is set, the SSPIF flag bit is set and the Baud Rate Generator is suspended from counting, holding SCL low. The MSSP is now in Idle state awaiting the next command. When the buffer is read by the CPU, the BF flag bit is automatically  cleared.  The  user  can  then  send  an Acknowledge bit at the end of reception by setting the Acknowledge  Sequence  Enable  bit,  ACKEN  (SSPCON2<4>).",
    "17.4.11.1 BF Status Flag\nIn receive operation, the BF bit is set when an address or data byte is loaded into SSPBUF from SSPSR. It is cleared when the SSPBUF register is read.",
    "17.4.11.2 SSPOV Status Flag\nIn receive operation, the SSPOV bit is set when 8 bits are  received  into  the  SSPSR  and  the  BF  flag  bit  is already set from a previous reception.",
    "17.4.11.3 WCOL Status Flag\nIf the  user  writes  the  SSPBUF  when  a  receive  is already in progress (i.e., SSPSR is still shifting in a data byte), the WCOL bit is set and the contents of the buffer are unchanged (the write doesn't occur).",
    "17.4.13 STOP CONDITION TIMING\nAn Acknowledge  sequence  is  enabled  by  setting  the Acknowledge  Sequence  Enable  bit,  ACKEN  (SSPCON2<4>). When this bit is set, the SCL pin is pulled low and the contents of the Acknowledge data bit are presented on the SDA pin. If the user wishes to generate an Acknowledge, then the ACKDT bit needs to be cleared. If not, the user needs to set the ACKDT bit before starting an Acknowledge sequence. The Baud Rate Generator then counts for one rollover period (TBRG) and the SCL pin is deasserted (pulled high). When the SCL pin is sampled high (clock arbitration), the Baud Rate Generator counts for TBRG. The SCL pin is then pulled low. Following this, the ACKEN bit is automatically cleared, the Baud Rate Generator is turned off and the MSSP module then goes into Idle mode ( Figure 17-23 ).",
    "17.4.12.1 WCOL Status Flag\nIf the user writes the SSPBUF when an Acknowledge sequence  is  in  progress,  then  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).\nA Stop bit is asserted on the SDA pin at the end of a receive/transmit by setting the Stop Sequence Enable bit,  PEN  (SSPCON2<2>).  At  the  end  of  a  receive/ transmit, the SCL line is held low after the falling edge of the ninth clock. When the PEN bit is set, the host will assert the SDA line low. When the SDA line is sampled low, the Baud Rate Generator is reloaded and counts down to 0. When the Baud Rate Generator times out, the SCL pin will be brought high and one TBRG (Baud Rate Generator rollover count) later, the SDA pin will be deasserted. When the SDA pin is sampled high while SCL is high, the P (SSPSTAT<4>) bit is set. A TBRG later, the PEN bit is cleared and the SSPIF bit is set ( Figure 17-24 ).",
    "17.4.13.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Stop sequence is in progress, then the WCOL bit is set and the contents  of  the  buffer  are  unchanged  (the  write  doesn't occur).",
    "17.4.14 SLEEP OPERATION\nWhile  in  Sleep  mode,  the  I 2 C  module  can  receive addresses  or  data  and  when  an  address  match  or complete  byte  transfer  occurs,  wake  the  processor from Sleep (if the MSSP interrupt is enabled).",
    "17.4.15 EFFECTS OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.4.16 MULTI-HOST MODE\nIn  Multi-Host  mode,  the  interrupt  generation  on  the detection of the Start and Stop conditions allows the determination of when the bus is free. The Stop (P) and Start  (S)  bits  are  cleared  from  a  Reset  or  when  the MSSP module is disabled. Control of the I 2 C bus may be taken when the P (SSPSTAT<4>) bit is set, or the bus is Idle, with both the S and P bits clear. When the bus is busy, enabling the MSSP interrupt will generate the interrupt when the Stop condition occurs.\nIn multi-host operation, the SDA line must be monitored for arbitration to see if the signal level is the expected output level. This check is performed in hardware with the result placed in the BCLIF bit.\nThe states where arbitration can be lost are:\n\u00b7 Address Transfer\n\u00b7 Data Transfer\n\u00b7 A Start Condition\n\u00b7 A Repeated Start Condition\n\u00b7 An Acknowledge Condition",
    "17.4.16 MULTI-HOST MODE\nMulti-Host mode support is achieved by bus arbitration. When the host outputs address/data bits onto the SDA pin, arbitration takes place when the host outputs a ' 1 ' on  SDA  by  letting  SDA  float  high  and  another  host asserts a ' 0 '. When the SCL pin floats high, data needs to be stable. If the expected data on SDA is a ' 1 ' and the data sampled on the SDA pin = 0 , then a bus collision has taken place. The host will set the Bus Collision Interrupt Flag, BCLIF and reset the I 2 C port to its Idle state ( Figure 17-25 ).\nIf  a  transmit  was  in  progress  when  the  bus  collision occurred,  the  transmission  is  halted,  the  BF  flag  is cleared, the SDA and SCL lines are deasserted and the SSPBUF can be written to. When the user services the bus collision  Interrupt  Service  Routine  and  if  the  I 2 C bus  is  free,  the  user  can  resume  communication  by asserting a Start condition.",
    "17.4.16 MULTI-HOST MODE\nIf a Start, Repeated Start, Stop or Acknowledge condition was in progress when the bus collision occurred, the condition is aborted, the SDA and SCL lines are deasserted and the respective control bits in the SSPCON2 register  are  cleared.  When  the  user  services  the  bus collision Interrupt Service Routine and if the I 2 C bus is free, the user can resume communication by asserting a Start condition.\nThe host will continue to monitor the SDA and SCL pins. If a Stop condition occurs, the SSPIF bit will be set.\nA  write  to  the  SSPBUF  will  start  the  transmission  of data  at  the  first  data  bit,  regardless  of  where  the transmitter left off when the bus collision occurred.\nIn  Multi-Host  mode,  the  interrupt  generation  on  the detection of Start and Stop conditions allows the determination of when the bus is free. Control of the I 2 C bus can  be  taken  when  the  P  bit  is  set  in  the  SSPSTAT register,  or  the  bus  is  Idle  and  the  S  and  P  bits  are cleared.",
    "17.4.17.1 Bus Collision During a Start Condition\nDuring a Start condition, a bus collision occurs if:\na) SDA or SCL is sampled low at the beginning of the Start condition ( Figure 17-26 ).\nb) SCL is sampled low before SDA is asserted low ( Figure 17-27 ).\nIf  the  SDA  pin  is  sampled  low  during  this  count,  the BRG  is  reset  and  the  SDA  line  is  asserted  early ( Figure 17-28 ).  If,  however,  a  ' 1 '  is  sampled  on  the SDA pin, the SDA pin is asserted low at the end of the BRG count. The Baud Rate Generator is then reloaded and counts down to 0; if the SCL pin is sampled as ' 0 ' during this time, a bus collision does not occur. At the end of the BRG count, the SCL pin is asserted low.\nDuring a Start condition, both  the SDA and the SCL pins are monitored.\nIf the SDA pin is already low, or the SCL pin is already low, then all of the following occur:",
    "17.4.17.1 Bus Collision During a Start Condition\n\u00b7 the Start condition is aborted,\n\u00b7 the BCLIF flag is set and\n\u00b7 the MSSP module is reset to its Idle state ( Figure 17-26 ).\nThe Start condition begins with the SDA and SCL pins deasserted. When the SDA pin is sampled high, the Baud  Rate  Generator  is  loaded  from  SSPADD<6:0> and counts down to 0. If the SCL pin is sampled low while SDA is high, a bus collision occurs because it is assumed that another host is attempting to drive a data ' 1 ' during the Start condition.\nThe reason that bus collision is not a factor during a Start condition is that no two bus hosts can assert a Start condition at the exact same time. Therefore, one host will always assert SDA before the other. This condition  does  not  cause  a  bus  collision because the two hosts must be allowed to arbitrate  the  first  address  following  the Start condition. If the address is the same, arbitration  must  be  allowed  to  continue into  the  data  portion,  Repeated  Start  or Stop conditions.",
    "FIGURE 17-26: BUS COLLISION DURING START CONDITION (SDA ONLY)\nNote:",
    "FIGURE 17-27: BUS COLLISION DURING START CONDITION (SCL = 0\n)",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nDuring  a  Repeated  Start  condition,  a  bus  collision occurs if:\n- a) A low level is sampled on SDA when SCL goes from low level to high level.\nIf SDA is low, a bus collision has occurred (i.e., another host is attempting to transmit a data ' 0 ', Figure 17-29 ). If SDA is sampled high, the BRG is reloaded and begins counting. If SDA goes from high-to-low before the BRG times out, no bus collision occurs because no two hosts can assert SDA at exactly the same time.\n- b) SCL  goes  low  before  SDA  is  asserted  low, indicating  that  another  host  is  attempting  to transmit a data ' 1 '.\nWhen the user deasserts SDA and the pin is allowed to float high, the BRG is loaded with SSPADD<6:0> and counts down to 0. The SCL pin is then deasserted and when sampled high, the SDA pin is sampled.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nIf SCL goes from high-to-low before the BRG times out and SDA has not already been asserted, a bus collision occurs.  In  this  case,  another  host  is  attempting  to transmit a data ' 1 ' during the Repeated Start condition, see Figure 17-30 .\nIf, at the end of the BRG time-out, both SCL and SDA are still high, the SDA pin is driven low and the BRG is reloaded and begins counting. At the end of the count, regardless of the status of the SCL pin, the SCL pin is driven low and the Repeated Start condition is complete.",
    "17.4.17.3 Bus Collision During a Stop Condition\nBus collision occurs during a Stop condition if:\na) After  the  SDA  pin  has  been  deasserted  and allowed to float high, SDA is sampled low after the BRG has timed out.\nb) After the SCL pin is deasserted, SCL is sampled low before SDA goes high.\nThe  Stop  condition  begins  with  SDA  asserted  low. When SDA is sampled low, the SCL pin is allowed to float. When the pin is sampled high (clock arbitration), the Baud Rate Generator is loaded with SSPADD<6:0> and counts down to 0. After the BRG times out, SDA is sampled. If  SDA is  sampled low,  a  bus  collision  has occurred.  This  is  due  to  another  host  attempting  to drive  a  data  ' 0 ' ( Figure 17-31 ). If the  SCL  pin  is sampled low before SDA is allowed to float high, a bus collision occurs. This is another case of another host attempting to drive a data ' 0 ' ( Figure 17-32 ).",
    "FIGURE 17-31: BUS COLLISION DURING A STOP CONDITION (CASE 1)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nSDA asserted low\nSDA sampled low after TBRG, set BCLIF\n' 0 '\n' 0 '",
    "FIGURE 17-32: BUS COLLISION DURING A STOP CONDITION (CASE 2)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nAssert SDA\nSCL goes low before SDA goes high, set BCLIF\n' 0 '\n' 0 '",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThe Enhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART) module is one of the two serial I/O modules. (Generically, the USART is also known as a Serial Communications Interface or SCI.) The  EUSART  can  be  configured  as  a  full-duplex asynchronous  system  that  can  communicate  with peripheral devices, such as CRT  terminals and personal computers. It can also be configured as a halfduplex,  synchronous  system  that  can  communicate with peripheral devices, such as A/D or D/A integrated circuits, serial EEPROMs, etc.\nThe Enhanced USART module implements additional features, including automatic baud rate detection and calibration, automatic wake-up on Sync Break reception and 12-bit Break character transmit. These make it ideally suited for use in Local Interconnect Network bus (LIN bus) systems.\nThe  EUSART  can  be  configured  in  the  following modes:",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\n\u00b7 Asynchronous (full duplex) with:\n-Auto-wake-up on character reception\n-Auto-baud calibration\n-12-bit Break character transmission\n\u00b7 Synchronous - Host (half duplex) with selectable clock polarity\n\u00b7 Synchronous - Client (half duplex) with selectable clock polarity\nThe  pins  of  the  Enhanced  USART  are  multiplexed with   PORTC. In order to configure RC6/TX/CK and RC7/RX/DT as an EUSART:\n\u00b7 bit SPEN (RCSTA<7>) must be set (= 1 )\n\u00b7 bit TRISC<7> must be set (= 1 )\n\u00b7 bit TRISC<6> must be set (= 1 )\nNote:\nThe  EUSART  control  will  automatically reconfigure the pin from input to output as needed.\nThe  operation  of  the  Enhanced  USART  module  is controlled through three registers:\n\u00b7 Transmit Status and Control (TXSTA)\n\u00b7 Receive Status and Control (RCSTA)\n\u00b7 Baud Rate Control (BAUDCON)",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThese are detailed on the following pages in Register 18-1 , Register 18-2 and Register 18-3 , respectively.",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nCSRC, R/W-0 = TX9. CSRC, R/W-0 = TXEN (1). CSRC, R/W-0 = SYNC. CSRC, R/W-0 = SENDB. CSRC, R/W-0 = BRGH. CSRC, R-1 = TRMT. CSRC, R/W-0 = TX9D. bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R-1 = . bit 7, R/W-0 = bit 0",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nCSRC: Clock Source Select bit\nAsynchronous mode:\nDon't care.\nSynchronous mode:\n1 = Host mode (clock generated internally from BRG)\n0 = Client mode (clock from external source)",
    "bit 6 TX9: 9-Bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission\nTXEN: Transmit Enable bit (1)\n1 = Transmit enabled\n0 = Transmit disabled\nSYNC: EUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode",
    "bit 3 SENDB:\nSend Break Character bit\nAsynchronous mode:\n1 = Send Sync Break on next transmission (cleared by hardware upon completion)\n0 = Sync Break transmission completed\nSynchronous mode:\nDon't care.",
    "bit 2 BRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.",
    "bit 1\nTRMT: Transmit Shift Register Status bit\n1 = TSR empty\n0 = TSR full",
    "bit 0 TX9D: 9th Bit of Transmit Data\nCan be address/data bit or a parity bit.\nNote 1: SREN/CREN overrides TXEN in Sync mode.",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nSPEN, R/W-0 = RX9. SPEN, R/W-0 = SREN. SPEN, R/W-0 = CREN. SPEN, R/W-0 = ADDEN. SPEN, R-0 = FERR. SPEN, R-0 = OERR. SPEN, R-x = RX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-x = bit 0",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SPEN: Serial Port Enable bit\n1 = Serial port enabled (configures RX/DT and TX/CK pins as serial port pins)\n0 = Serial port disabled (held in Reset)",
    "bit 6\nRX9: 9-Bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN: Single Receive Enable bit\nAsynchronous mode:\nDon't care.",
    "Synchronous mode - Host:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode - Client:\nDon't care.",
    "bit 4 CREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver",
    "Synchronous mode:\n1 = Enables continuous receive until enable bit, CREN, is cleared (CREN overrides SREN)\n0 = Disables continuous receive",
    "bit 3 ADDEN: Address Detect Enable bit\nAsynchronous mode 9-Bit (RX9 = 1 ):\n1 = Enables address detection, enables interrupt and loads the receive buffer when RSR<8> is set\n0 = Disables address detection, all bytes are received and ninth bit can be used as parity bit",
    "Asynchronous mode 9-Bit (RX9 = 0 ):\nDon't care.",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be cleared by reading RCREG register and receiving next valid byte)\n0 = No framing error",
    "bit 1 OERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit, CREN)\n0 = No overrun error\nRX9D: 9th Bit of Received Data\nThis can be address/data bit or a parity bit and must be calculated by user firmware.",
    "REGISTER 18-3: BAUDCON: BAUD RATE CONTROL REGISTER\nABDOVF, R-1 = RCIDL. ABDOVF, R/W-0 = RXDTP. ABDOVF, R/W-0 = TXCKP. ABDOVF, R/W-0 = BRG16. ABDOVF, U-0 = -. ABDOVF, R/W-0 = WUE. ABDOVF, R/W-0 = ABDEN. bit 7 bit 0, R-1 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 18-3: BAUDCON: BAUD RATE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 ABDOVF: Auto-Baud Acquisition Rollover Status bit\n1 = A BRG rollover has occurred during Auto-Baud Rate Detect mode (must be cleared in software)\n0 = No BRG rollover has occurred",
    "bit 6\nRCIDL: Receive Operation Idle Status bit\n1 = Receive operation is Idle\n0 = Receive operation is active",
    "bit 5\nRXDTP: Data/Receive Polarity Select bit\nAsynchronous mode:\n1 = Receive data (RX) is inverted (active-low)\n0 = Receive data (RX) is not inverted (active-high)",
    "Synchronous mode:\n1 = Data (DT) is inverted (active-low)\n0 = Data (DT) is not inverted (active-high)",
    "bit 4 TXCKP: Clock and Data Polarity Select bit\nAsynchronous mode:\n1 = Idle state for transmit (TX) is a low level\n0 = Idle state for transmit (TX) is a high level\nSynchronous mode:\n1 = Idle state for clock (CK) is a high level\n0 = Idle state for clock (CK) is a low level",
    "bit 3\nBRG16: 16-Bit Baud Rate Register Enable bit\n1 = 16-bit Baud Rate Generator - SPBRGH and SPBRG\n0 = 8-bit Baud Rate Generator - SPBRG only (Compatible mode), SPBRGH value ignored",
    "bit 1 WUE:\nWake-up Enable bit\nAsynchronous mode:\n1 = EUSART will continue to sample the RX pin - interrupt generated on falling edge; bit cleared in hardware on following rising edge\n0 = RX pin not monitored or rising edge detected",
    "Synchronous mode:\nUnused in this mode.",
    "bit 0 ABDEN: Auto-Baud Detect Enable bit\nAsynchronous mode:\n1 = Enable baud rate measurement on the next character. Requires reception of a Sync field (55h); cleared in hardware upon completion.\n0 = Baud rate measurement disabled or completed",
    "Synchronous mode:\nUnused in this mode.",
    "18.1 Baud Rate Generator (BRG)\nThe BRG is a dedicated, 8-bit or 16-bit generator that supports  both  the  Asynchronous  and  Synchronous modes of the EUSART. By default, the BRG operates in 8-bit mode; setting the BRG16 (BAUDCON<3>) bit selects 16-bit mode.\nadvantageous to use the high baud rate (BRGH = 1 ) or the  16-bit  BRG  to  reduce  the  baud  rate  error,  or achieve a slow baud rate for a fast oscillator frequency.\nThe SPBRGH:SPBRG register pair controls the period of  a  free-running  timer.  In Asynchronous  mode,  bits, BRGH (TXSTA<2>) and BRG16 (BAUDCON<3>), also control the baud rate. In Synchronous mode, BRGH is ignored. Table 18-1 shows the formula for computation of  the  baud  rate  for  different  EUSART  modes  which only apply in Host mode (internally generated clock).",
    "18.1 Baud Rate Generator (BRG)\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRGH:SPBRG registers can be calculated using the formulas in Table 18-1 . From this, the error in baud rate can be determined. An example calculation  is  shown  in Example 18-1 .  Typical  baud rates  and  error  values  for  the  various Asynchronous modes are shown in Table 18-2 . It may be\nWriting a new value to the SPBRGH:SPBRG registers causes the  BRG timer  to  be  reset  (or  cleared). This ensures the BRG does not wait for a timer overflow before outputting the new baud rate.",
    "18.1.1 OPERATION IN POWER-MANAGED MODES\nThe device clock is used to generate the desired baud rate.  When  one  of  the  power-managed  modes  is entered, the new clock source may be operating at a different frequency. This may require an adjustment to the value in the SPBRG register pair.",
    "18.1.2 SAMPLING\nThe data on the RX pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RX pin.",
    "TABLE 18-1: BAUD RATE FORMULAS\n0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-Bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[64 (n + 1)]. 0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 1. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-Bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 16-Bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 1. 0,",
    "TABLE 18-1: BAUD RATE FORMULAS\nBRG/EUSART Mode.BRG/EUSART Mode = 16-Bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 0. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 8-Bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 1. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 16-Bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]\nLegend: x = Don't care, n = value of SPBRGH:SPBRG register pair",
    "EXAMPLE 18-1: CALCULATING BAUD RATE ERROR\nFor a device with FOSC of 16 MHz, desired baud rate of 9600, Asynchronous mode, 8-bit BRG:\nDesired Baud Rate= FOSC/(64 ([SPBRGH:SPBRG] + 1))\nSolving for SPBRGH:SPBRG:\nX\n= ((FOSC/Desired Baud Rate)/64) - 1\n= ((16000000/9600)/64) - 1\n= [25.042] = 25\nCalculated Baud Rate=16000000/(64 (25 + 1))\n= 9615\nError\n= (Calculated Baud Rate - Desired Baud Rate)/Desired Baud Rate\n= (9615 - 9600)/9600 = 0.16%",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nTXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nBAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nRegister Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the BRG.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 1.221. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 255. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 129. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 129. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n64. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 31. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 15. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 15. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 7. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 4. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 52.083. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -9.58. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 2. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nValue (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 104.167. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -9.58. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 2. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 78.125. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -32.18. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 207. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 103. 0.3, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 25. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 25. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 8.929. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -6.99. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 6. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 20.833. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 2.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 0. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -45.75. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 0. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 255. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.615.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 21. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = 8. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG Value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG Value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG Value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG Value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG Value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 4165. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 2082. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 1665. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 1041. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 520. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.399. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 520. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 259. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 259. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nValue (decimal) = 129. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 31. 19.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 21. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n55.555. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 832. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 415. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 33332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.00.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 16665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 6665. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8332. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 4165. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 1665. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 4165. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2082. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.04. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 832. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.606. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 1040. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(K) = 9.596. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 520. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nValue (decimal) = 259. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 207. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.193. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -0.03. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 520. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 259. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n103. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 57.803. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.35. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) = 172. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 57.471. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.22. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 86. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.142. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 0.79. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 34. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 114.943. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -0.22. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n86. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 116.279. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.94. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG Value (decimal) = 42. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG Value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 117.647. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -2.12. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG Value (decimal) = 16",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 3332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.04.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 1665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n415. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 103. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 103.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 19.230.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 58.824. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 2.12. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 16. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = 3.55.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = 8. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 111.111. 115.2, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = -3.55. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG Value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG Value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n, BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG Value (decimal) = -",
    "18.1.3 AUTO-BAUD RATE DETECT\nThe Enhanced USART module supports the automatic detection and calibration of baud rate. This feature is active only in Asynchronous mode and while the WUE bit is clear.\n- Note 1: If the WUE bit is set with the ABDEN bit, Auto-Baud Rate Detection will  occur  on the byte following the Break character.\nThe  automatic  baud  rate  measurement  sequence ( Figure 18-1 ) begins whenever a Start bit is received and the ABDEN bit is set. The calculation is self-averaging.\nIn the Auto-Baud Rate Detect (ABD) mode, the clock to the BRG is reversed. Rather than the BRG clocking the incoming RX signal, the RX signal is timing the BRG. In ABD mode, the internal Baud Rate Generator is used as a counter to time the bit period of the incoming serial byte stream.",
    "18.1.3 AUTO-BAUD RATE DETECT\nOnce the ABDEN bit is set, the state machine will clear the BRG and look for a Start bit. The Auto-Baud Rate Detect must receive a byte with the value 55h (ASCII 'U', which is also the LIN bus Sync character) in order to calculate the proper bit rate. The measurement is taken over both a low and a high bit time in order to minimize any effects caused by asymmetry of the incoming signal. After a Start bit, the SPBRG begins counting up, using the preselected clock source on the first rising edge of RX. After eight bits on the RX pin or the fifth rising edge, an accumulated value totalling the proper BRG period is left in the SPBRGH:SPBRG register pair. Once the 5th edge is seen (this needs to correspond to the Stop bit), the ABDEN bit is automatically cleared.",
    "18.1.3 AUTO-BAUD RATE DETECT\nIf a rollover of the BRG occurs (an overflow from FFFFh to 0000h), the event is trapped by the ABDOVF status (BAUDCON<7>) bit. It is set in hardware by BRG rollovers and can be set or cleared by the user in software. ABD mode remains active after rollover events and the ABDEN bit remains set ( Figure 18-2 ).\nWhile calibrating the baud rate period, the BRG registers are clocked at 1/8th the preconfigured clock rate. Note  that  the  BRG  clock  will  be  configured  by  the BRG16 and BRGH bits. Independent of the BRG16 bit setting, both the SPBRG and SPBRGH will be used as a 16-bit counter. This allows the user to verify that no carry occurred for 8-bit modes by checking for 00h in the SPBRGH register. Refer to Table 18-4 for counter clock rates to the BRG.",
    "18.1.3 AUTO-BAUD RATE DETECT\nWhile  the ABD  sequence  takes  place,  the  EUSART state machine is held in Idle. The RCIF interrupt is set once the fifth rising edge on RX is detected. The value in  the  RCREG  needs  to  be  read  to  clear  the  RCIF interrupt.  The  contents  of  RCREG  need  to  be  discarded.\n- 2: It  is  up  to  the  user  to  determine  that the incoming character baud rate is within the range of the selected BRG clock source. Some combinations of oscillator frequency and EUSART baud rates are not possible due to bit error rates. Overall system timing  and  communication  baud  rates  must be taken into consideration when using the Auto-Baud Rate Detection feature.",
    "TABLE 18-4: BRG COUNTER CLOCK RATES\n0, BRGH = 0. 0, BRG Counter Clock = FOSC/512. 0, BRGH = 1. 0, BRG Counter Clock = FOSC/128. 1, BRGH = 0. 1, BRG Counter Clock = FOSC/128. 1, BRGH = 1. 1, BRG Counter Clock = FOSC/32\nNote:\nDuring the  ABD sequence, SPBRG  and SPBRGH are both used as a 16-bit counter, independent of BRG16 setting.",
    "18.1.3.1 ABD and EUSART Transmission\nSince the BRG clock is reversed during ABD acquisition,  the  EUSART transmitter cannot be used during ABD. This means that whenever the ABDEN bit is set, TXREG  cannot  be  written  to.  Users  need  to  also ensure  that  ABDEN  does  not  become  set  during  a transmit  sequence.  Failing  to  do  this  may  result  in unpredictable EUSART operation.",
    "FIGURE 18-1: AUTOMATIC BAUD RATE CALCULATION\nBRG Value, 1 = XXXXh. BRG Value, 2 = 0000h. BRG Value, 3 = 001Ch. RX pin, 1 = . RX pin, 2 = Bit 0 Bit 1 Start Bit 2 Bit 3 Bit 4 Bit 5 Bit. RX pin, 3 = Stop Bit. BRG Clock, 1 = . BRG Clock, 2 = . BRG Clock, 3 = . ABDEN bit, 1 = Set by User. ABDEN bit, 2 = . ABDEN bit, 3 = Auto-Cleared. RCIF bit (Interrupt), 1 = . RCIF bit (Interrupt), 2 = . RCIF bit (Interrupt), 3 = . Read RCREG, 1 = . Read RCREG, 2 = . Read RCREG, 3 = . SPBRGH, 1 = . SPBRGH, 2 = XXXXh. SPBRGH, 3 = 00h",
    "FIGURE 18-2: BRG OVERFLOW SEQUENCE\nStart\nBit 0\nXXXXh\n0000h\n0000h\nFFFFh\nBRG Clock\nABDEN bit\nRX pin\nABDOVF bit\nBRG Value",
    "18.2 EUSART Asynchronous Mode\nThe Asynchronous  mode  of  operation  is  selected  by clearing  the  SYNC  (TXSTA<4>)  bit.  In  this  mode,  the EUSART uses standard Non-Return-to-Zero (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip, dedicated 8-bit/16-bit Baud Rate Generator can be used to derive  standard  baud  rate  frequencies  from  the oscillator.\nThe EUSART transmits and receives the LSb first. The EUSART's  transmitter  and  receiver  are  functionally independent but use the same data format and baud rate. The Baud Rate Generator produces a clock, either x16 or x64 of the bit shift rate depending on the BRGH and BRG16 bits (TXSTA<2> and BAUDCON<3>). Parity is not  supported  by  the  hardware  but  can  be implemented in software and stored as the 9th data bit.\nWhen operating in Asynchronous mode, the EUSART module consists of the following important elements:",
    "18.2 EUSART Asynchronous Mode\n\u00b7 Baud Rate Generator\n\u00b7 Sampling Circuit\n\u00b7 Asynchronous Transmitter\n\u00b7 Asynchronous Receiver\n\u00b7 Auto-Wake-up on Sync Break Character\n\u00b7 12-Bit Break Character Transmit\n\u00b7 Auto-Baud Rate Detection",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nThe  EUSART  transmitter  block  diagram  is  shown  in Figure 18-3 . The heart of the transmitter is the Transmit  (Serial)  Shift  (TSR)  Register.  The  Shift  register obtains  its  data  from  the  Read/Write Transmit  Buffer register, TXREG. The TXREG register is loaded with data in software. The TSR register is not loaded until the  Stop  bit  has  been  transmitted  from  the  previous load. As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG register (if available).",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nOnce the TXREG register transfers the data to the TSR register  (occurs  in  one  TCY),  the  TXREG  register  is empty and the TXIF flag (PIR1<4>) bit is set. This interrupt can be enabled or disabled by setting or clearing the interrupt  enable  bit,  TXIE  (PIE1<4>).  TXIF  will  be  set regardless of the state of TXIE; it cannot be cleared in software.  TXIF  is  also  not  cleared  immediately  upon loading TXREG, but becomes valid in the second instruction  cycle  following  the  load  instruction.  Polling  TXIF immediately following a load of TXREG will return invalid results.\nWhile TXIF indicates the status of the TXREG register, another  bit, TRMT (TXSTA<1>), shows the status of the TSR register. TRMT is a read-only bit which is set when the TSR register is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine if the TSR register is empty.",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag  bit,  TXIF,  is  set  when  enable  bit, TXEN, is set.\nTo set up an Asynchronous Transmission:",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set transmit bit, TX9. Can be used as address/data bit.\n5. Enable  the  transmission  by  setting  bit,  TXEN, which will also set bit, TXIF.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit needs to be loaded in bit, TX9D.\n7. Load data to the TXREG  register (starts transmission).\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous transmission.\nNote 1: Reserved in 28-pin devices; always maintain these bits clear.",
    "18.2.2 EUSART ASYNCHRONOUS RECEIVER\nThe receiver block diagram is shown in Figure 18-6 . The data is received on the RX pin and drives the data recovery block. The data recovery block is actually a high-speed shifter operating at x16 times the baud rate, whereas the main receive serial shifter operates at the bit rate or at FOSC. This mode would typically be used in RS-232 systems.\nTo set up an Asynchronous Reception:",
    "18.2.2 EUSART ASYNCHRONOUS RECEIVER\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, RCIE.\n4. If 9-bit reception is desired, set bit, RX9.\n5. Enable the reception by setting bit, CREN.\n6. Flag  bit,  RCIF,  will  be  set  when  reception  is complete and an interrupt  will  be  generated  if enable bit, RCIE, was set.\n7. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG register.\n9. If any error occurred, clear the error by clearing enable bit, CREN.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThis mode would typically be used in RS-485 systems. To  set  up  an Asynchronous  Reception  with Address Detect Enable:",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If interrupts are required, set the RCEN bit and select the desired priority level with the RCIP bit.\n4. Set the RX9 bit to enable 9-bit reception.\n5. Set the ADDEN bit to enable address detect.\n6. Enable reception by setting the CREN bit.\n7. The  RCIF  bit  will  be  set  when  reception  is complete. The interrupt will be Acknowledged if the RCIE and GIE bits are set.\n8. Read  the  RCSTA  register  to  determine  if  any error occurred during reception, as well as read bit 9 of data (if applicable).\n9. Read RCREG to determine if the device is being addressed.\n10. If any error occurred, clear the CREN bit.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n11. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous reception.\nNote 1: Reserved in 28-pin devices; always maintain these bits clear.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nDuring  Sleep  mode,  all  clocks  to  the  EUSART  are suspended. Because of this, the Baud Rate Generator is inactive and a proper byte reception cannot be performed. The auto-wake-up feature allows the controller to wake-up due to activity on the RX/DT line while the EUSART is operating in Asynchronous mode.\nFollowing a wake-up event, the module generates an RCIF  interrupt.  The  interrupt  is  generated  synchronously  to  the  Q  clocks  in  normal  operating  modes ( Figure 18-8 )  and  asynchronously, if  the  device  is  in Sleep mode ( Figure 18-9 ).  The  interrupt  condition  is cleared by reading the RCREG register.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nThe  auto-wake-up  feature  is  enabled  by  setting  the WUE (BAUDCON<1>) bit. Once set, the typical receive sequence  on  RX/DT  is  disabled  and  the  EUSART remains in an Idle state, monitoring for a wake-up event independent of the CPU mode. A wake-up event consists of a high-to-low transition on the RX/DT line. (This coincides with the start of a Sync Break or a Wake-up Signal character for the LIN protocol.)\nThe WUE bit is automatically cleared once a low-tohigh transition is observed on the RX line following the wake-up event. At this point, the EUSART module is in Idle mode and returns to normal operation. This signals to the user that the Sync Break event is over.",
    "18.2.4.1 Special Considerations Using Auto-Wake-up\nSince auto-wake-up functions by sensing rising edge transitions on RX/DT, information with any state changes before the Stop bit may signal a false End-ofCharacter (EOC) and cause data or framing errors. To work  properly,  therefore,  the  initial  character  in  the transmission must be all ' 0 's. This can be 00h (8 bytes) for standard RS-232 devices or 000h (12 bits) for LIN bus.\nOscillator start-up time must  also  be  considered, especially in applications using oscillators with longer start-up  intervals  (i.e.,  XT  or  HS  mode).  The  Sync Break  (or  Wake-up  Signal)  character  must  be  of sufficient length and be followed by a sufficient interval to allow enough time for the selected oscillator to start and provide proper initialization of the EUSART.",
    "18.2.4.2 Special Considerations Using the WUE Bit\nThe timing of WUE and RCIF events may cause some confusion when it comes to determining the validity of received data. As noted, setting the WUE bit places the EUSART in an Idle mode. The wake-up event causes a receive interrupt by setting the RCIF bit. The WUE bit is cleared after this when a rising edge is seen on RX/DT. The interrupt condition is then cleared by reading the RCREG register. Ordinarily, the data in RCREG will be dummy data and need to be discarded.\nThe fact that the WUE bit has been cleared (or is still set) and the RCIF flag is set needs to not be used as an  indicator  of  the  integrity  of  the  data  in  RCREG. Users need to consider implementing a parallel method in firmware to verify received data integrity.\nTo assure that no actual data is lost, check the RCIDL bit to verify that a receive operation is not in process. If a receive operation is not occurring, the WUE bit may then be set just prior to entering the Sleep mode.",
    "FIGURE 18-9: AUTO-WAKE-UP (WUE) BIT TIMINGS DURING SLEEP\nNote 1: If the wake-up event requires long oscillator warm-up time, the auto-clear of the WUE bit can occur before the oscillator is ready. This sequence needs to not depend on the presence of Q clocks.\n2: The EUSART remains in Idle while the WUE bit is set.",
    "18.2.5 BREAK CHARACTER SEQUENCE\n- 1. Configure the EUSART for the desired mode.\nThe EUSART module has the capability of sending the special Break character sequences that are required by the  LIN  bus  standard.  The  Break  character  transmit consists of a Start bit, followed by twelve ' 0 ' bits and a Stop bit. The frame Break character is sent whenever the SENDB and TXEN bits (TXSTA<3> and TXSTA<5>) are set while the Transmit Shift register is loaded with data. Note that the value of data written to TXREG will be ignored and all ' 0 's will be transmitted.\nThe SENDB bit is automatically reset by hardware after the corresponding Stop bit is sent. This allows the user to preload the transmit FIFO with the next transmit byte following the Break  character  (typically, the Sync character in the LIN specification).\nNote that the data value written to the TXREG for the Break character is ignored. The write simply serves the purpose of initiating the proper sequence.\nThe TRMT bit indicates when the transmit operation is active or Idle, just as it does during normal transmission.  See Figure 18-10 for  the  timing  of  the  Break character sequence.",
    "18.2.5.1 Break and Sync Transmit Sequence\nThe  following  sequence  will  send  a  message  frame header made up of a Break, followed by an Auto-Baud Sync byte. This sequence is typical of a LIN bus host.\n2. Set  the  TXEN  and  SENDB  bits  to  set  up  the Break character.\n3. Load  the  TXREG  with  a  dummy  character  to initiate transmission (the value is ignored).\n4. Write '55h' to TXREG to load the Sync character into the transmit FIFO buffer.\n5. After the Break has been sent, the SENDB bit is reset  by  hardware.  The  Sync  character  now transmits in the preconfigured mode.\nWhen the TXREG becomes empty, as indicated by the TXIF, the next data byte can be written to TXREG.",
    "18.2.6 RECEIVING A BREAK CHARACTER\nThe  Enhanced  USART  module  can  receive  a  Break character in two ways.\nThe first method forces configuration of the baud rate at a frequency of 9/13 the typical speed. This allows for the  Stop  bit  transition  to  be  at  the  correct  sampling location (13 bits for Break versus Start bit and 8 data bits for typical data).\nThe  second  method  uses  the  auto-wake-up  feature described in Section 18.2.4 'Auto-Wake-up on Sync Break  Character' . By  enabling this feature, the EUSART will sample the next two transitions on RX/DT, cause an RCIF interrupt and receive the next data byte followed by another interrupt.\nNote  that  following  a  Break  character,  the  user  will typically  want  to  enable  the Auto-Baud  Rate  Detect feature. For both methods, the user can set the ABD bit once the TXIF interrupt is observed.",
    "18.3 EUSART Synchronous Host Mode\nThe Synchronous Host mode is entered by setting the CSRC (TXSTA<7>) bit. In this mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting data, the reception is inhibited and vice versa. Synchronous  mode  is  entered  by  setting  bit,  SYNC (TXSTA<4>). In addition, enable bit, SPEN (RCSTA<7>), is set in order to configure the TX and RX pins to CK (clock) and DT (data) lines, respectively.\nThe Host mode indicates that the processor transmits the host clock on the CK line. Clock polarity is selected with  the  TXCKP  (BAUDCON<4>) bit; setting TXCKP sets the Idle state on CK as high, while clearing the bit sets the Idle state as low. This option is provided to support Microwire devices with this module.",
    "18.3.1 EUSART SYNCHRONOUS HOST TRANSMISSION\nOnce the TXREG register transfers the data to the TSR register (occurs in one TCY), the TXREG is empty and the TXIF flag (PIR1<4>) bit is set. The interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TXIE (PIE1<4>). TXIF is set regardless of the  state  of  enable  bit, TXIE;  it  cannot  be  cleared  in software. It will reset only when new data is loaded into the TXREG register.\nWhile flag bit, TXIF, indicates the status of the TXREG register,  another  bit,  TRMT  (TXSTA<1>),  shows  the status of the TSR register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TSR  is  not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Host Transmission:",
    "18.3.1 EUSART SYNCHRONOUS HOST TRANSMISSION\n- 1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit, as required, to achieve the desired baud rate.\nThe  EUSART  transmitter  block  diagram  is  shown  in Figure 18-3 . The heart of the transmitter is the Transmit  (Serial)  Shift  (TSR)  Register.  The  Shift  register obtains  its  data  from  the  Read/Write Transmit  Buffer register, TXREG. The TXREG register is loaded with data in software. The TSR register is not loaded until the last bit has been transmitted from the previous load. As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG (if available).",
    "18.3.1 EUSART SYNCHRONOUS HOST TRANSMISSION\n2. Enable the synchronous host serial port by setting bits, SYNC, SPEN and CSRC.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit needs to be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous host transmission.\n- Note 1: Reserved in 28-pin devices; always maintain these bits clear.",
    "18.3.2 EUSART SYNCHRONOUS HOST RECEPTION\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either the Single Receive Enable bit, SREN  (RCSTA<5>), or the Continuous Receive Enable bit,  CREN  (RCSTA<4>). Data is sampled on the RX pin on the falling edge of the clock.\nIf enable  bit,  SREN,  is  set,  only  a  single  word  is received. If enable bit, CREN, is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Host Reception:",
    "18.3.2 EUSART SYNCHRONOUS HOST RECEPTION\n1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit, as required, to achieve the desired baud rate.\n3. Ensure bits, CREN and SREN, are clear.\n4. If interrupts are desired, set enable bit, RCIE.\n5. If 9-bit reception is desired, set bit, RX9.\n6. If a single reception is required, set bit, SREN. For continuous reception, set bit, CREN.\n7. Interrupt flag bit, RCIF, will be set when reception is complete and an interrupt will be generated if the enable bit, RCIE, was set.\n8. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG register.\n10. If any error occurred, clear the error by clearing bit, CREN.\n2. Enable the synchronous host serial port by setting bits, SYNC, SPEN and CSRC.",
    "18.3.2 EUSART SYNCHRONOUS HOST RECEPTION\n11. If  using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS HOST RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous host reception.\nNote 1: Reserved in 28-pin devices; always maintain these bits clear.",
    "18.4 EUSART Synchronous Client Mode\nSynchronous  Client  mode  is  entered  by  clearing  bit, CSRC  (TXSTA<7>).  This mode  differs from the Synchronous Host mode in that the shift clock is supplied externally at the CK pin (instead of being supplied internally  in  Host  mode).  This  allows  the  device  to transfer or receive data while in any low-power mode.",
    "18.4.1 EUSART SYNCHRONOUS CLIENT TRANSMISSION\nThe  operation  of  the  Synchronous  Host  and  Client modes  is  identical,  except  in  the  case  of  the  Sleep mode.\nIf  two  words  are  written  to  the TXREG  and  then  the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The  second  word  will  remain  in  the  TXREG register.\nc) Flag bit, TXIF, will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG  register  will  transfer  the  second word to the TSR and flag bit, TXIF, will now be set.\ne) If enable bit, TXIE, is set, the interrupt will wake the  chip  from  Sleep.  If  the  global  interrupt  is enabled, the program will branch to the interrupt vector.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous Client transmission.\nNote 1: Reserved in 28-pin devices; always maintain these bits clear.\nTo set up a Synchronous Client Transmission:",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT TRANSMISSION\n1. Enable  the  synchronous  Client  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. Clear bits, CREN and SREN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by  setting  enable  bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit needs to be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "18.4.2 EUSART SYNCHRONOUS CLIENT RECEPTION\nTo set up a Synchronous Client Reception:\nThe  operation  of  the  Synchronous  Host  and  Client modes is identical, except in the case of Sleep, or any Idle mode and bit, SREN, which is a 'don't care' in Client mode.\nIf  receive is enabled by setting the CREN bit prior to entering Sleep or any Idle mode, then a word may be received while in this low-power mode. Once the word is received, the RSR register will transfer the data to the RCREG register; if the RCIE enable bit is set, the interrupt  generated  will  wake  the  chip  from  the  lowpower  mode.  If  the  global  interrupt  is  enabled,  the program will branch to the interrupt vector.",
    "18.4.2 EUSART SYNCHRONOUS CLIENT RECEPTION\n1. Enable the synchronous host serial port by setting  bits,  SYNC  and  SPEN,  and  clearing  bit, CSRC.\n2. If interrupts are desired, set enable bit, RCIE.\n3. If 9-bit reception is desired, set bit, RX9.\n4. To enable reception, set enable bit, CREN.\n5. Flag  bit,  RCIF,  will  be  set  when  reception  is complete.  An interrupt will be  generated  if enable bit, RCIE, was set.\n6. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n7. Read  the  8-bit  received  data  by  reading  the RCREG register.\n8. If any error occurred, clear the error by clearing bit, CREN.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON (INTCON<7:6>) register are set.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 47.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 47. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 47. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 47. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 47. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS CLIENT RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 47\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous Client reception.\nNote 1: Reserved in 28-pin devices; always maintain these bits clear.\nNOTES:",
    "19.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nThe  Analog-to-Digital (A/D) Converter module has 10 inputs for the 28-pin devices and 13 for the 40/44-pin devices. This  module  allows  conversion  of  an  analog input signal to a corresponding 10-bit digital number.\nThe  ADCON0 register, shown in Register 19-1 , controls the operation of the A/D module. The ADCON1 register, shown in Register 19-2 , configures the functions of the port pins. The ADCON2 register, shown  in Register 19-3 , configures  the  A/D  clock source, programmed acquisition time and justification.\nThe module has five registers:\n\u00b7 A/D Result High (ADRESH) Register\n\u00b7 A/D Result Low (ADRESL) Register\n\u00b7 A/D Control (ADCON0) Register 0\n\u00b7 A/D Control (ADCON1) Register 1\n\u00b7 A/D Control (ADCON2) Register 2",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = CHS3. -, 3 = CHS2. -, 4 = CHS1. -, 5 = CHS0. -, 6 = GO/DONE. -, 7 = ADON. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5-2 CHS<3:0>: Analog Channel Select bits\n0000 =Channel 0 (AN0)\n0001 =Channel 1 (AN1)\n0010 =Channel 2 (AN2)\n0011 =Channel 3 (AN3)\n0100 =Channel 4 (AN4)\n0101 =Channel 5 (AN5) (1,2)\n0110 =Channel 6 (AN6) (1,2)",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\n0111 =Channel 7 (AN7) (1,2)\n1000 =Channel 8 (AN8)\n1001 =Channel 9 (AN9)\n1010 =Channel 10 (AN10)\n1011 =Channel 11 (AN11)\n1100 =Channel 12 (AN12)\n1101 =Unimplemented) (2)\n1110 =Unimplemented) (2)\n1111 =Unimplemented) (2)\nbit 1\nGO/DONE: A/D Conversion Status bit\nWhen ADON = 1 :\n1 = A/D conversion in progress\n0 = A/D Idle",
    "bit 0\nADON: A/D On bit\n1 = A/D Converter module is enabled\n0 = A/D Converter module is disabled\nNote 1: These channels are not implemented on 28-pin devices.\n- 2: Performing a conversion on unimplemented channels will return a floating input measurement.",
    "REGISTER 19-2: ADCON1: A/D CONTROL REGISTER 1\n-, U-0 = -. -, R/W-0 = VCFG1. -, R/W-0 = VCFG0. -, R/W-0 = PCFG3. -, R/W-q (1) = PCFG2. -, R/W-q (1) = PCFG1. -, R/W-q (1) = PCFG0. bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-q (1) = . bit 7, R/W-q (1) = . bit 7, R/W-q (1) = bit 0",
    "REGISTER 19-2: ADCON1: A/D CONTROL REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as ' 0 '\nbit 5\nVCFG1: Voltage Reference Configuration bit (VREF- source)\n1 = VREF- (AN2)\n0 = VSS\nbit 4\nVCFG0: Voltage Reference Configuration bit (VREF+ source)\n1 = VREF+ (AN3)\n0 = VDD",
    "bit 3-0\nPCFG<3:0>: A/D Port Configuration Control bits:",
    "bit 3-0\n0000 (1), AN12 = A. 0000 (1), AN11 = A. 0000 (1), AN10 = A. 0000 (1), AN9 = A. 0000 (1), AN8 = A. 0000 (1), AN7 (2) = A. 0000 (1), AN6 (2) = A. 0000 (1), AN5 (2) = A. 0000 (1), AN4 = A. 0000 (1), AN3 = A. 0000 (1), AN2 = A. 0000 (1), AN1 = A. 0000 (1), AN0 = A. 0001, AN12 = A. 0001, AN11 = A. 0001, AN10 = A. 0001, AN9 = A. 0001, AN8 = A. 0001, AN7 (2) = A. 0001, AN6 (2) = A. 0001, AN5 (2) = A. 0001, AN4 = A. 0001, AN3 = A. 0001, AN2 = A. 0001,",
    "bit 3-0\nAN1 = A. 0001, AN0 = A. 0010, AN12 = A. 0010, AN11 = A. 0010, AN10 = A. 0010, AN9 = A. 0010, AN8 = A. 0010, AN7 (2) = A. 0010, AN6 (2) = A. 0010, AN5 (2) = A. 0010, AN4 = A. 0010, AN3 = A. 0010, AN2 = A. 0010, AN1 = A. 0010, AN0 = A. 0011, AN12 = D. 0011, AN11 = A. 0011, AN10 = A. 0011, AN9 = A. 0011, AN8 = A. 0011, AN7 (2) = A. 0011, AN6 (2) = A. 0011, AN5 (2) = A. 0011, AN4 = A. 0011, AN3 = A. 0011, AN2 = A. 0011, AN1 = A. 0011, AN0 = A. 0100, AN12 = D. 0100, AN11",
    "bit 3-0\n= D. 0100, AN10 = A. 0100, AN9 = A. 0100, AN8 = A. 0100, AN7 (2) = A. 0100, AN6 (2) = A. 0100, AN5 (2) = A. 0100, AN4 = A. 0100, AN3 = A. 0100, AN2 = A. 0100, AN1 = A. 0100, AN0 = A. 0101, AN12 = D. 0101, AN11 = D. 0101, AN10 = D. 0101, AN9 = A. 0101, AN8 = A. 0101, AN7 (2) = A. 0101, AN6 (2) = A. 0101, AN5 (2) = A. 0101, AN4 = A. 0101, AN3 = A. 0101, AN2 = A. 0101, AN1 = A. 0101, AN0 = A. 0110, AN12 = D. 0110, AN11 = D. 0110, AN10 = D. 0110, AN9 = D. 0110, AN8 =",
    "bit 3-0\nA. 0110, AN7 (2) = A. 0110, AN6 (2) = A. 0110, AN5 (2) = A. 0110, AN4 = A. 0110, AN3 = A. 0110, AN2 = A. 0110, AN1 = A. 0110, AN0 = A. 0111 (1), AN12 = D. 0111 (1), AN11 = D. 0111 (1), AN10 = D. 0111 (1), AN9 = D. 0111 (1), AN8 = D. 0111 (1), AN7 (2) = A. 0111 (1), AN6 (2) = A. 0111 (1), AN5 (2) = A. 0111 (1), AN4 = A. 0111 (1), AN3 = A. 0111 (1), AN2 = A. 0111 (1), AN1 = A. 0111 (1), AN0 = A. 1000, AN12 = D. 1000, AN11 = D. 1000, AN10 = D. 1000, AN9",
    "bit 3-0\n= D. 1000, AN8 = D. 1000, AN7 (2) = D. 1000, AN6 (2) = A. 1000, AN5 (2) = A. 1000, AN4 = A. 1000, AN3 = A. 1000, AN2 = A. 1000, AN1 = A. 1000, AN0 = A. 1001, AN12 = D. 1001, AN11 = D. 1001, AN10 = D. 1001, AN9 = D. 1001, AN8 = D. 1001, AN7 (2) = D. 1001, AN6 (2) = D. 1001, AN5 (2) = A. 1001, AN4 = A. 1001, AN3 = A. 1001, AN2 = A. 1001, AN1 = A. 1001, AN0 = A. 1010, AN12 = D. 1010, AN11 = D. 1010, AN10 = D. 1010, AN9 = D. 1010, AN8 = D. 1010, AN7 (2) = D. 1010, AN6 (2) = D.",
    "bit 3-0\n1010, AN5 (2) = D. 1010, AN4 = A. 1010, AN3 = A. 1010, AN2 = A. 1010, AN1 = A. 1010, AN0 = A. 1011, AN12 = D. 1011, AN11 = D. 1011, AN10 = D. 1011, AN9 = D. 1011, AN8 = D. 1011, AN7 (2) = D. 1011, AN6 (2) = D. 1011, AN5 (2) = D. 1011, AN4 = D. 1011, AN3 = A. 1011, AN2 = A. 1011, AN1 = A. 1011, AN0 = A. 1100, AN12 = D. 1100, AN11 = D. 1100, AN10 = D. 1100, AN9 = D. 1100, AN8 = D. 1100, AN7 (2) = D. 1100, AN6 (2) = D. 1100, AN5 (2) = D. 1100, AN4 = D. 1100, AN3 = D. 1100, AN2 = A. 1100,",
    "bit 3-0\nAN1 = A. 1100, AN0 = A. 1101, AN12 = D. 1101, AN11 = D. 1101, AN10 = D. 1101, AN9 = D. 1101, AN8 = D. 1101, AN7 (2) = D. 1101, AN6 (2) = D. 1101, AN5 (2) = D. 1101, AN4 = D. 1101, AN3 = D. 1101, AN2 = D. 1101, AN1 = A. 1101, AN0 = A. 1110, AN12 = D. 1110, AN11 = D. 1110, AN10 = D. 1110, AN9 = D. 1110, AN8 = D. 1110, AN7 (2) = D. 1110, AN6 (2) = D. 1110, AN5 (2) = D. 1110, AN4 = D. 1110, AN3 = D. 1110, AN2 = D. 1110, AN1 = D. 1110, AN0 = A. 1111, AN12 = D. 1111, AN11 =",
    "bit 3-0\nD. 1111, AN10 = D. 1111, AN9 = D. 1111, AN8 = D. 1111, AN7 (2) = D. 1111, AN6 (2) = D. 1111, AN5 (2) = D. 1111, AN4 = D. 1111, AN3 = D. 1111, AN2 = D. 1111, AN1 = D. 1111, AN0 = D\nA = Analog input\nD = Digital I/O\nNote 1: The POR value of the PCFG bits depends on the value of the PBADEN Configuration bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .\n2: AN5 through AN7 are available only on 40/44-pin devices.",
    "REGISTER 19-3: ADCON2: A/D CONTROL REGISTER 2\nADFM, U-0 = -. ADFM, R/W-0 = ACQT2. ADFM, R/W-0 = ACQT1. ADFM, R/W-0 = ACQT0. ADFM, R/W-0 = ADCS2. ADFM, R/W-0 = ADCS1. ADFM, R/W-0 = ADCS0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 19-3: ADCON2: A/D CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nADFM: A/D Result Format Select bit\n1 = Right justified\n0 = Left justified\nbit 6 Unimplemented: Read as ' 0 '\nbit 5-3\nACQT<2:0>: A/D Acquisition Time Select bits\n111 = 20 TAD\n110 = 16 TAD\n101 = 12 TAD\n100 = 8 TAD\n011 = 6 TAD\n010 = 4 TAD\n001 = 2 TAD\n000 = 0 TAD (1)",
    "bit 2-0\nADCS<2:0>: A/D Conversion Clock Select bits\n111 = FRC (clock derived from A/D RC oscillator) (1)\n110 = FOSC/64\n101 = FOSC/16\n100 = FOSC/4\n011 = FRC (clock derived from A/D RC oscillator) (1)\n010 = FOSC/32\n001 = FOSC/8\n000 = FOSC/2\nNote 1: If the A/D FRC clock source is selected, a delay of one TCY (instruction cycle) is added before the A/D clock starts. This allows the SLEEP instruction to be executed before starting a conversion.",
    "PIC18F2420/2520/4420/4520\nThe analog reference voltage is software selectable to either the device's positive and negative supply voltage (VDD and VSS), or the voltage level on the RA3/AN3/ VREF+ and RA2/AN2/VREF-/CVREF pins.\nA device Reset forces all registers to their Reset state. This forces the A/D module to be turned off and any conversion in progress is aborted.\nThe A/D Converter has a unique feature of being able to operate while the device is in Sleep mode. To operate in Sleep, the A/D conversion clock must be derived from the A/D's internal RC oscillator.\nThe output of the sample and hold is the input into the converter,  which  generates  the  result  via  successive approximation.",
    "PIC18F2420/2520/4420/4520\nEach port pin associated with the A/D Converter can be configured as an analog input, or as a digital I/O. The ADRESH and ADRESL registers contain the result of the A/D conversion. When the A/D conversion is complete, the result is loaded into the ADRESH:ADRESL register pair, the GO/DONE (ADCON0 register) bit is cleared and the A/D Interrupt Flag bit, ADIF, is set. The block diagram of the A/D module is shown in Figure 19-1 .\nThe  value  in  the  ADRESH:ADRESL  registers  is  not modified for a Power-on Reset. The ADRESH:ADRESL registers  will  contain  unknown  data  after  a  Power-on Reset.",
    "PIC18F2420/2520/4420/4520\nAfter the A/D module has been configured as desired, the  selected  channel  must  be  acquired  before  the conversion is started. The analog input channels must have  their  corresponding  TRIS  bits  selected  as  an input. To determine acquisition time, see Section 19.1 'A/D Acquisition Requirements' . After this acquisition  time  has  elapsed,  the  A/D  conversion  can  be started.  An  acquisition  time  can  be  programmed  to occur between setting the GO/DONE bit and the actual start of the conversion.\nThe following steps need to be followed to perform an A/ D conversion:",
    "PIC18F2420/2520/4420/4520\n1. Configure the A/D module:\n\u00b7 Configure analog pins, voltage reference and digital I/O (ADCON1)\n\u00b7 Select A/D input channel (ADCON0)\n\u00b7 Select A/D acquisition time (ADCON2)\n\u00b7 Select A/D conversion clock (ADCON2)\n\u00b7 Turn on A/D module (ADCON0)\n2. Configure A/D interrupt (if desired):\n\u00b7 Clear ADIF bit\n\u00b7 Set ADIE bit\n\u00b7 Set GIE bit\n3. Wait the required acquisition time (if required).\n4. Start conversion:\n\u00b7 Set GO/DONE (ADCON0 register) bit\n5. Wait for A/D conversion to complete, by either:\n\u00b7 Polling for the GO/DONE bit to be cleared\nOR",
    "PIC18F2420/2520/4420/4520\n\u00b7 Waiting for the A/D interrupt\n6. Read A/D Result registers (ADRESH:ADRESL); clear bit, ADIF, if required.\n7. For next conversion, go to step 1 or step 2, as required.  The  A/D  conversion  time  per  bit  is defined  as  TAD.  A  minimum  wait  of  2  TAD  is required before the next acquisition starts.",
    "19.1 A/D Acquisition Requirements\nFor the A/D Converter to meet its specified accuracy, the charge holding capacitor (CHOLD) must be allowed to fully charge to the input channel voltage level. The analog  input  model  is  shown  in Figure 19-3 . The source  impedance  (RS)  and  the  internal  sampling switch (RSS) impedance directly affect the time required to charge the capacitor CHOLD. The sampling switch (RSS) impedance varies over the device voltage (VDD). The source impedance affects the offset voltage at the analog input (due to pin leakage current). The maximum  recommended  impedance  for  analog sources is 2.5 k \uf057 . After the analog input channel is selected (changed), the channel must be sampled for at least the minimum acquisition time before starting a conversion.\nNote:\nWhen  the conversion is started, the holding capacitor is disconnected from the input pin.",
    "EQUATION 19-1: ACQUISITION TIME\nTACQ, 1 = =. TACQ, 2 = Amplifier Settling Time + Holding Capacitor Charging Time + Temperature Coefficient. =, 1 = . =, 2 = TAMP + TC + TCOFF",
    "EQUATION 19-2: A/D MINIMUM CHARGING TIME\nVHOLD or, 1 = =. VHOLD or, 2 = (V REF - (V REF /2048)) \u2022 (1 - e (-T C /C HOLD(R IC + RSS + RS)) ). TC, 1 = =. TC, 2 = -(C HOLD)(R IC + RSS + RS) ln(1/2048)",
    "EQUATION 19-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\n```\nTACQ = TAMP + TC + TCOFF TAMP = 0.2 \uf06d s TCOFF = (Temp - 25 C)(0.02 \uf0b0 \uf06d s/ \uf0b0 C) (85 C - 25 C)(0.02 \uf0b0 \uf0b0 \uf06d s/ \uf0b0 C) 1.2 \uf06d s Temperature coefficient is only required for temperatures > 25 C. Below 25 C, TCOFF = 0 \uf0b0 \uf0b0 \uf06d s. TC = -(CHOLD)(RIC + RSS + RS) ln(1/2047) \uf06d s -(25 pF) (1 k \uf057 + 2 k \uf057 + 2.5 k \uf057 ) ln(0.0004883) \uf06d s 1.05 \uf06d s TACQ = 0.2 \uf06d s + 1 \uf06d s + 1.2 \uf06d s 2.4 \uf06d s\n```\nTo calculate the minimum acquisition time, Equation 19-1 may be used. This equation assumes that 1/2 LSb error is used (1024 steps for the A/D). The 1/2 LSb error is the maximum error allowed for the A/D to meet its specified resolution.",
    "EQUATION 19-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nExample 19-3 shows the calculation of the minimum required  acquisition  time  TACQ.  This  calculation  is based on the following application system assumptions:\nCHOLD\n= 25 pF\nRs\n= 2.5 k \uf057\uf020\nConversion Error\n\uf0a3 1/2 LSb\nVDD\n= 5V \uf0ae Rss = 2 k \uf057\nTemperature\n= 85 C (system max.) \uf0b0",
    "19.3 Selecting the A/D Conversion Clock\nThe ADCON2  register  allows  the  user  to  select  an acquisition time that occurs each time the GO/DONE bit  is  set.  It  also  gives  users  the  option  to  use  an automatically determined acquisition time.\nAcquisition time may be set with the ACQT<2:0> bits (ADCON2<5:3>),  which  provides  a  range  of  2  to 20 TAD. When the GO/DONE bit is set, the A/D module continues to sample the input for the selected acquisition  time,  then  automatically  begins  a  conversion. Since the acquisition time is programmed, there may be  no  need  to  wait  for  an  acquisition  time  between selecting a channel and setting the GO/DONE bit.\nManual acquisition is selected when ACQT<2:0> = 000 . When  the  GO/DONE  bit  is  set, sampling is stopped and a conversion begins. The user is responsible for ensuring the required acquisition time has passed  between  selecting the desired input channel and setting the GO/DONE bit. This option is also the default Reset state of the ACQT<2:0> bits and is compatible with devices that do not offer programmable acquisition times.",
    "19.3 Selecting the A/D Conversion Clock\nThe A/D conversion time per bit is defined as TAD. The A/D conversion requires 11 TAD per 10-bit conversion. The  source  of  the A/D  conversion  clock  is  software selectable. There are seven possible options for TAD:\n\u00b7 2 TOSC\n\u00b7 4 TOSC\n\u00b7 8 TOSC\n\u00b7 16 TOSC\n\u00b7 32 TOSC\n\u00b7 64 TOSC\n\u00b7 Internal RC Oscillator\nFor correct A/D conversions, the A/D conversion clock (TAD) must be as short as possible, but greater than the minimum TAD (see parameter 130 for more information).\nTable 19-1 shows the resultant TAD times derived from the  device  operating  frequencies  and  the A/D  clock source selected.\nIn either case, when the conversion is completed, the GO/DONE bit is cleared, the ADIF flag is set and the A/D  begins  sampling  the  currently  selected  channel again.  If  an  acquisition  time  is  programmed,  there  is nothing to indicate if the acquisition time has ended or if the conversion has begun.",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n2 TOSC, AD Clock Source (T AD).ADCS<2:0> = 000. 2 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 2.86 MHz. 2 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 1.43 kHz. 4 TOSC, AD Clock Source (T AD).ADCS<2:0> = 100. 4 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 5.71 MHz. 4 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 2.86 MHz. 8 TOSC, AD Clock Source (T AD).ADCS<2:0> = 001. 8 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 11.43 MHz. 8 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 5.72 MHz. 16 TOSC, AD Clock Source (T AD).ADCS<2:0> = 101. 16",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\nTOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 22.86 MHz. 16 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 11.43 MHz. 32 TOSC, AD Clock Source (T AD).ADCS<2:0> = 010. 32 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 40.0 MHz. 32 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 22.86 MHz. 64 TOSC, AD Clock Source (T AD).ADCS<2:0> = 110. 64 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 40.0 MHz. 64 TOSC, Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 22.86 MHz. RC (3), AD Clock Source (T AD).ADCS<2:0> = x11. RC (3), Maximum Device Frequency.PIC18F2X20/4X20 =",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n1.00 MHz (1). RC (3), Maximum Device Frequency.PIC18LF2X2X/4X20 (4) = 1.00 MHz (2)\nNote 1: The RC source has a typical TAD time of 1.2 \uf06d s.\n2: The RC source has a typical TAD time of 2.5 \uf06d s.\n3: For device frequencies above 1 MHz, the device must be in Sleep for the entire conversion or the A/D accuracy may be out of specification.\n4: Low-power (PIC18LFXXXX) devices only.",
    "19.4 Operation in Power-Managed Modes\nThe selection of the automatic acquisition time and A/D conversion  clock  is  determined  in  part  by  the  clock source and frequency while in a power-managed mode.\nIf the A/D is expected to operate while the device is in a power-managed mode, the ACQT<2:0> and ADCS<2:0>  bits  in ADCON2  need  to  be  updated  in accordance with the clock source to  be used in that mode. After entering the mode, an A/D acquisition or conversion may be started. Once started, the device needs  to  continue  to  be  clocked  by  the  same  clock source until the conversion has been completed.\nIf desired, the device may be placed into the corresponding Idle mode during the conversion. If the device clock frequency is less than 1 MHz, the A/D RC clock source needs to be selected.",
    "19.4 Operation in Power-Managed Modes\nOperation in Sleep mode requires the A/D FRC clock to be selected. If the ACQT<2:0> bits are set to ' 000 ' and a conversion is started, the conversion will be delayed one instruction cycle to allow execution of the SLEEP instruction and  entry  to  Sleep  mode.  The  IDLEN (OSCCON<7>)  bit  must  have  already  been  cleared prior to starting the conversion.",
    "19.5 Configuring Analog Port Pins\nThe ADCON1, TRISA, TRISB and TRISE registers all configure the A/D port pins. The port pins needed as analog inputs must have their corresponding TRIS bits set (input). If the TRIS bit is cleared (output), the digital output level (VOH or VOL) will be converted.\nThe A/D operation is independent of the state of the CHS<3:0> bits and the TRIS bits.\nNote 1: When reading the PORT register, all pins configured as analog input channels will read as cleared (a low level). Pins configured  as  digital  inputs  will  convert  as analog inputs. Analog levels on a digitally configured input will be accurately converted.\n2: Analog levels on any pin defined as a digital input may cause the digital input buffer to consume current out of the device's specification limits.\n3: The PBADEN bit, in Configuration Register  3H,  configures  PORTB  pins  to reset  as  analog  or  digital  pins  by  controlling  how  the  PCFG  bits  in ADCON1 are reset.",
    "19.6 A/D Conversions\nFigure 19-4 shows the operation of the A/D Converter after the GO/DONE  bit has been set and the ACQT<2:0> bits are cleared. A conversion is started after the following instruction to allow entry into Sleep mode before the conversion begins.\nFigure 19-5 shows the operation of the A/D Converter after the GO/DONE  bit has been set and the ACQT<2:0> bits are set to ' 010 ', and selecting a 4 TAD acquisition time before the conversion starts.\nAfter  the A/D  conversion  is  completed  or  aborted,  a 2 TAD wait is required before the next acquisition can be started. After this wait, acquisition on the selected channel is automatically started.\nNote:\nThe GO/DONE bit needs to NOT be set in the same instruction that turns on the A/D.",
    "19.7 Discharge\nClearing the GO/DONE bit during a conversion will abort the current conversion. The A/D Result register pair will NOT  be  updated  with  the  partially  completed  A/D conversion sample. This means the ADRESH:ADRESL registers  will  continue  to  contain  the  value  of  the  last completed conversion (or the last value written to the ADRESH:ADRESL registers).\nThe discharge phase is used to initialize the value of the  capacitor  array.  The  array  is  discharged  before every sample. This feature helps to optimize the unitygain amplifier, as the circuit always needs to charge the capacitor array, rather than charge/discharge based on previous measure values.\nFIGURE 19-4: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 000 , TACQ = 0 )\nFIGURE 19-5: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 010 , TACQ = 4 TAD)",
    "19.8 Use of the CCP2 Trigger\nAn A/D conversion can be started by the Special Event Trigger  of  the  CCP2  module.  This  requires  that  the CCP2M<3:0> bits (CCP2CON<3:0>) be programmed as ' 1011 ' and that the A/D module is enabled (ADON bit is set). When the trigger occurs, the GO/DONE bit will be set, starting the A/D acquisition and conversion, and  the  Timer1  (or  Timer3)  counter  will  be  reset  to zero.  Timer1  (or  Timer3)  is  reset  to  automatically repeat the A/D acquisition period with minimal software overhead  (moving ADRESH:ADRESL  to  the  desired location). The appropriate analog input channel must be  selected  and  the  minimum  acquisition  period  is either timed by the user, or an appropriate TACQ time is selected before the Special Event Trigger sets the GO/ DONE bit (starts a conversion).\nIf the A/D module is not enabled (ADON is cleared), the Special  Event  Trigger  will  be  ignored  by  the  A/D module,  but  will  still  reset  the  Timer1  (or  Timer3) counter.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 45. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 48. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 48. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 48. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nPIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Reset Values on page = 47. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Reset Values on page = 47. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0,",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nBit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Reset Values on page = 47. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 47. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n0 = ADCS0. ADCON2, Reset Values on page = 47. PORTA, Bit 7 = RA7 (2). PORTA, Bit 6 = RA6 (2). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 48. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Reset Values on page = 48. PORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 48. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on page = 48. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch).",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nLATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Reset Values on page = 48. PORTE (4), Bit 7 = -. PORTE (4), Bit 6 = -. PORTE (4), Bit 5 = -. PORTE (4), Bit 4 = -. PORTE (4), Bit 3 = RE3 (3). PORTE (4), Bit 2 = RE2. PORTE (4), Bit 1 = RE1. PORTE (4), Bit 0 = RE0. PORTE (4), Reset Values on page = 48. TRISE (4), Bit 7 = IBF. TRISE (4), Bit 6 = OBF. TRISE (4), Bit 5 = IBOV. TRISE (4), Bit 4 = PSPMODE.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nTRISE (4), Bit 3 = -. TRISE (4), Bit 2 = TRISE2. TRISE (4), Bit 1 = TRISE1. TRISE (4), Bit 0 = TRISE0. TRISE (4), Reset Values on page = 48. LATE (4), Bit 7 = -. LATE (4), Bit 6 = -. LATE (4), Bit 5 = -. LATE (4), Bit 4 = -. LATE (4), Bit 3 = -. LATE (4), Bit 2 = PORTE Data Latch Register. LATE (4), Bit 1 = PORTE Data Latch Register. LATE (4), Bit 0 = PORTE Data Latch Register. LATE (4), Reset Values on page = 48\nLegend:",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n- = unimplemented, read as ' 0 '. Shaded cells are not used for A/D conversion.\nNote 1:\nThese bits are unimplemented on 28-pin devices; always maintain these bits clear.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n3: RE3 port bit is available only as an input pin when the MCLRE Configuration bit is ' 0 '.\n4: These registers are not implemented on 28-pin devices.",
    "20.0 COMPARATOR MODULE\nThe analog comparator module contains two comparators  that  can  be  configured  in  a  variety  of ways.  The  inputs  can  be  selected  from  the  analog inputs multiplexed with pins, RA0 through RA5, as well as  the  on-chip  voltage  reference  (see Section 21.0 'Comparator Voltage Reference Module' ). The digital outputs (normal or inverted) are available at the pin level and can also be read through the control register.\nThe  CMCON  register  ( Register 20-1 ) selects the comparator input and output configuration. Block diagrams of the various comparator configurations are shown in Figure 20-1 .",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nC2OUT, R-0 = C1OUT. C2OUT, R/W-0 = C2INV. C2OUT, R/W-0 = C1INV. C2OUT, R/W-0 = CIS. C2OUT, R/W-1 = CM2. C2OUT, R/W-1 = CM1. C2OUT, R/W-1 = CM0. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 C2OUT : Comparator 2 Output bit\nWhen C2INV = 0 :\n1 = C2 VIN+ > C2 VIN-\n0 = C2 VIN+ < C2 VIN-\nWhen C2INV = 1 :\n1 = C2 VIN+ < C2 VIN-\n0 = C2 VIN+ > C2 VIN-",
    "bit 6\nC1OUT : Comparator 1 Output bit\nWhen C1INV = 0 :\n1 = C1 VIN+ > C1 VIN-\n0 = C1 VIN+ < C1 VIN-\nWhen C1INV = 1 :\n1 = C1 VIN+ < C1 VIN-\n0 = C1 VIN+ > C1 VIN-",
    "bit 5\nC2INV : Comparator 2 Output Inversion bit\n1 = C2 output inverted\n0 = C2 output not inverted",
    "bit 4\nC1INV : Comparator 1 Output Inversion bit\n1 = C1 output inverted\n0 = C1 output not inverted",
    "bit 3\nCIS : Comparator Input Switch bit\nWhen CM<2:0> = 110 :\n1 = C1 VIN- connects to RA3/AN3/VREF+\nC2 VIN- connects to RA2/AN2/VREF-/CVREF\n0 = C1 VIN- connects to RA0/AN0\nC2 VIN- connects to RA1/AN1",
    "bit 2-0 CM<2:0> : Comparator Mode bits\nFigure 20-1 shows the Comparator modes and the CM<2:0> bit settings.",
    "20.1 Comparator Configuration\nThere are eight modes of operation for the comparators, shown  in Figure 20-1 . Bits CM<2:0>  of  the CMCON register are used to select these modes. The TRISA register controls the data direction of the comparator pins for each mode. If the Comparator mode is changed, the comparator output level may not be valid for the specified mode  change delay shown in Section 26.0 'Electrical Characteristics' .\nNote:, 1 = Comparator interrupts need to be disabled during a Comparator mode change; otherwise, a false interrupt may occur.\nFIGURE 20-1:",
    "20.2 Comparator Operation\nA  single  comparator  is  shown  in Figure 20-2 ,  along with the relationship between the analog input levels and the digital output. When the analog input at VIN+ is less  than  the  analog  input  VIN-,  the  output  of  the comparator is a digital low level. When the analog input at VIN+ is greater than the analog input VIN-, the output of  the  comparator is a digital high level. The shaded areas of the output of the comparator in Figure 20-2 represent  the  uncertainty,  due  to  input  offsets  and response time.",
    "20.3 Comparator Reference\nDepending on the comparator operating mode, either an external or internal voltage reference may be used. The analog signal present at VIN- is compared to the signal at VIN+ and the digital output of the comparator is adjusted accordingly ( Figure 20-2 ).\nFIGURE 20-2: SINGLE COMPARATOR",
    "20.3.1 EXTERNAL REFERENCE SIGNAL\nWhen  external voltage references are used, the comparator module can be configured to have the comparators operate from the same or different reference sources. However, threshold detector applications may require the same reference. The reference signal must be between VSS and VDD and can be applied to either pin of the comparator(s).",
    "20.3.2 INTERNAL REFERENCE SIGNAL\nThe comparator module also allows the selection of an internally generated voltage reference from the comparator voltage reference module. This module is described in more detail in Section 21.0 'Comparator Voltage Reference Module' .\nThe  internal  reference  is  only  available  in  the  mode where four inputs are multiplexed to two comparators (CM<2:0> = 110 ).  In  this  mode,  the  internal  voltage reference is applied to the VIN+ pin of both comparators.",
    "20.4 Comparator Response Time\nResponse time is the minimum time, after selecting a new  reference  voltage  or  input  source,  before  the comparator output has a valid level. If the internal reference is changed, the maximum delay of the internal voltage reference must be considered when using the comparator outputs. Otherwise, the maximum delay of the  comparators  need to  be  used (see Section 26.0 'Electrical Characteristics' ).",
    "20.5 Comparator Outputs\nThe comparator outputs are read through the CMCON register.  These  bits  are  read-only.  The  comparator outputs may also be directly output to the RA4 and RA5 I/O pins. When enabled, multiplexers in the output path of the RA4 and RA5 pins will switch and the output of each  pin  will  be  the  unsynchronized  output  of  the comparator. The uncertainty of each of the comparators is related to the input offset voltage and the response time given in the specifications. Figure 20-3 shows the comparator output block diagram.\nThe TRISA bits will still function as an output enable/ disable for the RA4 and RA5 pins while in this mode.\nThe polarity of the comparator outputs can be changed using the C2INV and C1INV bits (CMCON<4:5>).\nNote 1: When reading the PORT register, all pins configured as analog inputs will read as ' 0 '.  Pins  configured  as  digital  inputs  will convert an analog input according to the Schmitt Trigger input specification.\n2: Analog  levels  on  any  pin  defined  as  a digital input may cause the input buffer to consume more current than is specified.",
    "20.6 Comparator Interrupts\nThe comparator interrupt flag is set whenever there is a  change  in  the  output  value  of  either  comparator. Software  will  need  to  maintain  information  about  the status of the output bits, as read from CMCON<7:6>, to determine the actual change that occurred. The CMIF (PIR2<6>)  bit  is  the  Comparator  Interrupt  Flag.  The CMIF bit must be reset by clearing it. Since it is also possible  to  write  a  ' 1 ' to  this  register,  a  simulated interrupt may be initiated.",
    "20.7 Comparator Operation During Sleep\nBoth the CMIE (PIE2<6>) bit and the PEIE (INTCON<6>) bit must be set to enable the interrupt. In addition, the GIE (INTCON<7>) bit must also be set. If any of these bits are clear, the interrupt is not enabled, though  the  CMIF  bit  will  still  be  set  if  an  interrupt condition occurs.\nNote:\nIf  a  change  in  the  CMCON  (C1OUT  or C2OUT) register needs to occur when a read operation is being executed (start of the Q2 cycle), then the CMIF (PIR2<6>) interrupt flag may not get set.\nThe user, in the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  CMCON  will  end  the mismatch condition.\nb) Clear flag bit, CMIF.\nA mismatch condition will continue to set flag bit, CMIF. Reading CMCON will end the mismatch condition and allow flag bit, CMIF, to be cleared.",
    "20.7 Comparator Operation During Sleep\nWhen a comparator is active and the device is placed in Sleep mode, the comparator remains active and the interrupt  is  functional  if  enabled.  This  interrupt  will wake-up the device from Sleep mode when enabled. Each operational comparator will consume additional current, as shown in the comparator specifications. To minimize power consumption while in Sleep mode, turn off the comparators (CM<2:0> = 111 ) before entering Sleep. If the device wakes up from Sleep, the contents of the CMCON register are not affected.",
    "20.8 Effects of a Reset\nA device Reset forces the CMCON register to its Reset state, causing the comparator modules to be turned off (CM<2:0> = 111) . However, the input pins (RA0 through  RA3)  are  configured  as  analog  inputs  by default on device Reset. The I/O configuration for these pins is determined by the setting of the PCFG<3:0> bits (ADCON1<3:0>). Therefore, device current is minimized  when  analog  inputs  are  present  at  Reset time.",
    "20.9 Analog Input Connection Considerations\nA  simplified  circuit  for  an  analog  input  is  shown  in Figure 20-4 . Since the analog pins are connected to a digital output, they have reverse biased diodes to VDD and VSS. The analog input, therefore, must be between VSS and VDD. If the input  voltage  deviates  from  this range by more than 0.6V in either direction, one of the diodes is forward biased and a latch-up condition may occur.  A  maximum  source  impedance  of  10 k \uf057 is recommended  for  the  analog  sources. Any  external component connected to an analog input pin, such as a capacitor or a Zener diode, needs to have very little leakage current.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 47. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 47. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 =",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nTMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 48. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 48. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 =",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 48. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 48. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTAData Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTAData Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTAData Latch",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nRegister (Read and Write to Data Latch). LATA, Bit 2 = PORTAData Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTAData Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTAData Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 48. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTAData Direction Register. TRISA, Bit 4 = PORTAData Direction Register. TRISA, Bit 3 = PORTAData Direction Register. TRISA, Bit 2 = PORTAData Direction Register. TRISA, Bit 1 = PORTAData Direction Register. TRISA, Bit 0 = PORTAData Direction Register. TRISA, Reset Values on page = 48\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are unused by the comparator module.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nNote 1: PORTA<7:6> and their direction and latch bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits are read as ' 0 '.",
    "21.0 COMPARATOR VOLTAGE REFERENCE MODULE\nThe comparator voltage reference is a 16-tap resistor ladder  network  that  provides  a  selectable  reference voltage. Although its primary purpose is to provide a reference for the analog comparators, it may also be used independently of them.\nA block diagram of the module is shown in Figure 21-\n1 .  The  resistor  ladder  is  segmented  to  provide  two ranges  of  CVREF  values  and  has  a  power-down function to conserve power when the reference is not being  used.  The  module's  supply  reference  can  be provided  from  either  device  VDD/VSS  or  an  external voltage reference.",
    "21.1 Configuring the Comparator Voltage Reference\nis selected  by  the  CVRR  (CVRCON<5>)  bit.  The primary difference between the ranges is the size of the steps  selected  by  the  CVREF  Selection  (CVR<3:0>) bits, with one range offering finer resolution. The equations  used  to  calculate  the  output  of  the  comparator voltage reference are as follows:\nIf CVRR = 1 :\nCVREF = ((CVR<3:0>)/24) x CVRSRC\nIf CVRR = 0 :\nCVREF = (CVRSRC x 1/4) + (((CVR<3:0>)/32) x CVRSRC)\nThe  comparator  reference  supply  voltage  can  come from either VDD and VSS, or the external VREF+ and VREF-  that  are  multiplexed  with  RA2  and  RA3.  The voltage source is selected by the CVRSS (CVRCON<4>) bit.\nThe voltage reference module is controlled through the CVRCON  register  ( Register 21-1 ).  The  comparator voltage reference provides two ranges of output voltage, each with 16 distinct levels. The range to be used",
    "21.1 Configuring the Comparator Voltage Reference\nThe settling time of the comparator voltage reference must be considered when changing the CVREF output  (see Table 26-3 in Section 26.0  'Electrical Characteristics' ).",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nCVREN, R/W-0 = CVROE (1). CVREN, R/W-0 = CVRR. CVREN, R/W-0 = CVRSS. CVREN, R/W-0 = CVR3. CVREN, R/W-0 = CVR2. CVREN, R/W-0 = CVR1. CVREN, R/W-0 = CVR0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nCVREN: Comparator Voltage Reference Enable bit\n1 = CVREF circuit powered on\n0 = CVREF circuit powered down\nbit 6\nCVROE: Comparator VREF Output Enable bit (1)\n1 = CVREF voltage level is also output on the RA2/AN2/VREF-/CVREF pin\n0 = CVREF voltage is disconnected from the RA2/AN2/VREF-/CVREF pin\nbit 5\nCVRR: Comparator VREF Range Selection bit",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\n1 = 0 to 0.667 CVRSRC, with CVRSRC/24 step size (low range)\n0 = 0.25 CVRSRC to 0.75 CVRSRC, with CVRSRC/32 step size (high range)\nbit 4\nCVRSS: Comparator VREF Source Selection bit\n1 = Comparator reference source, CVRSRC = (VREF+) - (VREF-)\n0 = Comparator reference source, CVRSRC = VDD - VSS\nbit 3-0\nCVR3:CVR0: Comparator VREF Value Selection bits (0 \uf0a3 (CVR<3:0>) \uf0a3 15)\nWhen CVRR = 1 :\nCVREF = ((CVR<3:0>)/24)   (CVRSRC) \uf0b7\nWhen CVRR = 0 :\nCVREF = (CVRSRC/4) + ((CVR<3:0>)/32)   (CVRSRC) \uf0b7\nNote 1: CVROE overrides the TRISA<2> bit setting.",
    "PIC18F2420/2520/4420/4520\nFIGURE 21-1: COMPARATOR VOLTAGE REFERENCE BLOCK DIAGRAM",
    "21.4 Effects of a Reset\nThe full range of voltage reference cannot be realized due to the construction of the module. The transistors on the top and bottom of the resistor ladder network ( Figure 21-1 ) keep CVREF from approaching the reference  source  rails.  The  voltage  reference  is  derived from the reference source; therefore, the CVREF output changes  with  fluctuations  in  that  source.  The  tested absolute  accuracy  of  the  voltage  reference  can  be found in Section 26.0 'Electrical Characteristics' .",
    "21.3 Operation During Sleep\nWhen  the  device  wakes  up  from  Sleep  through  an interrupt or a Watchdog Timer time-out, the contents of the  CVRCON  register  are  not  affected.  To  minimize current consumption  in Sleep mode,  the voltage reference needs to be disabled.\nA  device  Reset  disables  the  voltage  reference  by clearing  bit,  CVREN  (CVRCON<7>).  This  Reset  also disconnects the reference from the RA2 pin by clearing bit, CVROE (CVRCON<6>) and selects the high-voltage range by clearing bit, CVRR (CVRCON<5>). The CVR value select bits are also cleared.",
    "21.5 Connection Considerations\nThe voltage reference module operates independently of the comparator module. The output of the reference generator  may  be  connected  to  the  RA2  pin  if  the CVROE bit is set. Enabling the voltage reference output onto RA2 when it is configured as a digital input will increase  current  consumption.  Connecting  RA2  as  a digital  output  with  CVRSS enabled will also increase current consumption.\nThe RA2 pin can be used as a simple D/A output with limited drive capability. Due to the limited current drive capability, a  buffer  must  be  used  on  the  voltage reference  output  for  external  connections  to  VREF. Figure 21-2 shows an example buffering technique.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nCVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 47. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 47. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTAData Direction Register. TRISA, Bit 4 = PORTAData Direction Register. TRISA, Bit 3 = PORTAData Direction Register.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nTRISA, Bit 2 = PORTAData Direction Register. TRISA, Bit 1 = PORTAData Direction Register. TRISA, Bit 0 = PORTAData Direction Register. TRISA, Reset Values on page = 48\n- Legend: Shaded cells are not used with the comparator voltage reference.\nNote 1: PORTA pins are enabled based on oscillator configuration.",
    "22.0 HIGH/LOW-VOLTAGE DETECT (HLVD)\nPIC18F2420/2520/4420/4520  devices  have  a  High/ Low-Voltage Detect module (HLVD). This is a programmable circuit that allows the user to specify both a device voltage trip point and the direction of change from that point. If the device experiences an excursion past the trip point in that direction, an interrupt flag is set. If the interrupt is enabled, the program execution will branch to the interrupt vector address and the software can then respond to the interrupt.\nThe High/Low-Voltage Detect Control register ( Register 22-1 ) completely controls the operation of the HLVD module. This allows the circuitry to be 'turned off' by the user under software control, which minimizes the current consumption for the device.\nThe block diagram for the HLVD module is shown in Figure 22-1 .",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nVDIRMAG, U-0 = -. VDIRMAG, R-0 = IRVST. VDIRMAG, R/W-0 = HLVDEN. VDIRMAG, R/W-0 = HLVDL3 (1). VDIRMAG, R/W-1 = HLVDL2 (1). VDIRMAG, R/W-0 = HLVDL1 (1). VDIRMAG, R/W-1 = HLVDL0 (1). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nVDIRMAG: Voltage Direction Magnitude Select bit\n1 = Event occurs when voltage equals or exceeds trip point (HLVDL<3:0>)\n0 = Event occurs when voltage equals or falls below trip point (HLVDL<3:0>)\nbit 6\nUnimplemented: Read as ' 0 '\nbit 5\nIRVST: Internal Reference Voltage Stable Flag bit\n1 = Indicates that the voltage detect logic will generate the interrupt flag at the specified voltage range",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\n0 = Indicates that the voltage detect logic will not generate the interrupt flag at the specified voltage\nrange and the HLVD interrupt needs to not be enabled\nbit 4\nHLVDEN: High/Low-Voltage Detect Power Enable bit\n1 = HLVD enabled\n0 = HLVD disabled\nbit 3-0\nHLVDL<3:0>: Voltage Detection Limit bits (1)\n1111 = External analog input is used (input comes from the HLVDIN pin)\n1110 = Maximum setting\n.\n.\n.\n0000 = Minimum setting\nNote 1: See Table 26-4 for specifications.",
    "PIC18F2420/2520/4420/4520\nThe  module  is  enabled  by  setting  the  HLVDEN  bit. Each time that the HLVD module is enabled, the circuitry requires some time to stabilize. The IRVST bit is a read-only bit and is used to indicate when the circuit is  stable. The module can only generate an interrupt after the circuit is stable and IRVST is set.\nevent, depending on the configuration of the module. When the supply voltage is equal to the trip point, the voltage tapped off of the resistor array is equal to the internal  reference  voltage  generated  by  the  voltage reference module. The comparator then generates an interrupt signal by setting the HLVDIF bit.\nThe VDIRMAG bit determines the overall operation of the module. When VDIRMAG is cleared, the module monitors for drops in VDD below a predetermined set point. When the bit is set, the module monitors for rises in VDD above the set point.",
    "22.1 Operation\nWhen the HLVD module is enabled, a comparator uses an  internally  generated  reference  voltage  as  the  set point.  The  set  point  is  compared  with  the  trip  point, where each node in the resistor divider represents a trip point voltage. The 'trip point' voltage is the voltage level at which the device detects a high or low-voltage\nThe trip  point  voltage  is  software  programmable  to  any one of 16 values. The trip point is selected by programming the HLVDL<3:0> bits (HLVDCON<3:0>).\nThe HLVD module has an additional feature that allows the user to supply the trip voltage to the module from an external source. This mode is enabled when bits, HLVDL<3:0>,  are  set  to  ' 1111 '. In  this  state,  the comparator input is multiplexed from the external input pin,  HLVDIN.  This  gives  users  flexibility  because  it allows them to configure the High/Low-Voltage Detect interrupt to occur at any voltage in the valid operating range.\nFIGURE 22-1: HLVD MODULE BLOCK DIAGRAM (WITH EXTERNAL INPUT)",
    "22.2 HLVD Setup\nThe following  steps  are  needed  to  set  up  the  HLVD module:\n- 1. Write  the  value  to  the  HLVDL<3:0>  bits  that selects the desired HLVD trip point.\nDepending on the application, the HLVD module does not need to be operating constantly. To decrease the current  requirements,  the  HLVD  circuitry  may  only need to be enabled for short periods where the voltage is  checked. After doing the check, the HLVD module may be disabled.\n2. Set  the  VDIRMAG  bit  to  detect  high  voltage (VDIRMAG = 1 ) or low voltage (VDIRMAG = 0 ).\n3. Enable the HLVD module by setting the HLVDEN bit.\n4. Clear the HLVD interrupt flag (PIR2<2>), which may have been set from a previous interrupt.\n5. Enable  the  HLVD  interrupt,  if  interrupts  are desired,  by  setting  the  HLVDIE  and  GIE  bits (PIE2<2> and INTCON<7>). An interrupt will not be generated until the IRVST bit is set.",
    "22.3 Current Consumption\nWhen the module  is  enabled,  the  HLVD  comparator and voltage divider are enabled and will consume static current. The total current consumption, when enabled, is specified in electrical specification parameter D022B.",
    "22.4 HLVD Start-up Time\nThe  internal  reference  voltage  of  the  HLVD  module, specified  in  electrical  specification  parameter  D420, may be used by  other  internal  circuitry,  such  as  the programmable Brown-out Reset. If the HLVD or other circuits  using  the  voltage  reference  are  disabled  to lower the device's current consumption, the reference voltage circuit will require time to become stable before a low or high-voltage condition can be reliably detected. This start-up time, TIRVST, is an interval that is independent of device clock speed. It is specified in electrical specification parameter 36.\nThe HLVD interrupt flag is not enabled until TIRVST has expired and a stable reference voltage is reached. For this reason, brief excursions beyond the set point may not be detected during this interval (refer to Figure 222 or Figure 22-3).",
    "22.5 Applications\nIn many applications, the ability to detect a drop below, or rise above, a particular threshold is desirable. For example,  the  HLVD  module  could  be  periodically enabled to detect Universal Serial Bus (USB) attach or detach. This assumes the device is powered by a lower voltage source than the USB when detached. An attach would indicate a high-voltage detect from, for example, 3.3V to 5V (the voltage on USB) and vice versa for a detach. This feature could save a design a few extra components and an attach signal (input pin).\nFIGURE 22-4: TYPICAL LOW-VOLTAGE DETECT APPLICATION\nFor general battery applications, Figure 22-4 shows a possible voltage curve. Over time, the device voltage decreases. When the device voltage reaches voltage, VA, the HLVD logic generates an interrupt at time, TA. The  interrupt  could  cause  the  execution  of  an  ISR, which would allow the application to perform 'housekeeping  tasks'  and  perform  a  controlled  shutdown before  the  device  voltage  exits  the  valid  operating range at TB. The HLVD, thus, would give the application  a  time  window,  represented  by  the  difference between TA and TB, to safely exit.",
    "22.7 Effects of a Reset\nWhen enabled, the HLVD circuitry continues to operate during  Sleep.  If  the  device  voltage  crosses  the  trip point,  the  HLVDIF  bit  will  be  set  and  the  device  will wake-up  from  Sleep.  Device  execution  will  continue from  the  interrupt  vector  address  if  interrupts  have been globally enabled.\nA device Reset forces all registers to their Reset state. This forces the HLVD module to be turned off.",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nHLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Reset Values on Page = 46. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 45. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 =",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\n-. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 48. PIE2, Bit 7 = OCSFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 48. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2,",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nBit 0 = CCP2IP. IPR2, Reset Values on Page = 48\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are unused by the HLVD module.",
    "23.0 SPECIAL FEATURES OF THE CPU\nPIC18F2420/2520/4420/4520  devices  include  several features  intended  to  maximize  reliability  and  minimize cost through elimination of external components. These are:\n\u00b7 Oscillator Selection\n\u00b7 Resets:\n-Power-on Reset (POR)\n-Power-up Timer (PWRT)\n-Oscillator Start-up Timer (OST)\n-Brown-out Reset (BOR)\n\u00b7 Interrupts\n\u00b7 Watchdog Timer (WDT)\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Two-Speed Start-up\n\u00b7 Code Protection\n\u00b7 ID Locations\n\u00b7 In-Circuit Serial Programming\nThe  oscillator  can  be  configured  for  the  application depending on frequency, power, accuracy and cost. All of  the  options  are  discussed  in  detail  in Section 2.0 'Oscillator Configurations' .\nA complete discussion of device Resets and interrupts is available in previous sections of this data sheet.\nIn  addition  to  their  Power-up  and  Oscillator  Start-up Timers  provided  for  Resets,  PIC18F2420/2520/4420/ 4520 devices have a Watchdog Timer, which is either permanently  enabled  via  the  Configuration  bits or software controlled (if configured as disabled).",
    "23.0 SPECIAL FEATURES OF THE CPU\nThe inclusion of an internal RC oscillator also provides the  additional  benefits  of  a  Fail-Safe  Clock  Monitor (FSCM) and Two-Speed Start-up. FSCM provides for background  monitoring  of  the  peripheral  clock  and automatic switchover in the event of its  failure. TwoSpeed Start-up enables code to be executed almost immediately on start-up, while the primary clock source completes its start-up delays.\nAll  of  these  features  are  enabled  and  configured  by setting the appropriate Configuration register bits.",
    "23.1 Configuration Bits\nThe Configuration bits  can  be  programmed  (read  as ' 0 ') or left unprogrammed (read as ' 1 ') to select various device configurations. These bits are mapped starting at program memory location, 300000h.\nThe user will note that address 300000h is beyond the user  program memory space. In fact, it belongs to the configuration memory space (300000h-3FFFFFh), which can only be accessed using table reads and table writes.\nProgramming the Configuration registers is done in a manner similar to programming the Flash memory. The WR bit in the EECON1 register starts a self-timed write to the Configuration register. In normal operation mode, a TBLWT instruction with  the TBLPTR pointing to the Configuration register sets up the address and the data for the Configuration register write. Setting the WR bit starts  a  long write  to  the  Configuration  register.  The Configuration registers are written a byte at a time. To write or erase a configuration cell, a TBLWT instruction can write a ' 1 ' or a ' 0 ' into the cell. For additional details on Flash programming, refer to Section 6.5 'Writing to Flash Program Memory' .",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n300001h, File Name = CONFIG1H. 300001h, Bit 7 = IESO. 300001h, Bit 6 = FCMEN. 300001h, Bit 5 = -. 300001h, Bit 4 = -. 300001h, Bit 3 = FOSC3. 300001h, Bit 2 = FOSC2. 300001h, Bit 1 = FOSC1. 300001h, Bit 0 = FOSC0. 300001h, Default/ Unprogrammed Value = 00-- 0111. 300002h, File Name = CONFIG2L. 300002h, Bit 7 = -. 300002h, Bit 6 = -. 300002h, Bit 5 = -. 300002h, Bit 4 = BORV1. 300002h, Bit 3 = BORV0. 300002h, Bit 2 = BOREN1. 300002h, Bit 1 = BOREN0. 300002h, Bit 0 = PWRTEN. 300002h, Default/ Unprogrammed Value = ---1 1111.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n300003h, File Name = CONFIG2H. 300003h, Bit 7 = -. 300003h, Bit 6 = -. 300003h, Bit 5 = -. 300003h, Bit 4 = WDTPS3. 300003h, Bit 3 = WDTPS2. 300003h, Bit 2 = WDTPS1. 300003h, Bit 1 = WDTPS0. 300003h, Bit 0 = WDTEN. 300003h, Default/ Unprogrammed Value = ---1 1111. 300005h, File Name = CONFIG3H. 300005h, Bit 7 = MCLRE. 300005h, Bit 6 = -. 300005h, Bit 5 = -. 300005h, Bit 4 = -. 300005h, Bit 3 = -. 300005h, Bit 2 = LPT1OSC. 300005h, Bit 1 = PBADEN. 300005h, Bit 0 = CCP2MX. 300005h, Default/ Unprogrammed Value =",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n1--- -011. 300006h, File Name = CONFIG4L. 300006h, Bit 7 = DEBUG. 300006h, Bit 6 = XINST. 300006h, Bit 5 = -. 300006h, Bit 4 = -. 300006h, Bit 3 = -. 300006h, Bit 2 = LVP. 300006h, Bit 1 = -. 300006h, Bit 0 = STVREN. 300006h, Default/ Unprogrammed Value = 10-- -1-1. 300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1). 300008h, Bit 2 = CP2 (1). 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300008h, Default/ Unprogrammed",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\nValue = ---- 1111. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 300009h, Default/ Unprogrammed Value = 11-- ----. 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit 6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit 4 = -. 30000Ah, Bit 3 = WRT3 (1). 30000Ah, Bit 2 = WRT2 (1). 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Ah, Default/ Unprogrammed Value = ---- 1111.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Bh, Default/ Unprogrammed Value = 111- ----. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1). 30000Ch, Bit 2 = EBTR2 (1). 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Ch, Default/ Unprogrammed Value = ---- 1111. 30000Dh, File Name = CONFIG7H.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -. 30000Dh, Default/ Unprogrammed Value = -1-- ----. 3FFFFEh, File Name = DEVID1. 3FFFFEh, Bit 7 = DEV2. 3FFFFEh, Bit 6 = DEV1. 3FFFFEh, Bit 5 = DEV0. 3FFFFEh, Bit 4 = REV4. 3FFFFEh, Bit 3 = REV3. 3FFFFEh, Bit 2 = REV2. 3FFFFEh, Bit 1 = REV1. 3FFFFEh, Bit 0 = REV0. 3FFFFEh, Default/ Unprogrammed Value = xxxx xxxx (2). 3FFFFFh, File Name = DEVID2. 3FFFFFh, Bit 7 = DEV10.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n3FFFFFh, Bit 6 = DEV9. 3FFFFFh, Bit 5 = DEV8. 3FFFFFh, Bit 4 = DEV7. 3FFFFFh, Bit 3 = DEV6. 3FFFFFh, Bit 2 = DEV5. 3FFFFFh, Bit 1 = DEV4. 3FFFFFh, Bit 0 = DEV3. 3FFFFFh, Default/ Unprogrammed Value = xxxx xxxx (2)\nLegend:\nx = unknown, u = unchanged, - = unimplemented, q = value depends on condition.\nShaded cells are unimplemented, read as ' 0 '.\nNote 1:\nUnimplemented in PIC18F2420/4420 devices; maintain this bit set.\n2: See Register 23-12 for DEVID1 values. DEVID registers are read-only and cannot be programmed by the user.",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nIESO, R/P-0 = FCMEN. IESO, U-0 = -. IESO, U-0 = -. IESO, R/P-0 = FOSC3. IESO, R/P-1 = FOSC2. IESO, R/P-1 = FOSC1. IESO, R/P-1 = FOSC0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7 IESO: Internal/External Oscillator Switchover bit\n1 = Oscillator Switchover mode enabled\n0 = Oscillator Switchover mode disabled\nFCMEN: Fail-Safe Clock Monitor Enable bit\n1 = Fail-Safe Clock Monitor enabled\n0 = Fail-Safe Clock Monitor disabled",
    "bit 3-0 FOSC<3:0>: Oscillator Selection bits\n11xx\n=External RC oscillator, CLKO function on RA6\n101x =External RC oscillator, CLKO function on RA6\n1001 =Internal oscillator block, CLKO function on RA6; port function on RA7\n1000 =Internal oscillator block, port function on RA6 and RA7\n0111 =External RC oscillator, port function on RA6\n0110 =HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)\n0101 =EC oscillator, port function on RA6\n0100 =EC oscillator, CLKO function on RA6\n0011 =External RC oscillator, CLKO function on RA6\n0010 =HS oscillator\n0001 =XT oscillator\n0000 =LP oscillator",
    "bit 6\nbit 0",
    "REGISTER 23-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\n-, U-0 = -. -, U-0 = -. -, R/P-1 = BORV1 (1). -, R/P-1 = BORV0 (1). -, R/P-1 = BOREN1 (2). -, R/P-1 = BOREN0 (2). -, R/P-1 = PWRTEN (2). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as ' 0 '\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-3 BORV<1:0>: Brown-out Reset Voltage bits (1)\n11 = Minimum setting\n.\n.\n.\n00 = Maximum setting\nbit 2-1\nBOREN<1:0>: Brown-out Reset Enable bits (2)\n11 =Brown-out Reset enabled in hardware only (SBOREN is disabled)\n10 =Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)\n01 =Brown-out Reset enabled and controlled by software (SBOREN is enabled)\n00 =Brown-out Reset disabled in hardware and software\nPWRTEN: Power-up Timer Enable bit (2)\n1 = PWRT disabled\n0 = PWRT enabled\nNote 1: See Section 26.1 'DC Characteristics: Supply Voltage' for specifications.\n2: The Power-up Timer is decoupled from Brown-out Reset, allowing these features to be independently controlled.",
    "REGISTER 23-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\n-, U-0 = -. -, U-0 = -. -, R/P-1 = WDTPS3. -, R/P-1 = WDTPS2. -, R/P-1 = WDTPS1. -, R/P-1 = WDTPS0. -, R/P-1 = WDTEN. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 4-1 WDTPS<3:0>: Watchdog Timer Postscale Select bits\n1111 = 1:32,768\n1110 = 1:16,384\n1101 = 1:8,192\n1100 = 1:4,096\n1011 = 1:2,048\n1010 = 1:1,024\n1001 = 1:512\n1000 = 1:256\n0111 = 1:128\n0110 = 1:64\n0101 = 1:32\n0100 = 1:16\n0011 = 1:8\n0010 = 1:4\n0001 = 1:2\n0000 = 1:1",
    "bit 0\nWDTEN: Watchdog Timer Enable bit\n1 = WDT enabled\n0 = WDT disabled (control is placed on the SWDTEN bit)",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nMCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, R/P-0 = LPT1OSC. MCLRE, R/P-1 = PBADEN. MCLRE, R/P-1 = CCP2MX. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nMCLRE:\nMCLR Pin Enable bit\n1 = MCLR pin enabled; RE3 input pin disabled\n0 = RE3 input pin enabled; MCLR disabled\nbit 6-3\nUnimplemented: Read as ' 0 '\nbit 2\nLPT1OSC: Low-Power Timer1 Oscillator Enable bit\n1 = Timer1 configured for low-power operation\n0 = Timer1 configured for higher power operation",
    "bit 1\nPBADEN: PORTB A/D Enable bit\n(Affects ADCON1 Reset state. ADCON1 controls PORTB<4:0> pin configuration.)\n1 = PORTB<4:0> pins are configured as analog input channels on Reset\n0 = PORTB<4:0> pins are configured as digital I/O on Reset",
    "bit 0 CCP2MX: CCP2 MUX bit\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RB3",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nDEBUG, R/P-0 = XINST. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, R/P-1 = LVP. DEBUG, U-0 = -. DEBUG, R/P-1 = STVREN. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nDEBUG: Background Debugger Enable bit\n1 = Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins\n0 = Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug\nbit 6\nXINST: Extended Instruction Set Enable bit\n1 = Instruction set extension and Indexed Addressing mode enabled\n0 = Instruction set extension and Indexed Addressing mode disabled (Legacy mode)\nbit 5-3\nUnimplemented: Read as ' 0 '\nbit 2\nLVP:\nSingle-Supply ICSP\u2122 Enable bit\n1 = Single-Supply ICSP enabled\n0 = Single-Supply ICSP disabled\nbit 1\nUnimplemented: Read as ' 0 '\nbit 0\nSTVREN: Stack Full/Underflow Reset Enable bit\n1 = Stack full/underflow will cause Reset",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\n0 = Stack full/underflow will not cause Reset",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nNote 1: Unimplemented in PIC18F2420/4420 devices; maintain this bit set.\n\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = CP3 (1). -, 5 = CP2 (1). -, 6 = CP1. -, 7 = CP0. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nbit 7-4, 1 = Unimplemented: Read as ' 0. bit 3, 1 = CP3: Code Protection bit (1) 1 = Block 3 (006000-007FFFh) not code-protected 0 = Block 3 (006000-007FFFh) code-protected. bit 2, 1 = CP2: Code Protection bit (1) 1 = Block 2 (004000-005FFFh) not code-protected 0 = Block 2 (004000-005FFFh) code-protected. bit 1, 1 = CP1: Code Protection bit 1 = Block 1 (002000-003FFFh) not code-protected 0 = Block 1 (002000-003FFFh) code-protected. bit 0, 1 = CP0: Code Protection bit 1 = Block 0 (000800-001FFFh) not code-protected 0 = Block 0 (000800-001FFFh) code-protected",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nR/C-1, 1 = R/C-1. R/C-1, 2 = U-0. R/C-1, 3 = U-0. R/C-1, 4 = U-0. R/C-1, 5 = U-0. R/C-1, 6 = U-0. R/C-1, 7 = U-0. CPD, 1 = CPB. CPD, 2 = -. CPD, 3 = -. CPD, 4 = -. CPD, 5 = -. CPD, 6 = -. CPD, 7 = -. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7, 1 = CPD: Data EEPROM Code Protection bit 1 = Data EEPROM not code-protected 0 = Data EEPROM code-protected. bit 6, 1 = CPB: Boot Block Code Protection bit. bit 5-0, 1 = Unimplemented: Read as ' 0",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nNote 1: Unimplemented in PIC18F2420/4420 devices; maintain this bit set.\n\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = WRT3 (1). -, 5 = WRT2 (1). -, 6 = WRT1. -, 7 = WRT0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nbit 7-4, 1 = Unimplemented: Read as ' 0 '. bit 3, 1 = WRT3: Write Protection bit (1) 1 = Block 3 (006000-007FFFh) not write-protected 0 = Block 3 (006000-007FFFh) write-protected. bit 2, 1 = WRT2: Write Protection bit (1) 1 = Block 2 (004000-005FFFh) not write-protected 0 = Block 2 (004000-005FFFh) write-protected. bit 1, 1 = WRT1: Write Protection bit 1 = Block 1 (002000-003FFFh) not write-protected 0 = Block 1 (002000-003FFFh) write-protected. bit 0, 1 = WRT0: Write Protection bit 1 = Block 0 (000800-001FFFh) not write-protected 0 = Block 0 (000800-001FFFh) write-protected",
    "REGISTER 23-9: CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nR/C-1, 1 = R/C-1. R/C-1, 2 = R/C-1. R/C-1, 3 = U-0. R/C-1, 4 = U-0. R/C-1, 5 = U-0. R/C-1, 6 = U-0. R/C-1, 7 = U-0. WRTD, 1 = WRTB. WRTD, 2 = WRTC (1). WRTD, 3 = -. WRTD, 4 = -. WRTD, 5 = -. WRTD, 6 = -. WRTD, 7 = -. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-9: CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nWRTD: Data EEPROM Write Protection bit\n1 = Data EEPROM not write-protected\n0 = Data EEPROM write-protected\nbit 6\nWRTB: Boot Block Write Protection bit\n1 = Boot block (000000-0007FFh) not write-protected\n0 = Boot block (000000-0007FFh) write-protected\nbit 5\nWRTC: Configuration Register Write Protection bit (1)\n1 = Configuration registers (300000-3000FFh) not write-protected\n0 = Configuration registers (300000-3000FFh) write-protected\nbit 4-0\nUnimplemented: Read as ' 0 '\nNote 1: This bit is read-only in normal execution mode; it can be written only in Program mode.",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nNote 1: Unimplemented in PIC18F2420/4420 devices; maintain this bit set.\n\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/C-1 = EBTR3 (1). -, R/C-1 = EBTR2 (1). -, R/C-1 = EBTR1. -, R/C-1 = EBTR0. bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, R/C-1 = . bit 7, R/C-1 = . bit 7, R/C-1 = . bit 7, R/C-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit C, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\n, 1 = 0. bit 3, 1 = EBTR3: Table Read Protection bit (1) 1 = Block 3 (006000-007FFFh) not protected from table reads executed in other blocks 0 = Block 3 (006000-007FFFh) protected from table reads executed in other blocks. bit 2, 1 = EBTR2: Table Read Protection bit (1) 1 = Block 2 (004000-005FFFh) not protected from table reads executed in other blocks 0 = Block 2 (004000-005FFFh) protected from table reads executed in other blocks. bit 1, 1 = EBTR1: Table Read Protection bit 1 = Block 1 (002000-003FFFh) not protected from table reads executed in other blocks 0 = Block 1 (002000-003FFFh) protected from table reads executed in other blocks. bit 0, 1 = EBTR0: Table Read Protection bit 1 = Block 0 (000800-001FFFh) not protected from table reads executed in other blocks",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\n0 = Block 0 (000800-001FFFh) protected from table reads executed in other blocks",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nU-0, 1 = R/C-1. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = U-0. -, 1 = EBTRB. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = -. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7 Unimplemented: Read as ' 0 '\nbit 6 EBTRB: Boot Block Table Read Protection bit\n1 = Boot block (000000-0007FFh) not protected from table reads executed in other blocks\n0 = Boot block (000000-0007FFh) protected from table reads executed in other blocks\nbit 5-0\nUnimplemented: Read as ' 0 '",
    "REGISTER 23-12: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F2420/2520/4420/4520\nDEV2, R = DEV1. DEV2, R = DEV0. DEV2, R = REV4. DEV2, R = REV3. DEV2, R = REV2. DEV2, R = REV1. DEV2, R = REV0. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-5 DEV<2:0>: Device ID bits\n110 = PIC18F4420\n100 = PIC18F4520\n010 = PIC18F2420\n000 = PIC18F2520",
    "bit 4-0 REV<4:0>: Revision ID bits\nThese bits are used to indicate the device revision.",
    "REGISTER 23-13: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F2420/2520/4420/4520\nDEV10 (1), R = DEV9 (1). DEV10 (1), R = DEV8 (1). DEV10 (1), R = DEV7 (1). DEV10 (1), R = DEV6 (1). DEV10 (1), R = DEV5 (1). DEV10 (1), R = DEV4 (1). DEV10 (1), R = DEV3 (1). bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 0\nLegend:, 1 = Legend:. R = Read-only bit P = Programmable, 1 = U = Unimplemented bit, read as ' 0 '. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-0 DEV<10:3>: Device ID bits (1)\nThese bits are used with the DEV<2:0> bits in Device ID Register 1 to identify the part number.\n0001 0001 = PIC18F2420/2520 devices\n0001 0000 = PIC18F4420/4520 devices\nNote 1: These values for DEV<10:3> may be shared with other devices. The specific device is always identified by using the entire DEV<10:0> bit sequence.",
    "23.2 Watchdog Timer (WDT)\nFor PIC18F2420/2520/4420/4520 devices, the WDT is driven  by  the  INTRC  source.  When  the  WDT  is enabled, the clock source is also enabled. The nominal WDT period is 4 ms and has the same stability as the INTRC oscillator.\nThe 4 ms period of the WDT is multiplied by a 16-bit postscaler.  Any output of the WDT  postscaler  is selected by a multiplexer, controlled by bits in Configuration Register 2H. Available periods range from 4 ms to  131.072  seconds  (2.18  minutes).  The  WDT  and postscaler are cleared when any of the following events occur: a SLEEP or CLRWDT instruction is executed, the IRCF  bits  (OSCCON<6:4>)  are  changed  or  a  clock failure has occurred.",
    "23.2 Watchdog Timer (WDT)\nNote 1: The CLRWDT and SLEEP instructions clear  the  WDT  and  postscaler  counts when executed.\n2: Changing  the  setting  of  the  IRCF  bits (OSCCON<6:4>)  clears  the  WDT  and postscaler counts.\n3: When a CLRWDT instruction is executed, the postscaler count will be cleared.",
    "23.2.1 CONTROL REGISTER\nRegister 23-14 shows the WDTCON register. This is a readable and writable register which contains a control bit  that  allows  software  to  override  the  WDT  enable Configuration bit, but only if the Configuration bit has disabled the WDT.",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = SWDTEN (1). bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as ' 0 '. R = Readable bit, 3 = U = Unimplemented bit, read as ' 0 '. -n = Value at POR, 1 = ' 1 ' = Bit is set. -n = Value at POR, 2 = ' 0 ' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-1 Unimplemented : Read as ' 0 '\nbit 0\nSWDTEN: Software Controlled Watchdog Timer Enable bit (1)\n1 = Watchdog Timer is on\n0 = Watchdog Timer is off\nNote 1: This bit has no effect if the Configuration bit, WDTEN, is enabled.",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nRCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 44. WDTCON, Bit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN (2). WDTCON, Reset Values on page = 46\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the Watchdog Timer.",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nNote 1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: This bit has no effect if the Configuration bit, WDTEN, is enabled.",
    "23.3 Two-Speed Start-up\nThe Two-Speed Start-up feature helps to minimize the latency period from oscillator start-up to code execution by  allowing  the  microcontroller  to  use  the  INTOSC oscillator  as  a  clock  source  until  the  primary  clock source is available. It is enabled by setting the IESO Configuration bit.\nTwo-Speed Start-up needs to be enabled only if the primary  oscillator  mode  is  LP,  XT,  HS  or  HSPLL (Crystal-Based modes). Other sources do not require an OST start-up delay; for these, Two-Speed Start-up needs to be disabled.\nWhen enabled, Resets and wake-ups from Sleep mode cause  the  device  to  configure  itself  to  run  from  the internal oscillator block as the clock source, following the time-out of the Power-up Timer after a Power-on Reset is enabled. This allows almost immediate code execution  while  the  primary  oscillator  starts  and  the OST is running. Once the OST times out, the device automatically switches to PRI_RUN mode.",
    "23.3 Two-Speed Start-up\nIn all other power-managed modes, Two-Speed Startup  is  not  used.  The  device  will  be  clocked  by  the currently selected clock source until the primary clock source becomes available. The setting of the IESO bit is ignored.",
    "23.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nWhile using the INTOSC oscillator in Two-Speed Startup, the device still obeys the normal command sequences for entering power-managed modes, including multiple SLEEP instructions (refer to Section 3.1.4 'Multiple Sleep Commands' ). In practice,  this  means  that  user  code  can  change  the SCS<1:0>  bit  settings  or  issue SLEEP instructions before the OST  times out. This would allow an application to briefly wake-up, perform routine 'housekeeping'  tasks  and  return  to  Sleep  before  the device starts to operate from the primary oscillator.\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits,  IRCF<2:0>, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF<2:0> bits prior to entering Sleep mode.",
    "23.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nUser code can also check if the primary clock source is currently providing the device clocking by checking the status of the OSTS (OSCCON<3>) bit. If the bit is set, the primary oscillator is providing the clock. Otherwise, the internal oscillator block is providing the clock during wake-up from Reset or Sleep mode.",
    "23.4 Fail-Safe Clock Monitor\nThe Fail-Safe Clock Monitor (FSCM) allows the microcontroller to continue operation in the event of an external oscillator  failure  by  automatically  switching  the  device clock to the internal oscillator block. The FSCM function is enabled by setting the FCMEN Configuration bit.\nWhen FSCM is enabled, the INTRC oscillator runs at all times to monitor clocks to peripherals and provide a backup  clock  in  the  event  of  a  clock  failure.  Clock monitoring (shown in Figure 23-3 ) is accomplished by creating a sample clock signal, which is the INTRC output  divided  by  64.  This  allows  ample  time  between FSCM sample clocks  for  a  peripheral  clock  edge  to occur.  The  peripheral  device  clock  and  the  sample clock are presented as inputs to the Clock Monitor latch (CM). The CM is set on the falling edge of the device clock  source,  but  cleared  on  the  rising  edge  of  the sample clock.\nFIGURE 23-3: FSCM BLOCK DIAGRAM\nClock  failure  is  tested  for  on  the  falling  edge  of  the sample  clock.  If  a  sample  clock  falling  edge  occurs while CM is still set, a clock failure has been detected ( Figure 23-4 ). This causes the following:",
    "23.4 Fail-Safe Clock Monitor\n\u00b7 the FSCM generates an oscillator fail interrupt by setting bit, OSCFIF (PIR2<7>);\n\u00b7 the device clock source is switched to the internal oscillator block (OSCCON is not updated to show the current clock source - this is the fail-safe condition) and\n\u00b7 the WDT is reset.\nDuring  switchover,  the  postscaler  frequency  from  the internal oscillator block may not be sufficiently stable for timing sensitive applications. In these cases, it may be desirable to select another clock configuration and enter an alternate power-managed mode. This can be done to attempt a partial recovery or execute a controlled shutdown. See Section 3.1.4 'Multiple Sleep Commands' and Section 23.3.1 'Special Considerations for Using Two-Speed Start-up' for more details.",
    "23.4 Fail-Safe Clock Monitor\nTo use a higher clock speed on wake-up, the INTOSC or postscaler  clock  sources  can  be  selected  to  provide  a higher clock speed by setting bits, IRCF<2:0>, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF<2:0> bits prior to entering Sleep mode.\nThe FSCM will detect failures of the primary or secondary clock sources only. If the internal oscillator block fails, no failure would be detected, nor would any action be possible.",
    "23.4.1 FSCM AND THE WATCHDOG TIMER\nBoth  the  FSCM  and  the  WDT  are  clocked  by  the INTRC  oscillator.  Since  the  WDT  operates  with  a separate divider and counter, disabling the WDT has no effect on the operation of the INTRC oscillator when the FSCM is enabled.\nAs already noted, the clock source is switched to the INTOSC  clock  when  a  clock  failure is detected. Depending on the frequency selected by the IRCF<2:0> bits, this may mean a substantial change in the  speed  of  code  execution.  If  the  WDT  is  enabled with a small prescale value, a decrease in clock speed allows  a  WDT  time-out  to  occur  and  a  subsequent device  Reset.  For  this  reason,  fail-safe  clock  events also reset the WDT and postscaler, allowing it to start timing from when execution speed was changed and decreasing the likelihood of an erroneous time-out.",
    "23.4.2 EXITING FAIL-SAFE OPERATION\nThe fail-safe condition is terminated by either a device Reset  or  by  entering  a  power-managed  mode.  On Reset,  the  controller  starts  the  primary  clock  source specified in Configuration Register 1H  (with any required start-up delays that are required for the oscillator  mode,  such  as  the  OST  or  PLL  timer).  The INTOSC multiplexer provides the device clock until the primary clock source becomes ready (similar to a TwoSpeed Start-up). The clock source is then switched to the  primary  clock  (indicated  by  the  OSTS  bit  in  the OSCCON register becoming set). The Fail-Safe Clock Monitor then resumes monitoring the peripheral clock.\nThe  primary  clock  source  may  never  become  ready during start-up. In this case, operation is clocked by the INTOSC multiplexer. The OSCCON register will remain in its Reset  state  until  a  power-managed  mode  is entered.",
    "23.4.3 FSCM INTERRUPTS IN POWER-MANAGED MODES\nBy  entering  a  power-managed  mode,  the  clock  multiplexer selects the clock source selected by the OSCCON register. Fail-Safe Clock Monitoring of the powermanaged clock source resumes in the power-managed mode.\nIf  an  oscillator  failure  occurs  during  power-managed operation, the subsequent events depend on whether or  not  the  oscillator  failure  interrupt  is  enabled.  If enabled (OSCFIF = 1 ), code execution will be clocked by  the  INTOSC  multiplexer.  An  automatic  transition back to the failed clock source will not occur.\nIf the interrupt is disabled, subsequent interrupts while in  Idle  mode  will  cause  the  CPU  to  begin  executing instructions while being clocked by the INTOSC source.",
    "23.4.4 POR OR WAKE FROM SLEEP\nThe FSCM is designed to detect oscillator failure at any point  after  the  device  has  exited  Power-on  Reset (POR) or low-power Sleep mode. When the primary device clock is EC, RC or INTRC modes, monitoring can begin immediately following these events.\nFor  oscillator  modes  involving  a  crystal  or  resonator (HS,  HSPLL,  LP  or  XT),  the  situation  is  somewhat different.  Since  the  oscillator  may  require  a  start-up time considerably longer than the FCSM sample clock time, a false clock failure may be detected. To prevent this, the internal oscillator block is automatically configured as the device clock and functions until the primary clock  is  stable  (the  OST  and  PLL  timers  have  timed out).  This  is  identical  to  Two-Speed  Start-up  mode. Once the primary clock is stable, the INTRC returns to its role as the FSCM source.",
    "Note:\nThe same logic that prevents false oscillator failure interrupts on POR, or wake from Sleep,  will  also  prevent  the  detection  of the oscillator's failure to start at all following these events. This can be avoided by monitoring  the  OSTS  bit  and  using  a timing routine to determine if the oscillator is  taking  too  long  to  start.  Even  so,  no oscillator failure interrupt will be flagged.\nAs noted in Section 23.3.1 'Special Considerations for Using Two-Speed Start-up' , it is also possible to select another clock configuration and enter an alternate power-managed mode while waiting for the primary clock to become stable. When the new powermanaged  mode  is  selected,  the  primary  clock  is disabled.",
    "23.5 Program Verification and Code Protection\nEach of the five blocks has three code protection bits associated with them. They are:\nThe  overall  structure  of  the  code  protection  on  the PIC18  Flash  devices  differs  significantly  from  other PIC \u00ae  devices.\nThe user program memory is divided into five blocks. One of these is a boot block of 2 Kbytes. The remainder of  the  memory  is  divided  into  four  blocks  on  binary boundaries.\n\u00b7 Code-Protect (CPn) bit\n\u00b7 Write-Protect (WRTn) bit\n\u00b7 External Block Table Read (EBTRn) bit\nFigure 23-5 shows the program memory organization for 16 and 32-Kbyte devices and the specific code protection  bit  associated  with  each  block.  The  actual locations of the bits are summarized in Table 23-3 .",
    "MEMORY SIZE/DEVICE\nBoot Block, 32 Kbytes (PIC18F2520/4520) = Boot Block. Boot Block, Block Code.Address Range = 000000h 0007FFh. Boot Block, Block Code.Protection Controlled By: = CPB, WRTB, EBTRB. Block 0, 32 Kbytes (PIC18F2520/4520) = Block 0. Block 0, Block Code.Address Range = 000800h 001FFFh. Block 0, Block Code.Protection Controlled By: = CP0, WRT0, EBTR0. Block 1, 32 Kbytes (PIC18F2520/4520) = Block 1. Block 1, Block Code.Address Range = 002000h 003FFFh. Block 1, Block Code.Protection Controlled By: = CP1, WRT1, EBTR1. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2520/4520) = Block 2. Unimplemented Read ' 0 's, Block Code.Address Range = 004000h 005FFFh. Unimplemented Read ' 0",
    "MEMORY SIZE/DEVICE\n's, Block Code.Protection Controlled By: = CP2, WRT2, EBTR2. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2520/4520) = Block 3. Unimplemented Read ' 0 's, Block Code.Address Range = 006000h 007FFFh. Unimplemented Read ' 0 's, Block Code.Protection Controlled By: = CP3, WRT3, EBTR3. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2520/4520) = Unimplemented Read ' 0 's. Unimplemented Read ' 0 's, Block Code.Address Range = (Unimplemented Memory Space). Unimplemented Read ' 0 's, Block Code.Protection Controlled By: = (Unimplemented Memory Space)",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1). 300008h, Bit 2 = CP2 (1). 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit 6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit 4",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n= -. 30000Ah, Bit 3 = WRT3 (1). 30000Ah, Bit 2 = WRT2 (1). 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1). 30000Ch, Bit 2 = EBTR2 (1). 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0.",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n30000Dh, File Name = CONFIG7H. 30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -\nLegend:\nShaded cells are unimplemented.\nNote 1: Unimplemented in PIC18F2420/4420 devices; maintain this bit set.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nThe program memory may be read to, or written from, any  location  using  the  table  read  and  table  write instructions.  The  Device  ID  may  be  read  with  table reads. The  Configuration  registers  may  be  read  and written with the table read and table write instructions.\ninstruction that executes from a location outside of that block is not allowed to read and will result in reading ' 0 's. Figures 23-6 through 23-8 illustrate table write and table read protection.\nNote:\nIn normal execution mode, the CPn bits have no direct effect. CPn bits inhibit external reads and writes. A block of user memory may be protected from table writes if the WRTn Configuration bit is ' 0 '.  The EBTRn bits control table reads. For a block of user memory with the EBTRn bit set to ' 0 ', a table read instruction that executes from within  that  block  is  allowed  to  read.  A  table  read",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nCode protection bits may only be written to a ' 0 '  from a ' 1 '  state. It is not possible to write a ' 1 ' to a bit in the ' 0 ' state. Code protection bits are only set to ' 1 ' by a full chip erase or block erase function. The full chip erase and block erase functions can only be initiated via ICSP or an external programmer.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nFIGURE 23-6: TABLE WRITE (WRTn) DISALLOWED\n\nTBLPTR = 0008FFh PC = 001FFEh, Program Memory = 001FFFh 002000h TBLWT*. TBLPTR = 0008FFh PC = 001FFEh, Configuration Bit Settings = WRT0, EBTR0 = 01 WRT1, EBTR1 =. PC = 005FFEh, Program Memory = 003FFFh 004000h TBLWT*. PC = 005FFEh, Configuration Bit Settings = 11 WRT2, EBTR2 = 11. Results: All table writes disabled to Blockn whenever WRTn = 0 ., Program Memory = Results: All table writes disabled to Blockn whenever WRTn = 0 .. Results: All table writes disabled to Blockn whenever WRTn = 0 ., Configuration Bit Settings = Results: All table writes disabled to Blockn whenever WRTn = 0 .",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Program Memory = 000000h 0007FFh 000800h. TBLPTR = 0008FFh, Configuration Bit Settings = WRTB, EBTRB = 11 WRT0, EBTR0. PC = 003FFEh, Program Memory = TBLRD*. PC = 003FFEh, Program Memory = 001FFFh 002000h 003FFFh 004000h 005FFFh. PC = 003FFEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11 WRT3, EBTR3 = 11. Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of ' 0 '., Program Memory = . Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of ' 0 '., Program Memory = 007FFFh. Results: All table reads from external blocks to Blockn are disabled whenever",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED\nTABLAT register returns a value of ' 0 '., Configuration Bit Settings = EBTRn = 0 .",
    "FIGURE 23-8: EXTERNAL BLOCK TABLE READ (EBTRn) ALLOWED\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Program Memory = 000800h 001FFFh. Results: Table reads permitted within Blockn, even TABLAT register returns the value of the data, Program Memory = . Results: Table reads permitted within Blockn, even TABLAT register returns the value of the data, Program Memory = when EBTRBn = 0 . at the location",
    "23.5.2 DATA EEPROM CODE PROTECTION\nThe entire  data  EEPROM  is  protected  from  external reads and writes by two bits: CPD and WRTD. CPD inhibits  external  reads  and  writes  of  data  EEPROM. WRTD  inhibits  internal  and  external  writes  to  data EEPROM. The CPU can always read data EEPROM under normal operation, regardless of the protection bit settings.",
    "23.5.3 CONFIGURATION REGISTER PROTECTION\nThe  Configuration  registers  can  be  write-protected. The WRTC bit controls protection of the Configuration registers. In normal execution mode, the WRTC bit is read-only. WRTC can only be written via ICSP or an external programmer.",
    "23.6 ID Locations\nEight memory locations (200000h-200007h) are designated as ID locations, where the user can store checksum or other code identification numbers. These locations are both readable and writable during normal execution through the TBLRD and TBLWT instructions, or during program/verify. The ID locations can be read when the device is code-protected.",
    "23.7 In-Circuit Serial Programming\nPIC18F2420/2520/4420/4520 devices can be serially programmed while in the end application circuit. This is simply done with two lines for clock and data and three other  lines  for  power,  ground  and  the  programming voltage. This allows customers to manufacture boards with  unprogrammed  devices  and  then  program  the microcontroller just  before  shipping the product. This also  allows  the  most  recent  firmware  or  a  custom firmware to be programmed.",
    "23.8 In-Circuit Debugger\nWhen the DEBUG Configuration bit is programmed to a ' 0 ',  the In-Circuit Debugger functionality is enabled. This function allows simple debugging functions when used with MPLAB \u00ae  IDE. When the microcontroller has this feature enabled, some resources are not available for general use. Table 23-4 shows which resources are required by the background debugger.",
    "TABLE 23-4: DEBUGGER RESOURCES\nI/O pins:, 1 = RB6, RB7. Stack:, 1 = 2 levels. Program Memory:, 1 = 512 bytes. Data Memory:, 1 = 10 bytes\nTo use the In-Circuit Debugger function of the microcontroller, the design must implement In-Circuit Serial Programming  connections  to  MCLR/VPP/RE3,  VDD, VSS, RB7 and RB6. This will interface to the In-Circuit Debugger module available from Microchip or one of the third party development tool companies.",
    "23.9 Single-Supply ICSP Programming\nThe LVP Configuration bit enables Single-Supply ICSP Programming  (formerly  known  as  Low-Voltage  ICSP Programming or LVP).  When Single-Supply  Programming is enabled, the microcontroller can be programmed without  requiring  high  voltage  being  applied  to  the MCLR/VPP/RE3 pin, but the RB5/KBI1/PGM pin is then dedicated to controlling Program mode entry and is not available as a general purpose I/O pin.\nWhile programming, using Single-Supply Programming mode, VDD is applied to the MCLR/VPP/RE3 pin as in normal execution mode. To enter Programming mode, VDD is applied to the PGM pin.",
    "23.9 Single-Supply ICSP Programming\nNote 1: High-voltage programming is always available,  regardless  of  the  state  of  the LVP bit or the PGM pin, by applying VIHH to the MCLR pin.\n2: By default, Single-Supply ICSP is enabled  in  unprogrammed  devices  (as supplied from Microchip) and erased devices.\n3: When Single-Supply Programming is enabled,  the  RB5  pin  can  no  longer  be used as a general purpose I/O pin.\n4: When LVP is enabled, externally pull the PGM pin to VSS to allow normal program execution.\nIf  Single-Supply ICSP Programming mode will not be used, the LVP bit can be cleared. RB5/KBI1/PGM then becomes available as the digital I/O pin, RB5. The LVP bit  may  be  set  or  cleared  only  when  using  standard high-voltage programming (VIHH applied to the MCLR/ VPP/RE3 pin). Once LVP has been disabled, only the standard  high-voltage  programming  is  available  and must be used to program the device.",
    "23.9 Single-Supply ICSP Programming\nMemory that is not code-protected can be erased using either a block erase, or erased row by row, then written at any specified VDD. If code-protected memory is to be erased, a block erase is required. If a block erase is to be performed when using Low-Voltage Programming, the device must be supplied with VDD   of 4.5V to 5.5V.",
    "24.0 INSTRUCTION SET SUMMARY\nPIC18F2420/2520/4420/4520  devices  incorporate  the standard set of 75 PIC18 core instructions, as well as an extended set of 8 new instructions, for the optimization of code that is recursive or that utilizes a software stack. The extended set is discussed later in this section.",
    "24.1 Standard Instruction Set\nThe standard PIC18 instruction set adds many enhancements to the previous PIC \u00ae  MCU instruction sets, while maintaining an easy migration from these PIC  MCU  instruction  sets.  Most  instructions  are  a single program memory word (16 bits), but there are four  instructions  that  require  two  program  memory locations.\nEach single-word instruction is  a  16-bit  word  divided into an opcode, which specifies the instruction type and one  or  more  operands,  which  further  specify  the operation of the instruction.\nThe instruction set is highly orthogonal and is grouped into four basic categories:\n\u00b7 Byte-oriented operations\n\u00b7 Bit-oriented operations\n\u00b7 Literal operations\n\u00b7 Control operations\nThe PIC18 instruction set summary in Table 24-2 lists byte-oriented , bit-oriented , literal and control operations. Table 24-1 shows the opcode field descriptions.\nMost byte-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The destination of the result (specified by 'd')\n3. The accessed memory (specified by 'a')",
    "24.1 Standard Instruction Set\nThe  file  register  designator  'f'  specifies  which  file register is to be used by the instruction. The destination designator 'd' specifies where the result of the operation is to be placed. If 'd' is zero, the result is placed in the WREG register. If 'd' is one, the result is placed in the file register specified in the instruction.\nAll bit-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The bit in the file register (specified by 'b')\n3. The accessed memory (specified by 'a')\nThe bit field designator 'b' selects the number of the bit affected by the operation, while the file register designator 'f' represents the number of the file in which the bit is located.\nThe literal instructions may use some of the following operands:\n\u00b7 A literal value to be loaded into a file register (specified by 'k')\n\u00b7 The desired FSR register to load the literal value into (specified by 'f')\n\u00b7 No operand required (specified by '-')\nThe control instructions may use some of the following operands:",
    "24.1 Standard Instruction Set\n\u00b7 A program memory address (specified by 'n')\n\u00b7 The mode of the CALL or RETURN instructions (specified by 's')\n\u00b7 The mode of the table read and table write instructions (specified by 'm')\n\u00b7 No operand required (specified by '-')\nAll  instructions  are  a  single  word,  except  for  four double-word instructions. These instructions were made double-word to contain the required information in 32 bits. In the second word, the 4 MSbs are ' 1 's. If this  second  word  is  executed  as  an  instruction  (by itself), it will execute as a NOP .\nAll  single-word  instructions  are  executed  in  a  single instruction cycle, unless a conditional test is true or the program counter is changed as a result of the instruction. In these cases, the execution takes two instruction cycles, with the additional instruction cycle(s) executed as a NOP .\nThe double-word instructions execute in two instruction cycles.",
    "24.1 Standard Instruction Set\nOne instruction cycle consists of four oscillator periods. Thus, for an oscillator frequency of 4 MHz, the normal instruction execution time is 1 \uf06d s. If a conditional test is true, or the program counter is changed as a result of an instruction,  the  instruction  execution  time  is  2 \uf06d s. Two-word branch instructions (if true) would take 3 \uf06d s.\nFigure 24-1 shows the general formats that the instructions can have. All examples use the convention 'nnh' to represent a hexadecimal number.\nThe  Instruction  Set  Summary,  shown  in Table 24-2 , lists the standard instructions recognized by the Microchip Assembler (MPASM TM ).\nSection 24.1.1 'Standard Instruction Set' provides a description of each instruction.",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\na, Description = RAM access bit a = 0 : RAM location in Access RAM (BSR register is ignored) a = 1 : RAM bank is specified by BSR register. bbb, Description = Bit address within an 8-bit file register (0 to 7).. BSR, Description = Bank Select Register. Used to select the current RAM bank.. C, DC, Z, OV,, Description = ALU Status bits: C arry, D igit C arry, Z ero, Ov erflow, N egative.. d, Description = Destination select bit d = 0 : store result in WREG d = 1 : store result in file register f. dest, Description = Destination: either the WREG register or the specified register file location.. f, Description = 8-bit Register file address (00h to FFh) or 2-bit FSR designator (0h to 3h).. f s, Description = 12-bit Register file address (000h to FFFh). This is the source address.. f d, Description = 12-bit Register file address (000h to FFFh). This is",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\nthe destination address.. GIE, Description = Global Interrupt Enable bit.. k, Description = Literal field, constant data or label (may be either an 8-bit, 12-bit or a 20-bit value).. label, Description = Label name.. mm, Description = The mode of the TBLPTR register for the table read and table write instructions.. , Description = Only used with table read and table write instructions: No change to register (such as TBLPTR with table. * *+, Description = reads and writes) Post-Increment register (such as TBLPTR with table reads and writes). *-, Description = Post-Decrement register (such as TBLPTR with table reads and writes). +*, Description = . n, Description = Pre-Increment register (such as TBLPTR with table reads and writes) The relative address (2's complement number) for relative branch instructions or the direct address for. PC, Description = Program Counter.. PCL, Description = Program Counter Low Byte.. PCH, Description = Program Counter High Byte.. PCLATH, Description = Program Counter High Byte",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\nLatch.. PCLATU, Description = Program Counter Upper Byte Latch.. PD, Description = Power-down bit.. PRODH, Description = Product of Multiply High Byte.. PRODL, Description = Product of Multiply Low Byte.. s, Description = Fast Call/Return mode select bit s = 0 : do not update into/from shadow registers s = 1 : certain registers loaded into/from shadow registers (Fast mode). TBLPTR, Description = 21-bit Table Pointer (points to a Program Memory location).. TABLAT, Description = 8-bit Table Latch.. TO, Description = Time-out bit.. TOS, Description = Top-of-Stack.. u, Description = Unused or unchanged.. WDT, Description = Working register (accumulator).. WREG, Description = Don't care (' 0 ' or ' 1 '). The assembler will generate code with x = 0 . It is the recommended form of. x, Description = use for compatibility with all Microchip software tools.. z s, Description = 7-bit offset value for indirect addressing of register files (source).. z d,",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\nDescription = 7-bit offset value for indirect addressing of register files (destination).. , Description = Indicates an indexed address.. [text], Description = . (text) [expr]<n>, Description = text Specifies bit n of the register indicated by the pointer expr .. \uf0ae, Description = Assigned to.. >, Description = Register bit field.. < \uf0ce, Description = In the set of.. italics, Description = User-defined term (font is Courier New).",
    "GENERAL FORMAT FOR INSTRUCTIONS\n,  = (literal). ,  = n<7:0>. OPCODE,  = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nBYTE-ORIENTED OPERATIONS, Mnemonic,.Operands = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Description.Description = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Cycles.Cycles = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Status Affected.Status Affected = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Notes.Notes = BYTE-ORIENTED OPERATIONS. ADDWF, Mnemonic,.Operands = f, d, a. ADDWF, Description.Description = Add WREG and f. ADDWF, Cycles.Cycles = 1. ADDWF, 16-Bit Instruction Word.MSb = 0010. ADDWF, 16-Bit Instruction Word.MSb = 01da. ADDWF, 16-Bit Instruction Word. = ffff. ADDWF,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.LSb = ffff. ADDWF, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWF, Notes.Notes = 1, 2. ADDWFC, Mnemonic,.Operands = f, d, a. ADDWFC, Description.Description = Add WREG and Carry bit to f. ADDWFC, Cycles.Cycles = 1. ADDWFC, 16-Bit Instruction Word.MSb = 0010. ADDWFC, 16-Bit Instruction Word.MSb = 00da. ADDWFC, 16-Bit Instruction Word. = ffff. ADDWFC, 16-Bit Instruction Word.LSb = ffff. ADDWFC, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWFC, Notes.Notes = 1, 2. ANDWF, Mnemonic,.Operands = f, d, a. ANDWF, Description.Description = AND WREG with f. ANDWF, Cycles.Cycles = 1. ANDWF, 16-Bit Instruction Word.MSb = 0001.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nANDWF, 16-Bit Instruction Word.MSb = 01da. ANDWF, 16-Bit Instruction Word. = ffff. ANDWF, 16-Bit Instruction Word.LSb = ffff. ANDWF, Status Affected.Status Affected = Z, N. ANDWF, Notes.Notes = 1,2. CLRF, Mnemonic,.Operands = f, a. CLRF, Description.Description = Clear f. CLRF, Cycles.Cycles = 1. CLRF, 16-Bit Instruction Word.MSb = 0110. CLRF, 16-Bit Instruction Word.MSb = 101a. CLRF, 16-Bit Instruction Word. = ffff. CLRF, 16-Bit Instruction Word.LSb = ffff. CLRF, Status Affected.Status Affected = Z. CLRF, Notes.Notes = 2. COMF, Mnemonic,.Operands = f, d, a. COMF, Description.Description = Complement f. COMF, Cycles.Cycles = 1. COMF, 16-Bit Instruction Word.MSb = 0001. COMF, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 11da. COMF, 16-Bit Instruction Word. = ffff. COMF, 16-Bit Instruction Word.LSb = ffff. COMF, Status Affected.Status Affected = Z, N. COMF, Notes.Notes = 1, 2. CPFSEQ, Mnemonic,.Operands = f, a. CPFSEQ, Description.Description = Compare f with WREG, Skip =. CPFSEQ, Cycles.Cycles = 1 (2 or 3). CPFSEQ, 16-Bit Instruction Word.MSb = 0110. CPFSEQ, 16-Bit Instruction Word.MSb = 001a. CPFSEQ, 16-Bit Instruction Word. = ffff. CPFSEQ, 16-Bit Instruction Word.LSb = ffff. CPFSEQ, Status Affected.Status Affected = None. CPFSEQ, Notes.Notes = 4. CPFSGT, Mnemonic,.Operands = f, a. CPFSGT, Description.Description = Compare f with WREG, Skip >. CPFSGT, Cycles.Cycles = 1",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n(2 or 3). CPFSGT, 16-Bit Instruction Word.MSb = 0110. CPFSGT, 16-Bit Instruction Word.MSb = 010a. CPFSGT, 16-Bit Instruction Word. = ffff. CPFSGT, 16-Bit Instruction Word.LSb = ffff. CPFSGT, Status Affected.Status Affected = None. CPFSGT, Notes.Notes = 4. CPFSLT, Mnemonic,.Operands = f, a. CPFSLT, Description.Description = Compare f with WREG, Skip <. CPFSLT, Cycles.Cycles = 1 (2 or 3). CPFSLT, 16-Bit Instruction Word.MSb = 0110. CPFSLT, 16-Bit Instruction Word.MSb = 000a. CPFSLT, 16-Bit Instruction Word. = ffff. CPFSLT, 16-Bit Instruction Word.LSb = ffff. CPFSLT, Status Affected.Status Affected = None. CPFSLT, Notes.Notes = 1, 2. DECF, Mnemonic,.Operands = f, d, a.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nDECF, Description.Description = Decrement f. DECF, Cycles.Cycles = 1. DECF, 16-Bit Instruction Word.MSb = 0000. DECF, 16-Bit Instruction Word.MSb = 01da. DECF, 16-Bit Instruction Word. = ffff. DECF, 16-Bit Instruction Word.LSb = ffff. DECF, Status Affected.Status Affected = C, DC, Z, OV, N. DECF, Notes.Notes = 1, 2, 3, 4. DECFSZ, Mnemonic,.Operands = f, d, a. DECFSZ, Description.Description = Decrement f, Skip if 0. DECFSZ, Cycles.Cycles = 1 (2 or 3). DECFSZ, 16-Bit Instruction Word.MSb = 0010. DECFSZ, 16-Bit Instruction Word.MSb = 11da. DECFSZ, 16-Bit Instruction Word. = ffff. DECFSZ, 16-Bit Instruction Word.LSb = ffff. DECFSZ, Status Affected.Status Affected = None. DECFSZ,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nNotes.Notes = 1, 2, 3, 4. DCFSNZ, Mnemonic,.Operands = f, d, a. DCFSNZ, Description.Description = Decrement f, Skip if Not 0. DCFSNZ, Cycles.Cycles = 1 (2 or 3). DCFSNZ, 16-Bit Instruction Word.MSb = 0100. DCFSNZ, 16-Bit Instruction Word.MSb = 11da. DCFSNZ, 16-Bit Instruction Word. = ffff. DCFSNZ, 16-Bit Instruction Word.LSb = ffff. DCFSNZ, Status Affected.Status Affected = None. DCFSNZ, Notes.Notes = 1, 2. INCF, Mnemonic,.Operands = f, d, a. INCF, Description.Description = Increment f. INCF, Cycles.Cycles = 1. INCF, 16-Bit Instruction Word.MSb = 0010. INCF, 16-Bit Instruction Word.MSb = 10da. INCF, 16-Bit Instruction Word. = ffff. INCF, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nffff. INCF, Status Affected.Status Affected = C, DC, Z, OV, N. INCF, Notes.Notes = 1, 2, 3, 4. INCFSZ, Mnemonic,.Operands = f, d, a. INCFSZ, Description.Description = Increment f, Skip if 0. INCFSZ, Cycles.Cycles = 1 (2 or 3). INCFSZ, 16-Bit Instruction Word.MSb = 0011. INCFSZ, 16-Bit Instruction Word.MSb = 11da. INCFSZ, 16-Bit Instruction Word. = ffff. INCFSZ, 16-Bit Instruction Word.LSb = ffff. INCFSZ, Status Affected.Status Affected = None. INCFSZ, Notes.Notes = 4. INFSNZ, Mnemonic,.Operands = f, d, a. INFSNZ, Description.Description = Increment f, Skip if Not 0. INFSNZ, Cycles.Cycles = 1 (2 or 3). INFSNZ, 16-Bit Instruction Word.MSb = 0100. INFSNZ,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.MSb = 10da. INFSNZ, 16-Bit Instruction Word. = ffff. INFSNZ, 16-Bit Instruction Word.LSb = ffff. INFSNZ, Status Affected.Status Affected = None. INFSNZ, Notes.Notes = 1, 2. IORWF, Mnemonic,.Operands = f, d, a. IORWF, Description.Description = Inclusive OR WREG with f. IORWF, Cycles.Cycles = 1. IORWF, 16-Bit Instruction Word.MSb = 0001. IORWF, 16-Bit Instruction Word.MSb = 00da. IORWF, 16-Bit Instruction Word. = ffff. IORWF, 16-Bit Instruction Word.LSb = ffff. IORWF, Status Affected.Status Affected = Z, N. IORWF, Notes.Notes = 1, 2. MOVF, Mnemonic,.Operands = f, d, a. MOVF, Description.Description = Move f. MOVF, Cycles.Cycles = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMOVF, 16-Bit Instruction Word.MSb = 0101. MOVF, 16-Bit Instruction Word.MSb = 00da. MOVF, 16-Bit Instruction Word. = ffff. MOVF, 16-Bit Instruction Word.LSb = ffff. MOVF, Status Affected.Status Affected = Z, N. MOVF, Notes.Notes = 1. MOVFF, Mnemonic,.Operands = f s , f d. MOVFF, Description.Description = Move f s (source) to 1st word f (destination) 2nd word 1 2. MOVFF, Cycles.Cycles = . MOVFF, 16-Bit Instruction Word.MSb = 1100. MOVFF, 16-Bit Instruction Word.MSb = ffff. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word.LSb = ffff. MOVFF, Status Affected.Status Affected = None. MOVFF, Notes.Notes = . , Mnemonic,.Operands = . , Description.Description = d WREG to f. ,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nCycles.Cycles = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = ffff. , 16-Bit Instruction Word. = ffff. , 16-Bit Instruction Word.LSb = ffff. , Status Affected.Status Affected = . , Notes.Notes = . MOVWF, Mnemonic,.Operands = f, a. MOVWF, Description.Description = Move. MOVWF, Cycles.Cycles = 1. MOVWF, 16-Bit Instruction Word.MSb = 0110. MOVWF, 16-Bit Instruction Word.MSb = 111a. MOVWF, 16-Bit Instruction Word. = ffff. MOVWF, 16-Bit Instruction Word.LSb = ffff. MOVWF, Status Affected.Status Affected = None. MOVWF, Notes.Notes = . MULWF, Mnemonic,.Operands = f, a. MULWF, Description.Description = Multiply WREG with f. MULWF, Cycles.Cycles = 1.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMULWF, 16-Bit Instruction Word.MSb = 0000. MULWF, 16-Bit Instruction Word.MSb = 001a. MULWF, 16-Bit Instruction Word. = ffff. MULWF, 16-Bit Instruction Word.LSb = ffff. MULWF, Status Affected.Status Affected = None. MULWF, Notes.Notes = 1, 2. NEGF, Mnemonic,.Operands = f, a. NEGF, Description.Description = Negate f. NEGF, Cycles.Cycles = 1. NEGF, 16-Bit Instruction Word.MSb = 0110 0011. NEGF, 16-Bit Instruction Word.MSb = 110a. NEGF, 16-Bit Instruction Word. = ffff. NEGF, 16-Bit Instruction Word.LSb = ffff. NEGF, Status Affected.Status Affected = C, DC, Z, OV, N. NEGF, Notes.Notes = . RLCF, Mnemonic,.Operands = f, d, a. RLCF, Description.Description = Rotate Left f",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nthrough Carry. RLCF, Cycles.Cycles = 1. RLCF, 16-Bit Instruction Word.MSb = . RLCF, 16-Bit Instruction Word.MSb = 01da. RLCF, 16-Bit Instruction Word. = ffff. RLCF, 16-Bit Instruction Word.LSb = ffff. RLCF, Status Affected.Status Affected = C, Z, N. RLCF, Notes.Notes = 1, 2. RLNCF, Mnemonic,.Operands = f, d, a. RLNCF, Description.Description = Rotate Left f (No Carry). RLNCF, Cycles.Cycles = 1. RLNCF, 16-Bit Instruction Word.MSb = 0100. RLNCF, 16-Bit Instruction Word.MSb = 01da. RLNCF, 16-Bit Instruction Word. = ffff. RLNCF, 16-Bit Instruction Word.LSb = ffff. RLNCF, Status Affected.Status Affected = Z, N. RLNCF, Notes.Notes = . RRCF,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMnemonic,.Operands = f, d, a. RRCF, Description.Description = Rotate Right f through Carry. RRCF, Cycles.Cycles = 1. RRCF, 16-Bit Instruction Word.MSb = 0011. RRCF, 16-Bit Instruction Word.MSb = 00da. RRCF, 16-Bit Instruction Word. = ffff. RRCF, 16-Bit Instruction Word.LSb = ffff. RRCF, Status Affected.Status Affected = C, Z, N. RRCF, Notes.Notes = . RRNCF, Mnemonic,.Operands = f, d, a. RRNCF, Description.Description = Rotate Right f (No Carry). RRNCF, Cycles.Cycles = 1. RRNCF, 16-Bit Instruction Word.MSb = 0100. RRNCF, 16-Bit Instruction Word.MSb = 00da. RRNCF, 16-Bit Instruction Word. = ffff. RRNCF, 16-Bit Instruction Word.LSb = ffff. RRNCF, Status Affected.Status Affected = Z,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nN. RRNCF, Notes.Notes = . SETF, Mnemonic,.Operands = f, a. SETF, Description.Description = Set f. SETF, Cycles.Cycles = 1. SETF, 16-Bit Instruction Word.MSb = 0110. SETF, 16-Bit Instruction Word.MSb = 100a. SETF, 16-Bit Instruction Word. = ffff. SETF, 16-Bit Instruction Word.LSb = ffff. SETF, Status Affected.Status Affected = None. SETF, Notes.Notes = 1, 2. SUBFWB, Mnemonic,.Operands = f, d, a. SUBFWB, Description.Description = Subtract f from WREG with Borrow. SUBFWB, Cycles.Cycles = 1. SUBFWB, 16-Bit Instruction Word.MSb = 0101. SUBFWB, 16-Bit Instruction Word.MSb = 01da. SUBFWB, 16-Bit Instruction Word. = ffff. SUBFWB, 16-Bit Instruction Word.LSb = ffff.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nSUBFWB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBFWB, Notes.Notes = . SUBWF, Mnemonic,.Operands = f, d, a. SUBWF, Description.Description = Subtract WREG from f. SUBWF, Cycles.Cycles = 1. SUBWF, 16-Bit Instruction Word.MSb = 0101. SUBWF, 16-Bit Instruction Word.MSb = 11da. SUBWF, 16-Bit Instruction Word. = ffff. SUBWF, 16-Bit Instruction Word.LSb = ffff. SUBWF, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWF, Notes.Notes = 1, 2. SUBWFB, Mnemonic,.Operands = f, d, a. SUBWFB, Description.Description = Subtract WREG from f with Borrow. SUBWFB, Cycles.Cycles = 1. SUBWFB, 16-Bit Instruction Word.MSb = 0101. SUBWFB, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 10da. SUBWFB, 16-Bit Instruction Word. = ffff. SUBWFB, 16-Bit Instruction Word.LSb = ffff. SUBWFB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWFB, Notes.Notes = . SWAPF, Mnemonic,.Operands = f, d, a. SWAPF, Description.Description = Swap Nibbles in f. SWAPF, Cycles.Cycles = 1. SWAPF, 16-Bit Instruction Word.MSb = 0011. SWAPF, 16-Bit Instruction Word.MSb = 10da. SWAPF, 16-Bit Instruction Word. = ffff. SWAPF, 16-Bit Instruction Word.LSb = ffff. SWAPF, Status Affected.Status Affected = None. SWAPF, Notes.Notes = 4. TSTFSZ, Mnemonic,.Operands = f, a. TSTFSZ, Description.Description = Test f, Skip if 0. TSTFSZ, Cycles.Cycles = 1 (2 or 3). TSTFSZ, 16-Bit Instruction Word.MSb",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n= 0110. TSTFSZ, 16-Bit Instruction Word.MSb = 011a. TSTFSZ, 16-Bit Instruction Word. = ffff. TSTFSZ, 16-Bit Instruction Word.LSb = ffff. TSTFSZ, Status Affected.Status Affected = None. TSTFSZ, Notes.Notes = 1, 2. XORWF, Mnemonic,.Operands = f, d, a. XORWF, Description.Description = Exclusive OR WREG with f. XORWF, Cycles.Cycles = 1. XORWF, 16-Bit Instruction Word.MSb = 0001. XORWF, 16-Bit Instruction Word.MSb = 10da. XORWF, 16-Bit Instruction Word. = ffff. XORWF, 16-Bit Instruction Word.LSb = ffff. XORWF, Status Affected.Status Affected = Z, N. XORWF, Notes.Notes = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBIT-ORIENTED OPERATIONS, Mnemonic,.Operands = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Description.Description = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Cycles.Cycles = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Status Affected.Status Affected = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Notes.Notes = BIT-ORIENTED OPERATIONS. BCF, Mnemonic,.Operands = f, b, a. BCF, Description.Description = Bit Clear f. BCF, Cycles.Cycles = . BCF, 16-Bit Instruction Word.MSb = 1001. BCF, 16-Bit Instruction Word.MSb = bbba. BCF, 16-Bit Instruction Word. = ffff. BCF, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nffff. BCF, Status Affected.Status Affected = None. BCF, Notes.Notes = 1, 2 1, 2. BSF, Mnemonic,.Operands = f, b, a. BSF, Description.Description = Bit Set f. BSF, Cycles.Cycles = . BSF, 16-Bit Instruction Word.MSb = 1000. BSF, 16-Bit Instruction Word.MSb = bbba. BSF, 16-Bit Instruction Word. = ffff. BSF, 16-Bit Instruction Word.LSb = ffff. BSF, Status Affected.Status Affected = None. BSF, Notes.Notes = . BTFSC, Mnemonic,.Operands = f, b, a. BTFSC, Description.Description = Bit Test f, Skip if Clear. BTFSC, Cycles.Cycles = (2 or 3). BTFSC, 16-Bit Instruction Word.MSb = 1011. BTFSC, 16-Bit Instruction Word.MSb = bbba. BTFSC, 16-Bit Instruction Word. = ffff. BTFSC, 16-Bit",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nInstruction Word.LSb = ffff. BTFSC, Status Affected.Status Affected = None. BTFSC, Notes.Notes = 3, 4. BTFSS, Mnemonic,.Operands = f, b, a. BTFSS, Description.Description = Bit Test f, Skip if Set. BTFSS, Cycles.Cycles = (2 or 3). BTFSS, 16-Bit Instruction Word.MSb = 1010. BTFSS, 16-Bit Instruction Word.MSb = bbba. BTFSS, 16-Bit Instruction Word. = ffff. BTFSS, 16-Bit Instruction Word.LSb = ffff. BTFSS, Status Affected.Status Affected = None. BTFSS, Notes.Notes = 3, 4. BTG, Mnemonic,.Operands = f, d, a. BTG, Description.Description = Bit Toggle f. BTG, Cycles.Cycles = . BTG, 16-Bit Instruction Word.MSb = 0111. BTG, 16-Bit Instruction Word.MSb = bbba. BTG, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord. = ffff. BTG, 16-Bit Instruction Word.LSb = ffff. BTG, Status Affected.Status Affected = None. BTG, Notes.Notes = 1, 2. CONTROL OPERATIONS, Mnemonic,.Operands = CONTROL OPERATIONS. CONTROL OPERATIONS, Description.Description = CONTROL OPERATIONS. CONTROL OPERATIONS, Cycles.Cycles = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word. = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.LSb = CONTROL OPERATIONS. CONTROL OPERATIONS, Status Affected.Status Affected = CONTROL OPERATIONS. CONTROL OPERATIONS, Notes.Notes = CONTROL OPERATIONS. BC, Mnemonic,.Operands = n. BC, Description.Description = Branch if Carry. BC, Cycles.Cycles = (2). BC, 16-Bit Instruction Word.MSb = 1110. BC, 16-Bit Instruction Word.MSb = 0010. BC, 16-Bit Instruction Word. = nnnn. BC, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nnnnn. BC, Status Affected.Status Affected = None. BC, Notes.Notes = . BN, Mnemonic,.Operands = n. BN, Description.Description = Branch if Negative. BN, Cycles.Cycles = (2). BN, 16-Bit Instruction Word.MSb = 1110. BN, 16-Bit Instruction Word.MSb = 0110. BN, 16-Bit Instruction Word. = nnnn. BN, 16-Bit Instruction Word.LSb = nnnn. BN, Status Affected.Status Affected = None. BN, Notes.Notes = . BNC, Mnemonic,.Operands = n. BNC, Description.Description = Branch if Not Carry. BNC, Cycles.Cycles = (2). BNC, 16-Bit Instruction Word.MSb = 1110. BNC, 16-Bit Instruction Word.MSb = 0011. BNC, 16-Bit Instruction Word. = nnnn. BNC, 16-Bit Instruction Word.LSb = nnnn. BNC, Status Affected.Status Affected = None. BNC, Notes.Notes = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBNN, Mnemonic,.Operands = n. BNN, Description.Description = Branch if Not Negative. BNN, Cycles.Cycles = (2). BNN, 16-Bit Instruction Word.MSb = 1110. BNN, 16-Bit Instruction Word.MSb = 0111. BNN, 16-Bit Instruction Word. = nnnn. BNN, 16-Bit Instruction Word.LSb = nnnn. BNN, Status Affected.Status Affected = None. BNN, Notes.Notes = . BNOV, Mnemonic,.Operands = n. BNOV, Description.Description = Branch if Not Overflow. BNOV, Cycles.Cycles = (2). BNOV, 16-Bit Instruction Word.MSb = 1110. BNOV, 16-Bit Instruction Word.MSb = 0101. BNOV, 16-Bit Instruction Word. = nnnn. BNOV, 16-Bit Instruction Word.LSb = nnnn. BNOV, Status Affected.Status Affected = None. BNOV, Notes.Notes = . BNZ, Mnemonic,.Operands",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= n. BNZ, Description.Description = Branch if Not Zero. BNZ, Cycles.Cycles = (2). BNZ, 16-Bit Instruction Word.MSb = 1110. BNZ, 16-Bit Instruction Word.MSb = 0001. BNZ, 16-Bit Instruction Word. = nnnn. BNZ, 16-Bit Instruction Word.LSb = nnnn. BNZ, Status Affected.Status Affected = None. BNZ, Notes.Notes = . BOV, Mnemonic,.Operands = n. BOV, Description.Description = Branch if Overflow. BOV, Cycles.Cycles = (2). BOV, 16-Bit Instruction Word.MSb = 1110. BOV, 16-Bit Instruction Word.MSb = 0100. BOV, 16-Bit Instruction Word. = nnnn. BOV, 16-Bit Instruction Word.LSb = nnnn. BOV, Status Affected.Status Affected = None. BOV, Notes.Notes = . BRA, Mnemonic,.Operands = n. BRA, Description.Description = Branch",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nUnconditionally. BRA, Cycles.Cycles = . BRA, 16-Bit Instruction Word.MSb = 1101. BRA, 16-Bit Instruction Word.MSb = 0nnn. BRA, 16-Bit Instruction Word. = nnnn. BRA, 16-Bit Instruction Word.LSb = nnnn. BRA, Status Affected.Status Affected = None. BRA, Notes.Notes = . BZ, Mnemonic,.Operands = n. BZ, Description.Description = Branch if Zero. BZ, Cycles.Cycles = (2). BZ, 16-Bit Instruction Word.MSb = 1110. BZ, 16-Bit Instruction Word.MSb = 0000. BZ, 16-Bit Instruction Word. = nnnn. BZ, 16-Bit Instruction Word.LSb = nnnn. BZ, Status Affected.Status Affected = None. BZ, Notes.Notes = . CALL, Mnemonic,.Operands = n, s. CALL, Description.Description = Call Subroutine 1st word. CALL, Cycles.Cycles = . CALL, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = 1110. CALL, 16-Bit Instruction Word.MSb = 110s. CALL, 16-Bit Instruction Word. = kkkk. CALL, 16-Bit Instruction Word.LSb = kkkk. CALL, Status Affected.Status Affected = None. CALL, Notes.Notes = . CLRWDT, Mnemonic,.Operands = -. CLRWDT, Description.Description = Clear Watchdog Timer. CLRWDT, Cycles.Cycles = . CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word. = 0000. CLRWDT, 16-Bit Instruction Word.LSb = 0100. CLRWDT, Status Affected.Status Affected = TO, PD. CLRWDT, Notes.Notes = . DAW, Mnemonic,.Operands = -. DAW, Description.Description = Decimal Adjust WREG. DAW, Cycles.Cycles = . DAW, 16-Bit Instruction Word.MSb",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word. = 0000. DAW, 16-Bit Instruction Word.LSb = 0111. DAW, Status Affected.Status Affected = C. DAW, Notes.Notes = . GOTO, Mnemonic,.Operands = n. GOTO, Description.Description = Go to Address 1st word 2nd word. GOTO, Cycles.Cycles = . GOTO, 16-Bit Instruction Word.MSb = 1110 1111. GOTO, 16-Bit Instruction Word.MSb = 1111. GOTO, 16-Bit Instruction Word. = kkkk. GOTO, 16-Bit Instruction Word.LSb = kkkk kkkk. GOTO, Status Affected.Status Affected = None. GOTO, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = kkkk 0000. NOP, 16-Bit Instruction Word. = kkkk 0000. NOP, 16-Bit Instruction Word.LSb = 0000. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 1111. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word. = xxxx. NOP, 16-Bit Instruction Word.LSb = xxxx. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = 4. POP, Mnemonic,.Operands = -. POP, Description.Description = Pop Top of Return Stack (TOS). POP, Cycles.Cycles = . POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= 0000. POP, 16-Bit Instruction Word.LSb = 0110. POP, Status Affected.Status Affected = None. POP, Notes.Notes = . PUSH, Mnemonic,.Operands = -. PUSH, Description.Description = Push Top of Return Stack (TOS). PUSH, Cycles.Cycles = . PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word. = 0000. PUSH, 16-Bit Instruction Word.LSb = 0101. PUSH, Status Affected.Status Affected = None. PUSH, Notes.Notes = . RCALL, Mnemonic,.Operands = n. RCALL, Description.Description = Relative Call. RCALL, Cycles.Cycles = . RCALL, 16-Bit Instruction Word.MSb = 1101. RCALL, 16-Bit Instruction Word.MSb = 1nnn. RCALL, 16-Bit Instruction Word. = nnnn. RCALL, 16-Bit Instruction Word.LSb = nnnn. RCALL, Status Affected.Status Affected",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= None. RCALL, Notes.Notes = . RESET, Mnemonic,.Operands = . RESET, Description.Description = Software Device Reset. RESET, Cycles.Cycles = . RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word. = 1111. RESET, 16-Bit Instruction Word.LSb = 1111. RESET, Status Affected.Status Affected = All. RESET, Notes.Notes = . RETFIE, Mnemonic,.Operands = s. RETFIE, Description.Description = Return from Interrupt Enable. RETFIE, Cycles.Cycles = . RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word. = 0001. RETFIE, 16-Bit Instruction Word.LSb = 000s. RETFIE, Status Affected.Status Affected = GIE/GIEH, PEIE/GIEL. RETFIE, Notes.Notes = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nRETLW, Mnemonic,.Operands = k. RETLW, Description.Description = Return with Literal in WREG. RETLW, Cycles.Cycles = . RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = . RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW, Notes.Notes = . RETURN, Mnemonic,.Operands = s. RETURN, Description.Description = Return from Subroutine into Standby mode. RETURN, Cycles.Cycles = . RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = . RETURN, 16-Bit Instruction Word. = kkkk. RETURN, 16-Bit Instruction Word.LSb = . RETURN, Status Affected.Status Affected = . RETURN, Notes.Notes = . SLEEP, Mnemonic,.Operands = -. SLEEP, Description.Description = Go.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nSLEEP, Cycles.Cycles = . SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.MSb = 0000 0000. SLEEP, 16-Bit Instruction Word. = 0001 0000. SLEEP, 16-Bit Instruction Word.LSb = 001s 0011. SLEEP, Status Affected.Status Affected = None TO, PD. SLEEP, Notes.Notes = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nLITERAL OPERATIONS, Mnemonic,.Operands = LITERAL OPERATIONS. LITERAL OPERATIONS, Description = LITERAL OPERATIONS. LITERAL OPERATIONS, Cycles. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.LSb = LITERAL OPERATIONS. LITERAL OPERATIONS, Status Affected. = LITERAL OPERATIONS. LITERAL OPERATIONS, Notes. = LITERAL OPERATIONS. ADDLW, Mnemonic,.Operands = k. ADDLW, Description = Add Literal and WREG. ADDLW, Cycles. = 1. ADDLW, 16-Bit Instruction Word.MSb = 0000. ADDLW, 16-Bit Instruction Word.MSb = 1111. ADDLW, 16-Bit Instruction Word. = kkkk. ADDLW, 16-Bit Instruction Word.LSb = kkkk. ADDLW, Status Affected. = C, DC, Z, OV, N. ADDLW, Notes. = . ANDLW,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = k. ANDLW, Description = AND Literal with WREG. ANDLW, Cycles. = 1. ANDLW, 16-Bit Instruction Word.MSb = 0000. ANDLW, 16-Bit Instruction Word.MSb = 1011. ANDLW, 16-Bit Instruction Word. = kkkk. ANDLW, 16-Bit Instruction Word.LSb = kkkk. ANDLW, Status Affected. = Z, N. ANDLW, Notes. = . IORLW, Mnemonic,.Operands = k. IORLW, Description = Inclusive OR Literal with WREG. IORLW, Cycles. = 1. IORLW, 16-Bit Instruction Word.MSb = 0000. IORLW, 16-Bit Instruction Word.MSb = 1001. IORLW, 16-Bit Instruction Word. = kkkk. IORLW, 16-Bit Instruction Word.LSb = kkkk. IORLW, Status Affected. = Z, N. IORLW, Notes. = . LFSR,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = f, k. LFSR, Description = Move Literal (12-bit)2nd word to FSR(f) 1st word. LFSR, Cycles. = 2. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word. = 00ff. LFSR, 16-Bit Instruction Word.LSb = kkkk. LFSR, Status Affected. = None. LFSR, Notes. = . MOVLB, Mnemonic,.Operands = k. MOVLB, Description = Move Literal to BSR<3:0>. MOVLB, Cycles. = 1. MOVLB, 16-Bit Instruction Word.MSb = 1111 0000. MOVLB, 16-Bit Instruction Word.MSb = 0000 0001. MOVLB, 16-Bit Instruction Word. = kkkk 0000. MOVLB, 16-Bit Instruction Word.LSb = kkkk kkkk.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMOVLB, Status Affected. = None. MOVLB, Notes. = . MOVLW, Mnemonic,.Operands = k. MOVLW, Description = Move Literal to WREG. MOVLW, Cycles. = 1. MOVLW, 16-Bit Instruction Word.MSb = 0000. MOVLW, 16-Bit Instruction Word.MSb = 1110. MOVLW, 16-Bit Instruction Word. = kkkk. MOVLW, 16-Bit Instruction Word.LSb = kkkk. MOVLW, Status Affected. = None. MOVLW, Notes. = . MULLW, Mnemonic,.Operands = k. MULLW, Description = Multiply Literal with WREG. MULLW, Cycles. = 1. MULLW, 16-Bit Instruction Word.MSb = 0000. MULLW, 16-Bit Instruction Word.MSb = 1101. MULLW, 16-Bit Instruction Word. = kkkk. MULLW, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nkkkk. MULLW, Status Affected. = None. MULLW, Notes. = . RETLW, Mnemonic,.Operands = k. RETLW, Description = Return with Literal in WREG. RETLW, Cycles. = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected. = None. RETLW, Notes. = . SUBLW, Mnemonic,.Operands = k. SUBLW, Description = Subtract WREG from Literal. SUBLW, Cycles. = 1. SUBLW, 16-Bit Instruction Word.MSb = 0000. SUBLW, 16-Bit Instruction Word.MSb = 1000. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, 16-Bit Instruction Word.LSb = kkkk.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nSUBLW, Status Affected. = C, DC, Z, OV, N. SUBLW, Notes. = . XORLW, Mnemonic,.Operands = k. XORLW, Description = Exclusive OR Literal with WREG. XORLW, Cycles. = 1. XORLW, 16-Bit Instruction Word.MSb = 0000. XORLW, 16-Bit Instruction Word.MSb = 1010. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, 16-Bit Instruction Word.LSb = kkkk. XORLW, Status Affected. = Z, N. XORLW, Notes. = . DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Mnemonic,.Operands = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Description = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Cycles. = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nDATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.LSb = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Status Affected. = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Notes. = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. TBLRD*, Mnemonic,.Operands = TBLRD*. TBLRD*, Description = Table Read. TBLRD*, Cycles. = 2. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word. = 0000. TBLRD*, 16-Bit Instruction Word.LSb = 1000. TBLRD*, Status Affected. = None. TBLRD*, Notes. = . TBLRD*+, Mnemonic,.Operands = TBLRD*+. TBLRD*+, Description = Table Read with Post-Increment.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nTBLRD*+, Cycles. = . TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word. = 0000. TBLRD*+, 16-Bit Instruction Word.LSb = 1001. TBLRD*+, Status Affected. = None. TBLRD*+, Notes. = . TBLRD*-, Mnemonic,.Operands = TBLRD*-. TBLRD*-, Description = Table Read with Post-Decrement. TBLRD*-, Cycles. = . TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word. = 0000. TBLRD*-, 16-Bit Instruction Word.LSb = 1010. TBLRD*-, Status Affected. = None. TBLRD*-, Notes. = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nTBLRD+*, Mnemonic,.Operands = TBLRD+*. TBLRD+*, Description = Table Read with Pre-Increment. TBLRD+*, Cycles. = . TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word. = 0000. TBLRD+*, 16-Bit Instruction Word.LSb = 1011. TBLRD+*, Status Affected. = None. TBLRD+*, Notes. = . TBLWT*, Mnemonic,.Operands = TBLWT*. TBLWT*, Description = Table Write. TBLWT*, Cycles. = 2. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word. = 0000. TBLWT*, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n1100. TBLWT*, Status Affected. = None. TBLWT*, Notes. = . TBLWT*+, Mnemonic,.Operands = TBLWT*+. TBLWT*+, Description = Table Write with Post-Increment. TBLWT*+, Cycles. = . TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word. = 0000. TBLWT*+, 16-Bit Instruction Word.LSb = 1101. TBLWT*+, Status Affected. = None. TBLWT*+, Notes. = . TBLWT*-, Mnemonic,.Operands = TBLWT*-. TBLWT*-, Description = Table Write with Post-Decrement. TBLWT*-, Cycles. = . TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word.MSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n0000. TBLWT*-, 16-Bit Instruction Word. = 0000. TBLWT*-, 16-Bit Instruction Word.LSb = 1110. TBLWT*-, Status Affected. = None. TBLWT*-, Notes. = . TBLWT+*, Mnemonic,.Operands = TBLWT+*. TBLWT+*, Description = Table Write with Pre-Increment. TBLWT+*, Cycles. = . TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word. = 0000. TBLWT+*, 16-Bit Instruction Word.LSb = 1111. TBLWT+*, Status Affected. = None. TBLWT+*, Notes. = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "24.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Literal to W = ADDLW k. Syntax:, ADD Literal to W = ADDLW k. Syntax:, ADD Literal to W = ADDLW k. Operands:, ADD Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, ADD Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, ADD Literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, ADD Literal to W = (W) + k \uf0ae W. Operation:, ADD Literal to W = (W) + k \uf0ae W. Operation:, ADD Literal to W = (W) + k \uf0ae W. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Encoding:, ADD Literal to W = 0000. Encoding:, ADD Literal to W = 1111 kkkk. Encoding:, ADD Literal to W = kkkk. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in",
    "24.1.1 STANDARD INSTRUCTION SET\nW.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Words:, ADD Literal to W = 1. Words:, ADD Literal to W = 1. Words:, ADD Literal to W = 1. Cycles:, ADD Literal to W = 1. Cycles:, ADD Literal to W = 1. Cycles:, ADD Literal to W = 1. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q1, ADD Literal to W = Q2. Q1, ADD Literal to W = Q3. Q1, ADD Literal to W = Q4. Decode, ADD Literal to W = Read literal 'k'. Decode, ADD Literal to W = Process Data. Decode, ADD Literal to W = Write to W\nExample:\nADDLW 15h\nBefore Instruction",
    "24.1.1 STANDARD INSTRUCTION SET\nW\n=\n10h\nAfter Instruction\nW = 25h",
    "24.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Wto f = ADDWF. Syntax:, ADD Wto f = f {,d {,a}}. Syntax:, ADD Wto f = . Syntax:, ADD Wto f = . Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f",
    "24.1.1 STANDARD INSTRUCTION SET\n= N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Encoding:, ADD Wto f = 0010. Encoding:, ADD Wto f = 01da. Encoding:, ADD Wto f = ffff. Encoding:, ADD Wto f = ffff. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD",
    "24.1.1 STANDARD INSTRUCTION SET\nWto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended",
    "24.1.1 STANDARD INSTRUCTION SET\ninstruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, ADD Wto f = 1. Words:, ADD Wto f = . Words:, ADD Wto f = . Words:, ADD Wto f = . Cycles:, ADD Wto f = 1. Cycles:, ADD Wto f = . Cycles:,",
    "24.1.1 STANDARD INSTRUCTION SET\nADD Wto f = . Cycles:, ADD Wto f = ",
    "Q Cycle Activity:\nExample:, Q2.Read register 'f' = ADDWF. Example:, Q3.Process Data = REG, 0,. Example:, Q4.Write to destination = . Before Instruction, Q2.Read register 'f' = Before Instruction. Before Instruction, Q3.Process Data = . Before Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 17h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = After Instruction. After Instruction, Q4.Write to destination = After Instruction. W, Q2.Read register 'f' = = 0D9h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG,",
    "Q Cycle Activity:\nQ4.Write to destination = \nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction format then becomes: {label} instruction argument(s).",
    "PIC18F2420/2520/4420/4520\nADDWFC, 1 = ADD Wand Carry bit to f. ADDWFC, 2 = ADD Wand Carry bit to f. ADDWFC, 3 = ADD Wand Carry bit to f. ADDWFC, 4 = ADD Wand Carry bit to f. ADDWFC, 5 = . Syntax:, 1 = ADDWFC f {,d {,a}}. Syntax:, 2 = ADDWFC f {,d {,a}}. Syntax:, 3 = ADDWFC f {,d {,a}}. Syntax:, 4 = ADDWFC f {,d {,a}}. Syntax:, 5 = . Operands:, 1 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 5 = . Operation:, 1 = (W) +",
    "PIC18F2420/2520/4420/4520\n(f) + (C) \uf0ae dest. Operation:, 2 = (W) + (f) + (C) \uf0ae dest. Operation:, 3 = (W) + (f) + (C) \uf0ae dest. Operation:, 4 = (W) + (f) + (C) \uf0ae dest. Operation:, 5 = . Status Affected:, 1 = N,OV, C, DC, Z. Status Affected:, 2 = N,OV, C, DC, Z. Status Affected:, 3 = N,OV, C, DC, Z. Status Affected:, 4 = N,OV, C, DC, Z. Status Affected:, 5 = . Encoding:, 1 = 0010. Encoding:, 2 = 00da. Encoding:, 3 = ffff. Encoding:, 4 = ffff. Encoding:, 5 = . Description:, 1 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'.",
    "PIC18F2420/2520/4420/4520\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and",
    "PIC18F2420/2520/4420/4520\nBit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If",
    "PIC18F2420/2520/4420/4520\n'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 5 = . Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = . Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Cycles:, 5 = . Q Cycle Activity: Q1 Decode, 1 = Q2. Q Cycle Activity: Q1 Decode, 2 = Q3. Q Cycle Activity: Q1 Decode, 3 = . Q Cycle Activity: Q1 Decode, 4 = Q4. Q Cycle Activity: Q1 Decode, 5 = . , 1 = Read register 'f'. , 2 = Process Data. , 3 = .",
    "PIC18F2420/2520/4420/4520\n, 4 = Write to destination. , 5 = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, AND Literal with W = ANDLW. Syntax:, AND Literal with W = k. Syntax:, AND Literal with W = . Syntax:, AND Literal with W = . Operands:, AND Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, AND Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, AND Literal with W = . Operands:, AND Literal with W = . Operation:, AND Literal with W = (W) .AND. k \uf0ae W. Operation:, AND Literal with W = (W) .AND. k \uf0ae W. Operation:, AND Literal with W = . Operation:, AND Literal with W = . Status Affected:, AND Literal with W = N, Z. Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Encoding:, AND Literal with W = 0000. Encoding:, AND Literal with W = 1011. Encoding:, AND Literal with W = kkkk. Encoding:, AND Literal with W = kkkk. Description:, AND Literal with W = The contents of WareANDed with",
    "PIC18F2420/2520/4420/4520\nthe 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of WareANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of WareANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of WareANDed with the 8-bit literal 'k'. The result is placed in W.. Words:, AND Literal with W = 1. Words:, AND Literal with W = . Words:, AND Literal with W = . Words:, AND Literal with W = . Cycles:, AND Literal with W = 1. Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q1, AND Literal with W = Q2.",
    "PIC18F2420/2520/4420/4520\nQ1, AND Literal with W = Q3. Q1, AND Literal with W = . Q1, AND Literal with W = Q4. Decode, AND Literal with W = Read literal 'k'. Decode, AND Literal with W = Process Data. Decode, AND Literal with W = . Decode, AND Literal with W = Write to W. Example:, AND Literal with W = ANDLW. Example:, AND Literal with W = 05Fh. Example:, AND Literal with W = . Example:, AND Literal with W = . Before Instruction, AND Literal with W = Before Instruction. Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . W, AND Literal with W = = A3h. W, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = . After Instruction, AND Literal with W = After Instruction. After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . W, AND Literal with W = = 03h.",
    "PIC18F2420/2520/4420/4520\nW, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = ",
    "Example:\nADDWFC\nREG, 0, 1\nBefore Instruction\nCarry bit\n=\n1\nREG\n=\n02h\nW\n=\n4Dh\nAfter Instruction\nCarry bit\n=\n0\nREG\n=\n02h\nW\n=\n50h",
    "PIC18F2420/2520/4420/4520\nSyntax:, AND Wwith f = ANDWF. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND.",
    "PIC18F2420/2520/4420/4520\n(f) \uf0ae dest. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Encoding:, AND Wwith f = 0001. Encoding:, AND Wwith f = 01da. Encoding:, AND Wwith f = ffff. Encoding:, AND Wwith f = ffff. Description:, AND Wwith f = The contents of Ware ANDed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "PIC18F2420/2520/4420/4520\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, AND Wwith f = The contents of Ware ANDed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, AND Wwith f = The contents of Ware ANDed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is '",
    "PIC18F2420/2520/4420/4520\n0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, AND Wwith f = The contents of Ware ANDed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in",
    "PIC18F2420/2520/4420/4520\nIndexed Literal Offset Mode' for details.. Words:, AND Wwith f = 1. Words:, AND Wwith f = 1. Words:, AND Wwith f = 1. Words:, AND Wwith f = 1. Cycles:, AND Wwith f = 1. Cycles:, AND Wwith f = 1. Cycles:, AND Wwith f = 1. Cycles:, AND Wwith f = 1. Q Cycle Activity:, AND Wwith f = . Q Cycle Activity:, AND Wwith f = . Q Cycle Activity:, AND Wwith f = . Q Cycle Activity:, AND Wwith f = . Q1, AND Wwith f = Q2. Q1, AND Wwith f = Q3. Q1, AND Wwith f = Q3. Q1, AND Wwith f = Q4. Decode, AND Wwith f = Read register 'f'. Decode, AND Wwith f = Process Data. Decode, AND Wwith f = Process Data. Decode, AND Wwith f = Write to destination. Example:, AND Wwith f = ANDWF. Example:, AND",
    "PIC18F2420/2520/4420/4520\nWwith f = REG,. Example:, AND Wwith f = 0, 0. Example:, AND Wwith f = . Before Instruction, AND Wwith f = Before Instruction. Before Instruction, AND Wwith f = . Before Instruction, AND Wwith f = . Before Instruction, AND Wwith f = . W, AND Wwith f = 17h C2h. W, AND Wwith f = . W, AND Wwith f = . W, AND Wwith f = . After Instruction, AND Wwith f = After Instruction. After Instruction, AND Wwith f = . After Instruction, AND Wwith f = . After Instruction, AND Wwith f = . W REG, AND Wwith f = 02h C2h. W REG, AND Wwith f = . W REG, AND Wwith f = . W REG, AND Wwith f = ",
    "Branch if Carry\nSyntax:, 1 = Syntax:. Syntax:, 2 = BC n. Syntax:, 3 = BC n. Syntax:, 4 = BC n. Syntax:, 5 = BC n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110.",
    "Branch if Carry\nEncoding:, 3 = 0010 nnnn. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description: If the will The 2's added, 1 = Description: If the will The 2's added. Description: If the will The 2's added, 2 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 3 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 4 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will",
    "Branch if Carry\nbe PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 5 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:, 3 = . If",
    "Branch if Carry\nJump:, 4 = . If Jump:, 5 = . Q1, 1 = . Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal. , 3 = Process Data. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = HERE. Example:, 3 = . Example:, 4 = . Example:, 5",
    "Branch if Carry\n= . , 1 = . , 2 = . , 3 = BC. , 4 = . , 5 = . Before, 1 = Instruction. Before, 2 = . Before, 3 = . Before, 4 = 5. Before, 5 = 5. PC, 1 = After Instruction. PC, 2 = =. PC, 3 = address. PC, 4 = (HERE). PC, 5 = (HERE). If Carry, 1 = . If Carry, 2 = 0;. If Carry, 3 = . If Carry, 4 = . If Carry, 5 = . , 1 = PC. , 2 = . , 3 = . , 4 = 2). , 5 = 2). , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = (HERE. , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . If, 1 = . If, 2 = . If, 3 = . If, 4 = . If,",
    "Branch if Carry\n5 = . , 1 = Carry. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = 12). , 5 = 12). , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. , 1 = . , 2 = 1;. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = address. , 3 = . , 4 = . , 5 = . =, 1 = =. =, 2 = =. =, 3 = =. =, 4 = =. =, 5 = =. , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = (HERE. PC, 1 = . PC, 2 = . PC, 3 = . PC, 4 = . PC, 5 = ",
    "PIC18F2420/2520/4420/4520\nBCF, 1 = Bit Clear f. BCF, 2 = Bit Clear f. BCF, 3 = Bit Clear f. BCF, 4 = Bit Clear f. Syntax:, 1 = BCF f, b {,a}. Syntax:, 2 = BCF f, b {,a}. Syntax:, 3 = BCF f, b {,a}. Syntax:, 4 = BCF f, b {,a}. Operands:, 1 = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operation:, 1 = 0 \uf0ae f<b>. Operation:, 2 = 0 \uf0ae f<b>. Operation:, 3 = 0 \uf0ae f<b>. Operation:, 4 = 0 \uf0ae f<b>. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status",
    "PIC18F2420/2520/4420/4520\nAffected:, 4 = None. Encoding:, 1 = 1001. Encoding:, 2 = bbba. Encoding:, 3 = ffff. Encoding:, 4 = ffff. Description:, 1 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95",
    "PIC18F2420/2520/4420/4520\n(5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section",
    "PIC18F2420/2520/4420/4520\n24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = . Q1, 2 = . Q1, 3 = . Q1, 4 = . , 1 = Q2. , 2 = Q3. , 3 = Q3. , 4 = Q4. Decode Example:, 1 = Read register 'f' BCF. Decode Example:, 2 = Process Data FLAG_REG,. Decode Example:, 3 = Process Data FLAG_REG,. Decode Example:, 4 = Write register 'f' 7, 0. Before Instruction FLAG_REG =, 1 = Before Instruction FLAG_REG =. Before Instruction FLAG_REG =,",
    "PIC18F2420/2520/4420/4520\n2 = C7h. Before Instruction FLAG_REG =, 3 = C7h. Before Instruction FLAG_REG =, 4 = C7h",
    "BN\nSyntax:, 1 = Syntax:. Syntax:, 2 = BN n. Syntax:, 3 = BN n. Syntax:, 4 = BN n. Syntax:, 5 = BN n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:,",
    "BN\n3 = 0110 nnnn. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description: If the program The 2's added to, 1 = Description: If the program The 2's added to. Description: If the program The 2's added to, 2 = Negative bit is ' 1 ', then the will branch. complement number '2n' is the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the program The 2's added to, 3 = Negative bit is ' 1 ', then the will branch. complement number '2n' is the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the program The 2's added to, 4 = Negative bit is ' 1 ', then the will branch. complement number '2n' is the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC +",
    "BN\n2 + 2n. This instruction is then a two-cycle instruction.. Description: If the program The 2's added to, 5 = Negative bit is ' 1 ', then the will branch. complement number '2n' is the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity: If Jump:, 1 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 2 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . Q1, 1 = . Q1, 2 =",
    "BN\nQ2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. No, 1 = operation. No, 2 = No operation. No, 3 = No operation. No, 4 = No operation. No, 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal. , 3 = Process Data. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = HERE. Example:, 3 = . Example:, 4 = . Example:, 5 = . , 1 = . , 2 = . , 3 = BN. , 4 = . , 5 =",
    "BN\n. , 1 = Before Instruction. , 2 = . , 3 = . , 4 = . , 5 = . PC, 1 = Instruction. PC, 2 = =. PC, 3 = address. PC, 4 = (HERE). PC, 5 = (HERE). If, 1 = PC. If, 2 = . If, 3 = . If, 4 = 0;. If, 5 = 0;. , 1 = . , 2 = =. , 3 = . , 4 = (HERE. , 5 = (HERE. , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = address. , 5 = address. If, 1 = . If, 2 = . If, 3 = . If, 4 = . If, 5 = . , 1 = Negative. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = + 2). , 5 = + 2). , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 =",
    "BN\n. , 3 = . , 4 = address. , 5 = address. , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . Negative, 1 = . Negative, 2 = . Negative, 3 = . Negative, 4 = . Negative, 5 = . After, 1 = . After, 2 = . After, 3 = . After, 4 = . After, 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = 1;. , 5 = 1;. , 1 = . , 2 = . , 3 = . , 4 = (Jump). , 5 = (Jump)",
    "Branch if Not Carry\nSyntax:, 1 = Syntax:. Syntax:, 2 = Syntax:. Syntax:, 3 = BNC n. Syntax:, 4 = BNC n. Syntax:, 5 = BNC n. Syntax:, 6 = BNC n. Operands:, 1 = Operands:. Operands:, 2 = Operands:. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operands:, 6 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = Operation:. Operation:, 3 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 6 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = Status Affected:. Status Affected:, 3 = None.",
    "Branch if Not Carry\nStatus Affected:, 4 = None. Status Affected:, 5 = None. Status Affected:, 6 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = Encoding:. Encoding:, 3 = 1110. Encoding:, 4 = 1110. Encoding:, 5 = 0011. Encoding:, 6 = nnnn. Description:, 1 = Description:. Description:, 2 = Description:. Description:, 3 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 4 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Carry bit is ' 0 ', then the program",
    "Branch if Not Carry\nwill branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 6 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = Words:. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Words:, 6 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = Cycles:. Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Cycles:, 6 = 1(2). Q Cycle Activity: If Jump:, 1 = Q Cycle Activity: If Jump:. Q Cycle Activity: If",
    "Branch if Not Carry\nJump:, 2 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . Q Cycle Activity: If Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = . , 4 = . , 5 = Q3. , 6 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = Process Data. , 6 = Write to PC. , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. , 6 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . If No Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = Q2. , 4 = Q3. , 5 = Q3.",
    "Branch if Not Carry\n, 6 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = Process Data. , 6 = No operation. Example: HERE, 1 = Example: HERE. Example: HERE, 2 = Example: HERE. Example: HERE, 3 = BNC. Example: HERE, 4 = BNC. Example: HERE, 5 = Jump. Example: HERE, 6 = . , 1 = Before Instruction PC. , 2 = Before Instruction PC. , 3 = =. , 4 = address. , 5 = . , 6 = (HERE). , 1 = If Carry PC =. , 2 = If Carry PC =. , 3 = =. , 4 = 0; address. , 5 = (Jump). , 6 = . , 1 = If Carry = PC =. , 2 = If Carry = PC =. , 3 = . , 4 = 1; address. , 5 = (HERE. , 6 = + 2)",
    "Branch if Not Carry\nSyntax:, BNN = Syntax:. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Operands:, BNN = Operands:. Operands:, Branch if Not Negative = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Negative = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Negative = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Negative = -128 \uf0a3 n \uf0a3 127. Operation:, BNN = Operation:. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, BNN = Status Affected:. Status Affected:,",
    "Branch if Not Carry\nBranch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Encoding:, BNN = Encoding:. Encoding:, Branch if Not Negative = 1110. Encoding:, Branch if Not Negative = 1110. Encoding:, Branch if Not Negative = 0111. Encoding:, Branch if Not Negative = nnnn. Description:, BNN = Description:. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle",
    "Branch if Not Carry\ninstruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BNN = Words:. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Cycles:, BNN = Cycles:. Cycles:, Branch if Not Negative = 1(2). Cycles:, Branch if Not Negative = 1(2). Cycles:, Branch if Not Negative = 1(2).",
    "Branch if Not Carry\nCycles:, Branch if Not Negative = 1(2). Q Cycle Activity:, BNN = Q Cycle Activity:. Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . If Jump:, BNN = If Jump:. If Jump:, Branch if Not Negative = . If Jump:, Branch if Not Negative = . If Jump:, Branch if Not Negative = . If Jump:, Branch if Not Negative = . , BNN = Q1. , Branch if Not Negative = Q2. , Branch if Not Negative = . , Branch if Not Negative = . , Branch if Not Negative = Q3. , BNN = Decode. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Process Data. , Branch if Not Negative = Process Data. , BNN = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation.",
    "Branch if Not Carry\nIf No Jump:, BNN = If No Jump:. If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . , BNN = Q1. , Branch if Not Negative = Q2. , Branch if Not Negative = Q2. , Branch if Not Negative = Q3. , Branch if Not Negative = Q3. , BNN = Decode. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Process Data. , Branch if Not Negative = Process Data. Example:, BNN = Example:. Example:, Branch if Not Negative = HERE. Example:, Branch if Not Negative = HERE. Example:, Branch if Not Negative = BNN. Example:, Branch if Not Negative = Jump. , BNN = Before Instruction. , Branch if Not Negative = Before Instruction. , Branch if Not Negative = (HERE). , Branch if Not Negative = (HERE). , Branch if Not Negative = (HERE). , BNN = PC. ,",
    "Branch if Not Carry\nBranch if Not Negative = PC. , Branch if Not Negative = =. , Branch if Not Negative = address. , Branch if Not Negative = (Jump). , BNN = If Negative = PC = If Negative = PC. , Branch if Not Negative = If Negative = PC = If Negative = PC. , Branch if Not Negative = =. , Branch if Not Negative = address 1; address (HERE. , Branch if Not Negative = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ',",
    "PIC18F2420/2520/4420/4520\n(PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 0101. Encoding:, Branch if Not Overflow = nnnn. Encoding:, Branch if Not Overflow = nnnn. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction..",
    "PIC18F2420/2520/4420/4520\nDescription:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction..",
    "PIC18F2420/2520/4420/4520\nDescription:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If",
    "PIC18F2420/2520/4420/4520\nJump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = . , Branch if Not Overflow = Q2. , Branch if Not Overflow = Q2. , Branch if Not Overflow = Q3. , Branch if Not Overflow = Q3. , Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Write to PC. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No",
    "PIC18F2420/2520/4420/4520\noperation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. If No, Branch if Not Overflow = Jump:. If No, Branch if Not Overflow = Jump:. If No, Branch if Not Overflow = Jump:. If No, Branch if Not Overflow = Jump:. If No, Branch if Not Overflow = Jump:. Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = No operation. Example:, Branch if Not Overflow = HERE. Example:, Branch if Not Overflow = HERE. Example:, Branch if Not Overflow",
    "PIC18F2420/2520/4420/4520\n= BNOV Jump. Example:, Branch if Not Overflow = BNOV Jump. Example:, Branch if Not Overflow = . Before Instruction PC =, Branch if Not Overflow = Before Instruction PC =. Before Instruction PC =, Branch if Not Overflow = address. Before Instruction PC =, Branch if Not Overflow = . Before Instruction PC =, Branch if Not Overflow = (HERE). Before Instruction PC =, Branch if Not Overflow = . After Instruction If Overflow, Branch if Not Overflow = After Instruction If Overflow. After Instruction If Overflow, Branch if Not Overflow = = =. After Instruction If Overflow, Branch if Not Overflow = 0; address 1;. After Instruction If Overflow, Branch if Not Overflow = (Jump). After Instruction If Overflow, Branch if Not Overflow = . PC If Overflow = PC =, Branch if Not Overflow = PC If Overflow = PC =. PC If Overflow = PC =, Branch if Not Overflow = . PC If Overflow = PC =, Branch if Not Overflow = address. PC If Overflow = PC =, Branch if Not Overflow",
    "PIC18F2420/2520/4420/4520\n= (HERE. PC If Overflow = PC =, Branch if Not Overflow = + 2)",
    "PIC18F2420/2520/4420/4520\nBNZ, 1 = BNZ. BNZ, 2 = Branch if Not Zero. BNZ, 3 = Branch if Not Zero. BNZ, 4 = Branch if Not Zero. BNZ, 5 = Branch if Not Zero. Syntax:, 1 = Syntax:. Syntax:, 2 = BNZ n. Syntax:, 3 = BNZ n. Syntax:, 4 = BNZ n. Syntax:, 5 = BNZ n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Zero bit is ' 0 ', (PC) + 2 +",
    "PIC18F2420/2520/4420/4520\n2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 1110. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description:, 1 = Description:. Description:, 2 = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 3 = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a",
    "PIC18F2420/2520/4420/4520\ntwo-cycle instruction.. Description:, 4 = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle",
    "PIC18F2420/2520/4420/4520\nActivity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:, 3 = . If Jump:, 4 = . If Jump:, 5 = . Q1, 1 = . Q1, 2 = Q2. Q1, 3 = . Q1, 4 = Q4. Q1, 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. operation, 1 = No. operation, 2 = No operation. operation, 3 = operation. operation, 4 = No operation. operation, 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 =",
    "PIC18F2420/2520/4420/4520\nQ1. , 2 = Q2. , 3 = . , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . , 1 = . , 2 = HERE. , 3 = BNZ. , 4 = . , 5 = . , 1 = Before Instruction. , 2 = . , 3 = . , 4 = . , 5 = . PC, 1 = After. PC, 2 = =. PC, 3 = address. PC, 4 = . PC, 5 = . Instruction, 1 = . Instruction, 2 = . Instruction, 3 = 0;. Instruction, 4 = . Instruction, 5 = . PC, 1 = . PC, 2 = =. PC, 3 = . PC, 4 = . PC, 5 = . , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . If Zero, 1 = . If",
    "PIC18F2420/2520/4420/4520\nZero, 2 = . If Zero, 3 = . If Zero, 4 = . If Zero, 5 = . , 1 = . , 2 = . , 3 = . , 4 = 2). , 5 = 2). , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. , 1 = . , 2 = 1;. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . Zero, 1 = . Zero, 2 = . Zero, 3 = . Zero, 4 = . Zero, 5 = . If, 1 = . If, 2 = . If, 3 = . If, 4 = . If, 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = address. , 5 = address. , 1 = . , 2 = . , 3 = . , 4 =",
    "PIC18F2420/2520/4420/4520\n(Jump). , 5 = (Jump). , 1 = PC. , 2 = PC. , 3 = PC. , 4 = PC. , 5 = PC",
    "Unconditional Branch\nSyntax:\nBRA    n\nOperands:\n-1024 \uf0a3 n \uf0a3 1023\nOperation:\n(PC) + 2 + 2n \uf0ae PC\nStatus Affected:\nNone\nEncoding:\n1101\n0nnn\nnnnn\nnnnn\nDescription:\nAdd the 2's complement number, '2n', to the PC. Since the PC will have incre- mented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\n'n'\nProcess Data\nWrite to PC\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nExample:\nHERE\nBRA Jump\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nPC\n=\naddress\n(Jump)",
    "Unconditional Branch\nSyntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Operands:, Bit Set f = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Set f = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Set f = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Set f = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b \uf0a3 7 a \uf0ce\uf020 [0,1]. Operation:, Bit Set f = 1 \uf0ae f<b>. Operation:, Bit Set f = 1 \uf0ae f<b>. Operation:, Bit Set f = 1 \uf0ae f<b>. Operation:, Bit Set f = 1 \uf0ae f<b>. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Encoding:, Bit Set f =",
    "Unconditional Branch\n1000. Encoding:, Bit Set f = bbba. Encoding:, Bit Set f = ffff. Encoding:, Bit Set f = ffff. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "Unconditional Branch\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for",
    "Unconditional Branch\ndetails.. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . , Bit Set f = Q2. , Bit Set f = Q2. , Bit Set f = Q3. , Bit Set f = Q4. Decode, Bit Set f = Read register 'f'. Decode, Bit Set f = Read register 'f'. Decode, Bit Set f = Process Data. Decode, Bit Set f = Write register 'f'. Example:, Bit Set f = BSF. Example:, Bit Set f = FLAG_REG, 7,",
    "Unconditional Branch\n1. Example:, Bit Set f = FLAG_REG, 7, 1. Example:, Bit Set f = FLAG_REG, 7, 1. Before Instruction, Bit Set f = Before Instruction. Before Instruction, Bit Set f = 0Ah. Before Instruction, Bit Set f = 0Ah. Before Instruction, Bit Set f = 0Ah",
    "PIC18F2420/2520/4420/4520\nSyntax:, Bit Test File, Skip if Clear = BTFSC. Syntax:, Bit Test File, Skip if Clear = f, b {,a}. Syntax:, Bit Test File, Skip if Clear = . Syntax:, Bit Test File, Skip if Clear = . Operands:, Bit Test File, Skip if Clear = 0 \uf0a3 f \uf0a3 255. Operands:, Bit Test File, Skip if Clear = . Operands:, Bit Test File, Skip if Clear = . Operands:, Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = 0 \uf0a3 b \uf0a3 7. , Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = a \uf0ce\uf020 [0,1]. , Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = . , Bit Test File, Skip if Clear = . Operation:, Bit Test File, Skip if Clear = skip if (f<b>) = 0. Operation:, Bit Test File, Skip if Clear = skip if",
    "PIC18F2420/2520/4420/4520\n(f<b>) = 0. Operation:, Bit Test File, Skip if Clear = . Operation:, Bit Test File, Skip if Clear = . Status Affected:, Bit Test File, Skip if Clear = None. Status Affected:, Bit Test File, Skip if Clear = . Status Affected:, Bit Test File, Skip if Clear = . Status Affected:, Bit Test File, Skip if Clear = . Encoding:, Bit Test File, Skip if Clear = 1011. Encoding:, Bit Test File, Skip if Clear = bbba. Encoding:, Bit Test File, Skip if Clear = ffff. Encoding:, Bit Test File, Skip if Clear = ffff\nDescription:\nIf bit 'b' in register 'f' is ' 0 ', then the next instruction is skipped. If bit 'b' is ' 0 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.",
    "PIC18F2420/2520/4420/4520\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh).\nSee Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Bit Test File, Skip if Set\nSyntax:\nBTFSS   f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b < 7\na \uf0ce\uf020 [0,1]\nOperation:\nskip if (f<b>) = 1\nStatus Affected:\nNone\nEncoding:\n1010\nbbba\nffff\nffff\nDescription:\nIf bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh).\nSee Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\nQ Cycle Activity:",
    "Bit Test File, Skip if Set\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation\nIf skip:\nQ1\nNo\nQ2\nNo\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSC FLAG, 1, 0\n:\n:\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress\n(TRUE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress\n(FALSE)\nQ4\nNo operation\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1\nDecode\nQ1\nNo\nQ2\nQ3\nQ4\nRead register 'f'\nQ2\nNo\nProcess\nData\nQ3\nNo operation\noperation operation\nNo operation\nQ4\nNo operation\nIf skip and followed by 2-word instruction:\nQ1\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nQ2\nQ3\nQ4\nExample:\nHERE\nFALSE\nTRUE\nBTFSS\n:\n:\nFLAG, 1, 0\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress\n(FALSE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress (TRUE)\nWords:\nCycles:\nIf skip:",
    "PIC18F2420/2520/4420/4520\nBTG",
    "Bit Toggle f\nSyntax:\nBTG f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b < 7\na\n\uf0ce\uf020\n[0,1]\nOperation:\n(f<b>)\n\uf0ae f<b>\nStatus Affected:\nNone\nEncoding:\n0111\nbbba\nffff\nffff\nDescription:\nBit 'b' in data memory location 'f' is inverted.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite\nregister 'f'\nExample:\nBTG\nPORTC,\n4, 0\nBefore Instruction:\nPORTC\n=\n0111 0101\n[75h]\nAfter Instruction:\nPORTC\n=\n0110 0101 [65h]",
    "Bit Toggle f\nSyntax:, BOV = Syntax:. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Operands:, BOV = Operands:. Operands:, Branch if Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Overflow = -128 \uf0a3 n \uf0a3 127. Operation:, BOV = Operation:. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, BOV = Status Affected:.",
    "Bit Toggle f\nStatus Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Encoding:, BOV = Encoding:. Encoding:, Branch if Overflow = 1110. Encoding:, Branch if Overflow = 1110. Encoding:, Branch if Overflow = 0100. Encoding:, Branch if Overflow = nnnn. Description:, BOV = Description:. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 +",
    "Bit Toggle f\n2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BOV = Words:. Words:, Branch if Overflow = 1. Words:, Branch if Overflow = 1. Words:, Branch if Overflow = 1. Words:, Branch if Overflow = 1. Cycles:, BOV = Cycles:. Cycles:, Branch if Overflow = 1(2). Cycles:, Branch if Overflow =",
    "Bit Toggle f\n1(2). Cycles:, Branch if Overflow = 1(2). Cycles:, Branch if Overflow = 1(2). Q Cycle Activity: If Jump:, BOV = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Overflow = . Q Cycle Activity: If Jump:, Branch if Overflow = . Q Cycle Activity: If Jump:, Branch if Overflow = . Q Cycle Activity: If Jump:, Branch if Overflow = . , BOV = Q1. , Branch if Overflow = Q2. , Branch if Overflow = . , Branch if Overflow = Q3. , Branch if Overflow = . , BOV = Decode. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Process Data. , Branch if Overflow = Process Data. , BOV = No operation. , Branch if Overflow = No operation. , Branch if Overflow = No operation. , Branch if Overflow = No operation. , Branch if Overflow = No operation. , BOV = Q1. , Branch if Overflow =",
    "Bit Toggle f\nQ2. , Branch if Overflow = Q2. , Branch if Overflow = Q3. , Branch if Overflow = Q3. , BOV = Decode. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Process Data. , Branch if Overflow = Process Data. Example:, BOV = Example:. Example:, Branch if Overflow = HERE. Example:, Branch if Overflow = HERE. Example:, Branch if Overflow = BOV. Example:, Branch if Overflow = Jump. , BOV = Before Instruction. , Branch if Overflow = Before Instruction. , Branch if Overflow = . , Branch if Overflow = . , Branch if Overflow = . , BOV = PC After Instruction If Overflow. , Branch if Overflow = . , Branch if Overflow = = = =. , Branch if Overflow = address (HERE) 1;. , Branch if Overflow = . , BOV = PC If Overflow =. , Branch if Overflow = PC If Overflow =. , Branch if Overflow = . , Branch if Overflow = address",
    "Bit Toggle f\n0;. , Branch if Overflow = (Jump). , BOV = PC. , Branch if Overflow = PC. , Branch if Overflow = =. , Branch if Overflow = address. , Branch if Overflow = (HERE",
    "PIC18F2420/2520/4420/4520\nSyntax:,  = Syntax:. Syntax:, Branch if Zero = BZ n. Syntax:, Branch if Zero = BZ n. Syntax:, Branch if Zero = BZ n. Syntax:, Branch if Zero = BZ n. Syntax:, Branch if Zero = BZ n. Operands:,  = Operands:. Operands:, Branch if Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Zero = -128 \uf0a3 n \uf0a3 127. Operation:,",
    "PIC18F2420/2520/4420/4520\n= Operation:. Operation:, Branch if Zero = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Zero = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Zero = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Zero = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Zero = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:,  = Status Affected:. Status Affected:, Branch if Zero = None. Status Affected:, Branch if Zero = None. Status Affected:, Branch if Zero = None. Status Affected:, Branch if Zero = None. Status Affected:, Branch if Zero = None. Encoding:,",
    "PIC18F2420/2520/4420/4520\n= Encoding:. Encoding:, Branch if Zero = 1110. Encoding:, Branch if Zero = 1110. Encoding:, Branch if Zero = 0000. Encoding:, Branch if Zero = nnnn. Encoding:, Branch if Zero = nnnn. Description:,",
    "PIC18F2420/2520/4420/4520\n= Description:. Description:, Branch if Zero = If the Zero bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Zero = If the Zero bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Zero = If the Zero bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Zero =",
    "PIC18F2420/2520/4420/4520\nIf the Zero bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Zero = If the Zero bit is ' 1 ', then the program will branch. The 2's complement number, '2n', is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:,",
    "PIC18F2420/2520/4420/4520\n= Words:. Words:, Branch if Zero = 1. Words:, Branch if Zero = 1. Words:, Branch if Zero = 1. Words:, Branch if Zero = 1. Words:, Branch if Zero = 1. Cycles:,  = Cycles:. Cycles:, Branch if Zero = 1(2). Cycles:, Branch if Zero = 1(2). Cycles:, Branch if Zero = 1(2). Cycles:, Branch if Zero = 1(2). Cycles:, Branch if Zero = 1(2). Q Cycle Activity: If Jump:,  = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Zero = . Q Cycle Activity: If Jump:, Branch if Zero = . Q Cycle Activity: If Jump:, Branch if Zero = . Q Cycle Activity: If Jump:, Branch if Zero = . Q Cycle Activity: If Jump:, Branch if Zero = . ,  = Q1. , Branch if Zero = Q2. , Branch if Zero = . , Branch if Zero = Q3. , Branch if Zero = . , Branch if Zero = Q4. ,",
    "PIC18F2420/2520/4420/4520\n= Decode. , Branch if Zero = Read literal 'n'. , Branch if Zero = Read literal 'n'. , Branch if Zero = Process Data. , Branch if Zero = Process Data. , Branch if Zero = Write to PC. ,  = No operation. , Branch if Zero = No operation. , Branch if Zero = No operation. , Branch if Zero = No operation. , Branch if Zero = No operation. , Branch if Zero = No operation. If No Jump:,  = If No Jump:. If No Jump:, Branch if Zero = . If No Jump:, Branch if Zero = . If No Jump:, Branch if Zero = . If No Jump:, Branch if Zero = . If No Jump:, Branch if Zero = . ,  = Q1. , Branch if Zero = Q2. , Branch if Zero = Q2. , Branch if Zero = Q3. , Branch if Zero = Q3. , Branch if Zero = Q4. ,",
    "PIC18F2420/2520/4420/4520\n= Decode. , Branch if Zero = Read literal 'n'. , Branch if Zero = Read literal 'n'. , Branch if Zero = Process Data. , Branch if Zero = Process Data. , Branch if Zero = No operation. Example:,  = Example:. Example:, Branch if Zero = HERE. Example:, Branch if Zero = HERE. Example:, Branch if Zero = BZ. Example:, Branch if Zero = Jump. Example:, Branch if Zero = . Before Instruction,  = PC. Before Instruction, Branch if Zero = =. Before Instruction, Branch if Zero = address. Before Instruction, Branch if Zero = . Before Instruction, Branch if Zero = (HERE). Before Instruction, Branch if Zero = . ,  = If Zero = PC. , Branch if Zero = If Zero = PC. , Branch if Zero = =. , Branch if Zero = 1; address 0;. , Branch if Zero = (Jump). , Branch if Zero = . ,",
    "PIC18F2420/2520/4420/4520\n= If Zero = PC =. , Branch if Zero = If Zero = PC =. , Branch if Zero = . , Branch if Zero = address. , Branch if Zero = (HERE. , Branch if Zero = + 2)",
    "Subroutine Call\nSyntax:\nCALL   k {,s}\nOperands:\n0 \uf0a3 k \uf0a3 1048575\ns \uf0ce\uf020 [0,1]\nOperation:\n(PC) + 4 \uf0ae TOS,\nk\n\uf0ae\nPC<20:1>;\nif s = 1 ,\n(W) \uf0ae WS,\n(STATUS) \uf0ae STATUSS,\n(BSR)\n\uf0ae\nBSRS\nStatus Affected:\nNone\nEncoding: 1st word (k<7:0>) 2nd word(k<19:8>)\n1110\n1111\n110s\nk19 kkk\nk7 kkk\nkkkk\nkkkk0\nkkkk8\nDescription:\nSubroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.\n2\n2\nWords:\nCycles:\nQ Cycle Activity:",
    "Subroutine Call\nDecode, Q2 = Read literal 'k'<7:0>,. Decode, Q3 = PUSHPCto stack. Decode, Q4 = Read literal 'k'<19:8>, Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:\nHERE\nCALL   THERE, 1\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nPC\n=\naddress\n(THERE)\nTOS\n=\naddress\n(HERE + 4)\nWS\n=\nW\nBSRS\n=\nBSR\nSTATUSS=\nSTATUS",
    "PIC18F2420/2520/4420/4520\nSyntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Encoding:, Clear f = 0110. Encoding:, Clear f = 101a. Encoding:, Clear f = ffff. Encoding:,",
    "PIC18F2420/2520/4420/4520\nClear f = ffff. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Clear f = Clears the contents of",
    "PIC18F2420/2520/4420/4520\nthe specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Clear f = 1. Words:, Clear f = 1. Words:, Clear f = 1.",
    "PIC18F2420/2520/4420/4520\nWords:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q1, Clear f = Q2. Q1, Clear f = Q2. Q1, Clear f = Q3. Q1, Clear f = Q4. Decode, Clear f = Read register 'f'. Decode, Clear f = Read register 'f'. Decode, Clear f = Process Data. Decode, Clear f = Write register 'f'. Example:, Clear f = CLRF. Example:, Clear f = . Example:, Clear f = FLAG_REG,. Example:, Clear f = 1. Before Instruction FLAG_REG, Clear f = =. Before Instruction FLAG_REG, Clear f = 5Ah. Before Instruction FLAG_REG, Clear f = . Before Instruction FLAG_REG, Clear f = . After Instruction FLAG_REG, Clear",
    "PIC18F2420/2520/4420/4520\nf = =. After Instruction FLAG_REG, Clear f = 00h. After Instruction FLAG_REG, Clear f = . After Instruction FLAG_REG, Clear f = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO,",
    "PIC18F2420/2520/4420/4520\nPD. Status Affected:, Clear Watchdog Timer = TO, PD. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0100. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Words:,",
    "PIC18F2420/2520/4420/4520\nClear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q3. Q1, Clear Watchdog Timer = . Q1, Clear Watchdog Timer = Q4. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = Data. Decode, Clear Watchdog Timer = Process. Decode, Clear Watchdog Timer = No operation\nExample:\nCLRWDT\nBefore Instruction\nWDT Counter\n=\n?\nAfter Instruction\nWDT Counter\n=\n00h",
    "PIC18F2420/2520/4420/4520\nWDT Postscaler\n=\n0\nTO\n=\n1\nPD\n=\n1",
    "Complement f\nSyntax:\nCOMF     f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na\n\uf0ce\n[0,1]\nOperation:\n(f)\n\uf0ae\ndest\nStatus Affected:\nN, Z\nEncoding:\n0001\n11da\nffff\nffff\nDescription:\nThe contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See\nSection 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination",
    "Example:\nCOMF\nREG, 0, 0\nBefore Instruction\nREG\n=\n13h\nAfter Instruction\nREG\n=\n13h\nW\n=\nECh",
    "Compare f with W, Skip if f = W\nSyntax:\nCPFSEQ    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) - (W),\nskip if (f) = (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n001a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.\nQ Cycle Activity:\nQ1\nDecode",
    "Compare f with W, Skip if f = W\nQ1\nNo\nQ2\nQ3\nQ4\nRead register 'f'\nQ2\nNo\nProcess\nData\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation\nNo\nNo operation\nNo\nNo operation\nNo\nNo operation\nQ4\nQ4\nNo operation\nNo operation\noperation operation\noperation\nExample:\nHERE     CPFSEQ REG, 0\nNEQUAL   :\nEQUAL    :\nBefore Instruction\nPC Address\n=\nHERE\nW\n=\n?\nREG\n=\n?\nAfter Instruction\nIf REG\n=\nW;\nPC\n=\nAddress (EQUAL)\nIf REG\n\uf0b9\nW;\nPC\n=\nAddress (NEQUAL)\nIf skip:",
    "Compare f with W, Skip if f > W\nSyntax:\nCPFSGT    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) - \uf020\uf028 W),\nskip if (f) > (W)\n(unsigned comparison)\nStatus Affected:",
    "None\nEncoding:\n0110\n010a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of the W by performing an unsigned subtraction. If the contents of 'f' are greater than the contents of WREG, then the fetched instruction is discarded and a NOP is executed instead, making this a\ntwo-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. If skip:, Q2 = . If skip:, Q3 = . If skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE      CPFSGT REG, 0\nNGREATER  :\nGREATER   :\nBefore Instruction\nPC\n=\nAddress\n(HERE)\nW\n= ?\nAfter Instruction\nIf REG\n\uf03e\nW;\nPC\n= Address (GREATER)\nIf REG\n\uf0a3 W;\nPC\n=\nAddress\n(NGREATER)",
    "Compare f with W, Skip if f < W\nSyntax:\nCPFSLT    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) - \uf020\uf028 W),\nskip if (f) < (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n000a\nffff\nffff\nDescription:\nCompares the contents of data memory\nlocation 'f' to the contents of W by performing an unsigned subtraction. If the contents of 'f' are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nNo\noperation\nIf skip:\nQ1\nQ2\nQ3\nQ4\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nExample:\nHERE    CPFSLT REG, 1\nNLESS   :\nLESS    :\nBefore Instruction\nPC\n=\nAddress (HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n<\nW;\nPC\n= Address (LESS)\nIf REG\n\uf0b3 W;\nPC\n= Address (NLESS)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9]",
    "PIC18F2420/2520/4420/4520\nor [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>;. , Decimal Adjust WRegister = If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \uf0ae W<7:4>; else, (W<7:4>) + DC \uf0ae W<7:4>. , Decimal Adjust WRegister = If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \uf0ae W<7:4>; else, (W<7:4>) + DC \uf0ae W<7:4>. , Decimal Adjust",
    "PIC18F2420/2520/4420/4520\nWRegister = If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \uf0ae W<7:4>; else, (W<7:4>) + DC \uf0ae W<7:4>. , Decimal Adjust WRegister = If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \uf0ae W<7:4>; else, (W<7:4>) + DC \uf0ae W<7:4>. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0111. Description:, Decimal Adjust WRegister = DAW adjusts the 8-bit",
    "PIC18F2420/2520/4420/4520\nvalue in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the 8-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the 8-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the 8-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust",
    "PIC18F2420/2520/4420/4520\nWRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Q Cycle Activity:, Decimal Adjust WRegister = Q Cycle Activity:. Q Cycle Activity:, Decimal Adjust WRegister = Q Cycle Activity:. Q Cycle Activity:, Decimal Adjust WRegister = Q Cycle Activity:. Q Cycle Activity:, Decimal Adjust WRegister = Q Cycle Activity:. Q1, Decimal Adjust WRegister = . Q1, Decimal Adjust WRegister = Q2 Q3. Q1, Decimal Adjust WRegister = . Q1, Decimal Adjust WRegister = Q4. , Decimal Adjust WRegister = Decode. , Decimal Adjust WRegister = Read register W. , Decimal Adjust WRegister = Process Data. , Decimal Adjust WRegister = Write W. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister =",
    "PIC18F2420/2520/4420/4520\nDAW. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister = DAW. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. , Decimal Adjust WRegister = W =. , Decimal Adjust WRegister = A5h. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = C. , Decimal Adjust WRegister = 0 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = DC. , Decimal Adjust WRegister = = =. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. , Decimal Adjust WRegister = W. , Decimal Adjust WRegister =",
    "PIC18F2420/2520/4420/4520\n= 05h. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = C. , Decimal Adjust WRegister = 1 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = = =. DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. , Decimal Adjust WRegister = W =. , Decimal Adjust WRegister = CEh. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = C.",
    "PIC18F2420/2520/4420/4520\n, Decimal Adjust WRegister = = 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = DC. , Decimal Adjust WRegister = = 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. , Decimal Adjust WRegister = W. , Decimal Adjust WRegister = = 34h. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = C DC. , Decimal Adjust WRegister = = 1 = 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Operands:, Decrement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Decrement f = (f) - 1 \uf0ae dest. Operation:, Decrement f = (f) - 1 \uf0ae dest. Operation:, Decrement f = (f) - 1 \uf0ae dest. Operation:, Decrement f = (f) - 1 \uf0ae",
    "PIC18F2420/2520/4420/4520\ndest. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Encoding:, Decrement f = 0000. Encoding:, Decrement f = 01da. Encoding:, Decrement f = ffff. Encoding:, Decrement f = ffff. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed",
    "PIC18F2420/2520/4420/4520\nLiteral Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register",
    "PIC18F2420/2520/4420/4520\n'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "PIC18F2420/2520/4420/4520\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Decrement f = 1. Words:, Decrement f = 1. Words:, Decrement f = 1. Words:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q1, Decrement f = . Q1, Decrement f = . Q1, Decrement f = . Q1, Decrement f = . , Decrement f = Q2. , Decrement f = Q2. , Decrement f = Q3. , Decrement f = Q4. Decode, Decrement f = Read register 'f'. Decode, Decrement f = Read register",
    "PIC18F2420/2520/4420/4520\n'f'. Decode, Decrement f = Process Data. Decode, Decrement f = Write to destination. Example:, Decrement f = DECF. Example:, Decrement f = CNT,. Example:, Decrement f = 1, 0. Example:, Decrement f = . Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. CNT Z, Decrement f = = = 0. CNT Z, Decrement f = 01h. CNT Z, Decrement f = . CNT Z, Decrement f = . After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. CNT Z, Decrement f = = =. CNT Z, Decrement f = 00h 1. CNT Z, Decrement f = . CNT",
    "PIC18F2420/2520/4420/4520\nZ, Decrement f = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Decrement f, Skip if 0 = DECFSZ. Syntax:, Decrement f, Skip if 0 = f {,d {,a}}. Syntax:, Decrement f, Skip if 0 = . Syntax:, Decrement f, Skip if 0 = . Operands:, Decrement f, Skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f, Skip if 0 = . Operands:, Decrement f, Skip if 0 = . Operands:, Decrement f, Skip if 0 = . Operation:, Decrement f, Skip if 0 = (f) - 1 \uf0ae dest, skip if result =. Operation:, Decrement f, Skip if 0 = 0. Operation:, Decrement f, Skip if 0 = . Operation:, Decrement f, Skip if 0 = . Status Affected:, Decrement f, Skip if 0 = None. Status Affected:, Decrement f, Skip if 0 = . Status Affected:, Decrement f, Skip if 0 =",
    "PIC18F2420/2520/4420/4520\n. Status Affected:, Decrement f, Skip if 0 = . Encoding:, Decrement f, Skip if 0 = 0010. Encoding:, Decrement f, Skip if 0 = 11da. Encoding:, Decrement f, Skip if 0 = ffff. Encoding:, Decrement f, Skip if 0 = ffff\nDescription:",
    "PIC18F2420/2520/4420/4520\nThe contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:, Q2.Read register 'f' = . If skip:, Q3.Process Data = . If skip:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. If skip and followed by instruction:, Q2.Read register 'f' = 2-word. If skip and followed by instruction:, Q3.Process Data = . If skip and followed by instruction:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. No operation,",
    "Q Cycle Activity:\nQ2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register 'f' = HERE. Example:, Q3.Process Data = DECFSZ GOTO. Example:, Q4.Write to destination = CNT, 1, 1 LOOP. , Q2.Read register 'f' = CONTINUE. , Q3.Process Data = . , Q4.Write to destination = . Before Instruction =, Q2.Read register 'f' = . Before Instruction =, Q3.Process Data = . Before Instruction =, Q4.Write to destination = . PC, Q2.Read register 'f' = Address. PC, Q3.Process Data = (HERE). PC, Q4.Write to destination = . After Instruction, Q2.Read register 'f' = . After Instruction, Q3.Process Data = . After Instruction, Q4.Write to destination = . CNT, Q2.Read register 'f' = CNT - 1. CNT, Q3.Process Data = . CNT,",
    "Q Cycle Activity:\nQ4.Write to destination = . If CNT, Q2.Read register 'f' = = = 0;. If CNT, Q3.Process Data = . If CNT, Q4.Write to destination = . PC If, Q2.Read register 'f' = = Address \uf0b9 0;. PC If, Q3.Process Data = (CONTINUE). PC If, Q4.Write to destination = . CNT PC, Q2.Read register 'f' = = Address. CNT PC, Q3.Process Data = (HERE + 2). CNT PC, Q4.Write to destination = ",
    "Q Cycle Activity:\nSyntax:, DCFSNZ = Syntax:. Syntax:, Decrement f, Skip if Not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if Not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if Not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if Not 0 = DCFSNZ f {,d {,a}}. Operands:, DCFSNZ = Operands:. Operands:, Decrement f, Skip if Not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f, Skip if Not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f, Skip if Not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f, Skip if Not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, DCFSNZ",
    "Q Cycle Activity:\n= Operation:. Operation:, Decrement f, Skip if Not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Decrement f, Skip if Not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Decrement f, Skip if Not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Decrement f, Skip if Not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Status Affected:, DCFSNZ = Status Affected:. Status Affected:, Decrement f, Skip if Not 0 = None. Status Affected:, Decrement f, Skip if Not 0 = None. Status Affected:, Decrement f, Skip if Not 0 = None. Status Affected:, Decrement f, Skip if Not 0 = None. Encoding:, DCFSNZ = Encoding:. Encoding:, Decrement f, Skip if Not 0 = 0100. Encoding:, Decrement f, Skip if Not 0 = 11da. Encoding:, Decrement f, Skip if Not 0 = ffff. Encoding:, Decrement f, Skip if",
    "Q Cycle Activity:\nNot 0 = ffff. Description:, DCFSNZ = Description:. Description:, Decrement f, Skip if Not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if Not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result",
    "Q Cycle Activity:\nis placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if Not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a",
    "Q Cycle Activity:\nNOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if Not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank",
    "Q Cycle Activity:\n(default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, DCFSNZ = Words:. Words:, Decrement f, Skip if Not 0 = 1. Words:, Decrement f, Skip if Not 0 = 1. Words:, Decrement f, Skip if Not 0 = 1. Words:, Decrement f, Skip if Not 0 = 1. Cycles:, DCFSNZ = Cycles:. Cycles:, Decrement f, Skip if Not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if Not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if Not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip",
    "Q Cycle Activity:\nif Not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Q1, DCFSNZ = . Q1, Decrement f, Skip if Not 0 = Q2. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q4. , DCFSNZ = Decode. , Decrement f, Skip if Not 0 = Read register 'f'. , Decrement f, Skip if Not 0 = Process Data. , Decrement f, Skip if Not 0 = Process Data. , Decrement f, Skip if Not 0 = Write to destination. If skip:, DCFSNZ = If skip:. If skip:, Decrement f, Skip if Not 0 = If skip:. If skip:, Decrement f, Skip if Not 0 = If skip:. If skip:, Decrement f, Skip if Not 0 = If skip:. If skip:, Decrement f, Skip if Not 0 = If skip:. Q1,",
    "Q Cycle Activity:\nDCFSNZ = . Q1, Decrement f, Skip if Not 0 = Q2. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q4. , DCFSNZ = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , DCFSNZ = operation. , Decrement f, Skip if Not 0 = operation. , Decrement f, Skip if Not 0 = operation. , Decrement f, Skip if Not 0 = operation. , Decrement f, Skip if Not 0 = operation. If skip and followed by 2-word instruction:, DCFSNZ = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if Not 0 = If skip and followed by 2-word instruction:. If skip and followed by",
    "Q Cycle Activity:\n2-word instruction:, Decrement f, Skip if Not 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if Not 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if Not 0 = If skip and followed by 2-word instruction:. Q1, DCFSNZ = . Q1, Decrement f, Skip if Not 0 = Q2. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q3. Q1, Decrement f, Skip if Not 0 = Q4. , DCFSNZ = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , Decrement f, Skip if Not 0 = No. , DCFSNZ = operation. , Decrement f, Skip if Not 0 = operation. , Decrement f, Skip if Not 0",
    "Q Cycle Activity:\n= operation. , Decrement f, Skip if Not 0 = operation. , Decrement f, Skip if Not 0 = operation. , DCFSNZ = No operation. , Decrement f, Skip if Not 0 = No operation. , Decrement f, Skip if Not 0 = No operation. , Decrement f, Skip if Not 0 = No operation. , Decrement f, Skip if Not 0 = No operation. , DCFSNZ = . , Decrement f, Skip if Not 0 = HERE ZERO. , Decrement f, Skip if Not 0 = DCFSNZ :. , Decrement f, Skip if Not 0 = TEMP,. , Decrement f, Skip if Not 0 = 1, 0. Example:, DCFSNZ = Example:. Example:, Decrement f, Skip if Not 0 = NZERO. Example:, Decrement f, Skip if Not 0 = :. Example:, Decrement f, Skip if Not 0 = . Example:, Decrement f, Skip if Not 0 = . Before, DCFSNZ = Before. Before, Decrement f, Skip if Not 0 = . Before,",
    "Q Cycle Activity:\nDecrement f, Skip if Not 0 = . Before, Decrement f, Skip if Not 0 = . Before, Decrement f, Skip if Not 0 = . Instruction, DCFSNZ = Instruction. Instruction, Decrement f, Skip if Not 0 = Instruction. Instruction, Decrement f, Skip if Not 0 = = ?. Instruction, Decrement f, Skip if Not 0 = . Instruction, Decrement f, Skip if Not 0 = . TEMP After Instruction, DCFSNZ = TEMP After Instruction. TEMP After Instruction, Decrement f, Skip if Not 0 = TEMP After Instruction. TEMP After Instruction, Decrement f, Skip if Not 0 = =. TEMP After Instruction, Decrement f, Skip if Not 0 = TEMP - 1,. TEMP After Instruction, Decrement f, Skip if Not 0 = . TEMP If TEMP PC, DCFSNZ = TEMP If TEMP PC. TEMP If TEMP PC, Decrement f, Skip if Not 0 = TEMP If TEMP PC. TEMP If TEMP PC, Decrement f, Skip if Not 0 = =. TEMP If",
    "Q Cycle Activity:\nTEMP PC, Decrement f, Skip if Not 0 = 0;. TEMP If TEMP PC, Decrement f, Skip if Not 0 = . If TEMP, DCFSNZ = If TEMP. If TEMP, Decrement f, Skip if Not 0 = If TEMP. If TEMP, Decrement f, Skip if Not 0 = = \uf0b9. If TEMP, Decrement f, Skip if Not 0 = Address 0;. If TEMP, Decrement f, Skip if Not 0 = (ZERO). PC, DCFSNZ = PC. PC, Decrement f, Skip if Not 0 = PC. PC, Decrement f, Skip if Not 0 = =. PC, Decrement f, Skip if Not 0 = Address. PC, Decrement f, Skip if Not 0 = (NZERO)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional",
    "PIC18F2420/2520/4420/4520\nBranch = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = 1111 k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = kkkk 0 kkkk 8. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere",
    "PIC18F2420/2520/4420/4520\nwithin entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q1, Unconditional Branch =",
    "PIC18F2420/2520/4420/4520\nQ2. Q1, Unconditional Branch = Q3. Q1, Unconditional Branch = Q4. Q1, Unconditional Branch = Q4. Decode, Unconditional Branch = Read literal 'k'<7:0>,. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = . Example:, Unconditional Branch = . After Instruction PC =, Unconditional Branch = Address (THERE). After Instruction PC =, Unconditional Branch = Address (THERE). After Instruction PC =, Unconditional Branch = . After Instruction",
    "PIC18F2420/2520/4420/4520\nPC =, Unconditional Branch = \nWords:\nCycles:",
    "PIC18F2420/2520/4420/4520\nSyntax:, Increment f = INCF. Syntax:, Increment f = f {,d {,a}}. Syntax:, Increment f = f {,d {,a}}. Syntax:, Increment f = f {,d {,a}}. Operands:, Increment f = 0 \uf0a3 f \uf0a3 255. Operands:, Increment f = 0 \uf0a3 f \uf0a3 255. Operands:, Increment f = 0 \uf0a3 f \uf0a3 255. Operands:, Increment f = 0 \uf0a3 f \uf0a3 255. , Increment f = d \uf0ce [0,1]. , Increment f = d \uf0ce [0,1]. , Increment f = d \uf0ce [0,1]. , Increment f = d \uf0ce [0,1]. , Increment f = a \uf0ce [0,1]. , Increment f = a \uf0ce [0,1]. , Increment f = a \uf0ce [0,1]. , Increment f = a \uf0ce [0,1]. Operation:, Increment f = (f) + 1 \uf0ae dest. Operation:,",
    "PIC18F2420/2520/4420/4520\nIncrement f = (f) + 1 \uf0ae dest. Operation:, Increment f = (f) + 1 \uf0ae dest. Operation:, Increment f = (f) + 1 \uf0ae dest. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Encoding:, Increment f = 0010. Encoding:, Increment f = 10da. Encoding:, Increment f = ffff. Encoding:, Increment f = ffff\nDescription:",
    "PIC18F2420/2520/4420/4520\nThe contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nINCF\nCNT, 1, 0\nBefore Instruction\nCNT\n=\nFFh\nZ\n=\n0\nC\n=\n?\nDC\n=\n?\nAfter Instruction\nCNT\n=\n00h\nZ\n=\n1\nC\n=\n1\nDC\n=\n1",
    "Increment f, Skip if 0\nSyntax:, 1 = Syntax:. Syntax:, 2 = INCFSZ f {,d {,a}}. Syntax:, 3 = INCFSZ f {,d {,a}}. Syntax:, 4 = INCFSZ f {,d {,a}}. Operands:, 1 = Operands:. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, 1 = Operation:. Operation:, 2 = (f) + 1 \uf0ae dest, skip if result = 0. Operation:, 3 = (f) + 1 \uf0ae dest, skip if result = 0. Operation:, 4 = (f) + 1 \uf0ae dest, skip if result = 0. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = Encoding:. Encoding:,",
    "Increment f, Skip if 0\n2 = 0011. Encoding:, 3 = 11da ffff. Encoding:, 4 = ffff. Description:, 1 = Description:. Description:, 2 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details. 1. Description:, 3 = The contents of register 'f' are incremented. If 'd' is ' 0",
    "Increment f, Skip if 0\n', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details. 1. Description:, 4 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP",
    "Increment f, Skip if 0\nis executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details. 1. Words:, 1 = Words:. Words:, 2 = . Words:, 3 = . Words:, 4 = . Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = Note: 3 cycles if skip and followed. Cycles:, 4 = Note: 3 cycles if skip and followed. Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. Q1, 1 = . Q1, 2 = Q2.",
    "Increment f, Skip if 0\nQ1, 3 = Q3. Q1, 4 = Q4. , 1 = Decode. , 2 = Read register 'f'. , 3 = Process Data. , 4 = Write to destination. If skip:, 1 = If skip:. If skip:, 2 = . If skip:, 3 = . If skip:, 4 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. No, 1 = operation. No, 2 = No operation. No, 3 = No operation. No, 4 = No operation. If skip and followed by 2-word instruction:, 1 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, 2 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, 3 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, 4 = If skip and followed by 2-word instruction:. Q1, 1 = . Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4",
    "Increment f, Skip if 0\n= Q4. No operation, 1 = . No operation, 2 = No operation. No operation, 3 = No operation. No operation, 4 = No operation. operation, 1 = No. operation, 2 = No operation. operation, 3 = No operation. operation, 4 = No operation. Example:, 1 = Example:. Example:, 2 = HERE NZERO ZERO. Example:, 3 = INCFSZ : :. Example:, 4 = CNT, 1, 0. Before Instruction, 1 = Before Instruction. Before Instruction, 2 = . Before Instruction, 3 = . Before Instruction, 4 = . PC = Address After Instruction, 1 = PC = Address After Instruction. PC = Address After Instruction, 2 = PC = Address After Instruction. PC = Address After Instruction, 3 = PC = Address After Instruction. PC = Address After Instruction, 4 = PC = Address After Instruction. CNT, 1 = =. CNT, 2 = . CNT, 3 = (HERE). CNT, 4 = . CNT + 1, 1 = CNT + 1. CNT + 1, 2 = CNT + 1. CNT + 1, 3 = CNT + 1.",
    "Increment f, Skip if 0\nCNT + 1, 4 = CNT + 1. If CNT PC, 1 = = =. If CNT PC, 2 = 0; Address. If CNT PC, 3 = (ZERO). If CNT PC, 4 = . If CNT PC, 1 = \uf0b9 =. If CNT PC, 2 = 0; Address. If CNT PC, 3 = (NZERO). If CNT PC, 4 = ",
    "Increment f, Skip if Not 0\nSyntax:\nINFSNZ    f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\nOperation:\n(f) + 1 \uf0ae dest,\nskip if result \uf0b9 0\nStatus Affected:",
    "None\nEncoding:\n0100\n10da\nffff\nffff\nDescription:\nThe contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed\nLiteral Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:, Q2.Read register 'f' = . If skip:, Q3.Process Data = . If skip:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. skip and followed by 2-word, Q2.Read register 'f' = skip and followed by 2-word. skip and followed by 2-word, Q3.Process Data = instruction:. skip and followed by 2-word, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination =",
    "Q Cycle Activity:\nNo operation. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation\nNZERO\nZERO\nAfter Instruction, = = After Instruction. After Instruction, Address = . After Instruction, (HERE) = . REG, = = =. REG, Address = REG + 1. REG, (HERE) = . If REG, = = \uf0b9. If REG, Address = 0;. If REG, (HERE) = . PC, = = =. PC, Address = Address. PC, (HERE) = (NZERO). If REG, = = =. If REG, Address = 0;. If REG, (HERE) = . PC, = = =. PC, Address = Address. PC, (HERE) = (ZERO)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Operands:, Inclusive OR Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR Literal with W = 0 \uf0a3 k \uf0a3 255. Operation:, Inclusive OR Literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR Literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR Literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR Literal with W = (W) .OR. k \uf0ae W. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z.",
    "PIC18F2420/2520/4420/4520\nEncoding:, Inclusive OR Literal with W = 0000. Encoding:, Inclusive OR Literal with W = 1001. Encoding:, Inclusive OR Literal with W = kkkk. Encoding:, Inclusive OR Literal with W = kkkk. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the 8-bit literal 'k'. The result is placed in W.. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR",
    "PIC18F2420/2520/4420/4520\nLiteral with W = 1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q1, Inclusive OR Literal with W = Q2. Q1, Inclusive OR Literal with W = Q3. Q1, Inclusive OR Literal with W = Q3. Q1, Inclusive OR Literal with W = Q4. Decode, Inclusive OR Literal with W = Read literal 'k'. Decode, Inclusive OR Literal with W = Process Data. Decode, Inclusive OR Literal with W = Process Data. Decode, Inclusive OR Literal with W = Write to W. Example:, Inclusive OR Literal with W = IORLW. Example:, Inclusive OR Literal with W = 35h. Example:, Inclusive OR Literal with W = 35h. Example:, Inclusive OR Literal with W = 35h. Before",
    "PIC18F2420/2520/4420/4520\nInstruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. W, Inclusive OR Literal with W = 9Ah. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. W, Inclusive OR Literal with W = BFh. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Inclusive OR Wwith f = IORWF. Syntax:, Inclusive OR Wwith f = f {,d {,a}}. Syntax:, Inclusive OR Wwith f = . Syntax:, Inclusive OR Wwith f = . Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Status",
    "PIC18F2420/2520/4420/4520\nAffected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Encoding:, Inclusive OR Wwith f = 0001. Encoding:, Inclusive OR Wwith f = 00da. Encoding:, Inclusive OR Wwith f = ffff. Encoding:, Inclusive OR Wwith f = ffff. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "PIC18F2420/2520/4420/4520\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the",
    "PIC18F2420/2520/4420/4520\nAccess Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for",
    "PIC18F2420/2520/4420/4520\ndetails.. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Q Cycle Activity: Q1, Inclusive OR Wwith f = Q2. Q Cycle Activity: Q1, Inclusive OR Wwith f = Q3. Q Cycle Activity: Q1, Inclusive OR Wwith f = . Q Cycle Activity: Q1, Inclusive OR Wwith f = Q4. Decode, Inclusive OR Wwith f = . Decode, Inclusive OR Wwith f = Read register 'f'. Decode, Inclusive OR Wwith f = Process Data. Decode, Inclusive OR Wwith f = Write to destination",
    "Example:\nIORWF  RESULT, 0, 1\nBefore Instruction\nRESULT =\n13h\nW\n=\n91h\nAfter Instruction\nRESULT =\n13h\nW\n=\n93h",
    "PIC18F2420/2520/4420/4520\nSyntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Encoding:, Load FSR = 1110 1111. Encoding:, Load FSR = 1110 0000. Encoding:, Load FSR",
    "PIC18F2420/2520/4420/4520\n= 00ff k 7 kkk. Encoding:, Load FSR = k 11 kkk kkkk. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle",
    "PIC18F2420/2520/4420/4520\nActivity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q1, Load FSR = Q2. Q1, Load FSR = Q3. Q1, Load FSR = . Q1, Load FSR = Q4. Decode, Load FSR = Read literal 'k' MSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' MSB to FSRfH. Decode, Load FSR = Read literal 'k' LSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' to FSRfL\nExample:\nLFSR 2, 3ABh\nAfter Instruction\nFSR2H FSR2L\n=\n03h\n=\nABh",
    "PIC18F2420/2520/4420/4520\nSyntax:, Move f = MOVF. Syntax:, Move f = f {,d {,a}}. Syntax:, Move f = f {,d {,a}}. Syntax:, Move f = f {,d {,a}}. Operands:, Move f = 0 \uf0a3 f \uf0a3 255. Operands:, Move f = 0 \uf0a3 f \uf0a3 255. Operands:, Move f = 0 \uf0a3 f \uf0a3 255. Operands:, Move f = 0 \uf0a3 f \uf0a3 255. , Move f = d \uf0ce [0,1]. , Move f = d \uf0ce [0,1]. , Move f = d \uf0ce [0,1]. , Move f = d \uf0ce [0,1]. , Move f = a \uf0ce [0,1]. , Move f = a \uf0ce [0,1]. , Move f = a \uf0ce [0,1]. , Move f = a \uf0ce [0,1]. Operation:, Move f = f \uf0ae dest. Operation:, Move f = f \uf0ae dest. Operation:, Move f = f \uf0ae dest. Operation:, Move f = f \uf0ae dest. Status Affected:, Move f = N, Z. Status",
    "PIC18F2420/2520/4420/4520\nAffected:, Move f = N, Z. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Encoding:, Move f = 0101. Encoding:, Move f = 00da. Encoding:, Move f = ffff. Encoding:, Move f = ffff\nDescription:\nThe contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.",
    "PIC18F2420/2520/4420/4520\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write W\nBefore Instruction, MOVF = . Before Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = FFh. After Instruction, MOVF = . After Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = 22h",
    "PIC18F2420/2520/4420/4520\nMOVFF, 1 = Move f to f. MOVFF, 2 = Move f to f. MOVFF, 3 = Move f to f. MOVFF, 4 = Move f to f. Syntax:, 1 = MOVFF f s ,f d. Syntax:, 2 = MOVFF f s ,f d. Syntax:, 3 = MOVFF f s ,f d. Syntax:, 4 = MOVFF f s ,f d. Operands:, 1 = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operands:, 2 = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operands:, 3 = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operands:, 4 = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operation:, 1 = (f s ) \uf0ae f d. Operation:, 2 = (f s ) \uf0ae f d. Operation:, 3 = (f s ) \uf0ae f d. Operation:, 4 = (f s ) \uf0ae f d. Status Affected:, 1 = None. Status Affected:, 2 = None. Status",
    "PIC18F2420/2520/4420/4520\nAffected:, 3 = None. Status Affected:, 4 = None. Encoding: 1st word, 1 = . Encoding: 1st word, 2 = . Encoding: 1st word, 3 = ffff. Encoding: 1st word, 4 = . (source) 2nd word (destin.), 1 = 1100 1111. (source) 2nd word (destin.), 2 = ffff ffff. (source) 2nd word (destin.), 3 = ffff ffff. (source) 2nd word (destin.), 4 = . Description:, 1 = The contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port). The MOVFF instruction cannot use the PCL,",
    "PIC18F2420/2520/4420/4520\nTOSU, TOSH or TOSL as the destination register.. Description:, 2 = The contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port). The MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.. Description:, 3 = The contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF",
    "PIC18F2420/2520/4420/4520\nis particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port). The MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.. Description:, 4 = The contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port). The MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.. Words:, 1 = 2. Words:, 2 = 2. Words:, 3 = 2. Words:, 4 = 2. Cycles:, 1 = 2 (3). Cycles:, 2 = 2 (3).",
    "PIC18F2420/2520/4420/4520\nCycles:, 3 = 2 (3). Cycles:, 4 = 2 (3). Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = Q4. Q1, 4 = . Decode, 1 = Read register 'f' (src). Decode, 2 = Process Data. Decode, 3 = No operation. Decode, 4 = . Decode, 1 = No operation No dummy read. Decode, 2 = No operation. Decode, 3 = Write register 'f' (dest). Decode, 4 = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Operands:, Move Literal to Low Nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operands:, Move Literal to Low Nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operands:, Move Literal to Low Nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operation:, Move Literal to Low Nibble in BSR = k \uf0ae BSR. Operation:, Move Literal to Low Nibble in BSR = k \uf0ae BSR. Operation:, Move Literal to Low Nibble in BSR = k \uf0ae BSR. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Encoding:, Move Literal to Low Nibble in BSR = 0000. Encoding:, Move Literal to Low Nibble in BSR = 0001.",
    "PIC18F2420/2520/4420/4520\nEncoding:, Move Literal to Low Nibble in BSR = kkkk kkkk. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal 'k' is loaded into the Bank Select (BSR) Register. The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal 'k' is loaded into the Bank Select (BSR) Register. The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal 'k' is loaded into the Bank Select (BSR) Register. The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble",
    "PIC18F2420/2520/4420/4520\nin BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q1, Move Literal to Low Nibble in BSR = Q2. Q1, Move Literal to Low Nibble in BSR = Q3. Q1, Move Literal to Low Nibble in BSR = Q4. Decode, Move Literal to Low Nibble in BSR = Read literal 'k'. Decode, Move Literal to Low Nibble in BSR = Process Data. Decode, Move Literal to Low Nibble in BSR = Write literal 'k' to BSR. Example:, Move Literal to Low Nibble in BSR = MOVLB. Example:, Move Literal to Low Nibble in BSR = 5. Example:, Move Literal to",
    "PIC18F2420/2520/4420/4520\nLow Nibble in BSR = . Before Instruction BSR Register After Instruction BSR Register, Move Literal to Low Nibble in BSR = = 02h =. Before Instruction BSR Register After Instruction BSR Register, Move Literal to Low Nibble in BSR = 05h. Before Instruction BSR Register After Instruction BSR Register, Move Literal to Low Nibble in BSR = \nExample:\nMOVFF   REG1, REG2\nBefore Instruction\nREG1 REG2\n=\n33h\n=\n11h\nAfter Instruction\nREG1\n=\n33h\nREG2\n=\n33h",
    "PIC18F2420/2520/4420/4520\nSyntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Operands:, Move Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move Literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, Move Literal to W = k \uf0ae W. Operation:, Move Literal to W = k \uf0ae W. Operation:, Move Literal to W = k \uf0ae W. Operation:, Move Literal to W = k \uf0ae W. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Encoding:, Move Literal to W = 0000. Encoding:, Move Literal to W = 1110. Encoding:, Move Literal to W = kkkk. Encoding:, Move Literal to W = kkkk.",
    "PIC18F2420/2520/4420/4520\nDescription:, Move Literal to W = The 8-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The 8-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The 8-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The 8-bit literal 'k' is loaded into W.. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q1, Move Literal to W = Q2. Q1,",
    "PIC18F2420/2520/4420/4520\nMove Literal to W = Q3. Q1, Move Literal to W = Q4. Q1, Move Literal to W = Q4. Decode, Move Literal to W = Read literal 'k'. Decode, Move Literal to W = Process Data. Decode, Move Literal to W = Write to W. Decode, Move Literal to W = Write to W. Example:, Move Literal to W = MOVLW. Example:, Move Literal to W = 5Ah. Example:, Move Literal to W = . Example:, Move Literal to W = . After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction",
    "PIC18F2420/2520/4420/4520\nSyntax:, Move Wto f = MOVWF. Syntax:, Move Wto f = f {,a}. Syntax:, Move Wto f = . Syntax:, Move Wto f = . Operands:, Move Wto f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Move Wto f = . Operands:, Move Wto f = . Operands:, Move Wto f = . Operation:, Move Wto f = (W) \uf0ae f. Operation:, Move Wto f = . Operation:, Move Wto f = . Operation:, Move Wto f = . Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Encoding:, Move Wto f = 0110. Encoding:, Move Wto f = 111a. Encoding:, Move Wto f = ffff. Encoding:, Move Wto f = ffff. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can",
    "PIC18F2420/2520/4420/4520\nbe anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:,",
    "PIC18F2420/2520/4420/4520\nMove Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "PIC18F2420/2520/4420/4520\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Move Wto f = 1. Words:, Move Wto f = . Words:, Move Wto f = . Words:, Move Wto f = . Cycles:, Move Wto f = 1. Cycles:, Move Wto f = . Cycles:, Move Wto f = . Cycles:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q1, Move Wto f = Q2. Q1, Move Wto f = Q3. Q1, Move Wto f = . Q1, Move Wto f = Q4. Decode, Move Wto f = Read register 'f'. Decode, Move Wto f = Process Data. Decode, Move Wto f = . Decode, Move Wto f = Write register 'f'. Example:, Move Wto f = MOVWF.",
    "PIC18F2420/2520/4420/4520\nExample:, Move Wto f = REG, 0. Example:, Move Wto f = . Example:, Move Wto f = . Before Instruction, Move Wto f = Before Instruction. Before Instruction, Move Wto f = . Before Instruction, Move Wto f = . Before Instruction, Move Wto f = . W, Move Wto f = = 4Fh. W, Move Wto f = . W, Move Wto f = . W, Move Wto f = . REG, Move Wto f = = FFh. REG, Move Wto f = . REG, Move Wto f = . REG, Move Wto f = . After Instruction, Move Wto f = After Instruction. After Instruction, Move Wto f = . After Instruction, Move Wto f = . After Instruction, Move Wto f = . W, Move Wto f = = 4Fh 4Fh. W, Move Wto f = . W, Move Wto f = . W, Move Wto f = . REG, Move Wto f = =. REG, Move Wto f = . REG, Move Wto f = .",
    "PIC18F2420/2520/4420/4520\nREG, Move Wto f = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Multiply Literal with W = MULLW. Syntax:, Multiply Literal with W = k. Syntax:, Multiply Literal with W = . Operands:, Multiply Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Multiply Literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Multiply Literal with W = 0 \uf0a3 k \uf0a3 255. Operation:, Multiply Literal with W = (W) x k \uf0ae PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \uf0ae PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \uf0ae PRODH:PRODL. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Encoding:, Multiply Literal with W = 0000. Encoding:, Multiply Literal with W = 1101 kkkk. Encoding:, Multiply Literal with W = kkkk. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The",
    "PIC18F2420/2520/4420/4520\n16-bit result is placed in the PRODH:PRODL register pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected.. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in the PRODH:PRODL register pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected.. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in the PRODH:PRODL register pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected.. Words:, Multiply Literal with W",
    "PIC18F2420/2520/4420/4520\n= 1. Words:, Multiply Literal with W = 1. Words:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Q Cycle Activity:, Multiply Literal with W = Q Cycle Activity:. Q Cycle Activity:, Multiply Literal with W = Q Cycle Activity:. Q Cycle Activity:, Multiply Literal with W = Q Cycle Activity:. Q1, Multiply Literal with W = Q2. Q1, Multiply Literal with W = Q3. Q1, Multiply Literal with W = Q4. Decode, Multiply Literal with W = Read literal 'k'. Decode, Multiply Literal with W = Process Data. Decode, Multiply Literal with W = Write registers PRODH: PRODL",
    "Example:\nMULLW   0C4h\nBefore Instruction\nW\n=\nE2h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nE2h\nPRODH\n=\nADh\nPRODL\n=\n08h",
    "Example:\nSyntax:, Multiply Wwith f = MULWF. Syntax:, Multiply Wwith f = f {,a}. Syntax:, Multiply Wwith f = . Syntax:, Multiply Wwith f = . Operands:, Multiply Wwith f = 0 \uf0a3 f \uf0a3 255. Operands:, Multiply Wwith f = . Operands:, Multiply Wwith f = . Operands:, Multiply Wwith f = . , Multiply Wwith f = a \uf0ce [0,1]. , Multiply Wwith f = . , Multiply Wwith f = . , Multiply Wwith f = . Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Status Affected:, Multiply Wwith f = None. Status Affected:, Multiply Wwith f = . Status Affected:, Multiply Wwith f",
    "Example:\n= . Status Affected:, Multiply Wwith f = . Encoding:, Multiply Wwith f = 0000. Encoding:, Multiply Wwith f = 001a. Encoding:, Multiply Wwith f = ffff. Encoding:, Multiply Wwith f = ffff\nDescription:\nAn unsigned multiplication is carried out between the contents of W and the register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both W and 'f' are unchanged.\nNone of the Status flags are affected.\nNote that neither Overflow nor Carry is possible in this operation. A zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ2\nQ3\nRead register 'f'",
    "Example:\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nDecode\nExample:\nProcess Data\nMULWF   REG, 1\nBefore Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n8Ah\nPRODL\n=\n94h\nQ4\nWrite registers\nPRODH:\nPRODL",
    "PIC18F2420/2520/4420/4520\nSyntax:, Negate f = NEGF. Syntax:, Negate f = f {,a}. Syntax:, Negate f = f {,a}. Syntax:, Negate f = f {,a}. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operation:, Negate f = ( f ) + 1 \uf0ae f. Operation:, Negate f = ( f ) + 1 \uf0ae f. Operation:, Negate f = ( f ) + 1 \uf0ae f. Operation:, Negate f = ( f ) + 1 \uf0ae f. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f =",
    "PIC18F2420/2520/4420/4520\nN, OV, C, DC, Z. Encoding:, Negate f = 0110. Encoding:, Negate f = 110a. Encoding:, Negate f = ffff. Encoding:, Negate f = ffff. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the",
    "PIC18F2420/2520/4420/4520\nBSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If",
    "PIC18F2420/2520/4420/4520\n'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Negate f = 1. Words:, Negate f = 1. Words:, Negate f = 1. Words:, Negate f = 1. Cycles:, Negate f = 1. Cycles:, Negate f = 1. Cycles:, Negate f = 1. Cycles:, Negate f = 1. Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = . Q1, Negate f = Q2. Q1, Negate f = Q2. Q1, Negate f = Q3.",
    "PIC18F2420/2520/4420/4520\nQ1, Negate f = Q4. Decode, Negate f = Read register 'f'. Decode, Negate f = Read register 'f'. Decode, Negate f = Process Data. Decode, Negate f = Write register 'f'. Example:, Negate f = NEGF. Example:, Negate f = REG, 1. Example:, Negate f = REG, 1. Example:, Negate f = REG, 1. Before Instruction REG =, Negate f = 0011. Before Instruction REG =, Negate f = 1010. Before Instruction REG =, Negate f = [3Ah]. Before Instruction REG =, Negate f = . After Instruction REG =, Negate f = 1100. After Instruction REG =, Negate f = 0110. After Instruction REG =, Negate f = [C6h]. After Instruction REG =, Negate f = ",
    "No Operation\nSyntax:, 1 = NOP. Syntax:, 2 = NOP. Syntax:, 3 = NOP. Syntax:, 4 = NOP. Operands:, 1 = None. Operands:, 2 = None. Operands:, 3 = None. Operands:, 4 = None. Operation:, 1 = No operation. Operation:, 2 = No operation. Operation:, 3 = No operation. Operation:, 4 = No operation. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 0000 1111. Encoding:, 2 = 0000 xxxx. Encoding:, 3 = 0000 xxxx. Encoding:, 4 = 0000 xxxx. Description:, 1 = No operation.. Description:, 2 = No operation.. Description:, 3 = No operation.. Description:, 4 = No operation.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1.",
    "No Operation\nCycles:, 4 = 1. Q Cycle Activity: Q1, 1 = Q2. Q Cycle Activity: Q1, 2 = Q3. Q Cycle Activity: Q1, 3 = Q3. Q Cycle Activity: Q1, 4 = Q4. Decode, 1 = No operation. Decode, 2 = No operation. Decode, 3 = No operation. Decode, 4 = No operation\nExample:\nNone.",
    "Pop Top of Return Stack\nSyntax:\nPOP\nOperands:\nNone\nOperation:\n(TOS) \uf0ae bit bucket\nStatus Affected:\nNone\nEncoding:\n0000\n0000\n0000\n0110\nDescription:\nThe TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nNo\noperation\nPOP TOS\nvalue\nNo\noperation\nExample:\nPOP GOTO\nNEW\nBefore Instruction\nTOS Stack (1 level down)\n=\n0031A2h\n=\n014332h\nAfter Instruction\nTOS PC\n=\n014332h\n=\nNEW",
    "Pop Top of Return Stack\nSyntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return",
    "Pop Top of Return Stack\nStack = 0101. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1.",
    "Pop Top of Return Stack\nWords:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q1, Push Top of Return Stack = Q2. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q4. Decode, Push Top of Return Stack = PUSH PC + 2 onto return stack. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:,",
    "Pop Top of Return Stack\nPush Top of Return Stack = PUSH. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack = =. TOS, Push Top of Return Stack = 345Ah. TOS, Push Top of Return Stack = . PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack = 0124h. PC, Push Top of Return Stack = . After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack = 0126h. PC, Push Top of Return Stack = . TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack",
    "Pop Top of Return Stack\n= =. TOS, Push Top of Return Stack = 0126h. TOS, Push Top of Return Stack = . Stack (1 level down), Push Top of Return Stack = Stack (1 level down). Stack (1 level down), Push Top of Return Stack = =. Stack (1 level down), Push Top of Return Stack = 345Ah. Stack (1 level down), Push Top of Return Stack = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Encoding:, Relative Call = 1101. Encoding:, Relative Call",
    "PIC18F2420/2520/4420/4520\n= 1nnn. Encoding:, Relative Call = nnnn. Encoding:, Relative Call = nnnn. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack.",
    "PIC18F2420/2520/4420/4520\nThen, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call =",
    "PIC18F2420/2520/4420/4520\n. Q1, Relative Call = Q2. Q1, Relative Call = Q3. Q1, Relative Call = . Q1, Relative Call = Q4. Decode, Relative Call = Read literal 'n' PUSHPCto stack. Decode, Relative Call = Process Data. Decode, Relative Call = . Decode, Relative Call = Write to PC. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = . No operation, Relative Call = No operation",
    "PIC18F2420/2520/4420/4520\nSyntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Encoding:, Reset = 0000. Encoding:, Reset = 0000. Encoding:, Reset = 1111. Encoding:, Reset = 1111. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in",
    "PIC18F2420/2520/4420/4520\nsoftware.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q1, Reset = Q2. Q1, Reset = Q3. Q1, Reset = Q4. Q1, Reset = Q4. Decode, Reset = Start Reset. Decode, Reset = No operation. Decode, Reset = No operation. Decode, Reset = No operation. Example:, Reset = RESET. Example:, Reset = RESET. Example:, Reset = RESET. Example:, Reset = RESET. After Instruction Registers",
    "PIC18F2420/2520/4420/4520\n= Flags* =, Reset = Reset Value. After Instruction Registers = Flags* =, Reset = Reset Value. After Instruction Registers = Flags* =, Reset = Reset Value. After Instruction Registers = Flags* =, Reset = Reset Value\nExample:\nHERE\nRCALL Jump\nBefore Instruction\nPC\n=\nAddress\n(HERE)\nAfter Instruction\nPC =\nAddress\n(Jump)\nTOS=\nAddress\n(HERE + 2)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or",
    "PIC18F2420/2520/4420/4520\nPEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0001. Encoding:, Return from Interrupt = 000s. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting",
    "PIC18F2420/2520/4420/4520\neither the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are",
    "PIC18F2420/2520/4420/4520\nloaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return",
    "PIC18F2420/2520/4420/4520\nfrom Interrupt = . Q1, Return from Interrupt = Q2. Q1, Return from Interrupt = Q3. Q1, Return from Interrupt = . Q1, Return from Interrupt = Q4. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = No. Decode, Return from Interrupt = operation. Decode, Return from Interrupt = POP PC from stack Set GIEH or GIEL. No operation, Return from Interrupt = . No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation\nExample:\nRETFIE  1\nAfter Interrupt\nPC\n=\nTOS\nW\n=\nWS\nBSR\n=\nBSRS\nSTATUS\n=\nSTATUSS\nGIE/GIEH, PEIE/GIEL\n=\n1",
    "PIC18F2420/2520/4420/4520\nSyntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Operands:, Return Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return Literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return Literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, Return Literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W",
    "PIC18F2420/2520/4420/4520\n= None. Status Affected:, Return Literal to W = None. Encoding:, Return Literal to W = 0000. Encoding:, Return Literal to W = 1100. Encoding:, Return Literal to W = kkkk. Encoding:, Return Literal to W = kkkk. Description:, Return Literal to W = Wis loaded with the 8-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the 8-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the 8-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the 8-bit literal 'k'. The program counter is loaded from the top of",
    "PIC18F2420/2520/4420/4520\nthe stack (the return address). The high address latch (PCLATH) remains unchanged.. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q1, Return Literal to W = Q2. Q1, Return Literal to W = Q3. Q1, Return Literal to W = . Q1, Return Literal to W = Q4. Decode, Return Literal to W = Read literal 'k'. Decode, Return Literal to W = Process Data. Decode, Return Literal to W = . Decode, Return Literal",
    "PIC18F2420/2520/4420/4520\nto W = POP PC from stack, Write to W. No operation, Return Literal to W = No operation. No operation, Return Literal to W = No operation. No operation, Return Literal to W = . No operation, Return Literal to W = No operation",
    "Example:\nCALL TABLE\n; W contains table\n; offset value\n; W now has\n; table value\n:\nTABLE\nADDWF PCL\n; W = offset\nRETLW k0\n; Begin table\nRETLW k1\n;\n:\n:\nRETLW kn\n; End of table\nBefore Instruction\nW\n= 07h\nAfter Instruction\nW\n=\nvalue of kn",
    "PIC18F2420/2520/4420/4520\nSyntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae",
    "PIC18F2420/2520/4420/4520\nBSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0001. Encoding:, Return from Subroutine = 001s. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Subroutine = Return from",
    "PIC18F2420/2520/4420/4520\nsubroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and",
    "PIC18F2420/2520/4420/4520\nBSR. If 's' = 0 , no update of these registers occurs (default).. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q1, Return from Subroutine = Q2. Q1, Return from Subroutine = Q3. Q1, Return from Subroutine = . Q1, Return from Subroutine = Q4. Decode, Return from Subroutine = No. Decode, Return from Subroutine = operation.",
    "PIC18F2420/2520/4420/4520\nDecode, Return from Subroutine = Process Data. Decode, Return from Subroutine = POP PC from stack. , Return from Subroutine = No operation. , Return from Subroutine = No operation. , Return from Subroutine = No operation. , Return from Subroutine = No operation\nExample:\nRETURN\nAfter Instruction:\nPC = TOS",
    "PIC18F2420/2520/4420/4520\nSyntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Operands:, Rotate Left f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1].",
    "PIC18F2420/2520/4420/4520\nOperation:, Rotate Left f through Carry = (f<n>) \uf0ae dest<n + 1>, (f<7>) \uf0ae C, (C) \uf0ae dest< 0 >. Operation:, Rotate Left f through Carry = (f<n>) \uf0ae dest<n + 1>, (f<7>) \uf0ae C, (C) \uf0ae dest< 0 >. Operation:, Rotate Left f through Carry = (f<n>) \uf0ae dest<n + 1>, (f<7>) \uf0ae C, (C) \uf0ae dest< 0 >. Operation:, Rotate Left f through Carry = (f<n>) \uf0ae dest<n + 1>, (f<7>) \uf0ae C, (C) \uf0ae dest< 0 >. Operation:, Rotate Left f through Carry = (f<n>) \uf0ae dest<n + 1>, (f<7>) \uf0ae C, (C) \uf0ae dest< 0 >. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Status Affected:,",
    "PIC18F2420/2520/4420/4520\nRotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Encoding:, Rotate Left f through Carry = 0011. Encoding:, Rotate Left f through Carry = 01da. Encoding:, Rotate Left f through Carry = ffff. Encoding:, Rotate Left f through Carry = ffff. Encoding:, Rotate Left f through Carry = ffff. Description:, Rotate Left f through Carry = The contents one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset. Description:, Rotate Left f through Carry =",
    "PIC18F2420/2520/4420/4520\nof. Description:, Rotate Left f through Carry = register. Description:, Rotate Left f through Carry = The contents one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset. Description:, Rotate Left f through Carry = are rotated. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = . Words:, Rotate Left f through Carry = . Words:, Rotate Left f through Carry = . Words:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = 1.",
    "PIC18F2420/2520/4420/4520\nCycles:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = Q2 Read. Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Decode, Rotate Left f through Carry = register 'f'. Decode, Rotate Left f through Carry = . Decode, Rotate Left f through Carry = Q3. Decode, Rotate Left f through Carry = . Decode, Rotate Left f through Carry = Q4. , Rotate Left f through Carry = . , Rotate Left f through Carry = . , Rotate Left f through Carry = Process Data. , Rotate Left f through Carry = . , Rotate Left f through Carry = Write to destination. Example:, Rotate Left f through Carry = RLCF. Example:, Rotate Left f through Carry = REG,.",
    "PIC18F2420/2520/4420/4520\nExample:, Rotate Left f through Carry = . Example:, Rotate Left f through Carry = 0,. Example:, Rotate Left f through Carry = . Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. REG, Rotate Left f through Carry = = 1110. REG, Rotate Left f through Carry = 0110. REG, Rotate Left f through Carry = . REG, Rotate Left f through Carry =",
    "PIC18F2420/2520/4420/4520\n. REG, Rotate Left f through Carry = . W, Rotate Left f through Carry = = 1100 1. W, Rotate Left f through Carry = 1100. W, Rotate Left f through Carry = . W, Rotate Left f through Carry = . W, Rotate Left f through Carry = . C, Rotate Left f through Carry = =. C, Rotate Left f through Carry = . C, Rotate Left f through Carry = . C, Rotate Left f through Carry = . C, Rotate Left f through Carry = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Rotate Left f (No Carry) = RLNCF. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Operands:, Rotate Left f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Rotate Left f (No Carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest< 0 >. Operation:, Rotate Left f (No Carry) =",
    "PIC18F2420/2520/4420/4520\n(f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest< 0 >. Operation:, Rotate Left f (No Carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest< 0 >. Operation:, Rotate Left f (No Carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest< 0 >. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Encoding:, Rotate Left f (No Carry) = 0100. Encoding:, Rotate Left f (No Carry) = 01da. Encoding:, Rotate Left f (No Carry) = ffff. Encoding:, Rotate Left f (No Carry) = ffff. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit",
    "PIC18F2420/2520/4420/4520\nto the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank",
    "PIC18F2420/2520/4420/4520\n(default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (No Carry) = The contents of",
    "PIC18F2420/2520/4420/4520\nregister 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No Carry) = 1.",
    "PIC18F2420/2520/4420/4520\nCycles:, Rotate Left f (No Carry) = 1. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q2 Read. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q3. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q3. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q4. Example:, Rotate Left f (No Carry) = RLNCF. Example:, Rotate Left f (No Carry) = REG, 1,. Example:, Rotate Left f (No Carry) = REG, 1,. Example:, Rotate Left f (No Carry) = . Before, Rotate Left f (No Carry) = Instruction. Before, Rotate Left f (No Carry) = . Before, Rotate Left f (No Carry) = . Before, Rotate Left f (No Carry) = 0. After Instruction REG =, Rotate Left f (No Carry) = 0101. After Instruction REG =, Rotate Left f (No Carry) = 0111. After Instruction REG =, Rotate Left f (No Carry) = . After Instruction REG",
    "PIC18F2420/2520/4420/4520\n=, Rotate Left f (No Carry) = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry =",
    "PIC18F2420/2520/4420/4520\n(f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae C, (C) \uf0ae dest<7>. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Encoding:, Rotate Right f through Carry = 0011. Encoding:, Rotate Right f through Carry = 00da. Encoding:, Rotate Right f through Carry = ffff. Encoding:, Rotate Right f through Carry = ffff. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one",
    "PIC18F2420/2520/4420/4520\nbit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is",
    "PIC18F2420/2520/4420/4520\nused to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right",
    "PIC18F2420/2520/4420/4520\nf through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate",
    "PIC18F2420/2520/4420/4520\nRight f through Carry = 1. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q1, Rotate Right f through Carry = Q2. Q1, Rotate Right f through Carry = Q3. Q1, Rotate Right f through Carry = Q3. Q1, Rotate Right f through Carry = Q4. Decode, Rotate Right f through Carry = Read register 'f'. Decode, Rotate Right f through Carry = Process Data. Decode, Rotate Right f through Carry = Process Data. Decode, Rotate Right f through Carry = Write to destination. Example:, Rotate Right f through Carry = RRCF. Example:, Rotate Right f through Carry = REG, 0,. Example:, Rotate Right f through Carry = 0. Example:, Rotate Right f through Carry = . Before Instruction =, Rotate Right f through Carry = Before Instruction =. Before Instruction =, Rotate Right f through Carry",
    "PIC18F2420/2520/4420/4520\n= . Before Instruction =, Rotate Right f through Carry = . Before Instruction =, Rotate Right f through Carry = . REG C, Rotate Right f through Carry = 1110 = 0. REG C, Rotate Right f through Carry = 0110. REG C, Rotate Right f through Carry = . REG C, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = After Instruction. After Instruction, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = . REG, Rotate Right f through Carry = = 1110. REG, Rotate Right f through Carry = 0110. REG, Rotate Right f through Carry = . REG, Rotate Right f through Carry = . W, Rotate Right f through Carry = = 0111. W, Rotate Right f through Carry = 0011. W, Rotate Right f through Carry = . W, Rotate Right f through Carry = . C, Rotate Right f through Carry = = 0. C, Rotate Right f through Carry = . C, Rotate Right f through Carry = . C, Rotate Right f through Carry = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Rotate Right f (No Carry) = RRNCF. Syntax:, Rotate Right f (No Carry) = f {,d {,a}}. Syntax:, Rotate Right f (No Carry) = f {,d {,a}}. Syntax:, Rotate Right f (No Carry) = f {,d {,a}}. Operands:, Rotate Right f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Rotate Right f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Rotate Right f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Rotate Right f (No Carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operation:, Rotate Right f (No Carry) = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae dest<7>. Operation:, Rotate Right f (No Carry) = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae dest<7>.",
    "PIC18F2420/2520/4420/4520\nOperation:, Rotate Right f (No Carry) = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae dest<7>. Operation:, Rotate Right f (No Carry) = (f<n>) \uf0ae dest<n - 1 >, (f< 0 >) \uf0ae dest<7>. Status Affected:, Rotate Right f (No Carry) = N, Z. Status Affected:, Rotate Right f (No Carry) = N, Z. Status Affected:, Rotate Right f (No Carry) = N, Z. Status Affected:, Rotate Right f (No Carry) = N, Z. Encoding:, Rotate Right f (No Carry) = 0100. Encoding:, Rotate Right f (No Carry) = 00da. Encoding:, Rotate Right f (No Carry) = ffff. Encoding:, Rotate Right f (No Carry) = ffff\nDescription:",
    "PIC18F2420/2520/4420/4520\nThe contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\nCycles:\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination",
    "Set f\nSyntax:\nSETF    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce\uf020 [0,1]\nOperation:\nFFh \uf0ae f\nStatus Affected:",
    "None\nEncoding:\n0110\n100a\nffff\nffff\nDescription:\nThe contents of the specified register are set to FFh.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite\nregister 'f'",
    "Example:\nSETF\nREG, 1\nBefore Instruction\nREG\n=\n5Ah\nAfter Instruction\nREG\n=\nFFh",
    "Example 1:\nRRNCF   REG, 1, 0\nBefore Instruction\nREG\n=\n1101 0111\nAfter Instruction\nREG\n=\n1110 1011",
    "Example 2:\nRRNCF   REG, 0, 0\nBefore Instruction\nW\n=\n?\nREG\n=\n1101 0111\nAfter Instruction\nW\n=\n1110 1011\nREG\n=\n1101 0111",
    "PIC18F2420/2520/4420/4520\nSyntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:,  = . Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:,  = . Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:,",
    "PIC18F2420/2520/4420/4520\n= . Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:,  = . Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0011. Encoding:,",
    "PIC18F2420/2520/4420/4520\n= . Description:, Enter Sleep mode = The Power-Down status (PD) bit is cleared. The Time-out status (TO) bit is set. Watchdog Timer and its posts- caler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status (PD) bit is cleared. The Time-out status (TO) bit is set. Watchdog Timer and its posts- caler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status (PD) bit is cleared. The Time-out status (TO) bit is set. Watchdog Timer and its posts- caler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status (PD) bit is cleared. The Time-out status (TO) bit is set. Watchdog Timer and its posts- caler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:,",
    "PIC18F2420/2520/4420/4520\n= . Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:,  = . Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:,  = . Q Cycle Activity:, Enter Sleep mode = Q Cycle Activity:. Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:,  = . Q1, Enter Sleep mode = Q2. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q4. Q1,  = . Decode, Enter Sleep mode = No operation. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Go to Sleep. Decode,  = \nExample:\nSLEEP\nBefore Instruction\nTO\n=\n?\nPD\n=\n?\nAfter Instruction\nTO\n=\n1 \u2020\nPD\n=",
    "PIC18F2420/2520/4420/4520\n0\n- \u2020   If WDT causes wake-up, this bit is cleared.\nSyntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:,  = . Syntax:,  = . Syntax:,  = . Operands:, Subtract f from Wwith Borrow = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:,  = . Operands:,  = . Operands:,  = . Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \uf0ae\uf020 dest. Operation:,  = . Operation:,  = . Operation:,  = . Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Encoding:, Subtract f from Wwith Borrow = 0101. Encoding:,  = 01da. Encoding:,  = ffff. Encoding:,",
    "PIC18F2420/2520/4420/4520\n= . Description:, Subtract f from Wwith Borrow = ffff Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).. Description:,  = . Description:,  = . Description:,  = . Words:, Subtract f from Wwith Borrow = 1. Words:,  = . Words:,  = . Words:,  = . Cycles:, Subtract f from Wwith Borrow = 1. Cycles:,  = . Cycles:,  = . Cycles:,  = . Q1 Decode, Subtract f from Wwith Borrow = Read register 'f'. Q1 Decode,  = Q3 Process Data. Q1 Decode,  = Q4 Write to destination. Q1 Decode,",
    "PIC18F2420/2520/4420/4520\n= Q2. Example 1:, Subtract f from Wwith Borrow = SUBFWB. Example 1:,  = REG, 1, 0. Example 1:,  = . Example 1:,  = . Before REG, Subtract f from Wwith Borrow = . Before REG,  = 3 2 1. Before REG,  = Instruction =. Before REG,  = . After Instruction, Subtract f from Wwith Borrow = . After Instruction,  = FF 2. After Instruction,  = . After Instruction,  = . Z N, Subtract f from Wwith Borrow = . Z N,  = . Z N,  = REG = W =. Z N,  = . , Subtract f from Wwith Borrow = . ,  = . ,  = C =. ,  = . , Subtract f from Wwith Borrow = . ,  = 0. ,  = =. ,  = . , Subtract f from Wwith Borrow = . ,  = 0. ,  = =. ,  = . 2:, Subtract f from Wwith Borrow = 0. 2:,  = 1 ; result is negative. 2:,  = . 2:,",
    "PIC18F2420/2520/4420/4520\n= . Example, Subtract f from Wwith Borrow = . Example,  = SUBFWB REG, 0,. Example,  = . Example,  = . REG W C, Subtract f from Wwith Borrow = . REG W C,  = 5 1. REG W C,  = Before Instruction. REG W C,  = 2. After, Subtract f from Wwith Borrow = . After,  = 2. After,  = Instruction. After,  = . , Subtract f from Wwith Borrow = . ,  = 3 1. ,  = = =. ,  = . REG W, Subtract f from Wwith Borrow = . REG W,  = 0. REG W,  = = =. REG W,  = . C Z N 3:, Subtract f from Wwith Borrow = . C Z N 3:,  = . C Z N 3:,  = . C Z N 3:,  = . , Subtract f from Wwith Borrow = . ,  = 0 ; result is positive. ,  = . ,  = . Example, Subtract f from Wwith Borrow = 0. Example,  = 1,. Example,  = . Example,",
    "PIC18F2420/2520/4420/4520\n= . Before, Subtract f from Wwith Borrow = . Before,  = SUBFWB REG,. Before,  = Instruction REG = =. Before,  = . W C, Subtract f from Wwith Borrow = . W C,  = 1 2. W C,  = = Instruction. W C,  = . W, Subtract f from Wwith Borrow = . W,  = 0. W,  = =. W,  = . After REG, Subtract f from Wwith Borrow = . After REG,  = 0. After REG,  = . After REG,  = . C, Subtract f from Wwith Borrow = . C,  = 2. C,  = =. C,  = . , Subtract f from Wwith Borrow = . ,  = . ,  = =. ,  = . Z, Subtract f from Wwith Borrow = . Z,  = . Z,  = . Z,  = . N, Subtract f from Wwith Borrow = . N,  = 1. N,  = =. N,  = . , Subtract f from Wwith Borrow = . ,  = ; result is zero. ,",
    "PIC18F2420/2520/4420/4520\n= =. ,  = . , Subtract f from Wwith Borrow = . ,  = . ,  = 0. ,  = . , Subtract f from Wwith Borrow = . ,  = . ,  = . ,  = 1",
    "PIC18F2420/2520/4420/4520\nSyntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = .",
    "PIC18F2420/2520/4420/4520\nOperation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom Literal = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is",
    "PIC18F2420/2520/4420/4520\nplaced in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the 8-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = Q2. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = Q3. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = literal. , Subtract Wfrom Literal = Read 'k'. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom Literal = Write. , Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Example SUBLW 02h, Subtract Wfrom Literal = . Cycles: Q Cycle Activity:, Subtract Wfrom Literal = Q1. Cycles: Q Cycle Activity:, Subtract Wfrom Literal = . Cycles: Q Cycle Activity:, Subtract Wfrom Literal = 01h ?. Cycles: Q Cycle Activity:, Subtract Wfrom Literal = . Cycles: Q Cycle Activity:, Subtract Wfrom Literal = . Cycles: Q Cycle Activity:, Subtract Wfrom Literal = . Cycles: Q Cycle Activity:, Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom Literal = . 1:, Subtract Wfrom Literal = Decode. 1:, Subtract Wfrom Literal = . 1:, Subtract Wfrom Literal = . 1:, Subtract Wfrom Literal = Process Data. 1:, Subtract Wfrom Literal = . 1:, Subtract Wfrom Literal = . 1:, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . Before Instruction, Subtract Wfrom Literal = . W C, Subtract Wfrom Literal = = =. W C, Subtract Wfrom Literal = . W C, Subtract Wfrom Literal = . W C, Subtract Wfrom Literal = . W C, Subtract Wfrom Literal = . W",
    "PIC18F2420/2520/4420/4520\nC, Subtract Wfrom Literal = . W C, Subtract Wfrom Literal = . After Instruction W C Z, Subtract Wfrom Literal = . After Instruction W C Z, Subtract Wfrom Literal = = = = =. After Instruction W C Z, Subtract Wfrom Literal = 01h 1 0 0. After Instruction W C Z, Subtract Wfrom Literal = ; result is. After Instruction W C Z, Subtract Wfrom Literal = positive. After Instruction W C Z, Subtract Wfrom Literal = . After Instruction W C Z, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . N, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = .",
    "PIC18F2420/2520/4420/4520\n2:, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = . 2:, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . Example, Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = SUBLW. , Subtract Wfrom Literal = 02h. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = = = Instruction =. , Subtract Wfrom Literal = Instruction. , Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom Literal = 02h ?. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = = = = = = =. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . Z, Subtract Wfrom Literal = C = N =. Z, Subtract Wfrom Literal = =. Z, Subtract Wfrom Literal = 00h 1 1 0. Z, Subtract Wfrom Literal = result is. Z, Subtract Wfrom Literal = . Z, Subtract Wfrom Literal = zero. Z, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Before",
    "PIC18F2420/2520/4420/4520\nW C, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Before W C, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = 03h ?. Example 3:, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = . Example 3:, Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = 02h. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . ,",
    "PIC18F2420/2520/4420/4520\nSubtract Wfrom Literal = . , Subtract Wfrom Literal = SUBLW. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = Instruction. Before, Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = . Before, Subtract Wfrom Literal = . , Subtract Wfrom Literal = Instruction. , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . W, Subtract Wfrom Literal = . W, Subtract Wfrom Literal = . W, Subtract Wfrom Literal",
    "PIC18F2420/2520/4420/4520\n= FFh 0 0 1. W, Subtract Wfrom Literal = . W, Subtract Wfrom Literal = . W, Subtract Wfrom Literal = . W, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = ; (2's ; result. C After W C, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = . C After W C, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . Z N, Subtract Wfrom Literal = . ,",
    "PIC18F2420/2520/4420/4520\nSubtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = . , Subtract Wfrom Literal = negative. , Subtract Wfrom Literal = complement) is. , Subtract Wfrom Literal = ",
    "PIC18F2420/2520/4420/4520\nSyntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom",
    "PIC18F2420/2520/4420/4520\nf = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Encoding:,",
    "PIC18F2420/2520/4420/4520\nSubtract Wfrom f = 0101. Encoding:, Subtract Wfrom f = 11da. Encoding:, Subtract Wfrom f = ffff. Encoding:, Subtract Wfrom f = . Encoding:, Subtract Wfrom f = ffff. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is",
    "PIC18F2420/2520/4420/4520\nstored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back",
    "PIC18F2420/2520/4420/4520\nin register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom",
    "PIC18F2420/2520/4420/4520\nf = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Q1 Decode, Subtract Wfrom f = Q2 Read. Q1 Decode, Subtract Wfrom f = . Q1 Decode, Subtract Wfrom f = Q3. Q1 Decode, Subtract Wfrom f = Q4. Q1 Decode, Subtract Wfrom f = . REG W, Subtract Wfrom f = register 'f'. REG W, Subtract Wfrom f = Process Data. REG W, Subtract Wfrom f = 0. REG W, Subtract Wfrom f = Write. REG W, Subtract Wfrom f = to destination. Example 1:, Subtract Wfrom f = SUBWF. Example 1:, Subtract Wfrom",
    "PIC18F2420/2520/4420/4520\nf = REG,. Example 1:, Subtract Wfrom f = 1,. Example 1:, Subtract Wfrom f = . Example 1:, Subtract Wfrom f = . Before Instruction = 3, Subtract Wfrom f = Before Instruction = 3. Before Instruction = 3, Subtract Wfrom f = Before Instruction = 3. Before Instruction = 3, Subtract Wfrom f = Before Instruction = 3. Before Instruction = 3, Subtract Wfrom f = Before Instruction = 3. Before Instruction = 3, Subtract Wfrom f = Before Instruction = 3. C After Instruction REG, Subtract Wfrom f = = 2 = ?. C After Instruction REG, Subtract Wfrom f = ; result. C After Instruction REG, Subtract Wfrom f = . C After Instruction REG, Subtract Wfrom f = . C After Instruction REG, Subtract Wfrom f = . W C, Subtract Wfrom f = = =. W C, Subtract Wfrom f = 1 2 1. W",
    "PIC18F2420/2520/4420/4520\nC, Subtract Wfrom f = is positive. W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . Z, Subtract Wfrom f = = =. Z, Subtract Wfrom f = 0. Z, Subtract Wfrom f = . Z, Subtract Wfrom f = . Z, Subtract Wfrom f = . N 2:, Subtract Wfrom f = =. N 2:, Subtract Wfrom f = . N 2:, Subtract Wfrom f = . N 2:, Subtract Wfrom f = . N 2:, Subtract Wfrom f = . Example, Subtract Wfrom f = . Example, Subtract Wfrom f = 0. Example, Subtract Wfrom f = REG, 0, 0. Example, Subtract Wfrom f = . Example, Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f =",
    "PIC18F2420/2520/4420/4520\nSUBWF. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = . REG W, Subtract Wfrom f = =. REG W, Subtract Wfrom f = 2. REG W, Subtract Wfrom f = . REG W, Subtract Wfrom f = . REG W, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = 2. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . C, Subtract Wfrom f = = =. C, Subtract Wfrom f = ?. C, Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = 2 0. After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . , Subtract Wfrom f = = =. , Subtract Wfrom f = 1. , Subtract Wfrom f = is zero. , Subtract Wfrom f = . , Subtract Wfrom f = . W C, Subtract Wfrom f = =. W C, Subtract Wfrom f = ; result 1. W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . Z N, Subtract Wfrom f = =. Z N, Subtract Wfrom f = . Z N, Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . , Subtract Wfrom f = =. , Subtract Wfrom f = 0. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . Example 3: SUBWF REG, 1, 0 Before Instruction, Subtract Wfrom f = Example 3: SUBWF REG, 1, 0 Before Instruction. Example 3: SUBWF REG, 1, 0 Before Instruction, Subtract Wfrom f = Example 3: SUBWF REG, 1, 0 Before Instruction. Example 3: SUBWF REG, 1, 0 Before Instruction, Subtract Wfrom f = Example 3: SUBWF REG, 1, 0 Before Instruction. Example 3: SUBWF REG, 1, 0 Before Instruction, Subtract Wfrom f = Example 3: SUBWF REG, 1, 0 Before Instruction. Example 3: SUBWF REG, 1, 0 Before Instruction,",
    "PIC18F2420/2520/4420/4520\nSubtract Wfrom f = Example 3: SUBWF REG, 1, 0 Before Instruction. REG, Subtract Wfrom f = =. REG, Subtract Wfrom f = 1. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. REG, Subtract",
    "PIC18F2420/2520/4420/4520\nWfrom f = =. REG, Subtract Wfrom f = FFh ;(2's 2. REG, Subtract Wfrom f = complement). REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = 0. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C Z, Subtract Wfrom f = =. C Z, Subtract Wfrom f = ; result. C Z, Subtract Wfrom f = negative. C Z, Subtract Wfrom f = . C Z, Subtract Wfrom f = . N, Subtract Wfrom f = = =. N, Subtract Wfrom f = 0. N, Subtract Wfrom f = is. N, Subtract Wfrom f = . N, Subtract Wfrom f = . ,",
    "PIC18F2420/2520/4420/4520\nSubtract Wfrom f = . , Subtract Wfrom f = 1. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = ",
    "Subtract W from f with Borrow\nSyntax:\nSUBWFB    f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\nOperation:\n(f) - (W) - (C) \uf0ae\uf020 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0101\n10da\nffff\nffff\nDescription:\nSubtract W and the Carry flag (borrow)\nfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:",
    "Subtract W from f with Borrow\nExample 1:,  = Example 1:. Example 1:, Q2 Read register. = SUBWFB. Example 1:, Q3 Process.Data 0 = REG, 1,. Example 1:,  = . Before Instruction,  = Before Instruction. Before Instruction, Q2 Read register. = . Before Instruction, Q3 Process.Data 0 = . Before Instruction,  = . REG,  = =. REG, Q2 Read register. = 19h. REG, Q3 Process.Data 0 = (0001 1001). REG,  = . W,  = =. W, Q2 Read register. = 0Dh. W, Q3 Process.Data 0 = (0000 1101). W,  = . C,  = =. C, Q2 Read register. = 1. C, Q3 Process.Data 0 = . C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register. = . After Instruction, Q3 Process.Data 0 = . After Instruction,  = . REG,  = =. REG, Q2 Read register. = 0Ch. REG, Q3 Process.Data 0 = (0000. REG,  = . W,",
    "Subtract W from f with Borrow\n= =. W, Q2 Read register. = 0Dh. W, Q3 Process.Data 0 = 1011) (0000 1101). W,  = . C,  = =. C, Q2 Read register. = 1. C, Q3 Process.Data 0 = . C,  = . Z,  = =. Z, Q2 Read register. = 0. Z, Q3 Process.Data 0 = . Z,  = . N,  = =. N, Q2 Read register. = 0. N, Q3 Process.Data 0 = ; result is positive. N,  = ; result is positive. Example 2:,  = Example 2:. Example 2:, Q2 Read register. = SUBWFB. Example 2:, Q3 Process.Data 0 = REG,. Example 2:,  = . ,  = . , Q2 Read register. = . , Q3 Process.Data 0 = 0, 0. ,  = . Before Instruction REG,  = =. Before Instruction REG, Q2 Read register. = 1Bh. Before Instruction REG, Q3 Process.Data 0 = (0001 1011). Before Instruction REG,  = . W,",
    "Subtract W from f with Borrow\n= =. W, Q2 Read register. = 1Ah. W, Q3 Process.Data 0 = (0001. W,  = . C,  = =. C, Q2 Read register. = 0. C, Q3 Process.Data 0 = 1010). C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register. = . After Instruction, Q3 Process.Data 0 = . After Instruction,  = . REG,  = =. REG, Q2 Read register. = 1Bh. REG, Q3 Process.Data 0 = (0001. REG,  = . W,  = =. W, Q2 Read register. = 00h. W, Q3 Process.Data 0 = 1011). W,  = . C,  = =. C, Q2 Read register. = 1. C, Q3 Process.Data 0 = . C,  = . Z,  = =. Z, Q2 Read register. = 1. Z, Q3 Process.Data 0 = ; result is zero. Z,  = . N,",
    "Subtract W from f with Borrow\n= =. N, Q2 Read register. = 0. N, Q3 Process.Data 0 = . N,  = . Example 3:,  = Example 3:. Example 3:, Q2 Read register. = SUBWFB. Example 3:, Q3 Process.Data 0 = REG, 1,. Example 3:,  = . Before Instruction,  = Before Instruction. Before Instruction, Q2 Read register. = Before Instruction. Before Instruction, Q3 Process.Data 0 = 0. Before Instruction,  = . REG,  = =. REG, Q2 Read register. = 03h. REG, Q3 Process.Data 0 = (0000 0011). REG,  = . W,  = =. W, Q2 Read register. = 0Eh. W, Q3 Process.Data 0 = (0000 1101). W,  = . C,  = =. C, Q2 Read register. = 1. C, Q3 Process.Data 0 = . C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register. = After Instruction. After Instruction, Q3 Process.Data 0 = . After Instruction,  = . REG,",
    "Subtract W from f with Borrow\n= =. REG, Q2 Read register. = F5h. REG, Q3 Process.Data 0 = (1111 0100) ; [2's comp]. REG,  = . W,  = =. W, Q2 Read register. = 0Eh. W, Q3 Process.Data 0 = (0000 1101). W,  = . C,  = =. C, Q2 Read register. = 0. C, Q3 Process.Data 0 = . C,  = . Z,  = =. Z, Q2 Read register. = 0. Z, Q3 Process.Data 0 = . Z,  = . N,  = =. N, Q2 Read register. = 1. N, Q3 Process.Data 0 = ; result is negative. N,  = ; result is negative\nWords:\nCycles:",
    "Subtract W from f with Borrow\nSyntax:, Swap f = SWAPF. Syntax:, Swap f = f {,d {,a}}. Syntax:, Swap f = f {,d {,a}}. Syntax:, Swap f = f {,d {,a}}. Operands:, Swap f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Swap f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Swap f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Swap f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operation:, Swap f = (f<3:0>) \uf0ae dest<7:4>, (f<7:4>) \uf0ae dest<3:0>. Operation:, Swap f = (f<3:0>) \uf0ae dest<7:4>, (f<7:4>) \uf0ae dest<3:0>. Operation:, Swap f = (f<3:0>) \uf0ae dest<7:4>, (f<7:4>) \uf0ae dest<3:0>. Operation:, Swap f =",
    "Subtract W from f with Borrow\n(f<3:0>) \uf0ae dest<7:4>, (f<7:4>) \uf0ae dest<3:0>. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Encoding:, Swap f = 0011. Encoding:, Swap f = 10da. Encoding:, Swap f = ffff. Encoding:, Swap f = ffff\nDescription:\nThe upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).",
    "Subtract W from f with Borrow\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination",
    "Example:\nSWAPF\nREG, 1, 0\nBefore Instruction\nREG\n=\nAfter Instruction\nREG\n=\n53h\n35h",
    "PIC18F2420/2520/4420/4520\nSyntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*,. Operation:, Table Read = if TBLRD *,",
    "PIC18F2420/2520/4420/4520\n(Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*,. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*,. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog",
    "PIC18F2420/2520/4420/4520\nMem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*,. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 10nn nn=0 * =1 *+ =2 *-. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR<0> = 0 :Least Significant Byte of Program Memory Word",
    "PIC18F2420/2520/4420/4520\nTBLPTR<0> = 1 :MostSignificantByteof Program Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: \u2022 no change \u2022 post-increment \u2022 post-decrement \u2022 pre-increment. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR<0> = 0 :Least Significant Byte of Program Memory Word TBLPTR<0> = 1 :MostSignificantByteof Program Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: \u2022 no change \u2022 post-increment \u2022 post-decrement \u2022 pre-increment. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called",
    "PIC18F2420/2520/4420/4520\nTable Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR<0> = 0 :Least Significant Byte of Program Memory Word TBLPTR<0> = 1 :MostSignificantByteof Program Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: \u2022 no change \u2022 post-increment \u2022 post-decrement \u2022 pre-increment. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR<0> = 0 :Least Significant Byte of Program Memory Word TBLPTR<0> = 1 :MostSignificantByteof Program Memory Word The TBLRD instruction can modify the value of TBLPTR",
    "PIC18F2420/2520/4420/4520\nas follows: \u2022 no change \u2022 post-increment \u2022 post-decrement \u2022 pre-increment. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Q Cycle Activity:, Table Read = . Q Cycle Activity:, Table Read = . Q Cycle Activity:, Table Read = . Q Cycle Activity:, Table Read = . Q1, Table Read = Q2. Q1, Table Read = Q3. Q1, Table Read = Q3. Q1, Table Read = Q4. Decode, Table Read = No operation. Decode, Table Read = No operation. Decode, Table Read = No operation. Decode, Table Read = No operation No operation (Write TAB-. No operation, Table Read = No operation (Read Program Memory). No operation, Table Read = No operation. No operation, Table Read = No operation. No operation, Table Read =",
    "PIC18F2420/2520/4420/4520\nLAT)",
    "TBLRD Table Read (Continued)\nExample1:, 1 = TBLRD *+. Example1:, 2 = ;. Example1:, 3 = . Before Instruction TABLAT, 1 = Before Instruction TABLAT. Before Instruction TABLAT, 2 = =. Before Instruction TABLAT, 3 = 55h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A356h. MEMORY (00A356h), 1 = MEMORY (00A356h). MEMORY (00A356h), 2 = =. MEMORY (00A356h), 3 = 34h. After Instruction TABLAT, 1 = After Instruction TABLAT. After Instruction TABLAT, 2 = =. After Instruction TABLAT, 3 = 34h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A357h. Example2:, 1 = TBLRD +*. Example2:, 2 = ;. Example2:, 3 = . Before Instruction TABLAT, 1 = Before Instruction TABLAT. Before Instruction TABLAT, 2 = =. Before Instruction",
    "TBLRD Table Read (Continued)\nTABLAT, 3 = AAh. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 01A357h. MEMORY (01A357h), 1 = MEMORY (01A357h). MEMORY (01A357h), 2 = =. MEMORY (01A357h), 3 = 12h. MEMORY (01A358h), 1 = MEMORY (01A358h). MEMORY (01A358h), 2 = =. MEMORY (01A358h), 3 = 34h. After Instruction TABLAT, 1 = After Instruction TABLAT. After Instruction TABLAT, 2 = =. After Instruction TABLAT, 3 = 34h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 01A358h",
    "TBLWT\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\nQ Cycle Activity:\nTBLWT ( *; *+; *-; +*)\nNone if TBLWT*,\n(TABLAT)\n\uf0ae\nHolding Register,\nTBLPTR - No Change;\nif TBLWT*+,\n(TABLAT)\n\uf0ae\nHolding Register,\n(TBLPTR) +\n1\n\uf0ae\nTBLPTR;\nif TBLWT*-,\n(TABLAT)\n\uf0ae\nHolding Register,\n(TBLPTR) -\n1\n\uf0ae\nTBLPTR;\nif TBLWT+*,\n(TBLPTR) +\n1\n\uf0ae\nTBLPTR,\n(TABLAT)\n\uf0ae\nHolding Register\nNone\n0000",
    "TBLWT\nExample1:, 1 = TBLWT *+;. Example1:, 2 = . Before Instruction, 1 = . Before Instruction, 2 = . TABLAT, 1 = . TABLAT, 2 = 55h. TBLPTR, 1 = . TBLPTR, 2 = 00A356h. HOLDING REGISTER (00A356h), 1 = . HOLDING REGISTER (00A356h), 2 = FFh. After Instructions (table write completion), 1 = After Instructions (table write completion). After Instructions (table write completion), 2 = After Instructions (table write completion). TABLAT, 1 = . TABLAT, 2 = 55h. TBLPTR, 1 = . TBLPTR, 2 = 00A357h. HOLDING REGISTER (00A356h), 1 = . HOLDING REGISTER (00A356h), 2 = 55h. Example 2:, 1 = TBLWT. Example 2:, 2 = . Before Instruction, 1 = . Before Instruction, 2 = . TABLAT, 1 = . TABLAT, 2 = 34h. TBLPTR, 1 = . TBLPTR, 2 = 01389Ah. HOLDING REGISTER",
    "TBLWT\n(01389Ah), 1 = . HOLDING REGISTER (01389Ah), 2 = FFh. HOLDING REGISTER (01389Bh), 1 = . HOLDING REGISTER (01389Bh), 2 = FFh. After Instruction (table write completion), 1 = . After Instruction (table write completion), 2 = . TABLAT, 1 = . TABLAT, 2 = 34h. TBLPTR, 1 = . TBLPTR, 2 = 01389Bh. HOLDING REGISTER (01389Ah), 1 = . HOLDING REGISTER (01389Ah), 2 = FFh. HOLDING REGISTER (01389Bh), 1 = . HOLDING REGISTER (01389Bh), 2 = 34h\n11nn nn=0 *\n=1 *+\n=2 *-\n=3 +*\nThis instruction uses the 3 LSBs of",
    "TBLWT\nTBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). (Refer to Section 6.0 'Flash Program Memory' for additional details on programming Flash memory.) The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-MByte address range. The LSb of the TBLPTR selects which byte of the program memory location to access.\nTBLPTR<0> =\n0\n:Least Significant\nByte of Program\nTBLPTR<0> =\nMemory Word\nByte of Program\n1\n:Most Significant\nMemory Word\nThe TBLWT instruction can modify the value of TBLPTR as follows:\n\u00b7 no change\n\u00b7 post-increment\n\u00b7 post-decrement\n\u00b7 pre-increment\n1\n2\nQ1\nQ2\nQ3\nQ4\nNo operation, No = No operationoperation (Read TABLAT). No operation, operationoperation No = No. No operation, No operation = No operation (Write to Holding Register )\n0000\n0000\nTable Write  (Continued)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Operands:, Test f, Skip if 0 = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Test f, Skip if 0 = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Test f, Skip if 0 = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Test f, Skip if 0 = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Status Affected:, Test f, Skip if 0 = None. Status Affected:, Test",
    "PIC18F2420/2520/4420/4520\nf, Skip if 0 = None. Status Affected:, Test f, Skip if 0 = None. Status Affected:, Test f, Skip if 0 = None. Encoding:, Test f, Skip if 0 = 0110. Encoding:, Test f, Skip if 0 = 011a. Encoding:, Test f, Skip if 0 = ffff. Encoding:, Test f, Skip if 0 = ffff. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if 0 = If 'f' = 0 , the next",
    "PIC18F2420/2520/4420/4520\ninstruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3",
    "PIC18F2420/2520/4420/4520\n'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Cycles:, Test f, Skip if 0 = 1(2). Cycles:, Test f, Skip if 0 = 1(2). Cycles:, Test f, Skip if 0 = 1(2).",
    "PIC18F2420/2520/4420/4520\nCycles:, Test f, Skip if 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "PIC18F2420/2520/4420/4520\nSyntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Operands:, Exclusive OR Literal with W = 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands:, Exclusive OR Literal with W = 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands:, Exclusive OR Literal with W = 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands:, Exclusive OR Literal with W = 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operation:, Exclusive OR Literal with W = (W) .XOR. k \uf0ae\uf020 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \uf0ae\uf020 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \uf0ae\uf020 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \uf0ae\uf020 W. Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with",
    "PIC18F2420/2520/4420/4520\nW = N, Z. Encoding:, Exclusive OR Literal with W = 0000. Encoding:, Exclusive OR Literal with W = 1010. Encoding:, Exclusive OR Literal with W = kkkk. Encoding:, Exclusive OR Literal with W = kkkk. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W =",
    "PIC18F2420/2520/4420/4520\n1. Cycles:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W = 1. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q1, Exclusive OR Literal with W = Q2. Q1, Exclusive OR Literal with W = Q3. Q1, Exclusive OR Literal with W = Q4. Q1, Exclusive OR Literal with W = Q4. Decode, Exclusive OR Literal with W = Read literal 'k'. Decode, Exclusive OR Literal with W = Process Data. Decode, Exclusive OR Literal with W = Write to W. Decode, Exclusive OR Literal with W = Write to W. Example:, Exclusive OR Literal with W = XORLW. Example:, Exclusive OR Literal with W = 0AFh. Example:, Exclusive OR Literal with W = . Example:, Exclusive OR",
    "PIC18F2420/2520/4420/4520\nLiteral with W = . Before Instruction, Exclusive OR Literal with W = Before Instruction. Before Instruction, Exclusive OR Literal with W = Before Instruction. Before Instruction, Exclusive OR Literal with W = Before Instruction. Before Instruction, Exclusive OR Literal with W = Before Instruction. W, Exclusive OR Literal with W = B5h. W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . After Instruction, Exclusive OR Literal with W = After Instruction. After Instruction, Exclusive OR Literal with W = After Instruction. After Instruction, Exclusive OR Literal with W = After Instruction. After Instruction, Exclusive OR Literal with W = After Instruction. W, Exclusive OR Literal with W = 1Ah. W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = ",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE    TSTFSZ  CNT, 1\nNZERO   :\nZERO    :\nBefore Instruction\nPC\n=\nAddress (HERE)\nAfter Instruction\nIf CNT\n=\n00h,\nPC\n=\nAddress\n(ZERO)\nIf CNT\n\uf0b9\n00h,\nPC\n=\nAddress (NZERO)",
    "PIC18F2420/2520/4420/4520\nSyntax:, Exclusive OR Wwith f = XORWF. Syntax:, Exclusive OR Wwith f = f {,d {,a}}. Syntax:, Exclusive OR Wwith f = . Syntax:, Exclusive OR Wwith f = . Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020",
    "PIC18F2420/2520/4420/4520\ndest. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Encoding:, Exclusive OR Wwith f = 0001. Encoding:, Exclusive OR Wwith f = 10da. Encoding:, Exclusive OR Wwith f = ffff. Encoding:, Exclusive OR Wwith f = ffff. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See",
    "PIC18F2420/2520/4420/4520\nSection 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f'",
    "PIC18F2420/2520/4420/4520\n(default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section",
    "PIC18F2420/2520/4420/4520\n24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Q Cycle Activity:, Exclusive OR Wwith f = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Wwith f = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Wwith f = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Wwith f = Q Cycle Activity:. Q1, Exclusive OR Wwith f = Q2. Q1, Exclusive OR Wwith f = Q3. Q1, Exclusive OR Wwith f = . Q1, Exclusive OR Wwith f = Q4. Decode, Exclusive OR Wwith f = Read register 'f'. Decode, Exclusive OR",
    "PIC18F2420/2520/4420/4520\nWwith f = Process Data. Decode, Exclusive OR Wwith f = . Decode, Exclusive OR Wwith f = Write to destination\nXORWF   REG, 1, 0",
    "Example:\nBefore Instruction\nREG\n=\nAFh\nW\n=\nB5h\nAfter Instruction\nREG\n=\n1Ah\nW\n=\nB5h",
    "24.2 Extended Instruction Set\nIn addition to the standard 75 instructions of the PIC18 instruction  set,  PIC18F2420/2520/4420/4520  devices also  provide  an  optional  extension  to  the  core  CPU functionality.  The  added  features  include  eight  additional  instructions  that  augment  indirect  and  indexed addressing operations and  the implementation of Indexed Literal Offset Addressing mode for many of the standard PIC18 instructions.\nThe additional features of the extended instruction set are disabled by default. To enable them, users must set the XINST Configuration bit.\nThe  instructions in the extended  set can  all be classified as literal operations, which either manipulate the  File  Select  Registers,  or  use  them  for  indexed addressing.  Two  of  the  instructions, ADDFSR and SUBFSR , each have an additional special instantiation for using FSR2.  These versions ( ADDULNK and SUBULNK ) allow for automatic return after execution.\nThe extended instructions are specifically implemented to optimize re-entrant program code (that is, code that is  recursive  or  that  uses  a  software  stack)  written  in high-level languages,  particularly C.  Among  other things, they allow users working in high-level languages  to  perform  certain operations on  data structures more efficiently. These include:",
    "24.2 Extended Instruction Set\n\u00b7 Dynamic allocation and deallocation of software stack space when entering and leaving subroutines\n\u00b7 Function Pointer invocation\n\u00b7 Software Stack Pointer manipulation\nA summary of the instructions in the extended instruction set is provided in Table 24-3 . Detailed descriptions are provided in Section 24.2.2 'Extended Instruction Set' . The  opcode  field  descriptions  in Table 24-1 (page 256) apply to both  the standard and extended PIC18 instruction sets.\nNote:\nThe  instruction set extension  and  the Indexed  Literal  Offset  Addressing  mode were designed for optimizing applications written in C; the user may likely never use these  instructions  directly  in  assembler. The  syntax  for  these  commands  is  provided as a reference for users who may be reviewing code that has been generated by a compiler.",
    "24.2.1 EXTENDED INSTRUCTION SYNTAX\nMost of  the  extended  instructions  use  indexed  arguments, using one of the File Select Registers and some offset to specify a source or destination register. When an  argument  for  an  instruction  serves  as  part  of indexed addressing, it is enclosed in square brackets ('[ ]'). This is done to indicate that the argument is used as an index or offset. MPASM\u2122 Assembler will flag an error if it determines that an index or offset value is not bracketed.\nWhen the extended instruction set is enabled, brackets are  also  used  to  indicate  index  arguments  in  byteoriented and bit-oriented instructions. This is in addition to other changes in their syntax. For more details, see Section 24.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' .\n- \u00b7 Manipulation of variables located in a software stack\nNote:\nIn  the  past,  square  brackets  have  been used to denote optional arguments in the PIC18 and earlier instruction sets. In this text and going forward, optional arguments are denoted by braces ('{ }').",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nADDFSR, Mnemonic,.Operands = f, k. ADDFSR, Description. = Add Literal to FSR. ADDFSR, Cycles. = 1. ADDFSR, 16-Bit Instruction Word.MSb = 1110. ADDFSR, 16-Bit Instruction Word.MSb = 1000. ADDFSR, 16-Bit Instruction Word.MSb = ffkk. ADDFSR, 16-Bit Instruction Word.LSb = kkkk. ADDFSR, Status Affected. = None. ADDULNK, Mnemonic,.Operands = k. ADDULNK, Description. = Add Literal to FSR2 and Return. ADDULNK, Cycles. = 2. ADDULNK, 16-Bit Instruction Word.MSb = 1110. ADDULNK, 16-Bit Instruction Word.MSb = 1000. ADDULNK, 16-Bit Instruction Word.MSb = 11kk. ADDULNK, 16-Bit Instruction Word.LSb = kkkk. ADDULNK, Status Affected. = None. CALLW, Mnemonic,.Operands = . CALLW, Description. = Call",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nSubroutine using WREG. CALLW, Cycles. = 2. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0001. CALLW, 16-Bit Instruction Word.LSb = 0100. CALLW, Status Affected. = None. MOVSF, Mnemonic,.Operands = z s , f d. MOVSF, Description. = Move z s (source) to 1st word f d (destination) 2nd word. MOVSF, Cycles. = 2. MOVSF, 16-Bit Instruction Word.MSb = 1110. MOVSF, 16-Bit Instruction Word.MSb = 1011. MOVSF, 16-Bit Instruction Word.MSb = 0zzz. MOVSF, 16-Bit Instruction Word.LSb = zzzz. MOVSF, Status Affected. = None. MOVSS, Mnemonic,.Operands = z s , z d. MOVSS, Description. = Move z s (source) to 1st",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nword z d (destination) 2nd word. MOVSS, Cycles. = 2. MOVSS, 16-Bit Instruction Word.MSb = 1110. MOVSS, 16-Bit Instruction Word.MSb = 1011. MOVSS, 16-Bit Instruction Word.MSb = 1zzz. MOVSS, 16-Bit Instruction Word.LSb = zzzz. MOVSS, Status Affected. = None. PUSHL, Mnemonic,.Operands = k. PUSHL, Description. = Store Literal at FSR2, Decrement FSR2. PUSHL, Cycles. = 1. PUSHL, 16-Bit Instruction Word.MSb = 1111 1110. PUSHL, 16-Bit Instruction Word.MSb = xxxx 1010. PUSHL, 16-Bit Instruction Word.MSb = xzzz kkkk. PUSHL, 16-Bit Instruction Word.LSb = zzzz kkkk. PUSHL, Status Affected. = None. SUBFSR, Mnemonic,.Operands = f, k. SUBFSR, Description. = Subtract Literal from",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nFSR. SUBFSR, Cycles. = 1. SUBFSR, 16-Bit Instruction Word.MSb = 1110. SUBFSR, 16-Bit Instruction Word.MSb = 1001. SUBFSR, 16-Bit Instruction Word.MSb = ffkk. SUBFSR, 16-Bit Instruction Word.LSb = kkkk. SUBFSR, Status Affected. = None. SUBULNK, Mnemonic,.Operands = k. SUBULNK, Description. = Subtract Literal from FSR2 and Return. SUBULNK, Cycles. = 2. SUBULNK, 16-Bit Instruction Word.MSb = 1110. SUBULNK, 16-Bit Instruction Word.MSb = 1001. SUBULNK, 16-Bit Instruction Word.MSb = 11kk. SUBULNK, 16-Bit Instruction Word.LSb = kkkk. SUBULNK, Status Affected. = None",
    "Add Literal to FSR\nSyntax:, 1 = ADDFSR f, k. Syntax:, 2 = ADDFSR f, k. Syntax:, 3 = ADDFSR f, k. Syntax:, 4 = ADDFSR f, k. Operands:, 1 = 0 \uf0a3 k \uf0a3 63 f \uf0ce [ 0, 1, 2 ]. Operands:, 2 = 0 \uf0a3 k \uf0a3 63 f \uf0ce [ 0, 1, 2 ]. Operands:, 3 = 0 \uf0a3 k \uf0a3 63 f \uf0ce [ 0, 1, 2 ]. Operands:, 4 = 0 \uf0a3 k \uf0a3 63 f \uf0ce [ 0, 1, 2 ]. Operation:, 1 = FSR(f) + k \uf0ae FSR(f). Operation:, 2 = FSR(f) + k \uf0ae FSR(f). Operation:, 3 = FSR(f) + k \uf0ae FSR(f). Operation:, 4 = FSR(f) + k \uf0ae FSR(f). Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 1110. Encoding:, 2 = 1000. Encoding:, 3 = ffkk. Encoding:, 4",
    "Add Literal to FSR\n= kkkk. Description:, 1 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 2 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 3 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 4 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Words:, 1 = 1. Words:, 2 = . Words:, 3 = . Words:, 4 = . Cycles:, 1 = 1. Cycles:, 2 = . Cycles:, 3 = . Cycles:, 4 = . Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = . Q1, 4 = Q4. Decode, 1 = Read literal 'k'. Decode, 2 = Process",
    "Add Literal to FSR\nData. Decode, 3 = . Decode, 4 = Write to FSR",
    "Example:\nADDFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n0422h",
    "Example:\nSyntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Status Affected:, Add Literal to FSR2",
    "Example:\nand Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Encoding:, Add Literal to FSR2 and Return = 1110. Encoding:, Add Literal to FSR2 and Return = 1000. Encoding:, Add Literal to FSR2 and Return = 11kk. Encoding:, Add Literal to FSR2 and Return = kkkk. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle.. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle.. Description:, Add Literal to FSR2 and Return = The 6-bit literal",
    "Example:\n'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle.. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle.. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = 1. Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = 2",
    "Q Cycle Activity:\nDecode, Q2 = Read literal 'k'. Decode, Q3 = Process Data. Decode, Q4 = Write to FSR. No Operation, Q2 = No Operation. No Operation, Q3 = No Operation. No Operation, Q4 = No Operation\nExample:\nADDULNK 23h\nBefore Instruction\nFSR2\n=\n03FFh\nPC\n=\n0100h\nAfter Instruction\nFSR2\n=\n0422h\nPC\n=\n(TOS)\nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction syntax then becomes: {label}    instruction    argument(s).",
    "PIC18F2420/2520/4420/4520\nSyntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operation:, Subroutine Call Using WREG = (PC + 2) \uf0ae TOS, (W) \uf0ae PCL, (PCLATH) \uf0ae PCH, (PCLATU) \uf0ae PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \uf0ae TOS, (W) \uf0ae PCL, (PCLATH) \uf0ae PCH, (PCLATU) \uf0ae PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \uf0ae TOS, (W) \uf0ae PCL, (PCLATH) \uf0ae PCH, (PCLATU) \uf0ae PCU. Operation:, Subroutine Call",
    "PIC18F2420/2520/4420/4520\nUsing WREG = (PC + 2) \uf0ae TOS, (W) \uf0ae PCL, (PCLATH) \uf0ae PCH, (PCLATU) \uf0ae PCU. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0001. Encoding:, Subroutine Call Using WREG = 0100. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update",
    "PIC18F2420/2520/4420/4520\nW, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return",
    "PIC18F2420/2520/4420/4520\nstack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:,",
    "PIC18F2420/2520/4420/4520\nSubroutine Call Using WREG = Q Cycle Activity:. Q1, Subroutine Call Using WREG = Q2. Q1, Subroutine Call Using WREG = Q3. Q1, Subroutine Call Using WREG = . Q1, Subroutine Call Using WREG = Q4. Decode, Subroutine Call Using WREG = . Decode, Subroutine Call Using WREG = Read WREG. Decode, Subroutine Call Using WREG = PUSHPCto stack. Decode, Subroutine Call Using WREG = No operation. No, Subroutine Call Using WREG = operation. No, Subroutine Call Using WREG = No operation. No, Subroutine Call Using WREG = No operation. No, Subroutine Call Using WREG = No operation\nExample:\nHERE\nCALLW",
    "Before Instruction\nPC\n=\naddress (HERE)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nAfter Instruction\nPC\n=\n001006h\nTOS\n=\naddress (HERE + 2)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3\nDecode, Determine source addr = No operation No dummy read. Decode, Determine source addr = No operation. Decode, Read source reg = Write register 'f' (dest)",
    "Before Instruction\nBefore Instruction, MOVSF = . Before Instruction, [05h], REG2 = . FSR2, MOVSF = =. FSR2, [05h], REG2 = 80h. Contents of 85h, MOVSF = =. Contents of 85h, [05h], REG2 = 33h. REG2, MOVSF = =. REG2, [05h], REG2 = 11h. After Instruction, MOVSF = . After Instruction, [05h], REG2 = . FSR2, MOVSF = =. FSR2, [05h], REG2 = 80h. Contents of 85h, MOVSF = =. Contents of 85h, [05h], REG2 = 33h. REG2, MOVSF = =. REG2, [05h], REG2 = 33h",
    "Before Instruction\nSyntax:, Move Indexed to f = MOVSF. Syntax:, Move Indexed to f = [z s ], f d. Syntax:, Move Indexed to f = . Syntax:, Move Indexed to f = . Operands:, Move Indexed to f = 0 \uf0a3 z s \uf0a3 127 0 \uf0a3 f d \uf0a3 4095. Operands:, Move Indexed to f = 0 \uf0a3 z s \uf0a3 127 0 \uf0a3 f d \uf0a3 4095. Operands:, Move Indexed to f = . Operands:, Move Indexed to f = . Operation:, Move Indexed to f = ((FSR2) + z s ) \uf0ae f d. Operation:, Move Indexed to f = ((FSR2) + z s ) \uf0ae f d. Operation:, Move Indexed to f = . Operation:, Move Indexed to f = . Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = . Status Affected:, Move Indexed to f = . Status Affected:, Move Indexed to f = . Encoding: 1st word (source), Move Indexed to f = 1110. Encoding: 1st word (source), Move Indexed to f = 1011. Encoding: 1st word (source), Move Indexed to f =",
    "Before Instruction\n0zzz. Encoding: 1st word (source), Move Indexed to f = zzzz s. 2nd word (destin.), Move Indexed to f = 1111. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff d\nDescription:\nThe contents of the source register are moved to destination register 'f d '. The actual address of the source register is determined by adding the 7-bit literal offset 'z s ' in the first word to the value of FSR2. The address of the destination register is specified by the 12-bit literal 'f d ' in the second word. Both addresses can be anywhere in the 4096-byte data space (000h to FFFh).\nThe MOVSF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h.\n2\n2\nQ4",
    "PIC18F2420/2520/4420/4520\nMOVSS",
    "Move Indexed to Indexed\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\n1st word (source) 2nd word (dest.)\nDescription\nWords:\nCycles:\nMOVSS   [z s ], [z d ]\n0 \uf0a3 z s \uf0a3 127\n0 \uf0a3 z d \uf0a3 127\n((FSR2) + z s ) \uf0ae ((FSR2) + z d )\nNone\n1110\n1011\n1zzz",
    "Move Indexed to Indexed\nSyntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \uf020\uf0a3\uf020 k \uf0a3 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \uf020\uf0a3\uf020 k \uf0a3 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \uf020\uf0a3\uf020 k \uf0a3 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \uf020\uf0a3\uf020 k \uf0a3 255. Operation:, Store Literal at FSR2, Decrement FSR2 = k \uf0ae (FSR2), FSR2 - 1 \uf0ae FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \uf0ae (FSR2), FSR2 - 1 \uf0ae FSR2. Operation:, Store Literal at FSR2, Decrement",
    "Move Indexed to Indexed\nFSR2 = k \uf0ae (FSR2), FSR2 - 1 \uf0ae FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \uf0ae (FSR2), FSR2 - 1 \uf0ae FSR2. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1111. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1010. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk\n1111\nxxxx xzzz\nzzzzs zzzzd",
    "Move Indexed to Indexed\nThe contents of the source register are moved to the destination register. The addresses of the source and destination registers are determined by adding the 7-bit literal offsets 'z s ' or 'z d ', respectively, to the value of FSR2. Both registers can be located anywhere in the 4096-byte data memory space (000h to FFFh).\nThe MOVSS instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h. If the resultant destination address points to an indirect addressing register, the instruction will execute as a NOP .\n2\n2\nQ Cycle Activity:\nDecode, Q2 = Determine source addr. Decode, Q3 = Determine source addr. Decode, Q4 = Read source reg. Decode, Q2 = Determine dest addr. Decode, Q3 = Determine dest addr. Decode, Q4 = Write to dest reg",
    "Example:\nMOVSS [05h], [06h]\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n=\n33h\nContents\nof 86h\n= 11h\nAfter Instruction\nFSR2\n=\n80h\nContents\nof 85h\n=\n33h\nContents\nof 86h\n= 33h\nDescription:\nThe 8-bit literal 'k' is written to the data memory address specified by FSR2. FSR2 is decremented by 1 after the operation. This instruction allows users to push values onto a software stack.\nWords:\nCycles:\nQ Cycle Activity:\n1\n1\nDecode, Q2 = Read 'k'. Decode, Q3 = Process data. Decode, Q4 = Write to destination\nExample:\nPUSHL 08h\nBefore Instruction FSR2H:FSR2L Memory (01ECh)\n=\n01ECh\n= 00h\nAfter Instruction\nFSR2H:FSR2L\n=\n01EBh\nMemory (01ECh)\n= 08h",
    "PIC18F2420/2520/4420/4520\nSyntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operation:, Subtract Literal from FSR = FSR(f) - k \uf0ae FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \uf0ae FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \uf0ae FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \uf0ae FSRf. Status Affected:, Subtract Literal from FSR = None. Status Affected:,",
    "PIC18F2420/2520/4420/4520\nSubtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Encoding:, Subtract Literal from FSR = 1110. Encoding:, Subtract Literal from FSR = 1001. Encoding:, Subtract Literal from FSR = ffkk. Encoding:, Subtract Literal from FSR = kkkk. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Words:,",
    "PIC18F2420/2520/4420/4520\nSubtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q1, Subtract Literal from FSR = Q2. Q1, Subtract Literal from FSR = Q3. Q1, Subtract Literal from FSR = . Q1, Subtract Literal from FSR = Q4. Decode, Subtract Literal from FSR = Read register",
    "PIC18F2420/2520/4420/4520\n'f'. Decode, Subtract Literal from FSR = Process Data. Decode, Subtract Literal from FSR = . Decode, Subtract Literal from FSR = Write to destination",
    "Example:\nSUBFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n03DCh",
    "Example:\nSyntax:, Subtract Literal from FSR2 and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2 and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2 and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2 and Return = SUBULNK k. Operands:, Subtract Literal from FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operation:, Subtract Literal from FSR2 and Return = FSR2 - k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Subtract Literal from FSR2 and Return = FSR2 - k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Subtract Literal from FSR2 and Return = FSR2 - k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Subtract Literal from FSR2 and Return =",
    "Example:\nFSR2 - k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Status Affected:, Subtract Literal from FSR2 and Return = None. Status Affected:, Subtract Literal from FSR2 and Return = None. Status Affected:, Subtract Literal from FSR2 and Return = None. Status Affected:, Subtract Literal from FSR2 and Return = None. Encoding:, Subtract Literal from FSR2 and Return = 1110. Encoding:, Subtract Literal from FSR2 and Return = 1001. Encoding:, Subtract Literal from FSR2 and Return = 11kk. Encoding:, Subtract Literal from FSR2 and Return = kkkk. Description:, Subtract Literal from FSR2 and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2..",
    "Example:\nDescription:, Subtract Literal from FSR2 and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2 and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2 and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction",
    "Example:\ntakes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Words:, Subtract Literal from FSR2 and Return = 1. Words:, Subtract Literal from FSR2 and Return = 1. Words:, Subtract Literal from FSR2 and Return = 1. Words:, Subtract Literal from FSR2 and Return = 1. Cycles:, Subtract Literal from FSR2 and Return = 2. Cycles:, Subtract Literal from FSR2 and Return = 2. Cycles:, Subtract Literal from FSR2 and Return = 2. Cycles:, Subtract Literal from FSR2 and Return = 2. Q Cycle Activity:, Subtract Literal from FSR2 and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2 and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2 and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from",
    "Example:\nFSR2 and Return = Q Cycle Activity:. Q1, Subtract Literal from FSR2 and Return = . Q1, Subtract Literal from FSR2 and Return = Q2. Q1, Subtract Literal from FSR2 and Return = Q3. Q1, Subtract Literal from FSR2 and Return = Q4. , Subtract Literal from FSR2 and Return = Decode. , Subtract Literal from FSR2 and Return = Read register 'f'. , Subtract Literal from FSR2 and Return = Process Data. , Subtract Literal from FSR2 and Return = Write to destination. No, Subtract Literal from FSR2 and Return = Operation. No, Subtract Literal from FSR2 and Return = No Operation. No, Subtract Literal from FSR2 and Return = No Operation. No, Subtract Literal from FSR2 and Return = No Operation\nSUBULNK 23h\nBefore Instruction\nFSR2\n= 03FFh\nPC\n=\n0100h\nAfter Instruction\nFSR2\n=\n03DCh\nPC\n=\n(TOS)",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nNote:\nEnabling the PIC18 instruction set extension may cause legacy applications to behave erratically or fail entirely.\nIn addition to eight new commands in the extended set, enabling  the  extended  instruction  set  also  enables Indexed Literal Offset Addressing mode ( Section 5.5.1 'Indexed Addressing with Literal Offset' ). This has a significant impact on the way that many commands of the standard PIC18 instruction set are interpreted.\nWhen the extended set is disabled, addresses embedded in opcodes are treated as literal memory locations: either as a location in the Access Bank ('a' = 0 ), or in a GPR bank designated by the BSR ('a' = 1 ). When the extended instruction set is enabled and 'a' = 0 ,  however, a file register argument  of  5Fh  or  less  is interpreted as an offset from the pointer value in FSR2 and not as a literal address. For practical purposes, this means that all instructions that use the Access RAM bit as  an  argument  -  that  is,  all  byte-oriented  and  bitoriented instructions, or almost half of the core PIC18 instructions -may behave differently when the extended instruction set is enabled.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the content of FSR2 is 00h, the boundaries of the Access RAM are essentially remapped to their original values.  This  may  be  useful  in  creating  backward compatible code. If this technique is used, it may be necessary  to  save  the  value  of  FSR2  and  restore  it when moving back and forth between C and assembly routines in order to preserve the Stack Pointer. Users must also keep in mind the syntax requirements of the extended instruction set (see Section 24.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' ).\nAlthough the Indexed Literal Offset Addressing mode can  be  very  useful  for  dynamic  stack  and  pointer manipulation, it can also be very annoying if a simple arithmetic operation is carried out on  the wrong register. Users who are accustomed to the PIC18 programming must keep in mind that, when the extended instruction set is enabled, register addresses of 5Fh or less are used for Indexed Literal Offset Addressing.\nRepresentative examples of typical byte-oriented and bit-oriented  instructions  in  the  Indexed  Literal  Offset Addressing mode are provided on the following page to show how execution is affected. The operand conditions  shown  in  the  examples  are  applicable  to  all instructions of these types.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the extended instruction set is enabled, the file register argument, 'f', in the standard byte-oriented and bit-oriented commands is replaced with the literal offset value, 'k'. As already noted, this occurs only when 'f' is less than or equal to 5Fh. When an offset value is used, it must be indicated by square brackets ('[ ]'). As with the extended instructions, the use of brackets indicates to the compiler that the value is to be interpreted as an index  or  an  offset.  Omitting  the  brackets,  or  using  a value greater than 5Fh within brackets, will generate an error in the MPASM Assembler.\nIf the index argument is properly bracketed for Indexed Literal Offset Addressing, the Access RAM argument is never specified; it will automatically be assumed to be ' 0 '. This is in contrast to standard operation (extended instruction set disabled) when 'a' is set on the basis of the  target  address.  Declaring  the Access  RAM  bit  in this  mode  will  also  generate  an  error  in  the  MPASM Assembler.\nThe destination argument, 'd', functions as before.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nIn the latest versions  of the MPASM  assembler, language support for the extended instruction set must be  explicitly  invoked.  This  is  done  with  either  the command line  option, /y ,  or  the  PE  directive  in  the source listing.",
    "24.2.4 CONSIDERATIONS WHEN ENABLING THE EXTENDED INSTRUCTION SET\nIt is important to note that the extensions to the instruction set may not be beneficial to all users. In particular, users who are not writing code that uses a software stack may not benefit from using the extensions to the instruction set.\nAdditionally, the Indexed  Literal Offset  Addressing mode  may  create  issues  with  legacy  applications written to the PIC18  assembler.  This  is  because instructions in the legacy code may attempt to address registers in the Access Bank below 5Fh. Since these addresses  are  interpreted  as  literal  offsets  to  FSR2 when  the  instruction  set  extension  is  enabled,  the application  may  read  or  write  to  the  wrong  data addresses.\nWhen porting an application to the PIC18F2420/2520/ 4420/4520, it is very important to consider the type of code. A large, re-entrant application that is written in 'C' and would benefit from efficient compilation will do well when  using  the  instruction  set  extensions.  Legacy applications that heavily use the Access Bank will most likely  not  benefit  from  using  the  extended  instruction set.",
    "ADD W to Indexed (Indexed Literal Offset mode)\nSyntax:\nADDWF      [k] {,d}\nOperands:\n0 \uf0a3 k \uf0a3 95\nd \uf0ce [0,1]\nOperation:\n(W) + ((FSR2) + k) \uf0ae dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0010\n01d0\nkkkk\nkkkk\nDescription:\nThe contents of W are added to the contents of the register indicated by FSR2, offset by the value 'k'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead 'k'\nProcess\nData\nWrite to\ndestination",
    "Example:\nADDWF\n[OFST] , 0\nBefore Instruction\nW\n=\n17h\nOFST\n=\n2Ch\nFSR2\n=\n0A00h\nContents\nof 0A2Ch\n=\n20h\nAfter Instruction\nW\n= 37h\nContents\nof 0A2Ch\n= 20h",
    "Example:\nSyntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 f \uf0a3 95 0 \uf0a3 b \uf0a3 7. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 f \uf0a3 95 0 \uf0a3 b \uf0a3 7. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 f \uf0a3 95 0 \uf0a3 b \uf0a3 7. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 f \uf0a3 95 0 \uf0a3 b \uf0a3 7. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 f \uf0a3 95 0 \uf0a3 b \uf0a3 7. Operation:, (Indexed Literal Offset mode) = 1 \uf0ae ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \uf0ae ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \uf0ae ((FSR2) + k)<b>.",
    "Example:\nOperation:, (Indexed Literal Offset mode) = 1 \uf0ae ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \uf0ae ((FSR2) + k)<b>. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Encoding:, (Indexed Literal Offset mode) = 1000. Encoding:, (Indexed Literal Offset mode) = bbb0. Encoding:, (Indexed Literal Offset mode) = bbb0. Encoding:, (Indexed Literal Offset mode) = kkkk. Encoding:, (Indexed Literal Offset mode) = kkkk. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:,",
    "Example:\n(Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:,",
    "Example:\n(Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q1, (Indexed Literal Offset mode) = Q2. Q1, (Indexed Literal Offset mode) = Q2. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q4. Decode, (Indexed Literal Offset mode) = Read register 'f'. Decode, (Indexed Literal Offset mode) = Read register 'f'. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Write to destination. Example:, (Indexed Literal Offset mode) = BSF. Example:, (Indexed Literal Offset mode) = . Example:, (Indexed Literal Offset mode) = [FLAG_OFST],. Example:, (Indexed Literal Offset mode) = [FLAG_OFST],. Example:, (Indexed Literal Offset mode) = 7. Before Instruction, (Indexed Literal Offset mode) = Before",
    "Example:\nInstruction. Before Instruction, (Indexed Literal Offset mode) = =. Before Instruction, (Indexed Literal Offset mode) = . Before Instruction, (Indexed Literal Offset mode) = . Before Instruction, (Indexed Literal Offset mode) = . FLAG_OFST FSR2 Contents, (Indexed Literal Offset mode) = FLAG_OFST FSR2 Contents. FLAG_OFST FSR2 Contents, (Indexed Literal Offset mode) = =. FLAG_OFST FSR2 Contents, (Indexed Literal Offset mode) = 0A00h 55h. FLAG_OFST FSR2 Contents, (Indexed Literal Offset mode) = 0A00h 55h. FLAG_OFST FSR2 Contents, (Indexed Literal Offset mode) = . After Instruction Contents, (Indexed Literal Offset mode) = After Instruction Contents. After Instruction Contents, (Indexed Literal Offset mode) = =. After Instruction Contents, (Indexed Literal Offset mode) = . After Instruction Contents, (Indexed Literal Offset mode) = . After Instruction Contents, (Indexed Literal Offset mode) = ",
    "Example:\nSyntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status",
    "Example:\nAffected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Encoding:, Set Indexed (Indexed Literal Offset mode) = 0110. Encoding:, Set Indexed (Indexed Literal Offset mode) = 1000. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Words:, Set Indexed",
    "Example:\n(Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q1, Set Indexed (Indexed Literal Offset mode) = Q2. Q1, Set Indexed (Indexed Literal Offset mode) = Q3. Q1, Set Indexed (Indexed Literal Offset mode) = . Q1, Set Indexed (Indexed Literal Offset mode) = Q4. Decode, Set Indexed (Indexed Literal Offset mode) = Read",
    "Example:\n'k'. Decode, Set Indexed (Indexed Literal Offset mode) = Process Data. Decode, Set Indexed (Indexed Literal Offset mode) = . Decode, Set Indexed (Indexed Literal Offset mode) = Write register\nExample:\nSETF\n[OFST]\nBefore Instruction\nOFST\n=\n2Ch\nFSR2\n=\n0A00h\nContents\nof 0A2Ch\n= 00h\nAfter Instruction\nContents\nof 0A2Ch\n= FFh",
    "24.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThe latest versions of Microchip's software tools have been designed to fully support the extended instruction set of the PIC18F2420/2520/4420/4520  family of devices.  This  includes  the  MPLAB  C18  C  compiler, MPASM  assembly  language  and  MPLAB  Integrated Development Environment (IDE).\nWhen selecting a target device for software development, MPLAB IDE will automatically set default Configuration bits for that device. The default setting for the XINST  Configuration bit is ' 0 ', disabling the extended  instruction  set  and  Indexed  Literal  Offset Addressing mode. For proper execution of applications developed to take advantage of the extended instruction set, XINST must be set during programming.\nTo develop software for the extended instruction set, the user must enable support for the instructions and the Indexed Addressing mode in their language tool(s). Depending on the environment being used, this may be done in several ways:\n\u00b7 A menu option, or dialog box within the environment, that allows the user to configure the language tool and its settings for the project\n\u00b7 A command line option\n\u00b7 A directive in the source code",
    "24.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThese options vary between different compilers, assemblers and development environments. Users are encouraged to review the documentation accompanying  their  development  systems  for  the  appropriate information.",
    "25.0 DEVELOPMENT SUPPORT\nMove a design from concept to production in record time with Microchip's award-winning development tools. Microchip tools work together to provide state of the art debugging for any project with easy-to-use Graphical User Interfaces (GUIs) in our free MPLAB \u00ae  X and Atmel Studio Integrated Development Environments (IDEs), and our code generation tools. Providing  the  ultimate  ease-of-use  experience,  Microchip's  line  of  programmers,  debuggers  and  emulators  work seamlessly with our software tools. Microchip development boards help evaluate the best silicon device for an application, while our line of third party tools round out our comprehensive development tool solutions.\nMicrochip's MPLAB X and Atmel Studio ecosystems provide a variety of embedded design tools to consider, which support multiple devices, such as PIC \u00ae  MCUs, AVR \u00ae  MCUs, SAM MCUs and dsPIC \u00ae  DSCs. MPLAB X tools are compatible with Windows \u00ae , Linux \u00ae  and Mac \u00ae operating systems while Atmel Studio tools are compatible with Windows.\nGo to the following website for more information and details:\nhttps://www.microchip.com/development-tools/",
    "PIC18F2420/2520/4420/4520\nNOTES:",
    "Absolute Maximum Ratings (\u2020)\nAmbient temperature under bias.............................................................................................................-40\u00b0C to +125\u00b0C",
    "Absolute Maximum Ratings (\u2020)\nStorage temperature .............................................................................................................................. -65\u00b0C to +150\u00b0C\nVoltage on any pin with respect to VSS (except VDD and MCLR) ................................................... -0.3V to (VDD + 0.3V)",
    "Absolute Maximum Ratings (\u2020)\nVoltage on VDD with respect to VSS  .........................................................................................................  -0.3V to +7.5V\nVoltage on MCLR with respect to VSS (Note 2)\n......................................................................................... 0V to +13.25V\nTotal power dissipation (Note 1)",
    "Absolute Maximum Ratings (\u2020)\n...............................................................................................................................1.0W",
    "Absolute Maximum Ratings (\u2020)\nMaximum current out of VSS pin ...........................................................................................................................300 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current into VDD pin ..............................................................................................................................250 mA\nInput clamp current, IIK (VI < 0 or VI > VDD)\n\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e \uf0b1\n20 mA\nOutput clamp current, IOK (VO < 0 or VO > VDD)\n\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e \uf0b1\n20 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum output current sunk by any I/O pin..........................................................................................................25 mA\nMaximum output current sourced by any I/O pin ....................................................................................................25 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current sunk by all ports .......................................................................................................................200 mA \uf020\nMaximum current sourced by all ports ..................................................................................................................200 mA",
    "Absolute Maximum Ratings (\u2020)\nNote 1: Power dissipation is calculated as follows:\nPdis = VDD x {IDD -\uf0e5 IOH} + \uf0e5 {(VDD - VOH) x IOH} + \uf0e5 (VOL x IOL)\n- 2: Voltage spikes below VSS at the MCLR/VPP/RE3 pin, inducing currents greater than 80 mA, may cause latch-up. Thus, a series resistor of 50-100 \uf057 need to be used when applying a 'low' level to the MCLR/VPP/ RE3 pin, rather than pulling this pin directly to VSS.\n\u2020 NOTICE: Stresses above those listed under 'Absolute Maximum Ratings' may cause permanent damage to the device. This is a stress rating only and functional operation of the device at those or any other conditions above those indicated in the operation listings of this specification is not implied. Exposure to maximum rating conditions for extended periods may affect device reliability.",
    "PIC18F2420/2520/4420/4520\nFIGURE 26-2: PIC18F2420/2520/4420/4520 VOLTAGE-FREQUENCY GRAPH (EXTENDED)",
    "26.1 DC Characteristics:\nSupply Voltage PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nPIC18F2420/2520/4420/4520\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.1 DC Characteristics:\nD001, Symbol = VDD. D001, Characteristic = Supply Voltage. D001, Min = Supply Voltage. D001, Typ = Supply Voltage. D001, Max = Supply Voltage. D001, Units = Supply Voltage. D001, Conditions = Supply Voltage. D001, Symbol = VDD. D001, Characteristic = PIC18LF2X2X/4X20. D001, Min = 2.0. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = HS, XT, RC and LP Oscillator mode. D001, Symbol = VDD. D001, Characteristic = PIC18F2X20/4X20. D001, Min = 4.2. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = . D002, Symbol = VDR. D002, Characteristic = RAM Data Retention Voltage (1). D002, Min =",
    "26.1 DC Characteristics:\n1.5. D002, Typ = -. D002, Max = -. D002, Units = V. D002, Conditions = . D003, Symbol = VPOR. D003, Characteristic = VDD Start Voltage to Ensure Internal Power-on Reset Signal. D003, Min = -. D003, Typ = -. D003, Max = 0.7. D003, Units = V. D003, Conditions = See section on Power-on Reset for details. D004, Symbol = SVDD. D004, Characteristic = VDD Rise Rate to Ensure Internal Power-on Reset Signal. D004, Min = 0.05. D004, Typ = -. D004, Max = -. D004, Units = V/ms. D004, Conditions = See section on Power-on Reset for details. D005, Symbol = VBOR. D005, Characteristic = Brown-out Reset Voltage. D005, Min = Brown-out Reset Voltage. D005, Typ = Brown-out Reset Voltage. D005, Max =",
    "26.1 DC Characteristics:\nBrown-out Reset Voltage. D005, Units = Brown-out Reset Voltage. D005, Conditions = Brown-out Reset Voltage. D005, Symbol = VBOR. D005, Characteristic = PIC18LF2X2X/4X20. D005, Min = PIC18LF2X2X/4X20. D005, Typ = PIC18LF2X2X/4X20. D005, Max = PIC18LF2X2X/4X20. D005, Units = PIC18LF2X2X/4X20. D005, Conditions = PIC18LF2X2X/4X20. D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 11. D005, Min = 2.00. D005, Typ = 2.11. D005, Max = 2.22. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 10. D005,",
    "26.1 DC Characteristics:\nMin = 2.65. D005, Typ = 2.79. D005, Max = 2.93. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = All Devices. D005, Min = All Devices. D005, Typ = All Devices. D005, Max = All Devices. D005, Units = All Devices. D005, Conditions = All Devices. D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 01 (2). D005, Min = 4.11. D005, Typ = 4.33. D005, Max = 4.55. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 00. D005, Min = 4.36. D005, Typ = 4.59. D005, Max = 4.82. D005, Units = V. D005,",
    "26.1 DC Characteristics:\nConditions = \nLegend: Shading of rows is to assist in readability of the table.\nNote\n1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n2: With BOR enabled, full-speed operation (FOSC = 40 MHz) is supported until a BOR occurs. This is valid although VDD may be below the minimum voltage for this frequency.",
    "PIC18F2420/2520/4420/4520\n26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nPIC18F2420/2520/4420/4520\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F2420/2520/4420/4520\n, Device = Power-Down Current (I PD) (1). , Typ = Power-Down Current (I PD) (1). , Max = Power-Down Current (I PD) (1). , Units = Power-Down Current (I PD) (1). , Conditions = Power-Down Current (I PD) (1). , Conditions = Power-Down Current (I PD) (1). , Device = PIC18LF2X2X/4X20. , Typ = 0.1. , Max = 0.5. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = . , Typ = 0.1. , Max = 0.5. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = . , Typ = 0.2. , Max = 2.5. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V ( Sleep",
    "PIC18F2420/2520/4420/4520\nmode). , Device = PIC18LF2X2X/4X20. , Typ = 0.1. , Max = 0.7. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = . , Typ = 0.1. , Max = 0.7. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = . , Typ = 0.3. , Max = 3.5. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = All devices. , Typ = 0.1. , Max = 1.0. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = . , Typ = 0.2. , Max = 1.0. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD =",
    "PIC18F2420/2520/4420/4520\n5.0V ( Sleep mode). , Device = . , Typ = 0.7. , Max = 10. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = Extended devices only. , Typ = 10. , Max = 100. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode)\nLegend:\nShading of rows is to assist in readability of the table.",
    "PIC18F2420/2520/4420/4520\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2420/2520/4420/4520\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nPIC18F2420/2520/4420/4520\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply, Device = Current (I DD) (2). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 13. , Max = 25. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 13. , Max = 22. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 14. , Max = 25. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 42. , Max = 61. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 34. , Max = 46. , Units = \uf06d A. , Conditions = +25\u00b0C.",
    "26.2 DC Characteristics:\n, Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 28. , Max = 45. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 103. , Max = 160. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 82. , Max = 130. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 67. , Max = 120. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 71. , Max = 230. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 320. , Max = 440. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 330. , Max",
    "26.2 DC Characteristics:\n= 440. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 330. , Max = 440. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 630. , Max = 800. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 590. , Max = 720. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 570. , Max = 700. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.2. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.0. , Max =",
    "26.2 DC Characteristics:\n1.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.5. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 1.0. , Max = 1.5. , Units = mA. , Conditions = +125\u00b0C. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.",
    "26.2 DC Characteristics:\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.",
    "26.2 DC Characteristics:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n26.2 DC Characteristics:\nPIC18LF2420/2520/4420/4520 (Industrial)\nPIC18F2420/2520/4420/4520",
    "PIC18F2420/2520/4420/4520\nPower-Down and Supply Current",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nSupply, Device = Current (I DD) (2). Supply, Typ = Current (I DD) (2). Supply, Max = Current (I DD) (2). Supply, Units = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). , Device = PIC18LF2X2X/4X20. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = +85\u00b0C. , Conditions =",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n. , Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . ,",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nDevice = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 2.9. , Max = 5. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 3.1. , Max = 5. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 3.6. , Max = 9.5. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device =",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2X2X/4X20. , Typ = 4.5. , Max = 8. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 4.8. , Max = 8. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 5.8. , Max = 15. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.2. , Max = 16. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.8. , Max = 16. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 11.0. ,",
    "PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nMax = 35. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 21. , Max = 160. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nPIC18F2420/2520/4420/4520\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply, Device = Current (I DD) (2). Supply, Typ = Current (I DD) (2). Supply, Max = Current (I DD) (2). Supply, Units = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). , Device = PIC18LF2X2X/4X20. , Typ = 165. , Max = 250. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 175. , Max = 250. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 190. , Max = 270. , Units = \uf06d A. , Conditions = +85\u00b0C. ,",
    "26.2 DC Characteristics:\nConditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LF2X2X/4X20. , Typ = 250. , Max = 360. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 270. , Max = 360. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 290. , Max = 380. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = All devices. , Typ = 500. , Max = 700. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions",
    "26.2 DC Characteristics:\n= VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 520. , Max = 700. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 550. , Max = 700. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = Extended devices only. , Typ = 0.6. , Max = 1. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LF2X2X/4X20. , Typ = 340. , Max = 500. , Units = \uf06d A. , Conditions = -40\u00b0C.",
    "26.2 DC Characteristics:\n, Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 350. , Max = 500. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 360. , Max = 500. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LF2X2X/4X20. , Typ = 520. , Max = 800. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 540. , Max = 800. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Conditions = FOSC",
    "26.2 DC Characteristics:\n= 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 580. , Max = 850. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = All devices. , Typ = 1.0. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE",
    "26.2 DC Characteristics:\nmode, INTOSC source). , Device = Extended devices only. , Typ = 1.1. , Max = 2.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source)",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n26.2 DC Characteristics:\nPIC18LF2420/2520/4420/4520 (Industrial)\nPIC18F2420/2520/4420/4520",
    "PIC18F2420/2520/4420/4520\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F2420/2520/4420/4520\n, Device = Supply Current (I DD) (2). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 250. , Max = 350. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 260. , Max = 350. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 250. , Max = 350. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 550. , Max = 650. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions =",
    "PIC18F2420/2520/4420/4520\nVDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 480. , Max = 640. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 460. , Max = 600. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 1.2. , Max = 1.5. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.3. , Units =",
    "PIC18F2420/2520/4420/4520\nmA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 1.0. , Max = 3.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 0.72. , Max = 1.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 0.74. , Max = 1.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 0.74. , Max = 1.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = .",
    "PIC18F2420/2520/4420/4520\n, Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 2.7. , Max = 4.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 2.6. , Max =",
    "PIC18F2420/2520/4420/4520\n4.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 4.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 2.6. , Max = 5.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = Extended devices only. , Typ = 8.4. , Max = 13. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = Extended devices only. , Typ = 11. , Max = 16. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions",
    "PIC18F2420/2520/4420/4520\n= -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V.",
    "PIC18F2420/2520/4420/4520\n, Conditions = \nLegend: Shading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2420/2520/4420/4520\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nPIC18F2420/2520/4420/4520\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.2 DC Characteristics:\n, Device = Supply Current (I DD) (2). , Typ = Supply Current (I DD) (2). , Max = Supply Current (I DD) (2). , Units = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Device = All devices. , Typ = 7.5. , Max = 10. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.4. , Max = 10. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.3. , Max = 10. , Units = mA. , Conditions",
    "26.2 DC Characteristics:\n= +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 8.0. , Max = 12. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 12. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 12. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 9.7. ,",
    "26.2 DC Characteristics:\nMax = 12. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 10. , Max = 14. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices.",
    "26.2 DC Characteristics:\n, Typ = 15. , Max = 20. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL )",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n26.2 DC Characteristics:\nPIC18LF2420/2520/4420/4520\n(Industrial)\nPIC18F2420/2520/4420/4520",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 65. , Max = 100. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 65. , Max = 100. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 70. , Max = 110. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2X2X/4X20. , Typ = 120. , Max = 140. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 120. , Max = 140. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 130. , Max = 160. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 230. , Max = 300. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n= 235. , Max = 300. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 240. , Max = 300. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 260. , Max = 500. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 260. , Max = 360. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 255. , Max = 360. , Units = \uf06d A. , Conditions = +25\u00b0C.",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n, Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 270. , Max = 360. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 420. , Max = 620. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 430. , Max = 620. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X2X/4X20. , Typ = 450. , Max = 650. , Units = \uf06d A. , Conditions =",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n+85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 1. , Max = 1.3. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = Extended devices",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nonly. , Typ = 2.8. , Max = 6.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = Extended devices only. , Typ = 4.3. , Max = 8.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 6.0. , Max = 10. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 6.2. , Max = 10. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 6.6. , Max = 10. , Units = mA.",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n, Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 8.1. , Max = 13. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 9.1. , Max = 12. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 8.3. , Max = 12. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nPIC18F2420/2520/4420/4520\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply Current (I DD) (2), Typ = Supply Current (I DD) (2). Supply Current (I DD) (2), Max = Supply Current (I DD) (2). Supply Current (I DD) (2), Units = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). PIC18LF2X2X/4X20, Typ = 10. PIC18LF2X2X/4X20, Max = 25. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = -40\u00b0C (3). PIC18LF2X2X/4X20, Conditions = VDD = 2.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) (",
    "26.2 DC Characteristics:\nSEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 11. PIC18LF2X2X/4X20, Max = 21. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +25\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 2.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 12. PIC18LF2X2X/4X20, Max = 25. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +85\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 2.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) (",
    "26.2 DC Characteristics:\nSEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 42. PIC18LF2X2X/4X20, Max = 57. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = -40\u00b0C (3). PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 33. PIC18LF2X2X/4X20, Max = 45. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +25\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz",
    "26.2 DC Characteristics:\n(3) ( SEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 29. PIC18LF2X2X/4X20, Max = 45. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +85\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 105. All devices, Max = 150. All devices, Units = \uf06d A. All devices, Conditions = -40\u00b0C (3). All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 81. All devices, Max = 130. All devices, Units = \uf06d A. All devices, Conditions = +25\u00b0C. All devices, Conditions",
    "26.2 DC Characteristics:\n= VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 67. All devices, Max = 130. All devices, Units = \uf06d A. All devices, Conditions = +85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 3.0. PIC18LF2X2X/4X20, Max = 12. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = -40\u00b0C (3). PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ",
    "26.2 DC Characteristics:\n= 3.0. PIC18LF2X2X/4X20, Max = 6. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +25\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 3.7. PIC18LF2X2X/4X20, Max = 10. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +85\u00b0C. PIC18LF2X2X/4X20, Conditions = VDD = 3.0V. PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock).",
    "26.2 DC Characteristics:\nPIC18LF2X2X/4X20, Typ = 5.0. PIC18LF2X2X/4X20, Max = 15. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = -40\u00b0C (3). PIC18LF2X2X/4X20, Conditions = . PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LF2X2X/4X20, Typ = 5.4. PIC18LF2X2X/4X20, Max = 10. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +25\u00b0C. PIC18LF2X2X/4X20, Conditions = . PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock).",
    "26.2 DC Characteristics:\nPIC18LF2X2X/4X20, Typ = 6.3. PIC18LF2X2X/4X20, Max = 15. PIC18LF2X2X/4X20, Units = \uf06d A. PIC18LF2X2X/4X20, Conditions = +85\u00b0C. PIC18LF2X2X/4X20, Conditions = . PIC18LF2X2X/4X20, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 8.5. All devices, Max = 25. All devices, Units = \uf06d A. All devices, Conditions = -40\u00b0C (3). All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 9.0. All devices, Max = 20. All devices, Units = \uf06d A. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions =",
    "26.2 DC Characteristics:\nFOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 10.5. All devices, Max = 30. All devices, Units = \uf06d A. All devices, Conditions = +85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock)\nLegend: Shading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.",
    "26.2 DC Characteristics:\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "PIC18F2420/2520/4420/4520\n26.2\nDC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2420/2520/4420/4520\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F2420/2520/4420/4520\n, Device = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Typ = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Max = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Units = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 0.2. D026 ( \uf044 I AD), Max = 1.0. D026 ( \uf044 I",
    "PIC18F2420/2520/4420/4520\nAD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -40\u00b0C to +85\u00b0C. D026 ( \uf044 I AD), Conditions = VDD = 2.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting. D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 0.2. D026 ( \uf044 I AD), Max = 1.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -40\u00b0C to +85\u00b0C. D026 ( \uf044 I AD), Conditions = VDD = 3.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting. D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 0.2. D026 ( \uf044 I AD), Max = 1.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions",
    "PIC18F2420/2520/4420/4520\n= -40\u00b0C to +85\u00b0C. D026 ( \uf044 I AD), Conditions = VDD = 5.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting. D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 0.5. D026 ( \uf044 I AD), Max = 4.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -40\u00b0C to +125\u00b0C. D026 ( \uf044 I AD), Conditions = VDD = 5.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting. D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 1.3. D022 ( \uf044 I WDT), Max = 2.2. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I",
    "PIC18F2420/2520/4420/4520\nWDT), Conditions = VDD = 2.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 1.4. D022 ( \uf044 I WDT), Max = 2.2. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 2.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 1.6. D022 ( \uf044 I WDT), Max = 2.3. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 2.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044",
    "PIC18F2420/2520/4420/4520\nI WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 1.9. D022 ( \uf044 I WDT), Max = 3.5. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.0. D022 ( \uf044 I WDT), Max = 3.5. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.2. D022",
    "PIC18F2420/2520/4420/4520\n( \uf044 I WDT), Max = 3.5. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 3.0. D022 ( \uf044 I WDT), Max = 7.5. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 3.5. D022 ( \uf044 I WDT), Max = 7.5. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I",
    "PIC18F2420/2520/4420/4520\nWDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 3.5. D022 ( \uf044 I WDT), Max = 7.8. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 4.0. D022 ( \uf044 I WDT), Max = 10. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +125\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V.",
    "PIC18F2420/2520/4420/4520\nD022 ( \uf044 I WDT), Conditions = . D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 35. D022A ( \uf044 I BOR), Max = 50. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40\u00b0C to +85\u00b0C. D022A ( \uf044 I BOR), Conditions = VDD = 3.0V. D022A ( \uf044 I BOR), Conditions = . D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 40. D022A ( \uf044 I BOR), Max = 55. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40\u00b0C to +85\u00b0C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I",
    "PIC18F2420/2520/4420/4520\nBOR), Conditions = . D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 55. D022A ( \uf044 I BOR), Max = 65. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40\u00b0C to +125\u00b0C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I BOR), Conditions = . D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 0. D022A ( \uf044 I BOR), Max = 2. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40\u00b0C to +85\u00b0C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I BOR), Conditions =",
    "PIC18F2420/2520/4420/4520\nSleep mode, BOREN<1:0> = 10. D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 0. D022A ( \uf044 I BOR), Max = 5. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40\u00b0C to +125\u00b0C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I BOR), Conditions = Sleep mode, BOREN<1:0> = 10. D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 22. D022B ( \uf044 I LVD ), Max = 38. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \uf044 I LVD ), Conditions =",
    "PIC18F2420/2520/4420/4520\nVDD = 2.0V. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 25. D022B ( \uf044 I LVD ), Max = 40. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \uf044 I LVD ), Conditions = VDD = 3.0V. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 29. D022B ( \uf044 I LVD ), Max = 45. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \uf044 I LVD ), Conditions = VDD",
    "PIC18F2420/2520/4420/4520\n= 5.0V. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 30. D022B ( \uf044 I LVD ), Max = 45. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40\u00b0C to +125\u00b0C. D022B ( \uf044 I LVD ), Conditions = VDD = 5.0V. D022B ( \uf044 I LVD ), Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "PIC18F2420/2520/4420/4520\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2420/2520/4420/4520\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2420/2520/4420/4520 (Industrial) PIC18LF2420/2520/4420/4520 (Industrial) (Continued)\nPIC18LF2420/2520/4420/4520\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nPIC18F2420/2520/4420/4520\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nD025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 4.5. D025L ( \uf044 I OSCB), Max = 9.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -40\u00b0C (3). D025L ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 0.9. D025L ( \uf044 I OSCB), Max = 1.6. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -10\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044",
    "26.2 DC Characteristics:\nI OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 0.9. D025L ( \uf044 I OSCB), Max = 1.6. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +25\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 0.9. D025L ( \uf044 I OSCB), Max = 1.8. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +85\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device =",
    "26.2 DC Characteristics:\nTimer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 4.8. D025L ( \uf044 I OSCB), Max = 10. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -40\u00b0C (3). D025L ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 1.0. D025L ( \uf044 I OSCB), Max = 2.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -10\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator.",
    "26.2 DC Characteristics:\nD025L ( \uf044 I OSCB), Typ = 1.0. D025L ( \uf044 I OSCB), Max = 2.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +25\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 1.0. D025L ( \uf044 I OSCB), Max = 2.6. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +85\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I",
    "26.2 DC Characteristics:\nOSCB), Typ = 6.0. D025L ( \uf044 I OSCB), Max = 11. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -40\u00b0C (3). D025L ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 1.6. D025L ( \uf044 I OSCB), Max = 4.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = -10\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ =",
    "26.2 DC Characteristics:\n1.6. D025L ( \uf044 I OSCB), Max = 4.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +25\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \uf044 I OSCB), Device = Timer1 Oscillator. D025L ( \uf044 I OSCB), Typ = 1.6. D025L ( \uf044 I OSCB), Max = 4.0. D025L ( \uf044 I OSCB), Units = \uf06d A. D025L ( \uf044 I OSCB), Conditions = +85\u00b0C. D025L ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025L ( \uf044 I OSCB), Conditions = 32 kHz on Timer1\nLegend:\nShading of rows is to assist in readability of the table.",
    "26.2 DC Characteristics:\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "26.2 DC Characteristics:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "DC CHARACTERISTICS\nD030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Symbol = VIL. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Characteristic = Input Low Voltage I/O Ports: with TTL Buffer. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Min = VSS - VSS VSS VSS VSS VSS VSS VSS VSS. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Max = 0.15 VDD 0.8 0.2 VDD 0.3 VDD 0.8 0.2 VDD 0.3 VDD 0.2 VDD 0.3 0.3. D030 D030A D031 D031A D031B D032",
    "DC CHARACTERISTICS\nD033 D033A D033B D034, Units = V V V V V V V V V V. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Conditions = VDD < 4.5V 4.5V \uf0a3 VDD \uf0a3\uf020 5.5V I 2 C\u2122enabled SMBus enabled HS, HSPLL modes RC, EC modes (1) XT, LP modes. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Symbol = VIH. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Characteristic = OSC1 T13CKI Input High Voltage I/O Ports: with TTL Buffer. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Min = 0.25",
    "DC CHARACTERISTICS\nVDD + 0.8V 2.0 0.8 VDD 0.7 VDD 2.1 0.8 VDD 0.7 VDD 0.8 VDD. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Max = VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Units = V V V V V V V V V V V. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C, Conditions = VDD < 4.5V 4.5V \uf0a3 VDD \uf0a3\uf020 5.5V I 2 C enabled SMBus enabled HS, HSPLL modes. D044 D060, Symbol = I IL. D044 D060, Characteristic = OSC1 T13CKI Input Leakage",
    "DC CHARACTERISTICS\nI/O Ports. D044 D060, Min = 1.6 1.6 -. D044 D060, Max = \uf0b1 200 \uf0b1 50 \uf0b1 1. D044 D060, Units = nA nA \uf06d A. D044 D060, Conditions = XT, LP modes VDD < 5.5V, VSS \u2264 VPIN \u2264 VDD, Pin at VDD < 3V, VSS \u2264 VPIN \u2264 VDD, Pin at Vss \uf0a3\uf020 VPIN \uf0a3\uf020 VDD. , Symbol = . , Characteristic = Current (2,3). , Min = - -. , Max = \uf0b1 1. , Units = . , Conditions = high-impedance high-impedance. D061 D063, Symbol = . D061 D063, Characteristic = MCLR OSC1. D061 D063, Min = . D061 D063, Max = . D061 D063, Units = \uf06d A. D061 D063, Conditions = Vss \uf0a3\uf020 VPIN \uf0a3\uf020 VDD. D070, Symbol = I PU I PURB. D070, Characteristic = Weak Pull-up Current",
    "DC CHARACTERISTICS\nPORTB Weak Pull-up Current. D070, Min = 50. D070, Max = 400. D070, Units = \uf06d A. D070, Conditions = VDD = 5V, VPIN = VSS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3\uf020 TA \uf0a3 +85\u00b0C for industrial\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.",
    "DC CHARACTERISTICS\nD080, Symbol = VOL. D080, Characteristic = Output Low Voltage I/O Ports. D080, Min = -. D080, Max = 0.6. D080, Units = V. D080, Conditions = I OL = 8.5 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D083, Symbol = . D083, Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D083, Min = -. D083, Max = 0.6. D083, Units = V. D083, Conditions = I OL = 1.6 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D090, Symbol = VOH. D090, Characteristic = Output High Voltage (3) I/O Ports. D090, Min = VDD - 0.7. D090, Max = -. D090, Units = V. D090, Conditions = I OH = -3.0 mA, VDD = 4.5V, -40 \uf0b0 C to",
    "DC CHARACTERISTICS\n+85 \uf0b0 C. D092, Symbol = . D092, Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D092, Min = VDD - 0.7. D092, Max = -. D092, Units = V. D092, Conditions = I OH = -1.3 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D100, Symbol = COSC2. D100, Characteristic = OSC2 pin. D100, Min = -. D100, Max = 15. D100, Units = pF. D100, Conditions = In XT, HS and LP modes when external clock is used to drive OSC1. D101, Symbol = CIO. D101, Characteristic = All I/O pins and OSC2 (in RC mode). D101, Min = -. D101, Max = 50. D101, Units = pF. D101, Conditions = To meet the AC Timing Specifications. D102, Symbol = CB. D102, Characteristic = SCL,",
    "DC CHARACTERISTICS\nSDA. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = I 2 C\u2122Specification\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3\uf020 TA \uf0a3 +85\u00b0C for industrial\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial",
    "DC CHARACTERISTICS\n, Sym = . , Characteristic = Data EEPROM Memory. , Min = . , Typ\u2020 = . , Max = . , Units = . , Conditions = . D120, Sym = ED. D120, Characteristic = Byte Endurance. D120, Min = 100K. D120, Typ\u2020 = 1M. D120, Max = -. D120, Units = E/W. D120, Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D121, Sym = VDRW. D121, Characteristic = VDD for Read/Write. D121, Min = VMIN. D121, Typ\u2020 = -. D121, Max = 5.5. D121, Units = V. D121, Conditions = Using EECON to read/write VMIN = Minimum operating voltage. D122, Sym = TDEW. D122, Characteristic = Erase/Write Cycle Time. D122, Min = -. D122, Typ\u2020 = 4. D122, Max = -. D122, Units = ms. D122, Conditions = . D123,",
    "DC CHARACTERISTICS\nSym = TRETD. D123, Characteristic = Characteristic Retention. D123, Min = 40. D123, Typ\u2020 = -. D123, Max = -. D123, Units = Year. D123, Conditions = Provided no other specifications are violated. D124, Sym = TREF. D124, Characteristic = Number of Total Erase/Write Cycles before Refresh (1). D124, Min = 1M. D124, Typ\u2020 = 10M. D124, Max = -. D124, Units = E/W. D124, Conditions = -40\u00b0C to +85\u00b0C. D125, Sym = I DDP. D125, Characteristic = Supply Current during Programming. D125, Min = -. D125, Typ\u2020 = 10. D125, Max = -. D125, Units = mA. D125, Conditions = . , Sym = . , Characteristic = Program Flash Memory. , Min = . , Typ\u2020 = . , Max = . , Units = . , Conditions = . D130, Sym = EP.",
    "DC CHARACTERISTICS\nD130, Characteristic = Cell Endurance. D130, Min = 10K. D130, Typ\u2020 = 100K. D130, Max = -. D130, Units = E/W. D130, Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D131, Sym = VPR. D131, Characteristic = VDD for Read. D131, Min = VMIN. D131, Typ\u2020 = -. D131, Max = 5.5. D131, Units = V. D131, Conditions = VMIN = Minimum operating voltage. D132, Sym = VIE. D132, Characteristic = VDD for Block Erase. D132, Min = 3.0. D132, Typ\u2020 = -. D132, Max = 5.5. D132, Units = V. D132, Conditions = Using ICSP\u2122 port, +25 \uf0b0 C. D132A, Sym = VIW. D132A, Characteristic = VDD for Externally Timed Erase or Write. D132A, Min = 3.0. D132A, Typ\u2020 =",
    "DC CHARACTERISTICS\n-. D132A, Max = 5.5. D132A, Units = V. D132A, Conditions = Using ICSP\u2122 port, +25 \uf0b0 C. D132B, Sym = VPEW. D132B, Characteristic = VDD for Self-Timed Write. D132B, Min = VMIN. D132B, Typ\u2020 = -. D132B, Max = 5.5. D132B, Units = V. D132B, Conditions = VMIN = Minimum operating voltage. D133, Sym = TIE. D133, Characteristic = ICSP Block Erase Cycle Time. D133, Min = -. D133, Typ\u2020 = 4. D133, Max = -. D133, Units = ms. D133, Conditions = VDD \uf0b3 4.5V. D133A, Sym = TIW. D133A, Characteristic = ICSP Erase or Write Cycle Time (externally timed). D133A, Min = 1. D133A, Typ\u2020 = -. D133A, Max = -. D133A, Units",
    "DC CHARACTERISTICS\n= ms. D133A, Conditions = VDD \uf0b3 4.5V, +25\u00b0C. D133A, Sym = TIW. D133A, Characteristic = Self-Timed Write Cycle Time. D133A, Min = -. D133A, Typ\u2020 = 2. D133A, Max = -. D133A, Units = ms. D133A, Conditions = . D134, Sym = TRETD. D134, Characteristic = Characteristic Retention. D134, Min = 40. D134, Typ\u2020 = 100. D134, Max = -. D134, Units = Year. D134, Conditions = Provided no other specifications are violated. D135, Sym = I DDP. D135, Characteristic = Supply Current during Programming. D135, Min = -. D135, Typ\u2020 = 10. D135, Max = -. D135, Units = mA. D135, Conditions = ",
    "DC CHARACTERISTICS\n\u2020 Data in 'Typ' column is at 5.0V, 25\u00b0C unless otherwise stated. These parameters are for design guidance only and are not tested.\nNote 1: Refer to Section 7.8 'Using the Data EEPROM' for a more detailed discussion on data EEPROM endurance.",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nD300, Sym = VIOFF. D300, Characteristics = Input Offset Voltage. D300, Min = -. D300, Typ = \u00b15.0. D300, Max = \u00b110. D300, Units = mV. D300, Comments = . D301, Sym = VICM. D301, Characteristics = Input Common Mode Voltage. D301, Min = 0. D301, Typ = -. D301, Max = VDD - 1.5. D301, Units = V. D301, Comments = . D302, Sym = CMRR. D302, Characteristics = Common Mode Rejection Ratio. D302, Min = 55. D302, Typ = -. D302, Max = -. D302, Units = dB. D302, Comments = . 300, Sym = TRESP. 300, Characteristics = Response Time (1). 300, Min = -. 300, Typ = 150. 300, Max = 400. 300, Units = ns. 300, Comments = PIC18 F XXXX. 300A,",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nSym = . 300A, Characteristics = . 300A, Min = -. 300A, Typ = 150. 300A, Max = 600. 300A, Units = ns. 300A, Comments = PIC18 LF XXXX, VDD = 2.0V. 301, Sym = TMC2OV. 301, Characteristics = Comparator Mode Change to Output Valid. 301, Min = -. 301, Typ = -. 301, Max = 10. 301, Units = \uf06d s. 301, Comments = \n- Note 1: Response time measured with one comparator input at (VDD - 1.5)/2, while the other input transitions from VSS to VDD.",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nD310, Sym = VRES. D310, Characteristics = Resolution. D310, Min = VDD/24. D310, Typ = -. D310, Max = VDD/32. D310, Units = LSb. D310, Comments = . D311, Sym = VRAA. D311, Characteristics = Absolute Accuracy. D311, Min = -. D311, Typ = -. D311, Max = 1/2. D311, Units = LSb. D311, Comments = . D312, Sym = VRUR. D312, Characteristics = Unit Resistor Value (R). D312, Min = -. D312, Typ = 2k. D312, Max = -. D312, Units = \uf057. D312, Comments = . 310, Sym = TSET. 310, Characteristics = Settling Time (1). 310, Min = -. 310, Typ = -. 310, Max = 10. 310, Units = \uf06d s. 310, Comments = ",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nNote 1: Settling time measured while CVRR = 1 and CVR3:CVR0 transitions from ' 0000 ' to ' 1111 '.",
    "Standard Operating Conditions (unless otherwise stated)\nOperating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial",
    "Standard Operating Conditions (unless otherwise stated)\nD420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0000. D420, Min = 2.06. D420, Typ = 2.17. D420, Max = 2.28. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0001. D420, Min = 2.12. D420, Typ = 2.23. D420, Max = 2.34. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0010. D420, Min = 2.24. D420,",
    "Standard Operating Conditions (unless otherwise stated)\nTyp = 2.36. D420, Max = 2.48. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0011. D420, Min = 2.32. D420, Typ = 2.44. D420, Max = 2.56. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0100. D420, Min = 2.47. D420, Typ = 2.60. D420, Max = 2.73. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low.",
    "Standard Operating Conditions (unless otherwise stated)\nD420, Characteristic = HLVDL<3:0> = 0101. D420, Min = 2.65. D420, Typ = 2.79. D420, Max = 2.93. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0110. D420, Min = 2.74. D420, Typ = 2.89. D420, Max = 3.04. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 0111. D420, Min = 2.96. D420, Typ = 3.12. D420, Max = 3.28. D420, Units = V. D420,",
    "Standard Operating Conditions (unless otherwise stated)\nConditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1000. D420, Min = 3.22. D420, Typ = 3.39. D420, Max = 3.56. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1001. D420, Min = 3.37. D420, Typ = 3.55. D420, Max = 3.73. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1010. D420, Min = 3.52.",
    "Standard Operating Conditions (unless otherwise stated)\nD420, Typ = 3.71. D420, Max = 3.90. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1011. D420, Min = 3.70. D420, Typ = 3.90. D420, Max = 4.10. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1100. D420, Min = 3.90. D420, Typ = 4.11. D420, Max = 4.32. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-",
    "Standard Operating Conditions (unless otherwise stated)\nLow. D420, Characteristic = HLVDL<3:0> = 1101. D420, Min = 4.11. D420, Typ = 4.33. D420, Max = 4.55. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to- Low. D420, Characteristic = HLVDL<3:0> = 1110. D420, Min = 4.36. D420, Typ = 4.59. D420, Max = 4.82. D420, Units = V. D420, Conditions = ",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nThe  timing  parameter  symbols  have  been  created using one of the following formats:",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nT, 1. TppS2ppS 2. TppS = T. T, 3. TCC: ST 4. Ts = T. T, (I C specifications only) (I 2 C specifications only) = T. F, 1. TppS2ppS 2. TppS = Frequency. F, 3. TCC: ST 4. Ts = T. F, (I C specifications only) (I 2 C specifications only) = Time. Lowercase letters (pp) and their meanings:, 1. TppS2ppS 2. TppS = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, 3. TCC: ST 4. Ts = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, (I C specifications only) (I 2 C specifications only) = Lowercase letters (pp) and their meanings:. pp, 1. TppS2ppS 2. TppS = pp. pp, 3. TCC: ST 4. Ts = . pp, (I C specifications only) (I 2 C specifications only) = . cc, 1.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nTppS2ppS 2. TppS = CCP1. cc, 3. TCC: ST 4. Ts = osc. cc, (I C specifications only) (I 2 C specifications only) = OSC1. ck, 1. TppS2ppS 2. TppS = CLKO. ck, 3. TCC: ST 4. Ts = rd. ck, (I C specifications only) (I 2 C specifications only) = RD. cs, 1. TppS2ppS 2. TppS = CS. cs, 3. TCC: ST 4. Ts = rw. cs, (I C specifications only) (I 2 C specifications only) = RD or WR. di, 1. TppS2ppS 2. TppS = SDI. di, 3. TCC: ST 4. Ts = sc. di, (I C specifications only) (I 2 C specifications only) = SCK. do, 1. TppS2ppS 2. TppS = SDO. do, 3. TCC: ST 4. Ts = ss. do, (I C specifications only) (I 2 C specifications only) = SS. dt, 1.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nTppS2ppS 2. TppS = Data in. dt, 3. TCC: ST 4. Ts = t0. dt, (I C specifications only) (I 2 C specifications only) = T0CKI. io, 1. TppS2ppS 2. TppS = I/O port. io, 3. TCC: ST 4. Ts = t1. io, (I C specifications only) (I 2 C specifications only) = T13CKI. mc, 1. TppS2ppS 2. TppS = MCLR. mc, 3. TCC: ST 4. Ts = wr. mc, (I C specifications only) (I 2 C specifications only) = WR. Uppercase letters and their meanings:, 1. TppS2ppS 2. TppS = Uppercase letters and their meanings:. Uppercase letters and their meanings:, 3. TCC: ST 4. Ts = . Uppercase letters and their meanings:, (I C specifications only) (I 2 C specifications only) = . S, 1. TppS2ppS 2. TppS = S. S, 3. TCC: ST 4. Ts = . S,",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n(I C specifications only) (I 2 C specifications only) = . F, 1. TppS2ppS 2. TppS = Fall. F, 3. TCC: ST 4. Ts = P. F, (I C specifications only) (I 2 C specifications only) = Period. H, 1. TppS2ppS 2. TppS = High. H, 3. TCC: ST 4. Ts = R. H, (I C specifications only) (I 2 C specifications only) = Rise. I, 1. TppS2ppS 2. TppS = Invalid (High-impedance). I, 3. TCC: ST 4. Ts = V. I, (I C specifications only) (I 2 C specifications only) = Valid. L, 1. TppS2ppS 2. TppS = Low. L, 3. TCC: ST 4. Ts = Z. L, (I C specifications only) (I 2 C specifications only) = High-impedance. I 2 C only, 1. TppS2ppS 2. TppS = I 2 C only. I 2 C only, 3. TCC: ST 4. Ts",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n= . I 2 C only, (I C specifications only) (I 2 C specifications only) = . AA, 1. TppS2ppS 2. TppS = output access. AA, 3. TCC: ST 4. Ts = High. AA, (I C specifications only) (I 2 C specifications only) = High. BUF, 1. TppS2ppS 2. TppS = Bus free. BUF, 3. TCC: ST 4. Ts = Low. BUF, (I C specifications only) (I 2 C specifications only) = Low. TCC: ST (I 2 C specifications only), 1. TppS2ppS 2. TppS = TCC: ST (I 2 C specifications only). TCC: ST (I 2 C specifications only), 3. TCC: ST 4. Ts = . TCC: ST (I 2 C specifications only), (I C specifications only) (I 2 C specifications only) = . CC, 1. TppS2ppS 2. TppS = CC. CC, 3. TCC: ST 4. Ts = . CC, (I C specifications only) (I 2 C specifications",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nonly) = . HD, 1. TppS2ppS 2. TppS = Hold. HD, 3. TCC: ST 4. Ts = SU. HD, (I C specifications only) (I 2 C specifications only) = Setup. ST, 1. TppS2ppS 2. TppS = ST. ST, 3. TCC: ST 4. Ts = . ST, (I C specifications only) (I 2 C specifications only) = . DAT, 1. TppS2ppS 2. TppS = DATA input hold. DAT, 3. TCC: ST 4. Ts = STO. DAT, (I C specifications only) (I 2 C specifications only) = Stop condition. STA, 1. TppS2ppS 2. TppS = Start condition. STA, 3. TCC: ST 4. Ts = . STA, (I C specifications only) (I 2 C specifications only) = ",
    "26.4.2 TIMING CONDITIONS\nNote:\nThe temperature and voltages specified in Table 26-5 apply  to  all  timing  specifications  unless  otherwise noted. Figure 26-5 specifies the load conditions for the timing specifications.\nBecause  of  space  limitations,  the  generic terms 'PIC18FXXXX' and 'PIC18LFXXXX' are used throughout this section to refer to the PIC18F2420/2520/4420/4520 and PIC18LF2420/2520/4420/4520  families  of devices specifically and only those devices.",
    "TABLE 26-5: TEMPERATURE AND VOLTAGE SPECIFICATIONS - AC\nAC CHARACTERISTICS, 1 = Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3\uf020 +85\u00b0C for industrial Operating voltage VDD range as described in DC specification Section 26.1 and Section 26.3 . LF parts operate for industrial temperatures only.",
    "FIGURE 26-5: LOAD CONDITIONS FOR DEVICE TIMING SPECIFICATIONS\nVDD /2 CL RL VSS, Load Condition 2 = Pin VSS CL for all pins except OSC2/CLKO and including D and E outputs as ports",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n1A, Symbol = FOSC. 1A, Characteristic = External CLKI Frequency (1). 1A, Min = DC DC DC DC DC 0.1 4 4 5 1000 40 32. 1A, Max = 1 25 31.25 40 4 4 25 10 200 - - - -. 1A, Units = MHz MHz kHz MHz MHz MHz MHz MHz kHz ns ns \uf06d s ns ns \uf06d s. 1A, Conditions = XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode EC Oscillator mode RC Oscillator mode XT Oscillator mode HS Oscillator mode HS + PLL Oscillator mode LP Oscillator mode XT, RC Oscillator mode. 1, Symbol = TOSC. 1, Characteristic = External CLKI Period (1) Oscillator Period (1). 1, Min = 25 250 0.25 40 100. 1, Max = - 10 250 250. 1, Units = ns ns. 1, Conditions = HS Oscillator mode LP Oscillator mode EC Oscillator mode RC Oscillator mode XT Oscillator mode HS",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nOscillator mode. 2, Symbol = TCY. 2, Characteristic = Instruction Cycle Time. 2, Min = 5 100 160. 2, Max = 200 -. 2, Units = \uf06d s ns. 2, Conditions = LP Oscillator mode TCY = 4/F OSC, Industrial TCY = 4/F OSC, Extended. 3, Symbol = TOSL,. 3, Characteristic = (1) External Clock in (OSC1). 3, Min = 30 2.5 10. 3, Max = - - - -. 3, Units = ns ns \uf06d s ns. 3, Conditions = XT Oscillator mode LP Oscillator mode HS Oscillator mode. 4, Symbol = TOSR, TOSF. 4, Characteristic = External Clock in (OSC1) Rise or Fall Time. 4, Min = - -. 4, Max = 20 50. 4, Units = ns ns. 4, Conditions = XT Oscillator mode LP Oscillator mode. , Symbol = . , Characteristic = . , Min = -. , Max = 7.5. , Units = ns. , Conditions = HS",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nOscillator mode\nNote 1: Instruction cycle period (TCY) equals four times the input oscillator time base period for all configurations except PLL. All specified values are based on characterization data for that particular oscillator type under standard operating conditions with the device executing code. Exceeding these specified limits may result in an unstable oscillator operation and/or higher than expected current consumption. All devices are tested to operate at 'min.' values with an external clock applied to the OSC1/CLKI pin. When an external clock input is used, the 'max.' cycle time limit is 'DC' (no clock) for all devices.",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF10, Sym = FOSC. F10, Characteristic = Oscillator Frequency Range. F10, Min = 4. F10, Typ\u2020 = -. F10, Max = 10. F10, Units = MHz. F10, Conditions = HS mode only. F11, Sym = FSYS. F11, Characteristic = On-Chip VCO System Frequency. F11, Min = 16. F11, Typ\u2020 = -. F11, Max = 40. F11, Units = MHz. F11, Conditions = HS mode only. F12, Sym = t rc. F12, Characteristic = PLL Start-up Time (Lock Time). F12, Min = -. F12, Typ\u2020 = -. F12, Max = 2. F12, Units = ms. F12, Conditions = . F13, Sym = \uf044 CLK. F13, Characteristic = CLKO Stability (Jitter). F13, Min = -2. F13, Typ\u2020 = -. F13, Max = +2.",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF13, Units = %. F13, Conditions = \n- \u2020 Data in 'Typ' column is at 5V, 25 C unless otherwise stated. These parameters are for design guidance \uf0b0 only and are not tested.",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n, PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18LF2420/2520/4420/4520. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz,",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nMHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 2.7-3.3V. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = . , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nOperating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n+85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD =",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n2.7-3.3V. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18F2420/2520/4420/4520. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz,",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n= 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 4.5-5.5V. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = . , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n+85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nstated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n(1) = VDD = 4.5-5.5V. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nMHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz,",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18LF2420/2520/4420/4520. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nMHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n+85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 2.7-3.3V. , PIC18LF2420/2520/4420/4520 (Industrial).PIC18F2420/2520/4420/4520 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18F2420/2520/4420/4520. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nkHz, 125 kHz, 31 kHz (1) = 26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz,",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 4.5-5.5V\n- Legend:\nShading of rows is to assist in readability of the table.",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n- Note 1: Frequency calibrated at 25\u00b0C. OSCTUNE register can be used to compensate for temperature drift.",
    "PIC18F2420/2520/4420/4520\nFIGURE 26-7:\nCLKO AND I/O TIMING",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n10, Symbol = TosH2ckL. 10, Characteristic = OSC1 \uf0ad to CLKO \uf0af. 10, Characteristic = OSC1 \uf0ad to CLKO \uf0af. 10, Min = -. 10, Typ = 75. 10, Max = 200. 10, Units = ns. 10, Conditions = (Note 1). 11, Symbol = TosH2ckH. 11, Characteristic = OSC1 \uf0ad to CLKO \uf0ad. 11, Characteristic = OSC1 \uf0ad to CLKO \uf0ad. 11, Min = -. 11, Typ = 75. 11, Max = 200. 11, Units = ns. 11, Conditions = (Note 1). 12, Symbol = TckR. 12, Characteristic = CLKO Rise Time. 12, Characteristic = CLKO Rise Time. 12, Min = -. 12, Typ = 35. 12, Max = 100. 12, Units = ns. 12, Conditions = (Note 1). 13, Symbol = TckF. 13, Characteristic = CLKO Fall Time. 13, Characteristic = CLKO Fall Time. 13, Min = -. 13, Typ = 35. 13, Max = 100. 13, Units = ns.",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n13, Conditions = (Note 1). 14, Symbol = TckL2ioV. 14, Characteristic = CLKO \uf0af to Port Out Valid. 14, Characteristic = CLKO \uf0af to Port Out Valid. 14, Min = -. 14, Typ = -. 14, Max = 0.5 TCY + 20. 14, Units = ns. 14, Conditions = (Note 1). 15, Symbol = TioV2ckH. 15, Characteristic = Port In Valid before CLKO \uf0ad. 15, Characteristic = Port In Valid before CLKO \uf0ad. 15, Min = 0.25 TCY + 25. 15, Typ = -. 15, Max = -. 15, Units = ns. 15, Conditions = (Note 1). 16, Symbol = TckH2ioI. 16, Characteristic = Port In Hold after CLKO \uf0ad. 16, Characteristic = Port In Hold after CLKO \uf0ad. 16, Min = 0. 16, Typ = -. 16, Max = -. 16, Units = ns. 16, Conditions = (Note 1). 17, Symbol = TosH2ioV. 17, Characteristic = OSC1 \uf0ad (Q1 cycle) to",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nPort Out Valid. 17, Characteristic = OSC1 \uf0ad (Q1 cycle) to Port Out Valid. 17, Min = -. 17, Typ = 50. 17, Max = 150. 17, Units = ns. 17, Conditions = . 18, Symbol = TosH2ioI. 18, Characteristic = OSC1 \uf0ad (Q2 cycle) to Port Input Invalid (I/O in hold time). 18, Characteristic = PIC18 F XXXX. 18, Min = 100. 18, Typ = -. 18, Max = -. 18, Units = ns. 18, Conditions = . 18A, Symbol = TosH2ioI. 18A, Characteristic = OSC1 \uf0ad (Q2 cycle) to Port Input Invalid (I/O in hold time). 18A, Characteristic = PIC18 LF XXXX. 18A, Min = 200. 18A, Typ = -. 18A, Max = -. 18A, Units = ns. 18A, Conditions = VDD = 2.0V. 19, Symbol = TioV2osH. 19, Characteristic = Port Input Valid to OSC1 \uf0ad\uf020 (I/O in setup",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\ntime). 19, Characteristic = Port Input Valid to OSC1 \uf0ad\uf020 (I/O in setup time). 19, Min = 0. 19, Typ = -. 19, Max = -. 19, Units = ns. 19, Conditions = . 20 20A, Symbol = TioR. 20 20A, Characteristic = Port Output Rise Time. 20 20A, Characteristic = PIC18 F XXXX. 20 20A, Min = -. 20 20A, Typ = 10. 20 20A, Max = 25. 20 20A, Units = ns. 20 20A, Conditions = . 20 20A, Symbol = TioR. 20 20A, Characteristic = Port Output Rise Time. 20 20A, Characteristic = PIC18 LF XXXX. 20 20A, Min = -. 20 20A, Typ = -. 20 20A, Max = 60. 20 20A, Units = ns. 20 20A, Conditions = VDD = 2.0V. 21, Symbol = TioF. 21, Characteristic = Port Output Fall Time. 21, Characteristic = PIC18 F XXXX. 21, Min = -. 21, Typ =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n10. 21, Max = 25. 21, Units = ns. 21, Conditions = . 21A, Symbol = TioF. 21A, Characteristic = Port Output Fall Time. 21A, Characteristic = PIC18 LF XXXX. 21A, Min = -. 21A, Typ = -. 21A, Max = 60. 21A, Units = ns. 21A, Conditions = VDD = 2.0V. 22\u2020, Symbol = TINP. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Min = TCY. 22\u2020, Typ = -. 22\u2020, Max = -. 22\u2020, Units = ns. 22\u2020, Conditions = . 23\u2020, Symbol = TRBP. 23\u2020, Characteristic = RB<7:4> Change INTx High or Low Time. 23\u2020, Characteristic = RB<7:4> Change INTx High or Low Time. 23\u2020, Min = TCY. 23\u2020, Typ = -. 23\u2020, Max = -. 23\u2020, Units = ns. 23\u2020, Conditions = ",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n\u2020 These parameters are asynchronous events not related to any internal clock edges.\nNote 1: Measurements are taken in RC mode, where CLKO output is 4 x TOSC.",
    "FIGURE 26-9: BROWN-OUT RESET TIMING\nTABLE 26-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS",
    "FIGURE 26-9: BROWN-OUT RESET TIMING\n30, Symbol = TmcL. 30, Characteristic = MCLR Pulse Width (low). 30, Min = 2. 30, Typ = -. 30, Max = -. 30, Units = \uf06d s. 30, Conditions = . 31, Symbol = TWDT. 31, Characteristic = Watchdog Timer Time-out Period (no postscaler). 31, Min = 3.4. 31, Typ = 4.1. 31, Max = 4.71. 31, Units = ms. 31, Conditions = . 32, Symbol = TOST. 32, Characteristic = Oscillation Start-up Timer Period. 32, Min = 1024 TOSC. 32, Typ = -. 32, Max = 1024 TOSC. 32, Units = -. 32, Conditions = TOSC = OSC1 period. 33, Symbol = TPWRT. 33, Characteristic = Power-up Timer Period. 33, Min = 55.6. 33, Typ = 65.5. 33, Max = 75.4. 33, Units = ms. 33, Conditions = . 34, Symbol = TIOZ. 34, Characteristic = I/O",
    "FIGURE 26-9: BROWN-OUT RESET TIMING\nHigh-Impedance from MCLR Low or Watchdog Timer Reset. 34, Min = -. 34, Typ = 2. 34, Max = -. 34, Units = \uf06d s. 34, Conditions = . 35, Symbol = TBOR. 35, Characteristic = Brown-out Reset Pulse Width. 35, Min = 200. 35, Typ = -. 35, Max = -. 35, Units = \uf06d s. 35, Conditions = VDD \uf0a3 BVDD (see D005). 36, Symbol = TIRVST. 36, Characteristic = Time for Internal Reference Voltage to become Stable. 36, Min = -. 36, Typ = 20. 36, Max = 50. 36, Units = \uf06d s. 36, Conditions = . 37, Symbol = TLVD. 37, Characteristic = High/Low-Voltage Detect Pulse Width. 37, Min = 200. 37, Typ = -. 37, Max = -. 37, Units = \uf06d s. 37, Conditions = VDD \uf0a3 VLVD. 38, Symbol = TCSD. 38, Characteristic = CPU Start-up Time. 38, Min = -. 38, Typ = 10. 38, Max =",
    "FIGURE 26-9: BROWN-OUT RESET TIMING\n-. 38, Units = \uf06d s. 38, Conditions = . 39, Symbol = TIOBST. 39, Characteristic = Time for INTOSC to Stabilize. 39, Min = -. 39, Typ = 1. 39, Max = -. 39, Units = \uf06d s. 39, Conditions = ",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n40, Symbol = Tt0H. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = No prescaler. 40, Min = 0.5 TCY + 20. 40, Max = -. 40, Units = ns. 40, Conditions = . 40, Symbol = Tt0H. 40, Characteristic = . 40, Characteristic = . 40, Characteristic = With prescaler. 40, Min = 10. 40, Max = -. 40, Units = ns. 40, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = No prescaler. 41, Min = 0.5 TCY + 20. 41, Max = -. 41, Units = ns. 41, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = . 41, Characteristic = . 41, Characteristic = With prescaler. 41, Min = 10. 41, Max = -. 41, Units = ns. 41, Conditions = . 42, Symbol =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nTt0P. 42, Characteristic = T0CKI Period. 42, Characteristic = T0CKI Period. 42, Characteristic = No prescaler. 42, Min = TCY + 10. 42, Max = -. 42, Units = ns. 42, Conditions = . 42, Symbol = Tt0P. 42, Characteristic = . 42, Characteristic = . 42, Characteristic = With prescaler. 42, Min = Greater of: 20 ns or (T CY + 40)/N. 42, Max = -. 42, Units = ns. 42, Conditions = N = prescale value (1, 2, 4,..., 256). 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, no prescaler. 45, Characteristic = Synchronous, no prescaler. 45, Min = 0.5 TCY + 20. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nSynchronous, with prescaler. 45, Characteristic = PIC18 F XXXX. 45, Min = 10. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 LF XXXX. 45, Min = 25. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 F XXXX. 45, Min = 30. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 LF XXXX. 45, Min = 50. 45, Max = -. 45, Units = ns. 45, Conditions = VDD =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, no prescaler. 46, Characteristic = Synchronous, no prescaler. 46, Min = 0.5 TCY + 5. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 F XXXX. 46, Min = 10. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 LF XXXX. 46, Min = 25. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nAsynchronous. 46, Characteristic = PIC18 F XXXX. 46, Min = 30. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 LF XXXX. 46, Min = 50. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Synchronous. 47, Characteristic = Synchronous. 47, Min = Greater of: 20 ns or (T CY + 40)/N. 47, Max = -. 47, Units = ns. 47, Conditions = N = prescale value (1, 2, 4, 8). 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Asynchronous. 47, Characteristic = Asynchronous. 47, Min = 60. 47, Max =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n-. 47, Units = ns. 47, Conditions = . , Symbol = Ft1. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Min = DC. , Max = 50. , Units = kHz. , Conditions = . 48, Symbol = Tcke2tmrI. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Min = 2 TOSC. 48, Max = 7 TOSC. 48, Units = -. 48, Conditions = ",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = No prescaler. 50, Characteristic = No prescaler. 50, Min = 0.5 TCY + 20. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 F XXXX. 50, Min = 10. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 LF XXXX. 50, Min = 20. 50, Max = -. 50, Units = ns. 50, Conditions = VDD = 2.0V. 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = No prescaler. 51, Characteristic = No prescaler. 51, Min = 0.5",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nTCY + 20. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 F XXXX. 51, Min = 10. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 LF XXXX. 51, Min = 20. 51, Max = -. 51, Units = ns. 51, Conditions = VDD = 2.0V. 52, Symbol = TccP. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Min = 3 TCY + 40 N. 52, Max = -. 52, Units = ns. 52, Conditions = N = prescale value (1, 4 or 16). 53, Symbol = TccR. 53,",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nCharacteristic = CCPx Output Fall Time. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = PIC18 F XXXX. 53, Min = -. 53, Max = 25. 53, Units = ns. 53, Conditions = . 53, Symbol = TccR. 53, Characteristic = . 53, Characteristic = . 53, Characteristic = PIC18 LF XXXX. 53, Min = -. 53, Max = 45. 53, Units = ns. 53, Conditions = VDD = 2.0V. 54, Symbol = TccF. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = PIC18 F XXXX. 54, Min = -. 54, Max = 25. 54, Units = ns. 54, Conditions = . 54, Symbol = TccF. 54, Characteristic = . 54, Characteristic = . 54, Characteristic = PIC18 LF XXXX. 54, Min = -. 54, Max = 45. 54, Units = ns. 54, Conditions = VDD = 2.0V",
    "TABLE 26-13: PARALLEL CLIENT PORT REQUIREMENTS (PIC18F4420, PIC18F4520)\n62, Symbol = TdtV2wrH. 62, Characteristic = Data In Valid before WR \uf0ad or CS \uf0ad (setup time). 62, Characteristic = Data In Valid before WR \uf0ad or CS \uf0ad (setup time). 62, Min = 20. 62, Max = -. 62, Units = ns. 62, Conditions = . 63, Symbol = TwrH2dtI. 63, Characteristic = WR \uf0ad or CS \uf0ad to Data-In Invalid (hold time). 63, Characteristic = PIC18 F XXXX. 63, Min = 20. 63, Max = -. 63, Units = ns. 63, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = 35. , Max = -. , Units = ns. , Conditions = VDD = 2.0V. 64, Symbol = TrdL2dtV. 64, Characteristic = RD \uf0af and CS \uf0af to Data-Out Valid. 64, Characteristic = RD \uf0af and CS \uf0af to Data-Out Valid. 64, Min = -. 64, Max = 80. 64, Units = ns. 64, Conditions = . 65, Symbol =",
    "TABLE 26-13: PARALLEL CLIENT PORT REQUIREMENTS (PIC18F4420, PIC18F4520)\nTrdH2dtI. 65, Characteristic = RD \uf0ad or CS \uf0af to Data-Out Invalid. 65, Characteristic = RD \uf0ad or CS \uf0af to Data-Out Invalid. 65, Min = 10. 65, Max = 30. 65, Units = ns. 65, Conditions = . 66, Symbol = TibfINH. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \uf0ad or CS \uf0ad. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \uf0ad or CS \uf0ad. 66, Min = -. 66, Max = 3 TCY. 66, Units = . 66, Conditions = ",
    "FIGURE 26-13: EXAMPLE SPI HOST MODE TIMING (CKE = 0\n)\nTABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (HOST MODE, CKE = 0 )",
    "FIGURE 26-13: EXAMPLE SPI HOST MODE TIMING (CKE = 0\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic",
    "FIGURE 26-13: EXAMPLE SPI HOST MODE TIMING (CKE = 0\n= Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Host mode). 78, Characteristic =",
    "FIGURE 26-13: EXAMPLE SPI HOST MODE TIMING (CKE = 0\nPIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Host mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Host mode). 79, Characteristic = SCK Output Fall Time (Host mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after",
    "FIGURE 26-13: EXAMPLE SPI HOST MODE TIMING (CKE = 0\nSCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V\nNote 1:\nRequires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-14: EXAMPLE SPI HOST MODE TIMING (CKE = 1\n)\nTABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (HOST MODE, CKE = 1\n)",
    "FIGURE 26-14: EXAMPLE SPI HOST MODE TIMING (CKE = 1\n73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO",
    "FIGURE 26-14: EXAMPLE SPI HOST MODE TIMING (CKE = 1\nData Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Host mode). 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Host mode). 78, Characteristic = PIC18 LF XXXX. 78, Min =",
    "FIGURE 26-14: EXAMPLE SPI HOST MODE TIMING (CKE = 1\n-. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Host mode). 79, Characteristic = SCK Output Fall Time (Host mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 81, Symbol = TdoV2scH, TdoV2scL. 81, Characteristic = SDO",
    "FIGURE 26-14: EXAMPLE SPI HOST MODE TIMING (CKE = 1\nData Output Setup to SCK Edge. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Min = TCY. 81, Max = -. 81, Units = ns. 81, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\n)\nTABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (CLIENT MODE TIMING, CKE = 0\n)",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = 3 TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Client mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Client mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Client mode). 72 72A, Characteristic = Continuous. 72",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\n72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Client mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A,",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\nMax = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\n= 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 80, Symbol = TscH2doV ,. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV ,. 80, Characteristic = TscL2doV. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH , TscL2ssH. 83, Characteristic = SS \uf0ad after SCK edge. 83, Characteristic = SS \uf0ad",
    "FIGURE 26-15: EXAMPLE SPI CLIENT MODE TIMING (CKE = 0\nafter SCK edge. 83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-16: EXAMPLE SPI CLIENT MODE TIMING (CKE = 1\n)\n)",
    "TABLE 26-17: EXAMPLE SPI CLIENT MODE REQUIREMENTS (CKE = 1\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = 3 TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Client mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Client mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Client mode). 72 72A, Characteristic = Continuous. 72",
    "TABLE 26-17: EXAMPLE SPI CLIENT MODE REQUIREMENTS (CKE = 1\n72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Client mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge.",
    "TABLE 26-17: EXAMPLE SPI CLIENT MODE REQUIREMENTS (CKE = 1\n74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units =",
    "TABLE 26-17: EXAMPLE SPI CLIENT MODE REQUIREMENTS (CKE = 1\nns. 77, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \uf0af Edge. 82, Characteristic = PIC18 F XXXX. 82, Min = -. 82, Max = 50. 82, Units = ns. 82, Conditions = . 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \uf0af Edge. 82, Characteristic = PIC18 LF XXXX. 82, Min = -. 82, Max",
    "TABLE 26-17: EXAMPLE SPI CLIENT MODE REQUIREMENTS (CKE = 1\n= 100. 82, Units = ns. 82, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH , TscL2ssH. 83, Characteristic = SS \uf0ad after SCK Edge. 83, Characteristic = SS \uf0ad after SCK Edge. 83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = \nNote 1:\nRequires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "TABLE 26-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (CLIENT MODE)\n90, Symbol = TSU: STA. 90, Characteristic = Start Condition. 90, Characteristic = 100 kHz mode. 90, Min = 4700. 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. , Symbol = . , Characteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 91, Symbol = THD: STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 4000. 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first. , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = clock pulse is generated. 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 4700. 92, Max = -. 92, Units = ns. 92, Conditions = . , Symbol = . ,",
    "TABLE 26-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (CLIENT MODE)\nCharacteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 93, Symbol = THD: STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 4000. 93, Max = -. 93, Units = ns. 93, Conditions = . , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = ",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 4.0. 100, Max = -. 100, Units = \uf06d s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 0.6. 100, Max = -. 100, Units = \uf06d s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = MSSP module. 100, Min = 1.5 TCY. 100, Max = -. 100, Units = . 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 4.7. 101, Max = -. 101, Units = \uf06d s. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 1.3. 101, Max = -. 101, Units = \uf06d s. 101, Conditions = . 101,",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\nSymbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = MSSP module. 101, Min = 1.5 TCY. 101, Max = -. 101, Units = . 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = . 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103,",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\nMin = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4.7. 90, Max = -. 90, Units = \uf06d s. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 0.6. 90, Max = -. 90, Units = \uf06d s. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 4.0. 91, Max = -. 91, Units = \uf06d s. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\nmode. 91, Min = 0.6. 91, Max = -. 91, Units = \uf06d s. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = \uf06d s. 106, Conditions = . 107, Symbol = TSU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\n2). 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 4.7. 92, Max = -. 92, Units = \uf06d s. 92, Conditions = . 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 0.6. 92, Max = -. 92, Units = \uf06d s. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = (Note 1). 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = (Note 1). 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min =",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\n4.7. 110, Max = -. 110, Units = \uf06d s. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = \uf06d s. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (CLIENT MODE)\nNote 1: As a transmitter, the device must provide this internal minimum delay time to bridge the undefined region (min. 300 ns) of the falling edge of SCL to avoid unintended generation of Start or Stop conditions.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but the requirement TSU:DAT \uf0b3 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, TR max. + TSU:DAT = 1000 + 250 = 1250 ns (according to the Standard mode I 2 C bus specification), before the SCL line is released.",
    "TABLE 26-20: HOST SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.",
    "TABLE 26-20: HOST SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU: STA. 90, Characteristic = . 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU: STA. 90, Characteristic = . 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 2(T OSC)(BRG + 1).",
    "TABLE 26-20: HOST SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = . 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU: STO. 92, Characteristic",
    "TABLE 26-20: HOST SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n= Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU: STO. 92, Characteristic = . 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 93, Symbol = THD: STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD: STO. 93, Characteristic = Hold Time. 93, Characteristic = 400 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD: STO. 93, Characteristic =",
    "TABLE 26-20: HOST SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n. 93, Characteristic = 1 MHz mode (1). 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = ",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 1 MHz mode (1). 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nTime. 101, Characteristic = 400 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 1 MHz mode (1). 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDAand SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDAand SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic =",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nSDAand SCL Rise Time. 102, Characteristic = 1 MHz mode (1). 102, Min = -. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDAand SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDAand SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDAand SCL Fall Time. 103, Characteristic = 1 MHz mode (1). 103, Min = -. 103, Max = 100. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\npF. 90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 2(T",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nOSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD: DAT.",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = ms. 106, Conditions = . 107, Symbol = TSU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min =",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = 1000. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 1 MHz mode (1). 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = . 110,",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nSymbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 26-21: HOST SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but parameter 107 \uf0b3 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, parameter 102 + parameter 107 = 1000 + 250 = 1250 ns (for 100 kHz mode), before the SCL line is released.",
    "TABLE 26-22: EUSART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n120, Symbol = TckH2dtV. 120, Characteristic = SYNC XMIT (Host & Client) Clock High to Data Out Valid. 120, Characteristic = PIC18 F XXXX. 120, Min = -. 120, Max = 40. 120, Units = ns. 120, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 121, Symbol = Tckrf. 121, Characteristic = Clock Out Rise Time and Fall Time. 121, Characteristic = PIC18 F XXXX. 121, Min = -. 121, Max = 20. 121, Units = ns. 121, Conditions = . , Symbol = . , Characteristic = (Host mode). , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V. 122, Symbol = Tdtrf. 122, Characteristic = Data Out Rise Time and Fall Time. 122, Characteristic = PIC18 F XXXX. 122, Min =",
    "TABLE 26-22: EUSART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n-. 122, Max = 20. 122, Units = ns. 122, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V",
    "FIGURE 26-22:\nEUSART SYNCHRONOUS RECEIVE (HOST/CLIENT) TIMING\nNote:\nRefer to Figure 26-5 for load conditions.",
    "TABLE 26-23: EUSART SYNCHRONOUS RECEIVE REQUIREMENTS\n125, Symbol = TdtV2ckl. 125, Characteristic = SYNC RCV (Host & Client) Data Hold before CK \uf0af (DT hold time). 125, Min = 10. 125, Max = -. 125, Units = ns. 125, Conditions = . 126, Symbol = TckL2dtl. 126, Characteristic = Data Hold after CK \uf0af (DT hold time). 126, Min = 15. 126, Max = -. 126, Units = ns. 126, Conditions = ",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nA01, Symbol = NR. A01, Characteristic = Resolution. A01, Characteristic = Resolution. A01, Min = -. A01, Typ = -. A01, Max = 10. A01, Units = bit. A01, Conditions = \uf044 VREF \uf0b3 3.0V. A03, Symbol = EIL. A03, Characteristic = Integral Linearity Error. A03, Characteristic = Integral Linearity Error. A03, Min = -. A03, Typ = -. A03, Max = <\u00b11. A03, Units = LSb. A03, Conditions = \uf044 VREF \uf0b3 3.0V. A04, Symbol = EDL. A04, Characteristic = Differential Linearity Error. A04, Characteristic = Differential Linearity Error. A04, Min = -. A04, Typ = -. A04, Max = <\u00b11. A04, Units = LSb.",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nA04, Conditions = \uf044 VREF \uf0b3 3.0V. A06, Symbol = EOFF. A06, Characteristic = Offset Error. A06, Characteristic = Offset Error. A06, Min = -. A06, Typ = -. A06, Max = <\u00b12.0. A06, Units = LSb. A06, Conditions = \uf044 VREF \uf0b3 3.0V. A07, Symbol = EGN. A07, Characteristic = Gain Error. A07, Characteristic = Gain Error. A07, Min = -. A07, Typ = -. A07, Max = <\u00b11. A07, Units = LSb. A07, Conditions = \uf044 VREF \uf0b3 3.0V. A10, Symbol = -. A10, Characteristic = Monotonicity. A10, Characteristic = Monotonicity. A10, Min = Guaranteed (1). A10, Typ = Guaranteed",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\n(1). A10, Max = Guaranteed (1). A10, Units = -. A10, Conditions = VSS \uf0a3 VAIN \uf0a3 VREF. A20, Symbol = \uf044 VREF. A20, Characteristic = Reference Voltage Range (V REFH - VREFL ). A20, Characteristic = Reference Voltage Range (V REFH - VREFL ). A20, Min = 1.8 3. A20, Typ = - -. A20, Max = - -. A20, Units = V V. A20, Conditions = VDD \uf03c 3.0V VDD \uf0b3 3.0V. A21, Symbol = VREFH. A21, Characteristic = Reference Voltage High. A21, Characteristic = Reference Voltage High. A21, Min = VSS. A21, Typ = -. A21, Max = VREFH. A21, Units = V. A21, Conditions = . A22, Symbol = VREFL. A22, Characteristic = Reference Voltage",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nLow. A22, Characteristic = Reference Voltage Low. A22, Min = VSS - 0.3V. A22, Typ = -. A22, Max = VDD - 3.0V. A22, Units = V. A22, Conditions = . A25, Symbol = VAIN. A25, Characteristic = Analog Input Voltage. A25, Characteristic = Analog Input Voltage. A25, Min = VREFL. A25, Typ = -. A25, Max = VREFH. A25, Units = V. A25, Conditions = . A30, Symbol = ZAIN. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Min = -. A30, Typ = -. A30, Max = 2.5. A30, Units = k \uf057. A30, Conditions = . A40, Symbol = I AD. A40, Characteristic =",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nA/DCurrentfrom VDD. A40, Characteristic = PIC18 F XXXX. A40, Min = -. A40, Typ = 180. A40, Max = -. A40, Units = \uf06d A. A40, Conditions = Average current during conversion. A40, Symbol = I AD. A40, Characteristic = A/DCurrentfrom VDD. A40, Characteristic = PIC18 LF XX20. A40, Min = -. A40, Typ = 90. A40, Max = -. A40, Units = \uf06d A. A40, Conditions = Average current during conversion. A50, Symbol = I REF. A50, Characteristic = VREF Input Current (2). A50, Characteristic = VREF Input Current (2). A50, Min = - -. A50, Typ = - -. A50, Max = 5 150. A50, Units = \uf06d A \uf06d A. A50, Conditions = During VAIN acquisition. During",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2420/2520/4420/4520 (INDUSTRIAL) PIC18LF2420/2520/4420/4520 (INDUSTRIAL)\nA/D conversion cycle.\nNote 1: The A/D conversion result never decreases with an increase in the input voltage and has no missing codes.\n2: VREFH current is from RA3/AN3/VREF+ pin or VDD, whichever is selected as the VREFH source. VREFL current is from RA2/AN2/VREF-/CVREF pin or VSS, whichever is selected as the VREFL source.",
    "FIGURE 26-23: A/D CONVERSION TIMING\nNote 1: If the A/D clock source is selected as RC, a time of TCY is added before the A/D clock starts. This allows the SLEEP instruction to be executed.\n2: This is a minimal RC delay (typically 100 ns), which also disconnects the holding capacitor from the analog input.",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\n130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = 0.7. 130, Max = 25.0 (1). 130, Units = \uf06d s. 130, Conditions = TOSC based, VREF \uf0b3 3.0V. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = 1.4. 130, Max = 25.0 (1). 130, Units = \uf06d s. 130, Conditions = VDD = 2.0V; TOSC based, VREF full range. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = -. 130, Max = 1. 130, Units = \uf06d s. 130, Conditions = A/D RC mode. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = -. 130, Max = 3. 130, Units = \uf06d s. 130, Conditions = VDD =",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\n2.0V; A/D RC mode. 131, Symbol = TCNV. 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Min = 11. 131, Max = 12. 131, Units = TAD. 131, Conditions = . 132, Symbol = TACQ. 132, Characteristic = Acquisition Time (Note 3). 132, Characteristic = Acquisition Time (Note 3). 132, Min = 1.4. 132, Max = -. 132, Units = \uf06d s. 132, Conditions = -40 \uf0b0 C to +85 \uf0b0 C. 135, Symbol = TSWC. 135, Characteristic = Switching Time from Convert \uf0ae Sample. 135, Characteristic = Switching Time from Convert \uf0ae Sample. 135, Min = -. 135, Max = (Note 4). 135, Units = . 135, Conditions = . TBD, Symbol = TDIS. TBD, Characteristic = Discharge Time. TBD, Characteristic = Discharge Time. TBD, Min = 0.2. TBD, Max = -. TBD, Units = \uf06d s. TBD, Conditions = ",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\nNote 1: The time of the A/D clock period is dependent on the device frequency and the TAD clock divider.\n2: ADRES register may be read on the following TCY cycle.\n3: The time for the holding capacitor to acquire the 'New' input voltage when the voltage changes full scale after the conversion (VDD to VSS or VSS to VDD). The source impedance ( RS ) on the input channels is 50 \uf057 .\n4: On the following cycle of the device clock.",
    "27.0 DC AND AC CHARACTERISTICS GRAPHS AND TABLES\nNote:\nThe graphs and tables provided following this note are a statistical summary based on a limited number of samples and are provided for informational purposes only. The performance characteristics listed herein are not tested or guaranteed. In some graphs or tables, the data presented may be outside the specified operating range (e.g., outside specified power supply range) and therefore, outside the warranted range.\n'Typical' represents the mean of the distribution at 25 C. 'Maximum' or 'minimum' represents (mean + 3 \uf0b0 \uf073 ) or (mean - 3 \uf073 ) respectively, where \uf073 is a standard deviation, over the whole temperature range.",
    "PIC18F2420/2520/4420/4520\nFIGURE 27-3: MAXIMUM IPD vs. VDD ACROSS TEMPERATURE (SLEEP MODE)\nFIGURE 27-5: MAXIMUM T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP, TIOSC IN LOW-POWER MODE)\nFIGURE 27-6:\nTYPICAL T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP,\nT1OSC IN HIGH-POWER MODE)\nFIGURE 27-7: MAXIMUM T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP, T1OSC IN HIGH-POWER MODE)",
    "FIGURE 27-8:\nTYPICAL BOR DELTA CURRENT vs. VDD ACROSS TEMP. (BORV = 2.7V, SLEEP MODE)",
    "PIC18F2420/2520/4420/4520\nFIGURE 27-10: MAXIMUM WDT CURRENT vs. VDD ACROSS TEMPERATURE (WDT DELTA CURRENT IN SLEEP MODE)\nFIGURE 27-12: MAXIMUM IDD ACROSS VDD (RC_RUN MODE, +85\u00b0C)\nFIGURE 27-14: TYPICAL IDD ACROSS VDD (RC_IDLE MODE, +25\u00b0C)\nFIGURE 27-16: TYPICAL AND MAXIMUM IDD ACROSS VDD (RC_IDLE MODE, 31 kHz)\nFIGURE 27-17: TYPICAL AND MAXIMUM SEC_RUN CURRENT vs. VDD ACROSS TEMPERATURE (T1OSC IN LOW-POWER MODE)\nFIGURE 27-18: TYPICAL AND MAXIMUM SEC_IDLE CURRENT vs. VDD ACROSS TEMPERATURE (T1OSC IN LOW-POWER MODE)\nFIGURE 27-20: MAXIMUM IDD vs. FOSC, 500 kHz TO 4 MHz (PRI_RUN MODE (EC CLOCK), -40\u00b0C TO +125\u00b0C)\nFIGURE 27-22: MAXIMUM IDD vs. FOSC, 4 MHz TO 40 MHz (PRI_RUN MODE (EC CLOCK), -40\u00b0C TO +125\u00b0C)",
    "PIC18F2420/2520/4420/4520\nFIGURE 27-24: MAXIMUM IDD vs. FOSC, HS/PLL (PRI_RUN MODE, -40\u00b0C)\nFIGURE 27-26: MAXIMUM IDD vs. FOSC, 500 kHz TO 4 MHz (PRI_IDLE MODE, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-30: MAXIMUM IDD vs. FOSC, HS/PLL (PRI_IDLE MODE, -40\u00b0C)\nFIGURE 27-32: VIN (TTL) vs. VDD, +25\u00b0C (-40\u00b0C TO +125\u00b0C)\nFIGURE 27-34: VOL vs. IOL (VDD = 5.0V, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-36: VOH vs. IOH (VDD = 5.0V, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-38: INTRC vs. VDD ACROSS TEMPERATURE (-40\u00b0C TO +125\u00b0C)\nFIGURE 27-39:\nWDT PERIOD vs. VDD ACROSS TEMPERATURE\n(1:1 POSTSCALER, -40\u00b0C TO +125\u00b0C)",
    "Legend:\nXX...X\nCustomer-specific information\nY\nYear code (last digit of calendar year)\nYY\nYear code (last 2 digits of calendar year)\nWW\nWeek code (week of January 1 is week '01')\nNNN\nAlphanumeric traceability code\nPb-free JEDEC\u00ae designator for Matte Tin (Sn)\n*\nThis package is Pb-free. The Pb-free JEDEC designator (     ) 3 e\ncan be found on the outer packaging for this package.\nNote :\nIn the event the full Microchip part number cannot be marked on one line, it will be  carried  over  to  the  next  line,  thus  limiting  the  number  of  available characters for customer-specific information.\n3\ne",
    "28.2 Package Details\nThe following sections give the technical details of the packages.",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g49/g82/g87/g72/g29",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng3/g70/g88/g85/g85/g72/g81/g87/g3/g83/g68/g70",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng78/g68/g74/g72/g3/g71/g85/g68/g90/g76/g81/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng74/g86/g15/g3/g83/g79/g72/g68/g86/g72/g3/g86",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng72/g72/g3/g87/g75/g72/g3/g48/g76/g70/g85/g82",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/\ng70/g75/g76/g83/g3/g51/g68/g70/g78/g68/g74/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng76/g81/g74/g3/g54",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng82/g81/g3/g79/g82/g70/g68/g87/g72/g71/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng68/g87/g3",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng82/g80/g18/g83/g68/g70/g78/g68/g74/g76/g81/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g21/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g21/g27. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g21/g27. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g19/g19/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g19/g19/g3/g37/g54/g38. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g19/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g22/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g24/g19. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g20/g24. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g177. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g21/g28/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g22/g20/g19. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g22/g22/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g21/g23/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g21/g27/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g28/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g20/g17/g22/g23/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g20/g17/g22/g25/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g20/g17/g23/g19/g19. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20 /g20/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g22/g19. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g24/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g19/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g20/g19. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g20/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69/g20. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g17/g19/g23/g19. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g24/g19. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g26/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g17/g19/g20/g23. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g20/g27. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g21/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72/g37.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g23/g22/g19",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g17/g19/g20/g19/g5/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g26/g19/g37",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g49/g82/g87/g72/g29",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng70/g88/g85/g85/g72/g81/g87/g3/g83/g68/g70/g78/g68",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng74/g72/g3/g71/g85/g68/g90/g76/g81/g74/g86/g15/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng83/g79/g72/g68/g86/g72/g3/g86/g72/g72/g3/g87/g75",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/\ng72/g3/g48/g76/g70/g85/g82/g70/g75/g76/g83/g3/g51/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng68/g70/g78/g68/g74/g76/g81/g74/g3/g54",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/g82/g81",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/\ng3/g79/g82/g70/g68/g87/g72/g71/g3/g68/g87/g3",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/g82/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng80/g18/g83/g68/g70/g78/g68/g74/g76/g81/g74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g21/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g21/g27. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g21/g27. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g21/g26/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17/g21/g26/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g26/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g21/g17/g25/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g21/g17/g19/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g20/g19. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g22/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g22/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g19/g17/g22/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g26/g17/g24/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g26/g17/g24/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g26/g17/g24/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g26/g17/g28/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g26/g17/g28/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g26/g17/g28/g19/g3/g37/g54/g38. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g75.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g24. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g177. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g26/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g23/g19. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g26. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47/g20. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g27/g131. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g20/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g22.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g24/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g24/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g24/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g24/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g24/g131\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g19/g17/g20/g24/g3/g80/g80/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g24/g21/g37",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g21/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g21/g27. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g21/g27. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g25/g24/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g27/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g28/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g19/g21. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g22. /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g19/g3/g53/g40/g41. /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g21/g19/g3/g53/g40/g41.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g21/g19/g3/g53/g40/g41. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g25/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g25/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g21. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g22/g17/g25/g24. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g22/g17/g26/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g17/g21/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g25/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g25/g17/g19/g19/g3/g37/g54/g38. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g22/g17/g25/g24. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g22/g17/g26/g19. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g17/g21/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g22. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g22/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g24. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g24/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g24/g24. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g26/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g46.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g19. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g51/g68/g70/g78/g68/g74/g72/g3/g76/g86/g3/g86/g68/g90/g3/g86/g76/g81/g74/g88/g79/g68/g87/g72/g71/g17",
    "/g49/g82/g87/g72/g86/g29\n/g22/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g20/g19/g24/g37",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g49/g82/g87/g72/g29, 1 =",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87/g3/g70/g88/g85/g85/g72/g81/g87/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng83/g68/g70/g78/g68/g74/g72/g3/g71/g85/g68/g90/g76/g81/g74/g86/g15/g3/g83/g79/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72/g68/g86/g72/g3/g86/g72/g72/g3/g87/g75/g72/g3/g48/g76/g70/g85/g82/g70/g75/g76/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng83/g3/g51/g68/g70/g78/g68/g74/g76/g81/g74/g3/g54",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/g82/g81/g3/g79/g82/g70/g68/g87/g72/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng71/g3/g68/g87/g3\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/g82/g80/g18/g83/g68/g70/g78/g68/g74",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng76/g81/g74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g23/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g23/g19. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g23/g19. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g19/g19/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g19/g19/g3/g37/g54/g38. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g24/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g21/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g28/g24. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g20/g24. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g177. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g24/g28/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g25/g21/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g23/g27/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g24/g27/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g20/g17/g28/g27/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g21/g17/g19/g28/g24. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20 /g20/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g19/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g20/g24. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69/g20. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g22/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g26/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g17/g19/g20/g23. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g21/g22.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72/g37.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g26/g19/g19",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g17/g19/g20/g19/g5/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g20/g25/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g49/g82/g87/g72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g41/g82/g85/g3/g87/g75/g72/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng80/g82/g86/g87/g3/g70/g88/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g72/g81/g87/g3/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng70/g78/g68/g74/g72/g3/g71/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g68/g90/g76/g81/g74/g86/g15",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g83/g79/g72/g68/g86/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng3/g86/g72/g72/g3/g87/g75/g72",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g48/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g3/g51/g68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g74/g76/g81/g74/g3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g83/g72/g70/g76/g73/g76/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g76/g82/g81/g3/g79/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng82/g70/g68/g87/g72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g75/g87/g87/g83/g29/g18/g18/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g17/g70/g82/g80/g18/g83",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g70/g78/g68/g74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng74\nBOTTOM VIEW",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g23/g23.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g23. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g25/g24/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g27/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g28/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g19/g21. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g22. /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g19/g3/g53/g40/g41. /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g21/g19/g3/g53/g40/g41.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g21/g19/g3/g53/g40/g41. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g27/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g27/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g27/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g21. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g22/g19. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g25/g17/g23/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g25/g17/g27/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g27/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g27/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g27/g17/g19/g19/g3/g37/g54/g38. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g22/g19. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g25/g17/g23/g24. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g25/g17/g27/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g24. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g22/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g27. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g23/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g24/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g46.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g19. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g51/g68/g70/g78/g68/g74/g72/g3/g76/g86/g3/g86/g68/g90/g3/g86/g76/g81/g74/g88/g79/g68/g87/g72/g71/g17",
    "/g49/g82/g87/g72/g86/g29\n/g22/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g20/g19/g22/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g49/g82/g87/g72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g41/g82/g85/g3/g87/g75/g72/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng80/g82/g86/g87/g3/g70/g88/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g72/g81/g87/g3/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng70/g78/g68/g74/g72/g3/g71/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g68/g90/g76/g81/g74/g86/g15",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g83/g79/g72/g68/g86/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng3/g86/g72/g72/g3/g87/g75/g72",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g48/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g3/g51/g68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g74/g76/g81/g74/g3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g83/g72/g70/g76/g73/g76/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g76/g82/g81/g3/g79/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng82/g70/g68/g87/g72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g75/g87/g87/g83/g29/g18/g18/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g17/g70/g82/g80/g18/g83",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g70/g78/g68/g74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng74",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g49/g82/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g41/g82/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g87/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g3/g80/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng82/g86/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g70/g88/g85",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng85/g72/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g74/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g71/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g90/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng81/g74/g86/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng15/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng79/g72/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng86/g72/g3/g86",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng72/g72/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g75/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g48/g76/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng85/g82/g70/g75",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng76/g83/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng51/g68/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng78/g68/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g81/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g83/g72/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g73/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g82/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g79/g82/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g75/g87/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng83/g29/g18/g18",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng90/g90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g17/g80/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g85/g82/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng75/g76/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng17/g70/g82/g80",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng18/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g78/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74\nc",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g23.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g27/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g27/g19/g3/g37/g54/g38. /g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g27/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g28/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g19/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g20/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g23/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g25/g19. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g26/g24. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47/g20. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g22/g17/g24/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g26/g131. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g21/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g19/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g19/g17/g19/g28. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g22/g26. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g23/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20 /g20/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g22/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20 /g20/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g22/g131\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g38/g75/g68/g80/g73/g72/g85/g86/g3/g68/g87/g3/g70/g82/g85/g81/g72/g85/g86/g3/g68/g85/g72/g3/g82/g83/g87/g76/g82/g81/g68/g79/g30/g3/g86/g76/g93/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92 /g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g20/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/",
    "/g49/g82/g87/g72/g86/g29\ng71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g19/g17/g21/g24/g3/g80/g80/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g26/g25/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g49/g82/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g41/g82/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g87/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g3/g80/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng82/g86/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g70/g88/g85",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng85/g72/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g74/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g71/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g90/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng81/g74/g86/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng15/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng79/g72/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng86/g72/g3/g86",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng72/g72/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g75/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g48/g76/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng85/g82/g70/g75",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng76/g83/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng51/g68/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng78/g68/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g81/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g83/g72/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g73/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g82/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g79/g82/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g75/g87/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng83/g29/g18/g18",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng90/g90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g17/g80/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g85/g82/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng75/g76/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng17/g70/g82/g80",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng18/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g78/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74",
    "APPENDIX B: DEVICE DIFFERENCES\nOriginal data sheet for PIC18F2420/2520/4420/4520 devices.",
    "Revision B (January 2007)\nThis revision includes updates to the packaging diagrams.",
    "Revision C (June 2007)\nThis revision includes updates to Section 6.0 'Flash Program Memory' , Section 23.0 'Special Features of the CPU' , Section 26.0 'Electrical Characteristics' and  minor  corrections  applicable  to  Timer1, EUSART and the packaging diagrams. Also added the 125\u00b0C specifications.",
    "Revision D (July 2007)\nThis revision updated the extended temperature information in Section 26.0 'Electrical Characteristics' .",
    "Revision E (October 2008)\nThis revision updated Section 26.0 'Electrical Characteristics' , Section 27.0 'DC and AC Characteristics Graphs  and  Tables' and Section 28.0  'Packaging Information' .",
    "Revision F (May 2021)\nThis revision includes updates to Section 26.0 'Electrical Characteristics' and a terminology update. It removes the obsoleted Appendix C (Migration from PIC16CXXX Devices) and Appendix D (Migration from PIC17CXXX Devices).",
    "TABLE B-1: DEVICE DIFFERENCES\nProgram Memory (Bytes), PIC18F2420 = 16384. Program Memory (Bytes), PIC18F2520 = 32768. Program Memory (Bytes), PIC18F4420 = 16384. Program Memory (Bytes), PIC18F4520 = 32768. Program Memory (Instructions), PIC18F2420 = 8192. Program Memory (Instructions), PIC18F2520 = 16384. Program Memory (Instructions), PIC18F4420 = 8192. Program Memory (Instructions), PIC18F4520 = 16384. Interrupt Sources, PIC18F2420 = 19. Interrupt Sources, PIC18F2520 = 19. Interrupt Sources, PIC18F4420 = 20. Interrupt Sources, PIC18F4520 = 20. I/O Ports, PIC18F2420 = Ports A, B, C, (E). I/O Ports, PIC18F2520 = Ports A, B, C, (E). I/O Ports, PIC18F4420 = Ports A, B, C, D, E. I/O Ports, PIC18F4520 = Ports A,",
    "TABLE B-1: DEVICE DIFFERENCES\nB, C, D, E. Capture/Compare/PWM Modules, PIC18F2420 = 2. Capture/Compare/PWM Modules, PIC18F2520 = 2. Capture/Compare/PWM Modules, PIC18F4420 = 1. Capture/Compare/PWM Modules, PIC18F4520 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F2420 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2520 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F4420 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4520 = 1. Parallel Communications (PSP), PIC18F2420 = No. Parallel Communications (PSP), PIC18F2520 = No. Parallel Communications (PSP), PIC18F4420 = Yes. Parallel Communications (PSP), PIC18F4520 = Yes. 10-Bit Analog-to-Digital Module, PIC18F2420 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F2520 = 10 Input Channels.",
    "TABLE B-1: DEVICE DIFFERENCES\n10-Bit Analog-to-Digital Module, PIC18F4420 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4520 = 13 Input Channels. Packages, PIC18F2420 = 28-Pin SPDIP 28-Pin SOIC 28-Pin QFN. Packages, PIC18F2520 = 28-Pin SPDIP 28-Pin SOIC 28-Pin QFN. Packages, PIC18F4420 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN. Packages, PIC18F4520 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN\nThe differences between the devices listed in this data sheet are shown in Table B-1 .",
    "THE MICROCHIP WEBSITE\nMicrochip provides online support via our WWW site at www.microchip.com. This website is used as a means to make  files and  information  easily available to customers. Accessible by using your favorite Internet browser, the website contains the following information:\n\u00b7 Product Support - Data sheets and errata, application notes and sample programs, design resources, user's guides and hardware support documents, latest software releases and archived software\n\u00b7 General Technical Support - Frequently Asked Questions (FAQ), technical support requests, online discussion groups, Microchip consultant program member listing\n\u00b7 Business of Microchip - Product selector and ordering guides, latest Microchip press releases, listing of seminars and events, listings of Microchip sales offices, distributors and factory representatives",
    "CUSTOMER CHANGE NOTIFICATION SERVICE\nMicrochip's  customer  notification  service  helps  keep customers current on Microchip products. Subscribers will receive  e-mail  notification  whenever  there  are changes,  updates,  revisions  or  errata  related  to  a specified product family or development tool of interest.\nTo register, access the Microchip website at www.microchip.com. Under 'Support', click on 'Customer Change  Notification' and follow the registration instructions.",
    "CUSTOMER SUPPORT\nUsers  of  Microchip  products  can  receive  assistance through several channels:\n\u00b7 Distributor or Representative\n\u00b7 Local Sales Office\n\u00b7 Field Application Engineer (FAE)\n\u00b7 Technical Support\nCustomers should contact their distributor, representative or Field Application Engineer (FAE) for support. Local sales offices are also available to help customers. A  listing  of  sales  offices  and  locations  is included in the back of this document.\nTechnical support is available through the website at: http://microchip.com/support",
    "PIC18F2420/2520/4420/4520 PRODUCT IDENTIFICATION SYSTEM\nTo order or obtain information, e.g., on pricing or delivery, refer to the factory or the listed sales office.",
    "PIC18F2420/2520/4420/4520 PRODUCT IDENTIFICATION SYSTEM\nDevice, X Temperature Range = PIC18F2420/2520 (1) , PIC18F4420/4520 (1) , PIC18F2420/2520T (2) , PIC18F4420/4520T (2) ; VDD range 4.2V to 5.5V PIC18LF2420/2520 (1) , PIC18LF4420/4520 (1) , PIC18LF2420/2520T (2) , PIC18LF4420/4520T (2) ;. Device, /XX Package = PIC18F2420/2520 (1) , PIC18F4420/4520 (1) , PIC18F2420/2520T (2) , PIC18F4420/4520T (2) ; VDD range 4.2V to 5.5V PIC18LF2420/2520 (1) , PIC18LF4420/4520 (1) , PIC18LF2420/2520T (2) , PIC18LF4420/4520T (2) ;.",
    "PIC18F2420/2520/4420/4520 PRODUCT IDENTIFICATION SYSTEM\nDevice, XXX Pattern = PIC18F2420/2520 (1) , PIC18F4420/4520 (1) , PIC18F2420/2520T (2) , PIC18F4420/4520T (2) ; VDD range 4.2V to 5.5V PIC18LF2420/2520 (1) , PIC18LF4420/4520 (1) , PIC18LF2420/2520T (2) , PIC18LF4420/4520T (2) ;. Temperature Range, X Temperature Range = I = -40 \uf0b0 C to +85 \uf0b0 C (Industrial) E = -40 \uf0b0 C to +125 \uf0b0 C (Extended). Temperature Range, /XX Package = I = -40 \uf0b0 C to +85 \uf0b0 C (Industrial) E = -40 \uf0b0 C to +125 \uf0b0 C (Extended). Temperature Range, XXX Pattern = I = -40 \uf0b0 C to +85 \uf0b0 C (Industrial) E = -40 \uf0b0 C to +125 \uf0b0 C (Extended). Package, X Temperature Range = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic",
    "PIC18F2420/2520/4420/4520 PRODUCT IDENTIFICATION SYSTEM\nDIP P = PDIP ML = QFN. Package, /XX Package = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Package, XXX Pattern = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Pattern, X Temperature Range = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, /XX Package = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, XXX Pattern = QTP, SQTP, Code or Special Requirements (blank otherwise)",
    "Examples:\na) PIC18LF4520-I/P 301 = Industrial temp., PDIP package, Extended VDD limits, QTP pattern #301.\nb) PIC18LF2420-I/SO = Industrial temp., SOIC package, Extended VDD limits.\nc) PIC18F4420-I/P = Industrial temp., PDIP package, normal VDD limits.\nNote 1: F = Standard Voltage Range LF = Wide Voltage Range 2: T = in tape and reel TQFP packages only.",
    "Note the following details of the code protection feature on Microchip devices:\n\u00b7 Microchip products meet the specifications contained in their particular Microchip Data Sheet.\n\u00b7 Microchip believes that its family of products is secure when used in the intended manner and under normal conditions.\n\u00b7 There are dishonest and possibly illegal methods being used in attempts to breach the code protection features of the Microchip devices. We believe that these methods require using the Microchip products in a manner outside the operating specifications contained in Microchip's Data Sheets. Attempts to breach these code protection features, most likely, cannot be accomplished without violating Microchip's intellectual property rights.\n\u00b7 Microchip is willing to work with any customer who is concerned about the integrity of its code.",
    "Note the following details of the code protection feature on Microchip devices:\n\u00b7 Neither Microchip nor any other semiconductor manufacturer can guarantee the security of its code. Code protection does not mean that we are guaranteeing the product is \"unbreakable.\" Code protection is constantly evolving. We at Microchip are committed to continuously improving the code protection features of our products. Attempts to break Microchip's code protection feature may be a violation of the Digital Millennium Copyright Act. If such acts allow unauthorized access to your software or other copyrighted work, you may have a right to sue for relief under that Act.\nInformation contained in this publication is provided for the sole purpose of designing with and using Microchip products. Information regarding device applications and the like is provided only for your convenience and may be superseded by updates. It  is  your  responsibility to ensure that your application meets with your specifications.",
    "Trademarks\nTHIS INFORMATION IS PROVIDED BY MICROCHIP \"AS IS\". MICROCHIP  MAKES  NO  REPRESENTATIONS  OR  WARRANTIES OF ANY KIND WHETHER EXPRESS OR IMPLIED, WRITTEN OR ORAL, STATUTORY OR OTHERWISE, RELATED TO THE  INFORMATION  INCLUDING  BUT  NOT LIMITED TO  ANY IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES RELATED TO ITS CONDITION, QUALITY, OR PERFORMANCE.",
    "Trademarks\nIN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT,  SPECIAL,  PUNITIVE,  INCIDENTAL  OR  CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE INFORMATION OR ITS USE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE FULLEST EXTENT ALLOWED  BY  LAW,  MICROCHIP'S  TOTAL  LIABILITY  ON ALL CLAIMS IN ANY WAY RELATED TO THE INFORMATION OR ITS USE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,  THAT  YOU  HAVE  PAID  DIRECTLY  TO  MICROCHIP FOR THE INFORMATION. Use of Microchip devices in life support and/or safety applications is entirely at the buyer's risk, and the  buyer  agrees  to  defend,  indemnify  and  hold  harmless Microchip from any and all damages, claims, suits, or expenses resulting from such use. No licenses are conveyed, implicitly or otherwise,  under  any  Microchip  intellectual  property  rights unless otherwise stated.\nFor information regarding Microchip's Quality Management Systems, please visit www.microchip.com/quality.",
    "Trademarks\nThe Microchip name and logo, the Microchip logo, Adaptec, AnyRate, AVR, AVR logo, AVR Freaks, BesTime, BitCloud, chipKIT, chipKIT logo, CryptoMemory, CryptoRF, dsPIC, FlashFlex, flexPWR, HELDO, IGLOO, JukeBlox, KeeLoq, Kleer, LANCheck, LinkMD, maXStylus, maXTouch, MediaLB, megaAVR, Microsemi, Microsemi logo, MOST, MOST logo, MPLAB, OptoLyzer, PackeTime, PIC, picoPower, PICSTART, PIC32 logo, PolarFire, Prochip Designer, QTouch, SAM-BA, SenGenuity, SpyNIC, SST, SST Logo, SuperFlash, Symmetricom, SyncServer, Tachyon, TimeSource, tinyAVR, UNI/O, Vectron, and XMEGA are registered trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.",
    "Trademarks\nAgileSwitch, APT, ClockWorks, The Embedded Control Solutions Company, EtherSynch, FlashTec, Hyper Speed Control, HyperLight Load, IntelliMOS, Libero, motorBench, mTouch, Powermite 3, Precision Edge, ProASIC, ProASIC Plus, ProASIC Plus logo, QuietWire, SmartFusion, SyncWorld, Temux, TimeCesium, TimeHub, TimePictra, TimeProvider, WinPath, and ZL are registered trademarks of Microchip Technology Incorporated in the U.S.A.",
    "Trademarks\nAdjacent Key Suppression, AKS, Analog-for-the-Digital Age, Any Capacitor, AnyIn, AnyOut, Augmented Switching, BlueSky, BodyCom, CodeGuard, CryptoAuthentication, CryptoAutomotive, CryptoCompanion, CryptoController, dsPICDEM, dsPICDEM.net, Dynamic Average Matching, DAM, ECAN, Espresso T1S, EtherGREEN, IdealBridge, In-Circuit Serial Programming, ICSP, INICnet, Intelligent Paralleling, Inter-Chip Connectivity, JitterBlocker, maxCrypto, maxView, memBrain, Mindi, MiWi, MPASM, MPF, MPLAB Certified logo, MPLIB, MPLINK, MultiTRAK, NetDetach, Omniscient Code Generation, PICDEM, PICDEM.net, PICkit, PICtail, PowerSmart, PureSilicon, QMatrix, REAL ICE, Ripple Blocker, RTAX, RTG4, SAM-ICE, Serial Quad I/O, simpleMAP, SimpliPHY, SmartBuffer, SMART-I.S., storClad,",
    "Trademarks\nSQI, SuperSwitcher, SuperSwitcher II, Switchtec, SynchroPHY, Total Endurance, TSHARC, USBCheck, VariSense, VectorBlox, VeriPHY, ViewSpan, WiperLock, XpressConnect, and ZENA are trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nSQTP is a service mark of Microchip Technology Incorporated in the U.S.A.\nThe Adaptec logo, Frequency on Demand, Silicon Storage Technology, and Symmcom are registered trademarks of Microchip Technology Inc. in other countries.\nGestIC is a registered trademark of Microchip Technology Germany II GmbH & Co. KG, a subsidiary of Microchip Technology Inc., in other countries.\nAll other trademarks mentioned herein are property of their respective companies.\n\u00a9 2004-2021, Microchip Technology Incorporated, All Rights Reserved.\nISBN: 978-1-5224-8374-8",
    "AMERICAS\nCorporate Office 2355 West Chandler Blvd. Chandler, AZ 85224-6199 Tel: 480-792-7200 Fax: 480-792-7277 Technical Support: http://www.microchip.com/\nsupport\nWeb Address:\nwww.microchip.com\nAtlanta Duluth, GA Tel: 678-957-9614 Fax: 678-957-1455\nAustin, TX Tel: 512-257-3370\nBoston Westborough, MA Tel: 774-760-0087 Fax: 774-760-0088\nChicago Itasca, IL Tel: 630-285-0071 Fax: 630-285-0075\nDallas Addison, TX Tel: 972-818-7423 Fax: 972-818-2924\nDetroit Novi, MI Tel: 248-848-4000\nHouston, TX Tel: 281-894-5983\nIndianapolis Noblesville, IN Tel: 317-773-8323 Fax: 317-773-5453 Tel: 317-536-2380",
    "AMERICAS\nLos Angeles Mission Viejo, CA Tel: 949-462-9523 Fax: 949-462-9608 Tel: 951-273-7800\nRaleigh, NC Tel: 919-844-7510\nNew York, NY Tel: 631-435-6000\nSan Jose, CA Tel: 408-735-9110 Tel: 408-436-4270\nCanada - Toronto Tel: 905-695-1980 Fax: 905-695-2078",
    "ASIA/PACIFIC\nAustralia - Sydney Tel: 61-2-9868-6733\nChina - Beijing Tel: 86-10-8569-7000\nChina - Chengdu Tel: 86-28-8665-5511\nChina - Chongqing Tel: 86-23-8980-9588\nChina - Dongguan Tel: 86-769-8702-9880\nChina - Guangzhou Tel: 86-20-8755-8029\nChina - Hangzhou Tel: 86-571-8792-8115\nChina - Hong Kong SAR Tel: 852-2943-5100\nChina - Nanjing Tel: 86-25-8473-2460\nChina - Qingdao Tel: 86-532-8502-7355\nChina - Shanghai Tel: 86-21-3326-8000\nChina - Shenyang Tel: 86-24-2334-2829\nChina - Shenzhen Tel: 86-755-8864-2200\nChina - Suzhou Tel: 86-186-6233-1526\nChina - Wuhan Tel: 86-27-5980-5300\nChina - Xian Tel: 86-29-8833-7252\nChina - Xiamen",
    "ASIA/PACIFIC\nTel: 86-592-2388138\nChina - Zhuhai\nTel: 86-756-3210040\nIndia - Bangalore Tel: 91-80-3090-4444\nIndia - New Delhi Tel: 91-11-4160-8631\nIndia - Pune Tel: 91-20-4121-0141\nJapan - Osaka Tel: 81-6-6152-7160\nJapan - Tokyo Tel: 81-3-6880- 3770\nKorea - Daegu Tel: 82-53-744-4301\nKorea - Seoul Tel: 82-2-554-7200\nMalaysia - Kuala Lumpur Tel: 60-3-7651-7906\nMalaysia - Penang Tel: 60-4-227-8870\nPhilippines - Manila Tel: 63-2-634-9065\nSingapore Tel: 65-6334-8870\nTaiwan - Hsin Chu Tel: 886-3-577-8366\nTaiwan - Kaohsiung Tel: 886-7-213-7830\nTaiwan - Taipei Tel: 886-2-2508-8600\nThailand - Bangkok Tel: 66-2-694-1351\nVietnam - Ho Chi Minh",
    "ASIA/PACIFIC\nTel: 84-28-5448-2100",
    "EUROPE\nAustria - Wels Tel: 43-7242-2244-39 Fax: 43-7242-2244-393\nDenmark - Copenhagen Tel: 45-4485-5910 Fax: 45-4485-2829\nFinland - Espoo Tel: 358-9-4520-820\nFrance - Paris Tel: 33-1-69-53-63-20 Fax: 33-1-69-30-90-79\nGermany - Garching Tel: 49-8931-9700\nGermany - Haan Tel: 49-2129-3766400\nGermany - Heilbronn Tel: 49-7131-72400\nGermany - Karlsruhe Tel: 49-721-625370\nGermany - Munich Tel: 49-89-627-144-0 Fax: 49-89-627-144-44\nGermany - Rosenheim Tel: 49-8031-354-560\nIsrael - Ra'anana Tel: 972-9-744-7705\nItaly - Milan Tel: 39-0331-742611 Fax: 39-0331-466781\nItaly - Padova Tel: 39-049-7625286",
    "EUROPE\nNetherlands - Drunen Tel: 31-416-690399 Fax: 31-416-690340\nNorway - Trondheim Tel: 47-7288-4388\nPoland - Warsaw Tel: 48-22-3325737\nRomania - Bucharest Tel: 40-21-407-87-50\nSpain - Madrid Tel: 34-91-708-08-90 Fax: 34-91-708-08-91\nSweden - Gothenberg Tel: 46-31-704-60-40\nSweden - Stockholm Tel: 46-8-5090-4654\nUK - Wokingham Tel: 44-118-921-5800 Fax: 44-118-921-5820",
    "PIC18F2420/2520/4420/4520\nDevice Overview 5\nOscillator Configurations 20\nPower-Managed Modes 29\nReset 37\nMemory Organization 49\nFlash Program Memory 69\nData EEPROM Memory 78\n8 x 8 Hardware Multiplier 83\nInterrupts 85\nI/O Ports 98\nTimer0 Module 115\nTimer1 Module 118\nTimer2 Module 124\nTimer3 Module 126\nCapture/Compare/PWM (CCP) Modules 129\nEnhanced Capture/Compare/PWM (ECCP) Module 137\nHost Synchronous Serial Port (MSSP) Module 151\nEnhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART) 190\n10-Bit Analog-to-Digital Converter (A/D) Module 214\nComparator Module 224\nComparator Voltage Reference Module 229\nHigh/Low-Voltage Detect (HLVD) 232\nSpecial Features of the CPU 237\nInstruction Set Summary 255\nDevelopment Support 305\nElectrical Characteristics 307\nDC and AC Characteristics Graphs and Tables 346\nPackaging Information 367\nAppendix A: Revision History 378\nAppendix B: Device Differences 378\nThe Microchip WebSite 379\nCustomer Change Notification Service 379\nCustomer Support 379\nPIC18F2420/2520/4420/4520 Product Identification System 380"
]