[
    "PIC18F2525/2620/4525/4620 Data Sheet\n28/40/44-Pin\nEnhanced Flash Microcontrollers with 10-Bit A/D and nanoWatt Technology",
    "Note the following details of the code protection feature on Microchip devices:\n\u00b7 Microchip products meet the specification contained in their particular Microchip Data Sheet.\n\u00b7 Microchip believes that its family of products is one of the most secure families of its kind on the market today, when used in the intended manner and under normal conditions.\n\u00b7 There are dishonest and possibly illegal methods used to breach the code protection feature. All of these methods, to our knowledge, require using the Microchip products in a manner outside the operating specifications contained in Microchip's Data Sheets. Most likely, the person doing so is engaged in theft of intellectual property.\n\u00b7 Microchip is willing to work with the customer who is concerned about the integrity of their code.\n\u00b7 Neither Microchip nor any other semiconductor manufacturer can guarantee the security of their code. Code protection does not mean that we are guaranteeing the product as 'unbreakable.'",
    "Note the following details of the code protection feature on Microchip devices:\nCode protection is constantly evolving. We at Microchip are committed to continuously improving the code protection features of our products. Attempts to break Microchip's code protection feature may be a violation of the Digital Millennium Copyright Act. If such acts allow unauthorized access to your software or other copyrighted work, you may have a right to sue for relief under that Act.",
    "Note the following details of the code protection feature on Microchip devices:\nInformation  contained  in  this  publication  regarding  device applications and the like is provided only for your convenience and may be superseded by updates. It is your responsibility to ensure  that  your  application  meets  with  your  specifications. MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES  OF  ANY  KIND  WHETHER  EXPRESS  OR IMPLIED, WRITTEN OR ORAL, STATUTORY OR OTHERWISE, RELATED TO THE INFORMATION, INCLUDING  BUT  NOT  LIMITED  TO  ITS CONDITION, QUALITY, PERFORMANCE, MERCHANTABILITY OR FITNESS  FOR  PURPOSE . Microchip  disclaims  all  liability arising  from  this  information  and  its  use.  Use  of  Microchip devices in life support and/or safety applications is entirely at the buyer's risk, and the buyer agrees to defend, indemnify and hold  harmless  Microchip  from  any  and  all  damages,  claims, suits,  or  expenses  resulting  from  such  use.  No  licenses  are conveyed, implicitly or otherwise, under any Microchip intellectual property rights.",
    "Trademarks\nThe Microchip name and logo, the Microchip logo, Accuron, dsPIC, KEELOQ, KEELOQ logo, MPLAB, PIC, PICmicro, PICSTART, PRO MATE, rfPIC and SmartShunt are registered trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nFilterLab, Linear Active Thermistor, MXDEV, MXLAB, SEEVAL, SmartSensor and The Embedded Control Solutions Company are registered trademarks of Microchip Technology Incorporated in the U.S.A.",
    "Trademarks\nAnalog-for-the-Digital Age, Application Maestro, CodeGuard, dsPICDEM, dsPICDEM.net, dsPICworks, dsSPEAK, ECAN, ECONOMONITOR, FanSense, In-Circuit Serial Programming, ICSP, ICEPIC, Mindi, MiWi, MPASM, MPLAB Certified logo, MPLIB, MPLINK, mTouch, PICkit, PICDEM, PICDEM.net, PICtail, PIC 32  logo, PowerCal, PowerInfo, PowerMate, PowerTool, REAL ICE, rfLAB, Select Mode, Total Endurance, UNI/O, WiperLock and ZENA are trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nSQTP is a service mark of Microchip Technology Incorporated in the U.S.A.\nAll other trademarks mentioned herein are property of their respective companies.\n\u00a9 2008, Microchip Technology Incorporated, Printed in the U.S.A., All Rights Reserved.\nPrinted on recycled paper.",
    "Trademarks\nMicrochip received ISO/TS-16949:2002 certification for its worldwide headquarters, design and wafer fabrication facilities in Chandler and Tempe, Arizona; Gresham, Oregon and design centers in California and India. The Company's quality system processes and procedures are for its PIC \u00ae MCUs and dsPIC \u00ae  DSCs, KEELOQ \u00ae  code hopping devices, Serial EEPROMs, microperipherals, nonvolatile memory and analog products. In addition, Microchip's quality system for the design and manufacture of development systems is ISO 9001:2000 certified.\nQUALITY MANAGEMENT SYSTEM CERTIFIED BY DNV",
    "Peripheral Highlights (Continued):\n\u00b7 Run: CPU on, Peripherals on\n\u00b7 Idle: CPU off, Peripherals on\n\u00b7 Sleep: CPU off, Peripherals off\n\u00b7 Ultra Low 50nA Input Leakage\n\u00b7 Run mode Currents Down to 11 \u03bc A Typical\n\u00b7 Idle mode Currents Down to 2.5 \u03bc A Typical\n\u00b7 Sleep mode Current Down to 100 nA Typical\n\u00b7 Timer1 Oscillator: 900 nA, 32 kHz, 2V\n\u00b7 Watchdog Timer: 1.4 \u03bc A, 2V Typical\n\u00b7 Two-Speed Oscillator Start-up",
    "Flexible Oscillator Structure:\n\u00b7 Four Crystal modes, up to 40 MHz\n\u00b7 4x Phase Lock Loop (PLL) - Available for Crystal and Internal Oscillators\n\u00b7 Two External RC modes, up to 4 MHz\n\u00b7 Two External Clock modes, up to 40 MHz\n\u00b7 Internal Oscillator Block:\n-Fast wake from Sleep and Idle, 1 \u03bc s typical\n-8 use-selectable frequencies, from 31 kHz to 8 MHz\n-Provides a complete range of clock speeds from 31 kHz to 32 MHz when used with PLL\n-User-tunable to compensate for frequency drift\n\u00b7 Secondary Oscillator using Timer1 @ 32 kHz\n\u00b7 Fail-Safe Clock Monitor:\n-Allows for safe shutdown if peripheral clock stops",
    "Peripheral Highlights:\n\u00b7 High-Current Sink/Source 25 mA/25 mA\n\u00b7 Three Programmable External Interrupts\n\u00b7 Four Input Change Interrupts\n\u00b7 Up to 2 Capture/Compare/PWM (CCP) modules, one with Auto-Shutdown (28-pin devices)\n\u00b7 Enhanced Capture/Compare/PWM (ECCP) module (40/44-pin devices only):\n-One, two or four PWM outputs\n-Selectable polarity\n-Programmable dead time\n-Auto-shutdown and auto-restart\n\u00b7 Master Synchronous Serial Port (MSSP) module Supporting 3-Wire SPI (all 4 modes) and I 2 C\u2122 Master and Slave modes\n\u00b7 Enhanced Addressable USART module:\n-Supports RS-485, RS-232 and LIN/J2602\n-RS-232 operation using internal oscillator block (no external crystal required)\n-Auto-wake-up on Start bit\n-Auto-Baud Detect\n\u00b7 10-Bit, up to 13-Channel Analog-to-Digital (A/D) Converter module:\n-Auto-acquisition capability\n-Conversion available during Sleep\n\u00b7 Dual Analog Comparators with Input Multiplexing",
    "Peripheral Highlights:\n\u00b7 Programmable 16-Level High/Low-Voltage Detection (HLVD) module:\n-Supports interrupt on High/Low-Voltage Detection",
    "Special Microcontroller Features:\n\u00b7 C Compiler Optimized Architecture:\n-Optional extended instruction set designed to optimize re-entrant code\n\u00b7 100,000 Erase/Write Cycle Enhanced Flash Program Memory Typical\n\u00b7 1,000,000 Erase/Write Cycle Data EEPROM Memory Typical\n\u00b7 Flash/Data EEPROM Retention: 100 Years Typical\n\u00b7 Self-Programmable under Software Control\n\u00b7 Priority Levels for Interrupts\n\u00b7 8 x 8 Single-Cycle Hardware Multiplier\n\u00b7 Extended Watchdog Timer (WDT):\n-Programmable period from 4 ms to 131s\n\u00b7 Single-Supply 5V In-Circuit Serial Programming\u2122 (ICSP\u2122) via Two Pins\n\u00b7 In-Circuit Debug (ICD) via Two Pins\n\u00b7 Wide Operating Voltage Range: 2.0V to 5.5V\n\u00b7 Programmable Brown-out Reset (BOR) with Software Enable Option\n-",
    "Special Microcontroller Features:\nPIC18F2525, Program Memory.Flash (bytes) = 48K. PIC18F2525, Program Memory.# Single-Word Instructions = 24576. PIC18F2525, Data Memory.SRAM (bytes) = 3968. PIC18F2525, Data Memory.EEPROM (bytes) = 1024. PIC18F2525, I/O.I/O = 25. PIC18F2525, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2525, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 2/0. PIC18F2525, MSSP.SPI = Y. PIC18F2525, MSSP.Master I 2 C\u2122 = Y. PIC18F2525, EUSART.EUSART = 1. PIC18F2525, Comp. = 2. PIC18F2525, Timers.8/16-Bit = 1/3. PIC18F2620, Program Memory.Flash (bytes) = 64K.",
    "Special Microcontroller Features:\nPIC18F2620, Program Memory.# Single-Word Instructions = 32768. PIC18F2620, Data Memory.SRAM (bytes) = 3968. PIC18F2620, Data Memory.EEPROM (bytes) = 1024. PIC18F2620, I/O.I/O = 25. PIC18F2620, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2620, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 2/0. PIC18F2620, MSSP.SPI = Y. PIC18F2620, MSSP.Master I 2 C\u2122 = Y. PIC18F2620, EUSART.EUSART = 1. PIC18F2620, Comp. = 2. PIC18F2620, Timers.8/16-Bit = 1/3. PIC18F4525, Program Memory.Flash (bytes) = 48K. PIC18F4525, Program Memory.# Single-Word Instructions = 24576.",
    "Special Microcontroller Features:\nPIC18F4525, Data Memory.SRAM (bytes) = 3968. PIC18F4525, Data Memory.EEPROM (bytes) = 1024. PIC18F4525, I/O.I/O = 36. PIC18F4525, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4525, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 1/1. PIC18F4525, MSSP.SPI = Y. PIC18F4525, MSSP.Master I 2 C\u2122 = Y. PIC18F4525, EUSART.EUSART = 1. PIC18F4525, Comp. = 2. PIC18F4525, Timers.8/16-Bit = 1/3. PIC18F4620, Program Memory.Flash (bytes) = 64K. PIC18F4620, Program Memory.# Single-Word Instructions = 32768. PIC18F4620, Data Memory.SRAM (bytes) = 3968.",
    "Special Microcontroller Features:\nPIC18F4620, Data Memory.EEPROM (bytes) = 1024. PIC18F4620, I/O.I/O = 36. PIC18F4620, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4620, CCP/ ECCP (PWM).CCP/ ECCP (PWM) = 1/1. PIC18F4620, MSSP.SPI = Y. PIC18F4620, MSSP.Master I 2 C\u2122 = Y. PIC18F4620, EUSART.EUSART = 1. PIC18F4620, Comp. = 2. PIC18F4620, Timers.8/16-Bit = 1/3\nDS39626E-page 1",
    "Table of Contents\n1.0, 1 = Device Overview ........................................................................................................................................................................... 1.0, 2 = 7. 2.0, 1 = Oscillator Configurations",
    "Table of Contents\n............................................................................................................................................................. 2.0, 2 = 23. 3.0, 1 = Power-Managed Modes",
    "Table of Contents\n.............................................................................................................................................................. 3.0, 2 = 33. 4.0, 1 =",
    "Table of Contents\nReset........................................................................................................................................................................................... 4.0, 2 = 41. 5.0, 1 = Memory",
    "Table of Contents\nOrganization.................................................................................................................................................................. 5.0, 2 = 53. 6.0, 1 = Data EEPROM Memory",
    "Table of Contents\n.............................................................................................................................................................. 6.0, 2 = 73. 7.0, 1 = Flash Program",
    "Table of Contents\nMemory............................................................................................................................................................... 7.0, 2 = 79. 8.0, 1 = 8 x 8 Hardware",
    "Table of Contents\nMultiplier............................................................................................................................................................. 8.0, 2 = 89. 9.0, 1 = I/O Ports",
    "Table of Contents\n...................................................................................................................................................................................... 9.0, 2 = 91. 10.0, 1 = Interrupts",
    "Table of Contents\n................................................................................................................................................................................... 10.0, 2 = 109. 11.0, 1 = Timer0 Module",
    "Table of Contents\n.......................................................................................................................................................................... 11.0, 2 = 123. 12.0, 1 = Timer1 Module",
    "Table of Contents\n.......................................................................................................................................................................... 12.0, 2 = 127. 13.0, 1 = Timer2 Module",
    "Table of Contents\n.......................................................................................................................................................................... 13.0, 2 = 133. 14.0, 1 = Timer3 Module",
    "Table of Contents\n.......................................................................................................................................................................... 14.0, 2 = 135. 15.0, 1 = Capture/Compare/PWM (CCP) Modules",
    "Table of Contents\n.................................................................................................................................. 15.0, 2 = 139. 16.0, 1 = Enhanced Capture/Compare/PWM (ECCP)",
    "Table of Contents\nModule................................................................................................................. 16.0, 2 = 147. 17.0, 1 = Master Synchronous Serial Port (MSSP) Module",
    "Table of Contents\n..................................................................................................................... 17.0, 2 = 161. 18.0, 1 = Enhanced Universal Synchronous Receiver Transmitter (EUSART)........................................................................................ 18.0, 2 = 201. 19.0, 1 = 10-Bit",
    "Table of Contents\nAnalog-to-Digital Converter (A/D) Module ...................................................................................................................... 19.0, 2 = 223. 20.0, 1 = Comparator",
    "Table of Contents\nModule................................................................................................................................................................... 20.0, 2 = 233. 21.0, 1 = Comparator Voltage Reference",
    "Table of Contents\nModule.................................................................................................................................... 21.0, 2 = 239. 22.0, 1 = High/Low-Voltage Detect",
    "Table of Contents\n(HLVD).............................................................................................................................................. 22.0, 2 = 243. 23.0, 1 = Special Features of the",
    "Table of Contents\nCPU..................................................................................................................................................... 23.0, 2 = 249. 24.0, 1 = Instruction Set",
    "Table of Contents\nSummary........................................................................................................................................................... 24.0, 2 = 267. 25.0, 1 = Development",
    "Table of Contents\nSupport................................................................................................................................................................ 25.0, 2 = 317. 26.0, 1 = Electrical Characteristics",
    "Table of Contents\n........................................................................................................................................................... 26.0, 2 = 321. 27.0, 1 = DC and AC Characteristics Graphs and",
    "Table of Contents\nTables........................................................................................................................ 27.0, 2 = 361. 28.0, 1 = Packaging",
    "Table of Contents\nInformation............................................................................................................................................................... 28.0, 2 = 383. Appendix A: Revision",
    "Table of Contents\nHistory............................................................................................................................................................., 1 = Appendix A: Revision",
    "Table of Contents\nHistory.............................................................................................................................................................. Appendix A: Revision",
    "Table of Contents\nHistory............................................................................................................................................................., 2 = 393. Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 1 = Appendix B: Device",
    "Table of Contents\nDifferences.......................................................................................................................................................... Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 2 = 394. Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 1 = Appendix C: Conversion Considerations",
    "Table of Contents\n............................................................................................................................................ Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 2 = 395. Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 1 = Appendix D: Migration from Baseline to Enhanced Devices............................................................................................................... Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 2 = 395. Appendix E: Migration from Mid-Range TO Enhanced Devices ........................................................................................................, 1 = Appendix E: Migration from Mid-Range TO Enhanced Devices",
    "Table of Contents\n......................................................................................................... Appendix E: Migration from Mid-Range TO Enhanced Devices ........................................................................................................, 2 = 396. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 1 = Appendix F: Migration from High-End to Enhanced Devices.............................................................................................................. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 2 = 396. Index",
    "Table of Contents\n.................................................................................................................................................................................................., 1 = Index",
    "Table of Contents\n................................................................................................................................................................................................... Index",
    "Table of Contents\n.................................................................................................................................................................................................., 2 = 397. The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 1 = The Microchip Web",
    "Table of Contents\nSite...................................................................................................................................................................... The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 2 = 407. Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 1 = Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................... Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 2 = 407. Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 1 = Customer",
    "Table of Contents\nSupport............................................................................................................................................................................... Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 2 = 407. Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 1 = Reader",
    "Table of Contents\nResponse............................................................................................................................................................................... Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 2 = 408",
    "TO OUR VALUED CUSTOMERS\nIt is our intention to provide our valued customers with the best documentation possible to ensure successful use of your Microchip products. To this end, we will continue to improve our publications to better suit your needs. Our publications will be refined and enhanced as new volumes and updates are introduced.\nIf you have any questions or comments regarding this publication, please contact the Marketing Communications Department via E-mail at docerrors@microchip.com or fax the Reader Response Form in the back of this data sheet to (480) 792-4150. We welcome your feedback.",
    "Most Current Data Sheet\nTo obtain the most up-to-date version of this data sheet, please register at our Worldwide Web site at:\nhttp://www.microchip.com\nYou can determine the version of a data sheet by examining its literature number found on the bottom outside corner of any page. The last character of the literature number is the version number, (e.g., DS30000A is version A of document DS30000).",
    "Errata\nAn errata sheet, describing minor operational differences from the data sheet and recommended workarounds, may exist for current devices. As device/documentation issues become known to us, we will publish an errata sheet. The errata will specify the revision of silicon and revision of document to which it applies.\nTo determine if an errata sheet exists for a particular device, please check with one of the following:\n\u00b7 Microchip's Worldwide Web site; http://www.microchip.com\n\u00b7 Your local Microchip sales office (see last page)\nWhen contacting a sales office, please specify which device, revision of silicon and data sheet (include literature number) you are using.",
    "Customer Notification System\nRegister on our web site at www.microchip.com to receive the most current information on all of our products.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "1.0 DEVICE OVERVIEW\nThis document contains device-specific information for the following devices:\n\u2022 PIC18F2525\n\u2022 PIC18LF2525\n\u2022 PIC18F2620\n\u2022 PIC18LF2620\n\u2022 PIC18F4525\n\u2022 PIC18LF4525\n\u2022 PIC18F4620\n\u2022 PIC18LF4620\nThis family offers the advantages of all PIC18 microcontrollers - namely, high computational performance at an economical price - with the addition of high-endurance,  Enhanced  Flash  program  memory. On top of these features, the PIC18F2525/2620/4525/ 4620  family  introduces  design  enhancements  that make these microcontrollers a logical choice for many high-performance, power sensitive applications.",
    "1.1.1 nanoWatt TECHNOLOGY\nAll of the devices in the PIC18F2525/2620/4525/4620 family incorporate a range of features that can significantly  reduce  power  consumption  during  operation. Key items include:\n\u00b7 Alternate Run Modes: By clocking the controller from the Timer1 source or the internal oscillator block, power consumption during code execution can be reduced by as much as 90%.\n\u00b7 Multiple Idle Modes: The controller can also run with its CPU core disabled but the peripherals still active. In these states, power consumption can be reduced even further, to as little as 4%, of normal operation requirements.\n\u00b7 On-the-Fly Mode Switching: The powermanaged modes are invoked by user code during operation, allowing the user to incorporate power-saving ideas into their application's software design.\n\u00b7 Low Consumption in Key Modules: The power requirements for both Timer1 and the Watchdog Timer are minimized. See Section 26.0 'Electrical Characteristics' for values.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nAll of the devices in the PIC18F2525/2620/4525/4620 family  offer  ten  different  oscillator  options,  allowing users a wide range of choices in developing application hardware. These include:",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\n\u00b7 Four Crystal modes, using crystals or ceramic resonators\n\u00b7 Two External Clock modes, offering the option of using two pins (oscillator input and a divide-by-4 clock output) or one pin (oscillator input, with the second pin reassigned as general I/O)\n\u00b7 Two External RC Oscillator modes with the same pin options as the External Clock modes\n\u00b7 An internal oscillator block which provides an 8 MHz clock and an INTRC source (approximately 31 kHz), as well as a range of 6 user-selectable clock frequencies, between 125 kHz to 4 MHz, for a total of 8 clock frequencies. This option frees the two oscillator pins for use as additional general purpose I/O.\n\u00b7 A Phase Lock Loop (PLL) frequency multiplier, available to both the High-Speed Crystal and Internal Oscillator modes, which allows clock speeds of up to 40 MHz. Used with the internal oscillator, the PLL gives users a complete selection of clock speeds, from 31 kHz to 32 MHz - all without using an external crystal or clock circuit.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nBesides its availability as a clock source, the internal oscillator block provides a stable reference source that gives the family additional features for robust operation:\n\u00b7 Fail-Safe Clock Monitor: This option constantly monitors the main clock source against a reference signal provided by the internal oscillator. If a clock failure occurs, the controller is switched to the internal oscillator block, allowing for continued low-speed operation or a safe application shutdown.\n\u00b7 Two-Speed Start-up: This option allows the internal oscillator to serve as the clock source from Power-on Reset, or wake-up from Sleep mode, until the primary clock source is available.",
    "1.2 Other Special Features\n\u00b7 Memory Endurance: The Enhanced Flash cells for both program memory and data EEPROM are rated to last for many thousands of erase/write cycles - up to 100,000 for program memory and 1,000,000 for EEPROM. Data retention without refresh is conservatively estimated to be greater than 40 years.\n\u00b7 Self-Programmability: These devices can write to their own program memory spaces under internal software control. By using a bootloader routine located in the protected Boot Block at the top of program memory, it becomes possible to create an application that can update itself in the field.\n\u00b7 Extended Instruction Set: The PIC18F2525/ 2620/4525/4620 family introduces an optional extension to the PIC18 instruction set, which adds 8 new instructions and an Indexed Addressing mode. This extension, enabled as a device configuration option, has been specifically designed to optimize re-entrant application code originally developed in high-level languages, such as C.",
    "1.2 Other Special Features\n\u00b7 Enhanced CCP Module: In PWM mode, this module provides 1, 2 or 4 modulated outputs for controlling half-bridge and full-bridge drivers. Other features include auto-shutdown, for disabling PWM outputs on interrupt or other select conditions and auto-restart, to reactivate outputs once the condition has cleared.\n\u00b7 Enhanced Addressable USART: This serial communication module is capable of standard RS-232 operation and provides support for the LIN bus protocol. Other enhancements include automatic baud rate detection and a 16-bit Baud Rate Generator for improved resolution. When the microcontroller is using the internal oscillator block, the EUSART provides stable operation for applications that talk to the outside world without using an external crystal (or its accompanying power requirement).\n\u00b7 10-Bit A/D Converter: This module incorporates programmable acquisition time, allowing for a channel to be selected and a conversion to be initiated without waiting for a sampling period and thus, reducing code overhead.",
    "1.2 Other Special Features\n\u00b7 Extended Watchdog Timer (WDT): This enhanced version incorporates a 16-bit prescaler, allowing an extended time-out range that is stable across operating voltage and temperature. See Section 26.0 'Electrical Characteristics' for time-out periods.",
    "1.3 Details on Individual Family Members\nDevices in the PIC18F2525/2620/4525/4620 family are available  in  28-pin  and  40/44-pin  packages.  Block diagrams for the two groups are shown in Figure 1-1 and Figure 1-2.\nThe devices are differentiated from each other in five ways:\n1. Flash program memory (48 Kbytes for PIC18FX525 devices, 64 Kbytes for PIC18FX620 devices).\n2. A/D  channels  (10  for  28-pin  devices,  13  for 40/44-pin devices).\n3. I/O ports (3 bidirectional ports on 28-pin devices, 5 bidirectional ports on 40/44-pin devices).\n4. CCP  and  Enhanced  CCP  implementation (28-pin devices have 2 standard CCP modules, 40/44-pin devices have one standard CCP module and one ECCP module).\n5. Parallel  Slave  Port  (present  only  on  40/44-pin devices).\nAll other features for devices in this family are identical. These are summarized in Table 1-1.",
    "1.3 Details on Individual Family Members\nThe pinouts for all devices are listed in Table 1-2 and Table 1-3.\nLike  all  Microchip  PIC18  devices,  members  of  the PIC18F2525/2620/4525/4620  family  are  available  as both standard and  low-voltage devices. Standard devices with Enhanced Flash memory, designated with an  'F'  in  the  part  number  (such  as  PIC18 F 2620), accommodate an operating VDD range of 4.2V to 5.5V. Low-voltage parts, designated by 'LF' (such as PIC18 LF 2620), function over an extended VDD range of 2.0V to 5.5V.",
    "TABLE 1-1: DEVICE FEATURES\nOperating Frequency, PIC18F2525 = DC - 40 MHz. Operating Frequency, PIC18F2620 = DC - 40 MHz. Operating Frequency, PIC18F4525 = DC - 40 MHz. Operating Frequency, PIC18F4620 = DC - 40 MHz. Program Memory (Bytes), PIC18F2525 = 49152. Program Memory (Bytes), PIC18F2620 = 65536. Program Memory (Bytes), PIC18F4525 = 49152. Program Memory (Bytes), PIC18F4620 = 65536. Program Memory (Instructions), PIC18F2525 = 24576. Program Memory (Instructions), PIC18F2620 = 32768. Program Memory (Instructions), PIC18F4525 = 24576. Program Memory (Instructions), PIC18F4620 = 32768. Data Memory (Bytes), PIC18F2525 = 3968. Data Memory (Bytes), PIC18F2620 = 3968. Data Memory (Bytes), PIC18F4525 = 3968. Data Memory (Bytes), PIC18F4620 = 3968. Data",
    "TABLE 1-1: DEVICE FEATURES\nEEPROM Memory (Bytes), PIC18F2525 = 1024. Data EEPROM Memory (Bytes), PIC18F2620 = 1024. Data EEPROM Memory (Bytes), PIC18F4525 = 1024. Data EEPROM Memory (Bytes), PIC18F4620 = 1024. Interrupt Sources, PIC18F2525 = 19. Interrupt Sources, PIC18F2620 = 19. Interrupt Sources, PIC18F4525 = 20. Interrupt Sources, PIC18F4620 = 20. I/O Ports, PIC18F2525 = Ports A, B, C, (E). I/O Ports, PIC18F2620 = Ports A, B, C, (E). I/O Ports, PIC18F4525 = Ports A, B, C, D, E. I/O Ports, PIC18F4620 = Ports A, B, C, D, E. Timers, PIC18F2525 = 4. Timers, PIC18F2620 = 4. Timers, PIC18F4525 = 4. Timers, PIC18F4620 = 4.",
    "TABLE 1-1: DEVICE FEATURES\nCapture/Compare/PWM Modules, PIC18F2525 = 2. Capture/Compare/PWM Modules, PIC18F2620 = 2. Capture/Compare/PWM Modules, PIC18F4525 = 1. Capture/Compare/PWM Modules, PIC18F4620 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F2525 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F2620 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F4525 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F4620 = 1. Serial Communications, PIC18F2525 = MSSP, Enhanced USART. Serial Communications, PIC18F2620 = MSSP, Enhanced USART. Serial Communications, PIC18F4525 = MSSP, Enhanced USART. Serial Communications, PIC18F4620 = MSSP, Enhanced USART. Parallel Communications (PSP), PIC18F2525 = No. Parallel Communications (PSP), PIC18F2620 = No. Parallel Communications (PSP), PIC18F4525 = Yes.",
    "TABLE 1-1: DEVICE FEATURES\nParallel Communications (PSP), PIC18F4620 = Yes. 10-Bit Analog-to-Digital Module, PIC18F2525 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F2620 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4525 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4620 = 13 Input Channels. Resets (and Delays), PIC18F2525 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2620 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4525 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4620 = POR, BOR, RESET",
    "TABLE 1-1: DEVICE FEATURES\nInstruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Programmable Low-Voltage Detect, PIC18F2525 = Yes. Programmable Low-Voltage Detect, PIC18F2620 = Yes. Programmable Low-Voltage Detect, PIC18F4525 = Yes. Programmable Low-Voltage Detect, PIC18F4620 = Yes. Programmable Brown-out Reset, PIC18F2525 = Yes. Programmable Brown-out Reset, PIC18F2620 = Yes. Programmable Brown-out Reset, PIC18F4525 = Yes. Programmable Brown-out Reset, PIC18F4620 = Yes. Instruction Set, PIC18F2525 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F2620 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F4525 = 75 Instructions; 83 with Extended Instruction Set Enabled. Instruction Set, PIC18F4620 = 75 Instructions; 83 with Extended Instruction Set Enabled. Packages, PIC18F2525 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F2620 =",
    "TABLE 1-1: DEVICE FEATURES\n28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F4525 = 40-Pin PDIP 44-Pin QFN 44-Pin TQFP. Packages, PIC18F4620 = 40-Pin PDIP 44-Pin QFN 44-Pin TQFP",
    "PIC18F2525/2620 (28-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "PIC18F4525/4620 (40/44-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3, Pin Number.SPDIP, SOIC = 1. MCLR/VPP/RE3, Pin Type. = . MCLR/VPP/RE3, Buffer Type. = . MCLR/VPP/RE3, Description. = Master Clear (input) or programming voltage (input).. MCLR, Pin Number.SPDIP, SOIC = . MCLR, Pin Type. = I. MCLR, Buffer Type. = ST. MCLR, Description. = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number.SPDIP, SOIC = . VPP, Pin Type. = P. VPP, Buffer Type. = . VPP, Description. = Programming voltage input.. RE3, Pin Number.SPDIP, SOIC = . RE3, Pin Type. = I. RE3, Buffer Type. = ST. RE3, Description. = Digital input.. OSC1/CLKI/RA7, Pin Number.SPDIP, SOIC = 9.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS\nOSC1/CLKI/RA7, Pin Type. = . OSC1/CLKI/RA7, Buffer Type. = . OSC1/CLKI/RA7, Description. = Oscillator crystal or external clock input.. OSC1, Pin Number.SPDIP, SOIC = . OSC1, Pin Type. = I. OSC1, Buffer Type. = ST. OSC1, Description. = Oscillator crystal input or external clock source input. ST buffer when configured in RC mode; CMOSotherwise.. CLKI, Pin Number.SPDIP, SOIC = . CLKI, Pin Type. = I. CLKI, Buffer Type. = CMOS. CLKI, Description. = External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Type. = I/O. RA7, Buffer Type. = TTL. RA7, Description. = General purpose",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS\nI/O pin.. OSC2/CLKO/RA6, Pin Number.SPDIP, SOIC = 10. OSC2/CLKO/RA6, Pin Type. = . OSC2/CLKO/RA6, Buffer Type. = . OSC2/CLKO/RA6, Description. = Oscillator crystal or clock output.. OSC2, Pin Number.SPDIP, SOIC = . OSC2, Pin Type. = O. OSC2, Buffer Type. = -. OSC2, Description. = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number.SPDIP, SOIC = . CLKO, Pin Type. = O. CLKO, Buffer Type. = -. CLKO, Description. = In RC mode, OSC2 pin outputs CLKO which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Type. = I/O.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS\nRA6, Buffer Type. = TTL. RA6, Description. = General purpose I/O pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n- 2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0, Pin Number.SPDIP, SOIC = 2. RA0/AN0 RA0, Pin Type. = I/O I I/O I I/O I. RA0/AN0 RA0, Buffer Type. = TTL Analog TTL Analog TTL Analog Analog Analog. RA0/AN0 RA0, Description. = PORTA is a bidirectional I/O port. Digital I/O. Analog input 0. Digital I/O. Analog input 1. Digital I/O.. AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF-/CVREF RA2 AN2 VREF-, Pin Number.SPDIP, SOIC = 3 4. AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF-/CVREF RA2 AN2 VREF-, Pin Type. = I O. AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF-/CVREF RA2 AN2 VREF-, Buffer Type.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF-/CVREF RA2 AN2 VREF-, Description. = Analog input 2. A/D reference voltage (low) input. Comparator reference voltage output. Digital I/O. Analog input 3.. RA3/AN3/VREF+ RA3, Pin Number.SPDIP, SOIC = 5. RA3/AN3/VREF+ RA3, Pin Type. = I/O I. RA3/AN3/VREF+ RA3, Buffer Type. = TTL. RA3/AN3/VREF+ RA3, Description. = A/D reference voltage (high) input.. AN3 VREF+, Pin Number.SPDIP, SOIC = . AN3 VREF+, Pin Type. = . AN3 VREF+, Buffer Type. = Analog Analog. AN3 VREF+, Description. = . RA4/T0CKI/C1OUT RA4 T0CKI, Pin Number.SPDIP, SOIC = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA4/T0CKI/C1OUT RA4 T0CKI, Pin Type. = I. RA4/T0CKI/C1OUT RA4 T0CKI, Buffer Type. = ST. RA4/T0CKI/C1OUT RA4 T0CKI, Description. = Digital I/O.. , Pin Number.SPDIP, SOIC = 6. , Pin Type. = I/O I. , Buffer Type. = ST. , Description. = . C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4, Pin Number.SPDIP, SOIC = . C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4, Pin Type. = O. C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4, Buffer Type. = . C1OUT RA5/AN4/SS/HLVDIN/ C2OUT RA5 AN4, Description. = Timer0 external clock input.. SS HLVDIN C2OUT, Pin Number.SPDIP,",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nSOIC = 7. SS HLVDIN C2OUT, Pin Type. = I/O I I. SS HLVDIN C2OUT, Buffer Type. = -. SS HLVDIN C2OUT, Description. = Comparator 1 output.. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Type. = I O. RA6, Buffer Type. = TTL Analog TTL Analog. RA6, Description. = Digital I/O. Analog input 4. SPI slave select input. High/Low-Voltage Detect input. Comparator 2 output. See the OSC2/CLKO/RA6 pin.. , Pin Number.SPDIP, SOIC = . , Pin Type. = . , Buffer Type. = -. , Description. = . , Pin Number.SPDIP, SOIC = . , Pin Type. = . , Buffer Type. = . , Description. = See the OSC1/CLKI/RA7 pin.. RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Type. = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA7, Buffer Type. = . RA7, Description. = \nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0/FLT0/AN12, Pin Number.SPDIP, SOIC = 21. RB0/INT0/FLT0/AN12, Pin Type. = . RB0/INT0/FLT0/AN12, Buffer Type. = . RB0/INT0/FLT0/AN12, Description. = PORTB is a bidirectional I/O port. PORTB can be software programmed for internal weak pull-ups on all inputs.. RB0, Pin Number.SPDIP, SOIC = . RB0, Pin Type. = I/O. RB0, Buffer Type. = TTL. RB0, Description. = Digital I/O.. INT0, Pin Number.SPDIP, SOIC = . INT0, Pin Type. = I. INT0, Buffer Type. = ST. INT0, Description. = External interrupt 0.. FLT0, Pin Number.SPDIP, SOIC = . FLT0, Pin Type. = I. FLT0, Buffer Type. = ST. FLT0, Description.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= PWM Fault input for CCP1.. AN12, Pin Number.SPDIP, SOIC = . AN12, Pin Type. = I. AN12, Buffer Type. = Analog. AN12, Description. = Analog input 12.. RB1/INT1/AN10, Pin Number.SPDIP, SOIC = 22. RB1/INT1/AN10, Pin Type. = . RB1/INT1/AN10, Buffer Type. = . RB1/INT1/AN10, Description. = . RB1, Pin Number.SPDIP, SOIC = . RB1, Pin Type. = I/O. RB1, Buffer Type. = TTL. RB1, Description. = Digital I/O.. INT1, Pin Number.SPDIP, SOIC = . INT1, Pin Type. = I. INT1, Buffer Type. = ST. INT1, Description. = External interrupt 1.. AN10, Pin Number.SPDIP, SOIC = . AN10, Pin Type. = I. AN10, Buffer Type. = Analog.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAN10, Description. = Analog input 10.. RB2/INT2/AN8, Pin Number.SPDIP, SOIC = 23. RB2/INT2/AN8, Pin Type. = . RB2/INT2/AN8, Buffer Type. = . RB2/INT2/AN8, Description. = . RB2, Pin Number.SPDIP, SOIC = . RB2, Pin Type. = I/O. RB2, Buffer Type. = TTL. RB2, Description. = Digital I/O.. INT2, Pin Number.SPDIP, SOIC = . INT2, Pin Type. = I. INT2, Buffer Type. = ST. INT2, Description. = External interrupt 2.. AN8, Pin Number.SPDIP, SOIC = . AN8, Pin Type. = I. AN8, Buffer Type. = Analog. AN8, Description. = Analog input 8.. RB3/AN9/CCP2, Pin Number.SPDIP, SOIC = 24. RB3/AN9/CCP2, Pin",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = . RB3/AN9/CCP2, Buffer Type. = . RB3/AN9/CCP2, Description. = . RB3, Pin Number.SPDIP, SOIC = . RB3, Pin Type. = I/O. RB3, Buffer Type. = TTL. RB3, Description. = Digital I/O.. AN9, Pin Number.SPDIP, SOIC = . AN9, Pin Type. = I. AN9, Buffer Type. = Analog. AN9, Description. = Analog input 9.. CCP2 (1), Pin Number.SPDIP, SOIC = . CCP2 (1), Pin Type. = I/O. CCP2 (1), Buffer Type. = ST. CCP2 (1), Description. = Capture 2 input/Compare 2 output/PWM2 output.. RB4/KBI0/AN11, Pin Number.SPDIP, SOIC = 25. RB4/KBI0/AN11, Pin Type. = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB4/KBI0/AN11, Buffer Type. = . RB4/KBI0/AN11, Description. = . RB4, Pin Number.SPDIP, SOIC = . RB4, Pin Type. = I/O. RB4, Buffer Type. = TTL. RB4, Description. = Digital I/O.. KBI0, Pin Number.SPDIP, SOIC = . KBI0, Pin Type. = I. KBI0, Buffer Type. = TTL. KBI0, Description. = Interrupt-on-change pin.. AN11, Pin Number.SPDIP, SOIC = . AN11, Pin Type. = I. AN11, Buffer Type. = Analog. AN11, Description. = Analog input 11.. RB5/KBI1/PGM, Pin Number.SPDIP, SOIC = 26. RB5/KBI1/PGM, Pin Type. = . RB5/KBI1/PGM, Buffer Type. = . RB5/KBI1/PGM, Description. = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB5, Pin Number.SPDIP, SOIC = . RB5, Pin Type. = I/O. RB5, Buffer Type. = TTL. RB5, Description. = Digital I/O.. KBI1, Pin Number.SPDIP, SOIC = . KBI1, Pin Type. = I. KBI1, Buffer Type. = TTL. KBI1, Description. = Interrupt-on-change pin.. PGM, Pin Number.SPDIP, SOIC = . PGM, Pin Type. = I/O. PGM, Buffer Type. = ST. PGM, Description. = Low-Voltage ICSP\u2122 Programming enable pin.. RB6/KBI2/PGC, Pin Number.SPDIP, SOIC = 27. RB6/KBI2/PGC, Pin Type. = . RB6/KBI2/PGC, Buffer Type. = . RB6/KBI2/PGC, Description. = . RB6, Pin Number.SPDIP, SOIC = . RB6, Pin Type. =",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. RB6, Buffer Type. = TTL. RB6, Description. = Digital I/O.. KBI2, Pin Number.SPDIP, SOIC = . KBI2, Pin Type. = I. KBI2, Buffer Type. = TTL. KBI2, Description. = Interrupt-on-change pin.. PGC, Pin Number.SPDIP, SOIC = . PGC, Pin Type. = I/O. PGC, Buffer Type. = ST. PGC, Description. = In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD, Pin Number.SPDIP, SOIC = 28. RB7/KBI3/PGD, Pin Type. = . RB7/KBI3/PGD, Buffer Type. = . RB7/KBI3/PGD, Description. = . RB7, Pin Number.SPDIP, SOIC = . RB7, Pin Type. = I/O. RB7, Buffer Type. = TTL. RB7, Description. =",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDigital I/O.. KBI3, Pin Number.SPDIP, SOIC = . KBI3, Pin Type. = I. KBI3, Buffer Type. = TTL. KBI3, Description. = Interrupt-on-change pin.. PGD, Pin Number.SPDIP, SOIC = . PGD, Pin Type. = I/O. PGD, Buffer Type. = ST. PGD, Description. = In-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number.SPDIP, SOIC = 11. RC0/T1OSO/T13CKI, Pin.Type = I/O. RC0/T1OSO/T13CKI, Buffer Type. = ST. RC0/T1OSO/T13CKI, Description. = . RC0 T1OSO, Pin Number.SPDIP, SOIC = . RC0 T1OSO, Pin.Type = O. RC0 T1OSO, Buffer Type. = -. RC0 T1OSO, Description. = Digital I/O. Timer1 oscillator output.. T13CKI, Pin Number.SPDIP, SOIC = . T13CKI, Pin.Type = I. T13CKI, Buffer Type. = ST. T13CKI, Description. = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.SPDIP, SOIC = 12. RC1/T1OSI/CCP2, Pin.Type = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC1/T1OSI/CCP2, Buffer Type. = . RC1/T1OSI/CCP2, Description. = . RC1, Pin Number.SPDIP, SOIC = . RC1, Pin.Type = I/O. RC1, Buffer Type. = ST. RC1, Description. = Digital I/O.. T1OSI, Pin Number.SPDIP, SOIC = . T1OSI, Pin.Type = I. T1OSI, Buffer Type. = Analog. T1OSI, Description. = Timer1 oscillator input.. CCP2 (2), Pin Number.SPDIP, SOIC = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer Type. = ST. CCP2 (2), Description. = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1, Pin Number.SPDIP, SOIC = 13. RC2/CCP1, Pin.Type = . RC2/CCP1, Buffer",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = . RC2/CCP1, Description. = . RC2, Pin Number.SPDIP, SOIC = . RC2, Pin.Type = I/O. RC2, Buffer Type. = ST. RC2, Description. = Digital I/O.. CCP1, Pin Number.SPDIP, SOIC = . CCP1, Pin.Type = I/O. CCP1, Buffer Type. = ST. CCP1, Description. = Capture 1 input/Compare 1 output/PWM1 output.. RC3/SCK/SCL, Pin Number.SPDIP, SOIC = 14. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer Type. = . RC3/SCK/SCL, Description. = . RC3, Pin Number.SPDIP, SOIC = . RC3, Pin.Type = I/O. RC3, Buffer Type. = ST. RC3, Description. = Digital I/O.. SCK, Pin Number.SPDIP,",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nSOIC = . SCK, Pin.Type = I/O. SCK, Buffer Type. = ST. SCK, Description. = Synchronous serial clock. SCL, Pin Number.SPDIP, SOIC = . SCL, Pin.Type = I/O. SCL, Buffer Type. = ST. SCL, Description. = input/output for SPI mode. Synchronous serial clock input/output for I 2 C\u2122mode.. RC4/SDI/SDA, Pin Number.SPDIP, SOIC = 15. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer Type. = . RC4/SDI/SDA, Description. = . RC4, Pin Number.SPDIP, SOIC = . RC4, Pin.Type = I/O. RC4, Buffer Type. = ST. RC4, Description. = Digital I/O.. SDI, Pin Number.SPDIP, SOIC = . SDI, Pin.Type = I. SDI, Buffer",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = ST. SDI, Description. = SPI data in.. SDA, Pin Number.SPDIP, SOIC = . SDA, Pin.Type = I/O. SDA, Buffer Type. = ST. SDA, Description. = I 2 C data I/O.. RC5/SDO, Pin Number.SPDIP, SOIC = 16. RC5/SDO, Pin.Type = . RC5/SDO, Buffer Type. = . RC5/SDO, Description. = . RC5, Pin Number.SPDIP, SOIC = . RC5, Pin.Type = I/O. RC5, Buffer Type. = ST. RC5, Description. = Digital I/O.. SDO, Pin Number.SPDIP, SOIC = . SDO, Pin.Type = O. SDO, Buffer Type. = -. SDO, Description. = SPI data out.. RC6/TX/CK, Pin Number.SPDIP, SOIC = 17. RC6/TX/CK, Pin.Type = .",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC6/TX/CK, Buffer Type. = . RC6/TX/CK, Description. = . RC6, Pin Number.SPDIP, SOIC = . RC6, Pin.Type = I/O. RC6, Buffer Type. = ST. RC6, Description. = Digital I/O.. TX, Pin Number.SPDIP, SOIC = . TX, Pin.Type = O. TX, Buffer Type. = -. TX, Description. = EUSART asynchronous transmit.. CK, Pin Number.SPDIP, SOIC = . CK, Pin.Type = I/O. CK, Buffer Type. = ST. CK, Description. = EUSART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.SPDIP, SOIC = 18. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer Type. = . RC7/RX/DT, Description. = . RC7, Pin Number.SPDIP, SOIC =",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RC7, Pin.Type = I/O. RC7, Buffer Type. = ST. RC7, Description. = Digital I/O.. RX, Pin Number.SPDIP, SOIC = . RX, Pin.Type = I. RX, Buffer Type. = ST. RX, Description. = EUSART asynchronous receive.. DT, Pin Number.SPDIP, SOIC = . DT, Pin.Type = I/O. DT, Buffer Type. = ST. DT, Description. = EUSART synchronous data (see related TX/CK).. RE3, Pin Number.SPDIP, SOIC = -. RE3, Pin.Type = -. RE3, Buffer Type. = -. RE3, Description. = See MCLR/VPP/RE3 pin.. VSS, Pin Number.SPDIP, SOIC = 8, 19. VSS, Pin.Type = P. VSS, Buffer Type. = -. VSS, Description. = Ground reference for logic and I/O pins..",
    "TABLE 1-2: PIC18F2525/2620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nVDD, Pin Number.SPDIP, SOIC = 20. VDD, Pin.Type = P. VDD, Buffer Type. = -. VDD, Description. = Positive supply for logic and I/O pins.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3 MCLR, Pin Number.PDIP = 1. MCLR/VPP/RE3 MCLR, Pin Number.QFN = 18. MCLR/VPP/RE3 MCLR, TQFP = 18. MCLR/VPP/RE3 MCLR, Pin.Type = . MCLR/VPP/RE3 MCLR, Buffer.Type = . MCLR/VPP/RE3 MCLR, Description. = Master Clear (input) or programming voltage (input). an active-low. , Pin Number.PDIP = . , Pin Number.QFN = . , TQFP = . , Pin.Type = I. , Buffer.Type = ST. , Description. = Master Clear (Reset) input. This pin is. VPP RE3, Pin Number.PDIP = . VPP RE3, Pin Number.QFN = . VPP RE3, TQFP = . VPP RE3, Pin.Type = P I. VPP RE3, Buffer.Type = ST. VPP RE3, Description. = Programming Digital",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS\ninput.. OSC1/CLKI/RA7, Pin Number.PDIP = 13. OSC1/CLKI/RA7, Pin Number.QFN = 32. OSC1/CLKI/RA7, TQFP = 30. OSC1/CLKI/RA7, Pin.Type = . OSC1/CLKI/RA7, Buffer.Type = . OSC1/CLKI/RA7, Description. = Oscillator crystal or external clock input.. CLKI, Pin Number.PDIP = . CLKI, Pin Number.QFN = . CLKI, TQFP = . CLKI, Pin.Type = I. CLKI, Buffer.Type = CMOS. CLKI, Description. = analog otherwise. External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI,. RA7, Pin Number.PDIP = . RA7, Pin Number.QFN = . RA7, TQFP = . RA7, Pin.Type = I/O. RA7, Buffer.Type =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS\nTTL. RA7, Description. = OSC2/CLKO pins.) General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number.PDIP = 14. OSC2/CLKO/RA6, Pin Number.QFN = 33. OSC2/CLKO/RA6, TQFP = 31. OSC2/CLKO/RA6, Pin.Type = . OSC2/CLKO/RA6, Buffer.Type = . OSC2/CLKO/RA6, Description. = Oscillator crystal or clock output.. CLKO, Pin Number.PDIP = . CLKO, Pin Number.QFN = . CLKO, TQFP = . CLKO, Pin.Type = O. CLKO, Buffer.Type = -. CLKO, Description. = or resonator in Crystal Oscillator mode. In RC mode, OSC2 pin outputs CLKO which has 1/4 the frequency of OSC1 and denotes. RA6, Pin Number.PDIP = . RA6, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS\nNumber.QFN = . RA6, TQFP = . RA6, Pin.Type = I/O. RA6, Buffer.Type = TTL. RA6, Description. = the instruction cycle rate. General purpose I/O pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS C2OUT RA6, Pin Number.PDIP = 2. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS C2OUT RA6, Pin Number.QFN = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS C2OUT RA6, Pin Number.TQFP = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAN4 SS C2OUT RA6, Pin.Type = I/O I. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS C2OUT RA6, Buffer.Type = TTL Analog. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS C2OUT RA6, Description = PORTA is a bidirectional I/O port. Digital I/O. Analog input 0.. , Pin Number.PDIP = 3. , Pin Number.QFN = 20. , Pin Number.TQFP = 20. , Pin.Type = I/O I. , Buffer.Type = TTL Analog. , Description = Digital I/O. Analog input 1.. RA2/AN2/VREF-/CVREF, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = 4. RA2/AN2/VREF-/CVREF, Pin Number.QFN = 21. RA2/AN2/VREF-/CVREF, Pin Number.TQFP = 21. RA2/AN2/VREF-/CVREF, Pin.Type = I/O I I O. RA2/AN2/VREF-/CVREF, Buffer.Type = TTL Analog Analog Analog. RA2/AN2/VREF-/CVREF, Description = Digital I/O. Analog input 2. A/D reference voltage (low) input. Comparator reference voltage output.. RA3/AN3/VREF+, Pin Number.PDIP = 5. RA3/AN3/VREF+, Pin Number.QFN = 22. RA3/AN3/VREF+, Pin Number.TQFP = 22. RA3/AN3/VREF+, Pin.Type = I/O I I. RA3/AN3/VREF+, Buffer.Type =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTTL Analog Analog. RA3/AN3/VREF+, Description = Digital I/O. Analog input 3. A/D reference voltage (high) input.. RA4/T0CKI/C1OUT, Pin Number.PDIP = 6. RA4/T0CKI/C1OUT, Pin Number.QFN = 23. RA4/T0CKI/C1OUT, Pin Number.TQFP = 23. RA4/T0CKI/C1OUT, Pin.Type = I/O I O. RA4/T0CKI/C1OUT, Buffer.Type = ST ST -. RA4/T0CKI/C1OUT, Description = Digital I/O. Timer0 external clock input. Comparator 1 output.. RA5/AN4/SS/HLVDIN/ HLVDIN, Pin Number.PDIP = 7. RA5/AN4/SS/HLVDIN/ HLVDIN, Pin Number.QFN = 24. RA5/AN4/SS/HLVDIN/ HLVDIN, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = 24. RA5/AN4/SS/HLVDIN/ HLVDIN, Pin.Type = I/O I I I O. RA5/AN4/SS/HLVDIN/ HLVDIN, Buffer.Type = TTL Analog TTL Analog -. RA5/AN4/SS/HLVDIN/ HLVDIN, Description = Digital I/O. Analog input 4. SPI slave select input. High/Low-Voltage Detect input. Comparator 2 output. See the OSC2/CLKO/RA6 pin. See the OSC1/CLKI/RA7 pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP = Power",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n, Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = 8. , Pin.Type = . , Buffer.Type = . , Description = PORTB is a bidirectional I/O port. PORTB can be software programmed for internal weak pull-ups on all inputs.. RB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.PDIP = 33. RB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.QFN = 9. RB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.TQFP = . RB0/INT0/FLT0/AN12 RB0 INT0, Pin.Type = I/O I I I I/O I I. RB0/INT0/FLT0/AN12 RB0 INT0, Buffer.Type = TTL ST ST Analog TTL ST Analog. RB0/INT0/FLT0/AN12 RB0 INT0, Description = Digital I/O.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nExternal interrupt 0. PWM Fault input for Enhanced CCP1.. RB2/INT2/AN8 RB2 INT2 AN8 RB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Pin Number.PDIP = 35 36. RB2/INT2/AN8 RB2 INT2 AN8 RB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Pin Number.QFN = 11 12. RB2/INT2/AN8 RB2 INT2 AN8 RB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Pin Number.TQFP = 10. RB2/INT2/AN8 RB2 INT2 AN8 RB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Pin.Type = I/O I I I/O I. RB2/INT2/AN8 RB2 INT2 AN8",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Buffer.Type = TTL ST Analog TTL Analog ST. RB2/INT2/AN8 RB2 INT2 AN8 RB3/AN9/CCP2 RB3 AN9 RB5/KBI1/PGM RB5, Description = Digital I/O. External interrupt 2. Analog input 8. Digital I/O. Analog input 9. Capture 2 input/Compare 2 output/PWM2 output.. CCP2 (1) RB4 KBI0 AN11, Pin Number.PDIP = . CCP2 (1) RB4 KBI0 AN11, Pin Number.QFN = . CCP2 (1) RB4 KBI0 AN11, Pin Number.TQFP = 11. CCP2 (1) RB4 KBI0 AN11, Pin.Type = I/O I/O. CCP2 (1) RB4 KBI0 AN11, Buffer.Type = TTL TTL Analog. CCP2",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n(1) RB4 KBI0 AN11, Description = Digital I/O. Interrupt-on-change pin. Analog input 11.. RB4/KBI0/AN11, Pin Number.PDIP = 37. RB4/KBI0/AN11, Pin Number.QFN = 14. RB4/KBI0/AN11, Pin Number.TQFP = 14. RB4/KBI0/AN11, Pin.Type = I. RB4/KBI0/AN11, Buffer.Type = . RB4/KBI0/AN11, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I I/O. , Buffer.Type = TTL. , Description = . KBI1, Pin Number.PDIP = 38. KBI1, Pin Number.QFN = 15. KBI1, Pin Number.TQFP = 15. KBI1, Pin.Type = I. KBI1, Buffer.Type = TTL.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nKBI1, Description = Digital I/O. Interrupt-on-change pin.. PGM RB6/KBI2/PGC RB6 KBI2, Pin Number.PDIP = 39. PGM RB6/KBI2/PGC RB6 KBI2, Pin Number.QFN = 16. PGM RB6/KBI2/PGC RB6 KBI2, Pin Number.TQFP = 16. PGM RB6/KBI2/PGC RB6 KBI2, Pin.Type = I/O I/O I I/O. PGM RB6/KBI2/PGC RB6 KBI2, Buffer.Type = ST TTL TTL ST. PGM RB6/KBI2/PGC RB6 KBI2, Description = Low-Voltage ICSP\u2122 Programming enable pin. Digital I/O.. PGC, Pin Number.PDIP = . PGC, Pin Number.QFN = 17. PGC, Pin Number.TQFP = 17. PGC, Pin.Type = I/O.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPGC, Buffer.Type = TTL. PGC, Description = Interrupt-on-change pin. In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD RB7, Pin Number.PDIP = 40. RB7/KBI3/PGD RB7, Pin Number.QFN = . RB7/KBI3/PGD RB7, Pin Number.TQFP = . RB7/KBI3/PGD RB7, Pin.Type = . RB7/KBI3/PGD RB7, Buffer.Type = . RB7/KBI3/PGD RB7, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = . , Description = Digital I/O.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = . , Description =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nInterrupt-on-change pin.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I. , Buffer.Type = TTL. , Description = . KBI3, Pin Number.PDIP = . KBI3, Pin Number.QFN = . KBI3, Pin Number.TQFP = . KBI3, Pin.Type = . KBI3, Buffer.Type = ST. KBI3, Description = In-Circuit Debugger and ICSP. PGD, Pin Number.PDIP = . PGD, Pin Number.QFN = . PGD, Pin Number.TQFP = . PGD, Pin.Type = I/O. PGD, Buffer.Type = . PGD, Description = programming\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number.PDIP = 15. RC0/T1OSO/T13CKI, Pin Number.QFN = 34. RC0/T1OSO/T13CKI, Pin Number.TQFP = 32. RC0/T1OSO/T13CKI, Pin.Type = . RC0/T1OSO/T13CKI, Buffer.Type = . RC0/T1OSO/T13CKI, Description = PORTC is a bidirectional I/O port.. RC0, Pin Number.PDIP = . RC0, Pin Number.QFN = . RC0, Pin Number.TQFP = . RC0, Pin.Type = I/O. RC0, Buffer.Type = ST. RC0, Description = Digital I/O.. T1OSO, Pin Number.PDIP = . T1OSO, Pin Number.QFN = . T1OSO, Pin Number.TQFP = . T1OSO, Pin.Type = O. T1OSO, Buffer.Type = -.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nT1OSO, Description = Timer1 oscillator output.. T13CKI, Pin Number.PDIP = . T13CKI, Pin Number.QFN = . T13CKI, Pin Number.TQFP = . T13CKI, Pin.Type = I. T13CKI, Buffer.Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.PDIP = 16. RC1/T1OSI/CCP2, Pin Number.QFN = 35. RC1/T1OSI/CCP2, Pin Number.TQFP = 35. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer.Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.PDIP = . RC1, Pin Number.QFN = . RC1, Pin Number.TQFP = . RC1, Pin.Type = I/O. RC1,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number.PDIP = . T1OSI, Pin Number.QFN = . T1OSI, Pin Number.TQFP = . T1OSI, Pin.Type = I. T1OSI, Buffer.Type = CMOS. T1OSI, Description = Timer1 oscillator input.. CCP2 (2), Pin Number.PDIP = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin Number.TQFP = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer.Type = ST. CCP2 (2), Description = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1/P1A, Pin Number.PDIP = 17. RC2/CCP1/P1A, Pin Number.QFN = 36. RC2/CCP1/P1A, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = 36. RC2/CCP1/P1A, Pin.Type = . RC2/CCP1/P1A, Buffer.Type = . RC2/CCP1/P1A, Description = . RC2, Pin Number.PDIP = . RC2, Pin Number.QFN = . RC2, Pin Number.TQFP = . RC2, Pin.Type = I/O. RC2, Buffer.Type = ST. RC2, Description = Digital I/O.. CCP1, Pin Number.PDIP = . CCP1, Pin Number.QFN = . CCP1, Pin Number.TQFP = . CCP1, Pin.Type = I/O. CCP1, Buffer.Type = ST. CCP1, Description = Capture 1 input/Compare 1 output/PWM1 output.. P1A, Pin Number.PDIP = . P1A, Pin Number.QFN = . P1A, Pin Number.TQFP = . P1A, Pin.Type =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nO. P1A, Buffer.Type = -. P1A, Description = Enhanced CCP1 output.. RC3/SCK/SCL, Pin Number.PDIP = 18. RC3/SCK/SCL, Pin Number.QFN = 37. RC3/SCK/SCL, Pin Number.TQFP = 37. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer.Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.PDIP = . RC3, Pin Number.QFN = . RC3, Pin Number.TQFP = . RC3, Pin.Type = I/O. RC3, Buffer.Type = ST. RC3, Description = Digital I/O.. SCK, Pin Number.PDIP = . SCK, Pin Number.QFN = . SCK, Pin Number.TQFP = . SCK, Pin.Type = I/O. SCK, Buffer.Type = ST. SCK, Description",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= Synchronous serial clock input/output for SPI mode.. SCL, Pin Number.PDIP = . SCL, Pin Number.QFN = . SCL, Pin Number.TQFP = . SCL, Pin.Type = I/O. SCL, Buffer.Type = ST. SCL, Description = Synchronous serial clock input/output for I 2 C\u2122 mode.. RC4/SDI/SDA, Pin Number.PDIP = 23. RC4/SDI/SDA, Pin Number.QFN = 42. RC4/SDI/SDA, Pin Number.TQFP = 42. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer.Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.PDIP = . RC4, Pin Number.QFN = . RC4, Pin Number.TQFP = . RC4, Pin.Type = I/O. RC4, Buffer.Type = ST.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC4, Description = Digital I/O.. SDI, Pin Number.PDIP = . SDI, Pin Number.QFN = . SDI, Pin Number.TQFP = . SDI, Pin.Type = I. SDI, Buffer.Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.PDIP = . SDA, Pin Number.QFN = . SDA, Pin Number.TQFP = . SDA, Pin.Type = I/O. SDA, Buffer.Type = ST. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number.PDIP = 24. RC5/SDO, Pin Number.QFN = 43. RC5/SDO, Pin Number.TQFP = 43. RC5/SDO, Pin.Type = . RC5/SDO, Buffer.Type = . RC5/SDO, Description = . RC5, Pin Number.PDIP = . RC5, Pin Number.QFN = . RC5,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Number.TQFP = . RC5, Pin.Type = I/O. RC5, Buffer.Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.PDIP = . SDO, Pin Number.QFN = . SDO, Pin Number.TQFP = . SDO, Pin.Type = O. SDO, Buffer.Type = -. SDO, Description = SPI data out.. RC6/TX/CK, Pin Number.PDIP = 25. RC6/TX/CK, Pin Number.QFN = 44. RC6/TX/CK, Pin Number.TQFP = 44. RC6/TX/CK, Pin.Type = . RC6/TX/CK, Buffer.Type = . RC6/TX/CK, Description = . RC6, Pin Number.PDIP = . RC6, Pin Number.QFN = . RC6, Pin Number.TQFP = . RC6, Pin.Type = I/O. RC6, Buffer.Type = ST. RC6, Description =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDigital I/O.. TX, Pin Number.PDIP = . TX, Pin Number.QFN = . TX, Pin Number.TQFP = . TX, Pin.Type = O. TX, Buffer.Type = -. TX, Description = EUSART asynchronous transmit.. CK, Pin Number.PDIP = . CK, Pin Number.QFN = . CK, Pin Number.TQFP = . CK, Pin.Type = I/O. CK, Buffer.Type = ST. CK, Description = EUSART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.PDIP = 26. RC7/RX/DT, Pin Number.QFN = 1. RC7/RX/DT, Pin Number.TQFP = 1. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer.Type = . RC7/RX/DT, Description = . RC7, Pin Number.PDIP = . RC7, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . RC7, Pin Number.TQFP = . RC7, Pin.Type = I/O. RC7, Buffer.Type = ST. RC7, Description = Digital I/O.. RX, Pin Number.PDIP = . RX, Pin Number.QFN = . RX, Pin Number.TQFP = . RX, Pin.Type = I. RX, Buffer.Type = ST. RX, Description = EUSART asynchronous receive.. DT, Pin Number.PDIP = . DT, Pin Number.QFN = . DT, Pin Number.TQFP = . DT, Pin.Type = I/O. DT, Buffer.Type = ST. DT, Description = EUSART synchronous data (see related TX/CK).\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/PSP0 RD0, Pin Number.PDIP = 19. RD0/PSP0 RD0, Pin Number.QFN = 38. RD0/PSP0 RD0, Pin Number.TQFP = 38. RD0/PSP0 RD0, Pin.Type = . RD0/PSP0 RD0, Buffer.Type = . RD0/PSP0 RD0, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = ST. , Description = Digital I/O.. PSP0, Pin Number.PDIP = . PSP0, Pin Number.QFN = . PSP0, Pin Number.TQFP = . PSP0, Pin.Type = I/O. PSP0, Buffer.Type = TTL. PSP0, Description = Parallel Slave Port data.. RD1/PSP1, Pin Number.PDIP = 20. RD1/PSP1, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = 39. RD1/PSP1, Pin Number.TQFP = 39. RD1/PSP1, Pin.Type = . RD1/PSP1, Buffer.Type = . RD1/PSP1, Description = . RD1, Pin Number.PDIP = . RD1, Pin Number.QFN = . RD1, Pin Number.TQFP = . RD1, Pin.Type = I/O. RD1, Buffer.Type = ST. RD1, Description = Digital I/O.. PSP1, Pin Number.PDIP = . PSP1, Pin Number.QFN = . PSP1, Pin Number.TQFP = . PSP1, Pin.Type = I/O. PSP1, Buffer.Type = TTL. PSP1, Description = Parallel Slave Port data.. RD2/PSP2, Pin Number.PDIP = 21. RD2/PSP2, Pin Number.QFN = 40. RD2/PSP2, Pin Number.TQFP = 40.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD2/PSP2, Pin.Type = . RD2/PSP2, Buffer.Type = . RD2/PSP2, Description = . RD2, Pin Number.PDIP = . RD2, Pin Number.QFN = . RD2, Pin Number.TQFP = . RD2, Pin.Type = I/O. RD2, Buffer.Type = ST. RD2, Description = Digital I/O.. PSP2, Pin Number.PDIP = . PSP2, Pin Number.QFN = . PSP2, Pin Number.TQFP = . PSP2, Pin.Type = I/O. PSP2, Buffer.Type = TTL. PSP2, Description = Parallel Slave Port data.. RD3/PSP3, Pin Number.PDIP = 22. RD3/PSP3, Pin Number.QFN = 41. RD3/PSP3, Pin Number.TQFP = 41. RD3/PSP3, Pin.Type = . RD3/PSP3, Buffer.Type =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RD3/PSP3, Description = . RD3, Pin Number.PDIP = . RD3, Pin Number.QFN = . RD3, Pin Number.TQFP = . RD3, Pin.Type = I/O. RD3, Buffer.Type = ST. RD3, Description = Digital I/O.. PSP3, Pin Number.PDIP = . PSP3, Pin Number.QFN = . PSP3, Pin Number.TQFP = . PSP3, Pin.Type = I/O. PSP3, Buffer.Type = TTL. PSP3, Description = Parallel Slave Port data.. RD4/PSP4, Pin Number.PDIP = 27. RD4/PSP4, Pin Number.QFN = 2. RD4/PSP4, Pin Number.TQFP = 2. RD4/PSP4, Pin.Type = . RD4/PSP4, Buffer.Type = . RD4/PSP4, Description = . RD4, Pin Number.PDIP = .",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD4, Pin Number.QFN = . RD4, Pin Number.TQFP = . RD4, Pin.Type = I/O. RD4, Buffer.Type = ST. RD4, Description = Digital I/O.. PSP4, Pin Number.PDIP = . PSP4, Pin Number.QFN = . PSP4, Pin Number.TQFP = . PSP4, Pin.Type = I/O. PSP4, Buffer.Type = TTL. PSP4, Description = Parallel Slave Port data.. RD5/PSP5/P1B, Pin Number.PDIP = 28. RD5/PSP5/P1B, Pin Number.QFN = 3. RD5/PSP5/P1B, Pin Number.TQFP = 3. RD5/PSP5/P1B, Pin.Type = . RD5/PSP5/P1B, Buffer.Type = . RD5/PSP5/P1B, Description = . RD5, Pin Number.PDIP =",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RD5, Pin Number.QFN = . RD5, Pin Number.TQFP = . RD5, Pin.Type = I/O. RD5, Buffer.Type = ST. RD5, Description = Digital I/O.. PSP5, Pin Number.PDIP = . PSP5, Pin Number.QFN = . PSP5, Pin Number.TQFP = . PSP5, Pin.Type = I/O. PSP5, Buffer.Type = TTL. PSP5, Description = Parallel Slave Port data.. P1B, Pin Number.PDIP = . P1B, Pin Number.QFN = . P1B, Pin Number.TQFP = . P1B, Pin.Type = O. P1B, Buffer.Type = -. P1B, Description = Enhanced CCP1 output.. RD6/PSP6/P1C, Pin Number.PDIP = 29. RD6/PSP6/P1C, Pin Number.QFN = 4.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD6/PSP6/P1C, Pin Number.TQFP = 4. RD6/PSP6/P1C, Pin.Type = . RD6/PSP6/P1C, Buffer.Type = . RD6/PSP6/P1C, Description = . RD6, Pin Number.PDIP = . RD6, Pin Number.QFN = . RD6, Pin Number.TQFP = . RD6, Pin.Type = I/O. RD6, Buffer.Type = ST. RD6, Description = Digital I/O.. PSP6 P1C, Pin Number.PDIP = . PSP6 P1C, Pin Number.QFN = . PSP6 P1C, Pin Number.TQFP = . PSP6 P1C, Pin.Type = I/O O. PSP6 P1C, Buffer.Type = TTL -. PSP6 P1C, Description = Parallel Slave Port data. Enhanced CCP1 output.. RD7/PSP7/P1D, Pin",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = 30. RD7/PSP7/P1D, Pin Number.QFN = 5. RD7/PSP7/P1D, Pin Number.TQFP = 5. RD7/PSP7/P1D, Pin.Type = . RD7/PSP7/P1D, Buffer.Type = . RD7/PSP7/P1D, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = . , Description = Digital I/O.. RD7, Pin Number.PDIP = . RD7, Pin Number.QFN = . RD7, Pin Number.TQFP = . RD7, Pin.Type = I/O. RD7, Buffer.Type = ST. RD7, Description = . PSP7, Pin Number.PDIP = . PSP7, Pin Number.QFN = . PSP7, Pin Number.TQFP = . PSP7,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = I/O. PSP7, Buffer.Type = TTL. PSP7, Description = Parallel Slave Port data. Enhanced CCP1 output.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7, Pin Number.PDIP = 8. RE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7, Pin Number.QFN = 25. RE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7, Pin Number.TQFP = 25. RE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7, Pin Type.Pin Type = I/O I I I/O I I I/O I. RE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7, Buffer",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType.Buffer Type = ST TTL Analog ST TTL Analog ST TTL Analog. RE0/RD/AN5 RE0 RD AN5 RE1/WR/AN6 RE1 WR AN6 RE2/CS/AN7 RE2 CS AN7,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= PORTE is a bidirectional I/O port. Digital I/O. Read control for Parallel Slave Port (see also WRand CS pins). Analog input 5. Digital I/O. Write control for Parallel Slave Port (see CS and RD pins). Analog input 6.. , Pin Number.PDIP = 9 10. , Pin Number.QFN = 26 27. , Pin Number.TQFP = 26 27. , Pin Type.Pin Type = I. , Buffer Type.Buffer Type = . ,  = Digital I/O. Chip select control for Parallel Slave Port (see related RD and WR). Analog input 7.. RE3, Pin Number.PDIP = -. RE3, Pin Number.QFN = -. RE3, Pin Number.TQFP = -. RE3, Pin Type.Pin Type = -. RE3, Buffer Type.Buffer Type = -. RE3,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= See MCLR/VPP/RE3 pin.. VSS, Pin Number.PDIP = 12, 31. VSS, Pin Number.QFN = 6, 30, 31. VSS, Pin Number.TQFP = 6, 29. VSS, Pin Type.Pin Type = P. VSS, Buffer Type.Buffer Type = -. VSS,  = Ground reference for logic and I/O pins.. VDD, Pin Number.PDIP = 11, 32. VDD, Pin Number.QFN = 7, 8, 28, 29. VDD, Pin Number.TQFP = 7, 28. VDD, Pin Type.Pin Type = P. VDD, Buffer Type.Buffer Type = -. VDD,  = Positive supply for logic and I/O pins.. NC, Pin Number.PDIP = -. NC, Pin Number.QFN = 13. NC, Pin Number.TQFP = 12,13, 33, 34. NC, Pin Type.Pin Type = -. NC, Buffer Type.Buffer Type = -. NC,",
    "TABLE 1-3: PIC18F4525/4620 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= No connect.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when the CCP2MX Configuration bit is set.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared.\n3: For the QFN package, it is recommended that the bottom pad be connected to VSS.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "2.1 Oscillator Types\nPIC18F2525/2620/4525/4620 devices can be operated in ten different oscillator modes. The user can program the Configuration bits, FOSC3:FOSC0, in Configuration Register 1H to select one of these ten modes:\n1. LP\nLow-Power Crystal\n2. XT\nCrystal/Resonator\n3. HS\nHigh-Speed Crystal/Resonator\n4. HSPLL\nHigh-Speed Crystal/Resonator\nwith PLL Enabled\n5. RC\nExternal Resistor/Capacitor with FOSC/4 Output on RA6\n6. RCIO\nExternal Resistor/Capacitor with I/O on RA6\n7. INTIO1\nInternal Oscillator with FOSC/4 Output on RA6 and I/O on RA7\n8. INTIO2\nInternal Oscillator with I/O on RA6 and RA7\n9. EC\nExternal Clock with FOSC/4 Output\n10. ECIO\nExternal Clock with I/O on RA6",
    "2.2 Crystal Oscillator/Ceramic Resonators\nIn XT, LP, HS or HSPLL Oscillator modes, a crystal or ceramic  resonator  is  connected  to  the  OSC1  and OSC2 pins to establish  oscillation.  Figure 2-1  shows the pin connections.\nThe oscillator design requires the use of a parallel cut crystal.\nNote:\nUse of a series cut crystal may give a fre- quency out of the  crystal  manufacturer's specifications.",
    "Typical Capacitor Values Used:\nXT, Freq = 3.58 MHz. XT, OSC1 = 15 pF. XT, OSC2 = 15 pF. , Freq = 4.19 MHz. , OSC1 = 15 pF. , OSC2 = 15 pF. , Freq = 4 MHz. , OSC1 = 30 pF. , OSC2 = 30 pF. , Freq = 4 MHz. , OSC1 = 50 pF. , OSC2 = 50 pF\nCapacitor values are for design guidance only.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following Table 2-2 for additional information.",
    "TABLE 2-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nAn external clock source may also be connected to the OSC1 pin in the HS mode, as shown in Figure 2-2.",
    "TABLE 2-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nLP, Crystal Freq.Crystal Freq = 32 kHz. LP, Typical Capacitor Values Tested:.C1 = 30 pF. LP, Typical Capacitor Values Tested:.C2 = 30 pF. XT, Crystal Freq.Crystal Freq = 1 MHz. XT, Typical Capacitor Values Tested:.C1 = 15 pF. XT, Typical Capacitor Values Tested:.C2 = 15 pF. XT, Crystal Freq.Crystal Freq = 4 MHz. XT, Typical Capacitor Values Tested:.C1 = 15 pF. XT, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 4 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 10 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF.",
    "TABLE 2-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nHS, Crystal Freq.Crystal Freq = 20 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 25 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF",
    "Capacitor values are for design guidance only.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following  this  table  for  additional information.\nNote 1: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n2: When operating below 3V VDD, or when using certain  ceramic  resonators  at  any voltage, it may be necessary to use the HS mode or switch to a crystal oscillator.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Rs may be required to avoid overdriving crystals with low drive level specification.\n5: Always verify oscillator performance over the  VDD  and  temperature  range  that  is expected for the application.",
    "FIGURE 2-2:\nEXTERNAL CLOCK INPUT OPERATION (HS OSCILLATOR CONFIGURATION)",
    "2.3 External Clock Input\nThe EC and ECIO Oscillator modes require an external clock source to be connected to the OSC1 pin. There is no  oscillator  start-up  time  required  after  a  Power-on Reset or after an exit from Sleep mode.\nIn  the  EC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 2-3 shows the pin connections for the EC Oscillator mode.",
    "EXTERNAL CLOCK INPUT OPERATION (EC CONFIGURATION)\nThe ECIO Oscillator mode functions like the EC mode, except  that  the  OSC2  pin  becomes  an  additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6). Figure 2-4 shows the pin connections for the ECIO Oscillator mode.",
    "2.4 RC Oscillator\nFor timing insensitive applications, the 'RC'  and 'RCIO'  device  options  offer  additional  cost  savings. The actual oscillator frequency is a function of several factors:\n\u00b7 supply voltage\n\u00b7 values of the external resistor (REXT) and capacitor (CEXT)\n\u00b7 operating temperature\nGiven the same device, operating voltage and temperature and component values, there will also be unit-to-unit frequency variations. These are due to factors such as:\n\u00b7 normal manufacturing variation\n\u00b7 difference in lead frame capacitance between package types (especially for low CEXT values)\n\u00b7 variations within the tolerance of limits of REXT and CEXT\nIn  the  RC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic.  Figure 2-5  shows  how  the  R/C  combination  is connected.",
    "FIGURE 2-5: RC OSCILLATOR MODE\nThe RCIO Oscillator mode (Figure 2-6) functions like the RC mode, except that the OSC2 pin becomes an additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6).",
    "2.5 PLL Frequency Multiplier\nA Phase Locked Loop (PLL) circuit is provided as an option  for  users  who  wish  to  use  a  lower  frequency oscillator circuit or to clock the device up to its highest rated frequency from a crystal oscillator. This may be useful for customers who are concerned with EMI due to high-frequency crystals or users who require higher clock speeds from an internal oscillator.",
    "2.5.1 HSPLL OSCILLATOR MODE\nThe  HSPLL  mode  makes  use  of  the  HS  Oscillator mode for frequencies up to 10 MHz. A PLL then multiplies the oscillator output frequency by 4 to produce an internal clock frequency up to 40 MHz. The PLLEN bit is not available in this oscillator mode.\nThe PLL is only available to the crystal oscillator when the FOSC3:FOSC0 Configuration bits are programmed for HSPLL mode (= 0110 ).",
    "2.5.2 PLL AND INTOSC\nThe PLL is also available to the internal oscillator block in selected oscillator modes. In this configuration, the PLL  is  enabled  in  software  and  generates  a  clock output of up to 32 MHz. The operation of INTOSC with the PLL is described in Section 2.6.4 'PLL in INTOSC Modes' .",
    "2.6 Internal Oscillator Block\nThe  PIC18F2525/2620/4525/4620  devices  include  an internal  oscillator  block  which  generates  two  different clock signals; either can be used as the microcontroller's clock source. This may eliminate the need for external oscillator circuits on the OSC1 and/or OSC2 pins.\nWhen the OSCTUNE register is modified, the INTOSC frequency will begin shifting to the new frequency. The INTRC  clock  will  reach  the  new  frequency  within 8 clock cycles (approximately 8 * 32 \u03bc s = 256 \u03bc s). The INTOSC clock will stabilize within 1 ms. Code execution continues during this shift. There is no indication that the shift has occurred.\nThe main output (INTOSC) is an 8 MHz clock source, which can be used to directly drive the device clock. It also drives a postscaler, which can provide a range of clock frequencies from 31 kHz to 4 MHz. The INTOSC output is enabled when a clock frequency from 125 kHz to 8 MHz is selected.",
    "2.6 Internal Oscillator Block\nThe  other  clock  source  is  the  Internal  RC  oscillator (INTRC),  which  provides  a  nominal  31 kHz  output. INTRC is enabled if it is selected as the device clock source; it is also enabled automatically when any of the following are enabled:\n\u00b7 Power-up Timer\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Watchdog Timer\n\u00b7 Two-Speed Start-up\nThese  features  are  discussed  in  greater  detail  in Section 23.0 'Special Features of the CPU' .\nThe  clock  source  frequency  (INTOSC  direct,  INTRC direct or INTOSC postscaler) is selected by configuring the IRCF bits of the OSCCON register (page 30).",
    "2.6.1 INTIO MODES\nUsing  the internal oscillator as the clock source eliminates  the  need  for  up  to  two  external  oscillator pins, which can then be used for digital I/O. Two distinct configurations are available:\n\u00b7 In INTIO1 mode, the OSC2 pin outputs FOSC/4, while OSC1 functions as RA7 for digital input and output.\n\u00b7 In INTIO2 mode, OSC1 functions as RA7 and OSC2 functions as RA6, both for digital input and output.",
    "2.6.2 INTOSC OUTPUT FREQUENCY\nThe internal oscillator block is calibrated at the factory to produce an INTOSC output frequency of 8.0 MHz.\nThe  INTRC  oscillator  operates  independently  of  the INTOSC  source.  Any  changes  in  INTOSC  across voltage and temperature are not necessarily reflected by changes in INTRC and vice versa.",
    "2.6.3 OSCTUNE REGISTER\nThe internal oscillator's output has been calibrated at the factory but can be adjusted in the user's application. This is done by writing to the OSCTUNE register (Register 2-1). The tuning sensitivity is constant throughout the tuning range.\nThe OSCTUNE register also implements the INTSRC and PLLEN bits, which control certain features of the internal oscillator block. The INTSRC bit allows users to  select  which  internal  oscillator  provides  the  clock source when the 31 kHz frequency option is selected. This  is  covered  in  greater  detail  in Section 2.7.1 'Oscillator Control Register' .\nThe PLLEN bit controls the operation of the frequency multiplier, PLL, in internal oscillator modes.",
    "2.6.4 PLL IN INTOSC MODES\nThe  4x  frequency  multiplier  can  be  used  with  the internal oscillator block to produce faster device clock speeds  than  are  normally  possible  with  an  internal oscillator.  When  enabled,  the  PLL  produces  a  clock speed of up to 32 MHz.\nUnlike  HSPLL  mode,  the  PLL  is  controlled  through software. The control bit,  PLLEN (OSCTUNE<6>), is used to enable or disable its operation.\nThe PLL is available when the device is configured to use  the  internal  oscillator  block  as  its  primary  clock source (FOSC3:FOSC0 = 1001 or 1000 ). Additionally, the PLL will only function when the selected output frequency is either 4 MHz or 8 MHz (OSCCON<6:4> = 111 or 110 ). If both of these conditions are not met, the PLL is disabled.\nThe PLLEN control bit is only functional in those internal oscillator modes where the PLL is available. In all other  modes,  it  is  forced  to  ' 0 ' and  is  effectively unavailable.",
    "2.6.5 INTOSC FREQUENCY DRIFT\nThe  factory  calibrates  the  internal  oscillator  block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes, which can affect the controller operation in a variety of ways. It is possible to adjust the INTOSC frequency by modifying the value in the OSCTUNE register. This has no effect on the INTRC clock source frequency.\nTuning the INTOSC source requires knowing when to make the adjustment, in which direction it  should  be made,  and  in  some  cases,  how  large  a  change  is needed. Three compensation techniques are discussed  in Section 2.6.5.1  'Compensating  with the EUSART' Section 2.6.5.2 'Compensating with , the  Timers' and Section 2.6.5.3  'Compensating with the CCP Module in Capture Mode' ,  but  other techniques may be used.",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nINTSRC, R/W-0 (1) = PLLEN (1). INTSRC, U-0 = -. INTSRC, R/W-0 = TUN4. INTSRC, R/W-0 = TUN3. INTSRC, R/W-0 = TUN2. INTSRC, R/W-0 = TUN1. INTSRC, R/W-0 = TUN0. bit 7, R/W-0 (1) = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nINTSRC: Internal Oscillator Low-Frequency Source Select bit\n1 = 31.25 kHz device clock derived from 8 MHz INTOSC source (divide-by-256 enabled) 0 = 31 kHz device clock derived directly from INTRC internal oscillator\nbit 6\nPLLEN: Frequency Multiplier PLL for INTOSC Enable bit (1)\n1 = PLL enabled for INTOSC (4 MHz and 8 MHz only)\n0 = PLL disabled\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4-0\nTUN4:TUN0: Frequency Tuning bits\n011111 = Maximum frequency\n\u2022\n\u2022\n\u2022\n\u2022\n000001\n000000 = Center frequency. Oscillator module is running at the calibrated frequency.\n111111\n\u2022\n\u2022\n\u2022\n\u2022\n100000 = Minimum frequency",
    "2.6.5.1 Compensating with the EUSART\nAn  adjustment  may  be  required  when  the  EUSART begins to generate framing errors or receives data with errors  while  in  Asynchronous  mode.  Framing  errors indicate that the device clock frequency is too high; to adjust for  this,  decrement the  value in  OSCTUNE to reduce the clock frequency. On the other hand, errors in data may suggest that the clock speed is too low; to compensate,  increment  OSCTUNE  to  increase  the clock frequency.",
    "2.6.5.2 Compensating with the Timers\nThis technique compares device clock speed to some reference clock. Two timers may be used; one timer is clocked  by  the  peripheral  clock,  while  the  other  is clocked  by  a  fixed  reference  source,  such  as  the Timer1 oscillator.\nBoth timers are cleared, but the timer clocked by the reference  generates  interrupts.  When  an  interrupt occurs,  the  internally  clocked  timer  is  read  and  both timers are cleared. If the internally clocked timer value is  greater  than  expected,  then  the  internal  oscillator block is running too fast. To adjust for this, decrement the OSCTUNE register.",
    "2.6.5.2 Compensating with the Timers\nA  CCP  module  can  use  free-running  Timer1  (or Timer3), clocked by the internal oscillator block and an external  event  with  a  known  period  (i.e.,  AC  power frequency). The time of the first event is captured in the CCPRxH:CCPRxL registers  and  is  recorded  for  use later.  When  the  second  event  causes  a  capture,  the time of the first event is subtracted from the time of the second event. Since the period of the external event is known,  the  time  difference  between  events  can  be calculated.\nIf the measured  time  is much  greater than the calculated time, the internal oscillator block is running too  fast;  to  compensate,  decrement  the  OSCTUNE register.  If  the  measured  time  is  much  less  than  the calculated time, the internal oscillator block is running too  slow;  to  compensate,  increment  the  OSCTUNE register.",
    "2.7 Clock Sources and Oscillator Switching\nLike  previous  PIC18  devices,  the  PIC18F2525/2620/ 4525/4620  family  includes  a  feature  that  allows  the device  clock  source  to  be  switched  from  the  main oscillator  to  an  alternate,  low-frequency  clock  source. PIC18F2525/2620/4525/4620 devices offer two alternate clock sources. When an alternate clock source is enabled, the various power-managed operating modes are available.\nEssentially,  there  are  three  clock  sources  for  these devices:\n\u00b7 Primary oscillators\n\u00b7 Secondary oscillators\n\u00b7 Internal oscillator block\nThe primary oscillators include the External Crystal and  Resonator  modes,  the  External  RC  modes,  the External Clock modes and the internal oscillator block. The particular mode is defined by the FOSC3:FOSC0 Configuration  bits.  The  details  of  these  modes  are covered earlier in this chapter.\nThe secondary oscillators are those external sources not  connected  to  the  OSC1  or  OSC2  pins.  These sources  may  continue  to  operate  even  after the controller is placed in a power-managed mode.",
    "2.7 Clock Sources and Oscillator Switching\nPIC18F2525/2620/4525/4620 devices offer the Timer1 oscillator as a secondary oscillator. This oscillator, in all power-managed  modes,  is  often  the  time  base  for functions such as a Real-Time Clock (RTC).\nMost often, a 32.768 kHz watch crystal is connected between  the  RC0/T1OSO/T13CKI  and  RC1/T1OSI pins.  Like  the  LP  Oscillator  mode  circuit,  loading capacitors are also connected from each pin to ground.\nThe Timer1 oscillator is discussed in greater detail in Section 12.3 'Timer1 Oscillator' .\nIn addition to being a primary clock source, the internal oscillator  block is  available  as  a  power-managed mode clock source. The INTRC source is also used as the clock source for several special features, such as the WDT and Fail-Safe Clock Monitor.",
    "2.7 Clock Sources and Oscillator Switching\nThe clock sources for the PIC18F2525/2620/4525/4620 devices  are  shown  in  Figure 2-8.  See Section 23.0 'Special Features of the CPU' for Configuration register details.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe  OSCCON  register  (Register 2-2)  controls  several aspects of the device clock's operation, both in full-power operation and in power-managed modes.\nThe IDLEN bit determines if the device goes into Sleep mode  or  one  of  the  Idle  modes  when  the SLEEP instruction is executed.\nThe System Clock Select bits, SCS1:SCS0, select the clock  source.  The  available  clock  sources  are  the primary clock (defined by the FOSC3:FOSC0 Configuration bits), the secondary clock (Timer1 oscillator) and the internal oscillator block. The clock source changes immediately after one or more of the bits is written to, following a brief clock transition interval. The SCS bits are cleared on all forms of Reset.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe Internal Oscillator Frequency Select bits (IRCF2:IRCF0)  select  the  frequency  output  of  the internal oscillator block to drive the device clock. The choices  are  the  INTRC  source,  the  INTOSC  source (8 MHz)  or  one  of  the  frequencies  derived  from  the INTOSC  postscaler (31.25 kHz to 4 MHz). If the internal oscillator block is supplying the device clock, changing the states of these bits will have an immediate  change  on  the  internal  oscillator's  output.  On device  Resets,  the  default  output  frequency  of  the internal oscillator block is set at 1 MHz.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nWhen a nominal output frequency of 31 kHz is selected (IRCF2:IRCF0 = 000 ), users may choose which internal oscillator acts as the source. This is done with the INTSRC bit in the OSCTUNE register (OSCTUNE<7>). Setting this bit selects INTOSC as a 31.25 kHz clock source  by  enabling  the  divide-by-256  output  of  the INTOSC postscaler. Clearing INTSRC selects INTRC (nominally 31 kHz) as the clock source.\nThis option allows users to select the tunable and more precise INTOSC as a clock source, while maintaining power savings with a very low clock speed. Regardless of the setting of INTSRC, INTRC always remains the clock source for features such as the Watchdog Timer and the Fail-Safe Clock Monitor.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe OSTS, IOFS and T1RUN bits indicate which clock source  is  currently  providing  the  device  clock.  The OSTS bit indicates  that  the  Oscillator  Start-up  Timer (OST) has timed out and the primary clock is providing the device clock in primary clock modes. The IOFS bit indicates when the internal oscillator block has stabilized  and  is  providing  the  device  clock  in  RC  Clock modes. The T1RUN bit (T1CON<6>) indicates when the  Timer1  oscillator  is  providing  the  device  clock  in secondary  clock  modes.  In  power-managed  modes, only one of these three bits will be set at any time. If none of these bits are set, the INTRC is providing the clock or the internal oscillator block has just started and is not yet stable.\nThe use of the flag and control bits in the OSCCON register  is  discussed  in  more  detail  in Section 3.0 'Power-Managed Modes' .",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nNote 1: The Timer1 oscillator must be enabled to select  the  secondary  clock  source.  The Timer1 oscillator is enabled by setting the T1OSCEN bit in the Timer1 Control register  (T1CON<3>). If the Timer1 oscillator is not enabled, then any attempt to select a secondary clock source will be ignored.\n2: It is recommended that the Timer1 oscillator be operating and stable before selecting the secondary clock source or a very  long  delay  may  occur  while  the Timer1 oscillator starts.",
    "2.7.2 OSCILLATOR TRANSITIONS\nPIC18F2525/2620/4525/4620 devices contain circuitry to  prevent  clock  'glitches'  when  switching  between clock sources. A short pause in the device clock occurs during the clock switch. The length of this pause is the sum of two cycles of the old clock source and three to four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nClock  transitions  are  discussed  in  greater  detail  in Section 3.1.2 'Entering Power-Managed Modes' .",
    "REGISTER 2-2: OSCCON: OSCILLATOR CONTROL REGISTER\nIDLEN, R/W-1 = IRCF2. IDLEN, R/W-0 = IRCF1. IDLEN, R/W-0 = IRCF0. IDLEN, R (1) = OSTS. IDLEN, R-0 = IOFS. IDLEN, R/W-0 = SCS1. IDLEN, R/W-0 = SCS0. bit 7, R/W-1 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R (1) = . bit 7, R-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = bit 0",
    "REGISTER 2-2: OSCCON: OSCILLATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IDLEN: Idle Enable bit\n1 = Device enters Idle mode on SLEEP instruction\n0 = Device enters Sleep mode on SLEEP instruction\nbit 6-4\nIRCF2:IRCF0: Internal Oscillator Frequency Select bits\n111 = 8 MHz (INTOSC drives clock directly)\n110 = 4 MHz\n101 = 2 MHz\n100 = 1 MHz (3)\n011 = 500 kHz\n010 = 250 kHz\n001 = 125 kHz\n000 = 31 kHz (from either INTOSC/256 or INTRC directly) (2)\nbit 3 OSTS:\nOscillator Start-up Timer Time-out Status bit (1)\n1 = Oscillator Start-up Timer (OST) time-out has expired; primary oscillator is running\n0 = Oscillator Start-up Timer (OST) time-out is running; primary oscillator is not ready",
    "bit 2 IOFS: INTOSC Frequency Stable bit\n1 = INTOSC frequency is stable\n0 = INTOSC frequency is not stable",
    "bit 1-0\nSCS1:SCS0: System Clock Select bits\n1x = Internal oscillator block\n01 = Secondary (Timer1) oscillator\n00 = Primary oscillator\nNote 1: Reset state depends on state of the IESO Configuration bit.\n2: Source selected by the INTSRC bit (OSCTUNE<7>), see text.\n3: Default output frequency of INTOSC on Reset.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nWhen  PRI_IDLE  mode  is  selected,  the  designated primary oscillator continues to run without interruption. For  all  other  power-managed  modes,  the  oscillator using the OSC1 pin is disabled. The OSC1 pin (and OSC2 pin, if used by the oscillator) will stop oscillating.\nIn secondary clock modes (SEC_RUN and SEC_IDLE),  the  Timer1  oscillator  is  operating  and providing the device clock. The Timer1 oscillator may also  run  in  all  power-managed  modes  if  required  to clock Timer1 or Timer3.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nIn internal oscillator modes (RC_RUN and RC_IDLE), the internal oscillator block provides the device clock source. The 31 kHz INTRC output can be used directly to  provide  the  clock  and  may  be  enabled  to  support various  special  features,  regardless  of  the  powermanaged mode (see Section 23.2 'Watchdog Timer (WDT)' , Section 23.3  'Two-Speed  Start-up' and Section 23.4  'Fail-Safe  Clock  Monitor' for more information on WDT, Fail-Safe Clock Monitor and TwoSpeed Start-up). The INTOSC output at 8 MHz may be used  directly  to  clock  the  device  or  may  be  divided down by the postscaler. The INTOSC output is disabled if the clock is provided directly from the INTRC output.\nIf  the  Sleep  mode  is  selected,  all  clock  sources  are stopped.  Since  all  the  transistor  switching  currents have been stopped, Sleep mode achieves the lowest current consumption  of  the device (only leakage currents).",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nTime Clock. Other features may be operating that do not  require  a  device  clock  source  (i.e.,  MSSP  slave, PSP, INTx pins and others). Peripherals that may add significant current consumption are listed in Section 26.2 'DC Characteristics'.",
    "2.9 Power-up Delays\nPower-up delays are controlled by two timers, so that no external Reset circuitry is required for most applications. The delays ensure that the device is kept in Reset until the device power supply is stable under normal circumstances and the primary clock is operating and stable. For  additional  information  on  power-up  delays,  see Section 4.5 'Device Reset Timers' .\nThe first timer is the Power-up Timer (PWRT), which provides  a  fixed  delay  on  power-up  (parameter  33, Table 26-10).  It is enabled  by  clearing  (= 0 ) the PWRTEN Configuration bit.\nThe  second  timer  is  the  Oscillator  Start-up  Timer (OST),  intended  to  keep  the  chip  in  Reset  until  the crystal oscillator is stable (LP , XT and HS modes). The OST  does  this  by  counting  1024  oscillator  cycles before allowing the oscillator to clock the device.\nWhen  the  HSPLL  Oscillator  mode  is  selected,  the device is kept in Reset for an additional 2 ms, following the HS mode OST delay, so the PLL can lock to the incoming clock frequency.",
    "2.9 Power-up Delays\nEnabling any on-chip feature that will  operate during Sleep will increase the current consumed during Sleep. The INTRC is required to support WDT operation. The Timer1 oscillator may be operating to support a Real-\nThere  is  a  delay  of  interval,  TCSD  (parameter  38, Table 26-10), following POR,  while the controller becomes ready to execute instructions. This delay runs concurrently  with  any  other  delays.  This  may  be  the only delay that occurs when any of the EC, RC or INTIO modes are used as the primary clock source.",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nRC, INTIO1, OSC1 Pin = Floating, external resistor should pull high. RC, INTIO1, OSC2 Pin = At logic low (clock/4 output). RCIO, OSC1 Pin = Floating, external resistor should pull high. RCIO, OSC2 Pin = Configured as PORTA, bit 6. INTIO2, OSC1 Pin = Configured as PORTA, bit 7. INTIO2, OSC2 Pin = Configured as PORTA, bit 6. ECIO, OSC1 Pin = Floating, pulled by external clock. ECIO, OSC2 Pin = Configured as PORTA, bit 6. EC, OSC1 Pin = Floating, pulled by external clock. EC, OSC2 Pin = At logic low (clock/4 output). LP, XT and HS, OSC1 Pin = Feedback inverter disabled at quiescent voltage level. LP, XT and HS, OSC2 Pin = Feedback inverter disabled at quiescent voltage level",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nNote: See Table 4-2 in Section 4.0 'Reset' for time-outs due to Sleep and MCLR Reset.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "3.1.1 CLOCK SOURCES\nPIC18F2525/2620/4525/4620  devices  offer  a  total  of seven  operating modes  for more  efficient power management.  These  modes  provide  a  variety  of options for selective power conservation in applications where resources may be limited (i.e., battery-powered devices).\nThere are three categories of power-managed modes:\n\u00b7 Run modes\n\u00b7 Idle modes\n\u00b7 Sleep mode\nThese categories define which portions of the device are clocked and sometimes, what speed. The Run and Idle modes may use any of the three available clock sources (primary, secondary or internal oscillator block); the Sleep mode does not use a clock source.\nThe  power-managed  modes  include  several  powersaving features offered on previous PIC \u00ae  devices. One is  the  clock  switching feature, offered in other PIC18 devices, allowing the controller to use the Timer1 oscillator in place of the primary oscillator. Also included is the Sleep mode, offered by all PIC devices, where all device clocks are stopped.",
    "3.1 Selecting Power-Managed Modes\nSelecting a power-managed mode requires two decisions: if  the  CPU  is  to  be  clocked  or  not  and  the selection of a clock source. The IDLEN bit (OSCCON<7>) controls CPU clocking, while the SCS1:SCS0  bits  (OSCCON<1:0>)  select  the  clock source. The individual modes, bit settings, clock sources and affected modules are summarized in Table 3-1.\nThe SCS1:SCS0 bits allow the selection of one of three clock sources for power-managed modes. They are:\n\u00b7 the primary clock, as defined by the FOSC3:FOSC0 Configuration bits\n\u00b7 the secondary clock (the Timer1 oscillator)\n\u00b7 the internal oscillator block (for RC modes)",
    "3.1.2 ENTERING POWER-MANAGED MODES\nSwitching from one power-managed mode to another begins by loading the OSCCON register. The SCS1:SCS0 bits select the clock source and determine which Run or Idle mode is to be used. Changing these bits  causes  an  immediate  switch  to  the  new  clock source,  assuming  that  it  is  running.  The  switch  may also  be  subject  to  clock  transition  delays.  These  are discussed  in Section 3.1.3  'Clock  Transitions  and Status Indicators' and subsequent sections.\nEntry  to  the  power-managed  Idle  or  Sleep  modes  is triggered by the execution of a SLEEP instruction. The actual mode that results depends on the status of the IDLEN bit.\nDepending on the  current  mode  and the  mode being switched to, a change to a power-managed mode does not  always  require  setting  all  of  these  bits. Many transitions may be done by changing the oscillator select bits, or changing the IDLEN bit, prior to issuing a SLEEP instruction. If the IDLEN  bit  is already  configured correctly, it may only be necessary to perform a SLEEP instruction to switch to the desired mode.",
    "TABLE 3-1: POWER-MANAGED MODES\nSleep, OSCCON Bits<7,1:0>.IDLEN (1) = 0. Sleep, OSCCON Bits<7,1:0>.SCS1:SCS0 = N/A. Sleep, Module Clocking.CPU = Off. Sleep, Module Clocking.Peripherals = Off. Sleep, Available Clock and Oscillator Source.Available Clock and Oscillator Source = None - All clocks are disabled. PRI_RUN, OSCCON Bits<7,1:0>.IDLEN (1) = N/A. PRI_RUN, OSCCON Bits<7,1:0>.SCS1:SCS0 = 00. PRI_RUN, Module Clocking.CPU = Clocked. PRI_RUN, Module Clocking.Peripherals = Clocked. PRI_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC and Internal Oscillator Block (2) . This is the normal full-power execution mode.. SEC_RUN, OSCCON",
    "TABLE 3-1: POWER-MANAGED MODES\nBits<7,1:0>.IDLEN (1) = N/A. SEC_RUN, OSCCON Bits<7,1:0>.SCS1:SCS0 = 01. SEC_RUN, Module Clocking.CPU = Clocked. SEC_RUN, Module Clocking.Peripherals = Clocked. SEC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_RUN, OSCCON Bits<7,1:0>.IDLEN (1) = N/A. RC_RUN, OSCCON Bits<7,1:0>.SCS1:SCS0 = 1x. RC_RUN, Module Clocking.CPU = Clocked. RC_RUN, Module Clocking.Peripherals = Clocked. RC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2). PRI_IDLE, OSCCON Bits<7,1:0>.IDLEN (1) = 1. PRI_IDLE, OSCCON",
    "TABLE 3-1: POWER-MANAGED MODES\nBits<7,1:0>.SCS1:SCS0 = 00. PRI_IDLE, Module Clocking.CPU = Off. PRI_IDLE, Module Clocking.Peripherals = Clocked. PRI_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC. SEC_IDLE, OSCCON Bits<7,1:0>.IDLEN (1) = 1. SEC_IDLE, OSCCON Bits<7,1:0>.SCS1:SCS0 = 01. SEC_IDLE, Module Clocking.CPU = Off. SEC_IDLE, Module Clocking.Peripherals = Clocked. SEC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_IDLE, OSCCON Bits<7,1:0>.IDLEN (1) = 1. RC_IDLE, OSCCON Bits<7,1:0>.SCS1:SCS0 = 1x. RC_IDLE, Module",
    "TABLE 3-1: POWER-MANAGED MODES\nClocking.CPU = Off. RC_IDLE, Module Clocking.Peripherals = Clocked. RC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2)\nNote 1: IDLEN reflects its value when the SLEEP instruction is executed.\n2: Includes INTOSC and INTOSC postscaler, as well as the INTRC source.",
    "3.2 Run Modes\nThe length of the transition between clock sources is the sum of two cycles of the old clock source and three to  four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nThree  bits  indicate  the  current  clock  source  and  its status. They are:\n\u00b7 OSTS (OSCCON<3>)\n\u00b7 IOFS (OSCCON<2>)\n\u00b7 T1RUN (T1CON<6>)\nIn general, only one of these bits will be set while in a given  power-managed  mode.  When  the  OSTS  bit  is set,  the  primary  clock  is  providing  the  device  clock. When  the  IOFS  bit  is  set,  the  INTOSC  output  is providing a stable, 8 MHz clock source to a divider that actually drives the device clock. When the T1RUN bit is set, the Timer1 oscillator is providing the clock. If none of  these  bits  are  set,  then  either  the  INTRC  clock source is clocking the device, or the INTOSC source is not yet stable.",
    "3.2 Run Modes\nIf the internal oscillator block is configured as the primary clock source by the FOSC3:FOSC0 Configuration bits, then both the OSTS and IOFS bits may be set when in PRI_RUN or PRI_IDLE modes. This indicates that the primary clock (INTOSC output) is generating a stable, 8 MHz  output.  Entering  another  power-managed  RC mode at the same frequency would clear the OSTS bit.\nNote 1: Caution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\n2: Executing a SLEEP instruction  does  not necessarily  place  the  device  into  Sleep mode. It acts as the trigger to place the controller  into  either  the  Sleep  mode  or one of the Idle modes, depending on the setting of the IDLEN bit.",
    "3.1.4 MULTIPLE SLEEP COMMANDS\nThe  power-managed  mode  that  is  invoked  with  the SLEEP instruction is determined by the setting of the IDLEN  bit  at  the  time  the  instruction  is  executed.  If another SLEEP instruction is executed, the device will enter the power-managed mode specified by IDLEN at that time. If IDLEN has changed, the device will enter the new power-managed mode specified by the new setting.\nIn the  Run  modes,  clocks  to  both  the  core  and peripherals are active. The difference between these modes is the clock source.",
    "3.2.1 PRI_RUN MODE\nThe PRI_RUN mode is the normal, full-power execution mode of the microcontroller. This is also the default mode upon a device Reset unless Two-Speed Start-up is enabled (see Section 23.3 'Two-Speed Start-up' for details). In this mode, the OSTS bit is set. The IOFS bit  may  be  set  if  the  internal  oscillator  block  is  the primary  clock  source  (see Section 2.7.1  'Oscillator Control Register' ).",
    "3.2.2 SEC_RUN MODE\nThe SEC_RUN mode is the compatible mode to the 'clock switching' feature offered in other PIC18 devices.  In  this  mode,  the  CPU  and  peripherals  are clocked from the Timer1 oscillator. This gives users the option of lower power consumption while still using a high-accuracy clock source.\nSEC_RUN mode is entered by setting the SCS1:SCS0 bits to ' 01 '. The device clock source is switched to the Timer1 oscillator (see Figure 3-1), the primary oscillator is shut down, the T1RUN bit (T1CON<6>) is set and the OSTS bit is cleared.",
    "Note:\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_RUN mode. If  the  T1OSCEN  bit  is  not  set  when  the SCS1:SCS0 bits are set to ' 01 ',  entry  to SEC_RUN  mode  will  not  occur.  If  the Timer1  oscillator  is  enabled,  but  not  yet running, device clocks will be delayed until the  oscillator  has  started.  In  such  situations, initial oscillator operation is far from stable  and  unpredictable  operation  may result.\nOn transitions from SEC_RUN mode to PRI_RUN, the peripherals and CPU continue to be clocked from the Timer1  oscillator  while  the  primary  clock  is  started. When the primary clock becomes ready, a clock switch back  to  the  primary  clock  occurs  (see  Figure 3-2). When the clock switch is complete, the T1RUN bit is cleared, the OSTS bit is set and the primary clock is providing the clock. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "3.2.3 RC_RUN MODE\nIn RC_RUN  mode,  the  CPU  and  peripherals  are clocked  from  the  internal  oscillator  block  using  the INTOSC multiplexer. In this mode, the primary clock is shut down. When using the INTRC source, this mode provides  the  best  power  conservation  of  all  the  Run modes, while still executing code. It works well for user applications which are not highly timing sensitive or do not require high-speed clocks at all times.\nIf the primary clock source is the internal oscillator block (either INTRC or INTOSC), there are no distinguishable differences  between  PRI_RUN  and  RC_RUN  modes during  execution.  However,  a  clock  switch  delay  will occur  during  entry  to  and  exit  from  RC_RUN  mode. Therefore,  if  the  primary  clock  source  is  the  internal oscillator  block,  the  use  of  RC_RUN  mode  is  not recommended.",
    "3.2.3 RC_RUN MODE\nThis  mode is  entered  by  setting  the  SCS1  bit  to  ' 1 '. Although it is ignored, it is recommended that the SCS0 bit also be cleared; this is to maintain software compatibility  with  future  devices.  When  the  clock  source  is switched to the INTOSC multiplexer (see Figure 3-3), the primary oscillator is shut down and the OSTS bit is cleared. The IRCF bits may be modified at any time to immediately change the clock speed.",
    "Note:\nCaution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.",
    "PIC18F2525/2620/4525/4620\nIf  the IRCF bits and the INTSRC bit are all clear, the INTOSC output is not  enabled  and  the  IOFS  bit  will remain clear; there will be no indication of the current clock  source.  The  INTRC  source  is  providing  the device clocks.\nIf the  IRCF  bits  are  changed  from  all  clear  (thus, enabling the INTOSC output), or if INTSRC is set, the IOFS  bit becomes  set  after the INTOSC  output becomes stable. Clocks to the device continue while the  INTOSC  source  stabilizes  after  an  interval  of TIOBST.\nOn transitions from RC_RUN mode to PRI_RUN mode, the device continues to be clocked from the INTOSC multiplexer while the primary clock is started. When the primary  clock  becomes  ready,  a  clock  switch  to  the primary clock occurs (see Figure 3-4). When the clock switch is complete, the IOFS bit is cleared, the OSTS bit is set and the primary clock is providing the device clock. The IDLEN and SCS bits are not affected by the switch. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "PIC18F2525/2620/4525/4620\nIf the IRCF bits were previously at a non-zero value, or if INTSRC  was  set  before  setting  SCS1  and  the INTOSC source was already stable, the IOFS bit will remain set.",
    "3.3 Sleep Mode\nThe power-managed Sleep mode in the PIC18F2525/ 2620/4525/4620  devices  is  identical  to  the  legacy Sleep  mode  offered  in  all  other  PIC  devices.  It  is entered by clearing the IDLEN bit (the default state on device  Reset)  and  executing  the SLEEP instruction. This shuts down the selected oscillator (Figure 3-5). All clock source status bits are cleared.\nEntering the Sleep mode from any other mode does not require a clock switch. This is because no clocks are needed once the controller has entered Sleep. If the WDT is selected,  the  INTRC  source  will  continue  to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.3 Sleep Mode\nWhen a wake event occurs in Sleep mode (by interrupt, Reset or WDT time-out), the device will not be clocked until the clock source selected by the SCS1:SCS0 bits becomes ready (see Figure 3-6), or it will be clocked from the internal oscillator block if either the Two-Speed Start-up  or  the  Fail-Safe  Clock  Monitor  are  enabled (see Section 23.0 'Special Features of the CPU' ). In either case, the OSTS bit is set when the primary clock is providing the device clocks. The IDLEN and SCS bits are not affected by the wake-up.",
    "3.4 Idle Modes\nThe  Idle  modes  allow  the  controller's  CPU  to  be selectively shut down while the peripherals continue to operate. Selecting a particular Idle mode allows users to further manage power consumption.\nIf the IDLEN bit is set to a ' 1 ' when a SLEEP instruction is executed, the peripherals will be clocked from the clock source selected using the SCS1:SCS0 bits; however, the CPU will not be clocked. The clock source status bits are not  affected.  Setting  IDLEN  and  executing  a SLEEP instruction provides a quick method of switching from a given Run mode to its corresponding Idle mode.\nIf the WDT is selected, the INTRC source will continue to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.4 Idle Modes\nSince the CPU is not executing instructions, the only exits from any of the Idle modes are by interrupt, WDT time-out or a Reset. When a wake event occurs, CPU execution is delayed by an interval of TCSD (parameter 38, Table 26-10) while it becomes ready to execute code. When the CPU begins executing code, it resumes with the same clock source for the current Idle mode. For example, when waking from RC_IDLE mode, the internal oscillator block will clock the CPU and peripherals (in other words, RC_RUN mode). The IDLEN and SCS bits are not affected by the wake-up.\nWhile in any Idle mode or Sleep mode, a WDT timeout  will  result  in  a  WDT  wake-up  to  the  Run  mode currently specified by the SCS1:SCS0 bits.",
    "FIGURE 3-5: TRANSITION TIMING FOR ENTRY TO SLEEP MODE\nQ4 Q3 Q2 Q1 Q1, 1 = . OSC1, 1 = . CPU Clock, 1 = . Peripheral, 1 = . Clock, 1 = . Sleep, 1 = . Program Counter PC, 1 = . , 1 = 2\nFIGURE 3-6:",
    "3.4.1 PRI_IDLE MODE\nThis mode is unique among the three low-power Idle modes, in that it does not disable the primary device clock. For timing sensitive applications, this allows for the fastest resumption of device operation with its more accurate primary clock source, since the clock source does not have to 'warm-up' or transition from another oscillator.\nsetting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set the IDLEN bit first, then set the SCS1:SCS0 bits to ' 01 ' and execute SLEEP . When the clock source is switched to the Timer1 oscillator, the primary oscillator is shut down, the OSTS bit is cleared and the T1RUN bit is set.",
    "3.4.1 PRI_IDLE MODE\nPRI_IDLE mode is entered from PRI_RUN mode by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first, then  clear  the  SCS  bits  and  execute SLEEP . Although the CPU is disabled, the peripherals continue to be clocked from the primary clock source specified by the FOSC3:FOSC0 Configuration bits. The OSTS bit remains set (see Figure 3-7).\nWhen a wake event occurs, the CPU is clocked from the primary  clock  source.  A  delay  of  interval  TCSD  is required  between  the  wake  event  and  when  code execution starts. This is required to allow the CPU to become ready to execute instructions. After the wakeup, the OSTS bit remains set. The IDLEN and SCS bits are not affected by the wake-up (see Figure 3-8).",
    "3.4.2 SEC_IDLE MODE\nIn  SEC_IDLE  mode,  the  CPU  is  disabled  but  the peripherals  continue  to  be  clocked  from  the  Timer1 oscillator.  This  mode  is  entered  from  SEC_RUN  by",
    "FIGURE 3-8: TRANSITION TIMING FOR WAKE FROM IDLE TO RUN MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the Timer1 oscillator. After an interval of TCSD following the wake event, the CPU begins executing code being clocked by the Timer1 oscillator. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run (see Figure 3-8).",
    "Note:\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_IDLE mode. If  the  T1OSCEN  bit  is  not  set  when  the SLEEP instruction is executed, the SLEEP instruction  will  be  ignored  and  entry  to SEC_IDLE  mode  will  not  occur.  If  the Timer1  oscillator  is  enabled  but  not  yet running, peripheral clocks will be delayed until  the  oscillator  has  started.  In  such situations, initial oscillator operation is far from  stable  and  unpredictable  operation may result.",
    "3.4.3 RC_IDLE MODE\nIn RC_IDLE mode, the CPU is disabled but the peripherals continue to be clocked from the internal oscillator block using the INTOSC multiplexer. This mode allows for controllable power conservation during Idle periods.\nFrom  RC_RUN,  this  mode  is  entered  by  setting  the IDLEN  bit  and  executing  a SLEEP instruction.  If  the device is in another Run mode, first set IDLEN, then set the SCS1 bit and execute SLEEP . Although its value is ignored, it is recommended that SCS0 also be cleared; this  is  to  maintain  software  compatibility  with  future devices.  The  INTOSC  multiplexer  may  be  used  to select a higher clock frequency by modifying the IRCF bits before executing the SLEEP instruction. When the clock source is switched to the INTOSC multiplexer, the primary  oscillator  is  shut  down  and  the  OSTS  bit  is cleared.",
    "3.4.3 RC_IDLE MODE\nIf  the IRCF bits are set to any non-zero value, or the INTSRC bit is set, the INTOSC output is enabled. The IOFS  bit becomes  set,  after  the INTOSC  output becomes stable, after an interval of TIOBST (parameter 39, Table 26-10). Clocks to the peripherals continue  while  the  INTOSC  source  stabilizes.  If  the IRCF  bits  were  previously  at  a  non-zero  value,  or INTSRC  was  set  before  the SLEEP instruction  was executed and the INTOSC source was already stable, the  IOFS  bit  will  remain  set.  If  the  IRCF  bits  and INTSRC are all clear, the INTOSC output will not be enabled, the IOFS bit will remain clear and there will be no indication of the current clock source.",
    "3.4.3 RC_IDLE MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the INTOSC multiplexer. After a delay of TCSD following the wake event, the CPU begins executing code being clocked by the INTOSC multiplexer. The IDLEN and SCS bits are not affected by the wake-up. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "3.5 Exiting Idle and Sleep Modes\nAn exit from Sleep mode or any of the Idle modes is triggered by an interrupt, a Reset or a WDT time-out. This  section  discusses  the  triggers  that  cause  exits from power-managed modes. The clocking subsystem actions are discussed in each of the power-managed modes (see Section 3.2 'Run Modes', Section 3.3 'Sleep Mode' and Section 3.4 'Idle Modes' ).",
    "3.5.1 EXIT BY INTERRUPT\nAny of the available interrupt sources can cause the device to exit from an Idle mode or Sleep mode to a Run  mode.  To  enable  this  functionality,  an  interrupt source must be enabled by setting its enable bit in one of the INTCON or PIE registers. The exit sequence is initiated when the corresponding interrupt flag bit is set.\nOn all exits from Idle or Sleep modes by interrupt, code execution  branches  to  the  interrupt  vector  if  the  GIE/ GIEH bit (INTCON<7>) is set. Otherwise, code execution continues or resumes without branching (see Section 10.0 'Interrupts' ).\nA fixed delay of interval TCSD following the wake event is required when leaving Sleep and Idle modes. This delay is required for the CPU to prepare for execution. Instruction execution resumes on the first clock cycle following this delay.",
    "3.5.2 EXIT BY WDT TIME-OUT\nA WDT time-out will cause different actions depending on which power-managed mode the device is in when the time-out occurs.\nIf the device is not executing code (all Idle modes and Sleep mode), the time-out will result in an exit from the power-managed mode (see Section 3.2 'Run Modes' and Section 3.3 'Sleep Mode' ). If the device is  executing  code  (all  Run  modes),  the  time-out  will result in a WDT Reset (see Section 23.2 'Watchdog Timer (WDT)' ).\nThe WDT  timer and postscaler are cleared by executing a SLEEP or CLRWDT instruction, the loss of a currently selected clock source (if the Fail-Safe Clock Monitor is enabled) and modifying the IRCF bits in the OSCCON register if the internal oscillator block is the device clock source.",
    "3.5.3 EXIT BY RESET\nNormally, the device is held in Reset by the Oscillator Start-up Timer (OST) until the primary clock becomes ready. At that time, the OSTS bit is set and the device begins executing code. If the internal oscillator block is the new clock source, the IOFS bit is set instead.\nThe  exit  delay  time  from  Reset  to  the  start  of  code execution depends on both the clock sources before and after the wake-up and the type of oscillator if the new clock source is the primary clock. Exit delays are summarized in Table 3-2.",
    "3.5.3 EXIT BY RESET\nCode  execution  can  begin  before  the  primary  clock becomes ready. If either the Two-Speed Start-up (see Section 23.3  'Two-Speed  Start-up' ) or Fail-Safe Clock  Monitor  (see Section 23.4  'Fail-Safe  Clock Monitor' ) is enabled, the device may begin execution as soon as the Reset source has cleared. Execution is clocked  by  the  INTOSC  multiplexer  driven  by  the internal  oscillator  block.  Execution  is  clocked  by  the internal  oscillator  block  until  either  the  primary  clock becomes ready or a power-managed mode is entered before the primary clock becomes ready; the primary clock is then shut down.",
    "3.5.4 EXIT WITHOUT AN OSCILLATOR START-UP DELAY\nCertain  exits  from  power-managed  modes  do  not invoke the OST at all. There are two cases:\n\u00b7 PRI_IDLE mode, where the primary clock source is not stopped; and\n\u00b7 the primary clock source is not any of the LP, XT, HS or HSPLL modes.\nIn  these  instances,  the  primary  clock  source  either does not require an oscillator start-up delay since it is already  running  (PRI_IDLE),  or  normally  does  not require an oscillator start-up delay (RC, EC and INTIO Oscillator  modes).  However,  a fixed delay  of  interval TCSD following  the  wake  event  is  still  required  when leaving  Sleep  and  Idle  modes  to  allow  the  CPU  to prepare for  execution.  Instruction  execution  resumes on the first clock cycle following this delay.",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nPrimary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = LP, XT, HS. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = . Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = HSPLL. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = OSTS. Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = EC, RC. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = . Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = INTOSC (2). Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (1). Primary",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nDevice Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = IOFS. T1OSC, Clock Source After Wake-up = LP, XT, HS. T1OSC, Exit Delay = TOST (3). T1OSC, Clock Ready Status Bit (OSCCON) = OSTS. T1OSC, Clock Source After Wake-up = HSPLL. T1OSC, Exit Delay = TOST + t rc (3). T1OSC, Clock Ready Status Bit (OSCCON) = OSTS. T1OSC, Clock Source After Wake-up = EC, RC. T1OSC, Exit Delay = TCSD (1). T1OSC, Clock Ready Status Bit (OSCCON) = OSTS. T1OSC, Clock Source After Wake-up = INTOSC (2). T1OSC, Exit Delay = TIOBST (4). T1OSC, Clock Ready Status Bit (OSCCON) = IOFS. INTOSC (3), Clock Source",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nAfter Wake-up = LP, XT, HS. INTOSC (3), Exit Delay = TOST (3). INTOSC (3), Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (3), Clock Source After Wake-up = HSPLL. INTOSC (3), Exit Delay = TOST + t rc (3). INTOSC (3), Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (3), Clock Source After Wake-up = EC, RC. INTOSC (3), Exit Delay = TCSD (1). INTOSC (3), Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (3), Clock Source After Wake-up = INTOSC (2). INTOSC (3), Exit Delay = None. INTOSC (3), Clock Ready Status Bit (OSCCON) = IOFS. None (Sleep mode), Clock Source After Wake-up = LP, XT, HS. None (Sleep mode), Exit Delay = TOST",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\n(3). None (Sleep mode), Clock Ready Status Bit (OSCCON) = OSTS. None (Sleep mode), Clock Source After Wake-up = HSPLL. None (Sleep mode), Exit Delay = TOST + t rc (3). None (Sleep mode), Clock Ready Status Bit (OSCCON) = OSTS. None (Sleep mode), Clock Source After Wake-up = EC, RC. None (Sleep mode), Exit Delay = TCSD (1). None (Sleep mode), Clock Ready Status Bit (OSCCON) = OSTS. None (Sleep mode), Clock Source After Wake-up = INTOSC (2). None (Sleep mode), Exit Delay = TIOBST (4). None (Sleep mode), Clock Ready Status Bit (OSCCON) = IOFS",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nNote 1: TCSD (parameter 38) is a required delay when waking from Sleep and all Idle modes and runs concurrently with any other required delays (see Section 3.4 'Idle Modes' ). On Reset, INTOSC defaults to 1 MHz.\n2: Includes both the INTOSC 8 MHz source and postscaler derived frequencies.\n3: TOST is the Oscillator Start-up Timer (parameter 32). t rc  is the PLL Lock-out Timer (parameter F12); it is also designated as TPLL.\n4: Execution continues during TIOBST (parameter 39), the INTOSC stabilization period.",
    "4.0 RESET\nThe PIC18F2525/2620/4525/4620 devices differentiate between various kinds of Reset:\na) Power-on Reset (POR)\nb) MCLR Reset during normal operation\nc) MCLR Reset during power-managed modes\nd) Watchdog Timer (WDT) Reset (during execution)\ne) Programmable Brown-out Reset (BOR)\nf) RESET Instruction\ng) Stack Full Reset\nh) Stack Underflow Reset\nA simplified block diagram of the On-Chip Reset Circuit is shown in Figure 4-1.",
    "4.1 RCON Register\nDevice Reset events are tracked through the RCON register (Register 4-1). The lower five bits of the register indicate that a specific Reset event has occurred. In most cases, these bits can only be cleared by the event and must be set by the application after the event. The state of these flag bits, taken together, can be read to indicate  the  type  of  Reset  that  just  occurred.  This  is described in more detail in Section 4.6 'Reset State of Registers' .\nThis  section  discusses  Resets  generated  by  MCLR, POR and BOR and covers the operation of the various start-up  timers.  Stack  Reset  events  are  covered  in Section 5.1.2.4 'Stack Full and Underflow Resets' . WDT Resets are covered in Section 23.2 'Watchdog Timer (WDT)' .\nThe  RCON  register  also  has  control  bits  for  setting interrupt  priority  (IPEN)  and  software  control  of  the BOR  (SBOREN).  Interrupt  priority  is  discussed  in Section 10.0 'Interrupts' . BOR is covered in Section 4.4 'Brown-out Reset (BOR)' .",
    "FIGURE 4-1: SIMPLIFIED BLOCK DIAGRAM OF ON-CHIP RESET CIRCUIT\nNote 1: This is the INTRC source from the internal oscillator block and is separate from the RC oscillator of the CLKI pin.\n- 2: See Table 4-2 for time-out situations.",
    "REGISTER 4-1: RCON: RESET CONTROL REGISTER\nIPEN, R/W-1 (1) = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 (2) = POR. IPEN, R/W-0 = BOR. bit 7, R/W-1 (1) = . bit 7, U-0 = . bit 7, R/W-1 = . bit 7, R-1 = . bit 7, R-1 = . bit 7, R/W-0 (2) = . bit 7, R/W-0 = bit 0",
    "REGISTER 4-1: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)",
    "bit 6 SBOREN: BOR Software Enable bit (1)\nIf BOREN1:BOREN0 = 01 :\n- 1 = BOR is enabled\n0 = BOR is disabled\nIf BOREN1:BOREN0 = 00 10 , or 11 :\nBit is disabled and read as ' 0 '.",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a Brown-out Reset occurs)",
    "bit 3 TO:\nWatchdog Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred",
    "bit 2 PD:\nPower-Down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Set by execution of the SLEEP instruction",
    "bit 1 POR: Power-on Reset Status bit\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)",
    "bit 0 BOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)\nNote 1: If SBOREN is enabled, its Reset state is ' 1 '; otherwise, it is ' 0 '.\n2: The actual Reset value of POR is determined by the type of device Reset. See the notes following this register and Section 4.6 'Reset State of Registers' for additional information.\nNote 1: It is recommended that the POR bit be set after a Power-on Reset has been detected so that subsequent Power-on Resets may be detected.\n2: Brown-out Reset is said to have occurred when BOR is ' 0 ' and POR is ' 1 ' (assuming that POR was set to ' 1 ' by software immediately after Power-on Reset).",
    "4.2 Master Clear (MCLR)\nThe  MCLR  pin  provides  a  method  for  triggering  an external Reset of the device. A Reset is generated by holding the pin low. These devices have a noise filter in the MCLR Reset path which detects and ignores small pulses.\nThe MCLR pin is not driven low by any internal Resets, including the WDT.\nIn  PIC18F2525/2620/4525/4620  devices,  the  MCLR input can be disabled with the MCLRE Configuration bit. When MCLR is disabled, the pin becomes a digital input.  See Section 9.5  'PORTE,  TRISE  and  LATE Registers' for more information.",
    "4.3 Power-on Reset (POR)\nA Power-on Reset pulse is generated on-chip whenever  VDD  rises  above  a  certain  threshold.  This allows the device to start in the initialized state when VDD is adequate for operation.\nTo take advantage of the POR circuitry, tie the MCLR pin through a resistor (1 k \u03a9 to 10 k \u03a9 ) to VDD. This will eliminate external RC components usually needed to create a Power-on Reset delay. A minimum rise rate for VDD  is  specified  (parameter  D004).  For  a  slow  rise time, see Figure 4-2.\nWhen the device starts normal operation (i.e., exits the Reset condition), device operating parameters (voltage, frequency, temperature, etc.) must be met to ensure operation. If these conditions are not met, the device  must  be  held  in  Reset  until  the  operating conditions are met.",
    "4.3 Power-on Reset (POR)\nPOR events are captured by the POR bit (RCON<1>). The state of the bit is set to ' 0 ' whenever a POR occurs; it does not change for any other Reset event. POR is not  reset  to  ' 1 '  by  any  hardware  event.  To  capture multiple events, the user manually resets the bit to ' 1 ' in software following any POR.\nFIGURE 4-2:\nEXTERNAL POWER-ON RESET CIRCUIT (FOR SLOW VDD POWER-UP)\nNote 1: External  Power-on  Reset  circuit  is  required only  if  the  VDD  power-up  slope  is  too  slow. The  diode  D  helps  discharge  the  capacitor quickly when VDD powers down.\n2: R < 40 k \u03a9 is recommended to make sure that the  voltage  drop  across  R  does  not  violate the device's electrical specification.\n3: R1 \u2265 1 k \u03a9 will  limit  any  current  flowing into MCLR from external capacitor C, in the event of MCLR/VPP pin breakdown, due to Electrostatic  Discharge  (ESD)  or  Electrical Overstress (EOS).",
    "4.4 Brown-out Reset (BOR)\nPIC18F2525/2620/4525/4620 devices implement a BOR circuit  that  provides  the  user  with  a  number  of configuration  and  power-saving  options.  The  BOR  is controlled by the BORV1:BORV0 and BOREN1:BOREN0 Configuration bits. There are a total of  four  BOR configurations which are summarized in Table 4-1.\nPlacing the BOR under software control gives the user the additional flexibility of tailoring the application to its environment without having to reprogram the device to change BOR configuration. It also allows the user to tailor device power consumption in software by eliminating the incremental current that the BOR consumes. While the BOR current is typically very small, it may have some impact in low-power applications.",
    "4.4 Brown-out Reset (BOR)\nThe BOR threshold is set by the BORV1:BORV0 bits. If BOR  is  enabled  (any  values  of  BOREN1:BOREN0, except ' 00 '), any drop of VDD below VBOR (parameter D005) for greater than TBOR (parameter 35) will reset the device. A Reset may or may not occur if VDD falls below VBOR for less than TBOR. The chip will remain in Brown-out Reset until VDD rises above VBOR.\nIf the Power-up Timer is enabled, it will be invoked after VDD  rises  above  VBOR;  it  then  will  keep  the  chip  in Reset for an additional time delay, TPWRT (parameter 33).  If  VDD  drops  below  VBOR  while  the Power-up Timer is running, the chip will go back into a Brown-out  Reset  and  the  Power-up  Timer  will  be initialized. Once VDD rises above VBOR, the Power-up Timer will execute the additional time delay.\nBOR and the Power-on Timer (PWRT) are independently configured. Enabling BOR Reset does not automatically enable the PWRT.",
    "4.4.1 SOFTWARE ENABLED BOR\nWhen  BOREN1:BOREN0  = 01 , the  BOR  can  be enabled  or  disabled  by  the  user  in  software.  This  is done  with the control bit, SBOREN  (RCON<6>). Setting  SBOREN  enables  the  BOR  to  function  as previously described. Clearing SBOREN disables the BOR entirely.  The  SBOREN bit operates only in this mode; otherwise it is read as ' 0 '.\nNote:\nEven when BOR is under software control, the BOR Reset voltage level is still set by the  BORV1:BORV0 Configuration bits.  It cannot be changed in software.",
    "4.4.2 DETECTING BOR\nWhen BOR is enabled, the BOR bit always resets to ' 0 ' on any BOR or POR event. This makes it difficult to determine if a BOR event has occurred just by reading the state of BOR alone. A more reliable method is to simultaneously check the state of both POR and BOR. This assumes that the POR bit is reset to ' 1 ' in software immediately after any POR event. If BOR is ' 0 '  while POR is ' 1 ', it can be reliably assumed that a BOR event has occurred.",
    "4.4.3 DISABLING BOR IN SLEEP MODE\nWhen  BOREN1:BOREN0  = 10 , the  BOR  remains under  hardware  control  and  operates  as  previously described. Whenever the device enters Sleep mode, however, the BOR is automatically disabled. When the device  returns  to  any  other  operating  mode,  BOR  is automatically re-enabled.\nThis  mode  allows  for  applications  to  recover  from brown-out  situations,  while  actively  executing  code, when the device requires BOR protection the most. At the same time, it saves additional power in Sleep mode by eliminating the small incremental BOR current.",
    "4.4.3 DISABLING BOR IN SLEEP MODE\nTABLE 4-1: BOR CONFIGURATIONS\n\n0, BOR Configuration.BOREN0 = 0. 0, Status of SBOREN.(RCON<6>) = Unavailable. 0, BOR Operation = BOR disabled; must be enabled by reprogramming the Configuration bits.. 0, BOR Configuration.BOREN0 = 1. 0, Status of SBOREN.(RCON<6>) = Available. 0, BOR Operation = BOR enabled in software; operation controlled by SBOREN.. 1, BOR Configuration.BOREN0 = 0. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware in Run and Idle modes, disabled during Sleep mode.. 1, BOR Configuration.BOREN0 = 1. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware; must be disabled by reprogramming the Configuration bits.",
    "4.5 Device Reset Timers\nPIC18F2525/2620/4525/4620 devices incorporate three separate on-chip timers that help regulate the Power-on Reset process. Their main function is to ensure that the device clock is stable before code is executed. These timers are:\n\u00b7 Power-up Timer (PWRT)\n\u00b7 Oscillator Start-up Timer (OST)\n\u00b7 PLL Lock Time-out",
    "4.5.1 POWER-UP TIMER (PWRT)\nThe Power-up Timer (PWRT) of PIC18F2525/2620/ 4525/4620 devices is an 11-bit counter which uses the INTRC source as the clock input. This yields an approximate time interval of 2048 x 32 \u03bc s = 65.6 ms. While  the  PWRT  is  counting,  the  device  is  held  in Reset.\nThe power-up time delay depends on the INTRC clock and will vary from chip to chip due to temperature and process variation. See DC parameter 33 for details.\nThe  PWRT  is  enabled  by  clearing  the  PWRTEN Configuration bit.",
    "4.5.2 OSCILLATOR START-UP TIMER (OST)\nThe Oscillator Start-up Timer (OST) provides a 1024 oscillator cycle (from OSC1 input) delay after the PWRT delay is over (parameter 33). This ensures that the  crystal  oscillator  or  resonator  has  started  and stabilized.\nThe OST time-out is invoked only for XT, LP, HS and HSPLL modes and only on Power-on Reset, or on exit from most power-managed modes.",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\nHSPLL, Power-up (2) and Brown-out Reset.PWRTEN = 0 = 66 ms (1) + 1024 TOSC + 2 ms (2). HSPLL, Power-up (2) and Brown-out Reset.PWRTEN = 1 = 1024 TOSC + 2 ms (2). HSPLL, Exit from Power-Managed Mode.Exit from Power-Managed Mode = 1024 TOSC + 2 ms (2). HS, XT, LP, Power-up (2) and Brown-out Reset.PWRTEN = 0 = 66 ms (1) + 1024 TOSC. HS, XT, LP, Power-up (2) and Brown-out Reset.PWRTEN = 1 = 1024 TOSC. HS, XT, LP, Exit from Power-Managed Mode.Exit from Power-Managed Mode = 1024 TOSC. EC, ECIO, Power-up (2) and Brown-out Reset.PWRTEN = 0 = 66 ms (1). EC, ECIO, Power-up (2) and Brown-out Reset.PWRTEN = 1 =",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\n-. EC, ECIO, Exit from Power-Managed Mode.Exit from Power-Managed Mode = -. RC, RCIO, Power-up (2) and Brown-out Reset.PWRTEN = 0 = 66 ms (1). RC, RCIO, Power-up (2) and Brown-out Reset.PWRTEN = 1 = -. RC, RCIO, Exit from Power-Managed Mode.Exit from Power-Managed Mode = -. INTIO1, INTIO2, Power-up (2) and Brown-out Reset.PWRTEN = 0 = 66 ms (1). INTIO1, INTIO2, Power-up (2) and Brown-out Reset.PWRTEN = 1 = -. INTIO1, INTIO2, Exit from Power-Managed Mode.Exit from Power-Managed Mode = -\nNote 1: 66 ms (65.5 ms) is the nominal Power-up Timer (PWRT) delay.\n2: 2 ms is the nominal time required for the PLL to lock.",
    "4.5.3 PLL LOCK TIME-OUT\nWith  the  PLL  enabled  in  its  PLL  mode,  the  time-out sequence following a Power-on Reset is slightly different  from  other  oscillator  modes.  A  separate  timer  is used to provide a fixed time-out that is sufficient for the PLL to lock to the main oscillator frequency. This PLL lock  time-out  (TPLL) is  typically  2  ms and follows  the oscillator start-up time-out.",
    "4.5.4 TIME-OUT SEQUENCE\nOn power-up, the time-out sequence is as follows:\n1. After the POR pulse has cleared, PWRT time-out is invoked (if enabled).\n2. Then, the OST is activated.\nThe total time-out will vary based on oscillator configuration and the status of the PWRT.  Figure 4-3, Figure 4-4,  Figure 4-5,  Figure 4-6  and  Figure 4-7  all depict  time-out  sequences  on  power-up,  with  the Power-up Timer enabled and the device operating in HS  Oscillator  mode.  Figures 4-3  through 4-6  also apply  to  devices  operating  in  XT  or  LP  modes.  For devices in RC mode and with the PWRT disabled, there will be no time-out at all.\nSince the time-outs occur from the POR pulse, if MCLR is kept low long enough, all time-outs will expire. Bringing MCLR  high  will begin execution immediately (Figure 4-5). This is useful for testing purposes or to synchronize more  than one PIC18FXXXX  device operating in parallel.",
    "FIGURE 4-3: TIME-OUT SEQUENCE ON POWER-UP (MCLR TIED TO VDD, VDD RISE < TPWRT)\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "FIGURE 4-4: TIME-OUT SEQUENCE ON POWER-UP (MCLR NOT TIED TO VDD): CASE 1\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "FIGURE 4-7: TIME-OUT SEQUENCE ON POR W/PLL ENABLED (MCLR TIED TO VDD)\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET\nPLL TIME-OUT\nTPLL\nNote:\nTOST = 1024 clock cycles.\nTPLL \u2248 2 ms max. First three stages of the PWRT timer.",
    "4.6 Reset State of Registers\nMost registers are unaffected by a Reset. Their status is unknown  on  POR  and  unchanged  by  all  other Resets.  The  other  registers  are  forced  to  a  'Reset state' depending on the type of Reset that occurred.\nTable 4-4  describes  the  Reset  states  for  all  of  the Special Function Registers. These are categorized by Power-on  and  Brown-out  Resets,  Master  Clear  and WDT Resets and WDT wake-ups.\nMost  registers  are  not  affected  by  a  WDT  wake-up, since this is viewed as the resumption of normal operation. Status bits from the RCON register, RI, TO, PD, POR and BOR, are set or cleared differently in different Reset situations, as indicated in Table 4-3. These bits are  used  in  software  to  determine  the  nature  of  the Reset.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nPower-on Reset, Program Counter.Program Counter = 0000h. Power-on Reset, RCON Register.SBOREN = 1. Power-on Reset, RCON Register.RI = 1. Power-on Reset, RCON Register.TO = 1. Power-on Reset, RCON Register.PD = 1. Power-on Reset, RCON Register.POR = 0. Power-on Reset, RCON Register.BOR = 0. Power-on Reset, STKPTR Register.STKFUL = 0. Power-on Reset, STKPTR Register.STKUNF = 0. RESET Instruction, Program Counter.Program Counter = 0000h. RESET Instruction, RCON Register.SBOREN = u (2). RESET Instruction, RCON Register.RI = 0. RESET Instruction, RCON Register.TO = u. RESET Instruction, RCON Register.PD = u. RESET Instruction, RCON Register.POR = u. RESET Instruction, RCON Register.BOR = u. RESET Instruction, STKPTR Register.STKFUL = u. RESET Instruction,",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nSTKPTR Register.STKUNF = u. Brown-out Reset, Program Counter.Program Counter = 0000h. Brown-out Reset, RCON Register.SBOREN = u (2). Brown-out Reset, RCON Register.RI = 1. Brown-out Reset, RCON Register.TO = 1. Brown-out Reset, RCON Register.PD = 1. Brown-out Reset, RCON Register.POR = u. Brown-out Reset, RCON Register.BOR = 0. Brown-out Reset, STKPTR Register.STKFUL = u. Brown-out Reset, STKPTR Register.STKUNF = u. MCLR during power-managed Run Modes, Program Counter.Program Counter = 0000h. MCLR during power-managed Run Modes, RCON Register.SBOREN = u (2). MCLR during power-managed Run Modes, RCON Register.RI = u. MCLR during power-managed Run Modes, RCON Register.TO = 1. MCLR during power-managed Run Modes, RCON Register.PD =",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nu. MCLR during power-managed Run Modes, RCON Register.POR = u. MCLR during power-managed Run Modes, RCON Register.BOR = u. MCLR during power-managed Run Modes, STKPTR Register.STKFUL = u. MCLR during power-managed Run Modes, STKPTR Register.STKUNF = u. MCLR during power-managed Idle modes and Sleep mode, Program Counter.Program Counter = 0000h. MCLR during power-managed Idle modes and Sleep mode, RCON Register.SBOREN = u (2). MCLR during power-managed Idle modes and Sleep mode, RCON Register.RI = u. MCLR during power-managed Idle modes and Sleep mode, RCON Register.TO = 1. MCLR during power-managed Idle modes and Sleep mode, RCON Register.PD = 0. MCLR during power-managed Idle modes and Sleep mode, RCON Register.POR = u. MCLR during power-managed Idle modes and Sleep mode, RCON Register.BOR = u. MCLR during power-managed Idle modes and",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nSleep mode, STKPTR Register.STKFUL = u. MCLR during power-managed Idle modes and Sleep mode, STKPTR Register.STKUNF = u. WDT time-out during full power or power-managed Run mode, Program Counter.Program Counter = 0000h. WDT time-out during full power or power-managed Run mode, RCON Register.SBOREN = u (2). WDT time-out during full power or power-managed Run mode, RCON Register.RI = u. WDT time-out during full power or power-managed Run mode, RCON Register.TO = 0. WDT time-out during full power or power-managed Run mode, RCON Register.PD = u. WDT time-out during full power or power-managed Run mode, RCON Register.POR = u. WDT time-out during full power or power-managed Run mode, RCON Register.BOR = u. WDT time-out during full power or power-managed Run mode, STKPTR Register.STKFUL = u.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nWDT time-out during full power or power-managed Run mode, STKPTR Register.STKUNF = u. MCLR during full-power execution, Program Counter.Program Counter = 0000h. MCLR during full-power execution, RCON Register.SBOREN = u (2). MCLR during full-power execution, RCON Register.RI = u. MCLR during full-power execution, RCON Register.TO = u. MCLR during full-power execution, RCON Register.PD = u. MCLR during full-power execution, RCON Register.POR = u. MCLR during full-power execution, RCON Register.BOR = u. MCLR during full-power execution, STKPTR Register.STKFUL = u. MCLR during full-power execution, STKPTR Register.STKUNF = u. Stack Full Reset (STVREN = 1 ), Program Counter.Program Counter = 0000h. Stack Full Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Full Reset",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n(STVREN = 1 ), RCON Register.RI = u. Stack Full Reset (STVREN = 1 ), RCON Register.TO = u. Stack Full Reset (STVREN = 1 ), RCON Register.PD = u. Stack Full Reset (STVREN = 1 ), RCON Register.POR = u. Stack Full Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKFUL = 1. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKUNF = u. Stack Underflow Reset (STVREN = 1 ), Program Counter.Program Counter = 0000h. Stack Underflow Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Underflow Reset (STVREN = 1 ), RCON Register.RI = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.TO = u. Stack Underflow Reset (STVREN = 1",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n), RCON Register.PD = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.POR = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKFUL = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKUNF = 1. Stack Underflow Error (not an actual Reset, STVREN = 0 ), Program Counter.Program Counter = 0000h. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.SBOREN = u (2). Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.RI = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.TO = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.PD = u. Stack Underflow Error",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n(not an actual Reset, STVREN = 0 ), RCON Register.POR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.BOR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKFUL = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKUNF = 1. WDT time-out during power-managed Idle or Sleep modes, Program Counter.Program Counter = PC + 2. WDT time-out during power-managed Idle or Sleep modes, RCON Register.SBOREN = u (2). WDT time-out during power-managed Idle or Sleep modes, RCON Register.RI = u. WDT time-out during power-managed Idle or Sleep modes, RCON Register.TO = 0. WDT time-out during power-managed Idle or Sleep modes, RCON Register.PD = 0. WDT time-out during power-managed Idle or Sleep modes,",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nRCON Register.POR = u. WDT time-out during power-managed Idle or Sleep modes, RCON Register.BOR = u. WDT time-out during power-managed Idle or Sleep modes, STKPTR Register.STKFUL = u. WDT time-out during power-managed Idle or Sleep modes, STKPTR Register.STKUNF = u. Interrupt exit from power-managed modes, Program Counter.Program Counter = PC + 2 (1). Interrupt exit from power-managed modes, RCON Register.SBOREN = u (2). Interrupt exit from power-managed modes, RCON Register.RI = u. Interrupt exit from power-managed modes, RCON Register.TO = u. Interrupt exit from power-managed modes, RCON Register.PD = 0. Interrupt exit from power-managed modes, RCON Register.POR = u. Interrupt exit from power-managed modes, RCON Register.BOR = u. Interrupt exit from power-managed modes, STKPTR Register.STKFUL = u. Interrupt exit from power-managed modes,",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nSTKPTR Register.STKUNF = u\nLegend:\nu = unchanged\nNote 1: When the wake-up is due to an interrupt and the GIEH or GIEL bits are set, the PC is loaded with the interrupt vector (008h or 0018h).\n2: Reset state is ' 1 ' for POR and unchanged for all other Resets when software BOR is enabled (BOREN1:BOREN0 Configuration bits = 01 and SBOREN = 1 ); otherwise, the Reset state is ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSU, Applicable Devices = 2525. TOSU, Applicable Devices = 2620. TOSU, Applicable Devices = 4525. TOSU, Applicable Devices = 4620. TOSU, Power-on Reset, Brown-out Reset = ---0 0000. TOSU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0 0000. TOSU, Wake-up via WDT or Interrupt = ---0 uuuu (3). TOSH, Applicable Devices = 2525. TOSH, Applicable Devices = 2620. TOSH, Applicable Devices = 4525. TOSH, Applicable Devices = 4620. TOSH, Power-on Reset, Brown-out Reset = 0000 0000. TOSH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TOSH, Wake-up via WDT or Interrupt = uuuu uuuu (3). TOSL, Applicable Devices = 2525. TOSL, Applicable Devices = 2620. TOSL, Applicable Devices = 4525. TOSL, Applicable Devices = 4620.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSL, Power-on Reset, Brown-out Reset = 0000 0000. TOSL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TOSL, Wake-up via WDT or Interrupt = uuuu uuuu (3). STKPTR, Applicable Devices = 2525. STKPTR, Applicable Devices = 2620. STKPTR, Applicable Devices = 4525. STKPTR, Applicable Devices = 4620. STKPTR, Power-on Reset, Brown-out Reset = 00-0 0000. STKPTR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu-0 0000. STKPTR, Wake-up via WDT or Interrupt = uu-u uuuu (3). PCLATU, Applicable Devices = 2525. PCLATU, Applicable Devices = 2620. PCLATU, Applicable Devices = 4525. PCLATU, Applicable Devices = 4620. PCLATU, Power-on Reset, Brown-out Reset = ---0",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n0000. PCLATU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0 0000. PCLATU, Wake-up via WDT or Interrupt = ---u uuuu. PCLATH, Applicable Devices = 2525. PCLATH, Applicable Devices = 2620. PCLATH, Applicable Devices = 4525. PCLATH, Applicable Devices = 4620. PCLATH, Power-on Reset, Brown-out Reset = 0000 0000. PCLATH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PCLATH, Wake-up via WDT or Interrupt = uuuu uuuu. PCL, Applicable Devices = 2525. PCL, Applicable Devices = 2620. PCL, Applicable Devices = 4525. PCL, Applicable Devices = 4620. PCL, Power-on Reset, Brown-out Reset = 0000 0000. PCL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PCL, Wake-up via WDT",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nor Interrupt = PC + 2 (2). TBLPTRU, Applicable Devices = 2525. TBLPTRU, Applicable Devices = 2620. TBLPTRU, Applicable Devices = 4525. TBLPTRU, Applicable Devices = 4620. TBLPTRU, Power-on Reset, Brown-out Reset = --00 0000. TBLPTRU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00 0000. TBLPTRU, Wake-up via WDT or Interrupt = --uu uuuu. TBLPTRH, Applicable Devices = 2525. TBLPTRH, Applicable Devices = 2620. TBLPTRH, Applicable Devices = 4525. TBLPTRH, Applicable Devices = 4620. TBLPTRH, Power-on Reset, Brown-out Reset = 0000 0000. TBLPTRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TBLPTRH, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRL, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= 2525. TBLPTRL, Applicable Devices = 2620. TBLPTRL, Applicable Devices = 4525. TBLPTRL, Applicable Devices = 4620. TBLPTRL, Power-on Reset, Brown-out Reset = 0000 0000. TBLPTRL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TBLPTRL, Wake-up via WDT or Interrupt = uuuu uuuu. TABLAT, Applicable Devices = 2525. TABLAT, Applicable Devices = 2620. TABLAT, Applicable Devices = 4525. TABLAT, Applicable Devices = 4620. TABLAT, Power-on Reset, Brown-out Reset = 0000 0000. TABLAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TABLAT, Wake-up via WDT or Interrupt = uuuu uuuu. PRODH, Applicable Devices = 2525. PRODH, Applicable Devices = 2620. PRODH, Applicable Devices = 4525. PRODH, Applicable Devices = 4620. PRODH,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPower-on Reset, Brown-out Reset = xxxx xxxx. PRODH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PRODH, Wake-up via WDT or Interrupt = uuuu uuuu. PRODL, Applicable Devices = 2525. PRODL, Applicable Devices = 2620. PRODL, Applicable Devices = 4525. PRODL, Applicable Devices = 4620. PRODL, Power-on Reset, Brown-out Reset = xxxx xxxx. PRODL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PRODL, Wake-up via WDT or Interrupt = uuuu uuuu. INTCON, Applicable Devices = 2525. INTCON, Applicable Devices = 2620. INTCON, Applicable Devices = 4525. INTCON, Applicable Devices = 4620. INTCON, Power-on Reset, Brown-out Reset = 0000 000x. INTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 000u.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nINTCON, Wake-up via WDT or Interrupt = uuuu uuuu (1). INTCON2, Applicable Devices = 2525. INTCON2, Applicable Devices = 2620. INTCON2, Applicable Devices = 4525. INTCON2, Applicable Devices = 4620. INTCON2, Power-on Reset, Brown-out Reset = 1111 -1-1. INTCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 -1-1. INTCON2, Wake-up via WDT or Interrupt = uuuu -u-u (1). INTCON3, Applicable Devices = 2525. INTCON3, Applicable Devices = 2620. INTCON3, Applicable Devices = 4525. INTCON3, Applicable Devices = 4620. INTCON3, Power-on Reset, Brown-out Reset = 11-0 0-00. INTCON3, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-0 0-00. INTCON3, Wake-up via WDT or Interrupt = uu-u",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nu-uu (1). INDF0, Applicable Devices = 2525. INDF0, Applicable Devices = 2620. INDF0, Applicable Devices = 4525. INDF0, Applicable Devices = 4620. INDF0, Power-on Reset, Brown-out Reset = N/A. INDF0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF0, Wake-up via WDT or Interrupt = N/A. POSTINC0, Applicable Devices = 2525. POSTINC0, Applicable Devices = 2620. POSTINC0, Applicable Devices = 4525. POSTINC0, Applicable Devices = 4620. POSTINC0, Power-on Reset, Brown-out Reset = N/A. POSTINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC0, Wake-up via WDT or Interrupt = N/A. POSTDEC0, Applicable Devices = 2525. POSTDEC0, Applicable Devices = 2620. POSTDEC0, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n4525. POSTDEC0, Applicable Devices = 4620. POSTDEC0, Power-on Reset, Brown-out Reset = N/A. POSTDEC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC0, Wake-up via WDT or Interrupt = N/A. PREINC0, Applicable Devices = 2525. PREINC0, Applicable Devices = 2620. PREINC0, Applicable Devices = 4525. PREINC0, Applicable Devices = 4620. PREINC0, Power-on Reset, Brown-out Reset = N/A. PREINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC0, Wake-up via WDT or Interrupt = N/A. PLUSW0, Applicable Devices = 2525. PLUSW0, Applicable Devices = 2620. PLUSW0, Applicable Devices = 4525. PLUSW0, Applicable Devices = 4620. PLUSW0, Power-on Reset, Brown-out Reset = N/A. PLUSW0,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nMCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW0, Wake-up via WDT or Interrupt = N/A. FSR0H, Applicable Devices = 2525. FSR0H, Applicable Devices = 2620. FSR0H, Applicable Devices = 4525. FSR0H, Applicable Devices = 4620. FSR0H, Power-on Reset, Brown-out Reset = ---- 0000. FSR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR0H, Wake-up via WDT or Interrupt = ---- uuuu. FSR0L, Applicable Devices = 2525. FSR0L, Applicable Devices = 2620. FSR0L, Applicable Devices = 4525. FSR0L, Applicable Devices = 4620. FSR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nuuuu. FSR0L, Wake-up via WDT or Interrupt = uuuu uuuu. WREG, Applicable Devices = 2525. WREG, Applicable Devices = 2620. WREG, Applicable Devices = 4525. WREG, Applicable Devices = 4620. WREG, Power-on Reset, Brown-out Reset = xxxx xxxx. WREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. WREG, Wake-up via WDT or Interrupt = uuuu uuuu. INDF1, Applicable Devices = 2525. INDF1, Applicable Devices = 2620. INDF1, Applicable Devices = 4525. INDF1, Applicable Devices = 4620. INDF1, Power-on Reset, Brown-out Reset = N/A. INDF1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF1, Wake-up via WDT or Interrupt = N/A. POSTINC1, Applicable Devices = 2525.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPOSTINC1, Applicable Devices = 2620. POSTINC1, Applicable Devices = 4525. POSTINC1, Applicable Devices = 4620. POSTINC1, Power-on Reset, Brown-out Reset = N/A. POSTINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC1, Wake-up via WDT or Interrupt = N/A. POSTDEC1, Applicable Devices = 2525. POSTDEC1, Applicable Devices = 2620. POSTDEC1, Applicable Devices = 4525. POSTDEC1, Applicable Devices = 4620. POSTDEC1, Power-on Reset, Brown-out Reset = N/A. POSTDEC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC1, Wake-up via WDT or Interrupt = N/A. PREINC1, Applicable Devices = 2525. PREINC1, Applicable Devices = 2620. PREINC1, Applicable Devices = 4525. PREINC1, Applicable Devices = 4620.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPREINC1, Power-on Reset, Brown-out Reset = N/A. PREINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC1, Wake-up via WDT or Interrupt = . PLUSW1, Applicable Devices = 2525. PLUSW1, Applicable Devices = 2620. PLUSW1, Applicable Devices = 4525. PLUSW1, Applicable Devices = 4620. PLUSW1, Power-on Reset, Brown-out Reset = N/A. PLUSW1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW1, Wake-up via WDT or Interrupt = N/A N/A\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nFSR1H, Applicable Devices = 2525. FSR1H, Applicable Devices = 2620. FSR1H, Applicable Devices = 4525. FSR1H, Applicable Devices = 4620. FSR1H, Power-on Reset, Brown-out Reset = ---- 0000. FSR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR1H, Wake-up via WDT or Interrupt = ---- uuuu. FSR1L, Applicable Devices = 2525. FSR1L, Applicable Devices = 2620. FSR1L, Applicable Devices = 4525. FSR1L, Applicable Devices = 4620. FSR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR1L, Wake-up via WDT or Interrupt = uuuu uuuu. BSR, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2525. BSR, Applicable Devices = 2620. BSR, Applicable Devices = 4525. BSR, Applicable Devices = 4620. BSR, Power-on Reset, Brown-out Reset = ---- 0000. BSR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. BSR, Wake-up via WDT or Interrupt = ---- uuuu. INDF2, Applicable Devices = 2525. INDF2, Applicable Devices = 2620. INDF2, Applicable Devices = 4525. INDF2, Applicable Devices = 4620. INDF2, Power-on Reset, Brown-out Reset = N/A. INDF2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF2, Wake-up via WDT or Interrupt = N/A. POSTINC2, Applicable Devices = 2525. POSTINC2, Applicable Devices = 2620. POSTINC2, Applicable Devices = 4525. POSTINC2, Applicable Devices = 4620.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPOSTINC2, Power-on Reset, Brown-out Reset = N/A. POSTINC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC2, Wake-up via WDT or Interrupt = N/A. POSTDEC2, Applicable Devices = 2525. POSTDEC2, Applicable Devices = 2620. POSTDEC2, Applicable Devices = 4525. POSTDEC2, Applicable Devices = 4620. POSTDEC2, Power-on Reset, Brown-out Reset = N/A. POSTDEC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC2, Wake-up via WDT or Interrupt = N/A. PREINC2, Applicable Devices = 2525. PREINC2, Applicable Devices = 2620. PREINC2, Applicable Devices = 4525. PREINC2, Applicable Devices = 4620. PREINC2, Power-on Reset, Brown-out Reset = N/A. PREINC2, MCLR Resets,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT Reset, RESET Instruction, Stack Resets = N/A. PREINC2, Wake-up via WDT or Interrupt = N/A. PLUSW2, Applicable Devices = 2525. PLUSW2, Applicable Devices = 2620. PLUSW2, Applicable Devices = 4525. PLUSW2, Applicable Devices = 4620. PLUSW2, Power-on Reset, Brown-out Reset = N/A. PLUSW2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW2, Wake-up via WDT or Interrupt = N/A. FSR2H, Applicable Devices = 2525. FSR2H, Applicable Devices = 2620. FSR2H, Applicable Devices = 4525. FSR2H, Applicable Devices = 4620. FSR2H, Power-on Reset, Brown-out Reset = ---- 0000. FSR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR2H, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n---- uuuu. FSR2L, Applicable Devices = 2525. FSR2L, Applicable Devices = 2620. FSR2L, Applicable Devices = 4525. FSR2L, Applicable Devices = 4620. FSR2L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR2L, Wake-up via WDT or Interrupt = uuuu uuuu. STATUS, Applicable Devices = 2525. STATUS, Applicable Devices = 2620. STATUS, Applicable Devices = 4525. STATUS, Applicable Devices = 4620. STATUS, Power-on Reset, Brown-out Reset = ---x xxxx. STATUS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---u uuuu. STATUS, Wake-up via WDT or Interrupt = ---u uuuu. TMR0H, Applicable Devices = 2525. TMR0H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 2620. TMR0H, Applicable Devices = 4525. TMR0H, Applicable Devices = 4620. TMR0H, Power-on Reset, Brown-out Reset = 0000 0000. TMR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR0H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0L, Applicable Devices = 2525. TMR0L, Applicable Devices = 2620. TMR0L, Applicable Devices = 4525. TMR0L, Applicable Devices = 4620. TMR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR0L, Wake-up via WDT or Interrupt = uuuu uuuu. T0CON, Applicable Devices = 2525. T0CON, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2620. T0CON, Applicable Devices = 4525. T0CON, Applicable Devices = 4620. T0CON, Power-on Reset, Brown-out Reset = 1111 1111. T0CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. T0CON, Wake-up via WDT or Interrupt = uuuu uuuu. OSCCON, Applicable Devices = 2525. OSCCON, Applicable Devices = 2620. OSCCON, Applicable Devices = 4525. OSCCON, Applicable Devices = 4620. OSCCON, Power-on Reset, Brown-out Reset = 0100 q000. OSCCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0100 q000. OSCCON, Wake-up via WDT or Interrupt = uuuu uuqu. HLVDCON, Applicable Devices = 2525. HLVDCON, Applicable Devices = 2620. HLVDCON, Applicable Devices = 4525. HLVDCON, Applicable Devices = 4620.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nHLVDCON, Power-on Reset, Brown-out Reset = 0-00 0101. HLVDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00 0101. HLVDCON, Wake-up via WDT or Interrupt = u-uu uuuu. WDTCON, Applicable Devices = 2525. WDTCON, Applicable Devices = 2620. WDTCON, Applicable Devices = 4525. WDTCON, Applicable Devices = 4620. WDTCON, Power-on Reset, Brown-out Reset = ---- ---0. WDTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- ---0. WDTCON, Wake-up via WDT or Interrupt = ---- ---u. RCON (4), Applicable Devices = 2525. RCON (4), Applicable Devices = 2620. RCON (4), Applicable Devices = 4525. RCON (4), Applicable Devices = 4620. RCON (4), Power-on",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nReset, Brown-out Reset = 0q-1 11q0. RCON (4), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0q-q qquu. RCON (4), Wake-up via WDT or Interrupt = uq-u qquu. TMR1H, Applicable Devices = 2525. TMR1H, Applicable Devices = 2620. TMR1H, Applicable Devices = 4525. TMR1H, Applicable Devices = 4620. TMR1H, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1L, Applicable Devices = 2525. TMR1L, Applicable Devices = 2620. TMR1L, Applicable Devices = 4525. TMR1L, Applicable Devices = 4620.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTMR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1L, Wake-up via WDT or Interrupt = uuuu uuuu. T1CON, Applicable Devices = 2525. T1CON, Applicable Devices = 2620. T1CON, Applicable Devices = 4525. T1CON, Applicable Devices = 4620. T1CON, Power-on Reset, Brown-out Reset = 0000 0000. T1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = u0uu uuuu. T1CON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR2, Applicable Devices = 2525. TMR2, Applicable Devices = 2620. TMR2, Applicable Devices = 4525. TMR2, Applicable Devices = 4620. TMR2, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000 0000. TMR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR2, Wake-up via WDT or Interrupt = uuuu uuuu. PR2, Applicable Devices = 2525. PR2, Applicable Devices = 2620. PR2, Applicable Devices = 4525. PR2, Applicable Devices = 4620. PR2, Power-on Reset, Brown-out Reset = 1111 1111. PR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PR2, Wake-up via WDT or Interrupt = uuuu uuuu. T2CON, Applicable Devices = 2525. T2CON, Applicable Devices = 2620. T2CON, Applicable Devices = 4525. T2CON, Applicable Devices = 4620. T2CON, Power-on Reset, Brown-out Reset = -000 0000. T2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n-000 0000. T2CON, Wake-up via WDT or Interrupt = -uuu uuuu. SSPBUF, Applicable Devices = 2525. SSPBUF, Applicable Devices = 2620. SSPBUF, Applicable Devices = 4525 4525. SSPBUF, Applicable Devices = 4620. SSPBUF, Power-on Reset, Brown-out Reset = xxxx xxxx. SSPBUF, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. SSPBUF, Wake-up via WDT or Interrupt = uuuu uuuu. SSPADD, Applicable Devices = 2525. SSPADD, Applicable Devices = 2620. SSPADD, Applicable Devices = . SSPADD, Applicable Devices = 4620. SSPADD, Power-on Reset, Brown-out Reset = 0000 0000. SSPADD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPADD, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu uuuu. SSPSTAT, Applicable Devices = 2525. SSPSTAT, Applicable Devices = 2620. SSPSTAT, Applicable Devices = 4525. SSPSTAT, Applicable Devices = 4620. SSPSTAT, Power-on Reset, Brown-out Reset = 0000 0000. SSPSTAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPSTAT, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON1 SSPCON2, Applicable Devices = 2525 2525. SSPCON1 SSPCON2, Applicable Devices = 2620 2620. SSPCON1 SSPCON2, Applicable Devices = 4525 4525. SSPCON1 SSPCON2, Applicable Devices = 4620 4620. SSPCON1 SSPCON2, Power-on Reset, Brown-out Reset = 0000 0000 0000 0000. SSPCON1 SSPCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000 0000",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. SSPCON1 SSPCON2, Wake-up via WDT or Interrupt = uuuu uuuu uuuu uuuu\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nADRESH, Applicable Devices = 2525. ADRESH, Applicable Devices = 2620. ADRESH, Applicable Devices = 4525. ADRESH, Applicable Devices = 4620. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESL, Applicable Devices = 2525. ADRESL, Applicable Devices = 2620. ADRESL, Applicable Devices = 4525. ADRESL, Applicable Devices = 4620. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = uuuu. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADCON0, Applicable Devices = 2525. ADCON0, Applicable Devices = 2620. ADCON0, Applicable Devices = 4525. ADCON0, Applicable Devices = 4620. ADCON0, Power-on Reset, Brown-out Reset = --00. ADCON0, Power-on Reset, Brown-out Reset = 0000. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON0, Wake-up via WDT or Interrupt = --uu. ADCON0, Wake-up via WDT or Interrupt = uuuu. ADCON1, Applicable Devices = 2525. ADCON1, Applicable",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nDevices = 2620. ADCON1, Applicable Devices = 4525. ADCON1, Applicable Devices = 4620. ADCON1, Power-on Reset, Brown-out Reset = --00. ADCON1, Power-on Reset, Brown-out Reset = 0qqq. ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0qqq. ADCON1, Wake-up via WDT or Interrupt = --uu. ADCON1, Wake-up via WDT or Interrupt = uuuu. ADCON2, Applicable Devices = 2525. ADCON2, Applicable Devices = 2620. ADCON2, Applicable Devices = 4525. ADCON2, Applicable Devices = 4620. ADCON2, Power-on Reset, Brown-out Reset = 0-00. ADCON2, Power-on Reset, Brown-out Reset = 0000. ADCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0-00. ADCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON2, Wake-up via WDT or Interrupt = u-uu. ADCON2, Wake-up via WDT or Interrupt = uuuu. CCPR1H, Applicable Devices = 2525. CCPR1H, Applicable Devices = 2620. CCPR1H, Applicable Devices = 4525. CCPR1H, Applicable Devices = 4620. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu. CCPR1L, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2525. CCPR1L, Applicable Devices = 2620. CCPR1L, Applicable Devices = 4525. CCPR1L, Applicable Devices = 4620. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Applicable Devices = 2525. CCP1CON, Applicable Devices = 2620. CCP1CON, Applicable Devices = 4525. CCP1CON, Applicable Devices = 4620. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, Power-on Reset, Brown-out Reset = 0000.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Applicable Devices = 2525. CCP1CON, Applicable Devices = 2620. CCP1CON, Applicable Devices = 4525. CCP1CON, Applicable Devices = 4620. CCP1CON, Power-on Reset, Brown-out Reset = --00. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = --uu. CCP1CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = uuuu. CCPR2H, Applicable Devices = 2525. CCPR2H, Applicable Devices = 2620. CCPR2H, Applicable Devices = 4525. CCPR2H, Applicable Devices = 4620. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2L, Applicable Devices = 2525. CCPR2L, Applicable Devices = 2620. CCPR2L, Applicable Devices = 4525. CCPR2L, Applicable Devices = 4620. CCPR2L, Power-on Reset, Brown-out Reset",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= xxxx. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCP2CON, Applicable Devices = 2525. CCP2CON, Applicable Devices = 2620. CCP2CON, Applicable Devices = 4525. CCP2CON, Applicable Devices = 4620. CCP2CON, Power-on Reset, Brown-out Reset = --00. CCP2CON, Power-on Reset, Brown-out Reset = 0000. CCP2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCP2CON, Wake-up via WDT or Interrupt = --uu. CCP2CON, Wake-up via WDT or Interrupt = uuuu. BAUDCON, Applicable Devices = 2525. BAUDCON, Applicable Devices = 2620. BAUDCON, Applicable Devices = 4525. BAUDCON, Applicable Devices = 4620. BAUDCON, Power-on Reset, Brown-out Reset = 0100. BAUDCON, Power-on Reset, Brown-out Reset = 0-00. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0100. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00. BAUDCON, Wake-up via WDT or Interrupt = uuuu. BAUDCON, Wake-up via WDT or Interrupt = u-uu. PWM1CON, Applicable Devices = 2525. PWM1CON, Applicable Devices = 2620. PWM1CON, Applicable Devices = 4525. PWM1CON, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n4620. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, Wake-up via WDT or Interrupt = uuuu. PWM1CON, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Applicable Devices = 2525. ECCP1AS, Applicable Devices = 2620. ECCP1AS, Applicable Devices = 4525. ECCP1AS, Applicable Devices = 4620. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, MCLR",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Applicable Devices = 2525. ECCP1AS, Applicable Devices = 2620. ECCP1AS, Applicable Devices = 4525. ECCP1AS, Applicable Devices = 4620. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, Power-on Reset, Brown-out Reset = 00--. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00--. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Wake-up via WDT or Interrupt = uu--. CVRCON, Applicable Devices = 2525. CVRCON, Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2620. CVRCON, Applicable Devices = 4525. CVRCON, Applicable Devices = 4620. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, Wake-up via WDT or Interrupt = uuuu. CVRCON, Wake-up via WDT or Interrupt = uuuu. CMCON, Applicable Devices = 2525. CMCON, Applicable Devices = 2620. CMCON, Applicable Devices = 4525. CMCON, Applicable Devices = 4620. CMCON, Power-on Reset, Brown-out Reset = 0000. CMCON, Power-on Reset, Brown-out Reset = 0111. CMCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CMCON, MCLR Resets, WDT Reset, RESET",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nInstruction, Stack Resets = 0111. CMCON, Wake-up via WDT or Interrupt = uuuu. CMCON, Wake-up via WDT or Interrupt = uuuu. TMR3H, Applicable Devices = 2525. TMR3H, Applicable Devices = 2620. TMR3H, Applicable Devices = 4525. TMR3H, Applicable Devices = 4620. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3L, Applicable Devices = 2525. TMR3L, Applicable",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nDevices = 2620. TMR3L, Applicable Devices = 4525. TMR3L, Applicable Devices = 4620. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. T3CON, Applicable Devices = 2525. T3CON, Applicable Devices = 2620. T3CON, Applicable Devices = 4525. T3CON, Applicable Devices = 4620. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, MCLR",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. SPBRGH, Applicable Devices = 2525. SPBRGH, Applicable Devices = 2620. SPBRGH, Applicable Devices = 4525. SPBRGH, Applicable Devices = 4620. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRG, Applicable Devices",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2525. SPBRG, Applicable Devices = 2620. SPBRG, Applicable Devices = 4525. SPBRG, Applicable Devices = 4620. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, Wake-up via WDT or Interrupt = uuuu. SPBRG, Wake-up via WDT or Interrupt = uuuu. RCREG, Applicable Devices = 2525. RCREG, Applicable Devices = 2620. RCREG, Applicable Devices = 4525. RCREG, Applicable Devices = 4620. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCREG, Wake-up via WDT or Interrupt = uuuu. RCREG, Wake-up via WDT or Interrupt = uuuu. TXREG, Applicable Devices = 2525. TXREG, Applicable Devices = 2620. TXREG, Applicable Devices = 4525. TXREG, Applicable Devices = 4620. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, Wake-up via WDT or Interrupt = uuuu. TXREG, Wake-up via WDT or Interrupt = uuuu. TXSTA, Applicable Devices = 2525. TXSTA, Applicable Devices = 2620. TXSTA,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 4525. TXSTA, Applicable Devices = 4620. TXSTA, Power-on Reset, Brown-out Reset = 0000. TXSTA, Power-on Reset, Brown-out Reset = 0010. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0010. TXSTA, Wake-up via WDT or Interrupt = uuuu. TXSTA, Wake-up via WDT or Interrupt = uuuu. RCSTA, Applicable Devices = 2525. RCSTA, Applicable Devices = 2620. RCSTA, Applicable Devices = 4525. RCSTA, Applicable Devices = 4620. RCSTA, Power-on Reset, Brown-out Reset = 0000. RCSTA, Power-on Reset, Brown-out Reset = 000x. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 000x. RCSTA,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = uuuu. RCSTA, Wake-up via WDT or Interrupt = uuuu. EEADRH, Applicable Devices = 2585. EEADRH, Applicable Devices = 2680. EEADRH, Applicable Devices = 4585. EEADRH, Applicable Devices = 4680. EEADRH, Power-on Reset, Brown-out Reset = ----. EEADRH, Power-on Reset, Brown-out Reset = --00. EEADRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ----. EEADRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. EEADRH, Wake-up via WDT or Interrupt = ----. EEADRH, Wake-up via WDT or Interrupt = --uu. EEADR, Applicable Devices = 2525. EEADR, Applicable Devices = 2620. EEADR, Applicable Devices = 4525. EEADR, Applicable Devices = 4620. EEADR, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000. EEADR, Power-on Reset, Brown-out Reset = 0000. EEADR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEADR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEADR, Wake-up via WDT or Interrupt = uuuu. EEADR, Wake-up via WDT or Interrupt = uuuu. EEDATA, Applicable Devices = 2525. EEDATA, Applicable Devices = 2620. EEDATA, Applicable Devices = 4525. EEDATA, Applicable Devices = 4620. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEDATA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EEDATA, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. EEDATA, Wake-up via WDT or Interrupt = uuuu. EECON2, Applicable Devices = 2525. EECON2, Applicable Devices = 2620. EECON2, Applicable Devices = 4525. EECON2, Applicable Devices = 4620. EECON2, Power-on Reset, Brown-out Reset = 0000. EECON2, Power-on Reset, Brown-out Reset = 0000. EECON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EECON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. EECON2, Wake-up via WDT or Interrupt = 0000. EECON2, Wake-up via WDT or Interrupt = 0000. EECON1, Applicable Devices = 2525. EECON1, Applicable Devices = 2620. EECON1, Applicable Devices = 4525. EECON1, Applicable Devices = 4620. EECON1, Power-on Reset, Brown-out Reset = xx-0. EECON1, Power-on Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = x000. EECON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu-0. EECON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = u000. EECON1, Wake-up via WDT or Interrupt = uu-0. EECON1, Wake-up via WDT or Interrupt = u000\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nIPR2, Applicable Devices = 2525. IPR2, Applicable Devices = 2620. IPR2, Applicable Devices = 4525. IPR2, Applicable Devices = 4620. IPR2, Power-on Reset, Brown-out Reset = 11-1 1111. IPR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-1 1111. IPR2, Wake-up via WDT or Interrupt = uu-u. IPR2, Wake-up via WDT or Interrupt = uuuu. PIR2, Applicable Devices = 2525. PIR2, Applicable Devices = 2620. PIR2, Applicable Devices = 4525. PIR2, Applicable Devices = 4620. PIR2, Power-on Reset, Brown-out Reset = 00-0 0000. PIR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. PIR2, Wake-up via WDT or Interrupt = uu-u. PIR2, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu (1). PIE2, Applicable Devices = 2525. PIE2, Applicable Devices = 2620. PIE2, Applicable Devices = 4525. PIE2, Applicable Devices = 4620. PIE2, Power-on Reset, Brown-out Reset = 00-0 0000. PIE2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. PIE2, Wake-up via WDT or Interrupt = uu-u. PIE2, Wake-up via WDT or Interrupt = uuuu. IPR1, Applicable Devices = 2525. IPR1, Applicable Devices = 2620. IPR1, Applicable Devices = 4525. IPR1, Applicable Devices = 4620. IPR1, Power-on Reset, Brown-out Reset = 1111 1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. IPR1, Wake-up via WDT or Interrupt = uuuu. IPR1, Wake-up via WDT or Interrupt = uuuu.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nIPR1, Applicable Devices = 2525. IPR1, Applicable Devices = 2620. IPR1, Applicable Devices = 4525. IPR1, Applicable Devices = 4620. IPR1, Power-on Reset, Brown-out Reset = -111 1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -111 1111. IPR1, Wake-up via WDT or Interrupt = -uuu. IPR1, Wake-up via WDT or Interrupt = uuuu. PIR1, Applicable Devices = 2525. PIR1, Applicable Devices = 2620. PIR1, Applicable Devices = 4525. PIR1, Applicable Devices = 4620. PIR1, Power-on Reset, Brown-out Reset = 0000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIR1, Wake-up via WDT or Interrupt = uuuu. PIR1, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n(1). PIR1, Applicable Devices = 2525. PIR1, Applicable Devices = 2620. PIR1, Applicable Devices = 4525. PIR1, Applicable Devices = 4620. PIR1, Power-on Reset, Brown-out Reset = -000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. PIR1, Wake-up via WDT or Interrupt = -uuu. PIR1, Wake-up via WDT or Interrupt = uuuu (1). PIE1, Applicable Devices = 2525. PIE1, Applicable Devices = 2620. PIE1, Applicable Devices = 4525. PIE1, Applicable Devices = 4620. PIE1, Power-on Reset, Brown-out Reset = 0000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 2525. PIE1, Applicable Devices = 2620. PIE1, Applicable Devices = 4525. PIE1, Applicable Devices = 4620. PIE1, Power-on Reset, Brown-out Reset = -000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. PIE1, Wake-up via WDT or Interrupt = -uuu. PIE1, Wake-up via WDT or Interrupt = uuuu. OSCTUNE, Applicable Devices = 2525. OSCTUNE, Applicable Devices = 2620. OSCTUNE, Applicable Devices = 4525. OSCTUNE, Applicable Devices = 4620. OSCTUNE, Power-on Reset, Brown-out Reset = 00-0 0000. OSCTUNE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. OSCTUNE, Wake-up via WDT or Interrupt = uu-u. OSCTUNE, Wake-up via WDT or Interrupt = uuuu. TRISE, Applicable Devices = 2525.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTRISE, Applicable Devices = 2620. TRISE, Applicable Devices = 4525. TRISE, Applicable Devices = 4620. TRISE, Power-on Reset, Brown-out Reset = 0000 -111. TRISE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 -111. TRISE, Wake-up via WDT or Interrupt = uuuu. TRISE, Wake-up via WDT or Interrupt = -uuu. TRISD, Applicable Devices = 2525. TRISD, Applicable Devices = 2620. TRISD, Applicable Devices = 4525. TRISD, Applicable Devices = 4620. TRISD, Power-on Reset, Brown-out Reset = 1111 1111. TRISD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISD, Wake-up via WDT or Interrupt = uuuu. TRISD, Wake-up via WDT or Interrupt = uuuu. TRISC, Applicable Devices = 2525. TRISC, Applicable Devices = 2620. TRISC, Applicable Devices = 4525.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTRISC, Applicable Devices = 4620. TRISC, Power-on Reset, Brown-out Reset = 1111 1111. TRISC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISC, Wake-up via WDT or Interrupt = uuuu. TRISC, Wake-up via WDT or Interrupt = uuuu. TRISB, Applicable Devices = 2525. TRISB, Applicable Devices = 2620. TRISB, Applicable Devices = 4525. TRISB, Applicable Devices = 4620. TRISB, Power-on Reset, Brown-out Reset = 1111 1111. TRISB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISB, Wake-up via WDT or Interrupt = uuuu. TRISB, Wake-up via WDT or Interrupt = uuuu. TRISA (5), Applicable Devices = 2525. TRISA (5), Applicable Devices = 2620. TRISA (5), Applicable Devices = 4525. TRISA (5), Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n4620. TRISA (5), Power-on Reset, Brown-out Reset = 1111 1111 (5). TRISA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111 (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu. TRISA (5), Wake-up via WDT or Interrupt = uuuu (5). LATE, Applicable Devices = 2525. LATE, Applicable Devices = 2620. LATE, Applicable Devices = 4525. LATE, Applicable Devices = 4620. LATE, Power-on Reset, Brown-out Reset = ---- -xxx. LATE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- -uuu. LATE, Wake-up via WDT or Interrupt = ----. LATE, Wake-up via WDT or Interrupt = -uuu. LATD, Applicable Devices = 2525. LATD, Applicable Devices = 2620. LATD, Applicable Devices = 4525.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nLATD, Applicable Devices = 4620. LATD, Power-on Reset, Brown-out Reset = xxxx xxxx. LATD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATD, Wake-up via WDT or Interrupt = uuuu. LATD, Wake-up via WDT or Interrupt = uuuu. LATB, Applicable Devices = 2525. LATB, Applicable Devices = 2620. LATB, Applicable Devices = 4525. LATB, Applicable Devices = 4620. LATB, Power-on Reset, Brown-out Reset = xxxx xxxx. LATB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATB, Wake-up via WDT or Interrupt = uuuu. LATB, Wake-up via WDT or Interrupt = uuuu. (5), Applicable Devices = 2525. (5), Applicable Devices = 2620. (5),",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 4525. (5), Applicable Devices = 4620. (5), Power-on Reset, Brown-out Reset = xxxx xxxx (5). (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu (5). (5), Wake-up via WDT or Interrupt = uuuu. (5), Wake-up via WDT or Interrupt = uuuu (5). LATA PORTE, Applicable Devices = 2525. LATA PORTE, Applicable Devices = 2620. LATA PORTE, Applicable Devices = 4525. LATA PORTE, Applicable Devices = . LATA PORTE, Power-on Reset, Brown-out Reset = ---- xxxx. LATA PORTE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- uuuu. LATA PORTE, Wake-up via WDT or Interrupt = ----. LATA PORTE, Wake-up via WDT or Interrupt = uuuu. , Applicable Devices = . , Applicable Devices =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n. , Applicable Devices = . , Applicable Devices = 4620. , Power-on Reset, Brown-out Reset = ---- x---. , MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- u---. , Wake-up via WDT or Interrupt = . , Wake-up via WDT or Interrupt = u---. , Applicable Devices = 2525. , Applicable Devices = 2620. , Applicable Devices = 4525. , Applicable Devices = 4620. , Power-on Reset, Brown-out Reset = . , MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . , Wake-up via WDT or Interrupt = ----. , Wake-up via WDT or Interrupt = . PORTD, Applicable Devices = 2525. PORTD, Applicable Devices = 2620. PORTD, Applicable Devices = 4525. PORTD, Applicable Devices = 4620. PORTD, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu. PORTC, Applicable Devices = 2525. PORTC, Applicable Devices = 2620. PORTC, Applicable Devices = 4525. PORTC, Applicable Devices = 4620. PORTC, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu. , Applicable Devices = . , Applicable Devices = 2620. , Applicable Devices = . , Applicable Devices = . , Power-on Reset, Brown-out Reset = . , MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . , Wake-up via WDT or Interrupt = . , Wake-up via WDT or Interrupt = . PORTB, Applicable Devices = 2525.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPORTB, Applicable Devices = . PORTB, Applicable Devices = 4525. PORTB, Applicable Devices = 4620. PORTB, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu\n- Legend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "5.0 MEMORY ORGANIZATION\nThere are three types of memory in PIC18 enhanced microcontroller devices:\n\u00b7 Program Memory\n\u00b7 Data RAM\n\u00b7 Data EEPROM\nAs Harvard architecture devices, the data and program memories  use  separate  busses;  this  allows  for  concurrent access of the two memory spaces. The data EEPROM, for practical purposes, can be regarded as a peripheral device, since it is addressed and accessed through a set of control registers.",
    "5.1 Program Memory Organization\nPIC18  microcontrollers  implement  a  21-bit  program counter,  which  is  capable  of  addressing  a  2-Mbyte program memory space. Accessing a location between the  upper  boundary  of  the  physically  implemented memory and the 2-Mbyte address will return all ' 0 's (a NOP instruction).\nThe PIC18F2525 and PIC18F4525 each have 48 Kbytes of Flash memory and can store up to 24,576 single-word instructions. The PIC18F2620 and PIC18F4620  each  have  64 Kbytes  of  Flash  memory and can store up to 32,768 single-word instructions.\nAdditional detailed information on the operation of the Flash  program  memory  is  provided  in Section 7.0 'Flash Program Memory' . Data EEPROM is discussed separately in Section 6.0 'Data EEPROM Memory' .\nPIC18 devices have two interrupt vectors. The Reset vector  address  is  at  0000h  and  the  interrupt  vector addresses are at 0008h and 0018h.\nThe  program  memory  maps  for  PIC18FX525  and PIC18FX620 devices are shown in Figure 5-1.",
    "5.1.1 PROGRAM COUNTER\nThe Program Counter (PC) specifies the address of the instruction to fetch for execution. The PC is 21 bits wide and is contained in three separate 8-bit registers. The low byte, known as the PCL register, is both readable and writable. The high byte, or PCH register, contains the PC<15:8> bits; it is not directly readable or writable. Updates to the PCH register are performed through the PCLATH register. The upper byte is called PCU. This register  contains  the  PC<20:16>  bits;  it  is  also  not directly  readable  or  writable.  Updates  to  the  PCU register are performed through the PCLATU register.\nThe stack operates as a 31-word by 21-bit RAM and a 5-bit Stack Pointer, STKPTR. The stack space is not part of either program or data space. The Stack Pointer is readable and writable and the address on the top of the stack is readable and writable through the top-ofstack Special File Registers. Data can also be pushed to, or popped from the stack, using these registers.",
    "5.1.1 PROGRAM COUNTER\nThe contents of PCLATH and PCLATU are transferred to  the  program  counter  by  any  operation  that  writes PCL.  Similarly,  the  upper  two  bytes  of  the  program counter are transferred to PCLATH and PCLATU by an operation that reads PCL. This is useful for computed offsets  to  the  PC  (see Section 5.1.4.1  'Computed GOTO' ).\nThe PC addresses bytes in the program memory. To prevent the PC from becoming misaligned with word instructions, the Least Significant bit of PCL is fixed to a  value  of  ' 0 '.  The  PC  increments  by  2  to  address sequential instructions in the program memory.\nThe CALL , RCALL , GOTO and program branch instructions write to the program counter directly. For these instructions, the contents of PCLATH  and PCLATU are not transferred to the program counter.",
    "5.1.2 RETURN ADDRESS STACK\nThe return address stack allows any combination of up to 31 program calls and interrupts to occur. The PC is pushed onto the stack when a CALL or RCALL instruction is executed or an interrupt is Acknowledged. The PC value is pulled off the stack on a RETURN, RETLW or a RETFIE instruction. PCLATU and PCLATH are not affected by any of the RETURN or CALL instructions.\nA CALL type instruction causes a push onto the stack; the Stack Pointer is first incremented and the location pointed  to  by  the  Stack  Pointer  is  written  with  the contents of the PC (already pointing to the instruction following the CALL ). A RETURN type instruction causes a  pop  from  the  stack;  the  contents  of  the  location pointed to by the STKPTR are transferred to the PC and then the Stack Pointer is decremented.\nThe  Stack  Pointer  is  initialized  to  ' 00000 ' after  all Resets. There is no RAM associated with the location corresponding to a Stack Pointer value of ' 00000 '; this is only a Reset value. Status bits indicate if the stack is full or has overflowed or has underflowed.",
    "5.1.2.1 Top-of-Stack Access\nOnly  the  top  of  the  return  address  stack  (TOS)  is readable and writable. A set of three registers, TOSU:TOSH:TOSL,  hold  the  contents  of  the  stack location pointed to by the STKPTR register (Figure 5-2). This  allows  users  to  implement  a  software  stack  if necessary.  After  a CALL,  RCALL or  interrupt,  the software  can  read  the  pushed  value  by  reading  the TOSU:TOSH:TOSL  registers.  These  values  can  be placed on a user-defined software stack. At return time, the software can return these values to TOSU:TOSH:TOSL and do a return.\nThe user must disable the global interrupt enable bits while accessing the stack to prevent inadvertent stack corruption.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe STKPTR register (Register 5-1) contains the Stack Pointer value, the STKFUL (Stack Full) status bit and the STKUNF (Stack Underflow) status bits. The value of  the  Stack Pointer can be 0 through 31. The Stack Pointer increments before values are pushed onto the stack and decrements after values are popped off the stack. On Reset, the Stack Pointer value will be zero. The user may read and write the Stack Pointer value. This  feature  can  be  used  by  a  Real-Time  Operating System (RTOS) for return stack maintenance.\nAfter the PC is pushed onto the stack 31 times (without popping any values off the stack), the STKFUL bit is set.  The  STKFUL  bit  is  cleared  by  software  or  by  a POR.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe action that takes place when the stack becomes full depends  on  the  state  of  the  STVREN  (Stack Overflow  Reset  Enable)  Configuration  bit.  (Refer  to Section 23.1 'Configuration Bits' for a description of the device  Configuration  bits.) If STVREN  is  set (default),  the  31st push will  push the  (PC  + 2)  value onto  the  stack,  set  the  STKFUL  bit  and  reset  the device. The STKFUL bit will remain set and the Stack Pointer will be set to zero.\nWhen  the  stack  has  been  popped  enough  times  to unload the stack, the next pop will return a value of zero to  the  PC  and sets the STKUNF bit, while the Stack Pointer remains at zero. The STKUNF bit will remain set until cleared by software or until a POR occurs.\nNote:\nReturning a value of zero to the PC on an underflow has the effect of vectoring the program  to  the  Reset  vector,  where  the stack conditions can be verified and appropriate actions can be taken. This is not the same as a Reset, as the contents of the SFRs are not affected.",
    "5.1.2.3 PUSH and POP Instructions\nSince  the  Top-of-Stack  is  readable  and  writable,  the ability to push values onto the stack and pull values off the stack without disturbing normal program execution is a desirable  feature. The  PIC18  instruction  set includes  two  instructions, PUSH and POP ,  that  permit the  TOS  to  be  manipulated  under  software  control. TOSU, TOSH and TOSL can be modified to place data or a return address on the stack.\nIf STVREN is cleared, the STKFUL bit will be set on the 31st push and the Stack Pointer will increment to 31. Any additional pushes will not overwrite the 31st push and STKPTR will remain at 31.\nThe PUSH instruction places the current PC value onto the stack. This increments the Stack Pointer and loads the current PC value onto the stack.\nThe POP instruction discards the current TOS by decrementing the Stack Pointer. The previous value pushed onto the stack then becomes the TOS value.",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nSTKFUL (1), R/C-0 = STKUNF (1). STKFUL (1), U-0 = -. STKFUL (1), R/W-0 = SP4. STKFUL (1), R/W-0 = SP3. STKFUL (1), R/W-0 = SP2. STKFUL (1), R/W-0 = SP1. STKFUL (1), R/W-0 = SP0. bit 7 bit 0, R/C-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nLegend:, 1 = C = Clearable only bit. Legend:, 2 = C = Clearable only bit. Legend:, 3 = C = Clearable only bit. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nSTKFUL:\nStack Full Flag bit (1)\n1 = Stack became full or overflowed\n0 = Stack has not become full or overflowed\nbit 6\nSTKUNF:\nStack Underflow Flag bit (1)\n1 = Stack underflow occurred\n0 = Stack underflow did not occur\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4-0\nSP4:SP0: Stack Pointer Location bits",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nNote 1: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "5.1.2.4 Stack Full and Underflow Resets\nDevice Resets on stack overflow and stack underflow conditions are enabled by setting the STVREN bit in Configuration Register 4L. When STVREN is set, a full or underflow  will set the appropriate  STKFUL  or STKUNF bit  and  then  cause  a  device  Reset.  When STVREN is cleared, a full or underflow condition will set the appropriate STKFUL or STKUNF bit but not cause a  device  Reset.  The  STKFUL  or  STKUNF  bits  are cleared by the user software or a Power-on Reset.",
    "5.1.3 FAST REGISTER STACK\nA  Fast  Register  Stack  is  provided  for  the  STATUS, WREG and BSR registers, to provide a 'fast  return' option for interrupts. The stack for each register is only one level deep and is neither readable nor writable. It is loaded with the current value of the corresponding register  when  the  processor  vectors  for  an  interrupt.  All interrupt sources will push values into the stack registers. The values in the registers are then loaded back into  their  associated  registers  if  the RETFIE, FAST instruction is used to return from the interrupt.\nIf both low and high-priority interrupts are enabled, the stack registers cannot be used reliably to return from low-priority interrupts. If a high-priority interrupt occurs while servicing a low-priority interrupt, the stack register  values  stored  by  the  low-priority  interrupt  will  be overwritten. In these cases, users must save the key registers in software during a low-priority interrupt.",
    "5.1.3 FAST REGISTER STACK\nIf interrupt priority is not used, all interrupts may use the Fast  Register  Stack  for  returns  from  interrupt.  If  no interrupts  are  used,  the  Fast  Register  Stack  can  be used to restore the STATUS, WREG and BSR registers at the end of a subroutine call. To use the Fast Register Stack  for  a  subroutine  call,  a CALL label , FAST instruction  must  be  executed  to  save  the  STATUS, WREG and BSR registers to the Fast Register Stack. A RETURN, FAST instruction is then executed to restore these registers from the Fast Register Stack.\nExample 5-1 shows a source code example that uses the  Fast  Register  Stack  during  a  subroutine  call  and return.",
    "EXAMPLE 5-1: FAST REGISTER STACK CODE EXAMPLE\nCALL, 1 = SUB1, FAST. CALL, 2 = ;STATUS, WREG, BSR ;SAVED IN FAST REGISTER ;STACK. SUB1, 1 = \u2022 \u2022 RETURN, FAST ;RESTORE ;IN FAST. SUB1, 2 = ",
    "5.1.4 LOOK-UP TABLES IN PROGRAM MEMORY\nThere may be programming situations that require the creation of data structures, or look-up tables, in program memory. For PIC18 devices, look-up tables can be implemented in two ways:\n\u00b7 Computed GOTO\n\u00b7 Table Reads",
    "5.1.4.1 Computed GOTO\nA computed GOTO is accomplished by adding an offset to  the  program  counter.  An  example  is  shown  in Example 5-2.\nA look-up table can be formed  with an ADDWF  PCL instruction and a group of RETLW nn instructions. The W register is loaded with an offset into the table before executing a call to that table. The first instruction of the called routine is the ADDWF PCL instruction. The next instruction  executed  will  be  one  of  the RETLW nn instructions  that  returns  the  value  ' nn '  to  the  calling function.\nThe offset  value  (in  WREG)  specifies  the  number  of bytes  that  the  program  counter  should  advance  and should be multiples of 2 (LSb = 0 ).\nIn  this  method,  only  one  data  byte  may  be  stored  in each  instruction  location  and  room  on  the  return address stack is required.",
    "EXAMPLE 5-2: COMPUTED GOTO USING AN OFFSET VALUE\n, 1 = MOVF CALL. , 2 = OFFSET, TABLE. ORG, 1 = nn00h. ORG, 2 = . TABLE, 1 = ADDWF. TABLE, 2 = PCL. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = .. , 2 = . , 1 = .. , 2 = . , 1 = .. , 2 = ",
    "5.1.4.2 Table Reads and Table Writes\nA  better  method  of  storing  data  in  program  memory allows two bytes of data to be stored in each instruction location.\nLook-up  table  data  may  be  stored  two  bytes  per program  word  by  using  table  reads  and  writes.  The Table  Pointer  (TBLPTR)  register  specifies  the  byte address and the Table Latch (TABLAT) register contains the data that is read from or written to program memory.  Data  is  transferred to or from program memory one byte at a time.\nTable  read  and  table  write  operations  are  discussed further in Section 7.1 'Table Reads  and  Table Writes' .",
    "5.2.1 CLOCKING SCHEME\nThe  microcontroller clock input, whether  from  an internal or external source, is internally divided by four to  generate  four  non-overlapping  quadrature  clocks (Q1, Q2, Q3 and Q4). Internally, the program counter is incremented  on  every  Q1;  the  instruction  is  fetched from the program  memory  and  latched into the instruction register during Q4. The instruction is decoded and executed during the following Q1 through Q4.  The  clocks  and  instruction  execution  flow  are shown in Figure 5-3.\nAn  'Instruction  Cycle'  consists  of  four  Q  cycles:  Q1 through  Q4.  The  instruction  fetch  and  execute  are pipelined  in  such  a  manner  that  a  fetch  takes  one instruction  cycle,  while  the  decode  and  execute  take another  instruction  cycle.  However,  due  to  the  pipelining, each  instruction  effectively  executes  in  one cycle. If an instruction causes the program counter to change (e.g., GOTO ),  then  two  cycles are required to complete the instruction (Example 5-3).\nA fetch cycle begins with the Program Counter (PC) incrementing in Q1.",
    "5.2.1 CLOCKING SCHEME\nIn the execution cycle, the fetched instruction is latched into  the  Instruction  Register  (IR)  in  cycle  Q1.  This instruction  is  then  decoded  and  executed  during  the Q2, Q3 and Q4 cycles. Data memory is read during Q2 (operand  read)  and  written  during  Q4  (destination write).",
    "EXAMPLE 5-3: INSTRUCTION PIPELINE FLOW\nAll instructions are single cycle, except for any program branches. These take two cycles since the fetch instruction is 'flushed' from the pipeline while the new instruction is being fetched and then executed.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe program memory is addressed in bytes. Instructions are stored as two bytes or four bytes in program memory. The Least Significant Byte of an instruction word is always stored in a program memory location with an even address (LSb = 0 ). To maintain alignment with instruction boundaries, the PC increments in steps of 2 and the LSb will always read ' 0 ' (see Section 5.1.1 'Program Counter' ).\nFigure 5-4 shows an example of how instruction words are stored in the program memory.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe CALL and GOTO instructions  have  the  absolute program memory address embedded into the instruction.  Since  instructions  are  always  stored  on  word boundaries,  the  data  contained  in  the  instruction  is  a word address. The word address is written to PC<20:1>, which  accesses  the  desired  byte  address  in  program memory.  Instruction  #2  in  Figure 5-4  shows  how  the instruction GOTO  0006h is  encoded  in  the  program memory. Program branch instructions, which encode a relative address offset, operate in the same manner. The offset value stored in a branch instruction represents the number of single-word instructions that the PC will be offset  by. Section 24.0  'Instruction  Set  Summary' provides further details of the instruction set.",
    "FIGURE 5-4: INSTRUCTIONS IN PROGRAM MEMORY\nProgram Memory\nByte Locations\n\u2192\nInstruction 1:\nInstruction 2:\nMOVLW\n055h\nGOTO\n0006h\nInstruction 3:\nLSB = 1, 1 = LSB = 0. LSB = 1, 2 = Word Address \u2193. , 1 = . , 2 = 000000h. , 1 = . , 2 = 000002h. , 1 = . , 2 = 000004h. , 1 = . , 2 = 000006h. 0Fh, 1 = 55h. 0Fh, 2 = 000008h. EFh, 1 = 03h. EFh, 2 = 00000Ah. F0h, 1 = 00h. F0h, 2 = 00000Ch. C1h, 1 = 23h. C1h, 2 = 00000Eh. F4h, 1 = 56h. F4h, 2 = 000010h. , 1 = . , 2 = 000012h. , 1 = . , 2 = 000014h\nMOVFF\n123h, 456h",
    "5.2.4 TWO-WORD INSTRUCTIONS\nThe standard PIC18 instruction set has four two-word instructions: CALL , MOVFF , GOTO and LSFR . In  all cases, the second word of the instructions always has ' 1111 ' as its four Most Significant bits; the other 12 bits are literal data, usually a data memory address.\nthe instruction sequence. If the first word is skipped for some reason and the second word is executed by itself, a NOP is executed instead. This is necessary for cases when the two-word instruction is preceded by a conditional  instruction  that  changes  the  PC.  Example 5-4 shows how this works.\nThe use of ' 1111 ' in the 4 MSbs of an instruction specifies a special form of NOP . If the instruction is executed in proper sequence - immediately after the first word the data in the second word is accessed and used by",
    "Note:\nSee Section 5.6 'PIC18 Instruction Execution  and  the  Extended  Instruction Set' for information  on  two-word instructions in the extended instruction set.",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:. = ; is RAM location 0?. 0110, CASE 1:. = . 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010. 1100, CASE 1:.Object Code = 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1,. 1100, CASE 1:.Source Code = REG2. 1100, CASE 1:. = ; No, skip this word. 1100, CASE 1:. = . 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101. 1111, CASE 1:.Object Code = 0110. 1111, CASE 1:.Source Code = .",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:. = ; Execute this word as a NOP. 1111, CASE 1:. = . 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = . 0010, CASE 1:. = ; continue code. 0010, CASE 1:. = . CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:. = CASE",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n2:. CASE 2:, CASE 1:. = CASE 2:. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:. = . Object Code, CASE 1:. = . 0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:. = ; is RAM location 0?. 0110, CASE 1:. = . 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010. 1100, CASE 1:.Object Code =",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1,. 1100, CASE 1:.Source Code = REG2. 1100, CASE 1:. = ; Yes, execute this word. 1100, CASE 1:. = . 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101. 1111, CASE 1:.Object Code = 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:. = ; 2nd word of instruction. 1111, CASE 1:. = . 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = ;. 0010, CASE 1:. = continue code.",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0010, CASE 1:. = ",
    "5.3.1 BANK SELECT REGISTER (BSR)\nNote:\nThe  operation  of  some  aspects  of  data memory  are  changed  when  the  PIC18 extended instruction  set  is  enabled.  See Section 5.5 'Data Memory and the Extended Instruction Set' for more information.\nThe data memory in PIC18 devices is implemented as static RAM. Each register in the data memory has a 12-bit  address,  allowing  up  to  4096  bytes  of  data memory. The memory space is divided into as many as 16 banks  that  contain  256  bytes  each;  PIC18F2525/ 2620/4525/4620  devices  implement  all 16 banks. Figure 5-5 shows the data memory organization for the PIC18F2525/2620/4525/4620 devices.\nThe data memory contains Special Function Registers (SFRs) and General Purpose Registers (GPRs). The SFRs are used for control and status of the controller and peripheral functions, while GPRs are used for data storage and scratchpad operations in the user's application. Any read of an unimplemented location will read as ' 0 's.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nThe instruction  set  and  architecture  allow  operations across  all  banks.  The  entire  data  memory  may  be accessed  by  Direct,  Indirect  or  Indexed  Addressing modes. Addressing modes are discussed later in this subsection.\nTo  ensure  that  commonly  used  registers  (SFRs  and select GPRs) can be accessed in a single cycle, PIC18 devices implement an Access Bank. This is a 256-byte memory space that provides fast access to SFRs and the  lower  portion  of  GPR  Bank  0  without  using  the BSR. Section 5.3.2 'Access Bank' provides a detailed description of the Access RAM.\nLarge  areas  of  data  memory  require  an  efficient addressing  scheme  to  make  rapid  access  to  any address  possible.  Ideally,  this  means  that  an  entire address does not need to be provided for each read or write  operation.  For  PIC18  devices,  this  is  accomplished with a RAM banking scheme. This divides the memory space into 16 contiguous banks of 256 bytes. Depending  on  the  instruction,  each  location  can  be addressed directly by its full 12-bit address, or an 8-bit low-order address and a 4-bit Bank Pointer.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nMost instructions in the PIC18 instruction set make use of the Bank Pointer, known as the Bank Select Register (BSR). This SFR holds the four Most Significant bits of a location's address; the instruction itself includes the 8 Least Significant bits. Only the four lower bits of the BSR are implemented (BSR3:BSR0). The upper four bits are unused; they will always read ' 0 ' and cannot be written to. The BSR can be loaded directly by using the MOVLB instruction.\nThe  value  of  the  BSR  indicates  the  bank  in  data memory; the 8 bits in the instruction show the location in the bank and can be thought of as an offset from the bank's lower boundary. The relationship between the BSR's value and the bank division in data memory is shown in Figure 5-6.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nSince up to 16 registers may share the same low-order address, the user must always be careful to ensure that the proper bank is selected before performing a data read  or  write.  For  example,  writing  what  should  be program data to an 8-bit address of F9h, while the BSR is 0Fh, will end up resetting the program counter.\nWhile any bank can be selected, only those banks that are  actually  implemented  can  be  read  or  written  to. Writes  to  unimplemented  banks  are  ignored,  while reads from unimplemented banks will return ' 0 's. Even so, the STATUS register will still be affected as if the operation  was  successful.  The  data  memory  map  in Figure 5-5 indicates which banks are implemented.\nIn  the  core  PIC18  instruction  set,  only  the MOVFF instruction  fully  specifies  the  12-bit  address  of  the source and target registers. This instruction ignores the BSR completely when it executes. All other instructions include only the low-order address as an operand and must use either the BSR or the Access Bank to locate their target registers.",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2525/2620/4525/4620 DEVICES\n= 0000,  = . = 0000,  = 00h. = 0000, Data Memory Map = Access RAM. = 0000, Data Memory Map = 000h. = 0000, When a = = The BSR is ignored and the Access Bank is used.. = 0000,  = . ,  = Bank 0. ,  = FFh 00h. , Data Memory Map = GPR. , Data Memory Map = 080h 07Fh 100h 0FFh. , When a = = The first general (from. ,  = . = 0010,  = Bank 1 Bank. = 0010,  = FFh 00h. = 0010, Data Memory Map = GPR. = 0010, Data Memory Map = 1FFh 200h. = 0010, When a = = The second 128 bytes are Special Function Registers (from Bank 15).. = 0010,  = = 0001. ,  = Bank 3. ,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2525/2620/4525/4620 DEVICES\n= FFh 00h. , Data Memory Map = GPR. , Data Memory Map = 2FFh 300h. , When a = = When a = 1 : The BSR specifies the Bank. ,  = = 0011. ,  = Bank 4. ,  = FFh 00h. , Data Memory Map = . , Data Memory Map = 3FFh 400h. , When a = = used by the instruction.. ,  = = 0100. ,  = . ,  = FFh 00h. , Data Memory Map = GPR. , Data Memory Map = 4FFh 500h. , When a = = . ,  = = 0101. ,  = Bank. ,  = FFh 00h. , Data Memory Map = GPR. , Data Memory Map = 5FFh 600h. , When a = = . ,  = = 0110. ,  = Bank 6 Bank. ,  = FFh 00h. , Data Memory Map = GPR. , Data Memory Map = 6FFh 700h. , When a = = Access Access. ,  = = 0111. 1000,  = Bank 8. 1000,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2525/2620/4525/4620 DEVICES\n= FFh 00h. 1000, Data Memory Map = GPR. 1000, Data Memory Map = 7FFh 800h. 1000, When a = = Access (SFRs). 1000,  = =. 1001,  = Bank. 1001,  = FFh 00h. 1001, Data Memory Map = . 1001, Data Memory Map = 8FFh 900h. 1001, When a = = . 1001,  = =. 1010,  = Bank 10. 1010,  = FFh 00h. 1010, Data Memory Map = GPR. 1010, Data Memory Map = 9FFh A00h. 1010, When a = = . 1010,  = =. ,  = Bank 11. ,  = FFh 00h. , Data Memory Map = GPR. , Data Memory Map = AFFh B00h. , When a = = . ,  = = 1011. 1100,  = Bank 12. 1100,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2525/2620/4525/4620 DEVICES\n= FFh 00h. 1100, Data Memory Map = GPR. 1100, Data Memory Map = BFFh C00h. 1100, When a = = . 1100,  = =. 1101,  = Bank. 1101,  = FFh 00h. 1101, Data Memory Map = GPR. 1101, Data Memory Map = CFFh D00h. 1101, When a = = . 1101,  = =. = 1110,  = Bank 14. = 1110,  = FFh 00h. = 1110, Data Memory Map = GPR. = 1110, Data Memory Map = DFFh E00h. = 1110, When a = = . = 1110,  = . = 1111,  = Bank. = 1111,  = FFh 00h FFh. = 1111, Data Memory Map = SFR GPR. = 1111, Data Memory Map = F80h F7Fh F00h EFFh. = 1111, When a = = . = 1111,  = ",
    "FIGURE 5-6: USE OF THE BANK SELECT REGISTER (DIRECT ADDRESSING)\nNote 1: The Access RAM bit of the instruction can be used to force an override of the selected bank (BSR<3:0>) to the registers of the Access Bank.\n2: The MOVFF instruction embeds the entire 12-bit address in the instruction.",
    "5.3.2 ACCESS BANK\nWhile  the  use  of  the  BSR  with  an  embedded  8-bit address  allows  users  to  address  the  entire  range  of data memory, it also means that the user must always ensure  that  the  correct  bank  is  selected.  Otherwise, data may be read from or written to the wrong location. This can be disastrous if a GPR is the intended target of  an  operation,  but  an  SFR  is  written  to  instead. Verifying  and/or  changing  the  BSR  for  each  read  or write to data memory can become very inefficient.\nhowever,  the  instruction  is  forced  to  use  the  Access Bank  address  map;  the  current  value  of  the  BSR  is ignored entirely.",
    "5.3.2 ACCESS BANK\nTo streamline access for the most commonly used data memory locations, the data memory is configured with an  Access  Bank,  which  allows  users  to  access  a mapped block of memory without specifying  a  BSR. The  Access  Bank  consists  of  the  first  128  bytes  of memory (00h-7Fh) in Bank 0 and the last 128 bytes of memory (80h-FFh) in Block 15. The lower half is known as the 'Access RAM' and is composed of GPRs. This upper  half  is also where  the  device's  SFRs  are mapped. These two areas are mapped contiguously in the  Access  Bank  and  can  be  addressed  in  a  linear fashion by an 8-bit address (Figure 5-5).\nThe Access Bank is used by core PIC18 instructions that include the Access RAM bit (the 'a' parameter in the instruction). When 'a' is equal to ' 1 ', the instruction uses  the  BSR  and  the  8-bit  address  included  in  the opcode for the data memory address. When 'a' is ' 0 ',",
    "5.3.2 ACCESS BANK\nUsing this 'forced' addressing allows the instruction to operate on a data address in a single cycle, without updating the BSR first. For 8-bit addresses of 80h and above, this means that users can evaluate and operate on SFRs more efficiently. The Access RAM below 80h is a good place for data values that the user might need to  access  rapidly,  such  as  immediate  computational results  or  common  program  variables.  Access  RAM also allows for faster and more code efficient context saving and switching of variables.\nThe mapping of the Access Bank is slightly different when the extended instruction set is enabled (XINST Configuration bit = 1 ). This is discussed in more detail in Section 5.5.3  'Mapping  the  Access  Bank  in Indexed Literal Offset Addressing Mode' .",
    "5.3.3 GENERAL PURPOSE REGISTER FILE\nPIC18 devices may have banked memory in the GPR area. This is data RAM, which is available for use by all instructions. GPRs  start  at  the  bottom  of  Bank  0 (address 000h) and grow upwards towards the bottom of the SFR area. GPRs are not initialized by a Power-on Reset and are unchanged on all other Resets.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nThe Special Function  Registers (SFRs) are registers used by the CPU and peripheral modules for controlling the desired operation of the device. These registers are implemented as static RAM. SFRs start at the top of data memory (FFFh) and extend downward to occupy the top half of Bank 15 (F80h to FFFh). A list of these registers is given in Table 5-1 and Table 5-2.\nThe SFRs can be classified into two sets: those associated with  the  'core'  device  functionality  (ALU,  Resets and  interrupts)  and  those  related  to  the  peripheral functions. The reset and interrupt registers are described in their respective chapters, while the ALU's STATUS  register  is  described  later  in  this  section. Registers related to the operation of a peripheral feature are described in the chapter for that peripheral.\nThe SFRs are typically distributed among the peripherals whose functions they control. Unused SFR locations are unimplemented and read as ' 0 's.\n\nTABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2525/2620/4525/4620 DEVICES",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFFFh, Name = TOSU. FFFh, Address = FDFh. FFFh, Name = INDF2 (1). FFEh, Name = TOSH. FFEh, Address = FDEh. FFEh, Name = POSTINC2 (1). FFDh, Name = TOSL. FFDh, Address = FDDh. FFDh, Name = POSTDEC2 (1). FFCh, Name = STKPTR. FFCh, Address = FDCh. FFCh, Name = PREINC2 (1). FFBh, Name = PCLATU. FFBh, Address = FDBh. FFBh, Name = PLUSW2 (1). FFAh, Name = PCLATH. FFAh, Address = FDAh. FFAh, Name = FSR2H. FF9h, Name = PCL. FF9h, Address = FD9h. FF9h, Name = FSR2L. FF8h, Name = TBLPTRU. FF8h, Address = FD8h. FF8h, Name = STATUS. FF7h, Name =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nTBLPTRH. FF7h, Address = FD7h. FF7h, Name = TMR0H. FF6h, Name = TBLPTRL. FF6h, Address = FD6h. FF6h, Name = TMR0L. FF5h, Name = TABLAT. FF5h, Address = FD5h. FF5h, Name = T0CON. FF4h, Name = PRODH. FF4h, Address = FD4h. FF4h, Name = - (2). FF3h, Name = PRODL. FF3h, Address = FD3h. FF3h, Name = OSCCON. FF2h, Name = INTCON. FF2h, Address = FD2h. FF2h, Name = HLVDCON. FF1h, Name = INTCON2. FF1h, Address = FD1h. FF1h, Name = WDTCON. FF0h, Name = INTCON3. FF0h, Address = FD0h. FF0h, Name = RCON.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFEFh, Name = INDF0 (1). FEFh, Address = FCFh. FEFh, Name = TMR1H. FEEh, Name = POSTINC0 (1). FEEh, Address = FCEh. FEEh, Name = TMR1L. FEDh, Name = POSTDEC0 (1). FEDh, Address = FCDh. FEDh, Name = T1CON. FECh, Name = PREINC0 (1). FECh, Address = FCCh. FECh, Name = TMR2. FEBh, Name = PLUSW0 (1). FEBh, Address = FCBh. FEBh, Name = PR2. FEAh, Name = FSR0H. FEAh, Address = FCAh. FEAh, Name = T2CON. FE9h, Name = FSR0L. FE9h, Address = FC9h. FE9h, Name = SSPBUF. FE8h, Name = WREG. FE8h, Address = FC8h. FE8h, Name = SSPADD. FE7h,",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nName = INDF1 (1). FE7h, Address = FC7h. FE7h, Name = SSPSTAT. FE6h, Name = POSTINC1 (1). FE6h, Address = FC6h. FE6h, Name = SSPCON1. FE5h, Name = POSTDEC1 (1). FE5h, Address = FC5h. FE5h, Name = SSPCON2. FE4h, Name = PREINC1 (1). FE4h, Address = FC4h. FE4h, Name = ADRESH. FE3h, Name = PLUSW1 (1). FE3h, Address = FC3h. FE3h, Name = ADRESL. FE2h, Name = FSR1H. FE2h, Address = FC2h. FE2h, Name = ADCON0. FE1h, Name = FSR1L. FE1h, Address = FC1h. FE1h, Name = ADCON1. FE0h, Name = BSR. FE0h, Address = FC0h.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFE0h, Name = ADCON2",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFBFh, Name = CCPR1H. FBEh, Name = CCPR1L. FBDh, Name = CCP1CON. FBCh, Name = CCPR2H. FBBh, Name = CCPR2L. FBAh, Name = CCP2CON. FB9h, Name = - (2). FB8h, Name = BAUDCON. FB7h, Name = PWM1CON (3). FB6h, Name = ECCP1AS (3). FB5h, Name = CVRCON. FB4h, Name = CMCON. FB3h, Name = TMR3H. FB2h, Name = TMR3L. FB1h, Name = T3CON. FB0h, Name = SPBRGH. FAFh, Name = SPBRG. FAEh, Name = RCREG. FADh, Name = TXREG. FACh, Name = TXSTA. FABh, Name = RCSTA. FAAh, Name = EEADRH. FA9h, Name =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nEEADR. FA8h, Name = EEDATA. FA7h, Name = EECON2 (1). FA6h, Name = EECON1. FA5h, Name = - (2). FA4h, Name = - (2). FA3h, Name = - (2). FA2h, Name = IPR2. FA1h, Name = PIR2. FA0h, Name = PIE2",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nF9Fh, Name = IPR1. F9Eh, Name = PIR1. F9Dh, Name = PIE1. F9Ch, Name = - (2). F9Bh, Name = OSCTUNE. F9Ah, Name = - (2). F99h, Name = - (2). F98h, Name = - (2). F97h, Name = - (2). F96h, Name = TRISE (3). F95h, Name = TRISD (3). F94h, Name = TRISC. F93h, Name = TRISB. F92h, Name = TRISA. F91h, Name = - (2). F90h, Name = - (2). F8Fh, Name = - (2). F8Eh, Name = - (2). F8Dh, Name = LATE (3). F8Ch, Name = LATD (3). F8Bh, Name = LATC. F8Ah, Name = LATB. F89h,",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nName = LATA. F88h, Name = - (2). F87h, Name = - (2). F86h, Name = - (2). F85h, Name = - (2). F84h, Name = PORTE (3). F83h, Name = PORTD (3). F82h, Name = PORTC. F81h, Name = PORTB. F80h, Name = PORTA\nNote\n1: This is not a physical register.\n2: Unimplemented registers are read as ' 0 '.\n3: This register is not available on 28-pin devices.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nTOSU, Bit 7 = -. TOSU, Bit 6 = -. TOSU, Bit 5 = -. TOSU, Bit 4 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 3 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 2 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 1 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 0 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Value on POR, BOR = ---0. TOSU, Value on POR, BOR = 0000. TOSU, Details on page: = 49, 54. TOSH, Bit 7 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 6 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 5 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nTop-of-Stack High Byte (TOS<15:8>). TOSH, Bit 4 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 3 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 2 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 1 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 0 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Value on POR, BOR = 0000. TOSH, Value on POR, BOR = 0000. TOSH, Details on page: = 49, 54. TOSL, Bit 7 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 6 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 5 = Top-of-Stack Low Byte",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n(TOS<7:0>). TOSL, Bit 4 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 3 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 2 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 1 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 0 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Value on POR, BOR = 0000. TOSL, Value on POR, BOR = 0000. TOSL, Details on page: = 49, 54. STKPTR, Bit 7 = STKFUL (6). STKPTR, Bit 6 = STKUNF (6). STKPTR, Bit 5 = -. STKPTR, Bit 4 = SP4. STKPTR, Bit 3 = SP3. STKPTR, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n2 = SP2. STKPTR, Bit 1 = SP1. STKPTR, Bit 0 = SP0. STKPTR, Value on POR, BOR = 00-0. STKPTR, Value on POR, BOR = 0000. STKPTR, Details on page: = 49, 55. PCLATU, Bit 7 = -. PCLATU, Bit 6 = -. PCLATU, Bit 5 = -. PCLATU, Bit 4 = Holding Register for PC<20:16>. PCLATU, Bit 3 = Holding Register for PC<20:16>. PCLATU, Bit 2 = Holding Register for PC<20:16>. PCLATU, Bit 1 = Holding Register for PC<20:16>. PCLATU, Bit 0 = Holding Register for PC<20:16>. PCLATU, Value on POR, BOR = ---0. PCLATU, Value on POR, BOR = 0000. PCLATU, Details on page: = 49, 54. PCLATH, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n7 = Holding Register for PC<15:8>. PCLATH, Bit 6 = Holding Register for PC<15:8>. PCLATH, Bit 5 = Holding Register for PC<15:8>. PCLATH, Bit 4 = Holding Register for PC<15:8>. PCLATH, Bit 3 = Holding Register for PC<15:8>. PCLATH, Bit 2 = Holding Register for PC<15:8>. PCLATH, Bit 1 = Holding Register for PC<15:8>. PCLATH, Bit 0 = Holding Register for PC<15:8>. PCLATH, Value on POR, BOR = 0000. PCLATH, Value on POR, BOR = 0000. PCLATH, Details on page: = 49, 54. PCL, Bit 7 = PC Low Byte (PC<7:0>). PCL, Bit 6 = PC Low Byte (PC<7:0>). PCL, Bit 5 = PC Low Byte (PC<7:0>). PCL, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nPC Low Byte (PC<7:0>). PCL, Bit 3 = PC Low Byte (PC<7:0>). PCL, Bit 2 = PC Low Byte (PC<7:0>). PCL, Bit 1 = PC Low Byte (PC<7:0>). PCL, Bit 0 = PC Low Byte (PC<7:0>). PCL, Value on POR, BOR = 0000. PCL, Value on POR, BOR = 0000. PCL, Details on page: = 49, 54. TBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nTBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Value on POR, BOR = --00. TBLPTRU, Value on POR, BOR = 0000. TBLPTRU, Details on page: = 49, 82. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nHigh Byte (TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Details on page: = 49, 82. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nTBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Details on page: = 49, 82. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on POR, BOR = 0000. TABLAT, Value on POR, BOR =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n0000. TABLAT, Details on page: = 49, 82. PRODH, Bit 7 = Product Register High Byte. PRODH, Bit 6 = Product Register High Byte. PRODH, Bit 5 = Product Register High Byte. PRODH, Bit 4 = Product Register High Byte. PRODH, Bit 3 = Product Register High Byte. PRODH, Bit 2 = Product Register High Byte. PRODH, Bit 1 = Product Register High Byte. PRODH, Bit 0 = Product Register High Byte. PRODH, Value on POR, BOR = xxxx. PRODH, Value on POR, BOR = xxxx. PRODH, Details on page: = 49, 89. PRODL, Bit 7 = Product Register Low Byte. PRODL, Bit 6 = Product Register Low Byte. PRODL, Bit 5 = Product Register Low Byte. PRODL, Bit 4 = Product Register Low Byte. PRODL, Bit 3 = Product Register Low Byte. PRODL, Bit 2 = Product Register Low Byte. PRODL, Bit 1 = Product Register Low Byte. PRODL, Bit 0 = Product Register Low Byte. PRODL,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nValue on POR, BOR = xxxx. PRODL, Value on POR, BOR = xxxx. PRODL, Details on page: = 49, 89. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Details on page: = 49, 111. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n1 = -. INTCON2, Bit 0 = RBIP. INTCON2, Value on POR, BOR = 1111 -1-1. INTCON2, Value on POR, BOR = . INTCON2, Details on page: = 49, 112. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 11-0. INTCON3, Value on POR, BOR = 0-00. INTCON3, Details on page: = 49, 113. INDF0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 6 = Uses contents of FSR0 to address data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nmemory - value of FSR0 not changed (not a physical register). INDF0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Value on POR, BOR = N/A. INDF0, Value on POR,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nBOR = . INDF0, Details on page: = 49, 68. POSTINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nregister). POSTINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Value on POR, BOR = N/A. POSTINC0, Value on POR, BOR = . POSTINC0, Details on page: = 49, 68. POSTDEC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n4 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Value on POR, BOR = N/A. POSTDEC0, Value on POR, BOR = . POSTDEC0, Details on page: = 49, 68. PREINC0, Bit 7 = Uses contents of FSR0 to",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\naddress data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\na physical register). PREINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Value on POR, BOR = N/A. PREINC0, Value on POR, BOR = . PREINC0, Details on page: = 49, 68. PLUSW0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 6 = offset by W. PLUSW0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 3 = Uses contents of FSR0 to",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\naddress data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Value on POR, BOR = N/A. PLUSW0, Value on POR, BOR = . PLUSW0, Details on page: = 49, 68. FSR0H, Bit 7 = -. FSR0H, Bit 6 = -. FSR0H, Bit 5 = -. FSR0H, Bit 4 = -.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nFSR0H, Bit 3 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 2 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 1 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 0 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Value on POR, BOR = ---- 0000. FSR0H, Value on POR, BOR = 49,. FSR0H, Details on page: = 68. FSR0L, Bit 7 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 6 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 5 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 4 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 3 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 2 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 1 = Indirect Data Memory Address Pointer 0 Low",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nByte. FSR0L, Bit 0 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Value on POR, BOR = xxxx. FSR0L, Value on POR, BOR = xxxx. FSR0L, Details on page: = 49, 68. WREG, Bit 7 = Working Register. WREG, Bit 6 = Working Register. WREG, Bit 5 = Working Register. WREG, Bit 4 = Working Register. WREG, Bit 3 = Working Register. WREG, Bit 2 = Working Register. WREG, Bit 1 = Working Register. WREG, Bit 0 = Working Register. WREG, Value on POR, BOR = xxxx. WREG, Value on POR, BOR = xxxx. WREG, Details on page: = 49. INDF1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nregister). INDF1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Value on POR, BOR = N/A. INDF1, Value on POR, BOR = 49,. INDF1, Details on page:",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n= 68. POSTINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 1 = Uses contents of",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nFSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Value on POR, BOR = N/A. POSTINC1, Value on POR, BOR = . POSTINC1, Details on page: = 49, 68. POSTDEC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 4 = Uses contents of FSR1 to address data memory - value",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nof FSR1 post-decremented (not a physical register). POSTDEC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Value on POR, BOR = N/A. POSTDEC1, Value on POR, BOR = . POSTDEC1, Details on page: = 49, 68. PREINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n(not a physical register). PREINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 0 = Uses",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\ncontents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Value on POR, BOR = N/A. PREINC1, Value on POR, BOR = . PREINC1, Details on page: = 49, 68. PLUSW1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\na physical register) - value of FSR1 offset by W. PLUSW1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Value on POR, BOR = N/A. PLUSW1, Value on POR, BOR = . PLUSW1, Details on page: = 49, 68.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nFSR1H, Bit 7 = -. FSR1H, Bit 6 = -. FSR1H, Bit 5 = -. FSR1H, Bit 4 = -. FSR1H, Bit 3 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 2 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 1 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 0 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Value on POR, BOR = ----. FSR1H, Value on POR, BOR = 0000. FSR1H, Details on page: = 50, 68. FSR1L, Bit 7 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 6 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 5 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 4 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 3 = Indirect Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nMemory Address Pointer 1 Low Byte. FSR1L, Bit 2 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 1 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 0 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Value on POR, BOR = xxxx. FSR1L, Value on POR, BOR = xxxx. FSR1L, Details on page: = 50, 68. BSR, Bit 7 = -. BSR, Bit 6 = -. BSR, Bit 5 = -. BSR, Bit 4 = -. BSR, Bit 3 = Bank Select Register. BSR, Bit 2 = Bank Select Register. BSR, Bit 1 = Bank Select Register. BSR, Bit 0 = Bank Select Register. BSR, Value on POR, BOR = ----. BSR, Value on POR, BOR = 0000. BSR, Details on page: = 50, 59. INDF2, Bit 7 = Uses contents of FSR2 to address data memory -",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nvalue of FSR2 not changed (not a physical register). INDF2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 not changed",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n(not a physical register). INDF2, Value on POR, BOR = N/A. INDF2, Value on POR, BOR = . INDF2, Details on page: = 50, 68. POSTINC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nBit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). POSTINC2, Value on POR, BOR = N/A. POSTINC2, Value on POR, BOR = . POSTINC2, Details on page: = 50, 68 68. POSTDEC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 5 = Uses contents of",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nFSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Value on POR, BOR = N/A. POSTDEC2, Value on POR, BOR",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n= . POSTDEC2, Details on page: = 50,. PREINC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nPREINC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Value on POR, BOR = N/A. PREINC2, Value on POR, BOR = . PREINC2, Details on page: = 50, 68. PLUSW2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 4 = Uses contents",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nof FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) -. PLUSW2, Value on POR, BOR = N/A. PLUSW2, Value on POR, BOR = . PLUSW2, Details on page: = 50, 68. FSR2H, Bit 7 = value of FSR2 offset by W - - - - Indirect",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nData Memory Address Pointer 2 High Byte. FSR2H, Bit 6 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 5 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 4 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 3 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 2 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 1 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 0 = value of FSR2 offset by W - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Value on POR, BOR = ----.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\nFSR2H, Value on POR, BOR = 0000. FSR2H, Details on page: = 50, 68. FSR2L, Bit 7 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 6 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 5 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 4 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 3 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 2 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 1 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Bit 0 = Indirect Data Memory Address Pointer 2 Low Byte. FSR2L, Value on POR, BOR = xxxx. FSR2L, Value on POR, BOR = xxxx. FSR2L, Details on page: = 50, 68 50, 66. STATUS, Bit 7 = - - - N OV Z DC C. STATUS, Bit 6 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n- - - N OV Z DC C. STATUS, Bit 5 = - - - N OV Z DC C. STATUS, Bit 4 = - - - N OV Z DC C. STATUS, Bit 3 = - - - N OV Z DC C. STATUS, Bit 2 = - - - N OV Z DC C. STATUS, Bit 1 = - - - N OV Z DC C. STATUS, Bit 0 = - - - N OV Z DC C. STATUS, Value on POR, BOR = ---x xxxx. STATUS, Value on POR, BOR = . STATUS, Details on page: = \nLegend: x = unknown, u = unchanged, -= unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620)\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0 = Timer0 Register High Byte. TMR0H, Value on POR, BOR = 0000 0000. TMR0H, Details on page: = 50, 125. TMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Value on POR, BOR = xxxx xxxx. TMR0L, Details on page: = 50, 125. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1 T0PS0. T0CON, Bit 0 = 1111. T0CON, Value on POR, BOR = 1111. T0CON, Details on page: = 50, 123. OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nIRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0100 q000. OSCCON, Details on page: = 30, 50. HLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2 HLVDL1. HLVDCON, Bit 1 = HLVDL0. HLVDCON, Bit 0 = 0-00. HLVDCON, Value on POR, BOR = 0101. HLVDCON, Details on page: = 50, 243. WDTCON,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nBit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Value on POR, BOR = --- ---0. WDTCON, Details on page: = 50, 259. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Value on POR, BOR = 0q-1 11q0. RCON, Details on page: = 42, 48, 120. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTimer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Value on POR, BOR = xxxx xxxx. TMR1H, Details on page: = 50, 131. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTimer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Value on POR, BOR = xxxx xxxx. TMR1L, Details on page: = 50, 131. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR = 0000 0000. T1CON, Details on page: = 50, 127. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Value on POR, BOR = 0000 0000. TMR2, Details on page: = 50, 134. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Value on POR, BOR = 1111 1111. PR2, Details on page: = 50, 134. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nT2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000 0000. T2CON, Details on page: = 50, 133. SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive Buffer/Transmit Register. SSPBUF, Value on",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nPOR, BOR = xxxx xxxx. SSPBUF, Details on page: = 50, 169, 170. SSPADD, Bit 7 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 6 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 5 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 4 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 3 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 2 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nI 2 C Master Mode.. SSPADD, Bit 1 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 0 = MSSP Address Register in I 2 C\u2122 Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Value on POR, BOR = 0000 0000. SSPADD, Details on page: = 50, 170. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Value on POR, BOR = 0000 0000. SSPSTAT, Details on page: = 50, 162, 171. SSPCON1, Bit 7 = WCOL.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nSSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Value on POR, BOR = 0000 0000. SSPCON1, Details on page: = 50, 163, 172. SSPCON2, Bit 7 = GCEN. SSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN. SSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN. SSPCON2, Bit 0 = SEN. SSPCON2, Value on POR, BOR = 0000 0000. SSPCON2, Details on page:",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n= 50, 173. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Value on POR, BOR = xxxx xxxx. ADRESH, Details on page: = 51, 232. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nResult Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Value on POR, BOR = xxxx xxxx. ADRESL, Details on page: = 51, 232. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Value on POR, BOR = --00 0000. ADCON0, Details on page: = 51, 223. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nPCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00 0qqq. ADCON1, Details on page: = 51, 224. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Value on POR, BOR = 0-00 0000. ADCON2, Details on page: = 51, 225. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nByte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Value on POR, BOR = xxxx xxxx. CCPR1H, Details on page: = 51, 140. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Value on POR, BOR = xxxx xxxx. CCPR1L, Details on page: = 51, 140. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nCCP1CON, Value on POR, BOR = 0000 0000. CCP1CON, Details on page: = 51, 139, 147. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Value on POR, BOR = xxxx xxxx. CCPR2H, Details on page: = 51, 140. CCPR2L,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nBit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Value on POR, BOR = xxxx xxxx. CCPR2L, Details on page: = 51, 140. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nDC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Value on POR, BOR = --00 0000. CCP2CON, Details on page: = 51, 139. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Value on POR, BOR = 0100 0-00. BAUDCON, Details on page: = 51, 204. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nPDC6 (2). PWM1CON, Bit 5 = PDC5 (2). PWM1CON, Bit 4 = PDC4 (2). PWM1CON, Bit 3 = PDC3 (2). PWM1CON, Bit 2 = PDC2 (2). PWM1CON, Bit 1 = PDC1 (2). PWM1CON, Bit 0 = PDC0 (2). PWM1CON, Value on POR, BOR = 0000 0000. PWM1CON, Details on page: = 51, 156. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (2).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nECCP1AS, Bit 0 = PSSBD0 (2). ECCP1AS, Value on POR, BOR = 0000 0000. ECCP1AS, Details on page: = 51, 157. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR, BOR = 0000 0000. CVRCON, Details on page: = 51, 239. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nBit 0 = CM0. CMCON, Value on POR, BOR = 0000 0111. CMCON, Details on page: = 51, 233. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Value on POR, BOR = xxxx xxxx. TMR3H, Details on page: = 51, 137. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nByte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Value on POR, BOR = xxxx xxxx. TMR3L, Details on page: = 51, 137. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC TMR3CS. T3CON, Bit 1 = . T3CON, Bit 0 = TMR3ON. T3CON, Value on POR, BOR = 0000 0000.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nT3CON, Details on page: = 51, 135",
    "Legend: Note\nx = unknown, u = unchanged, -= unimplemented, q = value depends on condition",
    "Legend: Note\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nSPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Value on POR, BOR = 0000 0000. SPBRGH, Details on page: = 51, 206. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nSPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Value on POR, BOR = 0000 0000. SPBRG, Details on page: = 51, 206. RCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Value on",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nPOR, BOR = 0000 0000. RCREG, Details on page: = 51, 213. TXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Value on POR, BOR = 0000 0000. TXREG, Details on page: = 51, 211. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTXSTA, Value on POR, BOR = 0000 0010. TXSTA, Details on page: = 51, 202. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000 000x. RCSTA, Details on page: = 51, 203. EEADRH, Bit 7 = -. EEADRH, Bit 6 = -. EEADRH, Bit 5 = -. EEADRH, Bit 4 = -. EEADRH, Bit 3 = -. EEADRH, Bit 2 = -. EEADRH, Bit 1 = EEPROM Addr Register High. EEADRH, Bit 0 = EEPROM Addr Register High. EEADRH, Value on POR, BOR = ----",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n--00. EEADRH, Details on page: = 51, 73. EEADR, Bit 7 = EEPROM Address Register. EEADR, Bit 6 = EEPROM Address Register. EEADR, Bit 5 = EEPROM Address Register. EEADR, Bit 4 = EEPROM Address Register. EEADR, Bit 3 = EEPROM Address Register. EEADR, Bit 2 = EEPROM Address Register. EEADR, Bit 1 = EEPROM Address Register. EEADR, Bit 0 = EEPROM Address Register. EEADR, Value on POR, BOR = 0000 0000. EEADR, Details on page: = 51, 80, 73. EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register. EEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nRegister. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit 0 = EEPROM Data Register. EEDATA, Value on POR, BOR = 0000 0000. EEDATA, Details on page: = 51, 80, 73. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Value on POR, BOR",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n= 0000 0000. EECON2, Details on page: = 51, 80, 73. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Value on POR, BOR = xx-0 x000. EECON1, Details on page: = 51, 81, 74. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n= 11-1 1111. IPR2, Details on page: = 52, 119. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR = 00-0 0000. PIR2, Details on page: = 52, 115. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n00-0 0000. PIE2, Details on page: = 52, 117. IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111 1111. IPR1, Details on page: = 52, 118. PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nTMR1IF. PIR1, Value on POR, BOR = 0000 0000. PIR1, Details on page: = 52, 114. PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000 0000. PIE1, Details on page: = 52, 116. OSCTUNE, Bit 7 = INTSRC. OSCTUNE, Bit 6 = PLLEN (3). OSCTUNE, Bit 5 = -. OSCTUNE, Bit 4 = TUN4. OSCTUNE, Bit 3 = TUN3. OSCTUNE, Bit 2 = TUN2. OSCTUNE, Bit 1 = TUN1. OSCTUNE, Bit 0 = TUN0.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nOSCTUNE, Value on POR, BOR = 00-0 0000. OSCTUNE, Details on page: = 27, 52. TRISE (2), Bit 7 = IBF. TRISE (2), Bit 6 = OBF. TRISE (2), Bit 5 = IBOV. TRISE (2), Bit 4 = PSPMODE. TRISE (2), Bit 3 = -. TRISE (2), Bit 2 = TRISE2. TRISE (2), Bit 1 = TRISE1. TRISE (2), Bit 0 = TRISE0. TRISE (2), Value on POR, BOR = 0000 -111. TRISE (2), Details on page: = 52, 104. TRISD (2), Bit 7 = PORTD Data Direction Control Register. TRISD (2), Bit 6 = PORTD Data Direction Control Register. TRISD (2), Bit 5 = PORTD Data Direction Control Register. TRISD (2), Bit 4 = PORTD Data Direction Control Register. TRISD",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n(2), Bit 3 = PORTD Data Direction Control Register. TRISD (2), Bit 2 = PORTD Data Direction Control Register. TRISD (2), Bit 1 = PORTD Data Direction Control Register. TRISD (2), Bit 0 = PORTD Data Direction Control Register. TRISD (2), Value on POR, BOR = 1111 1111. TRISD (2), Details on page: = 52, 100. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Value on POR, BOR = 1111 1111. TRISC, Details on page: = 52, 97. TRISB,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nBit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Value on POR, BOR = 1111 1111. TRISB, Details on page: = 52, 94. TRISA, Bit 7 = TRISA7 (5). TRISA, Bit 6 = TRISA6 (5). TRISA, Bit 5 = Data Direction Control Register for PORTA. TRISA, Bit 4 = Data Direction Control Register for PORTA. TRISA, Bit 3 = Data Direction Control Register for PORTA. TRISA, Bit 2 = Data Direction Control Register for PORTA. TRISA, Bit 1 = Data Direction Control Register for PORTA. TRISA, Bit 0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n= Data Direction Control Register for PORTA. TRISA, Value on POR, BOR = 1111 1111. TRISA, Details on page: = 52, 91. LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Bit 1 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Bit 0 = PORTE Data Latch Register (Read and Write to Data Latch). LATE (2), Value on POR, BOR = ---- -xxx. LATE (2), Details on page: = 52, 103. LATD (2), Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 6 = PORTD Data Latch Register (Read and Write to Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nLatch). LATD (2), Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 0 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Value on POR, BOR = xxxx xxxx. LATD (2), Details on page: = 52, 100. LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nPORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Value on POR, BOR = xxxx xxxx. LATC, Details on page: = 52, 97. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nBit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Value on POR, BOR = xxxx xxxx. LATB, Details on page: = 52, 94. LATA, Bit 7 = LATA7 (5). LATA, Bit 6 = LATA6 (5). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nWrite to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Value on POR, BOR = xxxx xxxx. LATA, Details on page: = 52, 91. PORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (4). PORTE, Bit 2 = RE2 (2). PORTE, Bit 1 = RE1 (2). PORTE, Bit 0 = RE0 (2). PORTE, Value on POR, BOR = ---- xxxx. PORTE, Details on page: = 52, 103. PORTD (2), Bit 7 = RD7. PORTD (2), Bit 6 = RD6. PORTD (2), Bit 5 = RD5. PORTD (2), Bit 4 = RD4. PORTD (2), Bit 3 = RD3. PORTD (2), Bit 2 = RD2. PORTD",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n(2), Bit 1 = RD1. PORTD (2), Bit 0 = RD0. PORTD (2), Value on POR, BOR = xxxx xxxx. PORTD (2), Details on page: = 52, 100. PORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Value on POR, BOR = xxxx xxxx. PORTC, Details on page: = 52, 97. PORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\nValue on POR, BOR = xxxx xxxx. PORTB, Details on page: = 52, 94. PORTA, Bit 7 = RA7 (5). PORTA, Bit 6 = RA6 (5). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR, BOR = xx0x 0000. PORTA, Details on page: = 52, 91\nLegend: x = unknown, u = unchanged, -= unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ); otherwise, RE3 reads as ' 0 '. This bit is read-only.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2525/2620/4525/4620) (CONTINUED)\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "5.3.5 STATUS REGISTER\nThe STATUS register, shown in Register 5-2, contains the arithmetic status of the ALU. As with any other SFR, it can be the operand for any instruction.\nIt is recommended that only BCF BSF SWAPF MOVFF , , , and MOVWF instructions are used to alter the STATUS register, because these instructions do not affect the Z, C, DC, OV or N bits in the STATUS register.\nIf the STATUS register is the destination for an instruction that affects the Z, DC, C, OV or N bits, the results of the instruction are not written; instead, the STATUS register  is  updated  according  to  the  instruction  performed. Therefore, the result of an instruction with the STATUS  register  as  its  destination  may  be  different than intended. As an example, CLRF STATUS will set the Z bit and leave the remaining Status bits unchanged (' 000u u1uu ').\nFor other instructions that do not affect Status bits, see the instruction set summaries  in Table 24-2 and Table 24-3.\nNote:\nThe C and DC bits operate as the borrow and digit borrow bits, respectively, in subtraction.",
    "REGISTER 5-2: STATUS REGISTER\n-, U-0 = -. -, U-0 = -. -, R/W-x = N. -, R/W-x = OV. -, R/W-x = Z. -, R/W-x = DC (1). -, R/W-x = C (2)\nbit 7\nbit 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 4\nN: Negative bit\nThis bit is used for signed arithmetic (2's complement). It indicates whether the result was negative (ALU MSB = 1 ).\n1 = Result was negative\n0 = Result was positive",
    "bit 3\nOV: Overflow bit\nThis bit is used for signed arithmetic (2's complement). It indicates an overflow of the 7-bit magnitude which causes the sign bit (bit 7) to change state.\n1 = Overflow occurred for signed arithmetic (in this arithmetic operation)\n0 = No overflow occurred",
    "bit 2 Z: Zero bit\n1 = The result of an arithmetic or logic operation is zero\n0 = The result of an arithmetic or logic operation is not zero",
    "bit 1\nDC: Digit Carry/borrow bit (1)\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:\n1 = A carry-out from the 4th low-order bit of the result occurred\n0 = No carry-out from the 4th low-order bit of the result",
    "bit 0 C: Carry/borrow bit\n(2)\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:\n1 = A carry-out from the Most Significant bit of the result occurred\n0 = No carry-out from the Most Significant bit of the result occurred\nNote 1: For borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF, RLF ) instructions, this bit is loaded with either bit 4 or bit 3 of the source register.\n2: For borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF, RLF ) instructions, this bit is loaded with either the high or low-order bit of the source register.",
    "5.4 Data Addressing Modes\nNote:",
    "PIC18F2525/2620/4525/4620\nThe Access RAM bit, 'a', determines how the address is interpreted. When 'a' is ' 1 ', the contents of the BSR ( Section 5.3.1  'Bank  Select  Register  (BSR)' )  are used with the address to determine the complete 12-bit address of the register. When 'a' is ' 0 ', the address is interpreted  as  being  a  register  in  the  Access  Bank. Addressing that uses the Access RAM is sometimes also known as Direct Forced Addressing mode.\nThe execution of some instructions in the core  PIC18  instruction  set  are  changed when the PIC18 extended instruction set is enabled. See Section 5.5 'Data Memory and  the  Extended  Instruction  Set' for more information.\nThe data memory space can be addressed in several ways. For most instructions, the addressing mode is fixed. Other instructions may use up to three modes, depending on which operands are used and whether or not the extended instruction set is enabled.\nThe addressing modes are:\n\u00b7 Inherent\n\u00b7 Literal\n\u00b7 Direct\n\u00b7 Indirect",
    "PIC18F2525/2620/4525/4620\nAn additional addressing mode, Indexed Literal Offset, is available  when  the  extended  instruction  set  is enabled (XINST Configuration bit = 1 ). Its operation is discussed in greater detail in Section 5.5.1 'Indexed Addressing with Literal Offset' .",
    "5.4.1 INHERENT AND LITERAL ADDRESSING\nMany  PIC18  control  instructions  do  not  need  any argument at all;  they either  perform an  operation  that globally affects the device or they operate implicitly on one register. This addressing mode is known as Inherent Addressing. Examples include SLEEP RESET , and DAW .\nOther instructions work in a similar way but require an additional  explicit  argument  in  the  opcode.  This  is known  as  Literal  Addressing  mode  because  they require some literal value as an argument. Examples include ADDLW and MOVLW , which respectively, add or move a literal value to the W register. Other examples include CALL and GOTO , which include a 20-bit program memory address.",
    "5.4.2 DIRECT ADDRESSING\nDirect  Addressing  specifies  all  or  part  of  the  source and/or destination address of the operation within the opcode itself. The options are specified by the arguments accompanying the instruction.\nIn the core PIC18 instruction set, bit-oriented and byteoriented instructions use some  version of Direct Addressing by default. All of these instructions include some  8-bit  literal  address  as  their  Least  Significant Byte. This address specifies either a register address in one of the banks of data RAM ( Section 5.3.3 'General Purpose Register File' )  or  a  location  in the Access Bank  ( Section 5.3.2  'Access  Bank' ) as  the  data source for the instruction.\nA few instructions, such as MOVFF ,  include the entire 12-bit  address  (either  source  or  destination)  in  their opcodes. In these cases, the BSR is ignored entirely.",
    "5.4.2 DIRECT ADDRESSING\nThe destination of the operation's results is determined by the destination bit, 'd'. When 'd' is ' 1 ', the results are stored back in the source register, overwriting its original contents. When 'd' is ' 0 ',  the results are stored in the  W  register.  Instructions  without  the  'd'  argument have a destination that is implicit in the instruction; their destination is either the target register being operated on or the W register.",
    "5.4.3 INDIRECT ADDRESSING\nIndirect Addressing allows the user to access a location in  data memory without giving a fixed address in the instruction. This is done by using File Select Registers (FSRs) as pointers to the locations to be read or written to. Since the FSRs are themselves located in RAM as Special Function Registers, they can also be directly manipulated under program control. This makes FSRs very  useful  in  implementing  data  structures,  such  as tables and arrays in data memory.\nThe registers for Indirect Addressing are also implemented with Indirect File Operands (INDFs) that permit automatic manipulation of the pointer value with auto-incrementing, auto-decrementing or offsetting with another value. This allows for efficient code, using loops, such as the example of clearing an entire RAM bank in Example 5-5.",
    "HOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nNEXT, 1 = LFSR CLRF. NEXT, 2 = FSR0, 100h POSTINC0. NEXT, 3 = ; ; Clear INDF ; register then ; inc pointer. , 1 = BTFSS. , 2 = FSR0H, 1. , 3 = ; All done with ; Bank1?. CONTINUE, 1 = BRA. CONTINUE, 2 = NEXT. CONTINUE, 3 = ; NO, clear next ; YES, continue",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nAt  the  core  of  Indirect  Addressing  are  three  sets  of registers: FSR0, FSR1 and FSR2. Each represents a pair  of  8-bit  registers,  FSRnH  and  FSRnL.  The  four upper bits of the FSRnH register are not used so each FSR pair holds a 12-bit value. This represents a value that can address the entire range of the data memory in a linear fashion. The FSR register pairs, then, serve as pointers to data memory locations.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIndirect  Addressing  is  accomplished  with  a  set  of Indirect File Operands, INDF0 through INDF2. These can  be  thought  of  as  'virtual'  registers:  they  are mapped in the SFR space but are not physically implemented. Reading or writing to a particular INDF register actually accesses its corresponding FSR register pair. A read from INDF1, for example, reads the data at the address indicated by FSR1H:FSR1L. Instructions that use the INDF registers as operands actually use the contents of their corresponding FSR as a pointer to the instruction's target. The  INDF  operand  is just a convenient way of using the pointer.\nBecause Indirect Addressing uses a full 12-bit address, data RAM banking is not necessary. Thus, the current contents of the BSR and the Access RAM bit have no effect on determining the target address.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn addition to the INDF operand, each FSR register pair also has four additional indirect operands. Like INDF, these  are  'virtual'  registers  that  cannot  be  indirectly read or written to. Accessing these registers actually accesses  the  associated  FSR  register  pair,  but  also performs a specific action on its stored value. They are:\n\u00b7 POSTDEC: accesses the FSR value, then automatically decrements it by 1 afterwards\n\u00b7 POSTINC: accesses the FSR value, then automatically increments it by 1 afterwards\n\u00b7 PREINC: increments the FSR value by 1, then uses it in the operation\n\u00b7 PLUSW: adds the signed value of the W register (range of -127 to 128) to that of the FSR and uses the new value in the operation.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn  this  context,  accessing  an  INDF  register  uses  the value in the FSR registers without changing them. Similarly, accessing a PLUSW register gives the FSR value offset by that in the W register; neither value is actually changed in the operation. Accessing the other virtual registers changes the value of the FSR registers.\nOperations  on  the  FSRs  with  POSTDEC,  POSTINC and PREINC affect the entire register pair; that is, rollovers of the FSRnL register from FFh to 00h carry over to  the  FSRnH register. On the other hand, results of these operations do not change the value of any flags in the STATUS register (e.g., Z, N, OV, etc.).",
    "PIC18F2525/2620/4525/4620\nThe PLUSW register can be used to implement a form of Indexed Addressing in the data memory space. By manipulating  the  value  in  the  W  register,  users  can reach  addresses  that  are  fixed  offsets  from  pointer addresses. In some applications, this can be used to implement  some  powerful  program  control  structure, such as software stacks, inside of data memory.",
    "5.4.3.3 Operations by FSRs on FSRs\nIndirect Addressing operations that target other FSRs or virtual registers represent special cases. For example, using an FSR to point to one of the virtual registers will  not  result  in  successful  operations.  As  a  specific case, assume that FSR0H:FSR0L contains FE7h, the address of INDF1. Attempts to read the value of the INDF1  using  INDF0  as  an  operand  will  return  00h. Attempts to write to INDF1 using INDF0 as the operand will result in a NOP .\nOn the other hand, using the virtual registers to write to an FSR pair may not occur as planned. In these cases, the value will be written to the FSR pair but without any incrementing or decrementing. Thus, writing to INDF2 or POSTDEC2  will  write  the  same  value  to  the FSR2H:FSR2L.\nSince the FSRs are physical registers mapped in the SFR space, they can be manipulated through all direct operations.  Users  should  proceed  cautiously  when working  on  these  registers,  particularly  if  their  code uses Indirect Addressing.",
    "5.4.3.3 Operations by FSRs on FSRs\nSimilarly, operations by Indirect Addressing are generally permitted on all other SFRs. Users should exercise the  appropriate  caution  that  they  do  not  inadvertently change settings  that  might  affect  the  operation  of  the device.",
    "5.5 Data Memory and the Extended Instruction Set\nEnabling  the  PIC18  extended  instruction  set  (XINST Configuration  bit  = 1 ) significantly changes  certain aspects of data memory and its addressing. Specifically, the use of the Access Bank for many of the core PIC18 instructions is different; this is due to the introduction of a new addressing mode for the data memory space.\nWhat does not change is just as important. The size of the data memory space is unchanged, as well as its linear  addressing.  The  SFR  map  remains  the  same. Core PIC18 instructions can still operate in both Direct and  Indirect  Addressing  mode;  inherent  and  literal instructions do not change at all. Indirect Addressing with FSR0 and FSR1 also remains unchanged.\nEnabling  the  PIC18  extended  instruction  set  changes the  behavior  of  Indirect  Addressing  using  the  FSR2 register  pair  within  Access  RAM.  Under  the  proper conditions, instructions that use the Access Bank - that is, most bit-oriented and byte-oriented instructions - can invoke  a  form  of  Indexed  Addressing  using  an  offset specified  in  the  instruction.  This  special  addressing mode  is  known  as  Indexed  Addressing  with  Literal Offset, or Indexed Literal Offset mode.\nWhen using the extended instruction set, this addressing mode requires the following:",
    "5.5 Data Memory and the Extended Instruction Set\n\u00b7 The use of the Access Bank is forced ('a' = 0 ); and\n\u00b7 The file address argument is less than or equal to 5Fh.\nUnder these conditions, the file address of the instruction is not interpreted as the lower byte of an address (used with the BSR in Direct Addressing), or as an 8-bit address  in  the  Access  Bank.  Instead,  the  value  is interpreted as an offset value to an Address Pointer, specified  by  FSR2.  The  offset  and  the  contents  of FSR2 are added to obtain the  target  address  of  the operation.",
    "5.5.2 INSTRUCTIONS AFFECTED BY INDEXED LITERAL OFFSET MODE\nAny of the core PIC18 instructions that can use Direct Addressing  are  potentially  affected  by  the  Indexed Literal  Offset  Addressing  mode.  This  includes  all byte-oriented and bit-oriented instructions, or almost one-half of the standard PIC18 instruction set. Instructions that only use Inherent or Literal Addressing modes are unaffected.\nAdditionally, byte-oriented and bit-oriented instructions are  not  affected  if  they  do  not  use  the  Access  Bank (Access RAM bit is ' 1 '), or include a file address of 60h or above. Instructions meeting these criteria will continue to execute as before. A comparison of the different possible addressing modes when the extended instruction set is enabled is shown in Figure 5-8.\nThose who desire to use bit-oriented or byte-oriented instructions in the Indexed Literal Offset mode should note the changes to assembler syntax for this mode. This  is  described  in  more  detail  in Section 24.2.1 'Extended Instruction Syntax' .",
    "COMPARING ADDRESSING OPTIONS FOR BIT-ORIENTED AND BYTE-ORIENTED INSTRUCTIONS (EXTENDED INSTRUCTION SET ENABLED)\nEXAMPLE INSTRUCTION: ADDWF, f, d, a (Opcode: 0010 01da ffff ffff )",
    "When 'a' = 0 and f \u2265 60h:\nThe  instruction executes  in Direct Forced mode. 'f' is interpreted  as  a  location  in  the Access  RAM  between  060h and 0FFh. This is the same as locations 060h to 07Fh (Bank 0)  and  F80h  to  FFFh (Bank 15) of data memory.\nLocations  below  60h  are  not available in this addressing mode.",
    "When 'a' = 0 and f \u2264 5Fh:\nThe instruction executes in Indexed Literal Offset mode. 'f' is interpreted as an offset to the address  value  in  FSR2.  The two are added together to obtain the address of the target register for the instruction. The address  can  be  anywhere  in the data memory space.\nNote  that  in  this mode,  the correct syntax is now:\nADDWF [k], d where 'k' is the same as 'f'.",
    "When 'a' = 1 (all values of f):\nThe  instruction executes  in Direct  mode  (also  known  as Direct Long mode). 'f' is interpreted as a location in one of the 16 banks of the data memory  space.  The  bank  is designated by the Bank Select Register  (BSR).  The  address can  be  in  any  implemented bank in the data memory space.",
    "5.5.3 MAPPING THE ACCESS BANK IN INDEXED LITERAL OFFSET ADDRESSING MODE\nThe  use  of  Indexed  Literal  Offset  Addressing  mode effectively changes how the first 96 locations of Access RAM (00h to 5Fh) are mapped. Rather than containing just the contents of the bottom half of Bank 0, this mode maps  the  contents  from  Bank  0  and  a  user-defined 'window'  that  can  be  located  anywhere  in  the  data memory  space.  The  value  of  FSR2  establishes  the lower  boundary  of  the  addresses  mapped  into  the window, while the upper boundary is defined by FSR2 plus  95  (5Fh).  Addresses  in  the  Access  RAM  above 5Fh are mapped as previously described (see Section 5.3.2 'Access Bank' ). An example of Access Bank remapping in this addressing mode is shown in Figure 5-9.\nRemapping of the Access Bank applies only to operations using  the  Indexed  Literal  Offset  Addressing mode. Operations that use the BSR (Access RAM bit is ' 1 ') will continue to use Direct Addressing as before.",
    "5.6 PIC18 Instruction Execution and the Extended Instruction Set\nEnabling the extended instruction set adds eight additional commands to the existing PIC18 instruction set.  These  instructions  are  executed  as  described  in Section 24.2 'Extended Instruction Set' .",
    "Example Situation:\nADDWF f, d, a\nFSR2H:FSR2L = 120h\nLocations in the region from the FSR2 Pointer (120h)  to  the  pointer  plus 05Fh  (17Fh)  are  mapped to the bottom of the Access RAM (000h-05Fh).\nLocations  in  Bank  0  from 060h to 07Fh are mapped, as usual, to the middle of the Access Bank.\nSpecial Function Registers at F80h through FFFh are mapped  to  80h  through FFh, as usual.\nBank  0  addresses  below 5Fh can still be addressed by using the BSR.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "6.0 DATA EEPROM MEMORY\nThe  data  EEPROM  is  a  nonvolatile  memory  array, separate from the data RAM and program memory, that is used for long-term storage of program data. It is not directly  mapped  in either the  register  file  or  program memory space but is indirectly addressed through the Special Function Registers (SFRs). The EEPROM is readable and writable during normal operation over the entire VDD range.\nFive  SFRs  are  used  to  read  and  write  to  the  data EEPROM as well as the program memory. They are:\n\u00b7 EECON1\n\u00b7 EECON2\n\u00b7 EEDATA\n\u00b7 EEADR\n\u00b7 EEADRH\nThe data EEPROM allows byte read and write. When interfacing to the data memory block, EEDATA holds the 8-bit data for read/write and the EEADRH:EEADR register pair holds the address of the EEPROM location being accessed.",
    "6.0 DATA EEPROM MEMORY\nThe EEPROM data memory is rated for high erase/write cycle endurance. A byte write automatically erases the location  and  writes  the  new  data  (erase-before-write). The write time is controlled by an on-chip timer; it will vary with voltage and temperature as well as from chip to chip. Please refer to parameter D122 (Table 26-1 in Section 26.0  'Electrical  Characteristics' )  for  exact limits.",
    "6.1 EEADR and EEADRH Registers\nThe EEADRH:EEADR register pair is used to address the  data  EEPROM  for  read  and  write  operations. EEADRH  holds  the  two  MSbits  of  the  address;  the upper 6 bits are ignored. The 10-bit range of the pair can address a memory range of 1024 bytes (00h to 3FFh).",
    "6.2 EECON1 and EECON2 Registers\nAccess  to  the  data  EEPROM  is  controlled  by  two registers: EECON1 and EECON2. These are the same registers which control access to the program memory and  are used  in a similar manner  for the data EEPROM.\nThe  EECON1  register  (Register 6-1)  is  the  control register for data and program memory access. Control bit EEPGD determines if the access will be to program or data EEPROM memory. When clear, operations will access the data EEPROM memory. When set, program memory is accessed.\nControl bit, CFGS, determines if the access will be to the Configuration registers or to program memory/data EEPROM memory. When set, subsequent operations access Configuration registers. When CFGS is clear, the  EEPGD bit  selects  either  Flash program  or  data EEPROM memory.\nThe WREN bit, when set, will allow a write operation. On power-up, the WREN bit is clear. The WRERR bit is set in hardware when the WREN bit is set and cleared when the internal programming timer expires and the write operation is complete.",
    "Note:\nDuring  normal  operation,  the  WRERR is read as ' 1 '. This can indicate that a write operation was prematurely terminated by a Reset, or a write operation was attempted improperly.\nThe WR control bit initiates  write operations. The  bit cannot be cleared, only set, in software; it is cleared in hardware at the completion of the write operation.\nThe EEIF interrupt flag bit (PIR2<4>) is set when  the  write  is  complete.  It  must  be cleared in software.\nControl  bits,  RD  and  WR,  start  read  and  erase/write operations, respectively. These bits are set by firmware and  cleared  by  hardware  at  the  completion  of  the operation.\nThe  RD  bit  cannot  be  set  when  accessing  program memory (EEPGD = 1 ). Program memory is read using table read instructions. See Section 7.1 'Table Reads and Table Writes' regarding table reads.\nThe EECON2 register is not a physical register. It is used  exclusively  in  the memory  write  and  erase sequences. Reading EECON2 will read all ' 0 's.",
    "REGISTER 6-1: EECON1: EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = -. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7, R/W-x = . bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R/W-x = . bit 7, R/W-0 = . bit 7, R/S-0 = . bit 7, R/S-0 = bit 0",
    "REGISTER 6-1: EECON1: EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Set only bit (cannot be cleared in software). Legend:, 2 = S = Set only bit (cannot be cleared in software). Legend:, 3 = S = Set only bit (cannot be cleared in software). R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory",
    "bit 6 CFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 4 FREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write only",
    "bit 3 WRERR: Flash Program/Data EEPROM Error Flag bit (1)\n1 = A write operation is prematurely terminated (any Reset during self-timed programming in normal operation, or an improper write attempt)\n0 = The write operation completed",
    "bit 2 WREN: Flash Program/Data EEPROM Write Enable bit\n1 = Allows write cycles to Flash program/data EEPROM\n0 = Inhibits write cycles to Flash program/data EEPROM",
    "bit 1 WR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle to the EEPROM is complete",
    "bit 0 RD: Read Control bit\n1 = Initiates an EEPROM read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 or CFGS = 1 .)\n0 = Does not initiate an EEPROM read\n- Note 1: When a WRERR occurs, the EEPGD and CFGS bits are not cleared. This allows tracing of the error condition.",
    "6.3 Reading the Data EEPROM Memory\nTo read a data memory location, the user must write the address to the EEADRH:EEADR register pair, clear the EEPGD control bit (EECON1<7>) and then set control bit,  RD  (EECON1<0>).  The  data  is  available  on  the very  next  instruction  cycle;  therefore,  the  EEDATA register can be read by the next instruction. EEDATA will hold this value until another read operation, or until it is written to by the user (during a write operation).\nThe basic process is shown in Example 6-1.",
    "6.4 Writing to the Data EEPROM Memory\nTo write an EEPROM data location, the address must first  be  written  to  the  EEADRH:EEADR  register  pair and  the  data  written  to  the  EEDATA  register.  The sequence in Example 6-2 must be followed to initiate the write cycle.\nThe write will not begin if this sequence is not exactly followed (write 55h to EECON2,  write 0AAh  to EECON2, then set WR bit) for each byte. It is strongly recommended that  interrupts  be  disabled  during  this code segment.\nAdditionally, the WREN bit in EECON1 must be set to enable  writes.  This  mechanism  prevents  accidental writes  to  data  EEPROM  due  to  unexpected  code execution  (i.e.,  runaway  programs).  The  WREN  bit should be kept clear at all times, except when updating the EEPROM.  The  WREN  bit  is  not  cleared  by hardware.\nAfter  a  write  sequence  has  been  initiated,  EECON1, EEADRH:EEADR  and  EEDATA  cannot  be  modified. The WR bit will be inhibited from being set unless the WREN bit  is  set.  The  WREN  bit  must  be  set  on  a previous instruction. Both WR and WREN cannot be set with the same instruction.",
    "6.4 Writing to the Data EEPROM Memory\nAt  the  completion  of  the  write  cycle,  the  WR  bit  is cleared in hardware and the EEPROM Interrupt Flag bit,  EEIF,  is  set.  The  user  may  either  enable  this interrupt,  or  poll  this  bit.  EEIF  must  be  cleared  by software.",
    "6.5 Write Verify\nDepending  on  the  application,  good  programming practice may dictate that the value written to the memory should be verified against the original value. This should be used in applications where excessive writes can stress bits near the specification limit.",
    "EXAMPLE 6-1: DATA EEPROM READ\nMOVLW, 1 = DATA_EE_ADDRH. MOVLW, 2 = ;. MOVWF, 1 = EEADRH. MOVWF, 2 = ; Upper bits of Data Memory Address to read. MOVLW, 1 = DATA_EE_ADDR. MOVLW, 2 = ;. MOVWF, 1 = EEADR. MOVWF, 2 = ; Lower bits of Data Memory Address to read. BCF, 1 = EECON1, EEPGD. BCF, 2 = ; Point to DATA memory. BCF, 1 = EECON1, CFGS. BCF, 2 = ; Access EEPROM. BSF, 1 = EECON1, RD. BSF, 2 = ; EEPROM Read. MOVF, 1 = EEDATA, W. MOVF, 2 = ; W = EEDATA",
    "EXAMPLE 6-2: DATA EEPROM WRITE\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF BCF BCF BSF. , 2 = DATA_EE_ADDRH EEADRH DATA_EE_ADDR EEADR DATA_EE_DATA EEDATA EECON1, EPGD EECON1, CFGS EECON1, WREN. , 3 = ; ; Upper bits of Data Memory Address to write ; ; Lower bits of Data Memory Address to write ; ; Data Memory Value to write ; Point to DATA memory ; Access EEPROM ; Enable writes. , 1 = BCF. , 2 = INTCON, GIE. , 3 = ; Disable Interrupts. , 1 = MOVLW. , 2 = 55h. , 3 = ;. Required, 1 = MOVWF. Required, 2 = EECON2. Required, 3 = ; Write. Required, 1 = MOVLW. Required, 2 = 0AAh. Required, 3 = ;. Required, 1 = MOVWF. Required, 2 = EECON2. Required, 3 = ; Write. Required, 1 =",
    "EXAMPLE 6-2: DATA EEPROM WRITE\nBSF. Required, 2 = EECON1, WR. Required, 3 = ; Set WR bit to begin write. Required, 1 = BSF. Required, 2 = INTCON, GIE. Required, 3 = ; Enable Interrupts. Required, 1 = . Required, 2 = . Required, 3 = ; User code execution",
    "6.6 Operation During Code-Protect\nData EEPROM memory has its own code-protect bits in Configuration Words. External read and write operations are disabled if code protection is enabled.\nThe microcontroller itself can both read and write to the internal data EEPROM, regardless of the state of the code-protect Configuration bit. Refer to Section 23.0 'Special Features of the CPU' for additional information.",
    "6.7 Protection Against Spurious Write\nThere are conditions when the device may not want to write to the data EEPROM memory. To protect against spurious EEPROM writes, various mechanisms have been  implemented.  On  power-up,  the  WREN  bit  is cleared. In addition, writes to the EEPROM are blocked during the Power-up Timer period (TPWRT, parameter 33).",
    "6.8 Using the Data EEPROM\nThe data EEPROM is a high-endurance, byte-addressable array that has been optimized for the storage of frequently changing information (e.g., program variables or other data that are updated often). Frequently  changing  values  will  typically  be  updated more often than specification  D124. If  this  is  not  the case,  an  array  refresh  must  be  performed.  For  this reason,  variables  that  change  infrequently  (such  as constants,  IDs,  calibration,  etc.)  should  be  stored  in Flash program memory.\nA  simple  data  EEPROM  refresh  routine  is  shown  in Example 6-3.\nNote:, 1 = If data EEPROM is only used to store constants and/or data that changes often, an array refresh is likely not required. See specification D124.\nThe write initiate sequence and the WREN bit together help  prevent  an  accidental  write  during  Brown-out Reset, power glitch or software malfunction.",
    "EXAMPLE 6-3: DATA EEPROM REFRESH ROUTINE\n, 1 = CLRF CLRF. , 2 = EEADR. , 3 = ; Start at address. , 1 = . , 2 = EEADRH. , 3 = ;. , 1 = BCF. , 2 = EECON1, CFGS. , 3 = ; Set for memory. , 1 = BCF. , 2 = EECON1, EEPGD. , 3 = ; Set for Data EEPROM. , 1 = BCF. , 2 = INTCON, GIE. , 3 = ; Disable interrupts. , 1 = BSF. , 2 = EECON1, WREN. , 3 = ; Enable writes. Loop, 1 = . Loop, 2 = . Loop, 3 = ; Loop to refresh array. , 1 = BSF. , 2 = EECON1, RD. , 3 = ; Read current address. , 1 = MOVLW. , 2 = 55h. , 3 = ;. , 1 = MOVWF. , 2 = EECON2. , 3 = ; Write 55h. , 1 = MOVLW. , 2 = 0AAh. , 3 = ;. ,",
    "EXAMPLE 6-3: DATA EEPROM REFRESH ROUTINE\n1 = MOVWF. , 2 = EECON2. , 3 = ; Write 0AAh. , 1 = BSF. , 2 = EECON1, WR. , 3 = ; Set WR bit to begin write. , 1 = BTFSC. , 2 = EECON1, WR. , 3 = ; Wait for write to complete. , 1 = BRA. , 2 = $-2. , 3 = . , 1 = INCFSZ. , 2 = EEADR, F. , 3 = ; Increment address. , 1 = BRA. , 2 = LOOP. , 3 = ; Not zero, do it again. , 1 = INCFSZ. , 2 = EEADRH,. , 3 = ; Increment the high address. , 1 = BRA. , 2 = LOOP. , 3 = ; Not zero, do. , 1 = BCF. , 2 = EECON1, WREN. , 3 = ; Disable writes. , 1 = BSF. , 2 = INTCON, GIE. , 3 = ; Enable interrupts",
    "TABLE 6-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. EEADRH, Bit 7 = -. EEADRH, Bit 6 = -. EEADRH, Bit 5 = -. EEADRH, Bit 4 = -. EEADRH, Bit 3 = -. EEADRH, Bit 2 = -. EEADRH, Bit 1 = EEPROM Address Register High Byte. EEADRH, Bit 0 = EEPROM Address Register High Byte. EEADRH, Reset Values on page = 51. EEADR, Bit 7 = EEPROM Address Register. EEADR, Bit 6 = EEPROM Address Register. EEADR, Bit 5 = EEPROM Address Register. EEADR, Bit 4 = EEPROM Address Register.",
    "TABLE 6-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nEEADR, Bit 3 = EEPROM Address Register. EEADR, Bit 2 = EEPROM Address Register. EEADR, Bit 1 = EEPROM Address Register. EEADR, Bit 0 = EEPROM Address Register. EEADR, Reset Values on page = 51. EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register. EEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data Register. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit 0 = EEPROM Data Register. EEDATA, Reset Values on page = 51. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit",
    "TABLE 6-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\n4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Reset Values on page = 51. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Reset Values on page = 51. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 =",
    "TABLE 6-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nBCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52",
    "TABLE 6-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during Flash/EEPROM access.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "7.1 Table Reads and Table Writes\nThe Flash program memory is readable, writable and erasable during normal operation over the entire VDD range.\nA read from program memory is executed on one byte at a time. A write to program memory is executed on blocks  of  64  bytes  at  a  time.  Program  memory  is erased in blocks of 64 bytes at a time. A bulk erase operation may not be issued from user code.\nWriting or erasing program memory will cease instruction fetches until the operation is complete. The program memory cannot be accessed during the write or erase, therefore, code cannot execute. An internal programming timer terminates program memory writes and erases.\nA value written to program memory does not need to be a valid instruction. Executing  a  program  memory location  that  forms  an  invalid  instruction  results  in  a NOP .\nIn order to read and write program memory, there are two operations that allow the processor to move bytes between the program memory space and the data RAM:\n\u00b7 Table Read ( TBLRD )\n\u00b7 Table Write ( TBLWT )\nThe program memory space is 16 bits wide, while the data RAM space is 8 bits wide. Table reads and table writes move data between these two memory spaces through an 8-bit register (TABLAT).",
    "7.1 Table Reads and Table Writes\nTable  read  operations  retrieve  data  from  program memory  and  place  it  into  the  data  RAM  space. Figure 7-1  shows  the  operation  of  a  table  read  with program memory and data RAM.\nTable write operations store data from the data memory space  into  holding  registers  in  program  memory.  The procedure to write the contents of the holding registers into program memory is detailed in Section 7.5 'Writing to  Flash  Program  Memory' . Figure 7-2  shows  the operation of a table write with program memory and data RAM.\nTable operations work with byte entities. A table block containing data, rather than program instructions, is not required to be word aligned. Therefore, a table block can start and end at any byte address. If a table write is being used  to  write  executable  code  into  program  memory, program instructions will need to be word-aligned.",
    "7.2 Control Registers\nSeveral control registers are used in conjunction with the TBLRD and TBLWT instructions. These include the:\nThe FREE bit, when set, will allow a program memory erase operation. When  FREE  is  set, the erase operation is initiated on the next WR command. When FREE is clear, only writes are enabled.\n\u00b7 EECON1 register\n\u00b7 EECON2 register\n\u00b7 TABLAT register\n\u00b7 TBLPTR registers",
    "7.2.1 EECON1 AND EECON2 REGISTERS\nThe  EECON1  register  (Register 7-1)  is  the  control register for memory accesses. The EECON2 register is not  a  physical  register;  it  is  used  exclusively  in  the memory write and erase sequences. Reading EECON2 will read all ' 0 's.\nThe EEPGD control bit determines if the access will be a  program or  data  EEPROM memory access. When clear,  any  subsequent operations will operate on the data  EEPROM  memory.  When  set,  any  subsequent operations will operate on the program memory.\nThe CFGS control bit determines if the access will be to the Configuration/Calibration registers or to program memory/data EEPROM memory. When set, subsequent  operations  will  operate  on  Configuration registers  regardless  of  EEPGD  (see Section 23.0 'Special Features of the CPU' ). When clear, memory selection access is determined by EEPGD.\nThe WREN bit, when set, will allow a write operation. On power-up, the WREN bit is clear. The WRERR bit is set  in  hardware  when  the WR  bit  is  set  and  cleared when the internal programming timer expires and the write operation is complete.",
    "Note:\nDuring  normal  operation,  the  WRERR may read as ' 1 '.  This can indicate that a write  operation  was  prematurely  terminated by a Reset, or a write operation was attempted improperly.\nThe WR control bit initiates  write operations. The  bit cannot be cleared, only set, in software; it is cleared in hardware at the completion of the write operation.\nNote:, 1 = The EEIF interrupt flag bit (PIR2<4>) is set when the write is complete. It must be cleared in software.",
    "REGISTER 7-1: EECON1: DATA EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = -. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7, R/W-x = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/S-0 = bit 7. bit 7, R/S-0 = bit 0",
    "REGISTER 7-1: EECON1: DATA EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Set only bit (cannot be cleared in software). Legend:, 2 = S = Set only bit (cannot be cleared in software). Legend:, 3 = S = Set only bit (cannot be cleared in software). R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory",
    "bit 6\nCFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 4 FREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write only",
    "bit 3 WRERR: Flash Program/Data EEPROM Error Flag bit (1)\n1 = A write operation is prematurely terminated (any Reset during self-timed programming in normal operation, or an improper write attempt)\n0 = The write operation completed",
    "bit 2\nWREN: Flash Program/Data EEPROM Write Enable bit\n1 = Allows write cycles to Flash program/data EEPROM\n0 = Inhibits write cycles to Flash program/data EEPROM",
    "bit 1 WR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle to the EEPROM is complete",
    "bit 0 RD: Read Control bit\n1 = Initiates an EEPROM read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 or CFGS = 1 .)\n0 = Does not initiate an EEPROM read\nNote 1: When a WRERR occurs, the EEPGD and CFGS bits are not cleared. This allows tracing of the error condition.",
    "7.2.4 TABLE POINTER BOUNDARIES\nThe Table Latch (TABLAT) is an 8-bit register mapped into the SFR space. The Table Latch register is used to hold 8-bit data during data transfers between program memory and data RAM.",
    "7.2.3 TBLPTR - TABLE POINTER REGISTER\nThe Table Pointer (TBLPTR) register addresses a byte within the program memory. The TBLPTR is comprised of three SFR registers: Table Pointer Upper Byte, Table Pointer High Byte and Table Pointer Low Byte (TBLPTRU:TBLPTRH:TBLPTRL).  These  three  registers join  to  form a  22-bit  wide  pointer.  The  low-order 21 bits allow the device to address up to 2 Mbytes of program memory space. The 22nd bit allows access to the Device ID, the user ID and the Configuration bits.\nTBLPTR is  used  in  reads,  writes  and  erases  of  the Flash program memory.\nWhen a TBLRD is executed, all 22 bits of the TBLPTR determine  which  byte  is  read  from  program  memory into TABLAT.",
    "7.2.3 TBLPTR - TABLE POINTER REGISTER\nWhen a TBLWT is executed, the six LSbs of the Table Pointer register (TBLPTR<5:0>) determine which of the 64  program  memory  holding  registers  is  written  to. When the timed write to program memory begins (via the WR bit), the 16 MSbs of the TBLPTR (TBLPTR<21:6>)  determine  which  program  memory block  of  64  bytes  is  written  to.  For  more  detail,  see Section 7.5 'Writing to Flash Program Memory' .\nThe  Table  Pointer  register,  TBLPTR,  is  used  by  the TBLRD and TBLWT instructions. These instructions can update the TBLPTR in one of four ways based on the table operation. These operations are shown in Table 7-1. These operations on the TBLPTR only affect the low-order 21 bits.\nWhen an erase of program memory is executed, the 16 MSbs of the Table Pointer register (TBLPTR<21:6>) point to the 64-byte block that will be erased. The Least Significant bits (TBLPTR<5:0>) are ignored.",
    "7.2.3 TBLPTR - TABLE POINTER REGISTER\nFigure 7-3 describes the relevant boundaries of TBLPTR based on Flash program memory operations.\nTABLE 7-1: TABLE POINTER OPERATIONS WITH TBLRD AND TBLWT INSTRUCTIONS\n\nTBLRD* TBLWT*, Operation on Table Pointer = TBLPTR is not modified. TBLRD*+ TBLWT*+, Operation on Table Pointer = TBLPTR is incremented after the read/write. TBLRD*- TBLWT*-, Operation on Table Pointer = TBLPTR is decremented after the read/write. TBLRD+* TBLWT+*, Operation on Table Pointer = TBLPTR is incremented before the read/write",
    "7.3 Reading the Flash Program Memory\nThe TBLRD instruction  is  used  to  retrieve  data  from program memory and places it into data RAM. Table reads from program memory are performed one byte at a time.\nTBLPTR points to a byte address in program space. Executing TBLRD places  the  byte  pointed  to  into TABLAT. In addition, TBLPTR can be modified automatically for the next table read operation.\nThe internal program memory is typically organized by words. The Least Significant bit of the address selects between the high and low bytes of the word. Figure 7-4 shows  the  interface  between  the  internal  program memory and the TABLAT.",
    "EXAMPLE 7-1: READING A FLASH PROGRAM MEMORY WORD\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. READ_WORD, 1 = READ_WORD. READ_WORD, 2 = READ_WORD. , 1 = TBLRD*+ MOVF MOVWF TBLRD*+ MOVF MOVWF. , 2 = . , 1 = . , 2 = TABLAT, W. , 1 = . , 2 = . , 1 = . , 2 = TABLAT, W. , 1 = . , 2 = WORD_ODD",
    "7.4 Erasing Flash Program Memory\nThe minimum erase block is 32 words or 64 bytes. Only through the use of an external programmer, or through ICSP control, can larger blocks of program memory be bulk  erased.  Word  erase  in  the  Flash  array  is  not supported.\nWhen  initiating  an  erase  sequence  from  the  microcontroller itself, a block of 64 bytes of program memory is erased. The Most Significant 16 bits of the TBLPTR<21:6>  point  to  the block being erased. TBLPTR<5:0> are ignored.\nThe EECON1 register commands the erase operation. The  EEPGD  bit  must  be  set  to  point  to  the  Flash program memory. The WREN bit must be set to enable write operations. The FREE bit is set to select an erase operation.\nFor protection, the write initiate sequence for EECON2 must be used.",
    "7.4.1 FLASH PROGRAM MEMORY ERASE SEQUENCE\nThe sequence of events for erasing a block of internal program memory location is:\n1. Load Table Pointer register with address of row being erased.\n2. Set the EECON1 register for the erase operation:\n\u00b7 set EEPGD bit to point to program memory;\n\u00b7 clear the CFGS bit to access program memory;\n\u00b7 set WREN bit to enable writes;\n\u00b7 set FREE bit to enable the erase.\n3. Disable interrupts.\n4. Write 55h to EECON2.\n5. Write 0AAh to EECON2.\n6. Set  the  WR  bit.  This  will  begin  the  row  erase cycle.\nA long write is necessary for erasing the internal Flash. Instruction  execution  is  halted  while  in  a  long  write cycle. The long write will be terminated by the internal programming timer.\n7. The  CPU  will  stall  for  duration  of  the  erase (about 2 ms using internal timer).\n8. Re-enable interrupts.",
    "EXAMPLE 7-2: ERASING A FLASH PROGRAM MEMORY ROW\nERASE_ROW, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. ERASE_ROW, 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. ERASE_ROW, 3 = ; load TBLPTR with the base ; address of the memory block. Required Sequence, 1 = MOVLW MOVWF MOVLW MOVWF BSF BSF. Required Sequence, 2 = 55h EECON2 0AAh EECON2 EECON1, WR INTCON, GIE. Required Sequence, 3 = ; write 55h ; write 0AAh ; start erase (CPU stall) ; re-enable interrupts",
    "7.5 Writing to Flash Program Memory\nThe  minimum  programming  block  is  32  words  or 64 bytes. Word or byte programming is not supported.\nTable  writes  are  used  internally  to  load  the  holding registers needed to program the Flash memory. There are  64  holding  registers  used  by  the  table  writes  for programming.\nThe  long  write  is  necessary  for  programming  the internal Flash. Instruction execution is halted while in a long write cycle. The long write will be terminated by the internal programming timer.\nThe  EEPROM  on-chip  timer  controls  the  write  time. The write/erase voltages are generated by an on-chip charge pump, rated to operate over the voltage range of the device.\nSince the Table Latch (TABLAT) is only a single byte, the TBLWT instruction may  need  to  be  executed 64 times  for  each  programming  operation.  All  of  the table  write  operations  will  essentially  be  short  writes because only the holding registers are written. At the end of updating  the  64  holding  registers,  the  EECON1 register must be written to in order to start the programming operation with a long write.",
    "Note:\nThe default value of the holding registers on device Resets and after write operations is FFh.  A  write  of  FFh  to  a  holding  register does not modify that byte. This means that individual bytes of program memory may be modified, provided that the change does not attempt to change any bit from a ' 0 ' to a ' 1 '. When modifying  individual  bytes,  it  is  not necessary to load all  64  holding  registers before executing a write operation.",
    "7.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\nThe sequence of events for programming an internal program memory location should be:\n1. Read 64 bytes into RAM.\n2. Update data values in RAM as necessary.\n3. Load Table Pointer register with address being erased.\n4. Execute the row erase procedure.\n5. Load Table Pointer register with address of first byte being written.\n6. Write the 64 bytes into the holding registers with auto-increment.\n7. Set the EECON1 register for the write operation:\n\u00b7 set EEPGD bit to point to program memory;\n\u00b7 clear the CFGS bit to access program memory;\n\u00b7 set WREN to enable byte writes.\n8. Disable interrupts.\n9. Write 55h to EECON2.\n10. Write 0AAh to EECON2.\n11. Set the WR bit. This will begin the write cycle.\n12. The CPU will stall for duration of the write (about 2 ms using internal timer).\n13. Re-enable interrupts.\n14. Verify the memory (table read).\nThis procedure will require about 6 ms to update one row of 64 bytes of memory. An example of the required code is given in Example 7-3.",
    "Note:\nBefore  setting the WR  bit, the Table Pointer  address  needs  to  be  within  the intended address range of the 64 bytes in the holding register.",
    "PIC18F2525/2620/4525/4620\nEXAMPLE 7-3:",
    "WRITING TO FLASH PROGRAM MEMORY\nREAD_BLOCK, 1 = MOVLW MOVWF. READ_BLOCK, 2 = D'64 COUNTER. READ_BLOCK, 3 = ; number of bytes in erase block. , 1 = MOVLW. , 2 = BUFFER_ADDR_HIGH. , 3 = ; point to buffer. , 1 = MOVWF. , 2 = . , 3 = . , 1 = . , 2 = FSR0H. , 3 = . , 1 = MOVLW. , 2 = BUFFER_ADDR_LOW FSR0L. , 3 = . , 1 = MOVWF MOVLW. , 2 = CODE_ADDR_UPPER. , 3 = ; Load TBLPTR with the base. , 1 = MOVWF. , 2 = TBLPTRU. , 3 = ; address of the memory block. , 1 = MOVLW. , 2 = CODE_ADDR_HIGH. , 3 = . , 1 = MOVWF. , 2 = TBLPTRH. , 3 = . , 1 = MOVLW. , 2 = CODE_ADDR_LOW. , 3 = . , 1 =",
    "WRITING TO FLASH PROGRAM MEMORY\nMOVWF. , 2 = . , 3 = . , 1 = . , 2 = TBLPTRL. , 3 = . , 1 = TBLRD*+. , 2 = . , 3 = ; read into TABLAT, and inc. , 1 = MOVF. , 2 = TABLAT, W. , 3 = ; get data. , 1 = MOVWF. , 2 = POSTINC0. , 3 = ; store data. , 1 = DECFSZ. , 2 = COUNTER. , 3 = ; done?. , 1 = . , 2 = READ_BLOCK. , 3 = ; repeat. , 1 = BRA. , 2 = . , 3 = . , 1 = MOVLW. , 2 = DATA_ADDR_HIGH. , 3 = ; point to buffer. , 1 = MOVWF. , 2 = FSR0H. , 3 = . , 1 = MOVLW. , 2 = DATA_ADDR_LOW. , 3 = . , 1 = MOVWF. , 2 = FSR0L. , 3 = . , 1 = MOVLW. , 2 =",
    "WRITING TO FLASH PROGRAM MEMORY\nNEW_DATA_LOW. , 3 = ; update buffer word. , 1 = MOVWF. , 2 = POSTINC0. , 3 = . , 1 = MOVLW. , 2 = NEW_DATA_HIGH. , 3 = . , 1 = MOVWF. , 2 = INDF0. , 3 = . ERASE_BLOCK, 1 = . ERASE_BLOCK, 2 = . ERASE_BLOCK, 3 = . , 1 = MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH. , 3 = ; ;. , 1 = MOVWF. , 2 = . , 3 = . , 1 = MOVLW. , 2 = TBLPTRH. , 3 = . , 1 = . , 2 = CODE_ADDR_LOW. , 3 = . , 1 = MOVWF. , 2 = TBLPTRL. , 3 = . , 1 = BSF. , 2 = EECON1, EEPGD. , 3 = ; point to Flash program memory. , 1 = BCF. , 2 = EECON1, CFGS. ,",
    "WRITING TO FLASH PROGRAM MEMORY\n3 = ; access Flash program memory. , 1 = BSF. , 2 = EECON1, WREN. , 3 = ; enable write to memory. , 1 = BSF. , 2 = EECON1, FREE. , 3 = ; enable Row Erase operation. , 1 = BCF. , 2 = INTCON, GIE. , 3 = ; disable interrupts. , 1 = MOVLW. , 2 = 55h. , 3 = . Required, 1 = MOVWF. Required, 2 = EECON2. Required, 3 = ; write 55h. Sequence, 1 = MOVLW. Sequence, 2 = 0AAh. Sequence, 3 = . , 1 = MOVWF. , 2 = EECON2. , 3 = ; write 0AAh. , 1 = BSF. , 2 = EECON1, WR. , 3 = ; start erase (CPU stall). , 1 = . , 2 = INTCON, GIE. , 3 = ; re-enable interrupts. , 1 = BSF. , 2 = . , 3 = ; dummy read decrement. , 1 = TBLRD*-. , 2 =",
    "WRITING TO FLASH PROGRAM MEMORY\nBUFFER_ADDR_HIGH. , 3 = ; point to buffer. , 1 = MOVLW. , 2 = FSR0H. , 3 = . , 1 = MOVWF. , 2 = . , 3 = . , 1 = MOVLW. , 2 = BUFFER_ADDR_LOW. , 3 = . , 1 = MOVWF. , 2 = FSR0L. , 3 = . WRITE_BUFFER_BACK, 1 = . WRITE_BUFFER_BACK, 2 = . WRITE_BUFFER_BACK, 3 = . , 1 = MOVLW. , 2 = D'64. , 3 = ; number of bytes in holding register. , 1 = MOVWF. , 2 = COUNTER. , 3 = . , 1 = TBLWT+*. , 2 = . , 3 = ; write data, perform a short write. , 1 = . , 2 = . , 3 = ; to internal TBLWT holding register.. , 1 = DECFSZ. , 2 = COUNTER. , 3 = ; loop until buffers are full. , 1 = BRA. , 2 = WRITE_WORD_TO_HREGS. ,",
    "WRITING TO FLASH PROGRAM MEMORY\n3 = ",
    "EXAMPLE 7-3: WRITING TO FLASH PROGRAM MEMORY (CONTINUED)\nPROGRAM_MEMORY, 1 = PROGRAM_MEMORY. PROGRAM_MEMORY, 2 = PROGRAM_MEMORY. Required Sequence, 1 = BSF EECON1, EEPGD EECON1, CFGS. Required Sequence, 2 = ; point to Flash program memory. Required Sequence, 1 = BCF. Required Sequence, 2 = ; access Flash program memory. Required Sequence, 1 = BSF EECON1,. Required Sequence, 2 = WREN ; enable write to memory. Required Sequence, 1 = BCF INTCON,. Required Sequence, 2 = GIE ; disable interrupts. , 1 = MOVLW. , 2 = 55h EECON2. , 1 = MOVWF. , 2 = ; write. , 1 = MOVLW 0AAh. , 2 = . , 1 = MOVWF. , 2 = EECON2 ; write. , 1 = BSF. , 2 = EECON1, WR ; start program (CPU stall). , 1 = BSF. , 2 = INTCON, GIE ; re-enable interrupts. , 1 = BCF. , 2 = EECON1, WREN ; disable",
    "EXAMPLE 7-3: WRITING TO FLASH PROGRAM MEMORY (CONTINUED)\nwrite to memory",
    "7.5.2 WRITE VERIFY\nDepending  on  the  application,  good  programming practice  may  dictate  that  the  value  written  to  the memory should be verified against the original value. This should be used in applications where excessive writes can stress bits near the specification limit.",
    "7.5.4 PROTECTION AGAINST SPURIOUS WRITES\nTo  protect  against  spurious  writes  to  Flash  program memory,  the  write  initiate  sequence  must  also  be followed.  See Section 23.0  'Special  Features  of the CPU' for more detail.",
    "7.6 Flash Program Operation During Code Protection\nIf a write is terminated by an unplanned event, such as loss  of  power  or  an  unexpected  Reset,  the  memory location just programmed should be verified and reprogrammed if needed. If the write operation is interrupted by  a  MCLR Reset  or  a  WDT  Time-out  Reset  during normal operation, the user can check the WRERR bit and rewrite the location(s) as needed.\nSee Section 23.5 'Program Verification  and Code Protection' for  details  on  code  protection  of  Flash program memory.",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Reset Valueson page = 49. TBPLTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>).",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTBPLTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Reset Valueson page = 49. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 =",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nProgram Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Reset Valueson page = 49. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Reset Valueson page = 49. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 =",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nINT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Valueson page = 49. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Reset Valueson page = 51. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 =",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nCFGS. EECON1, Bit 5 = -. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Reset Valueson page = 51. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Valueson page = 52. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 =",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Valueson page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Valueson page = 52\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during Flash/EEPROM access.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "8.1 Introduction\nAll PIC18 devices include an 8 x 8 hardware multiplier as part of the ALU. The multiplier performs an unsigned operation and yields a 16-bit result that is stored in the product register pair, PRODH:PRODL. The multiplier's operation  does  not  affect  any  flags  in  the  STATUS register.\nMaking multiplication a hardware operation allows it to be completed in a single instruction cycle. This has the advantages  of  higher  computational  throughput  and reduced  code  size  for  multiplication  algorithms  and allows the PIC18 devices to be used in many applications previously reserved for digital signal processors. A comparison  of various hardware  and  software multiply operations, along with the savings in memory and execution time, is shown in Table 8-1.",
    "8.2 Operation\nExample 8-1 shows the instruction sequence for an 8 x 8 unsigned multiplication. Only one instruction is required when  one  of  the  arguments  is  already  loaded  in  the WREG register.\nExample 8-2 shows the sequence to do an 8 x 8 signed multiplication.  To  account  for  the  sign  bits  of  the arguments, each argument's Most Significant bit (MSb) is tested and the appropriate subtractions are done.",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n8 x 8 unsigned, Multiply Method = Without hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 13. 8 x 8 unsigned, Cycles (Max). = 69. 8 x 8 unsigned, Time.@40 MHz = 6.9 \u03bc s. 8 x 8 unsigned, Time.@10 MHz = 27.6 \u03bc s. 8 x 8 unsigned, Time.@4MHz = 69 \u03bc s. 8 x 8 unsigned, Multiply Method = Hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 1. 8 x 8 unsigned, Cycles (Max). = 1. 8 x 8 unsigned, Time.@40 MHz = 100 ns. 8 x 8 unsigned, Time.@10 MHz = 400 ns. 8 x 8 unsigned, Time.@4MHz = 1 \u03bc s. 8 x 8 signed, Multiply Method = Without hardware multiply. 8 x 8 signed, Program Memory (Words). = 33. 8 x 8 signed, Cycles (Max). = 91. 8 x 8 signed, Time.@40 MHz = 9.1 \u03bc s. 8 x 8 signed, Time.@10",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\nMHz = 36.4 \u03bc s. 8 x 8 signed, Time.@4MHz = 91 \u03bc s. 8 x 8 signed, Multiply Method = Hardware multiply. 8 x 8 signed, Program Memory (Words). = 6. 8 x 8 signed, Cycles (Max). = 6. 8 x 8 signed, Time.@40 MHz = 600 ns. 8 x 8 signed, Time.@10 MHz = 2.4 \u03bc s. 8 x 8 signed, Time.@4MHz = 6 \u03bc s. 16 x 16 unsigned, Multiply Method = Without hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 21. 16 x 16 unsigned, Cycles (Max). = 242. 16 x 16 unsigned, Time.@40 MHz = 24.2 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 96.8 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 242 \u03bc s. 16 x 16 unsigned, Multiply Method = Hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 28. 16 x 16 unsigned, Cycles (Max). =",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n28. 16 x 16 unsigned, Time.@40 MHz = 2.8 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 11.2 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 28 \u03bc s. 16 x 16 signed, Multiply Method = Without hardware multiply. 16 x 16 signed, Program Memory (Words). = 52. 16 x 16 signed, Cycles (Max). = 254. 16 x 16 signed, Time.@40 MHz = 25.4 \u03bc s. 16 x 16 signed, Time.@10 MHz = 102.6 \u03bc s. 16 x 16 signed, Time.@4MHz = 254 \u03bc s. 16 x 16 signed, Multiply Method = Hardware multiply. 16 x 16 signed, Program Memory (Words). = 35. 16 x 16 signed, Cycles (Max). = 40. 16 x 16 signed, Time.@40 MHz = 4.0 \u03bc s. 16 x 16 signed, Time.@10 MHz = 16.0 \u03bc s. 16 x 16 signed, Time.@4MHz = 40 \u03bc s",
    "TABLE 8-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\nEXAMPLE 8-1:, 1 = 8 x 8 UNSIGNED MULTIPLY ROUTINE. MOVF ARG1, W MULWF ARG2, 1 = ; ; ARG1 * ARG2 -> ; PRODH:PRODL",
    "EXAMPLE 8-2: 8 x 8 SIGNED MULTIPLY\nROUTINE\nMOVF MULWF, 1 = ARG1, W ARG2. MOVF MULWF, 2 = ; ARG1 * ARG2 -> ; PRODH:PRODL. BTFSC SUBWF, 1 = ARG2, SB PRODH, F. BTFSC SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH. MOVF BTFSC SUBWF, 1 = ARG2, W SB F. MOVF BTFSC SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH ; - ARG2. , 1 = ARG1, PRODH,. , 2 = ",
    "PIC18F2525/2620/4525/4620\nExample 8-3  shows  the  sequence  to  do  a  16  x  16 unsigned multiplication. Equation 8-1 shows the algorithm that is used. The 32-bit result is stored in four registers (RES3:RES0).\nEQUATION 8-2:",
    "EQUATION 8-1:\n16 x 16 UNSIGNED MULTIPLICATION ALGORITHM\nRES3:RES0\n=\nARG1H:ARG1L   ARG2H:ARG2L \u2022\n=\n(ARG1H   ARG2H   2 16 ) + \u2022 \u2022\n(ARG1H   ARG2L   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2H   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2L) \u2022",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1L * ARG2L-> ; PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES1. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES0. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2H-> PRODH:PRODL.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2H-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2L-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = \nExample 8-4  shows  the  sequence  to  do  a  16  x  16 signed  multiply.  Equation 8-2  shows  the  algorithm used.  The  32-bit  result  is  stored  in  four  registers (RES3:RES0).  To  account  for  the  sign  bits  of  the arguments, the MSb for each argument pair is tested and the appropriate subtractions are done.\n16 x 16 SIGNED MULTIPLICATION ALGORITHM\nRES3:RES0",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\n= ARG1H:ARG1L   ARG2H:ARG2L \u2022\n= (ARG1H   ARG2H   2 16 ) + \u2022 \u2022\n(ARG1H   ARG2L   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2H   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2L) + \u2022\n(-1 \u2022 ARG2H<7>   ARG1H:ARG1L   2 16 ) + \u2022 \u2022\n(-1 \u2022 ARG1H<7>   ARG2H:ARG2L   2 16 ) \u2022 \u2022",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nMULWF, ARG1L, W = ARG2L. MULWF,  = ;. MULWF,  = ARG1L * ARG2L -> PRODH:PRODL. MOVFF, ARG1L, W = PRODH, RES1. MOVFF,  = ;. MOVFF,  = . MOVFF, ARG1L, W = PRODL, RES0. MOVFF,  = ;. MOVFF,  = . MOVF, ARG1L, W = ARG1H, W. MOVF,  = . MOVF,  = . MULWF, ARG1L, W = ARG2H. MULWF,  = . MULWF,  = . , ARG1L, W = . ,  = ;. ,  = ARG1H * ARG2H -> PRODH:PRODL. MOVFF, ARG1L, W = PRODH, RES3. MOVFF,  = ;. MOVFF,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVFF, ARG1L, W = PRODL, RES2. MOVFF,  = ;. MOVFF,  = . MOVF, ARG1L, W = ARG1L, W. MOVF,  = . MOVF,  = . MULWF, ARG1L, W = ARG2H. MULWF,  = ;. MULWF,  = ARG1L * ARG2H -> PRODH:PRODL. MOVF, ARG1L, W = PRODL, W. MOVF,  = ;. MOVF,  = . ADDWF, ARG1L, W = RES1, F. ADDWF,  = ;. ADDWF,  = Add cross. MOVF, ARG1L, W = PRODH, W. MOVF,  = ;. MOVF,  = products. ADDWFC, ARG1L, W = RES2, F. ADDWFC,  = ;. ADDWFC,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . CLRF, ARG1L, W = WREG. CLRF,  = ;. CLRF,  = . ADDWFC, ARG1L, W = RES3, F. ADDWFC,  = ;. ADDWFC,  = . MOVF, ARG1L, W = ARG1H, W. MOVF,  = ;. MOVF,  = . MULWF, ARG1L, W = ARG2L. MULWF,  = ;. MULWF,  = ARG1H * ARG2L -> PRODH:PRODL. MOVF, ARG1L, W = PRODL, W. MOVF,  = ;. MOVF,  = . ADDWF, ARG1L, W = RES1, F. ADDWF,  = ;. ADDWF,  = Add cross. MOVF, ARG1L, W = PRODH, W. MOVF,  = ;. MOVF,  = products. ADDWFC, ARG1L, W = RES2, F. ADDWFC,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= ;. ADDWFC,  = . CLRF, ARG1L, W = WREG. CLRF,  = ;. CLRF,  = . ADDWFC, ARG1L, W = RES3, F. ADDWFC,  = ;. ADDWFC,  = . BTFSS, ARG1L, W = ARG2H, 7. BTFSS,  = ;. BTFSS,  = ARG2H:ARG2L neg?. BRA, ARG1L, W = SIGN_ARG1. BRA,  = ;. BRA,  = no, check ARG1. MOVF, ARG1L, W = ARG1L, W. MOVF,  = ;. MOVF,  = . SUBWF, ARG1L, W = RES2. SUBWF,  = ;. SUBWF,  = . MOVF, ARG1L, W = ARG1H, W. MOVF,  = ;. MOVF,  = . SUBWFB, ARG1L, W = RES3. SUBWFB,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . SUBWFB,  = . ; SIGN_ARG1 BTFSS, ARG1L, W = ARG1H, 7. ; SIGN_ARG1 BTFSS,  = ;. ; SIGN_ARG1 BTFSS,  = ARG1H:ARG1L neg?. BRA, ARG1L, W = CONT_CODE. BRA,  = ;. BRA,  = no, done. MOVF, ARG1L, W = ARG2L, W. MOVF,  = ;. MOVF,  = . SUBWF, ARG1L, W = RES2. SUBWF,  = ;. SUBWF,  = . MOVF, ARG1L, W = ARG2H, W. MOVF,  = ;. MOVF,  = . SUBWFB ;, ARG1L, W = RES3. SUBWFB ;,  = . SUBWFB ;,  = . CONT_CODE :, ARG1L, W = . CONT_CODE :,  = . CONT_CODE :,  = ",
    "9.0 I/O PORTS\nDepending on the device selected and features enabled, there are up to five ports available. Some pins of  the  I/O  ports  are  multiplexed  with  an  alternate function from the peripheral features on the device. In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin.\nEach port has three registers for its operation. These registers are:\n\u00b7 TRIS register (data direction register)\n\u00b7 PORT register (reads the levels on the pins of the device)\n\u00b7 LAT register (output latch)\nThe Data Latch (LAT register) is useful for read-modifywrite  operations  on  the  value  that  the  I/O  pins  are driving.\nA simplified  model  of  a  generic  I/O  port,  without  the interfaces to other peripherals, is shown in Figure 9-1.",
    "9.1 PORTA, TRISA and LATA Registers\nPORTA is a 8-bit  wide,  bidirectional  port.  The  corresponding Data Direction register is  TRISA.  Setting  a TRISA bit (= 1 ) will make the corresponding PORTA pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISA bit (= 0 ) will make the corresponding PORTA pin an output (i.e., put the contents of the output latch on the selected pin).\nReading the  PORTA register reads the  status of  the pins, whereas writing to it, will write to the port latch.\nThe Data Latch (LATA) register is also memory mapped. Read-modify-write operations on the LATA register read and write the latched output value for PORTA.",
    "9.1 PORTA, TRISA and LATA Registers\nThe  RA4  pin  is  multiplexed  with  the  Timer0  module clock  input  and  one  of  the  comparator  outputs  to become  the  RA4/T0CKI/C1OUT  pin.  Pins  RA6  and RA7 are multiplexed with the main oscillator pins; they are enabled as oscillator or I/O pins by the selection of the  main  oscillator  in  the  Configuration  register  (see Section 23.1 'Configuration Bits' for details). When they are not used as port pins, RA6 and RA7 and their associated TRIS and LAT bits are read as ' 0 '.\nThe  other  PORTA  pins  are  multiplexed  with  analog inputs,  the  analog  VREF+  and  VREF-  inputs  and  the comparator voltage reference output. The operation of pins  RA3:RA0  and  RA5  as  A/D  converter  inputs  is selected  by  clearing  or  setting  the  control  bits  in  the ADCON1 register (A/D Control Register 1).",
    "9.1 PORTA, TRISA and LATA Registers\nPins RA0 through RA5 may also be used as comparator inputs or outputs by setting the appropriate bits in the CMCON register. To use RA3:RA0 as digital inputs, it is also necessary to turn off the comparators.\nNote:, 1 = On a Power-on Reset, RA5 and RA3:RA0 are configured as analog inputs and read as ' 0 '. RA4 is configured as a digital input.\nThe RA4/T0CKI/C1OUT pin is a Schmitt Trigger input. All other PORTA pins have TTL input levels. All PORTA pins have full CMOS output drivers.\nThe TRISA register controls the direction of the PORTA pins, even when they are being used as analog inputs. The user must ensure the bits in the TRISA register are maintained set when using them as analog inputs.",
    "EXAMPLE 9-1: INITIALIZING PORTA\nCLRF, 1 = PORTA. CLRF, 2 = ; Initialize PORTA by ; clearing output ; data latches. CLRF, 1 = LATA. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF, 1 = 07h ADCON1. MOVLW MOVWF, 2 = ; Configure A/D ; for digital inputs. MOVWF, 1 = 07h. MOVWF, 2 = ; Configure comparators. MOVWF, 1 = CMCON. MOVWF, 2 = ; for digital input. MOVWF, 1 = TRISA. MOVWF, 2 = ; direction ; Set RA<7:6,3:0> as inputs ;. , 1 = . , 2 = RA<5:4> as outputs",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 0. RA0/AN0, I/O = O. RA0/AN0, I/O Type = DIG. RA0/AN0, Description = LATA<0> data output; not affected by analog input.. RA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = TTL. RA0/AN0, Description = PORTA<0> data input; disabled when analog input enabled.. RA0/AN0, Function = AN0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = ANA. RA0/AN0, Description = A/D input channel 0 and Comparator C1- input. Default input configuration on POR; does not affect digital output.. RA1/AN1, Function = RA1. RA1/AN1, TRIS",
    "TABLE 9-1: PORTA I/O SUMMARY\nSetting = 0. RA1/AN1, I/O = O. RA1/AN1, I/O Type = DIG. RA1/AN1, Description = LATA<1> data output; not affected by analog input.. RA1/AN1, Function = RA1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = TTL. RA1/AN1, Description = PORTA<1> data input; disabled when analog input enabled.. RA1/AN1, Function = AN1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = ANA. RA1/AN1, Description = A/D input channel 1 and Comparator C2- input. Default input configuration on POR; does not affect digital output.. RA2/AN2/ VREF-/CVREF, Function = RA2. RA2/AN2/ VREF-/CVREF, TRIS Setting =",
    "TABLE 9-1: PORTA I/O SUMMARY\n0. RA2/AN2/ VREF-/CVREF, I/O = O. RA2/AN2/ VREF-/CVREF, I/O Type = DIG. RA2/AN2/ VREF-/CVREF, Description = LATA<2> data output; not affected by analog input. Disabled when CVREF output enabled.. RA2/AN2/ VREF-/CVREF, Function = RA2. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1. RA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = TTL. RA2/AN2/ VREF-/CVREF, Description = PORTA<2> data input. Disabled when analog functions enabled; disabled when CVREF output enabled.. RA2/AN2/ VREF-/CVREF, Function = AN2. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = A/D input channel 2 and Comparator C2+ input. Default input configuration on POR; not affected by analog output.. RA2/AN2/ VREF-/CVREF, Function = VREF-. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1. RA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = A/D and comparator voltage reference low input.. RA2/AN2/ VREF-/CVREF, Function = CVREF. RA2/AN2/ VREF-/CVREF, TRIS Setting = x. RA2/AN2/",
    "TABLE 9-1: PORTA I/O SUMMARY\nVREF-/CVREF, I/O = O. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = Comparator voltage reference output. Enabling this feature disables digital I/O.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 0. RA3/AN3/VREF+, I/O = O. RA3/AN3/VREF+, I/O Type = DIG. RA3/AN3/VREF+, Description = LATA<3> data output; not affected by analog input.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = TTL. RA3/AN3/VREF+, Description = PORTA<3> data",
    "TABLE 9-1: PORTA I/O SUMMARY\ninput; disabled when analog input enabled.. RA3/AN3/VREF+, Function = AN3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D input channel 3 and Comparator C1+ input. Default input configuration on POR.. RA3/AN3/VREF+, Function = VREF+. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D and comparator voltage reference high input.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 0. RA4/T0CKI/C1OUT, I/O = O.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA4/T0CKI/C1OUT, I/O Type = DIG. RA4/T0CKI/C1OUT, Description = LATA<4> data output.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = PORTA<4> data input; default configuration on POR.. RA4/T0CKI/C1OUT, Function = T0CKI. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = Timer0 clock input.. RA4/T0CKI/C1OUT, Function = C1OUT. RA4/T0CKI/C1OUT, TRIS Setting = 0.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA4/T0CKI/C1OUT, I/O = O. RA4/T0CKI/C1OUT, I/O Type = DIG. RA4/T0CKI/C1OUT, Description = Comparator 1 output; takes priority over port data.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description = LATA<5> data output; not affected by analog input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/ HLVDIN/C2OUT, Description = PORTA<5> data input; disabled when analog input enabled.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = AN4. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = A/D input channel 4. Default configuration on POR.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = SS. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/ HLVDIN/C2OUT, Description = Slave Select input for MSSP module.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = HLVDIN. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = High/Low-Voltage Detect external trip point input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = C2OUT. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O. RA5/AN4/SS/",
    "TABLE 9-1: PORTA I/O SUMMARY\nHLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description = Comparator 2 output; takes priority over port data.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 0. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = LATA<6> data output. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 1. OSC2/CLKO/RA6, I/O = I. OSC2/CLKO/RA6, I/O Type = TTL. OSC2/CLKO/RA6, Description = PORTA<6> data input. Enabled in RCIO, INTIO2 and ECIO modes only..",
    "TABLE 9-1: PORTA I/O SUMMARY\nOSC2/CLKO/RA6, Function = OSC2. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = ANA. OSC2/CLKO/RA6, Description = Main oscillator feedback output connection (XT, HS and LP modes).. OSC2/CLKO/RA6, Function = CLKO. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = System cycle clock output (FOSC/4) in RC, INTIO1 and EC Oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 0. OSC1/CLKI/RA7, I/O = O.",
    "TABLE 9-1: PORTA I/O SUMMARY\nOSC1/CLKI/RA7, I/O Type = DIG. OSC1/CLKI/RA7, Description = LATA<7> data output. Disabled in external oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 1. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = TTL. OSC1/CLKI/RA7, Description = PORTA<7> data input. Disabled in external oscillator modes.. OSC1/CLKI/RA7, Function = OSC1. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main oscillator input connection.. OSC1/CLKI/RA7, Function = CLKI.",
    "TABLE 9-1: PORTA I/O SUMMARY\nOSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main clock input connection.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 52. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 52.",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nTRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 5 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 4 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 3 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 2 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 1 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 0 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Reset Values on page = 52. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 =",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPCFG0. ADCON1, Reset Values on page = 51. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 51. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTA.",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\n- Note 1: RA7:RA6 and their associated latch and data direction bits are enabled as I/O pins based on oscillator configuration; otherwise, they are read as ' 0 '.",
    "9.2 PORTB, TRISB and LATB Registers\nPORTB  is  an  8-bit wide, bidirectional port. The corresponding Data Direction register is TRISB. Setting a TRISB bit (= 1 ) will make the corresponding PORTB pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISB bit (= 0 ) will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin).\nFour of the PORTB pins (RB7:RB4) have an interrupton-change feature. Only pins configured as inputs can cause  this  interrupt  to  occur  (i.e.,  any  RB7:RB4  pin configured as an output is excluded from the interrupton-change comparison). The input pins (of RB7:RB4) are  compared  with  the  old  value  latched  on  the  last read of PORTB. The 'mismatch' outputs of RB7:RB4 are  ORed together to generate the RB Port Change Interrupt with Flag bit, RBIF (INTCON<0>).",
    "9.2 PORTB, TRISB and LATB Registers\nThe  Data  Latch  register (LATB)  is also memory mapped.  Read-modify-write  operations  on  the  LATB register  read  and  write  the  latched  output  value  for PORTB.",
    "EXAMPLE 9-2: INITIALIZING PORTB\nCLRF, 1 = PORTB. CLRF, 2 = ; Initialize PORTB by ; clearing output ; data latches. CLRF, 1 = LATB. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0Fh. MOVLW, 2 = ; Set RB<4:0> as. MOVLW, 1 = 0CFh. MOVLW, 2 = ; PBADEN is set) ; Value used to ; initialize data. MOVWF, 1 = TRISB. MOVWF, 2 = ; Set RB<3:0> as inputs ; RB<5:4> as outputs ; RB<7:6> as inputs\nEach of the PORTB pins has a weak internal pull-up. A single  control  bit  can  turn  on  all  the  pull-ups.  This  is performed by clearing bit, RBPU (INTCON2<7>). The weak pull-up is automatically turned off when the port pin  is configured  as  an  output.  The  pull-ups  are disabled on a Power-on Reset.\nNote:",
    "EXAMPLE 9-2: INITIALIZING PORTB\nOn  a  Power-on  Reset,  RB4:RB0  are configured as analog inputs by default and read  as  ' 0 ';  RB7:RB5  are  configured  as digital inputs.\nBy  programming  the  Configuration  bit, PBADEN,  RB4:RB0  will  alternatively  be configured as digital inputs on POR.\nThis  interrupt  can  wake  the  device  from  the  Sleep mode,  or  any  of  the  Idle  modes.  The  user,  in  the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  PORTB  (except  with  the MOVFF (ANY), PORTB instruction).\nb) 1 TCY.\nc) Clear flag bit, RBIF.\nA mismatch condition will continue to set flag bit, RBIF. Reading  PORTB  and  waiting  1  TCY  will  end  the mismatch  condition  and  allow  flag  bit,  RBIF,  to  be cleared.\nThe interrupt-on-change  feature  is  recommended  for wake-up on key depression operation and operations where PORTB is only used for the interrupt-on-change feature. Polling of PORTB is not recommended while using the interrupt-on-change feature.",
    "EXAMPLE 9-2: INITIALIZING PORTB\nRB3  can  be  configured  by  the  Configuration  bit, CCP2MX, as the alternate peripheral pin for the CCP2 module (CCP2MX = 0 ).",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 0. RB0/INT0/FLT0/ AN12, I/O = O. RB0/INT0/FLT0/ AN12, I/O Type = DIG. RB0/INT0/FLT0/ AN12, Description = LATB<0> data output; not affected by analog input.. RB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = TTL. RB0/INT0/FLT0/ AN12, Description = PORTB<0> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB0/INT0/FLT0/ AN12, Function =",
    "TABLE 9-3: PORTB I/O SUMMARY\nINT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = External interrupt 0 input.. RB0/INT0/FLT0/ AN12, Function = FLT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = Enhanced PWM Fault input (ECCP1 module); enabled in software.. RB0/INT0/FLT0/ AN12, Function = AN12. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O",
    "TABLE 9-3: PORTB I/O SUMMARY\n= I. RB0/INT0/FLT0/ AN12, I/O Type = ANA. RB0/INT0/FLT0/ AN12, Description = A/D input channel 12. (1). RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 0. RB1/INT1/AN10, I/O = O. RB1/INT1/AN10, I/O Type = DIG. RB1/INT1/AN10, Description = LATB<1> data output; not affected by analog input.. RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = TTL. RB1/INT1/AN10, Description = PORTB<1> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1).",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB1/INT1/AN10, Function = INT1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ST. RB1/INT1/AN10, Description = External interrupt 1 input.. RB1/INT1/AN10, Function = AN10. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ANA. RB1/INT1/AN10, Description = A/D input channel 10. (1). RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 0. RB2/INT2/AN8, I/O = O. RB2/INT2/AN8, I/O Type = DIG. RB2/INT2/AN8, Description = LATB<2> data output; not affected by analog",
    "TABLE 9-3: PORTB I/O SUMMARY\ninput.. RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = TTL. RB2/INT2/AN8, Description = PORTB<2> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB2/INT2/AN8, Function = INT2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ST. RB2/INT2/AN8, Description = External interrupt 2 input.. RB2/INT2/AN8, Function = AN8. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ANA.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB2/INT2/AN8, Description = A/D input channel 8. (1). RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = LATB<3> data output; not affected by analog input.. RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = TTL. RB3/AN9/CCP2, Description = PORTB<3> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB3/AN9/CCP2, Function = AN9. RB3/AN9/CCP2,",
    "TABLE 9-3: PORTB I/O SUMMARY\nTRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ANA. RB3/AN9/CCP2, Description = A/D input channel 9. (1). RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = CCP2 compare and PWM output.. RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ST. RB3/AN9/CCP2, Description = CCP2 capture input..",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 0. RB4/KBI0/AN11, I/O = O. RB4/KBI0/AN11, I/O Type = DIG. RB4/KBI0/AN11, Description = LATB<4> data output; not affected by analog input.. RB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = PORTB<4> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB4/KBI0/AN11, Function = KBI0. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O =",
    "TABLE 9-3: PORTB I/O SUMMARY\nI. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = Interrupt on pin change.. RB4/KBI0/AN11, Function = AN11. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = ANA. RB4/KBI0/AN11, Description = A/D input channel 11. (1). RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 0. RB5/KBI1/PGM, I/O = O. RB5/KBI1/PGM, I/O Type = DIG. RB5/KBI1/PGM, Description = LATB<5> data output.. RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 1.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = PORTB<5> data input; weak pull-up when RBPU bit is cleared.. RB5/KBI1/PGM, Function = KBI1. RB5/KBI1/PGM, TRIS Setting = 1. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = Interrupt on pin change.. RB5/KBI1/PGM, Function = PGM. RB5/KBI1/PGM, TRIS Setting = x. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = ST. RB5/KBI1/PGM, Description = Single-Supply Programming mode entry (ICSP\u2122). Enabled by LVP Configuration",
    "TABLE 9-3: PORTB I/O SUMMARY\nbit; all other pin functions disabled.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 0. RB6/KBI2/PGC, I/O = O. RB6/KBI2/PGC, I/O Type = DIG. RB6/KBI2/PGC, Description = LATB<6> data output.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = PORTB<6> data input; weak pull-up when RBPU bit is cleared.. RB6/KBI2/PGC, Function = KBI2. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = Interrupt on pin change.. RB6/KBI2/PGC, Function = PGC. RB6/KBI2/PGC, TRIS Setting = x. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = ST. RB6/KBI2/PGC, Description = Serial execution (ICSP\u2122) clock input for ICSP and ICD operation. (3). RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS Setting = 0. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = LATB<7> data output.. RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD,",
    "TABLE 9-3: PORTB I/O SUMMARY\nTRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = PORTB<7> data input; weak pull-up when RBPU bit is cleared.. RB7/KBI3/PGD, Function = KBI3. RB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = Interrupt on pin change.. RB7/KBI3/PGD, Function = PGD. RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = Serial execution data output for ICSP and ICD operation.",
    "TABLE 9-3: PORTB I/O SUMMARY\n(3). RB7/KBI3/PGD, Function = . RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = ST. RB7/KBI3/PGD, Description = Serial execution data input for ICSP and ICD operation. (3)\nLegend: DIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: Configuration on POR is determined by the PBADEN Configuration bit. Pins are configured as analog inputs by default when PBADEN is set and digital inputs when PBADEN is cleared.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is ' 0 '. Default assignment is RC1.\n3: All other pin functions are disabled when ICSP or ICD is enabled.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 52. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nLatch). LATB, Reset Values on page = 52. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 52. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nINTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = -. INTCON2, Bit 0 = RBIP. INTCON2, Reset Values on page = 49. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Reset Values on page = 49. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTB.",
    "9.3 PORTC, TRISC and LATC Registers\nPORTC  is  an  8-bit wide, bidirectional port. The corresponding Data Direction register is TRISC. Setting  a  TRISC  bit  (= 1 )  will  make  the  corresponding PORTC pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISC bit  (= 0 )  will  make the corresponding PORTC pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATC)  is  also memory mapped.  Read-modify-write  operations  on  the  LATC register  read  and  write  the  latched  output  value  for PORTC.\nPORTC is multiplexed with several peripheral functions (Table 9-5). The  pins have Schmitt Trigger input buffers.  RC1  is  normally  configured  by  Configuration bit, CCP2MX, as the default peripheral pin of the CCP2 module (default/erased state, CCP2MX = 1 ).",
    "9.3 PORTC, TRISC and LATC Registers\nWhen  enabling  peripheral  functions,  care  should  be taken in defining TRIS bits for each PORTC pin. Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. The user should refer to the corresponding peripheral section for additional information.\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nThe  contents  of  the  TRISC  register  are  affected  by peripheral  overrides.  Reading  TRISC  always  returns the current contents, even though a peripheral device may be overriding one or more of the pins.",
    "EXAMPLE 9-3: INITIALIZING PORTC\nCLRF, 1 = PORTC. CLRF, 2 = ; Initialize PORTC by ; clearing output ; data latches. CLRF, 1 = LATC. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RC<3:0> as inputs ; RC<5:4> as outputs ; RC<7:6> as inputs",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC0/T1OSO/ T13CKI, Function = RC0. RC0/T1OSO/ T13CKI, TRIS Setting = 0. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O Type = DIG. RC0/T1OSO/ T13CKI, Description = LATC<0> data output.. RC0/T1OSO/ T13CKI, Function = . RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = PORTC<0> data input.. RC0/T1OSO/ T13CKI, Function = T1OSO. RC0/T1OSO/ T13CKI, TRIS Setting = x. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O Type =",
    "TABLE 9-5: PORTC I/O SUMMARY\nANA. RC0/T1OSO/ T13CKI, Description = Timer1 oscillator output; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC0/T1OSO/ T13CKI, Function = T13CKI. RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = Timer1/Timer3 counter input.. RC1/T1OSI/CCP2, Function = RC1. RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O. RC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = LATC<1> data output.. RC1/T1OSI/CCP2, Function = .",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = PORTC<1> data input.. RC1/T1OSI/CCP2, Function = T1OSI. RC1/T1OSI/CCP2, TRIS Setting = x. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ANA. RC1/T1OSI/CCP2, Description = Timer1 oscillator input; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC1/T1OSI/CCP2, Function = CCP2 (1). RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = CCP2 compare and PWM output; takes priority over port data.. RC1/T1OSI/CCP2, Function = . RC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = CCP2 capture input.. RC2/CCP1/P1A, Function = RC2. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = LATC<2> data output.. RC2/CCP1/P1A, Function = .",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST. RC2/CCP1/P1A, Description = PORTC<2> data input.. RC2/CCP1/P1A, Function = CCP1. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 compare or PWM output; takes priority over port data.. RC2/CCP1/P1A, Function = . RC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC2/CCP1/P1A, Description = ECCP1 capture input.. RC2/CCP1/P1A, Function = P1A (2). RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 Enhanced PWM output, channel A. May be configured for tri-state during Enhanced PWM shutdown events. Takes priority over port data.. RC3/SCK/SCL, Function = RC3. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = LATC<3> data output.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting =",
    "TABLE 9-5: PORTC I/O SUMMARY\n1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = PORTC<3> data input.. RC3/SCK/SCL, Function = SCK. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = SPI clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = SPI clock input (MSSP module).. RC3/SCK/SCL, Function = SCL. RC3/SCK/SCL,",
    "TABLE 9-5: PORTC I/O SUMMARY\nTRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = I 2 C\u2122 clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = I 2 C/SMB. RC3/SCK/SCL, Description = I 2 C clock input (MSSP module); input type depends on module setting.. RC4/SDI/SDA, Function = RC4. RC4/SDI/SDA, TRIS Setting = 0. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = LATC<4> data output..",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = PORTC<4> data input.. RC4/SDI/SDA, Function = SDI. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = SPI data input (MSSP module).. RC4/SDI/SDA, Function = SDA. RC4/SDI/SDA, TRIS Setting = 0. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = I 2 C data output (MSSP module); takes priority over",
    "TABLE 9-5: PORTC I/O SUMMARY\nport data.. RC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = I 2 C/SMB. RC4/SDI/SDA, Description = I 2 C data input (MSSP module); input type depends on module setting.. RC5/SDO, Function = RC5. RC5/SDO, TRIS Setting = 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = LATC<5> data output.. RC5/SDO, Function = . RC5/SDO, TRIS Setting = 1. RC5/SDO, I/O = I. RC5/SDO, I/O Type = ST. RC5/SDO, Description = PORTC<5> data input.. RC5/SDO, Function = SDO. RC5/SDO, TRIS Setting",
    "TABLE 9-5: PORTC I/O SUMMARY\n= 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = SPI data output (MSSP module); takes priority over port data.. RC6/TX/CK, Function = RC6. RC6/TX/CK, TRIS Setting = 0. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = LATC<6> data output.. RC6/TX/CK, Function = . RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = PORTC<6> data input.. RC6/TX/CK, Function = TX. RC6/TX/CK, TRIS Setting = 0. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC6/TX/CK, Description = Asynchronous serial transmit data output (EUSART module); takes priority over port data. User must configure as output.. RC6/TX/CK, Function = CK. RC6/TX/CK, TRIS Setting = 0. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = Synchronous serial clock output (EUSART module); takes priority over port data.. RC6/TX/CK, Function = . RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = Synchronous serial clock input (EUSART module).. RC7/RX/DT, Function = RC7. RC7/RX/DT, TRIS Setting = 0. RC7/RX/DT, I/O = O. RC7/RX/DT,",
    "TABLE 9-5: PORTC I/O SUMMARY\nI/O Type = DIG. RC7/RX/DT, Description = LATC<7> data output.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = PORTC<7> data input.. RC7/RX/DT, Function = RX. RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Asynchronous serial receive data input (EUSART module).. RC7/RX/DT, Function = DT. RC7/RX/DT, TRIS Setting = 0. RC7/RX/DT, I/O = O. RC7/RX/DT, I/O Type = DIG. RC7/RX/DT,",
    "TABLE 9-5: PORTC I/O SUMMARY\nDescription = Synchronous serial data output (EUSART module); takes priority over port data.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Synchronous serial data input (EUSART module). User must configure as an input.\nLegend: DIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; I 2 C/SMB = I 2 C/SMBus input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote\n1: Default assignment for CCP2 when the CCP2MX Configuration bit is set. Alternate assignment is RB3.\n2: Enhanced PWM output is available only on PIC18F4525/4620 devices.",
    "TABLE 9-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nPORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Reset Values on page = 52. LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch).",
    "TABLE 9-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nLATC, Reset Values on page = 52. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 52",
    "9.4 PORTD, TRISD and LATD Registers\nNote:\nPORTD  is  only  available  on  40/44-pin devices.\nPORTD  is  an  8-bit wide, bidirectional port. The corresponding Data Direction register is TRISD. Setting  a  TRISD  bit  (= 1 )  will  make  the  corresponding PORTD pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISD bit  (= 0 )  will  make the corresponding PORTD pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATD)  is  also memory mapped.  Read-modify-write  operations  on  the  LATD register  read  and  write  the  latched  output  value  for PORTD.\nAll pins on PORTD are implemented with Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.",
    "9.4 PORTD, TRISD and LATD Registers\nThree of the PORTD pins are multiplexed with outputs P1B, P1C and P1D of the Enhanced CCP module. The operation  of  these  additional  PWM  output  pins  is covered in greater detail in Section 16.0 'Enhanced Capture/Compare/PWM (ECCP) Module' .\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nPORTD can also be configured as an 8-bit wide microprocessor port (Parallel Slave Port) by setting control bit,  PSPMODE  (TRISE<4>).  In  this  mode,  the  input buffers  are  TTL.  See Section 9.6  'Parallel  Slave Port' for  additional  information on the Parallel Slave Port (PSP).\nNote:\nWhen the Enhanced PWM mode is used with either dual or quad outputs, the PSP functions of PORTD  are  automatically disabled.",
    "EXAMPLE 9-4: INITIALIZING PORTD\nCLRF, 1 = PORTD. CLRF, 2 = ; Initialize PORTD by ; clearing output ; data latches. CLRF, 1 = LATD. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISD. MOVWF, 2 = ; Set RD<3:0> as inputs ; RD<5:4> as outputs ; RD<7:6> as inputs",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD0/PSP0, Function = RD0. RD0/PSP0, TRIS Setting = 0. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = LATD<0> data output.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = 1. RD0/PSP0, I/O = I. RD0/PSP0, I/O Type = ST. RD0/PSP0, Description = PORTD<0> data input.. RD0/PSP0, Function = PSP0. RD0/PSP0, TRIS Setting = x. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = PSP read data output (LATD<0>); takes priority over port data.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = x.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD0/PSP0, I/O = I. RD0/PSP0, I/O Type = TTL. RD0/PSP0, Description = PSP write data input.. RD1/PSP1, Function = RD1. RD1/PSP1, TRIS Setting = 0. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description = LATD<1> data output.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = 1. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = ST. RD1/PSP1, Description = PORTD<1> data input.. RD1/PSP1, Function = PSP1. RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<1>); takes priority over port data.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = TTL. RD1/PSP1, Description = PSP write data input.. RD2/PSP2, Function = RD2. RD2/PSP2, TRIS Setting = 0. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = LATD<2> data output.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = 1. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = ST. RD2/PSP2, Description = PORTD<2> data input.. RD2/PSP2, Function = PSP2.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = PSP read data output (LATD<2>); takes priority over port data.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = TTL. RD2/PSP2, Description = PSP write data input.. RD3/PSP3, Function = RD3. RD3/PSP3, TRIS Setting = 0. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = LATD<3> data output.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = 1. RD3/PSP3, I/O = I.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD3/PSP3, I/O Type = ST. RD3/PSP3, Description = PORTD<3> data input.. RD3/PSP3, Function = PSP3. RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = PSP read data output (LATD<3>); takes priority over port data.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = I. RD3/PSP3, I/O Type = TTL. RD3/PSP3, Description = PSP write data input.. RD4/PSP4, Function = RD4. RD4/PSP4, TRIS Setting = 0. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nLATD<4> data output.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = 1. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = ST. RD4/PSP4, Description = PORTD<4> data input.. RD4/PSP4, Function = PSP4. RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description = PSP read data output (LATD<4>); takes priority over port data.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = TTL. RD4/PSP4, Description = PSP write data input.. RD5/PSP5/P1B, Function = RD5.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = LATD<5> data output.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = 1. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = ST. RD5/PSP5/P1B, Description = PORTD<5> data input.. RD5/PSP5/P1B, Function = PSP5. RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<5>); takes priority over port data.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = TTL. RD5/PSP5/P1B, Description = PSP write data input.. RD5/PSP5/P1B, Function = P1B. RD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = ECCP1 Enhanced PWMoutput, channel B; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD6/PSP6/P1C, Function = RD6.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = LATD<6> data output.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = 1. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = ST. RD6/PSP6/P1C, Description = PORTD<6> data input.. RD6/PSP6/P1C, Function = PSP6. RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<6>); takes priority over port data.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = TTL. RD6/PSP6/P1C, Description = PSP write data input.. RD6/PSP6/P1C, Function = P1C. RD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = ECCP1 Enhanced PWMoutput, channel C; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD7/PSP7/P1D, Function = RD7.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = LATD<7> data output.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = 1. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = ST. RD7/PSP7/P1D, Description = PORTD<7> data input.. RD7/PSP7/P1D, Function = PSP7. RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<7>); takes priority over port data.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = TTL. RD7/PSP7/P1D, Description = PSP write data input.. RD7/PSP7/P1D, Function = P1D. RD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = ECCP1 Enhanced PWMoutput, channel D; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.",
    "TABLE 9-7: PORTD I/O SUMMARY\nLegend: DIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 9-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 52. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and",
    "TABLE 9-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nWrite to Data Latch). LATD, Reset Values on page = 52. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 52. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0 = TRISE0. TRISE, Reset Values on page = 52. CCP1CON, Bit 7 = P1M1. CCP1CON, Bit 6 = P1M0.",
    "TABLE 9-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nCCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTD.",
    "9.5 PORTE, TRISE and LATE Registers\nDepending on the particular PIC18F2525/2620/4525/ 4620 device selected, PORTE is implemented in two different ways.\nFor  40/44-pin  devices,  PORTE  is  a  4-bit  wide  port. Three pins (RE0/RD/AN5, RE1/WR/AN6 and RE2/CS/ AN7) are individually configurable as inputs or outputs. These pins have Schmitt Trigger input buffers. When selected as an analog input, these pins will read as ' 0 's.\nThe corresponding  Data  Direction  register  is  TRISE. Setting a TRISE bit (= 1 ) will make the corresponding PORTE pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISE bit (= 0 ) will make the corresponding PORTE pin an output (i.e., put the contents of the output latch on the selected pin).\nTRISE controls the direction of the RE pins, even when they are being used as analog inputs. The user must make sure to keep the pins configured as inputs when using them as analog inputs.",
    "9.5 PORTE, TRISE and LATE Registers\nNote: On  a  Power-on  Reset,  RE2:RE0  are configured as analog inputs.\nThe upper four bits of the TRISE register also control the operation of the Parallel Slave Port. Their operation is explained in Register 9-1.\nThe  Data  Latch  register (LATE)  is also memory mapped.  Read-modify-write  operations  on  the  LATE register,  read  and  write  the  latched  output  value  for PORTE.\nThe fourth pin of PORTE (MCLR/VPP/RE3) is an input only pin. Its operation is controlled by the MCLRE Configuration bit. When selected as a port pin (MCLRE = 0 ), it functions as a digital input only pin; as such, it does not have  TRIS  or  LAT  bits  associated  with  its  operation. Otherwise,  it  functions  as  the  device's  Master  Clear input. In either configuration, RE3 also functions as the programming voltage input during programming.",
    "Note:\nOn a Power-on Reset, RE3 is enabled as a digital input only if Master Clear functionality is disabled.",
    "EXAMPLE 9-5: INITIALIZING PORTE\nCLRF, 1 = PORTE. CLRF, 2 = ; Initialize PORTE by ; clearing output ; data latches. CLRF, 1 = LATE. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVLW, 1 = 0Ah ADCON1 03h. MOVLW MOVWF MOVLW, 2 = ; Configure A/D ; for digital inputs ; Value used to. MOVWF, 1 = TRISE. MOVWF, 2 = ; Set RE<0> as inputs ; RE<1> as outputs ; RE<2> as inputs",
    "9.5.1 PORTE IN 28-PIN DEVICES\nFor  28-pin  devices,  PORTE  is  only  available  when Master Clear functionality is disabled (MCLRE = 0 ). In these  cases,  PORTE  is  a  single  bit,  input  only  port comprised of RE3 only. The pin operates as previously described.",
    "TRISE REGISTER (40/44-PIN DEVICES ONLY)\nR-0, 1 = R-0. R-0, 2 = R/W-0. R-0, 3 = R/W-0. R-0, 4 = U-0. R-0, 5 = R/W-1. R-0, 6 = R/W-1. R-0, 7 = R/W-1. IBF, 1 = OBF. IBF, 2 = IBOV. IBF, 3 = PSPMODE. IBF, 4 = -. IBF, 5 = TRISE2. IBF, 6 = TRISE1. IBF, 7 = TRISE0\nbit 7\nbit 0",
    "TRISE REGISTER (40/44-PIN DEVICES ONLY)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IBF: Input Buffer Full Status bit\n1 = A word has been received and waiting to be read by the CPU\n0 = No word has been received",
    "bit 6\nOBF: Output Buffer Full Status bit\n1 = The output buffer still holds a previously written word\n0 = The output buffer has been read",
    "bit 5\nIBOV: Input Buffer Overflow Detect bit (in Microprocessor mode)\n1 = A write occurred when a previously input word has not been read (must be cleared in software)\n0 = No overflow occurred\nbit 4\nPSPMODE: Parallel Slave Port Mode Select bit\n1 = Parallel Slave Port mode\n0 = General purpose I/O mode",
    "bit 3 Unimplemented: Read as ' 0 '\nbit 2\nTRISE2: RE2 Direction Control bit\n1 = Input\n0 = Output",
    "bit 1\nTRISE1: RE1 Direction Control bit\n1 = Input\n0 = Output",
    "bit 0\nTRISE0: RE0 Direction Control bit\n1 = Input\n0 = Output",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 0. RE0/RD/AN5, I/O = O. RE0/RD/AN5, I/O Type = DIG. RE0/RD/AN5, Description = LATE<0> data output; not affected by analog input.. RE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ST. RE0/RD/AN5, Description = PORTE<0> data input; disabled when analog input enabled.. RE0/RD/AN5, Function = RD. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = TTL. RE0/RD/AN5, Description = PSP read enable input (PSP enabled).. RE0/RD/AN5,",
    "TABLE 9-9: PORTE I/O SUMMARY\nFunction = AN5. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ANA. RE0/RD/AN5, Description = A/D input channel 5; default input configuration on POR.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 0. RE1/WR/AN6, I/O = O. RE1/WR/AN6, I/O Type = DIG. RE1/WR/AN6, Description = LATE<1> data output; not affected by analog input.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ST. RE1/WR/AN6, Description = PORTE<1> data input; disabled when analog input enabled.. RE1/WR/AN6, Function = WR.",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = TTL. RE1/WR/AN6, Description = PSP write enable input (PSP enabled).. RE1/WR/AN6, Function = AN6. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ANA. RE1/WR/AN6, Description = A/D input channel 6; default input configuration on POR.. RE2/CS/AN7, Function = RE2. RE2/CS/AN7, TRIS Setting = 0. RE2/CS/AN7, I/O = O. RE2/CS/AN7, I/O Type = DIG. RE2/CS/AN7, Description = LATE<2> data output; not affected by analog input.. RE2/CS/AN7, Function = RE2.",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ST. RE2/CS/AN7, Description = PORTE<2> data input; disabled when analog input enabled.. RE2/CS/AN7, Function = CS. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = TTL. RE2/CS/AN7, Description = PSP write enable input (PSP enabled).. RE2/CS/AN7, Function = AN7. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ANA. RE2/CS/AN7, Description = A/D input channel 7; default input configuration on POR.. MCLR/VPP/RE3 (1), Function = MCLR.",
    "TABLE 9-9: PORTE I/O SUMMARY\nMCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = External Master Clear input; enabled when MCLRE Configuration bit is set.. MCLR/VPP/RE3 (1), Function = VPP. MCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ANA. MCLR/VPP/RE3 (1), Description = High-voltage detection; used for ICSP\u2122 mode entry detection. Always available, regardless of pin mode.. MCLR/VPP/RE3 (1), Function = RE3. MCLR/VPP/RE3 (1), TRIS Setting = - (2). MCLR/VPP/RE3 (1),",
    "TABLE 9-9: PORTE I/O SUMMARY\nI/O = I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = PORTE<3> data input; enabled when MCLRE Configuration bit is clear.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: RE3 is available on both 28-pin and 40/44-pin devices. All other PORTE pins are only implemented on 40/44-pin devices.\n2: RE3 does not have a corresponding TRIS bit to control data direction.",
    "TABLE 9-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (1,2). PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 52. LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = PORTE Data Latch Register. LATE (2), Bit 1 = PORTE Data Latch Register. LATE (2), Bit 0 = PORTE Data Latch Register. LATE (2), Reset Values on page = 52. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0",
    "TABLE 9-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\n= TRISE0. TRISE, Reset Values on page = 52. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTE.\nNote\n1: Implemented only when Master Clear functionality is disabled (MCLRE Configuration bit = 0 ).\n2: RE3 is the only PORTE bit implemented on both 28-pin and 40/44-pin devices. All other bits are implemented only when PORTE is implemented (i.e., 40/44-pin devices).",
    "9.6 Parallel Slave Port\nNote:\nThe Parallel Slave Port is only available on 40/44-pin devices.\nThe timing for  the control  signals  in  Write  and  Read modes is shown in Figure 9-3 and Figure 9-4, respectively.\nIn addition to its function as a general I/O port, PORTD can also operate as an 8-bit wide Parallel Slave Port (PSP) or microprocessor port. PSP  operation is controlled  by  the  4  upper  bits  of  the  TRISE  register (Register 9-1). Setting control bit, PSPMODE (TRISE<4>),  enables  PSP  operation  as  long  as  the Enhanced CCP module is not operating in dual output or quad output PWM mode. In Slave mode, the port is asynchronously readable and writable by the external world.",
    "9.6 Parallel Slave Port\nThe  PSP  can  directly  interface  to  an  8-bit  microprocessor data bus. The external microprocessor can read or write the PORTD latch as an 8-bit latch. Setting the  control  bit,  PSPMODE,  enables  the  PORTE  I/O pins to become control inputs for the microprocessor port. When set, port pin RE0 is the RD input, RE1 is the WR input and RE2 is the CS (Chip Select) input. For this functionality, the corresponding data direction bits of  the  TRISE  register  (TRISE<2:0>)  must  be  configured as inputs (set).  The  A/D port  configuration  bits, PFCG3:PFCG0 (ADCON1<3:0>), must also be set to a value in the range of ' 1010 ' through ' 1111 '.\nA write to the PSP occurs when both the CS and WR lines are first detected low and ends when either are detected high. The PSPIF and IBF flag bits are both set when the write ends.",
    "9.6 Parallel Slave Port\nA read from the PSP occurs when both the CS and RD lines are first detected low. The data in PORTD is read out and the OBF bit is clear. If the user writes new data to PORTD to set OBF, the data is immediately read out; however, the OBF bit is not set.\nWhen either the CS or RD lines are detected high, the PORTD pins return to the input state and the PSPIF bit is set. User applications should wait for PSPIF to be set before servicing the PSP; when this happens, the IBF and OBF bits can be polled and the appropriate action taken.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 52. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and Write",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nto Data Latch). LATD, Reset Values on page = 52. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 52. PORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 52. LATE, Bit 7 = -. LATE, Bit 6 = -. LATE, Bit 5 = -. LATE, Bit 4 = -. LATE, Bit 3 = -. LATE, Bit 2 = LATE Data Output bits.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nLATE, Bit 1 = LATE Data Output bits. LATE, Bit 0 = LATE Data Output bits. LATE, Reset Values on page = 52. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0 = TRISE0. TRISE, Reset Values on page = 52. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IF. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nIPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 51\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the Parallel Slave Port.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "10.0 INTERRUPTS\nThe PIC18F2525/2620/4525/4620 devices have multiple  interrupt  sources  and  an  interrupt  priority feature that allows most  interrupt sources  to be assigned a high-priority level or a low-priority level. The high-priority interrupt vector is at 0008h and the lowpriority interrupt vector is at 0018h. High-priority interrupt events will interrupt any low-priority interrupts that may be in progress.\nWhen  the  IPEN  bit  is  cleared  (default  state),  the interrupt priority feature is disabled and interrupts are compatible with PIC \u00ae mid-range devices. In Compatibility mode, the interrupt priority bits for each source  have  no  effect.  INTCON<6>  is  the  PEIE  bit, which enables/disables all peripheral interrupt sources. INTCON<7> is the GIE bit, which enables/disables all interrupt  sources.  All  interrupts  branch  to  address 0008h in Compatibility mode.\nThere  are  ten  registers  which  are  used  to  control interrupt operation. These registers are:\n\u00b7 RCON\n\u00b7 INTCON\n\u00b7 INTCON2\n\u00b7 INTCON3\n\u00b7 PIR1, PIR2\n\u00b7 PIE1, PIE2\n\u00b7 IPR1, IPR2",
    "10.0 INTERRUPTS\nIt is  recommended  that  the  Microchip  header  files supplied with MPLAB \u00ae  IDE be used for the symbolic bit names in these registers. This allows the assembler/ compiler to automatically take care of the placement of these bits within the specified register.\nIn general, interrupt sources have three bits to control their operation. They are:\n\u00b7 Flag bit to indicate that an interrupt event occurred\n\u00b7 Enable bit that allows program execution to branch to the interrupt vector address when the flag bit is set\n\u00b7 Priority bit to select high priority or low priority\nThe interrupt priority feature is enabled by setting the IPEN bit (RCON<7>). When  interrupt priority is enabled,  there  are  two  bits  which  enable  interrupts globally. Setting the GIEH bit (INTCON<7>) enables all interrupts  that  have  the  priority  bit  set  (high  priority). Setting the GIEL bit (INTCON<6>) enables all interrupts that have the priority bit cleared (low priority). When  the  interrupt  flag,  enable  bit  and  appropriate global interrupt enable bit are set, the interrupt will vector immediately to address 0008h or 0018h, depending on the priority bit setting. Individual interrupts can be disabled through their corresponding enable bits.",
    "10.0 INTERRUPTS\nWhen an interrupt is responded to, the global interrupt enable bit is cleared to disable further interrupts. If the IPEN bit is cleared, this is the GIE bit. If interrupt priority levels are used, this will be either the GIEH or GIEL bit. High-priority  interrupt  sources  can  interrupt  a  lowpriority interrupt. Low-priority interrupts are not processed while high-priority interrupts are in progress.\nThe return address is pushed onto the stack and the PC is loaded with the interrupt vector address (0008h or 0018h). Once in the Interrupt Service Routine, the source(s) of the interrupt can be determined by polling the interrupt flag  bits.  The  interrupt  flag  bits  must  be cleared  in  software  before  re-enabling  interrupts  to avoid recursive interrupts.\nThe 'return  from  interrupt'  instruction, RETFIE ,  exits the interrupt routine and sets the GIE bit (GIEH or GIEL if priority levels are used), which re-enables interrupts.",
    "10.0 INTERRUPTS\nFor external interrupt events, such as the INTx pins or the PORTB input change interrupt, the interrupt latency will be  three  to  four  instruction  cycles.  The  exact latency is the same for one or two-cycle instructions. Individual interrupt flag bits are set, regardless of the status of their corresponding enable bit or the GIE bit.\nNote:\nDo not use the MOVFF instruction to modify any of the interrupt control registers while any interrupt  is  enabled.  Doing  so  may cause erratic microcontroller behavior.",
    "10.1 INTCON Registers\nNote:\nThe  INTCON  registers  are  readable  and  writable registers,  which  contain  various  enable,  priority  and flag bits.\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure  the  appropriate  interrupt  flag  bits are  clear  prior  to  enabling  an  interrupt. This feature allows for software polling.",
    "REGISTER 10-1: INTCON: INTERRUPT CONTROL REGISTER\nGIE/GIEH, R/W-0 = PEIE/GIEL. GIE/GIEH, R/W-0 = TMR0IE. GIE/GIEH, R/W-0 = INT0IE. GIE/GIEH, R/W-0 = RBIE. GIE/GIEH, R/W-0 = TMR0IF. GIE/GIEH, R/W-0 = INT0IF. GIE/GIEH, R/W-x = RBIF (1). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-x = bit 7 bit 0",
    "REGISTER 10-1: INTCON: INTERRUPT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 GIE/GIEH: Global Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked interrupts\n0 = Disables all interrupts",
    "When IPEN = 1 :\n1 = Enables all high-priority interrupts\n0 = Disables all interrupts\nbit 6\nPEIE/GIEL: Peripheral Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked peripheral interrupts\n0 = Disables all peripheral interrupts\n1 = Enables all low-priority peripheral interrupts\n0 = Disables all low-priority peripheral interrupts\nbit 5\nTMR0IE: TMR0 Overflow Interrupt Enable bit\n1 = Enables the TMR0 overflow interrupt\n0 = Disables the TMR0 overflow interrupt",
    "bit 4 INT0IE: INT0 External Interrupt Enable bit\n1 = Enables the INT0 external interrupt\n0 = Disables the INT0 external interrupt\nbit 3 RBIE: RB Port Change Interrupt Enable bit\n1 = Enables the RB port change interrupt\n0 = Disables the RB port change interrupt",
    "bit 2 TMR0IF: TMR0 Overflow Interrupt Flag bit\n1 = TMR0 register has overflowed (must be cleared in software)\n0 = TMR0 register did not overflow",
    "bit 1 INT0IF: INT0 External Interrupt Flag bit\n1 = The INT0 external interrupt occurred (must be cleared in software)\n0 = The INT0 external interrupt did not occur",
    "bit 0\nRBIF: RB Port Change Interrupt Flag bit (1)\n1 = At least one of the RB7:RB4 pins changed state (must be cleared in software)\n0 = None of the RB7:RB4 pins have changed state\nNote 1: A mismatch condition will continue to set this bit. Reading PORTB and waiting 1 TCY will end the mismatch condition and allow the bit to be cleared.",
    "REGISTER 10-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nRBPU, R/W-1 = INTEDG0. RBPU, R/W-1 = INTEDG1. RBPU, R/W-1 = INTEDG2. RBPU, U-0 = -. RBPU, R/W-1 = TMR0IP. RBPU, U-0 = -. RBPU, R/W-1 = RBIP. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 10-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 RBPU: PORTB Pull-up Enable bit\n1 = All PORTB pull-ups are disabled\n0 = PORTB pull-ups are enabled by individual port latch values\nbit 6 INTEDG0: External Interrupt 0 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 5\nINTEDG1: External Interrupt 1 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 4\nINTEDG2: External Interrupt 2 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 3 Unimplemented: Read as ' 0 '\nbit 2\nTMR0IP: TMR0 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 0 RBIP: RB Port Change Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote:\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 10-3: INTCON3: INTERRUPT CONTROL REGISTER 3\nINT2IP, R/W-1 = INT1IP. INT2IP, U-0 = -. INT2IP, R/W-0 = INT2IE. INT2IP, R/W-0 = INT1IE. INT2IP, U-0 = -. INT2IP, R/W-0 = INT2IF. INT2IP, R/W-0 = INT1IF. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 7\nINT2IP: INT2 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nINT1IP: INT1 External Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 5\nUnimplemented: Read as ' 0 '\nbit 4\nINT2IE: INT2 External Interrupt Enable bit\n1 = Enables the INT2 external interrupt\n0 = Disables the INT2 external interrupt\nbit 3\nINT1IE: INT1 External Interrupt Enable bit\n1 = Enables the INT1 external interrupt\n0 = Disables the INT1 external interrupt",
    "bit 2\nUnimplemented: Read as ' 0 '",
    "bit 1 INT2IF: INT2 External Interrupt Flag bit\n1 = The INT2 external interrupt occurred (must be cleared in software)\n0 = The INT2 external interrupt did not occur",
    "bit 0\nINT1IF: INT1 External Interrupt Flag bit\n1 = The INT1 external interrupt occurred (must be cleared in software)\n0 = The INT1 external interrupt did not occur\nNote:\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "10.2 PIR Registers\nThe PIR registers contain the individual flag bits for the peripheral interrupts. Due to the number of peripheral interrupt  sources,  there  are  two  Peripheral  Interrupt Request (Flag) registers (PIR1 and PIR2).\nNote 1: Interrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the Global Interrupt Enable bit, GIE (INTCON<7>).\n2: User software should ensure the appropriate interrupt flag bits are cleared prior to enabling  an  interrupt  and  after  servicing that interrupt.",
    "REGISTER 10-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PSPIF (1), 1 = ADIF. PSPIF (1), 2 = RCIF. PSPIF (1), 3 = TXIF. PSPIF (1), 4 = SSPIF. PSPIF (1), 5 = CCP1IF. PSPIF (1), 6 = TMR2IF. PSPIF (1), 7 = TMR1IF. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7",
    "REGISTER 10-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\n= bit 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 PSPIF: Parallel Slave Port Read/Write Interrupt Flag bit (1)\n1 = A read or a write operation has taken place (must be cleared in software)\n0 = No read or write has occurred",
    "bit 6 ADIF: A/D Converter Interrupt Flag bit\n1 = An A/D conversion completed (must be cleared in software)\n0 = The A/D conversion is not complete\nbit 5 RCIF: EUSART Receive Interrupt Flag bit\n1 = The EUSART receive buffer, RCREG, is full (cleared when RCREG is read)\n0 = The EUSART receive buffer is empty\nbit 4 TXIF: EUSART Transmit Interrupt Flag bit\n1 = The EUSART transmit buffer, TXREG, is empty (cleared when TXREG is written)\n0 = The EUSART transmit buffer is full",
    "bit 3 SSPIF:\nMaster Synchronous Serial Port Interrupt Flag bit\n1 = The transmission/reception is complete (must be cleared in software)\n0 = Waiting to transmit/receive",
    "Capture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred\nPWM mode:\nUnused in this mode.\nbit 1\nTMR2IF: TMR2 to PR2 Match Interrupt Flag bit\n1 = TMR2 to PR2 match occurred (must be cleared in software)\n0 = No TMR2 to PR2 match occurred\nbit 0\nTMR1IF: TMR1 Overflow Interrupt Flag bit\n1 = TMR1 register overflowed (must be cleared in software)\n0 = TMR1 register did not overflow\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.",
    "REGISTER 10-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nOSCFIF, R/W-0 = CMIF. OSCFIF, U-0 = -. OSCFIF, R/W-0 = EEIF. OSCFIF, R/W-0 = BCLIF. OSCFIF, R/W-0 = HLVDIF. OSCFIF, R/W-0 = TMR3IF. OSCFIF, R/W-0 = CCP2IF. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIF: Oscillator Fail Interrupt Flag bit\n1 = Device oscillator failed, clock input has changed to INTOSC (must be cleared in software)\n0 = Device clock operating",
    "bit 6\nCMIF: Comparator Interrupt Flag bit\n1 = Comparator input has changed (must be cleared in software)\n0 = Comparator input has not changed",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nEEIF: Data EEPROM/Flash Write Operation Interrupt Flag bit\n1 = The write operation is complete (must be cleared in software)\n0 = The write operation is not complete or has not been started",
    "bit 3 BCLIF: Bus Collision Interrupt Flag bit\n1 = A bus collision occurred (must be cleared in software)\n0 = No bus collision occurred",
    "bit 2 HLVDIF: High/Low-Voltage Detect Interrupt Flag bit\n1 = A high/low-voltage condition occurred (direction determined by VDIRMAG bit, HLVDCON<7>)\n0 = A high/low-voltage condition has not occurred",
    "bit 1\nTMR3IF: TMR3 Overflow Interrupt Flag bit\n1 = TMR3 register overflowed (must be cleared in software)\n0 = TMR3 register did not overflow",
    "bit 0 CCP2IF:\nCCP2 Interrupt Flag bit",
    "Capture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "10.3 PIE Registers\nThe PIE registers contain the individual enable bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Enable registers (PIE1 and PIE2). When IPEN = 0 , the PEIE bit must be set to enable any of these peripheral interrupts.",
    "REGISTER 10-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nPSPIE (1), R/W-0 = ADIE. PSPIE (1), R/W-0 = RCIE. PSPIE (1), R/W-0 = TXIE. PSPIE (1), R/W-0 = SSPIE. PSPIE (1), R/W-0 = CCP1IE. PSPIE (1), R/W-0 = TMR2IE. PSPIE (1), R/W-0 = TMR1IE. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nPSPIE: Parallel Slave Port Read/Write Interrupt Enable bit (1)\n1 = Enables the PSP read/write interrupt\n0 = Disables the PSP read/write interrupt\nbit 6\nADIE: A/D Converter Interrupt Enable bit\n1 = Enables the A/D interrupt\n0 = Disables the A/D interrupt\nbit 5\nRCIE: EUSART Receive Interrupt Enable bit\n1 = Enables the EUSART receive interrupt\n0 = Disables the EUSART receive interrupt\nbit 4\nTXIE: EUSART Transmit Interrupt Enable bit\n1 = Enables the EUSART transmit interrupt\n0 = Disables the EUSART transmit interrupt",
    "bit 3 SSPIE: Master Synchronous Serial Port Interrupt Enable bit\n1 = Enables the MSSP interrupt\n0 = Disables the MSSP interrupt",
    "bit 2 CCP1IE: CCP1 Interrupt Enable bit\n1 = Enables the CCP1 interrupt\n0 = Disables the CCP1 interrupt\nbit 1 TMR2IE: TMR2 to PR2 Match Interrupt Enable bit\n1 = Enables the TMR2 to PR2 match interrupt\n0 = Disables the TMR2 to PR2 match interrupt\nbit 0 TMR1IE: TMR1 Overflow Interrupt Enable bit\n1 = Enables the TMR1 overflow interrupt\n0 = Disables the TMR1 overflow interrupt\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.",
    "REGISTER 10-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nR/W-0, 1 = R/W-0. R/W-0, 2 = U-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. OSCFIE, 1 = CMIE. OSCFIE, 2 = -. OSCFIE, 3 = EEIE. OSCFIE, 4 = BCLIE. OSCFIE, 5 = HLVDIE. OSCFIE, 6 = TMR3IE. OSCFIE, 7 = CCP2IE. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 10-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIE:\nOscillator Fail Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 6\nCMIE: Comparator Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4\nEEIE: Data EEPROM/Flash Write Operation Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 3\nBCLIE: Bus Collision Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 2\nHLVDIE: High/Low-Voltage Detect Interrupt Enable bit\n1 = Enabled\n0 =  Disabled\nbit 1\nTMR3IE: TMR3 Overflow Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 0\nCCP2IE: CCP2 Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "10.4 IPR Registers\nThe IPR registers contain the individual priority bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Priority registers (IPR1 and IPR2). Using the priority bits requires that the Interrupt Priority Enable (IPEN) bit be set.",
    "REGISTER 10-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nPSPIP (1), R/W-1 = ADIP. PSPIP (1), R/W-1 = RCIP. PSPIP (1), R/W-1 = TXIP. PSPIP (1), R/W-1 = SSPIP. PSPIP (1), R/W-1 = CCP1IP. PSPIP (1), R/W-1 = TMR2IP. PSPIP (1), R/W-1 = TMR1IP. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 10-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPSPIP: Parallel Slave Port Read/Write Interrupt Priority bit (1)\n1 = High priority\n0 = Low priority\nbit 6\nADIP: A/D Converter Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5\nRCIP: EUSART Receive Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 4\nTXIP: EUSART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nSSPIP: Master Synchronous Serial Port Interrupt Priority bit\n1 = High priority",
    "REGISTER 10-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\n0 = Low priority\nbit 2\nCCP1IP: CCP1 Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR2IP: TMR2 to PR2 Match Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nTMR1IP: TMR1 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote 1: This bit is unimplemented on 28-pin devices and will read as ' 0 '.",
    "REGISTER 10-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nOSCFIP, R/W-1 = CMIP. OSCFIP, U-0 = -. OSCFIP, R/W-1 = EEIP. OSCFIP, R/W-1 = BCLIP. OSCFIP, R/W-1 = HLVDIP. OSCFIP, R/W-1 = TMR3IP. OSCFIP, R/W-1 = CCP2IP. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 10-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nOSCFIP: Oscillator Fail Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nCMIP: Comparator Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5 Unimplemented: Read as ' 0 '\nbit 4\nEEIP: Data EEPROM/Flash Write Operation Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nBCLIP: Bus Collision Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 2",
    "REGISTER 10-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nHLVDIP: High/Low-Voltage Detect Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR3IP: TMR3 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nCCP2IP: CCP2 Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "10.5 RCON Register\nThe RCON register contains flag bits which are used to determine the cause of the last Reset or wake-up from Idle or Sleep modes. RCON also contains the IPEN bit which enables interrupt priorities.\nThe operation of the SBOREN bit and the Reset flag bits is discussed in more detail in Section 4.1 'RCON Register' .",
    "REGISTER 10-10: RCON: RESET CONTROL REGISTER\nIPEN, R/W-1 (1) = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 (1) = POR. IPEN, R/W-0 = BOR. bit 7, R/W-1 (1) = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 (1) = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-10: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)\nbit 6\nSBOREN: Software BOR Enable bit (1)\nFor details of bit operation, see Register 4-1.\nbit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI: RESET\nInstruction Flag bit\nFor details of bit operation, see Register 4-1.\nbit 3\nTO: Watchdog Timer Time-out Flag bit",
    "REGISTER 10-10: RCON: RESET CONTROL REGISTER\nFor details of bit operation, see Register 4-1.\nbit 2\nPD: Power-Down Detection Flag bit\nFor details of bit operation, see Register 4-1.\nbit 1\nPOR: Power-on Reset Status bit\n(1)\nFor details of bit operation, see Register 4-1.\nbit 0\nBOR: Brown-out Reset Status bit\nFor details of bit operation, see Register 4-1.\nNote 1: Actual Reset values are determined by device configuration and the nature of the device Reset. See Register 4-1 for additional information.",
    "10.7 TMR0 Interrupt\nExternal  interrupts  on  the  RB0/INT0,  RB1/INT1  and RB2/INT2 pins are edge-triggered. If the corresponding INTEDGx bit in the INTCON2 register is set (= 1 ), the interrupt is triggered by a rising edge; if the bit is clear, the trigger is  on the falling edge. When a valid edge appears on the RBx/INTx pin, the corresponding flag bit,  INTxIF,  is  set.  This  interrupt  can  be  disabled  by clearing the corresponding enable bit, INTxIE. Flag bit, INTxIF,  must  be  cleared  in  software  in  the  Interrupt Service Routine before re-enabling the interrupt.\nAll external interrupts (INT0, INT1 and INT2) can wakeup the processor from Idle or Sleep modes if bit INTxIE was set prior to going into those modes. If the Global Interrupt  Enable  bit,  GIE,  is  set,  the  processor  will branch to the interrupt vector following wake-up.",
    "10.7 TMR0 Interrupt\nInterrupt priority for INT1 and INT2 is determined by the  value  contained  in  the  interrupt  priority  bits, INT1IP  (INTCON3<6>)  and  INT2IP  (INTCON3<7>). There  is  no  priority  bit  associated  with  INT0.  It  is always a high-priority interrupt source.\nIn 8-bit mode (which is the default), an overflow in the TMR0 register (FFh \u2192 00h) will set flag bit, TMR0IF. In 16-bit mode,  an overflow in the TMR0H:TMR0L register  pair  (FFFFh \u2192 0000h)  will  set  TMR0IF.  The interrupt  can  be  enabled/disabled  by  setting/clearing enable bit, TMR0IE (INTCON<5>). Interrupt priority for Timer0  is  determined  by  the  value  contained  in  the interrupt priority bit, TMR0IP  (INTCON2<2>).  See Section 11.0 'Timer0 Module' for  further  details  on the Timer0 module.",
    "10.8 PORTB Interrupt-on-Change\nAn input change on PORTB<7:4> sets flag bit, RBIF (INTCON<0>). The interrupt can be enabled/disabled by  setting/clearing  enable  bit,  RBIE  (INTCON<3>). Interrupt  priority  for  PORTB  interrupt-on-change  is determined  by  the  value  contained  in  the  interrupt priority bit, RBIP (INTCON2<0>).",
    "10.9 Context Saving During Interrupts\nDuring interrupts, the return PC address is saved on the stack. Additionally, the WREG, STATUS and BSR registers are saved on the Fast Return Stack. If a fast return  from  interrupt  is  not  used  (see Section 5.3 'Data Memory Organization' ), the user may need to save the WREG, STATUS and BSR registers on entry to  the  Interrupt  Service  Routine.  Depending  on  the user's application, other registers may also need to be saved. Example 10-1 saves and restores the WREG, STATUS and BSR registers during an Interrupt Service Routine.",
    "SAVING STATUS, WREG AND BSR REGISTERS IN RAM\nMOVWF MOVFF MOVFF ;, 1 = W_TEMP STATUS,. MOVWF MOVFF MOVFF ;, 2 = ; W_TEMP is in virtual bank. , 1 = STATUS_TEMP. , 2 = ; STATUS_TEMP located anywhere. , 1 = BSR, BSR_TEMP. , 2 = ; BSR_TMEP located anywhere. ; USER ;, 1 = ISR CODE. ; USER ;, 2 = . MOVFF, 1 = BSR_TEMP, BSR. MOVFF, 2 = ; Restore BSR. MOVF, 1 = W_TEMP, W. MOVF, 2 = ; Restore WREG. MOVFF, 1 = STATUS_TEMP, STATUS. MOVFF, 2 = ; Restore STATUS",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "bit 4\nbit 2-0",
    "11.0 TIMER0 MODULE\nThe Timer0 module incorporates the following features:\nThe T0CON register (Register 11-1) controls all aspects of the module's operation, including the prescale selection. It is both readable and writable.\n\u00b7 Software selectable operation as a timer or counter in both 8-bit or 16-bit modes\n\u00b7 Readable and writable registers\n\u00b7 Dedicated 8-bit, software programmable prescaler\n\u00b7 Selectable clock source (internal or external)\n\u00b7 Edge select for external clock\n\u00b7 Interrupt-on-overflow",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nTMR0ON, R/W-1 = T08BIT. TMR0ON, R/W-1 = T0CS. TMR0ON, R/W-1 = T0SE. TMR0ON, R/W-1 = PSA. TMR0ON, R/W-1 = T0PS2. TMR0ON, R/W-1 = T0PS1. TMR0ON, R/W-1 = T0PS0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 TMR0ON: Timer0 On/Off Control bit\n1 = Enables Timer0\n0 = Stops Timer0\nbit 6 T08BIT : Timer0 8-Bit/16-Bit Control bit\n1 = Timer0 is configured as an 8-bit timer/counter\n0 = Timer0 is configured as a 16-bit timer/counter bit 5 T0CS : Timer0 Clock Source Select bit\n1 = Transition on T0CKI pin\n0 = Internal instruction cycle clock (CLKO)\nT0SE : Timer0 Source Edge Select bit\n1 = Increment on high-to-low transition on T0CKI pin\n0 = Increment on low-to-high transition on T0CKI pin",
    "bit 3 PSA : Timer0 Prescaler Assignment bit\n1 = TImer0 prescaler is not assigned. Timer0 clock input bypasses prescaler.\n0 = Timer0 prescaler is assigned. Timer0 clock input comes from prescaler output.\nT0PS2:T0PS0\n: Timer0 Prescaler Select bits\n111 = 1:256 Prescale value\n110 = 1:128 Prescale value\n101 = 1:64   Prescale value\n100 = 1:32   Prescale value\n011 = 1:16   Prescale value\n010\n= 1:8     Prescale value\n001\n= 1:4     Prescale value\n000\n= 1:2     Prescale value\nA simplified block diagram of the Timer0 module in 8-bit mode  is  shown  in  Figure 11-1.  Figure 11-2  shows  a simplified block diagram of the Timer0 module in 16-bit mode.",
    "11.1 Timer0 Operation\nTimer0 can operate as either a timer or a counter; the mode is selected with the T0CS bit (T0CON<5>). In Timer  mode  (T0CS  = 0 ),  the  module  increments  on every clock by default unless a different prescaler value is selected  (see Section 11.3  'Prescaler' ). If the TMR0 register is written to, the increment is inhibited for  the following two instruction cycles. The user can work around this by writing an adjusted value to the TMR0 register.\nThe Counter mode is selected by setting the T0CS bit (= 1 ). In this mode, Timer0 increments either on every rising  or  falling  edge  of  pin  RA4/T0CKI/C1OUT.  The incrementing edge is determined by the Timer0 Source Edge Select bit, T0SE (T0CON<4>); clearing this bit selects  the  rising  edge.  Restrictions  on  the  external clock input are discussed below.\ninternal phase clock (TOSC). There is a delay between synchronization  and  the  onset  of  incrementing  the timer/counter.",
    "11.2 Timer0 Reads and Writes in 16-Bit Mode\nTMR0H is not the actual high byte of Timer0 in 16-bit mode; it is actually a buffered version of the real high byte  of  Timer0  which  is  not  directly  readable  nor writable (refer to Figure 11-2). TMR0H is updated with the contents of the high byte of Timer0 during a read of TMR0L. This provides the ability to read all 16 bits of Timer0 without having to verify that the read of the high and  low  byte  were  valid,  due  to  a  rollover  between successive reads of the high and low byte.\nAn external clock source can be used to drive Timer0; however, it must meet certain requirements to ensure that  the  external  clock  can  be  synchronized  with  the\nSimilarly, a write to the high byte of Timer0 must also take place through the TMR0H Buffer register. The high byte is updated with the contents of TMR0H when a write occurs to TMR0L. This allows all 16 bits of Timer0 to be updated at once.",
    "11.3 Prescaler\nAn 8-bit counter is available as a prescaler for the Timer0 module. The prescaler is not directly readable or writable; its  value  is  set  by  the  PSA  and  T0PS2:T0PS0  bits (T0CON<3:0>) which determine the prescaler assignment and prescale ratio.\nClearing  the  PSA  bit  assigns  the  prescaler  to  the Timer0 module. When it is assigned, prescale values from 1:2 through 1:256 in power-of-2 increments are selectable.\nWhen assigned to the Timer0 module, all instructions writing to the TMR0 register (e.g., CLRF TMR0 MOVWF , TMR0 BSF TMR0 , , etc.) clear the prescaler count.\nNote:, 1 = Writing to TMR0 when the prescaler is assigned to Timer0 will clear the prescaler count but will not change the prescaler assignment.",
    "11.3.1 SWITCHING PRESCALER ASSIGNMENT\nThe  prescaler  assignment  is  fully  under  software control and can be changed 'on-the-fly' during program execution.",
    "11.4 Timer0 Interrupt\nThe  TMR0  interrupt  is  generated  when  the  TMR0 register  overflows from  FFh  to  00h in 8-bit  mode, or from FFFFh to 0000h in 16-bit mode. This overflow sets the TMR0IF flag bit. The interrupt can be masked by clearing  the  TMR0IE  bit  (INTCON<5>).  Before  reenabling the interrupt, the TMR0IF bit must be cleared in software by the Interrupt Service Routine.\nSince Timer0 is shut down in Sleep mode, the TMR0 interrupt cannot awaken the processor from Sleep.",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nTMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte. TMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Reset Values on page = 50. TMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\n= Timer0 Register High Byte. TMR0H, Reset Values on page = 50. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Reset Values on page = 50. TRISA, Bit 7 = RA7 (1). TRISA, Bit 6 = RA6 (1).",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nTRISA, Bit 5 = RA5. TRISA, Bit 4 = RA4. TRISA, Bit 3 = RA3. TRISA, Bit 2 = RA2. TRISA, Bit 1 = RA1. TRISA, Bit 0 = RA0. TRISA, Reset Values on page = 52\nLegend:\nShaded cells are not used by Timer0.\nNote 1: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "bit 6\nbit 5-4",
    "12.0 TIMER1 MODULE\nThe Timer1 timer/counter  module  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer1  module  is shown in Figure 12-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 12-2.\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR1H and TMR1L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Reset on CCP Special Event Trigger\n\u00b7 Device clock status flag (T1RUN)\nThe module incorporates its own low-power oscillator to  provide  an  additional  clocking  option.  The  Timer1 oscillator can also be used as a low-power clock source for the microcontroller in power-managed operation.\nTimer1 can also be used to provide Real-Time Clock (RTC) functionality to applications with only a minimal addition of external components and code overhead.",
    "12.0 TIMER1 MODULE\nTimer1  is controlled through the T1CON  Control register  (Register 12-1).  It  also  contains  the  Timer1 Oscillator Enable  bit (T1OSCEN).  Timer1  can  be enabled or disabled by setting or clearing control bit, TMR1ON (T1CON<0>).",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nRD16, R-0 = T1RUN. RD16, R/W-0 = T1CKPS1. RD16, R/W-0 = T1CKPS0. RD16, R/W-0 = T1OSCEN. RD16, R/W-0 = T1SYNC. RD16, R/W-0 = TMR1CS. RD16, R/W-0 = TMR1ON. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nRD16: 16-Bit Read/Write Mode Enable bit\n1 = Enables register read/write of TImer1 in one 16-bit operation\n0 = Enables register read/write of Timer1 in two 8-bit operations\nT1RUN: Timer1 System Clock Status bit\n1 = Device clock is derived from Timer1 oscillator\n0 = Device clock is derived from another source\nT1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value",
    "bit 3 T1OSCEN: Timer1 Oscillator Enable bit\n1 = Timer1 oscillator is enabled\n0 = Timer1 oscillator is shut off\nThe oscillator inverter and feedback resistor are turned off to eliminate power drain.\nT1SYNC: Timer1 External Clock Input Synchronization Select bit\nWhen TMR1CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR1CS = 0 :\nThis bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 .\nTMR1CS: Timer1 Clock Source Select bit\n1 = External clock from pin RC0/T1OSO/T13CKI (on the rising edge)\n0 = Internal clock (FOSC/4)\nTMR1ON: Timer1 On bit\n1 = Enables Timer1\n0 = Stops Timer1",
    "12.1 Timer1 Operation\nTimer1 can operate in one of these modes:\ncycle (Fosc/4). When the bit is set, Timer1 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR1CS (T1CON<1>). When TMR3CS is cleared (= 0 ), Timer1 increments on every internal instruction\nWhen  Timer1  is  enabled,  the  RC1/T1OSI  and  RC0/ T1OSO/T13CKI pins become inputs. This means the values  of  TRISC<1:0>  are  ignored  and  the  pins  are read as ' 0 '.",
    "FIGURE 12-2: TIMER1 BLOCK DIAGRAM (16-BIT READ/WRITE MODE)\nNote 1: When enable bit, T1OSCEN, is cleared, the inverter and feedback resistor are turned off to eliminate power drain.",
    "12.2 Timer1 16-Bit Read/Write Mode\nTimer1 can be configured for 16-bit reads and writes (see Figure 12-2). When the RD16 control bit (T1CON<7>) is set, the address for TMR1H is mapped to a buffer register for the high byte of Timer1. A read from TMR1L will load the contents of the high byte of Timer1 into the Timer1 high byte buffer. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte, has become invalid due to a rollover between reads.\nA write to the high byte of Timer1 must also take place through the TMR1H Buffer register. The Timer1 high byte is updated with the contents of TMR1H when a write occurs to TMR1L. This allows a user to write all 16 bits to both the high and low bytes of Timer1 at once.",
    "12.2 Timer1 16-Bit Read/Write Mode\nThe  high  byte  of  Timer1  is  not  directly  readable  or writable in this mode. All reads and writes must take place  through  the  Timer1  High  Byte  Buffer  register. Writes  to  TMR1H  do  not  clear  the  Timer1  prescaler. The prescaler is only cleared on writes to TMR1L.",
    "12.3 Timer1 Oscillator\nAn  on-chip  crystal  oscillator  circuit  is  incorporated between  pins  T1OSI  (input)  and  T1OSO  (amplifier output). It is enabled by setting the Timer1 Oscillator Enable bit, T1OSCEN (T1CON<3>). The oscillator is a low-power  circuit  rated  for  32 kHz  crystals.  It  will continue to run during all power-managed modes. The circuit for a typical LP oscillator is shown in Figure 12-3. Table 12-1 shows the capacitor selection for the Timer1 oscillator.\nThe user must provide a software time delay to ensure proper start-up of the Timer1 oscillator.",
    "TABLE 12-1: CAPACITOR SELECTION FOR THE TIMER OSCILLATOR\nOsc Type, 1 = Freq. Osc Type, 2 = C1. Osc Type, 3 = C2. LP, 1 = 32 kHz. LP, 2 = 27 pF (1). LP, 3 = 27 pF (1)\nNote 1: Microchip  suggests  these  values  as  a starting  point  in  validating  the  oscillator circuit.\n2: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Capacitor values are for design guidance only.",
    "12.3.1 USING TIMER1 AS A CLOCK SOURCE\nThe Timer1 oscillator is also available as a clock source in power-managed modes. By setting the clock select bits, SCS1:SCS0 (OSCCON<1:0>), to ' 01 ', the device switches  to  SEC_RUN  mode;  both  the  CPU  and peripherals are clocked from the Timer1 oscillator. If the IDLEN  bit  (OSCCON<7>)  is  cleared  and  a SLEEP instruction  is  executed,  the  device  enters  SEC_IDLE mode. Additional details are available  in Section 3.0 'Power-Managed Modes' .\nWhenever the Timer1 oscillator is providing the clock source,  the  Timer1  system  clock status  flag, T1RUN (T1CON<6>), is set. This can be used to determine the controller's current clocking mode. It can also indicate the clock source being currently used by the Fail-Safe Clock Monitor. If the Clock Monitor is enabled and the Timer1 oscillator fails while providing the clock, polling the T1RUN bit will indicate whether the clock is being provided by the Timer1 oscillator or another source.",
    "12.3.2 LOW-POWER TIMER1 OPTION\nThe Timer1 oscillator can operate at two distinct levels of power consumption based on device configuration. When the LPT1OSC Configuration bit is set, the Timer1 oscillator operates in a low-power mode. When LPT1OSC is not set, Timer1 operates at a higher power level.  Power  consumption  for  a  particular  mode  is relatively constant, regardless of the device's operating mode. The default Timer1 configuration is the higher power mode.\nAs  the  low-power  Timer1  mode  tends  to  be  more sensitive to interference, high noise environments may cause some oscillator instability. The low-power option is, therefore,  best suited  for  low noise applications  where power conservation is an important design consideration.",
    "12.3.3 TIMER1 OSCILLATOR LAYOUT CONSIDERATIONS\nThe  Timer1  oscillator  circuit  draws  very  little  power during operation. Due to the low-power nature of the oscillator, it may also be sensitive to rapidly changing signals in close proximity.\nThe oscillator circuit, shown in Figure 12-3, should be located  as  close  as  possible  to  the  microcontroller. There should be no circuits passing within the oscillator circuit boundaries other than VSS or VDD.\nIf a  high-speed  circuit  must  be  located  near  the oscillator (such as the CCP1 pin in Output Compare or PWM mode, or the primary oscillator using the OSC2 pin), a grounded guard ring around the oscillator circuit, as shown in Figure 12-4, may be helpful when used on a single-sided PCB or in addition to a ground plane.",
    "12.4 Timer1 Interrupt\nThe TMR1 register pair (TMR1H:TMR1L) increments from  0000h  to  FFFFh  and  rolls  over  to  0000h.  The Timer1 interrupt, if enabled, is generated on overflow, which is latched in interrupt flag bit, TMR1IF (PIR1<0>). This interrupt can be enabled or disabled by setting or clearing the Timer1 Interrupt Enable bit, TMR1IE (PIE1<0>).",
    "12.5 Resetting Timer1 Using the CCP Special Event Trigger\nIf either of the CCP modules is configured to use Timer1 and generate a Special Event Trigger in Compare mode (CCP1M3:CCP1M0 or CCP2M3:CCP2M0 = 1011 ), this signal will reset Timer1. The trigger from CCP2 will also start  an  A/D  conversion  if  the  A/D  module  is  enabled (see Section 15.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or a synchronous counter to take advantage of this feature. When used this way, the CCPRH:CCPRL register pair effectively becomes a period register for Timer1.\nIf  Timer1  is  running  in  Asynchronous  Counter mode, this Reset operation may not work.\nIn  the  event  that  a  write  to  Timer1  coincides  with  a Special  Event  Trigger,  the  write  operation  will  take precedence.\nNote:, 1 = The Special Event Triggers from the CCP2 module will not set the TMR1IF interrupt flag bit (PIR1<0>).",
    "12.6 Using Timer1 as a Real-Time Clock\nAdding an external LP oscillator to Timer1 (such as the one  described  in Section 12.3  'Timer1  Oscillator' above) gives users the option to include RTC functionality to their applications. This is accomplished with an inexpensive watch crystal to provide an accurate time base and several lines of application code to calculate the time. When operating in Sleep mode and using a battery  or  supercapacitor  as  a  power  source,  it  can completely  eliminate  the  need  for  a  separate  RTC device and battery backup.\nThe  application code  routine, RTCisr , shown  in Example 12-1, demonstrates a simple method  to increment a counter at one-second intervals using an Interrupt  Service  Routine.  Incrementing  the  TMR1 register pair to overflow triggers the interrupt and calls the routine, which increments the seconds counter by one;  additional  counters  for  minutes  and  hours  are incremented as the previous counter overflow.",
    "12.6 Using Timer1 as a Real-Time Clock\nSince the register pair is 16 bits wide, counting up to overflow the register directly from a 32.768 kHz clock would  take  2  seconds.  To  force  the  overflow  at  the required one-second  intervals, it is necessary  to preload it. The simplest method is to set the MSb of TMR1H with a BSF instruction.  Note that the TMR1L register is never preloaded or altered. Doing so may introduce cumulative errors over many cycles.\nFor this method to be accurate, Timer1 must operate in Asynchronous mode and the Timer1 overflow interrupt must  be  enabled  (PIE1<0>  = 1 ), as  shown  in  the routine, RTCinit . The Timer1 oscillator must also be enabled and running at all times.",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nRTCinit, 1 = . RTCinit, 2 = . RTCinit, 3 = . RTCinit, 4 = . , 1 = MOVLW MOVWF CLRF. , 2 = 80h. , 3 = ;. , 4 = Preload TMR1 register pair. , 1 = . , 2 = TMR1H TMR1L. , 3 = ;. , 4 = for 1 second overflow. , 1 = MOVLW. , 2 = b'00001111'. , 3 = ;. , 4 = Configure for external clock,. , 1 = MOVWF. , 2 = T1CON. , 3 = ;. , 4 = Asynchronous operation, external oscillator. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Initialize timekeeping registers. , 1 = CLRF. , 2 = mins. , 3 = ;. , 4 = . , 1 = MOVLW. , 2 = .12. , 3 = . , 4 = . ,",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n1 = MOVWF. , 2 = hours. , 3 = . , 4 = . , 1 = BSF. , 2 = PIE1, TMR1IE. , 3 = ;. , 4 = Enable Timer1 interrupt. RTCisr, 1 = . RTCisr, 2 = . RTCisr, 3 = . RTCisr, 4 = . , 1 = BSF. , 2 = TMR1H, 7. , 3 = ;. , 4 = Preload for 1 sec overflow. , 1 = BCF. , 2 = PIR1, TMR1IF. , 3 = ;. , 4 = Clear interrupt flag. , 1 = INCF. , 2 = secs, F. , 3 = ;. , 4 = Increment seconds. , 1 = MOVLW. , 2 = .59. , 3 = ;. , 4 = 60 seconds elapsed?. , 1 = CPFSGT. , 2 = secs. , 3 = . , 4 = . , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No,",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\ndone. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Clear seconds. , 1 = INCF. , 2 = mins, F. , 3 = ;. , 4 = Increment minutes. , 1 = MOVLW. , 2 = .59. , 3 = ;. , 4 = 60 minutes elapsed?. , 1 = CPFSGT. , 2 = mins. , 3 = . , 4 = . , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No, done. , 1 = CLRF. , 2 = mins. , 3 = ;. , 4 = clear minutes. , 1 = INCF. , 2 = hours, F. , 3 = ;. , 4 = Increment hours. , 1 = MOVLW. , 2 = .23. , 3 = ;. , 4 = 24 hours elapsed?. , 1 = CPFSGT. , 2 = hours. , 3 = . , 4 = . , 1 = RETURN. , 2 = . , 3 = ;. , 4 =",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nNo, done. , 1 = CLRF. , 2 = hours. , 3 = ;. , 4 = Reset hours. , 1 = RETURN. , 2 = . , 3 = ;. , 4 = Done",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n= Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 50. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 50. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 =",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nT1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 50\nLegend:\nShaded cells are not used by the Timer1 module.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "13.1 Timer2 Operation\nThe  Timer2  module  timer  incorporates  the  following features:\n\u00b7 8-bit Timer and Period registers (TMR2 and PR2, respectively)\n\u00b7 Readable and writable (both registers)\n\u00b7 Software programmable prescaler (1:1, 1:4 and 1:16)\n\u00b7 Software programmable postscaler (1:1 through 1:16)\n\u00b7 Interrupt on TMR2 to PR2 match\n\u00b7 Optional use as the shift clock for the MSSP module\nThe module is controlled through the T2CON register (Register 13-1),  which  enables  or  disables  the  timer and  configures  the  prescaler  and  postscaler.  Timer2 can  be  shut  off  by  clearing  control  bit,  TMR2ON (T2CON<2>), to minimize power consumption.\nA simplified block diagram of the module is shown in Figure 13-1.",
    "13.1 Timer2 Operation\nIn normal operation, TMR2 is incremented from 00h on each  clock  (FOSC/4).  A  4-bit  counter/prescaler  on  the clock input gives direct input, divide-by-4 and divide-by16 prescale options; these are selected by the prescaler control  bits,  T2CKPS1:T2CKPS0  (T2CON<1:0>).  The value of TMR2 is compared to that of the Period register, PR2, on each clock cycle. When the two values match, the comparator generates a match signal as the timer output. This signal also resets the value of TMR2 to 00h on  the next cycle  and  drives the output counter/ postscaler (see Section 13.2 'Timer2 Interrupt' ).\nThe TMR2 and PR2 registers are both directly readable and  writable.  The  TMR2  register  is  cleared  on  any device Reset, while the PR2 register initializes at FFh. Both the prescaler and postscaler counters are cleared on the following events:",
    "13.1 Timer2 Operation\n\u00b7 a write to the TMR2 register\n\u00b7 a write to the T2CON register\n\u00b7 any device Reset (Power-on Reset, MCLR Reset, Watchdog Timer Reset or Brown-out Reset)\nTMR2 is not cleared when T2CON is written.",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\n-, R/W-0 = T2OUTPS3. -, R/W-0 = T2OUTPS2. -, R/W-0 = T2OUTPS1. -, R/W-0 = T2OUTPS0. -, R/W-0 = TMR2ON. -, R/W-0 = T2CKPS1. -, R/W-0 = T2CKPS0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nUnimplemented: Read as ' 0 '\nbit 6-3\nT2OUTPS3:T2OUTPS0: Timer2 Output Postscale Select bits\n0000 = 1:1 Postscale\n0001 = 1:2 Postscale\n\u2022\n\u2022\n\u2022\n1111 = 1:16 Postscale\nbit 2\nTMR2ON: Timer2 On bit\n1 = Timer2 is on\n0 = Timer2 is off\nbit 1-0\nT2CKPS1:T2CKPS0: Timer2 Clock Prescale Select bits\n00 = Prescaler is 1\n01 = Prescaler is 4\n1x = Prescaler is 16",
    "13.3 Timer2 Output\nTimer2 can also generate an optional device interrupt. The  Timer2  output  signal  (TMR2  to  PR2  match) provides the input for the 4-bit output counter/ postscaler.  This  counter  generates  the  TMR2  match interrupt  flag  which  is  latched  in  TMR2IF  (PIR1<1>). The interrupt  is  enabled  by  setting  the  TMR2  Match Interrupt Enable bit, TMR2IE (PIE1<1>).\nA range of 16 postscale options (from 1:1 through 1:16 inclusive) can be selected with the postscaler control bits, T2OUTPS3:T2OUTPS0 (T2CON<6:3>).",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nRegister. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 50. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 50. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 50",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer2 module.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.\nThe unscaled output of TMR2 is available primarily to the CCP modules, where it is used as a time base for operations in PWM mode.\nTimer2 can be optionally used as the shift clock source for the MSSP  module operating in SPI mode. Additional information  is provided  in Section 17.0 'Master Synchronous Serial Port (MSSP) Module' .",
    "14.0 TIMER3 MODULE\nThe Timer3 module timer/counter  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer3  module  is shown in Figure 14-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 14-2.\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR3H and TMR3L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Module Reset on CCP Special Event Trigger",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nRD16, R/W-0 = T3CCP2. RD16, R/W-0 = T3CKPS1. RD16, R/W-0 = T3CKPS0. RD16, R/W-0 = T3CCP1. RD16, R/W-0 = T3SYNC. RD16, R/W-0 = TMR3CS. RD16, R/W-0 = TMR3ON. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nRD16: 16-Bit Read/Write Mode Enable bit\n1 = Enables register read/write of Timer3 in one 16-bit operation\n0 = Enables register read/write of Timer3 in two 8-bit operations\nbit 6,3\nT3CCP2:T3CCP1: Timer3 and Timer1 to CCPx Enable bits\n1x = Timer3 is the capture/compare clock source for the CCP modules\n01 = Timer3 is the capture/compare clock source for CCP2;\nTimer1 is the capture/compare clock source for CCP1\n00 = Timer1 is the capture/compare clock source for the CCP modules\nbit 5-4\nT3CKPS1:T3CKPS0 : Timer3 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value",
    "bit 2\nT3SYNC: Timer3 External Clock Input Synchronization Control bit\n(Not usable if the device clock comes from Timer1/Timer3.)\nWhen TMR3CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR3CS = 0 :\nThis bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 .\nbit 1\nTMR3CS: Timer3 Clock Source Select bit\n1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the first falling edge)\n0 = Internal clock (FOSC/4)",
    "bit 0 TMR3ON: Timer3 On bit\n1 = Enables Timer3\n0 = Stops Timer3\nThe Timer3 module is controlled through the T3CON register (Register 14-1). It also selects the clock source options  for  the  CCP  modules  (see Section 15.1.1 'CCP  Modules  and  Timer  Resources' for  more information).",
    "14.1 Timer3 Operation\nTimer3 can operate in one of three modes:\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR3CS (T3CON<1>). When TMR3CS is cleared (= 0 ), Timer3 increments on every internal instruction cycle (FOSC/4). When the bit is set, Timer3 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\nAs  with  Timer1,  the  RC1/T1OSI  and  RC0/T1OSO/ T13CKI pins become inputs when the Timer1 oscillator is enabled. This means the values of TRISC<1:0> are ignored and the pins are read as ' 0 '.",
    "14.2 Timer3 16-Bit Read/Write Mode\nTimer3 can be configured for 16-bit reads and writes (see Figure 14-2). When the RD16 control bit (T3CON<7>) is set, the address for TMR3H is mapped to a buffer register for the high byte of Timer3. A read from TMR3L will load the contents of the high byte of Timer3 into the Timer3 High Byte Buffer register. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte,  has  become  invalid  due  to  a  rollover  between reads.\nA write to the high byte of Timer3 must also take place through the TMR3H Buffer register. The Timer3 high byte is updated with the contents of TMR3H when a write occurs to TMR3L. This allows a user to write all 16 bits to both the high and low bytes of Timer3 at once.\nThe  high  byte  of  Timer3  is  not  directly  readable  or writable in this mode. All reads and writes must take place through the Timer3 High Byte Buffer register.",
    "14.2 Timer3 16-Bit Read/Write Mode\nWrites  to  TMR3H  do  not  clear  the  Timer3  prescaler. The prescaler is only cleared on writes to TMR3L.",
    "14.3 Using the Timer1 Oscillator as the Timer3 Clock Source\nThe Timer1 internal oscillator may be used as the clock source for Timer3. The Timer1 oscillator is enabled by setting the T1OSCEN (T1CON<3>) bit. To use it as the Timer3 clock source, the TMR3CS bit must also be set. As  previously  noted,  this  also  configures  Timer3  to increment on every rising edge of the oscillator source.",
    "14.4 Timer3 Interrupt\nThe TMR3 register pair (TMR3H:TMR3L) increments from  0000h  to  FFFFh  and  overflows  to  0000h.  The Timer3 interrupt, if enabled, is generated on overflow and is latched in interrupt flag bit, TMR3IF (PIR2<1>). This interrupt can be enabled or disabled by setting or clearing the Timer3  Interrupt  Enable  bit, TMR3IE (PIE2<1>).",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nIf  either  of  the  CCP  modules  is  configured  to  use Timer3  and  to  generate  a  Special  Event  Trigger in Compare mode (CCP1M3:CCP1M0 or CCP2M3:CCP2M0  = 1011 ), this signal will reset Timer3. It will also start an A/D conversion if the A/D module  is enabled (see Section 15.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or synchronous counter to take advantage of this feature. When used this way,  the  CCPR2H:CCPR2L register pair effectively becomes a period register for Timer3.\nIf  Timer3  is  running  in  Asynchronous  Counter mode, the Reset operation may not work.\nIn  the  event  that  a  write  to  Timer3  coincides  with  a Special Event Trigger from a CCP module, the write will take precedence.\nNote:\nThe Special Event Triggers from the CCP2  module  will  not  set  the  TMR3IF interrupt flag bit (PIR1<0>).",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nThe  Timer1  oscillator  is  described  in Section 12.0 'Timer1 Module' .\n\nTABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE.",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nPIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 =",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nTimer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 51. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 51. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON,",
    "14.5 Resetting Timer3 Using the CCP Special Event Trigger\nBit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 50. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer3 module.",
    "PIC18F2525/2620/4525/4620\nNOTES:\nbit 3-0",
    "15.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nThe Capture and Compare operations described in this chapter  apply  to  all  standard  and  Enhanced  CCP modules.\nPIC18F2525/2620/4525/4620  devices  all  have  two CCP (Capture/Compare/PWM) modules. Each module contains a 16-bit register which can operate as a 16-bit Capture register, a 16-bit Compare register or a PWM Master/Slave Duty Cycle register.\nNote:\nIn  28-pin  devices,  the  two  standard  CCP  modules (CCP1  and  CCP2)  operate  as  described  in  this chapter. In 40/44-pin devices, CCP1 is implemented as an Enhanced CCP module with standard Capture and  Compare  modes  and  Enhanced  PWM  modes. The ECCP implementation is discussed in Section 16.0  'Enhanced  Capture/Compare/PWM (ECCP) Module' .",
    "15.0 CAPTURE/COMPARE/PWM (CCP) MODULES\n- Throughout  this section and Section 16.0 'Enhanced Capture/Compare/PWM (ECCP) Module' ,  references  to  the  register  and  bit names  for  CCP  modules  are  referred  to generically  by  the  use  of  'x'  or  'y'  in  place of the specific module number. Thus, 'CCPxCON' might refer to the control register for CCP1, CCP2 or ECCP1. 'CCPxCON' is used throughout these sections to refer to the  module  control  register,  regardless  of whether  the  CCP  module  is  a  standard  or enhanced implementation.",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = DCxB1. -, 3 = DCxB0. -, 4 = CCPxM3. -, 5 = CCPxM2. -, 6 = CCPxM1. -, 7 = CCPxM0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5-4\nDCxB1:DCxB0 : PWM Duty Cycle bit 1 and bit 0 for CCPx Module\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\nThese bits are the two LSbs (bit 1 and bit 0) of the 10-bit PWM duty cycle. The eight MSbs (DCx9:DCx2) of the duty cycle are found in CCPRxL.\nCCPxM3:CCPxM0\n: CCPx Module Mode Select bits\n0000 = Capture/Compare/PWM disabled (resets CCPx module)",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER (28-PIN DEVICES)\n0001 = Reserved\n0010 = Compare mode, toggle output on match (CCPxIF bit is set)\n0011 = Reserved\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode, initialize CCPx pin low; on compare match, force CCPx pin high (CCPxIF bit is set)\n1001 = Compare mode, initialize CCPx pin high; on compare match, force CCPx pin low (CCPxIF bit is set)\n1010 = Compare mode, generate software interrupt on compare match (CCPxIF bit is set, CCPx pin reflects I/O state)\n1011 = Compare mode, trigger special event; reset timer; CCPx match starts A/D conversion (CCPxIF bit is set)\n11xx = PWM mode",
    "15.1 CCP Module Configuration\nEach  Capture/Compare/PWM  module  is  associated with a control register (generically, CCPxCON) and a data  register  (CCPRx).  The  data  register,  in  turn,  is comprised  of  two  8-bit  registers:  CCPRxL  (low  byte) and  CCPRxH  (high  byte).  All registers are both readable and writable.",
    "15.1.1 CCP MODULES AND TIMER RESOURCES\nThe CCP modules utilize Timers 1, 2 or 3, depending on the mode selected. Timer1 and Timer3 are available to modules  in  Capture  or  Compare  modes,  while Timer2 is available for modules in PWM mode.\nTABLE 15-1: CCP MODE - TIMER RESOURCES\nThe  assignment  of  a  particular  timer  to  a  module  is determined  by  the  Timer  to  CCP  enable  bits  in  the T3CON register (Register 14-1). Both modules may be active at any given time and may share the same timer resource if they are configured to operate in the same mode (Capture/Compare or PWM) at the same time. The interactions between the two modules are summarized in Figure 15-1 and Figure 15-2. In Timer1 in Asynchronous Counter mode, the capture operation will not work.",
    "15.1.2 CCP2 PIN ASSIGNMENT\nThe pin assignment for CCP2 (capture input, compare and PWM output) can change, based on device configuration.  The  CCP2MX  Configuration  bit  determines which  pin  CCP2  is  multiplexed  to.  By  default,  it  is assigned to RC1 (CCP2MX = 1 ). If the Configuration bit is cleared, CCP2 is multiplexed with RB3.\nCapture Compare PWM, Timer Resource = Timer1 or Timer3 Timer1 or Timer3 Timer2\nChanging  the  pin  assignment  of  CCP2  does  not automatically change any requirements for configuring the port pin. Users must always verify that the appropriate  TRIS  register  is  configured  correctly  for  CCP2 operation, regardless of where it is located.",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\n\nNote 1: Includes standard and Enhanced PWM operation.",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nCapture, CCP2 Mode = Capture. Capture, Interaction = Each module can use TMR1 or TMR3 as the time base. The time base can be different for each CCP.. Capture, CCP2 Mode = Compare. Capture, Interaction = CCP2 can be configured for the Special Event Trigger to reset TMR1 or TMR3 (depending upon which time base is used). Automatic A/D conversions on trigger event can also be done. Operation of CCP1 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Capture. Compare, Interaction = CCP1 can be configured for the Special Event Trigger to reset TMR1 or TMR3 (depending upon which time base is used). Operation of CCP2 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Compare. Compare, Interaction = Either module can be configured for the Special Event Trigger to reset the time base. Automatic A/D conversions on CCP2 trigger event can be done. Conflicts may occur if both modules are",
    "TABLE 15-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nusing the same time base.. Capture, CCP2 Mode = PWM (1). Capture, Interaction = None. Compare, CCP2 Mode = PWM (1). Compare, Interaction = None. PWM (1), CCP2 Mode = Capture. PWM (1), Interaction = None. PWM (1), CCP2 Mode = Compare. PWM (1), Interaction = None. PWM (1), CCP2 Mode = PWM. PWM (1), Interaction = Both PWMs will have the same frequency and update rate (TMR2 interrupt).",
    "15.2 Capture Mode\nIn Capture mode, the CCPRxH:CCPRxL register pair captures  the  16-bit  value  of  the  TMR1  or  TMR3 registers when an event occurs on the corresponding CCPx pin. An event is defined as one of the following:\n\u00b7 every falling edge\n\u00b7 every rising edge\n\u00b7 every 4th rising edge\n\u00b7 every 16th rising edge\nThe event is selected by the mode  select bits, CCPxM3:CCPxM0 (CCPxCON<3:0>). When a capture is made, the interrupt request flag bit, CCPxIF, is set; it must be cleared in software. If another capture occurs before  the  value  in  register  CCPRx  is  read,  the  old captured value is overwritten by the new captured value.",
    "15.2.1 CCP PIN CONFIGURATION\nIn Capture mode, the appropriate CCPx pin should be configured  as  an  input  by  setting  the  corresponding TRIS direction bit.\nNote:, 1 = If RB3/CCP2 or RC1/CCP2 is configured as an output, a write to the port can cause a capture condition.",
    "15.2.2 TIMER1/TIMER3 MODE SELECTION\nThe timers that are to be used with the capture feature (Timer1 and/or Timer3) must be running in Timer mode or Synchronized Counter mode. In Asynchronous Counter mode, the capture operation will not work. The timer to be used with each CCP module is selected in the T3CON register (see Section 15.1.1 'CCP Modules and Timer Resources' ).",
    "15.2.3 SOFTWARE INTERRUPT\nWhen the Capture mode is changed, a false capture interrupt may be generated. The user should keep the CCPxIE  interrupt enable bit clear to avoid false interrupts. The interrupt flag bit, CCPxIF, should also be cleared following any such change in operating mode.",
    "15.2.4 CCP PRESCALER\nThere are four prescaler settings in Capture mode; they are specified as part of the operating mode selected by the  mode  select  bits  (CCPxM3:CCPxM0).  Whenever the  CCP  module  is  turned  off  or  Capture  mode  is disabled, the prescaler counter is cleared. This means that any Reset will clear the prescaler counter.\nSwitching from one capture prescaler to another may generate an interrupt. Also, the prescaler counter will not be cleared; therefore, the first capture may be from a non-zero prescaler. Example 15-1 shows the recommended method for switching between capture prescalers.  This  example  also  clears  the  prescaler counter and will not generate the 'false' interrupt.",
    "CHANGING BETWEEN (CCP2 SHOWN)\nCLRF\nCCP2CON\n; Turn CCP module off\nMOVLW\nNEW_CAPT_PS\n; Load WREG with the\n; new prescaler mode\n; value and CCP ON\nMOVWF CCP2CON\n; Load CCP2CON with\n; this value",
    "15.3.2 TIMER1/TIMER3 MODE SELECTION\nIn Compare mode, the 16-bit CCPRx register value is constantly compared against either the TMR1 or TMR3 register pair value. When a match occurs, the CCPx pin can be:\n\u00b7 driven high\n\u00b7 driven low\n\u00b7 toggled (high-to-low or low-to-high)\n\u00b7 remain unchanged (that is, reflects the state of the I/O latch)\nThe action on the pin is based on the value of the mode select bits (CCPxM3:CCPxM0). At the same time, the interrupt flag bit, CCPxIF, is set.",
    "15.3.1 CCP PIN CONFIGURATION\nThe user must configure the CCPx pin as an output by clearing the appropriate TRIS bit.",
    "Note:\nTimer1 and/or Timer3 must be running in Timer mode or Synchronized Counter mode if the CCP module is using the compare feature. In Asynchronous Counter mode, the compare operation may not work.",
    "15.3.3 SOFTWARE INTERRUPT MODE\nWhen the Generate Software Interrupt mode is chosen (CCPxM3:CCPxM0 = 1010 ), the corresponding CCPx pin is not affected. Only a CCP interrupt is generated, if enabled, and the CCPxIE bit is set.",
    "15.3.4 SPECIAL EVENT TRIGGER\nBoth CCP modules are equipped with a Special Event Trigger. This is an internal hardware signal generated in Compare mode to trigger actions by other modules. The Special Event Trigger is enabled by selecting the Compare Special Event Trigger mode (CCPxM3:CCPxM0 = 1011 ).\nFor either CCP module, the Special Event Trigger resets the Timer register pair for whichever timer resource is currently  assigned  as  the  module's  time  base.  This allows the CCPRx registers to serve as a programmable Period register for either timer.\nClearing the CCP2CON register will force the  RB3  or  RC1  compare  output  latch (depending on device configuration) to the default low level. This is not the PORTB or PORTC I/O data latch.\nThe Special Event Trigger for CCP2 can also start an A/D conversion. In order to do this, the A/D converter must already be enabled.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 48. PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nPIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 52. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nDirection Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 52. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 50. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H,",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 50. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 50. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 51. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 51. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nT3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 51. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nByte. CCPR1L, Reset Values on page = 51. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 51. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nDC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 51. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nValues on page = 51. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 51. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on page = 51\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by Capture/Compare, Timer1 or Timer3.\nNote 1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "15.4 PWM Mode\nIn Pulse-Width Modulation (PWM) mode, the CCPx pin produces up to a 10-bit resolution PWM output. Since the CCP2 pin is multiplexed with a PORTB or PORTC data latch, the appropriate TRIS bit must be cleared to make the CCP2 pin an output.\nNote:, 1 = Clearing the CCP2CON register will force the RB3 or RC1 output latch (depending on device configuration) to the default low level. This is not the PORTB or PORTC I/O data latch.\nFigure 15-3  shows  a  simplified  block  diagram  of  the CCP module in PWM mode.\nFor a step-by-step procedure on how to set up the CCP module for PWM  operation, see Section 15.4.4 'Setup for PWM Operation' .",
    "DIAGRAM\nA PWM output (Figure 15-4) has a time base (period) and a time that the output stays high (duty  cycle). The  frequency  of  the  PWM  is  the  inverse  of  the period (1/period).",
    "15.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following formula:",
    "EQUATION 15-1:\nPWM Period  = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period].\nWhen TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCPx pin is set (exception: if PWM duty cycle = 0%, the CCPx pin will not be set)\n\u00b7 The PWM duty cycle is latched from CCPRxL into CCPRxH\nNote:\nThe Timer2 postscalers (see Section 13.0 'Timer2  Module' )  are  not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "15.4.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPRxL register and to the CCPxCON<5:4> bits. Up to 10-bit resolution is available. The CCPRxL contains the eight MSbs and the CCPxCON<5:4> contains the two LSbs. This 10-bit value is represented by CCPRxL:CCPxCON<5:4>.  The  following  equation  is used to calculate the PWM duty cycle in time:",
    "EQUATION 15-2:\nPWM Duty Cycle = (CCPRXL:CCPXCON<5:4>) \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nCCPRxL and CCPxCON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  latched  into CCPR2H until after a match between PR2 and TMR2 occurs  (i.e.,  the  period  is  complete).  In  PWM  mode, CCPRxH is a read-only register.",
    "PIC18F2525/2620/4525/4620\nThe  CCPR2H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.\nWhen  the  CCPRxH  and  2-bit  latch  match  TMR2, concatenated with an internal 2-bit Q clock or 2 bits of the TMR2 prescaler, the CCP2 pin is cleared.\nThe maximum PWM resolution (bits) for a given PWM frequency is given by the equation:",
    "EQUATION 15-3:\nFOSC FPWM - -- - --- -- ---- - -\u239d \u23a0 \u239b \u239e log 2 ( ) log - -- - --- - --- -- - --- - -- bits ----- ----= PWM Resolution (max)\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP2 pin will not be cleared.",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "15.4.4 SETUP FOR PWM OPERATION\nThe PWM auto-shutdown features of the Enhanced CCP module are also available to CCP1 in 28-pin devices. The operation of this feature is discussed  in detail in Section 16.4.7 'Enhanced PWM Auto-Shutdown' .\nAuto-shutdown features are not available for CCP2.\nThe following steps should be taken when configuring the CCPx module for PWM operation:\n1. Set  the  PWM  period  by  writing  to  the  PR2 register.\n2. Set  the  PWM  duty  cycle  by  writing  to  the CCPRxL register and CCPxCON<5:4> bits.\n3. Make the CCPx pin an output by clearing the appropriate TRIS bit.\n4. Set  the  TMR2  prescale  value,  then  enable Timer2 by writing to T2CON.\n5. Configure the CCPx module for PWM operation.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 48. PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. TRISB,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nBit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 52. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 52. TMR2, Bit 7 = Timer2 Register. TMR2,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nBit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 50. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 50. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 50. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 51. CCPR1H, Bit 7 =",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 51. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 51. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset Values on page = 51. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 51. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1.",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on page = 51. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (2). ECCP1AS, Bit 0 = PSSBD0 (2). ECCP1AS, Reset Values on page = 51. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (2). PWM1CON, Bit 5 = PDC5 (2). PWM1CON, Bit 4 = PDC4 (2). PWM1CON, Bit 3 = PDC3 (2). PWM1CON, Bit 2 = PDC2 (2).",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nPWM1CON, Bit 1 = PDC1 (2). PWM1CON, Bit 0 = PDC0 (2). PWM1CON, Reset Values on page = 51\n- Legend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by PWM or Timer2.\nNote 1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These bits are unimplemented on 28-pin devices and read as ' 0 '.\nbit 5-4",
    "16.0 ENHANCED CAPTURE/ COMPARE/PWM (ECCP) MODULE\nNote:\nThe ECCP module is implemented only in 40/44-pin devices.\nEnhanced features are discussed in detail in Section 16.4 'Enhanced  PWM  Mode' . Capture, Compare  and  single-output  PWM  functions  of  the ECCP  module  are  the  same  as  described  for  the standard CCP module.\nIn  PIC18F4525/4620  devices,  CCP1  is  implemented as  a  standard  CCP  module  with  Enhanced  PWM capabilities.  These  include  the  provision  for  2  or  4 output  channels,  user-selectable  polarity,  dead-band control and  automatic  shutdown  and  restart.  The\nThe control register for the Enhanced CCP module is shown in Register 16-1. It differs from the CCPxCON registers in PIC18F2525/2620 devices in that the two Most Significant bits are implemented to control PWM functionality.",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\nP1M1, R/W-0 = P1M0. P1M1, R/W-0 = DC1B1. P1M1, R/W-0 = DC1B0. P1M1, R/W-0 = CCP1M3. P1M1, R/W-0 = CCP1M2. P1M1, R/W-0 = CCP1M1. P1M1, R/W-0 = CCP1M0. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 P1M1:P1M0: Enhanced PWM Output Configuration bits\nIf CCP1M3:CCP1M2 = 00 01 10 , , :\nxx = P1A assigned as capture/compare input/output; P1B, P1C, P1D assigned as port pins\nIf CCP1M3:CCP1M2 = 11 :\n00 = Single output, P1A modulated; P1B, P1C, P1D assigned as port pins\n01 = Full-bridge output forward, P1D modulated; P1A active; P1B, P1C inactive\n10 = Half-bridge output, P1A, P1B modulated with dead-band control; P1C, P1D assigned as port pins\n11 = Full-bridge output reverse, P1B modulated; P1C active; P1A, P1D inactive\nDC1B1:DC1B0 : PWM Duty Cycle bit 1 and bit 0\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:",
    "bit 7-6 P1M1:P1M0: Enhanced PWM Output Configuration bits\nThese bits are the two LSbs of the 10-bit PWM duty cycle. The eight MSbs of the duty cycle are found in CCPR1L.",
    "bit 3-0 CCP1M3:CCP1M0 : Enhanced CCP Mode Select bits\n0000 = Capture/Compare/PWM off (resets ECCP module)\n- 0001 = Reserved\n0010 = Compare mode, toggle output on match",
    "bit 3-0 CCP1M3:CCP1M0 : Enhanced CCP Mode Select bits\n0011 = Capture mode\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode, initialize CCP1 pin low; set output on compare match (set CCP1IF)\n1001 = Compare mode, initialize CCP1 pin high; clear output on compare match (set CCP1IF)\n1010 = Compare mode, generate software interrupt only; CCP1 pin reverts to I/O state\n1011 = Compare mode, trigger special event (ECCP resets TMR1 or TMR3, sets CCP1IF bit)\n1100 = PWM mode, P1A, P1C active-high; P1B, P1D active-high\n1101 = PWM mode, P1A, P1C active-high; P1B, P1D active-low\n1110 = PWM mode, P1A, P1C active-low; P1B, P1D active-high",
    "bit 3-0 CCP1M3:CCP1M0 : Enhanced CCP Mode Select bits\n1111 = PWM mode, P1A, P1C active-low; P1B, P1D active-low",
    "PIC18F2525/2620/4525/4620\nIn addition to the expanded range of modes available through the CCP1CON and ECCP1AS registers, the ECCP  module  has  an  additional  register  associated with  Enhanced  PWM  operation  and  auto-shutdown features; it is:",
    "16.2 Capture and Compare Modes\n- \u00b7 PWM1CON (PWM Configuration)",
    "16.1 ECCP Outputs and Configuration\nThe Enhanced CCP module may have up to four PWM outputs,  depending  on  the  selected  operating  mode. These  outputs,  designated  P1A  through  P1D,  are multiplexed with I/O pins on PORTC and PORTD. The outputs that are active depend on the CCP operating mode selected. The pin assignments are summarized in Table 16-1.\nTo configure the I/O pins as PWM outputs, the proper PWM  mode must be selected by setting the P1M1:P1M0 and CCP1M3:CCP1M0 bits. The appropriate TRISC and TRISD direction bits for the port pins must also be set as outputs.",
    "16.1.1 ECCP MODULES AND TIMER RESOURCES\nExcept for the operation of the Special Event Trigger discussed below, the Capture and Compare modes of the ECCP module are identical in operation to that of CCP2. These are discussed in detail in Section 15.2 'Capture Mode' and Section 15.3 'Compare Mode' . No changes are required when moving between 28-pin and 40/44-pin devices.",
    "16.2.1 SPECIAL EVENT TRIGGER\nThe Special Event Trigger output of ECCP1 resets the TMR1 or TMR3 register pair, depending on which timer resource is currently selected. This allows the CCPR1 register to effectively be a 16-bit programmable period register for Timer1 or Timer3.",
    "16.3 Standard PWM Mode\nWhen configured  in  Single  Output  mode,  the  ECCP module  functions  identically  to  the  standard  CCP module in PWM mode, as described in Section 15.4 'PWM Mode' .  This is also sometimes referred to as 'Compatible CCP' mode, as in Table 16-1.\nLike the standard CCP modules, the ECCP module can utilize  Timers  1,  2  or  3,  depending  on  the  mode selected. Timer1 and Timer3 are available for modules in Capture or Compare modes, while Timer2 is available for modules in PWM mode. Interactions between the standard and Enhanced CCP modules are identical to those described for standard CCP  modules. Additional  details  on  timer  resources  are  provided  in Section 15.1.1 'CCP Modules and Timer Resources' .",
    "Note:\nWhen  setting up single output PWM operations, users are free to use either of the processes described in Section 15.4.4 'Setup for PWM Operation' or Section 16.4.9  'Setup for PWM Operation' . The latter is more generic and will work for either single or multi-output PWM.\n\nTABLE 16-1: PIN ASSIGNMENTS FOR VARIOUS ECCP1 MODES",
    "Note:\nAll 40/44-pin devices:, CCP1CON Configuration = All 40/44-pin devices:. All 40/44-pin devices:, RC2 = All 40/44-pin devices:. All 40/44-pin devices:, RD5 = All 40/44-pin devices:. All 40/44-pin devices:, RD6 = All 40/44-pin devices:. All 40/44-pin devices:, RD7 = All 40/44-pin devices:. Compatible CCP, CCP1CON Configuration = 00xx 11xx. Compatible CCP, RC2 = CCP1. Compatible CCP, RD5 = RD5/PSP5. Compatible CCP, RD6 = RD6/PSP6. Compatible CCP, RD7 = RD7/PSP7. Dual PWM, CCP1CON Configuration = 10xx 11xx. Dual PWM, RC2 = P1A. Dual PWM, RD5 = P1B. Dual PWM, RD6 = RD6/PSP6. Dual PWM, RD7 = RD7/PSP7. Quad PWM,",
    "Note:\nCCP1CON Configuration = x1xx 11xx. Quad PWM, RC2 = P1A. Quad PWM, RD5 = P1B. Quad PWM, RD6 = P1C. Quad PWM, RD7 = P1D\nLegend: x = Don't care. Shaded cells indicate pin assignments not used by ECCP1 in a given mode.",
    "16.4 Enhanced PWM Mode\nThe Enhanced PWM mode provides additional PWM output options for a broader range of control applications. The module is a backward compatible version of the standard CCP module and offers up to four outputs, designated P1A through P1D. Users are also able to select  the  polarity  of  the  signal  (either  active-high  or active-low). The module's output mode and polarity are configured by setting the P1M1:P1M0 and CCP1M3:CCP1M0 bits of the CCP1CON register.",
    "16.4 Enhanced PWM Mode\nFigure 16-1 shows a simplified block diagram of PWM operation. All control registers are double-buffered and are loaded at the beginning of a new PWM cycle (the period  boundary  when  Timer2  resets)  in  order  to prevent glitches on any of the outputs. The exception is the PWM Delay register, PWM1CON, which is loaded at either the duty cycle boundary or the period boundary (whichever comes first). Because of the buffering, the  module  waits  until  the  assigned  timer  resets, instead of starting immediately. This means  that Enhanced PWM waveforms do not exactly match the standard  PWM waveforms, but are instead  offset  by one full instruction cycle (4 TOSC).",
    "16.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following equation.",
    "EQUATION 16-1:\nPWM Period   = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period]. When TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCP1 pin is set (if PWM duty cycle = 0%, the CCP1 pin will not be set)\n\u00b7 The PWM duty cycle is copied from CCPR1L into CCPR1H\nNote:\nAs  before,  the  user  must  manually  configure  the appropriate TRIS bits for output.\nThe Timer2 postscaler (see Section 13.0 'Timer2  Module' ) is not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "EQUATION 16-3:\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPR1L register and to the CCP1CON<5:4> bits. Up to 10-bit resolution is available. The CCPR1L contains the eight MSbs and the CCP1CON<5:4> contains the two LSbs. This 10-bit value is represented by CCPR1L:CCP1CON<5:4>.  The  PWM  duty  cycle  is calculated by the following equation.",
    "EQUATION 16-2:\nPWM Duty Cycle  = (CCPR1L:CCP1CON<5:4>) \u2022 TOSC \u2022 (TMR2 Prescale Value)\nCCPR1L and CCP1CON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  copied  into CCPR1H until a match between PR2 and TMR2 occurs (i.e., the period is complete). In PWM mode, CCPR1H is a read-only register.\n<!-- formula-not-decoded -->\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP1 pin will not be cleared.",
    "16.4.3 PWM OUTPUT CONFIGURATIONS\nThe P1M1:P1M0 bits in the CCP1CON register allow one of four configurations:\n\u00b7 Single Output\n\u00b7 Half-Bridge Output\n\u00b7 Full-Bridge Output, Forward mode\n\u00b7 Full-Bridge Output, Reverse mode\nThe  CCPR1H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.  When the  CCPR1H and 2-bit latch match TMR2, concatenated with an internal 2-bit Q clock or two  bits  of  the  TMR2  prescaler,  the  CCP1  pin  is cleared.  The  maximum  PWM  resolution  (bits)  for  a given PWM  frequency  is  given by the following equation.\nThe Single Output mode is the standard PWM mode discussed in Section 16.4 'Enhanced PWM Mode' . The  Half-Bridge  and  Full-Bridge  Output  modes  are covered in detail in the sections that follow.\nThe general relationship of the outputs in all configurations is summarized in Figure 16-2.",
    "TABLE 16-2: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 16-2: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "FIGURE 16-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n00, CCP1CON.<7:6> = (Single Output). 00, SIGNAL. = P1A Modulated. 00, 0. = . 00, Period = . 00, PR2 + 1. = . 10, CCP1CON.<7:6> = (Half-Bridge). 10, SIGNAL. = P1A Modulated P1B Modulated. 10, 0. = Delay (1). 10, Period = Delay (1). 10, PR2 + 1. = . 01, CCP1CON.<7:6> = (Full-Bridge, Forward). 01, SIGNAL. = P1A Active. 01, 0. = . 01, Period = . 01, PR2 + 1. = . , CCP1CON.<7:6> = . , SIGNAL. = P1B Inactive. , 0. = . , Period = . , PR2 + 1. = . , CCP1CON.<7:6> = P1C Inactive. , SIGNAL. = P1D Modulated. , 0. = . , Period = . ,",
    "FIGURE 16-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\nPR2 + 1. = . 11, CCP1CON.<7:6> = P1B (Full-Bridge, Reverse). 11, SIGNAL. = . 11, 0. = . 11, Period = . 11, PR2 + 1. = . , CCP1CON.<7:6> = . , SIGNAL. = Modulated P1C Active. , 0. = . , Period = . , PR2 + 1. = . , CCP1CON.<7:6> = P1D Inactive. , SIGNAL. = . , 0. = . , Period = . , PR2 + 1. = ",
    "Relationships:\n\u00b7 Period = 4 * TOSC * (PR2 + 1) * (TMR2 Prescale Value)\n\u00b7 Duty Cycle = TOSC * (CCPR1L<7:0>:CCP1CON<5:4>) * (TMR2 Prescale Value)\n\u00b7 Delay = 4 * TOSC * (PWM1CON<6:0>)\nNote 1: Dead-band delay is programmed using the PWM1CON register (see Section 16.4.6 'Programmable Dead-Band Delay' ).",
    "FIGURE 16-4:\nIn the Half-Bridge Output mode, two pins are used as outputs to drive push-pull loads. The PWM output signal is output on the P1A pin, while the complementary PWM output signal is output on the P1B pin (Figure 16-4). This mode can be used for half-bridge applications, as shown in Figure 16-5, or for full-bridge applications where four power  switches  are  being  modulated  with  two  PWM signals.\nIn Half-Bridge Output mode, the programmable deadband  delay  can  be  used  to  prevent  shoot-through current in half-bridge power devices. The value of bits, PDC6:PDC0,  sets  the  number  of  instruction  cycles before the output is driven active. If the value is greater than the duty cycle, the corresponding output remains inactive  during  the  entire  cycle.  See Section 16.4.6 'Programmable Dead-Band Delay' for more details of the dead-band delay operations.",
    "HALF-BRIDGE PWM OUTPUT\nSince the P1A and P1B outputs are multiplexed with the  PORTC<2>  and  PORTD<5>  data  latches,  the TRISC<2>  and  TRISD<5>  bits  must  be  cleared  to configure P1A and P1B as outputs.",
    "16.4.5 FULL-BRIDGE MODE\nIn  Full-Bridge  Output  mode,  four  pins  are  used  as outputs; however, only two outputs are active at a time. In  the  Forward mode, pin P1A is continuously active and pin P1D is modulated. In the Reverse mode, pin P1C is continuously active and pin P1B is modulated. These are illustrated in Figure 16-6.\nP1A, P1B, P1C and P1D outputs are multiplexed with the  PORTC<2> and PORTD<7:5> data latches. The TRISC<2> and TRISD<7:5> bits  must  be  cleared  to make the P1A, P1B, P1C and P1D pins outputs.\nFIGURE 16-6: FULL-BRIDGE PWM OUTPUT",
    "16.4.5 FULL-BRIDGE MODE\nP1A (2), Forward Mode.Period = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . (2), Forward Mode.Period = . (2), Forward Mode. = . (2), Forward Mode. = . (2), Forward Mode. = . P1B, Forward Mode.Period = . P1B, Forward Mode. = . P1B, Forward Mode. = . P1B, Forward Mode. = . P1C (2) P1D (2) (1), Forward Mode.Period = . P1C (2) P1D (2) (1), Forward Mode. = . P1C (2) P1D (2) (1), Forward Mode. = (1). P1C (2) P1D (2) (1), Forward Mode. = . Reverse Mode, Forward Mode.Period = . Reverse Mode, Forward Mode. = . Reverse Mode, Forward Mode. = . Reverse Mode, Forward Mode. = . , Forward",
    "16.4.5 FULL-BRIDGE MODE\nMode.Period = . , Forward Mode. = Period. , Forward Mode. = . , Forward Mode. = . P1A (2), Forward Mode.Period = Duty Cycle. P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . (2), Forward Mode.Period = . (2), Forward Mode. = . (2), Forward Mode. = . (2), Forward Mode. = . P1B, Forward Mode.Period = . P1B, Forward Mode. = . P1B, Forward Mode. = . P1B, Forward Mode. = . P1C (2), Forward Mode.Period = . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = . Note 1: At this time, the, Forward Mode.Period = (1). Note 1: At this time, the, Forward Mode. = . Note 1: At this time, the, Forward Mode. = (1).",
    "16.4.5 FULL-BRIDGE MODE\nNote 1: At this time, the, Forward Mode. = . TMR2 register is equal to the PR2 Note 2: Output signal is shown as active-high., Forward Mode.Period = . TMR2 register is equal to the PR2 Note 2: Output signal is shown as active-high., Forward Mode. = . TMR2 register is equal to the PR2 Note 2: Output signal is shown as active-high., Forward Mode. = . TMR2 register is equal to the PR2 Note 2: Output signal is shown as active-high., Forward Mode. = . register., Forward Mode.Period = register.. register., Forward Mode. = register.. register., Forward Mode. = register.. register., Forward Mode. = register.",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nIn  the  Full-Bridge  Output  mode,  the  P1M1  bit  in  the CCP1CON register allows user to control the forward/ reverse direction. When  the application firmware changes  this  direction  control  bit,  the  module  will assume the new direction on the next PWM cycle.\nJust  before  the  end  of  the  current  PWM  period,  the modulated outputs (P1B and P1D) are placed in their inactive state, while the unmodulated outputs (P1A and P1C) are switched to drive in the opposite direction. This  occurs  in  a  time  interval  of  4 TOSC  *  (Timer2 Prescale Value) before the next PWM period begins. The Timer2 prescaler will be either 1, 4 or 16, depending on  the  value  of  the  T2CKPS1:T2CKPS0  bits (T2CON<1:0>). During the interval from the switch of the unmodulated outputs to the beginning of the next period, the modulated outputs (P1B and P1D) remain inactive. This relationship is shown in Figure 16-8.",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nNote that  in  the  Full-Bridge  Output  mode,  the  CCP1 module  does  not  provide  any  dead-band  delay.  In general, since only one output is modulated at all times, dead-band delay is not required. However, there is a situation where a dead-band delay might be required. This situation occurs  when  both  of  the  following conditions are true:\n1. The direction of the PWM output changes when the duty cycle of the output is at or near 100%.\n2. The turn-off time of the power switch, including the  power  device  and  driver  circuit,  is  greater than the turn-on time.",
    "16.4.5.1 Direction Change in Full-Bridge Mode\nFigure 16-9 shows  an  example  where  the PWM direction  changes  from  forward  to  reverse  at  a  near 100% duty cycle. At time t1, the outputs P1A and P1D become inactive, while output P1C becomes active. In this  example,  since  the  turn-off  time  of  the  power devices is longer than the turn-on time, a shoot-through current may flow through power devices, QC and QD (see  Figure 16-7),  for  the  duration  of  't'.  The  same phenomenon will occur to power devices, QA and QB, for PWM direction change from reverse to forward.\nIf changing PWM direction at high duty cycle is required for  an  application,  one  of  the  following  requirements must be met:\n1. Reduce PWM  for a PWM  period before changing directions.\n2. Use switch drivers that can drive the switches off faster than they can drive them on.\nOther  options  to  prevent  shoot-through  current  may exist.",
    "FIGURE 16-9: PWM DIRECTION CHANGE AT NEAR 100% DUTY CYCLE\nNote 1: All signals are shown as active-high.\n2: t ON  is the turn-on delay of power switch QC and its driver.\n3: t OFF  is the turn-off delay of power switch QD and its driver.",
    "16.4.6 PROGRAMMABLE DEAD-BAND DELAY\nNote:\nProgrammable  dead-band  delay  is  not implemented in 28-pin devices with standard CCP modules.\nIn half-bridge applications where all power switches are modulated  at  the  PWM  frequency  at  all  times,  the power switches normally require more time to turn off than  to  turn  on.  If  both  the  upper  and  lower  power switches are switched at the same time (one turned on and the other turned off), both switches may be on for a short period of time until one switch completely turns off. During this brief interval, a very high current ( shootthrough current ) may flow through both power switches,  shorting  the  bridge  supply.  To  avoid  this potentially destructive shoot-through current from flowing during switching, turning on either of the power switches is normally delayed to allow the other switch to completely turn off.",
    "16.4.6 PROGRAMMABLE DEAD-BAND DELAY\nIn the Half-Bridge Output mode, a digitally programmable dead-band  delay  is  available  to  avoid  shoot-through current from destroying the bridge power switches. The delay occurs at the signal transition from the nonactive state to the active state. See Figure 16-4 for illustration. Bits PDC6:PDC0 of the PWM1CON register (Register 16-2) set the delay period in terms of microcontroller instruction cycles (TCY or 4 TOSC). These bits are not available on 28-pin devices as the standard CCP module does not support half-bridge operation.",
    "16.4.7 ENHANCED PWM AUTO-SHUTDOWN\nA  shutdown  event  can  be  caused  by  either  of  the comparator modules, a low level on the Fault input pin (FLT0) or any combination of these three sources. The comparators  may  be  used  to  monitor  a  voltage  input proportional to a current being monitored in the bridge circuit. If the voltage exceeds a threshold, the comparator  switches  state  and  triggers  a  shutdown. Alternatively, a low digital signal on FLT0 can also trigger a shutdown. The auto-shutdown feature can be disabled by not selecting any auto-shutdown sources. The autoshutdown  sources  to  be  used  are  selected  using  the ECCPAS2:ECCPAS0 bits (ECCP1AS<6:4>).",
    "16.4.7 ENHANCED PWM AUTO-SHUTDOWN\nWhen a shutdown occurs, the output pins  are  asynchronously placed in their shutdown states, specified by the PSSAC1:PSSAC0 and PSSBD1:PSSBD0 bits (ECCP1AS<3:0>). Each pin pair (P1A/P1C and P1B/ P1D) may be set to drive high, drive low or be tri-stated (not driving). The ECCPASE bit (ECCP1AS<7>) is also set to hold  the  Enhanced  PWM  outputs  in  their shutdown states.\nThe ECCPASE bit is set by hardware when a shutdown event occurs. If automatic restarts are not enabled, the ECCPASE bit is cleared by firmware when the cause of the shutdown clears. If automatic restarts are enabled, the  ECCPASE  bit  is  automatically  cleared  when  the cause of the auto-shutdown has cleared.",
    "16.4.7 ENHANCED PWM AUTO-SHUTDOWN\nIf the ECCPASE bit is set when a PWM period begins, the PWM outputs remain in their shutdown state for that entire PWM period. When the ECCPASE bit is cleared, the PWM outputs will return to normal operation at the beginning of the next PWM period.\nWhen the CCP1 is programmed for any of the Enhanced PWM modes, the active output pins may be configured for  auto-shutdown. Auto-shutdown immediately places the Enhanced PWM output pins into a defined shutdown state when a shutdown event occurs.\nNote:\nWriting  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.",
    "REGISTER 16-2: PWM1CON: PWM CONFIGURATION REGISTER\nPRSEN, R/W-0 = PDC6 (1). PRSEN, R/W-0 = PDC5 (1). PRSEN, R/W-0 = PDC4 (1). PRSEN, R/W-0 = PDC3 (1). PRSEN, R/W-0 = PDC2 (1). PRSEN, R/W-0 = PDC1 (1). PRSEN, R/W-0 = PDC0 (1). bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = bit 0",
    "REGISTER 16-2: PWM1CON: PWM CONFIGURATION REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nPRSEN: PWM Restart Enable bit\n1 = Upon auto-shutdown, the ECCPASE bit clears automatically once the shutdown event goes away; the PWM restarts automatically\n0 = Upon auto-shutdown, ECCPASE must be cleared in software to restart the PWM\nPDC6:PDC0: PWM Delay Count bits (1)",
    "bit 6-0\nDelay time, in number of FOSC/4 (4 * TOSC) cycles, between the scheduled and actual time for a PWM signal to transition to active.\nNote 1: Unimplemented on 28-pin devices; bits read as ' 0 '.",
    "REGISTER 16-3: ECCP1AS: ECCP AUTO-SHUTDOWN CONTROL REGISTER\nECCPASE, R/W-0 = ECCPAS2. ECCPASE, R/W-0 = ECCPAS1. ECCPASE, R/W-0 = ECCPAS0. ECCPASE, R/W-0 = PSSAC1. ECCPASE, R/W-0 = PSSAC0. ECCPASE, R/W-0 = PSSBD1 (1). ECCPASE, R/W-0 = PSSBD0 (1). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-3: ECCP1AS: ECCP AUTO-SHUTDOWN CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 ECCPASE: ECCP Auto-Shutdown Event Status bit\n1 0 = ECCP outputs are operating\n= A shutdown event has occurred; ECCP outputs are in shutdown state\nbit 6-4\nECCPAS2:ECCPAS0: ECCP Auto-Shutdown Source Select bits\n111 = FLT0 or Comparator 1 or Comparator 2\n110 = FLT0 or Comparator 2\n101 = FLT0 or Comparator 1\n100 = FLT0\n011 = Either Comparator 1 or 2\n010 = Comparator 2 output\n001 = Comparator 1 output\n000 = Auto-shutdown is disabled",
    "bit 3-2 PSSAC1:PSSAC0: Pins A and C Shutdown State Control bits\n1x =  Pins A and C are tri-state (40/44-pin devices);\nPWM output is tri-state (28-pin devices)\n01 =  Drive Pins A and C to ' 1 '\n00 =  Drive Pins A and C to ' 0 '",
    "bit 1-0 PSSBD1:PSSBD0: Pins B and D Shutdown State Control bits\n(1)\n1x =  Pins B and D tri-state\n01 =  Drive Pins B and D to ' 1 '\n00 =  Drive Pins B and D to ' 0 '\nNote 1: Unimplemented on 28-pin devices; bits read as ' 0 '.",
    "16.4.8 START-UP CONSIDERATIONS\nThe auto-shutdown feature can be configured to allow automatic restarts of the module following a shutdown event. This is enabled by setting the PRSEN bit of the PWM1CON register (PWM1CON<7>).\nIn Shutdown mode with PRSEN = 1 (Figure 16-10), the ECCPASE bit will remain set for as long as the cause of the shutdown continues. When the shutdown condition clears, the ECCP1ASE bit is cleared. If PRSEN = 0 (Figure 16-11), once a shutdown condition occurs, the ECCPASE  bit  will  remain  set  until  it  is  cleared  by firmware.  Once  ECCPASE  is  cleared,  the  Enhanced PWM will resume at the beginning of the next PWM period.\nNote:\nWriting  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.\nIndependent  of  the  PRSEN  bit  setting,  if  the  autoshutdown  source  is  one  of  the  comparators,  the shutdown  condition  is  a  level.  The  ECCPASE  bit cannot be cleared as long as the cause of the shutdown persists.",
    "16.4.8 START-UP CONSIDERATIONS\nWhen the ECCP module is used in the PWM mode, the application hardware must use the proper external pullup and/or pull-down resistors on the PWM output pins. When the microcontroller is released from Reset, all of the  I/O  pins  are  in  the  high-impedance  state.  The external circuits must keep the power switch devices in the off state until the microcontroller drives the I/O pins with  the  proper  signal  levels,  or  activates  the  PWM output(s).\nThe  CCP1M1:CCP1M0  bits  (CCP1CON<1:0>)  allow the user to choose whether the PWM output signals are active-high or active-low for each pair of PWM output pins (P1A/P1C  and  P1B/P1D).  The  PWM  output polarities must be selected before the PWM pins are configured as outputs. Changing the polarity configuration while the PWM pins are configured as outputs is not recommended, since it may result in damage to the application circuits.",
    "16.4.8 START-UP CONSIDERATIONS\nThe Auto-Shutdown mode can be forced by writing a ' 1 ' to the ECCPASE bit.\nThe P1A, P1B, P1C and P1D output latches may not be in the proper states when the PWM module is initialized. Enabling the PWM pins for output at the same time as the ECCP module may cause damage to the application circuit. The ECCP module must be enabled in the proper  output  mode  and  complete  a  full  PWM  cycle before configuring the PWM pins as outputs. The completion of a full PWM cycle is indicated by the TMR2IF bit being set as the second PWM period begins.",
    "16.4.9 SETUP FOR PWM OPERATION\nThe following steps should be taken when configuring the ECCP module for PWM operation:",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n1. Configure  the  PWM  pins,  P1A  and  P1B  (and P1C and P1D, if used), as inputs by setting the corresponding TRIS bits.\n2. Set the PWM period by loading the PR2 register.\n3. If auto-shutdown is required, do the following:\n\u00b7 Disable auto-shutdown (ECCP1AS = 0 )\n\u00b7 Configure source (FLT0, Comparator 1 or Comparator 2)\n\u00b7 Wait for non-shutdown condition\n4. Configure  the  ECCP  module  for  the  desired PWM  mode  and  configuration  by  loading  the CCP1CON register with the appropriate values:\n\u00b7 Select one of the available output configurations and direction with the P1M1:P1M0 bits.\n\u00b7 Select the polarities of the PWM output signals with the CCP1M3:CCP1M0 bits.\n5. Set the PWM duty cycle by loading the CCPR1L register and CCP1CON<5:4> bits.",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n6. For  Half-Bridge  Output  mode,  set  the  deadband  delay  by  loading  PWM1CON<6:0>  with the appropriate value.\n7. If auto-shutdown operation is required, load the ECCP1AS register:\n\u00b7 Select the auto-shutdown sources using the ECCPAS2:ECCPAS0 bits.\n\u00b7 Select the shutdown states of the PWM output pins using the PSSAC1:PSSAC0 and PSSBD1:PSSBD0 bits.\n\u00b7 Set the ECCPASE bit (ECCP1AS<7>).\n\u00b7 Configure the comparators using the CMCON register.\n\u00b7 Configure the comparator inputs as analog inputs.\n8. If auto-restart  operation  is  required,  set  the PRSEN bit (PWM1CON<7>).\n9. Configure and start TMR2:\n\u00b7 Clear the TMR2 interrupt flag bit by clearing the TMR2IF bit (PIR1<1>).",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\n\u00b7 Set the TMR2 prescale value by loading the T2CKPS bits (T2CON<1:0>).\n\u00b7 Enable Timer2 by setting the TMR2ON bit (T2CON<2>).\n10. Enable  PWM outputs after  a  new  PWM  cycle has started:\n\u00b7 Wait until TMRx overflows (TMRxIF bit is set).\n\u00b7 Enable the CCP1/P1A, P1B, P1C and/or P1D pin outputs by clearing the respective TRIS bits.\n\u00b7 Clear the ECCPASE bit (ECCP1AS<7>).\nIn Sleep mode, all clock sources are disabled. Timer2 will not increment and the state of the module will not change. If the ECCP pin is driving a value, it will continue to  drive  that  value.  When  the  device  wakes  up,  it  will continue  from  this  state.  If  Two-Speed  Start-ups  are enabled, the initial start-up frequency from INTOSC and the postscaler may not be stable immediately.",
    "16.4.10 OPERATION IN POWER-MANAGED MODES\nIn PRI_IDLE mode, the primary clock will continue to clock  the  ECCP  module without  change.  In  all  other power-managed modes, the selected power-managed mode clock will clock Timer2. Other power-managed mode  clocks  will  most  likely  be  different  than  the primary clock frequency.",
    "16.4.10.1 Operation with Fail-Safe Clock Monitor\nIf the Fail-Safe Clock Monitor is enabled, a clock failure will force the device into the power-managed RC_RUN mode and the OSCFIF bit (PIR2<7>) will be set. The ECCP will then be clocked from the internal oscillator clock source, which may  have  a different clock frequency than the primary clock.\nSee the previous section for additional details.",
    "16.4.11 EFFECTS OF A RESET\nBoth Power-on Reset and subsequent Resets will force all ports to Input mode and the CCP registers to their Reset states.\nThis forces the Enhanced CCP module to reset to a state compatible with the standard CCP module.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 48. PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n= CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n52. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 52. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nPORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 52. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 52. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L,",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nBit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 50. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 50. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n= T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 50. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 50. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nT2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 50. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 50. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nByte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 51. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 51. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC.",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nT3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 51. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 51. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 51. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nCCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 51. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (2). ECCP1AS, Bit 0 = PSSBD0 (2). ECCP1AS, Reset Values on page = 51. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (2). PWM1CON, Bit 5 = PDC5 (2). PWM1CON, Bit 4 = PDC4 (2). PWM1CON, Bit 3 = PDC3 (2). PWM1CON, Bit 2 =",
    "TABLE 16-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nPDC2 (2). PWM1CON, Bit 1 = PDC1 (2). PWM1CON, Bit 0 = PDC0 (2). PWM1CON, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during ECCP operation.\nNote 1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These bits are unimplemented on 28-pin devices; always maintain these bits clear.",
    "17.1 Master SSP (MSSP) Module Overview\nThe Master Synchronous Serial Port (MSSP) module is a serial interface, useful for communicating with other peripheral or microcontroller devices. These peripheral devices  may  be  serial  EEPROMs,  shift  registers, display drivers, A/D converters, etc. The MSSP module can operate in one of two modes:\n\u00b7 Serial Peripheral Interface (SPI)\n\u00b7 Inter-Integrated Circuit (I 2 C)\n-Full Master mode\n-Slave mode (with general address call)\nThe  I 2 C  interface  supports  the  following  modes  in hardware:\n\u00b7 Master mode\n\u00b7 Multi-Master mode\n\u00b7 Slave mode",
    "17.2 Control Registers\nThe  MSSP  module  has  three  associated  registers. These  include  a  status  register  (SSPSTAT)  and  two control registers (SSPCON1 and SSPCON2). The use of these registers and their individual Configuration bits differ  significantly  depending  on  whether  the  MSSP module is operated in SPI or I 2 C mode.\nAdditional  details  are  provided  under  the  individual sections.",
    "17.3 SPI Mode\nThe SPI mode allows 8 bits of data to be synchronously transmitted and received simultaneously. All four SPI modes are supported. To accomplish communication, typically three pins are used:\n\u00b7 Serial Data Out (SDO) - RC5/SDO\n\u00b7 Serial Data In (SDI) - RC4/SDI/SDA\n\u00b7 Serial Clock (SCK) - RC3/SCK/SCL\nAdditionally, a fourth pin may be used when in a Slave mode of operation:\n- \u00b7 Slave Select (SS) - RA5/AN4/SS/HLVDIN/C2OUT\nFigure 17-1  shows  the  block  diagram  of  the  MSSP module when operating in SPI mode.",
    "17.3.1 REGISTERS\nThe  MSSP  module  has  four  registers  for  SPI  mode operation. These are:\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.\nSSPCON1  and  SSPSTAT  are  the  control  and  status registers in SPI mode operation. The SSPCON1 register is readable  and  writable.  The  lower  6  bits  of  the SSPSTAT  are  read-only.  The  upper  two  bits  of  the SSPSTAT are read/write.",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-0. SMP, 1 = CKE (1). SMP, 2 = D/A. SMP, 3 = P. SMP, 4 = S. SMP, 5 = R/W. SMP, 6 = UA. SMP, 7 = BF. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Sample bit\nSPI Master mode:\n1 = Input data sampled at end of data output time\n0 = Input data sampled at middle of data output time\nSPI Slave mode:\nSMP must be cleared when SPI is used in Slave mode.",
    "bit 6\nCKE: SPI Clock Select bit (1)\n1 = Transmit occurs on transition from active to Idle clock state\n0 = Transmit occurs on transition from Idle to active clock state",
    "bit 5 D/A: Data/Address bit\nUsed in I 2 C mode only.",
    "bit 4 P: Stop bit\nUsed in I 2 C mode only. This bit is cleared when the MSSP module is disabled, SSPEN is cleared.",
    "bit 3\nS: Start bit\nUsed in I 2 C mode only.",
    "bit 2 R/W:\nRead/Write Information bit\nUsed in I 2 C mode only.",
    "bit 1\nUA: Update Address bit\nUsed in I 2 C mode only.",
    "bit 0\nBF: Buffer Full Status bit (Receive mode only)\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty\nNote 1: Polarity of clock state is set by the CKP bit (SSPCON1<4>).",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nWCOL, R/W-0 = SSPOV (1). WCOL, R/W-0 = SSPEN (2). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3 (3). WCOL, R/W-0 = SSPM2 (3). WCOL, R/W-0 = SSPM1 (3). WCOL, R/W-0 = SSPM0 (3). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nWCOL: Write Collision Detect bit\n1 = The SSPxBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision",
    "bit 6 SSPOV: Receive Overflow Indicator bit\n(1)\nSPI Slave mode:\n1 = A new byte is received while the SSPBUF register is still holding the previous data. In case of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user must read the SSPBUF, even if only transmitting data, to avoid setting overflow (must be cleared in software).\n0 = No overflow",
    "bit 5 SSPEN: Master Synchronous Serial Port Enable bit (2)\n- 1 = Enables serial port and configures SCK, SDO, SDI and SS as serial port pins\n0 = Disables serial port and configures these pins as I/O port pins\nCKP: Clock Polarity Select bit\n1 = Idle state for clock is a high level\n0 = Idle state for clock is a low level",
    "bit 3-0 SSPM3:SSPM0: Master Synchronous Serial Port Mode Select bits (3)\n0101 = SPI Slave mode, clock = SCK pin, SS pin control disabled, SS can be used as I/O pin 0100 = SPI Slave mode, clock = SCK pin, SS pin control enabled\n0011 = SPI Master mode, clock = TMR2 output/2\n0010 = SPI Master mode, clock = FOSC/64\n0001 = SPI Master mode, clock = FOSC/16\n0000 = SPI Master mode, clock = FOSC/4\nNote 1: In Master mode, the overflow bit is not set since each new reception (and transmission) is initiated by writing to the SSPBUF register.\n2: When enabled, these pins must be properly configured as input or output.\n3: Bit combinations not specifically listed here are either reserved or implemented in I 2 C\u2122 mode only.",
    "17.3.2 OPERATION\nWhen initializing the SPI, several options need to be specified. This is done by programming the appropriate control  bits  (SSPCON1<5:0>  and  SSPSTAT<7:6>). These control bits allow the following to be specified:\n(SSPCON1<7>), will be set. User software must clear the WCOL bit so that it can be determined if the following write(s) to the SSPBUF register completed successfully.\n\u00b7 Master mode (SCK is the clock output)\n\u00b7 Slave mode (SCK is the clock input)\n\u00b7 Clock Polarity (Idle state of SCK)\n\u00b7 Data Input Sample Phase (middle or end of data output time)\n\u00b7 Clock Edge (output data on rising/falling edge of SCK)\n\u00b7 Clock Rate (Master mode only)\n\u00b7 Slave Select mode (Slave mode only)",
    "17.3.2 OPERATION\nThe MSSP consists of a transmit/receive shift register (SSPSR) and a buffer register (SSPBUF). The SSPSR shifts the data in and out of the device, MSb first. The SSPBUF holds the data that was written to the SSPSR until the received data is ready. Once the 8 bits of data have been received, that byte is moved to the SSPBUF register. Then, the Buffer Full detect bit, BF (SSPSTAT<0>) and the interrupt  flag  bit,  SSPIF,  are set. This double-buffering of the received data (SSPBUF) allows the next byte to start reception before reading the data that was just received. Any write to the SSPBUF register during transmission/reception of data will be ignored and the write collision detect bit, WCOL",
    "17.3.2 OPERATION\nWhen the application software is expecting to receive valid data, the SSPBUF should be read before the next byte of data to transfer is written to the SSPBUF. The Buffer  Full  bit,  BF  (SSPSTAT<0>),  indicates  when SSPBUF  has  been  loaded  with  the  received  data (transmission is complete). When the SSPBUF is read, the BF bit is cleared. This data may be irrelevant if the SPI is only a transmitter. Generally, the MSSP interrupt is used to determine when the transmission/reception has  completed.  The  SSPBUF  must  be  read  and/or written. If the interrupt method is not going to be used, then software polling can be done to ensure that a write collision  does  not  occur.  Example 17-1  shows  the loading of the SSPBUF (SSPSR) for data transmission.\nThe SSPSR is not directly readable or writable and can only be accessed by addressing the SSPBUF register. Additionally, the  MSSP  status  register  (SSPSTAT) indicates the various status conditions.",
    "17.3.2 OPERATION\nNote:, 1 = The SSPBUF register cannot be used with read-modify-write instructions such as BCF , BTFSC and COMF , etc.\nNote:\nTo avoid lost data in Master mode, a read of the SSPBUF must be performed to clear the Buffer  Full  (BF)  detect  bit  (SSPSTAT<0>) between each transmission.",
    "EXAMPLE 17-1: LOADING THE SSPBUF (SSPSR) REGISTER\nLOOP, 1 = BTFSS BRA. LOOP, 2 = SSPSTAT, BF. LOOP, 3 = ;Has data been received (transmit complete)? ;No. , 1 = . , 2 = LOOP. , 3 = . , 1 = MOVF. , 2 = SSPBUF, W. , 3 = ;WREG reg = contents of SSPBUF. , 1 = MOVWF. , 2 = RXDATA. , 3 = ;Save in user RAM, if data is meaningful. , 1 = MOVF. , 2 = TXDATA, W. , 3 = ;W reg = contents of TXDATA. , 1 = MOVWF. , 2 = SSPBUF. , 3 = ;New data to xmit",
    "17.3.3 ENABLING SPI I/O\nTo  enable  the  serial  port,  MSSP  Enable  bit,  SSPEN (SSPCON1<5>), must be set. To reset or reconfigure SPI mode, clear the SSPEN  bit, reinitialize the SSPCON registers and then set the SSPEN bit. This configures the SDI, SDO, SCK and SS pins as serial port  pins.  For  the  pins  to  behave  as  the  serial  port function, some must have their data direction bits (in the TRIS register) appropriately programmed as follows:\n\u00b7 SDI is automatically controlled by the SPI module\n\u00b7 SDO must have TRISC<5> bit cleared\n\u00b7 SCK (Master mode) must have TRISC<3> bit cleared\n\u00b7 SCK (Slave mode) must have TRISC<3> bit set\n\u00b7 SS must have TRISA<5> bit set\nAny  serial  port  function  that  is  not  desired  may  be overridden  by  programming  the  corresponding  data direction (TRIS) register to the opposite value.",
    "17.3.4 TYPICAL CONNECTION\nFigure 17-2 shows a typical connection between two microcontrollers. The  master controller (Processor 1) initiates the data transfer by sending the SCK signal. Data is shifted out of both shift registers on their programmed clock edge and latched on the opposite edge of the clock. Both processors should be programmed to the same Clock Polarity (CKP), then both controllers would  send  and  receive  data  at  the  same  time. Whether  the  data  is  meaningful  (or  dummy  data) depends  on  the  application  software.  This  leads  to three scenarios for data transmission:\n\u00b7 Master sends data - Slave sends dummy data\n\u00b7 Master sends data - Slave sends data\n\u00b7 Master sends dummy data - Slave sends data",
    "17.3.5 MASTER MODE\nThe master can initiate the data transfer at any time because it controls the SCK. The master determines when  the  slave (Processor 2, Figure 17-2) is to broadcast data by the software protocol.\nIn  Master  mode,  the  data  is  transmitted/received  as soon as the SSPBUF register is written to. If the SPI operation  is  only  going  to  receive,  the  SDO  output could  be  disabled  (programmed  as  an  input).  The SSPSR  register  will  continue  to  shift  in  the  signal present on the SDI pin at the programmed clock rate. As  each  byte  is  received,  it  will  be  loaded  into  the SSPBUF register as if a normal received byte (interrupts and status bits appropriately set). This could be useful  in receiver  applications  as  a  'Line  Activity Monitor' mode.\nThe clock polarity is selected by appropriately programming the CKP bit (SSPCON1<4>). This then, would  give  waveforms  for  SPI  communication,  as shown  in  Figure 17-3,  Figure 17-5  and  Figure 17-6, where the MSB is transmitted first. In Master mode, the SPI clock rate (bit rate) is user programmable to be one of the following:",
    "17.3.5 MASTER MODE\n\u00b7 FOSC/4 (or TCY)\n\u00b7 FOSC/16 (or 4 \u00b7 TCY)\n\u00b7 FOSC/64 (or 16 \u00b7 TCY)\n\u00b7 Timer2 output/2\nThis  allows  a  maximum  data  rate  (at  40  MHz)  of 10.00 Mbps.\nFigure 17-3  shows  the  waveforms  for  Master  mode. When the CKE bit is set, the SDO data is valid before there is a clock edge on SCK. The change of the input sample is shown based on the state of the SMP bit. The time  when  the  SSPBUF  is  loaded  with  the  received data is shown.",
    "17.3.6 SLAVE MODE\nIn Slave mode, the data is transmitted and received as the external clock pulses appear on SCK. When the last bit is latched, the SSPIF interrupt flag bit is set.\nBefore  enabling  the  module  in  SPI  Slave  mode,  the clock line must match the proper Idle state. The clock line can be observed by reading the SCK pin. The Idle state is determined by the CKP bit (SSPCON1<4>).\nWhile in Slave mode, the external clock is supplied by the external clock source on the SCK pin. This external clock must meet the minimum high and low times as specified in the electrical specifications.\nWhile in  Sleep  mode,  the  slave  can  transmit/receive data. When a byte is received, the device will wake-up from Sleep.",
    "17.3.7 SLAVE SELECT SYNCHRONIZATION\nThe SS pin allows a Synchronous Slave mode. The SPI operation must be in Slave mode with the SS pin control enabled (SSPCON1<3:0> = 04h). When the SS pin is low,  transmission  and  reception  are  enabled  and  the\nSDO pin is driven. When the SS pin goes high, the SDO pin  is  no  longer  driven,  even  if  in  the  middle  of  a transmitted byte and becomes a floating output. External pull-up/pull-down resistors may be desirable depending on the application.\nNote 1: When the SPI interface is in Slave mode with SS pin control enabled (SSPCON1<3:0> = 0100 ), the SPI module will reset if the SS pin is set to VDD.\n2: If the SPI interface is used in Slave mode with  CKE  set,  then  the  SS  pin  control must be enabled.\nWhen the SPI module resets, the bit counter is forced to ' 0 '. This can be done by either forcing the SS pin to a high level or clearing the SSPEN bit.",
    "17.3.7 SLAVE SELECT SYNCHRONIZATION\nTo emulate two-wire communication, the SDO pin can be connected to the SDI pin. When the SPI needs to operate as a receiver, the SDO pin can be configured as an input. This disables transmissions from the SDO. The SDI can always be left as an input (SDI function) since it cannot create a bus conflict.\nFIGURE 17-4: SLAVE SYNCHRONIZATION WAVEFORM",
    "PIC18F2525/2620/4525/4620\nFIGURE 17-6:\nSPI MODE WAVEFORM (SLAVE MODE WITH CKE =\n)\n1",
    "17.3.9 EFFECTS OF A RESET\nIn SPI Master mode, module clocks may be operating at a different speed than when in full-power mode. In the case of Sleep mode, all clocks are halted.\nIn Idle modes, a clock is provided to the peripherals. That clock should be from the primary clock source, the secondary clock (Timer1 oscillator  at  32.768  kHz) or the INTOSC source. See Section 2.7 'Clock Sources and Oscillator Switching' for additional information.\nIn  most cases, the speed that the master clocks SPI data is not important; however, this should be evaluated for each system.\nIf  MSSP  interrupts  are  enabled,  they  can  wake  the controller from Sleep mode, or one of the Idle modes, when the  master  completes  sending  data.  If  an  exit from  Sleep or Idle mode  is  not desired, MSSP interrupts should be disabled.\nIf  the  Sleep  mode  is  selected,  all  module  clocks  are halted  and  the  transmission/reception  will  remain  in that  state  until  the  devices  wakes.  After  the  device returns to Run mode, the module will resume transmitting and receiving data.\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.3.10 BUS MODE COMPATIBILITY\nTable 17-1 shows the compatibility between the standard  SPI  modes  and  the  states  of  the  CKP  and CKE control bits.",
    "TABLE 17-1: SPI BUS MODES\n0, 0, Control Bits State.CKP = 0. 0, 0, Control Bits State.CKE = 1. 0, 1, Control Bits State.CKP = 0. 0, 1, Control Bits State.CKE = 0. 1, 0, Control Bits State.CKP = 1. 1, 0, Control Bits State.CKE = 1. 1, 1, Control Bits State.CKP = 1. 1, 1, Control Bits State.CKE = 0\nThere is also an SMP bit which controls when the data is sampled.\nIn  SPI  Slave  mode,  the  SPI  Transmit/Receive  Shift register  operates  asynchronously  to  the  device.  This allows the device to be placed in any power-managed mode  and  data  to  be  shifted  into  the  SPI  Transmit/ Receive  Shift  register.  When  all  8  bits  have  been received, the MSSP interrupt flag bit will be set and if enabled, will wake the device.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nTRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 52. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 52. SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nBuffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive Buffer/Transmit Register. SSPBUF, Reset Values on page = 50. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Reset Values on page = 50. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Reset Values on page = 50\nLegend: Shaded cells are not used by the MSSP in SPI mode.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nNote 1:\nThese bits are unimplemented on 28-pin devices and read as ' 0 '.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "17.4.1 REGISTERS\nThe MSSP module in I 2 C  mode  fully  implements  all master  and  slave  functions  (including  general  call support) and provides interrupts on Start and Stop bits in  hardware  to  determine  a  free  bus  (multi-master function). The MSSP module implements the standard mode  specifications, as well as 7-bit and  10-bit addressing.\nTwo pins are used for data transfer:\n\u00b7 Serial clock (SCL) - RC3/SCK/SCL\n\u00b7 Serial data (SDA) - RC4/SDI/SDA\nThe user must configure these pins as inputs or outputs through the TRISC<4:3> bits.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C\u2122 MODE)\nThe MSSP module has six registers for I 2 C operation. These are:\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Control Register 2 (SSPCON2)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\n\u00b7 MSSP Address Register (SSPADD)\nSSPCON1, SSPCON2  and  SSPSTAT  are  the  control and status registers in I 2 C mode  operation. The SSPCON1 and SSPCON2 registers are readable and writable. The lower 6 bits of the SSPSTAT are read-only. The upper two bits of the SSPSTAT are read/write.\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C\u2122 MODE)\nSSPADD register holds the slave device address when the MSSP is configured in I 2 C Slave mode. When the MSSP is configured in Master mode, the lower seven bits of SSPADD act as the Baud Rate Generator reload value.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nSMP, R/W-0 = CKE. SMP, R-0 = D/A. SMP, R-0 = P (1). SMP, R-0 = S (1). SMP, R-0 = R/W (2,3). SMP, R-0 = UA. SMP, R-0 = BF. bit 7, R/W-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = bit 0",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Slew Rate Control bit\nIn Master or Slave mode:\n1 = Slew rate control disabled for Standard Speed mode (100 kHz)\n0 = Slew rate control enabled for High-Speed mode (400 kHz)\nCKE: SMBus Select bit",
    "In Master or Slave mode:\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "In Master mode:\nReserved.",
    "In Slave mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address",
    "bit 4 P: Stop bit (1)\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last",
    "bit 3 S: Start bit\n(1)\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last",
    "In Slave mode:\n1 = Read\n0 = Write",
    "In Master mode:\n1 = Transmit is in progress\n0 = Transmit is not in progress",
    "bit 1 UA: Update Address bit (10-Bit Slave mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated\nBF: Buffer Full Status bit",
    "In Transmit mode:\n1 = SSPBUF is full\n0 = SSPBUF is empty",
    "In Receive mode:\n1 = SSPBUF is full (does not include the ACK and Stop bits)\n0 = SSPBUF is empty (does not include the ACK and Stop bits)\nNote 1: This bit is cleared on Reset and when SSPEN is cleared.\n2: This bit holds the R/W bit information following the last address match. This bit is only valid from the address match to the next Start bit, Stop bit or not ACK bit.\n3: ORing this bit with SEN, RSEN, PEN, RCEN or ACKEN will indicate if the MSSP is in Active mode.\n(2,3)",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C\u2122 MODE)\nWCOL, R/W-0 = SSPOV. WCOL, R/W-0 = SSPEN (1). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3. WCOL, R/W-0 = SSPM2. WCOL, R/W-0 = SSPM1. WCOL, R/W-0 = SSPM0. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit\nIn Master Transmit mode:\n1 = A  write  to  the  SSPBUF  register  was  attempted  while  the  I 2 C  conditions  were  not  valid  for  a transmission to be started (must be cleared in software)\n0 = No collision",
    "In Slave Transmit mode:\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision\nIn Receive mode (Master or Slave modes):\nThis is a 'don't care' bit.",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nIn Receive mode:\n1 = A byte is received while the SSPBUF register is still holding the previous byte (must be cleared in software)\n0 = No overflow\nIn Transmit mode:\nThis is a 'don't care' bit in Transmit mode.",
    "bit 5 SSPEN: Master Synchronous Serial Port Enable bit (1)\n1 = Enables the serial port and configures the SDA and SCL pins as the serial port pins\n0 = Disables serial port and configures these pins as I/O port pins",
    "bit 4 CKP: SCK Release Control bit\nIn Slave mode:\n1 = Releases clock\n0 = Holds clock low (clock stretch), used to ensure data setup time\nIn Master mode:\nUnused in this mode.",
    "bit 3-0 SSPM3:SSPM0: Master Synchronous Serial Port Mode Select bits (2)\n1111 = I 2 C Slave mode, 10-bit address with Start and Stop bit interrupts enabled\n1110 = I 2 C Slave mode, 7-bit address with Start and Stop bit interrupts enabled\n1011 = I 2 C Firmware Controlled Master mode (Slave Idle)\n1000 = I 2 C Master mode, clock = FOSC/(4 * (SSPADD + 1))\n0111 = I 2 C Slave mode, 10-bit address\n0110 = I 2 C Slave mode, 7-bit address\nBit combinations not specifically listed here are either reserved or implemented in SPI mode only.\n- Note 1: When enabled, the SDA and SCL pins must be properly configured as inputs or outputs.",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nGCEN, R/W-0 = ACKSTAT. GCEN, R/W-0 = ACKDT (2). GCEN, R/W-0 = ACKEN (1). GCEN, R/W-0 = RCEN (1). GCEN, R/W-0 = PEN (1). GCEN, R/W-0 = RSEN (1). GCEN, R/W-0 = SEN (1). bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = bit 0",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nGCEN: General Call Enable bit (Slave mode only)\n1 = Enables interrupt when a general call address (0000h) is received in the SSPSR\n0 = General call address disabled.\nbit 6 ACKSTAT:\nAcknowledge Status bit (Master Transmit mode only)\n1 = Acknowledge was not received from slave\n0 = Acknowledge was received from slave\nbit 5\nACKDT: Acknowledge Data bit (Master Receive mode only) (2)\n1 = Not Acknowledge\n0 = Acknowledge\nbit 4",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nACKEN: Acknowledge Sequence Enable bit (Master Receive mode only) (1)\n1 = Initiates Acknowledge sequence on SDA and SCL pins and transmit ACKDT data bit. Automatically cleared by hardware.\n0 = Acknowledge sequence Idle",
    "bit 3 RCEN: Receive Enable bit (Master mode only) (1)\n1 = Enables Receive mode for I 2 C\n0 = Receive Idle\nbit 2 PEN: Stop Condition Enable bit (Master mode only) (1)\n1 = Initiates Stop condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Stop condition Idle\nbit 1 RSEN: Repeated Start Condition Enable bit (Master mode only) (1)\n1 = Initiates Repeated Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Repeated Start condition Idle",
    "bit 0\nSEN: Start Condition Enable/Stretch Enable bit (1)",
    "In Master mode:\n1 = Initiates Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Start condition Idle",
    "In Slave mode:\n1 = Clock stretching is enabled for both slave transmit and slave receive (stretch enabled)\n0 = Clock stretching is disabled\nNote 1: For bits ACKEN, RCEN, PEN, RSEN, SEN: If the I 2 C module is not in the Idle mode, these bits may not be set (no spooling) and the SSPBUF may not be written (or writes to the SSPBUF are disabled).\n2: Value that will be transmitted when the user initiates an Acknowledge sequence at the end of a receive.",
    "17.4.3.1 Addressing\nThe  MSSP  module  functions  are  enabled  by  setting MSSP Enable bit, SSPEN (SSPCON1<5>).\nThe  SSPCON1  register  allows  control  of  the  I 2 C operation. Four mode selection bits (SSPCON1<3:0>) allow one of the following I 2 C modes to be selected:\n\u00b7 I 2 C Master mode clock\n\u00b7 I 2 C Slave mode (7-bit address)\n\u00b7 I 2 C Slave mode (10-bit address)\n\u00b7 I 2 C Slave mode (7-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Slave mode (10-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Firmware Controlled Master mode, slave is Idle\nSelection  of  any  I 2 C  mode  with  the  SSPEN  bit  set, forces  the  SCL  and  SDA  pins  to  be  open-drain, provided  these  pins  are  programmed  to  inputs  by setting  the appropriate TRISC bits. To ensure proper operation  of  the  module,  pull-up  resistors  must  be provided externally to the SCL and SDA pins.",
    "17.4.3 SLAVE MODE\nIn Slave mode, the SCL and SDA pins must be configured as inputs (TRISC<4:3> set). The MSSP module will override the input state with the output data when required (slave-transmitter).\nThe I 2 C Slave mode hardware will always generate an interrupt  on  an  address  match.  Through  the  mode select  bits,  the  user  can  also  choose  to  interrupt  on Start and Stop bits\nWhen an address is matched, or the data transfer after an  address  match  is  received,  the  hardware  automatically will generate the Acknowledge (ACK) pulse and load the SSPBUF register with the received value currently in the SSPSR register.\nAny combination of the following conditions will cause the MSSP module not to give this ACK pulse:\n\u00b7 The Buffer Full bit, BF (SSPSTAT<0>), was set before the transfer was received.\n\u00b7 The overflow bit, SSPOV (SSPCON1<6>), was set before the transfer was received.",
    "17.4.3 SLAVE MODE\nIn  this  case,  the  SSPSR register value is not loaded into the SSPBUF, but bit, SSPIF (PIR1<3>), is set. The BF bit is cleared by reading the SSPBUF register, while bit, SSPOV, is cleared through software.\nThe SCL clock input must have a minimum high and low for proper operation. The high and low times of the I 2 C  specification,  as  well  as  the  requirement  of  the MSSP module, are shown in timing parameter 100 and parameter 101.\nOnce the MSSP module has been enabled, it waits for a Start condition to occur. Following the Start condition, the 8 bits are shifted into the SSPSR register. All incoming bits are sampled with the rising edge of the clock (SCL)  line.  The  value  of  register  SSPSR<7:1>  is compared to the value of the  SSPADD register. The address is compared on the falling edge of the eighth clock (SCL) pulse. If the addresses match and the BF and SSPOV bits are clear, the following events occur:",
    "17.4.3 SLAVE MODE\n1. The  SSPSR  register  value  is  loaded  into  the SSPBUF register.\n2. The Buffer Full bit, BF, is set.\n3. An ACK pulse is generated.\n4. MSSP Interrupt  Flag  bit,  SSPIF  (PIR1<3>),  is set  (interrupt  is  generated,  if  enabled)  on  the falling edge of the ninth SCL pulse.\nIn 10-Bit Addressing mode, two address bytes need to be received by the slave. The five Most Significant bits (MSbs) of the first address byte specify if this is a 10-bit address. Bit R/W (SSPSTAT<2>) must specify a write so  the  slave  device  will  receive  the  second  address byte. For a 10-bit address, the first byte would equal ' 11110  A9  A8  0 ',  where  ' A9 ' and  ' A8 ' are  the two MSbs of the address. The sequence of events for 10-bit addressing is as follows, with steps 7 through 9 for the slave-transmitter:",
    "17.4.3 SLAVE MODE\n1. Receive first (high) byte of address (bits SSPIF, BF and UA (SSPSTAT<1>) are set).\n2. Update the SSPADD register with second (low) byte of address (clears bit, UA, and releases the SCL line).\n3. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n4. Receive  second  (low)  byte  of  address  (bits, SSPIF, BF and UA, are set).\n5. Update the SSPADD register with the first (high) byte of address. If match releases SCL line, this will clear bit, UA.\n6. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n7. Receive Repeated Start condition.\n8. Receive first (high) byte of address (bits, SSPIF and BF, are set).\n9. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the address byte is clear and an address  match  occurs,  the  R/W  bit  of  the  SSPSTAT register is cleared. The received address is loaded into the  SSPBUF  register  and  the  SDA  line  is  held  low (ACK).\nWhen the address byte overflow condition exists, then the no Acknowledge (ACK) pulse is given. An overflow condition is defined as either bit, BF (SSPSTAT<0>), is set, or bit, SSPOV (SSPCON1<6>), is set.\nAn MSSP interrupt is generated for each data transfer byte.  Flag  bit,  SSPIF  (PIR1<3>),  must  be  cleared  in software. The SSPSTAT register is used to determine the status of the byte.\nIf SEN is enabled (SSPCON2<0> = 1 ), RC3/SCK/SCL will  be  held  low  (clock  stretch)  following  each  data transfer.  The  clock  must  be  released  by  setting  bit, CKP  (SSPCON<4>). See Section 17.4.4 'Clock Stretching' for more detail.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the incoming address byte is set and  an  address  match  occurs,  the  R/W  bit  of  the SSPSTAT  register  is  set.  The  received  address  is loaded into the SSPBUF register. The ACK pulse will be sent on the ninth bit and the RC3/SCK/SCL pin is held low regardless of SEN  (see Section 17.4.4 'Clock Stretching' for more detail). By stretching the clock, the master will be unable to assert another clock pulse  until  the  slave  is  done  preparing  the  transmit data.  The  transmit  data  must  be  loaded  into  the SSPBUF register which also loads the SSPSR register. Then the RC3/SCK/SCL pin should be enabled by setting bit, CKP (SSPCON1<4>). The eight data bits are shifted out on the falling edge of the SCL input. This ensures that the SDA signal is valid during the SCL high time (Figure 17-9).",
    "17.4.3.3 Transmission\nThe ACK pulse from the master-receiver is latched on the rising edge of the ninth SCL input pulse. If the SDA line is high  (not  ACK),  then  the  data  transfer  is complete. In this case, when the ACK is latched by the slave, the slave logic is reset and the slave monitors for another occurrence of the Start bit. If the SDA line was low (ACK), the next transmit data must be loaded into the  SSPBUF  register.  Again,  the  RC3/SCK/SCL  pin must be enabled by setting bit CKP.\nAn MSSP interrupt is generated for each data transfer byte. The SSPIF bit must be cleared in software and the SSPSTAT register is used to determine the status of the byte. The SSPIF bit is set on the falling edge of the ninth clock pulse.",
    "17.4.4 CLOCK STRETCHING\nBoth 7-bit and 10-bit Slave modes implement automatic clock stretching during a transmit sequence.",
    "17.4.4.3 Clock Stretching for 7-Bit Slave Transmit Mode\nThe SEN bit (SSPCON2<0>) allows clock stretching to be  enabled  during  receives.  Setting  SEN  will  cause the  SCL  pin  to  be  held  low  at  the  end  of  each  data receive sequence.",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nIn 7-Bit Slave Receive mode, on the falling edge of the ninth clock at the end of the ACK sequence if the BF bit  is  set,  the  CKP  bit  in  the  SSPCON1  register  is automatically  cleared,  forcing  the  SCL  output  to  be held low. The CKP being cleared to ' 0 '  will assert the SCL line low. The CKP bit must be set in the user's ISR before reception is allowed to continue. By holding the SCL line low, the user has time to service the ISR and  read  the  contents  of  the  SSPBUF  before  the master device can initiate another receive sequence. This  will  prevent  buffer  overruns  from  occurring  (see Figure 17-13).",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nNote 1: If the  user  reads  the  contents  of  the SSPBUF  before  the  falling  edge  of  the ninth clock, thus clearing the BF bit, the CKP  bit  will  not  be  cleared  and  clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit. The user should be careful to clear the BF bit in the ISR before the next receive sequence in order to prevent an overflow condition.",
    "17.4.4.2 Clock Stretching for 10-Bit Slave Receive Mode (SEN = 1 )\nIn  10-Bit  Slave  Receive  mode  during  the  address sequence,  clock  stretching  automatically  takes  place but CKP is not cleared. During this time, if the UA bit is set  after  the  ninth  clock,  clock  stretching  is  initiated. The UA bit is set after receiving the upper byte of the 10-bit address and following the receive of the second byte of the 10-bit address with the R/W bit cleared to ' 0 '. The release of the clock line occurs upon updating SSPADD.  Clock  stretching  will  occur  on  each  data receive sequence as described in 7-bit mode.",
    "Note:\nIf the user polls the UA bit and clears it by updating the SSPADD register before the falling edge of the ninth clock occurs and if the user hasn't cleared the BF bit by reading the SSPBUF register before that time, then the CKP bit will still NOT be asserted low.  Clock  stretching  on  the  basis  of  the state  of  the  BF  bit  only  occurs  during  a data sequence, not an address sequence.\n7-Bit Slave Transmit mode implements clock stretching by clearing the CKP bit after the falling edge of the ninth clock if the BF bit is clear. This occurs regardless of the state of the SEN bit.\nThe user's ISR must set the CKP bit before transmission  is  allowed  to  continue.  By  holding  the  SCL  line low, the user has time to service the ISR and load the contents of the SSPBUF before the master device can initiate another transmit sequence (see Figure 17-9).\nNote 1: If the user loads the contents of SSPBUF, setting the BF bit before the falling edge of the  ninth  clock,  the  CKP  bit  will  not  be cleared and clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit.",
    "17.4.4.4 Clock Stretching for 10-Bit Slave Transmit Mode\nIn  10-Bit  Slave  Transmit  mode,  clock  stretching  is controlled during the first two address sequences by the  state  of  the  UA  bit,  just  as  it  is  in  10-Bit  Slave Receive  mode. The  first  two  addresses  are  followed by a third address sequence which contains the highorder bits of the 10-bit address and the R/W bit set to ' 1 '. After the third address sequence is performed, the UA  bit  is  not  set,  the  module  is  now  configured  in Transmit  mode  and  clock  stretching  is  controlled  by the  BF  flag  as  in  7-Bit  Slave  Transmit  mode  (see Figure 17-11).",
    "PIC18F2525/2620/4525/4620\n17.4.4.5 Clock Synchronization and the CKP bit\nWhen the CKP bit is cleared, the SCL output is forced to ' 0 '. However, clearing the CKP bit will not assert the SCL  output  low  until the SCL  output  is already sampled low. Therefore, the CKP bit will not assert the SCL  line  until  an  external  I 2 C  master  device  has already  asserted  the  SCL  line.  The  SCL  output  will remain  low  until  the  CKP  bit  is  set  and  all  other devices  on  the  I 2 C  bus  have  deasserted  SCL.  This ensures that a write to the CKP bit will not violate the minimum high time requirement for SCL (see Figure 17-12).",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nThe addressing procedure for the I 2 C bus is such that the first byte after the Start condition usually determines which device will be the slave addressed by the master. The exception is the general call address which can address all devices. When this address is used,  all  devices  should,  in  theory,  respond  with  an Acknowledge.\nThe  general  call  address  is  one  of  eight  addresses reserved for specific purposes by the I 2 C protocol. It consists of all ' 0 's with R/W = 0 .\nThe  general  call  address  is  recognized  when  the General Call Enable bit, GCEN, is enabled (SSPCON2<7>  is  set).  Following  a  Start  bit  detect, 8 bits are shifted into the SSPSR and the address is compared against the SSPADD. It is also compared to the general call address and fixed in hardware.\nIf  the  general  call  address  matches,  the  SSPSR  is transferred to the SSPBUF, the BF flag bit is set (eighth bit) and on the falling edge of the ninth bit (ACK bit), the SSPIF interrupt flag bit is set.",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nWhen  the  interrupt  is  serviced,  the  source  for  the interrupt can be checked by reading the contents of the SSPBUF. The value can be used to determine if the address was device specific or a general call address.\nIn 10-bit mode, the SSPADD is required to be updated for the second half of the address to match and the UA bit (SSPSTAT<1>) is set. If the general call address is sampled when the GCEN bit is set, while the slave is configured in 10-Bit Addressing mode, then the second half of the address is not necessary, the UA bit will not be set and the slave will begin receiving data after the Acknowledge (Figure 17-15).",
    "Note:\nMaster  mode  is  enabled  by  setting  and  clearing  the appropriate SSPM bits in SSPCON1 and by setting the SSPEN bit. In Master mode, the SCL and SDA lines are manipulated by the MSSP hardware.\nMaster  mode  of  operation  is  supported  by  interrupt generation  on  the  detection  of  the  Start  and  Stop conditions. The Stop (P) and Start (S) bits are cleared from a Reset or when the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit is set, or the bus is Idle, with both the S and P bits clear.\nThe  MSSP  module,  when  configured  in I 2 C Master mode, does not allow queueing of  events.  For  instance,  the  user  is  not allowed  to  initiate  a  Start  condition  and immediately write the SSPBUF register to initiate transmission before the Start condition  is  complete.  In  this  case,  the SSPBUF  will  not  be  written  to  and  the WCOL bit will be set, indicating that a write to the SSPBUF did not occur.\nIn Firmware  Controlled Master mode,  user  code conducts  all  I 2 C  bus  operations  based  on  Start  and Stop bit conditions.\nOnce  Master  mode  is  enabled,  the  user  has  six options.",
    "Note:\n1. Assert a Start condition on SDA and SCL.\n2. Assert a Repeated Start condition on SDA and SCL.\n3. Write to the SSPBUF register initiating transmission of data/address.\n4. Configure the I 2 C port to receive data.\n5. Generate an Acknowledge condition at the end of a received byte of data.\n6. Generate a Stop condition on SDA and SCL.",
    "FIGURE 17-16: MSSP BLOCK DIAGRAM (I 2 C\u2122 MASTER MODE)\nThe  following  events  will  cause  the  MSSP  Interrupt Flag bit, SSPIF, to be set (MSSP interrupt, if enabled):\n\u00b7 Start condition\n\u00b7 Stop condition\n\u00b7 Data transfer byte transmitted/received\n\u00b7 Acknowledge transmit\n\u00b7 Repeated Start",
    "17.4.6.1 I 2 C Master Mode Operation\nA typical transmit sequence would go as follows:\nThe  master  device  generates  all  of  the  serial  clock pulses and the Start and Stop conditions.   A transfer is ended with a Stop condition or with a Repeated Start condition.  Since the Repeated Start condition is also the beginning of the next serial transfer, the I 2 C bus will not be released.\nIn Master  Transmitter  mode,  serial  data  is  output through SDA, while SCL outputs the serial clock. The first byte transmitted contains the slave address of the receiving device (7 bits) and the Read/Write (R/W) bit. In this case, the R/W bit will be logic ' 0 '. Serial data is transmitted 8 bits at a time. After each byte is transmitted,  an  Acknowledge  bit  is  received.  Start  and  Stop conditions are output to indicate the beginning and the end of a serial transfer.",
    "17.4.6.1 I 2 C Master Mode Operation\nIn  Master  Receive  mode,  the  first  byte  transmitted contains the slave address of the transmitting device (7 bits) and the R/W bit. In this case, the R/W bit will be logic ' 1 '. Thus, the first byte transmitted is a 7-bit slave address  followed  by  a  ' 1 '  to  indicate  the  receive  bit. Serial data is received via SDA, while SCL outputs the serial clock. Serial data is received 8 bits at a time. After each byte is received, an Acknowledge bit is transmitted.  Start  and  Stop  conditions  indicate  the  beginning and end of transmission.\nThe  Baud  Rate  Generator  used  for  the  SPI  mode operation is used to set the SCL clock frequency for either 100 kHz, 400 kHz or 1 MHz I 2 C operation. See Section 17.4.7 'Baud Rate' for more detail.",
    "17.4.6.1 I 2 C Master Mode Operation\n1. The user generates a Start condition by setting the Start Enable bit, SEN (SSPCON2<0>).\n2. SSPIF is set. The MSSP module will wait the required  start  time  before  any  other  operation takes place.\n3. The  user  loads  the  SSPBUF  with  the  slave address to transmit.\n4. Address is shifted out the SDA pin until all 8 bits are transmitted.\n5. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register.\n6. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.\n7. The user loads the SSPBUF with eight bits of data.\n8. Data is shifted out the SDA pin until all 8 bits are transmitted.\n9. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register.\n10. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.",
    "17.4.6.1 I 2 C Master Mode Operation\n11. The user generates a Stop condition by setting the Stop Enable bit, PEN (SSPCON2<2>).\n12. Interrupt is generated once the Stop condition is complete.",
    "17.4.7 BAUD RATE\nIn I 2 C Master mode, the Baud Rate Generator (BRG) reload  value  is  placed  in  the  lower  7  bits  of  the SSPADD register (Figure 17-17). When a write occurs to SSPBUF, the Baud Rate Generator will automatically begin counting. The BRG counts down to ' 0 ' and stops until another reload has taken place. The BRG count is decremented twice per instruction cycle (TCY) on the Q2 and Q4 clocks. In I 2 C  Master  mode,  the  BRG  is reloaded automatically.\nOnce the given operation is complete (i.e., transmission of the last data bit is followed by ACK), the internal clock will automatically stop counting and the SCL pin will remain in its last state.\nTable 17-3 demonstrates clock rates based on instruction  cycles  and  the  BRG  value  loaded  into SSPADD.",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\n40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 18h. 40 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 1Fh. 40 MHz, FSCL (2 Rollovers of BRG) = 312.5 kHz. 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 63h. 40 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 09h. 16 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 0Ch. 16 MHz, FSCL (2 Rollovers",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\nof BRG) = 308 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 27h. 16 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 02h. 4 MHz, FSCL (2 Rollovers of BRG) = 333 kHz (1). 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 09h. 4 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 00h. 4 MHz, FSCL (2 Rollovers of BRG) = 1 MHz (1)",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\nNote 1: The I 2 C interface does not conform to the 400 kHz I 2 C specification (which applies to rates greater than 100 kHz) in all details, but may be used with care where higher rates are required by the application.",
    "17.4.7.1 Clock Arbitration\nClock arbitration occurs when the master, during any receive,  transmit  or  Repeated  Start/Stop  condition, deasserts  the  SCL  pin  (SCL  allowed  to  float  high). When the SCL pin is allowed to float high, the Baud Rate  Generator  (BRG)  is  suspended  from  counting until the SCL pin is actually sampled high. When the\nSCL pin is sampled high, the Baud Rate Generator is reloaded  with  the  contents  of  SSPADD<6:0>  and begins counting. This ensures that the SCL high time will always be at least one BRG rollover count in the event that the clock is held low by an external device (Figure 17-18).",
    "17.4.8 I 2 C MASTER MODE START CONDITION TIMING\nTo  initiate  a  Start  condition,  the  user  sets  the  Start Enable bit, SEN (SSPCON2<0>). If the SDA and SCL pins  are  sampled  high,  the  Baud  Rate  Generator  is reloaded with the contents of SSPADD<6:0> and starts its count. If SCL and SDA are both sampled high when the Baud Rate Generator times out (TBRG), the SDA pin is driven low. The action of the SDA being driven low while SCL is high is the Start condition and causes the S bit (SSPSTAT<3>) to be set. Following this, the Baud Rate Generator is reloaded with the contents of SSPADD<6:0> and resumes its count. When the Baud Rate Generator times out (TBRG), the SEN  bit (SSPCON2<0>)  will be automatically cleared by hardware;  the  Baud  Rate  Generator  is  suspended, leaving the SDA line held low and the Start condition is complete.\nNote:",
    "17.4.8 I 2 C MASTER MODE START CONDITION TIMING\nIf  at  the  beginning  of  the  Start  condition, the SDA and SCL pins are already sampled low, or if during the Start condition, the SCL line is sampled low before the SDA line  is  driven  low,  a  bus  collision  occurs, the Bus Collision Interrupt Flag, BCLIF, is set, the Start condition is aborted and the I 2 C module is reset into its Idle state.",
    "17.4.8.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Start sequence is in progress, the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nNote:\nBecause queueing of events is not allowed,  writing  to  the  lower  5  bits  of SSPCON2  is  disabled until the Start condition is complete.",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\n- Note 1: If  RSEN is programmed while any other event is in progress, it will not take effect.",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nA Repeated Start condition occurs when the RSEN bit (SSPCON2<1>) is programmed high and the I 2 C logic module is in the Idle state. When the RSEN bit is set, the  SCL  pin  is  asserted  low.  When  the  SCL  pin  is sampled low, the Baud Rate Generator is loaded with the  contents  of  SSPADD<5:0>  and  begins  counting. The SDA pin is released (brought high) for one Baud Rate  Generator  count  (TBRG).  When  the  Baud  Rate Generator times out, if SDA is sampled high, the SCL pin  will  be  deasserted  (brought  high).  When  SCL  is sampled high,  the  Baud  Rate  Generator  is  reloaded with the contents of SSPADD<6:0> and begins counting. SDA and SCL must be sampled high for one TBRG. This action is then followed by assertion of the SDA pin (SDA = 0 ) for one TBRG while SCL is high. Following this, the RSEN bit (SSPCON2<1>) will be automatically cleared  and  the  Baud  Rate  Generator  will  not",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nbe reloaded, leaving the SDA pin held low. As soon as a Start condition is detected on the SDA and SCL pins, the S bit (SSPSTAT<3>) will be set. The SSPIF bit will not be set until the Baud Rate Generator has timed out.\n2: A bus collision during the Repeated Start condition occurs if:\n\u00b7 SDA is sampled low when SCL goes from low-to-high.\n\u00b7 SCL goes low before SDA is asserted low. This may indicate that another master is attempting to transmit a data ' 1 '.\nImmediately following the SSPIF bit getting set, the user may write the SSPBUF with the 7-bit address in 7-bit mode, or the default first address in 10-bit mode. After the  first eight  bits  are  transmitted  and  an  ACK  is received, the user may then transmit an additional eight bits of address (10-bit mode) or eight bits of data (7-bit mode).",
    "17.4.9.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Repeated Start sequence  is  in  progress,  the  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "Note:\nBecause queueing of events is not allowed,  writing  of  the  lower  5  bits  of SSPCON2 is disabled until the Repeated Start condition is complete.",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nTransmission  of  a  data  byte,  a  7-bit  address  or  the other half of a 10-bit address is accomplished by simply writing a value to the SSPBUF register. This action will set the Buffer Full flag bit, BF and allow the Baud Rate Generator to begin counting and start the next transmission. Each bit of address/data will be shifted out onto the SDA pin after the falling edge of SCL is asserted (see data hold time specification parameter 106).  SCL  is  held  low  for  one  Baud  Rate Generator rollover count (TBRG). Data should be valid before  SCL  is  released  high  (see  data  setup  time specification  parameter  107).  When  the  SCL  pin  is released high, it is held that way for TBRG. The data on the SDA pin must remain stable for that duration and some hold time after the next falling edge of SCL. After the eighth bit is shifted out (the falling edge of the eighth clock), the BF flag is cleared and the master releases SDA. This allows the slave device being addressed to respond with an ACK bit during the ninth bit time if an address  match  occurred,  or  if  data  was",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nreceived properly. The status of ACK is written into the ACKDT bit on the falling edge of the ninth clock. If the master receives an Acknowledge, the Acknowledge Status bit, ACKSTAT, is cleared. If not, the bit is set. After the ninth clock, the SSPIF bit is set and the master clock (Baud Rate Generator) is suspended until the next data byte is loaded into the SSPBUF, leaving SCL low and SDA unchanged (Figure 17-21).",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nAfter the write to the SSPBUF, each bit of the address will be shifted out on the falling edge of SCL until all seven address bits and the R/W bit are completed. On the  falling  edge  of  the  eighth  clock,  the  master  will deassert the SDA pin, allowing the slave to respond with an Acknowledge. On the falling edge of the ninth clock, the master will sample the SDA pin to see if the address was recognized by a slave. The status of the ACK  bit is loaded into the ACKSTAT  status  bit (SSPCON2<6>). Following the falling edge of the ninth clock transmission of the address, the SSPIF is set, the BF  flag  is  cleared  and  the  Baud  Rate  Generator  is turned  off  until  another  write  to  the  SSPBUF  takes place, holding SCL low and allowing SDA to float.",
    "17.4.10.1 BF Status Flag\nIn  Transmit  mode,  the  BF  bit  (SSPSTAT<0>)  is  set when the CPU writes to SSPBUF and is cleared when all 8 bits are shifted out.",
    "17.4.10.2 WCOL Status Flag\nIf  the  user  writes  the  SSPBUF  when  a  transmit  is already in progress (i.e., SSPSR is still shifting out a data byte), the WCOL flag is set and the contents of the buffer  are  unchanged  (the  write  doesn't  occur)  after 2 TCY after the SSPBUF write. If SSPBUF is rewritten within  2  TCY,  the  WCOL  bit  is  set  and  SSPBUF  is updated. This may result in a corrupted transfer. The user  should  verify  that  the  WCOL  flag  is  clear  after each write to SSPBUF to ensure the transfer is correct.",
    "17.4.10.3 ACKSTAT Status Flag\nIn Transmit mode, the ACKSTAT bit (SSPCON2<6>) is cleared  when  the  slave  has  sent  an  Acknowledge (ACK = 0 ) and is set when the slave does not Acknowledge (ACK = 1 ). A slave sends an Acknowledge when it has recognized its address (including a general call), or when the slave has properly received its data.",
    "17.4.11 I 2 C MASTER MODE RECEPTION\nMaster mode reception is enabled by programming the Receive Enable bit, RCEN (SSPCON2<3>).",
    "Note:\nThe MSSP module must be in an Idle state before the RCEN bit is set or the RCEN bit will be disregarded.\nThe Baud Rate Generator begins counting and on each rollover, the state of the SCL pin changes (high-to-low/ low-to-high) and data is shifted into the SSPSR. After the falling edge of the eighth clock, the receive enable flag is automatically  cleared,  the  contents  of  the SSPSR are loaded into the SSPBUF, the BF flag bit is set, the SSPIF flag bit is set and the Baud Rate Generator is suspended from counting, holding SCL low. The MSSP is now in Idle state awaiting the next command. When the buffer is read by the CPU, the BF flag bit is automatically  cleared.  The  user  can  then  send  an Acknowledge bit at the end of reception by setting the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>).",
    "17.4.11.1 BF Status Flag\nIn receive operation, the BF bit is set when an address or data byte is loaded into SSPBUF from SSPSR. It is cleared when the SSPBUF register is read.",
    "17.4.11.2 SSPOV Status Flag\nIn receive operation, the SSPOV bit is set when 8 bits are  received  into  the  SSPSR  and  the  BF  flag  bit  is already set from a previous reception.",
    "17.4.11.3 WCOL Status Flag\nIf the  user  writes  the  SSPBUF  when  a  receive  is already in progress (i.e., SSPSR is still shifting in a data byte), the WCOL bit is set and the contents of the buffer are unchanged (the write doesn't occur).",
    "17.4.13 STOP CONDITION TIMING\nAn  Acknowledge  sequence  is  enabled  by  setting  the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>). When this  bit  is  set,  the  SCL  pin  is pulled low and the contents of the Acknowledge data bit are presented on the SDA pin. If the user wishes to generate an Acknowledge, then the ACKDT bit should be cleared. If not, the user should set the ACKDT bit before starting  an  Acknowledge  sequence.  The  Baud  Rate Generator  then  counts  for  one  rollover  period  (TBRG) and the SCL pin is deasserted (pulled high). When the SCL pin is  sampled high (clock  arbitration),  the  Baud Rate Generator counts for TBRG. The SCL pin is then pulled low. Following this, the ACKEN bit is automatically cleared, the Baud Rate Generator is turned off and the MSSP module then goes into Idle mode (Figure 17-23).",
    "17.4.12.1 WCOL Status Flag\nIf the user writes the SSPBUF when an Acknowledge sequence is  in  progress,  then  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).\nA Stop bit is asserted on the SDA pin at the end of a receive/transmit by setting the Stop Sequence Enable bit,  PEN  (SSPCON2<2>).  At  the  end  of  a  receive/ transmit, the SCL line is held low after the falling edge of the ninth clock. When the PEN bit is set, the master will  assert  the  SDA  line  low.  When  the  SDA  line  is sampled low, the Baud Rate Generator is reloaded and counts  down  to  0.  When  the  Baud  Rate  Generator times out, the SCL pin will  be brought  high  and one TBRG (Baud Rate Generator rollover count) later, the SDA  pin  will  be  deasserted.  When  the  SDA  pin  is sampled high while SCL is high, the P bit (SSPSTAT<4>)  is  set.  A  TBRG  later,  the  PEN  bit  is cleared and the SSPIF bit is set (Figure 17-24).",
    "17.4.13.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Stop sequence is  in  progress,  then  the  WCOL  bit  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "17.4.14 SLEEP OPERATION\nWhile  in  Sleep  mode,  the  I 2 C  module  can  receive addresses  or  data  and  when  an  address  match  or complete  byte  transfer  occurs,  wake  the  processor from Sleep (if the MSSP interrupt is enabled).",
    "17.4.15 EFFECTS OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.4.16 MULTI-MASTER MODE\nIn Multi-Master mode, the interrupt generation on the detection of the  Start  and  Stop  conditions  allows  the determination of when the bus is free. The Stop (P) and Start  (S)  bits  are  cleared  from  a  Reset  or  when  the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit (SSPSTAT<4>) is set, or the bus is Idle, with both the S and P bits clear. When the bus is busy, enabling the MSSP interrupt will generate the interrupt when the Stop condition occurs.\nIn multi-master  operation,  the  SDA  line  must  be monitored for arbitration to see if the signal level is the expected  output  level.  This  check  is  performed  in hardware with the result placed in the BCLIF bit.\nThe states where arbitration can be lost are:\n\u00b7 Address Transfer\n\u00b7 Data Transfer\n\u00b7 A Start Condition\n\u00b7 A Repeated Start Condition\n\u00b7 An Acknowledge Condition",
    "17.4.16 MULTI-MASTER MODE\nMulti-Master mode support is achieved by bus arbitration. When the master outputs address/data bits onto the SDA pin, arbitration takes place when the master outputs  a  ' 1 '  on  SDA,  by  letting  SDA  float  high  and another master asserts a ' 0 '. When the SCL pin floats high,  data  should  be  stable.  If  the  expected  data  on SDA is a ' 1 ' and the data sampled on the SDA pin = 0 , then a bus collision has taken place. The master will set the Bus Collision Interrupt Flag, BCLIF, and reset the I 2 C port to its Idle state (Figure 17-25).\nIf  a  transmit  was  in  progress  when  the  bus  collision occurred,  the  transmission  is  halted,  the  BF  flag  is cleared, the SDA and SCL lines are deasserted and the SSPBUF can be written to. When the user services the bus collision Interrupt Service Routine, and if the I 2 C bus  is  free,  the  user  can  resume  communication  by asserting a Start condition.",
    "17.4.16 MULTI-MASTER MODE\nIf a Start, Repeated  Start, Stop  or Acknowledge condition was  in progress  when  the  bus  collision occurred,  the  condition  is  aborted,  the  SDA  and  SCL lines are deasserted and the respective control bits in the SSPCON2 register are cleared. When the user services the bus collision Interrupt Service Routine, and if the I 2 C bus is free, the user can resume communication by asserting a Start condition.\nThe master will continue to monitor the SDA and SCL pins. If a Stop condition occurs, the SSPIF bit will be set.\nA write  to  the  SSPBUF  will  start  the  transmission  of data  at  the  first  data  bit,  regardless  of  where  the transmitter left off when the bus collision occurred.\nIn Multi-Master mode, the interrupt generation on the detection  of  Start  and  Stop  conditions  allows  the determination of when the bus is free. Control of the I 2 C bus can be taken when the P bit is set in the SSPSTAT register,  or  the  bus  is  Idle  and  the  S  and  P  bits  are cleared.",
    "17.4.17.1 Bus Collision During a Start Condition\nDuring a Start condition, a bus collision occurs if:\na) SDA or SCL are sampled low at the beginning of the Start condition (Figure 17-26).\nb) SCL is sampled low before SDA is asserted low (Figure 17-27).\nIf  the  SDA  pin  is  sampled  low  during  this  count,  the BRG  is  reset  and  the  SDA  line  is  asserted  early (Figure 17-28). If, however, a ' 1 ' is sampled on the SDA pin, the SDA pin is asserted low at the end of the BRG count. The Baud Rate Generator is then reloaded and counts  down  to  0;  if  the  SCL  pin  is  sampled  as  ' 0 ' during this time, a bus collision does not occur. At the end of the BRG count, the SCL pin is asserted low.\nDuring a Start  condition,  both the  SDA  and the  SCL pins are monitored.\nIf the SDA pin is already low, or the SCL pin is already low, then all of the following occur:",
    "17.4.17.1 Bus Collision During a Start Condition\n\u00b7 the Start condition is aborted,\n\u00b7 the BCLIF flag is set and\n\u00b7 the MSSP module is reset to its Idle state (Figure 17-26).\nThe Start condition begins with the SDA and SCL pins deasserted. When the SDA pin is sampled high, the Baud  Rate  Generator  is  loaded  from  SSPADD<6:0> and counts down to 0. If the SCL pin is sampled low while SDA is high, a bus collision occurs because it is assumed that another master is attempting to drive a data ' 1 ' during the Start condition.\nThe reason that bus collision is not a factor during a Start condition is that no two bus masters can assert a Start condition at the exact  same  time.  Therefore,  one  master will  always  assert  SDA  before  the  other. This  condition  does  not  cause  a  bus collision because the two masters must be allowed to arbitrate the first address following the Start condition. If the address is the same, arbitration must be allowed to continue  into  the  data  portion,  Repeated Start or Stop conditions.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nDuring  a  Repeated  Start  condition,  a  bus  collision occurs if:\n- a) A low level is sampled on SDA when SCL goes from low level to high level.\nIf SDA is low, a bus collision has occurred (i.e., another master is attempting to transmit a data ' 0 ', Figure 17-29). If SDA is sampled high, the BRG is reloaded and begins counting. If SDA goes from high-to-low before the BRG times  out,  no  bus  collision  occurs  because  no  two masters can assert SDA at exactly the same time.\n- b) SCL  goes  low  before  SDA  is  asserted  low, indicating  that  another master is attempting to transmit a data ' 1 '.\nWhen the user deasserts SDA and the pin is allowed to float high, the BRG is loaded with SSPADD<6:0> and counts down to 0. The SCL pin is then deasserted and when sampled high, the SDA pin is sampled.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nIf SCL goes from high-to-low before the BRG times out and SDA has not already been asserted, a bus collision occurs.  In  this  case,  another  master  is  attempting  to transmit a data ' 1 ' during the Repeated Start condition, see Figure 17-30.\nIf, at the end of the BRG time-out, both SCL and SDA are still high, the SDA pin is driven low and the BRG is reloaded and begins counting. At the end of the count, regardless of the status of the SCL pin, the SCL pin is driven low and the Repeated Start condition is complete.",
    "17.4.17.3 Bus Collision During a Stop Condition\nBus collision occurs during a Stop condition if:\na) After  the  SDA  pin  has  been  deasserted  and allowed to float high, SDA is sampled low after the BRG has timed out.\nb) After the SCL pin is deasserted, SCL is sampled low before SDA goes high.\nThe  Stop  condition  begins  with  SDA  asserted  low. When SDA is sampled low, the SCL pin is allowed to float. When the pin is sampled high (clock arbitration), the Baud Rate Generator is loaded with SSPADD<6:0> and counts down to 0. After the BRG times out, SDA is sampled. If  SDA is  sampled low, a bus collision has occurred. This is due to another master attempting to drive  a  data  ' 0 ' (Figure 17-31).  If  the  SCL  pin  is sampled low before SDA is allowed to float high, a bus collision occurs. This is another case of another master attempting to drive a data ' 0 ' (Figure 17-32).",
    "FIGURE 17-31: BUS COLLISION DURING A STOP CONDITION (CASE 1)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nSDA asserted low\nSDA sampled low after TBRG, set BCLIF\n' 0 '\n' 0 '",
    "FIGURE 17-32: BUS COLLISION DURING A STOP CONDITION (CASE 2)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nAssert SDA\nSCL goes low before SDA goes high, set BCLIF\n' 0 '\n' 0 '",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThe Enhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART) module is one of the two serial I/O modules. (Generically, the USART is also known as a Serial Communications Interface or SCI.) The  EUSART  can  be  configured  as  a  full-duplex asynchronous  system  that  can  communicate  with peripheral devices, such as CRT  terminals and personal computers. It can also be configured as a halfduplex  synchronous  system  that  can  communicate with peripheral devices, such as A/D or D/A integrated circuits, serial EEPROMs, etc.\nThe Enhanced USART module implements additional features, including automatic baud rate detection and calibration, automatic wake-up on Sync Break reception and 12-bit Break character transmit. These make it ideally suited for use in Local Interconnect Network bus (LIN bus) systems.\nThe  EUSART  can  be  configured  in  the  following modes:",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\n\u00b7 Asynchronous (full duplex) with:\n-Auto-wake-up on character reception\n-Auto-baud calibration\n-12-bit Break character transmission\n\u00b7 Synchronous - Master (half duplex) with selectable clock polarity\n\u00b7 Synchronous - Slave (half duplex) with selectable clock polarity\nThe  pins  of  the  Enhanced  USART  are  multiplexed with   PORTC. In order to configure RC6/TX/CK and RC7/RX/DT as a USART:\n\u00b7 SPEN bit (RCSTA<7>) must be set (= 1 )\n\u00b7 TRISC<7> bit must be set (= 1 )\n\u00b7 TRISC<6> bit must be set (= 1 )\nNote:\nThe  EUSART  control  will  automatically reconfigure the pin from input to output as needed.\nThe  operation  of  the  Enhanced  USART  module  is controlled through three registers:\n\u00b7 Transmit Status and Control (TXSTA)\n\u00b7 Receive Status and Control (RCSTA)\n\u00b7 Baud Rate Control (BAUDCON)",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThese are detailed on the following pages in Register 18-1, Register 18-2 and Register 18-3, respectively.",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nCSRC, R/W-0 = TX9. CSRC, R/W-0 = TXEN (1). CSRC, R/W-0 = SYNC. CSRC, R/W-0 = SENDB. CSRC, R/W-0 = BRGH. CSRC, R-1 = TRMT. CSRC, R/W-0 = TX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 CSRC: Clock Source Select bit\nAsynchronous mode:\nDon't care.\nSynchronous mode:\n1 = Master mode (clock generated internally from BRG)\n0 = Slave mode (clock from external source)",
    "bit 6\nTX9: 9-Bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission",
    "bit 5 TXEN: Transmit Enable bit\n(1)\n1 = Transmit enabled\n0 = Transmit disabled",
    "bit 4\nSYNC: EUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode",
    "bit 3\nSENDB: Send Break Character bit\nAsynchronous mode:\n1 = Send Sync Break on next transmission (cleared by hardware upon completion)\n0 = Sync Break transmission completed\nSynchronous mode:\nDon't care.",
    "bit 2 BRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.",
    "bit 1\nTRMT: Transmit Shift Register Status bit\n1 = TSR empty\n0 = TSR full\nbit 0\nTX9D: 9th Bit of Transmit Data\nCan be address/data bit or a parity bit.\nNote 1: SREN/CREN overrides TXEN in Sync mode.",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nSPEN, R/W-0 = RX9. SPEN, R/W-0 = SREN. SPEN, R/W-0 = CREN. SPEN, R/W-0 = ADDEN. SPEN, R-0 = FERR. SPEN, R-0 = OERR. SPEN, R-x = RX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-x = bit 0",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SPEN:\nSerial Port Enable bit\n1 = Serial port enabled (configures RX/DT and TX/CK pins as serial port pins)\n0 = Serial port disabled (held in Reset)",
    "bit 6 RX9: 9-Bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN:\nSingle Receive Enable bit\nAsynchronous mode:\nDon't care.",
    "Synchronous mode - Master:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode - Slave:\nDon't care.",
    "bit 4 CREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver\nSynchronous mode:\n1 = Enables continuous receive until enable bit, CREN, is cleared (CREN overrides SREN)\n0 = Disables continuous receive\nADDEN: Address Detect Enable bit\nAsynchronous mode 9-Bit (RX9 = 1 ):\n1 = Enables address detection, enables interrupt and loads the receive buffer when RSR<8> is set\n0 = Disables address detection, all bytes are received and ninth bit can be used as parity bit\nAsynchronous mode 9-Bit (RX9 = 0 ):\nDon't care.",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be cleared by reading RCREG register and receiving next valid byte)\n- 0 = No framing error",
    "bit 1 OERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit, CREN)\n0 = No overrun error\nRX9D: 9th Bit of Received Data\nThis can be address/data bit or a parity bit and must be calculated by user firmware.",
    "REGISTER 18-3: BAUDCON: BAUD RATE CONTROL REGISTER\nABDOVF, R-1 = RCIDL. ABDOVF, R/W-0 = RXDTP. ABDOVF, R/W-0 = TXCKP. ABDOVF, R/W-0 = BRG16. ABDOVF, U-0 = -. ABDOVF, R/W-0 = WUE. ABDOVF, R/W-0 = ABDEN. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 18-3: BAUDCON: BAUD RATE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 ABDOVF: Auto-Baud Acquisition Rollover Status bit\n1 = A BRG rollover has occurred during Auto-Baud Rate Detect mode (must be cleared in software)\n- 0 = No BRG rollover has occurred",
    "bit 6 RCIDL: Receive Operation Idle Status bit\n1 = Receive operation is Idle\n0 = Receive operation is active\nRXDTP: Received Data Polarity Select bit (Asyncnronous mode only)\nAsynchronous mode:\n1 = RX data is inverted\n0 = RX data received is not inverted",
    "bit 4 TXCKP: Clock and Data Polarity Select bit\nAsynchronous mode:\n1 = Idle state for transmit (TX) is a low level\n0 = Idle state for transmit (TX) is a high level",
    "Synchronous mode:\n1 = Idle state for clock (CK) is a high level\n0 = Idle state for clock (CK) is a low level\nBRG16: 16-Bit Baud Rate Register Enable bit\n1 = 16-bit Baud Rate Generator - SPBRGH and SPBRG\n- 0 = 8-bit Baud Rate Generator - SPBRG only (Compatible mode), SPBRGH value ignored",
    "bit 1 WUE: Wake-up Enable bit\nAsynchronous mode:\n1 = EUSART will continue to sample the RX pin - interrupt generated on falling edge; bit cleared in hardware on following rising edge\n0 = RX pin not monitored or rising edge detected\nSynchronous mode:\nUnused in this mode.",
    "Asynchronous mode:\nEnable baud rate measurement on the next character. Requires reception of a Sync field (55h);\n1 = cleared in hardware upon completion.\n0 = Baud rate measurement disabled or completed",
    "Synchronous mode:\nUnused in this mode.\nbit 5\nbit 3",
    "18.1 Baud Rate Generator (BRG)\nThe BRG is a dedicated 8-bit or 16-bit generator that supports  both  the  Asynchronous  and  Synchronous modes of the EUSART. By default, the BRG operates in 8-bit mode; setting the BRG16 bit (BAUDCON<3>) selects 16-bit mode.\nWriting  any  value  (even  the  same  value)  to  the SPBRGH:SPBRG  registers  immediately  reloads  the BRG timer. This may corrupt a transmission or reception already in progress. This ensures the BRG does not wait for a timer overflow before outputting the new baud rate.\nThe SPBRGH:SPBRG register pair controls the period of  a  free-running  timer.  In  Asynchronous  mode,  bits, BRGH (TXSTA<2>) and BRG16 (BAUDCON<3>), also control the baud rate. In Synchronous mode, BRGH is ignored. Table 18-1 shows the formula for computation of  the  baud  rate  for  different  EUSART  modes  which only apply in Master mode (internally generated clock).",
    "18.1 Baud Rate Generator (BRG)\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRGH:SPBRG registers can be calculated using the formulas in Table 18-1. From this, the error in baud rate can be determined. An example calculation  is  shown  in  Example 18-1.  Typical  baud rates  and  error  values  for  the  various  Asynchronous modes are shown in Table 18-2. It may be advantageous to use the high baud rate (BRGH = 1 ) or the 16-bit BRG to reduce the baud rate error, or achieve a slow baud rate for a fast oscillator frequency.",
    "18.1.1 OPERATION IN POWER-MANAGED MODES\nThe device clock is used to generate the desired baud rate.  When  one  of  the  power-managed  modes  is entered, the new clock source may be operating at a different frequency. This may require an adjustment to the value in the SPBRG register pair.",
    "18.1.2 SAMPLING\nThe data on the RX pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RX pin when SYNC is clear or when BRG16 and BRGH are both not set. The data on the RX pin is sampled once when SYNC is set or when BRGH16 and BRGH are both set.",
    "TABLE 18-1: BAUD RATE FORMULAS\n\nLegend: x = Don't care, n = value of SPBRGH:SPBRG register pair",
    "TABLE 18-1: BAUD RATE FORMULAS\n0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[64 (n + 1)]. 0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 1. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 1. 0,",
    "TABLE 18-1: BAUD RATE FORMULAS\nBRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 0. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 1. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]",
    "EXAMPLE 18-1: CALCULATING BAUD RATE ERROR\nFor a device with FOSC of 16 MHz, desired baud rate of 9600, Asynchronous mode, 8-bit BRG:\nDesired Baud Rate = FOSC/(64 ([SPBRGH:SPBRG] + 1))\nSolving for SPBRGH:SPBRG:\nX = ((FOSC/Desired Baud Rate)/64) - 1\n= ((16000000/9600)/64) - 1\n= [25.042] = 25\nCalculated Baud Rate\n= 16000000/(64 (25 + 1))\n= 9615\nError\n= (Calculated Baud Rate - Desired Baud Rate)/Desired Baud Rate\n= (9615 - 9600)/9600 = 0.16%",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nTXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nBAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nRegister Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the BRG.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 1.221. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n64. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 31. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 15. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 15. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 52.083. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -9.58. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nvalue (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 104.167. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -9.58. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 78.125. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -32.18. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 0.3, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 8.929. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -6.99. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 6. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 20.833. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 2.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -45.75. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.615.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 21. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 1041. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 520. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.399. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 259. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 259. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nvalue (decimal) = 129. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 21. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n55.555. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 415. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 33332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.00.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 16665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 6665. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8332. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 4165. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2082. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.04. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 832. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.606. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(K) = 9.596. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nvalue (decimal) = 259. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.193. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -0.03. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 520. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 259. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n103. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 57.803. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.35. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 172. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 57.471. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.22. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 86. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.142. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 0.79. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 34. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 114.943. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -0.22. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n86. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 116.279. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.94. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 42. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 117.647. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -2.12. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 16",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.04.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 1665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n415. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 103. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 19.230.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 58.824. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 2.12. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 16. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = 3.55.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 8. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 111.111. 115.2, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = -3.55. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n, BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "18.1.3 AUTO-BAUD RATE DETECT\nThe Enhanced USART module supports the automatic detection and calibration of baud rate. This feature is active only in Asynchronous mode and while the WUE bit is clear.\nThe  automatic  baud  rate  measurement  sequence (Figure 18-1) begins whenever a Start bit is received and the ABDEN  bit is set. The calculation is self-averaging.\nIn the Auto-Baud Rate Detect (ABD) mode, the clock to the BRG is reversed. Rather than the BRG clocking the incoming RX signal, the RX signal is timing the BRG. In ABD mode, the internal Baud Rate Generator is used as a counter to time the bit period of the incoming serial byte stream.",
    "18.1.3 AUTO-BAUD RATE DETECT\nOnce the ABDEN bit is set, the state machine will clear the BRG and look for a Start bit. The Auto-Baud Rate Detect must receive a byte with the value, 55h (ASCII 'U', which is also the LIN bus Sync character), in order to  calculate  the  proper  bit  rate.  The  measurement  is taken over both a low and a high bit time in order to minimize any effects caused by asymmetry of the incoming signal. After a Start bit, the SPBRG begins counting up, using  the  preselected  clock  source  on  the  first  rising edge of RX. After eight bits on the RX pin or the fifth rising edge, an accumulated value totalling the proper BRG period is left in the SPBRGH:SPBRG register pair. Once the 5th edge is seen (this should correspond to the Stop bit), the ABDEN bit is automatically cleared.",
    "18.1.3 AUTO-BAUD RATE DETECT\nIf a rollover of the BRG occurs (an overflow from FFFFh to 0000h), the event is trapped by the ABDOVF status bit  (BAUDCON<7>).  It  is  set  in  hardware  by  BRG rollovers  and  can  be  set  or  cleared  by  the  user  in software.  ABD  mode  remains  active  after  rollover events and the ABDEN bit remains set (Figure 18-2).\nWhile  calibrating the baud  rate  period, the BRG registers are clocked at 1/8th the preconfigured clock rate. Note that the BRG clock will be configured by the BRG16 and BRGH bits. Independent of the BRG16 bit setting, both the SPBRG and SPBRGH will be used as a 16-bit counter. This allows the user to verify that no carry occurred for 8-bit modes by checking for 00h in the SPBRGH register. Refer to Table 18-4 for counter clock rates to the BRG.",
    "18.1.3 AUTO-BAUD RATE DETECT\nWhile  the  ABD  sequence  takes  place,  the  EUSART state machine is held in Idle. The RCIF interrupt is set once the fifth rising edge on RX is detected. The value in  the  RCREG  needs  to  be  read  to  clear  the  RCIF interrupt. The contents of RCREG should be discarded.\nNote 1: If the WUE bit is set with the ABDEN bit, Auto-Baud Rate Detection will occur  on the byte following the Break character.\n2: It is up to the user to determine that the incoming character baud rate is within the range of the selected BRG clock source. Some combinations of oscillator frequency and EUSART baud rates are not possible due  to  bit  error  rates.  Overall  system timing and  communication  baud  rates must  be  taken  into  consideration  when using the Auto-Baud Rate Detection feature.",
    "TABLE 18-4: BRG COUNTER CLOCK RATES\n0, BRGH = 0. 0, BRG Counter Clock = FOSC/512. 0, BRGH = 1. 0, BRG Counter Clock = FOSC/128. 1, BRGH = 0. 1, BRG Counter Clock = FOSC/128. 1, BRGH = 1. 1, BRG Counter Clock = FOSC/32\nNote:\nDuring the ABD  sequence, SPBRG  and SPBRGH are both used as a 16-bit counter, independent of BRG16 setting.",
    "18.1.3.1 ABD and EUSART Transmission\nSince the BRG clock is reversed during ABD acquisition,  the  EUSART transmitter cannot be used during ABD. This means that whenever the ABDEN bit is set, TXREG cannot be written to. Users should also ensure that  ABDEN  does  not  become  set  during  a  transmit sequence. Failing to do this may result in unpredictable EUSART operation.",
    "FIGURE 18-1: AUTOMATIC BAUD RATE CALCULATION\nBRG Value, 1 = XXXXh. BRG Value, 2 = . BRG Value, 3 = 0000h 001Ch. RX pin, 1 = . RX pin, 2 = Bit 0 Start. RX pin, 3 = Bit 1 Bit 2 Bit 3 Bit 4 Bit 5 Bit 6 Bit 7 Stop Bit. BRG Clock, 1 = . BRG Clock, 2 = . BRG Clock, 3 = . ABDEN bit, 1 = Set by User. ABDEN bit, 2 = . ABDEN bit, 3 = Auto-Cleared. RCIF bit (Interrupt), 1 = . RCIF bit (Interrupt), 2 = . RCIF bit (Interrupt), 3 = . Read RCREG, 1 = . Read RCREG, 2 = . Read RCREG, 3 = . SPBRGH, 1 = . SPBRGH, 2 = XXXXh. SPBRGH, 3 = 00h",
    "FIGURE 18-2: BRG OVERFLOW SEQUENCE\nStart\nBit 0\nXXXXh\n0000h\n0000h\nFFFFh\nBRG Clock\nABDEN bit\nRX pin\nABDOVF bit\nBRG Value",
    "18.2 EUSART Asynchronous Mode\nThe Asynchronous mode of operation is selected by clearing the SYNC bit (TXSTA<4>). In this mode, the EUSART  uses  standard  Non-Return-to-Zero  (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip  dedicated  8-bit/16-bit  Baud  Rate  Generator can be used to derive standard baud rate frequencies from the oscillator.\nOnce the TXREG register transfers the data to the TSR register (occurs in one T CY), the TXREG register is empty and the TXIF flag bit (PIR1<4>) is set. This interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TXIE (PIE1<4>). TXIF will be set regardless of the state of TXIE; it cannot be cleared in software. TXIF is also not cleared immediately upon loading TXREG, but becomes valid in the second instruction cycle following the load instruction. Polling TXIF immediately following a load of TXREG will return invalid results.",
    "18.2 EUSART Asynchronous Mode\nThe EUSART transmits and receives the LSb first. The EUSART's  transmitter  and  receiver  are  functionally independent but use the same data format and baud rate. The Baud Rate Generator produces a clock, either x16 or x64 of the bit shift rate depending on the BRGH and BRG16 bits (TXSTA<2> and BAUDCON<3>). Parity is not supported by the hardware but can be implemented in software and stored as the 9th data bit.\nWhen operating in Asynchronous mode, the EUSART module consists of the following important elements:\n\u00b7 Baud Rate Generator\n\u00b7 Sampling Circuit\n\u00b7 Asynchronous Transmitter\n\u00b7 Asynchronous Receiver\n\u00b7 Auto-Wake-up on Sync Break Character\n\u00b7 12-Bit Break Character Transmit\n\u00b7 Auto-Baud Rate Detection",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nWhile TXIF indicates the status of the TXREG register, another bit,  TRMT (TXSTA<1>), shows the  status of the TSR register. TRMT is a read-only bit which is set when the TSR register is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine if the TSR register is empty.\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag  bit,  TXIF,  is  set  when  enable  bit, TXEN, is set.\nTo set up an Asynchronous Transmission:\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, TXIE.",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 18-3. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG.  The  TXREG  register  is  loaded  with  data  in software. The TSR register is not loaded until the Stop bit  has  been  transmitted  from  the  previous  load.  As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG register (if available).\n4. If 9-bit transmission is desired, set transmit bit, TX9. Can be used as address/data bit.\n5. Enable  the  transmission  by  setting  bit,  TXEN, which will also set bit, TXIF.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Load data to the TXREG  register (starts transmission).\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous transmission.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "18.2.2 EUSART ASYNCHRONOUS RECEIVER\nThe receiver block diagram is  shown in Figure 18-6. The data is received on the RX pin and drives the data recovery block. The data recovery block is actually a high-speed shifter operating at x16 times the baud rate, whereas the main receive serial shifter operates at the bit rate or at FOSC. This mode would typically be used in RS-232 systems.\nTo set up an Asynchronous Reception:",
    "18.2.2 EUSART ASYNCHRONOUS RECEIVER\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, RCIE.\n4. If 9-bit reception is desired, set bit, RX9.\n5. Enable the reception by setting bit, CREN.\n6. Flag  bit,  RCIF,  will  be  set  when  reception  is complete and an interrupt will  be  generated  if enable bit, RCIE, was set.\n7. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG register.\n9. If any error occurred, clear the error by clearing enable bit, CREN.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThis mode would typically be used in RS-485 systems. To  set  up  an  Asynchronous  Reception  with  Address Detect Enable:",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If  interrupts are required, set the RCIE bit and select the desired priority level with the RCIP bit.\n4. Set the RX9 bit to enable 9-bit reception.\n5. Set the ADDEN bit to enable address detect.\n6. Enable reception by setting the CREN bit.\n7. The  RCIF  bit  will  be  set  when  reception  is complete. The interrupt will be Acknowledged if the RCIE and GIE bits are set.\n8. Read the  RCSTA  register  to  determine  if  any error occurred during reception, as well as read bit 9 of data (if applicable).\n9. Read RCREG to determine if the device is being addressed.\n10. If any error occurred, clear the CREN bit.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n11. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous reception.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nDuring  Sleep  mode,  all  clocks  to  the  EUSART  are suspended. Because of this, the Baud Rate Generator is inactive and a proper byte reception cannot be performed. The auto-wake-up feature allows the controller to wake-up due to activity on the RX/DT line while the EUSART is operating in Asynchronous mode.\nFollowing a wake-up event, the module generates an RCIF  interrupt.  The  interrupt  is  generated  synchronously  to  the  Q  clocks  in  normal  operating  modes (Figure 18-8)  and  asynchronously,  if  the  device  is  in Sleep  mode  (Figure 18-9).  The  interrupt  condition  is cleared by reading the RCREG register.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nThe  auto-wake-up  feature  is  enabled  by  setting  the WUE bit (BAUDCON<1>). Once set, the typical receive sequence  on  RX/DT  is  disabled  and  the  EUSART remains in an Idle state, monitoring for a wake-up event independent  of  the  CPU  mode.  A  wake-up  event consists of a high-to-low transition on the RX/DT line. (This  coincides  with  the  start  of  a  Sync  Break  or  a Wake-up Signal character for the LIN protocol.)\nThe WUE bit is automatically cleared once a low-tohigh transition is observed on the RX line following the wake-up event. At this point, the EUSART module is in Idle mode and returns to normal operation. This signals to the user that the Sync Break event is over.",
    "18.2.4.2 Special Considerations Using the WUE Bit\nSince auto-wake-up functions by sensing rising edge transitions on RX/DT, information with any state changes before the Stop bit may signal a false End-OfCharacter (EOC) and cause data or framing errors. To work  properly,  therefore,  the  initial  character  in  the transmission must be all ' 0 's. This can be 00h (8 bytes) for standard RS-232 devices or 000h (12 bits) for LIN bus.\nOscillator start-up time must  also  be  considered, especially in applications using oscillators with longer start-up  intervals  (i.e.,  XT  or  HS  mode).  The  Sync Break  (or wake-up  signal) character must  be  of sufficient length and be followed by a sufficient interval to allow enough time for the selected oscillator to start and provide proper initialization of the EUSART.",
    "18.2.4.2 Special Considerations Using the WUE Bit\nThe timing of WUE and RCIF events may cause some confusion when it comes to determining the validity of received data. As noted, setting the WUE bit places the EUSART in an Idle mode. The wake-up event causes a receive interrupt by setting the RCIF bit. The WUE bit is cleared after this when a rising edge is seen on RX/DT. The interrupt condition is then cleared by reading the RCREG register. Ordinarily, the data in RCREG will be dummy data and should be discarded.\nThe fact that the WUE bit has been cleared (or is still set) and the RCIF flag is set should not be used as an indicator of the integrity of the data in RCREG. Users should  consider  implementing  a  parallel  method  in firmware to verify received data integrity.\nTo assure that no actual data is lost, check the RCIDL bit to verify that a receive operation is not in process. If a receive operation is not occurring, the WUE bit may then be set just prior to entering the Sleep mode.",
    "FIGURE 18-9: AUTO-WAKE-UP BIT (WUE) TIMINGS DURING SLEEP\nNote 1: If the wake-up event requires long oscillator warm-up time, the auto-clear of the WUE bit can occur before the oscillator is ready. This sequence should not depend on the presence of Q clocks.\n- 2: The EUSART remains in Idle while the WUE bit is set.",
    "18.2.5 BREAK CHARACTER SEQUENCE\n- 1. Configure the EUSART for the desired mode.\nThe EUSART module has the capability of sending the special Break character sequences that are required by the  LIN  bus  standard.  The  Break  character  transmit consists of a Start bit, followed by twelve ' 0 ' bits and a Stop bit. The Frame Break character is sent whenever the SENDB and TXEN bits (TXSTA<3> and TXSTA<5>) are set while the Transmit Shift Register is loaded with data. Note that the value of data written to TXREG will be ignored and all ' 0 's will be transmitted.\nThe SENDB bit is automatically reset by hardware after the corresponding Stop bit is sent. This allows the user to preload the transmit FIFO with the next transmit byte following the Break  character  (typically, the Sync character in the LIN specification).\nNote that the data value written to the TXREG for the Break character is ignored. The write simply serves the purpose of initiating the proper sequence.\nThe TRMT bit indicates when the transmit operation is active or Idle, just as it does during normal transmission.  See  Figure 18-10  for  the  timing  of  the  Break character sequence.",
    "18.2.5.1 Break and Sync Transmit Sequence\nThe  following  sequence  will  send  a  message  frame header made up of a Break, followed by an Auto-Baud Sync  byte.  This  sequence  is  typical  of  a  LIN  bus master.\n2. Set  the  TXEN  and  SENDB  bits  to  set  up  the Break character.\n3. Load  the  TXREG  with  a  dummy  character  to initiate transmission (the value is ignored).\n4. Write '55h' to TXREG to load the Sync character into the transmit FIFO buffer.\n5. After the Break has been sent, the SENDB bit is reset  by  hardware.  The  Sync  character  now transmits in the preconfigured mode.\nWhen the TXREG becomes empty, as indicated by the TXIF, the next data byte can be written to TXREG.",
    "18.2.6 RECEIVING A BREAK CHARACTER\nThe  Enhanced  USART  module can  receive  a  Break character in two ways.\nThe first method forces configuration of the baud rate at a frequency of 9/13 the typical speed. This allows for the Stop bit transition to be at the correct sampling location (13 bits for Break versus Start bit and 8 data bits for typical data).\nThe  second  method  uses  the  auto-wake-up  feature described in Section 18.2.4 'Auto-Wake-up on Sync Break  Character' . By enabling this feature, the EUSART will sample the next two transitions on RX/DT, cause an RCIF interrupt and receive the next data byte followed by another interrupt.\nNote  that  following  a  Break  character,  the  user  will typically  want  to  enable  the  Auto-Baud  Rate  Detect feature. For both methods, the user can set the ABD bit once the TXIF interrupt is observed.",
    "18.3 EUSART Synchronous Master Mode\nThe Synchronous Master mode is entered by setting the CSRC bit (TXSTA<7>). In this mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting  data,  the  reception  is  inhibited  and  vice versa.  Synchronous  mode  is  entered  by  setting  bit, SYNC  (TXSTA<4>).  In  addition,  enable  bit,  SPEN (RCSTA<7>), is set in order to configure the TX and RX pins to CK (clock) and DT (data) lines, respectively.\nThe Master mode indicates that the processor transmits  the  master  clock  on  the  CK  line.  Clock polarity is selected with the TXCKP bit (BAUDCON<4>); setting TXCKP sets the Idle state on CK as high, while clearing the bit sets the Idle state as low.  This  option  is  provided  to  support  Microwire devices with this module.",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\nOnce the TXREG register transfers the data to the TSR register (occurs in one TCY), the TXREG is empty and the TXIF flag bit (PIR1<4>) is set. The interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TXIE (PIE1<4>). TXIF is set regardless of the state of enable bit, TXIE; it cannot be cleared in software. It will reset only when new data is loaded into the TXREG register.\nWhile flag bit, TXIF, indicates the status of the TXREG register,  another  bit,  TRMT  (TXSTA<1>),  shows  the status of the TSR register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TSR  is  not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Master Transmission:",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\n1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit, as required, to achieve the desired baud rate.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 18-3. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG.  The  TXREG  register  is  loaded  with  data  in software. The TSR register is not loaded until the last bit  has  been  transmitted  from  the  previous  load.  As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG (if available).",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master transmission.\n- Note 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either the Single Receive Enable bit, SREN  (RCSTA<5>), or the Continuous Receive Enable bit, CREN (RCSTA<4>). Data is sampled on the RX pin on the falling edge of the clock.\nIf enable  bit,  SREN,  is  set,  only  a  single  word  is received. If enable bit, CREN, is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Master Reception:",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or  clear the BRG16 bit, as required, to achieve the desired baud rate.\n3. Ensure bits, CREN and SREN, are clear.\n4. If interrupts are desired, set enable bit, RCIE.\n5. If 9-bit reception is desired, set bit, RX9.\n6. If a single reception is required, set bit, SREN. For continuous reception, set bit, CREN.\n7. Interrupt flag bit, RCIF, will be set when reception is complete and an interrupt will be generated if the enable bit, RCIE, was set.\n8. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG register.\n10. If any error occurred, clear the error by clearing bit, CREN.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n11. If  using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master reception.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "18.4 EUSART Synchronous Slave Mode\nTo set up a Synchronous Slave Transmission:\nSynchronous  Slave  mode  is  entered  by  clearing  bit, CSRC  (TXSTA<7>).  This mode  differs from the Synchronous Master mode in that the shift clock is supplied externally at the CK pin (instead of being supplied internally  in  Master  mode). This  allows  the  device  to transfer or receive data while in any low-power mode.",
    "18.4.1 EUSART SYNCHRONOUS SLAVE TRANSMISSION\nThe operation of the Synchronous Master and Slave modes  is  identical,  except  in  the  case  of  the  Sleep mode.\nIf  two  words  are  written  to  the  TXREG  and  then  the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The  second  word  will  remain  in  the  TXREG register.\nc) Flag bit, TXIF, will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG  register  will  transfer  the  second word to the TSR and flag bit, TXIF, will now be set.\ne) If enable bit, TXIE, is set, the interrupt will wake the  chip  from  Sleep.  If  the  global  interrupt  is enabled, the program will branch to the interrupt vector.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave transmission.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n1. Enable  the  synchronous  slave  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. Clear bits, CREN and SREN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting enable bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREGx register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "18.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\nThe operation of the Synchronous Master and Slave modes is identical, except in the case of Sleep, or any Idle  mode  and  bit,  SREN,  which  is  a  'don't  care'  in Slave mode.\nIf  receive is enabled by setting the CREN bit prior to entering Sleep or any Idle mode, then a word may be received while in this low-power mode. Once the word is received, the RSR register will transfer the data to the RCREG  register.  If  the  RCIE  enable  bit  is  set,  the interrupt  generated  will  wake  the  chip  from  the  lowpower  mode.  If  the  global  interrupt  is  enabled,  the program will branch to the interrupt vector.\nTo set up a Synchronous Slave Reception:",
    "18.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\n1. Enable  the  synchronous  master  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. If interrupts are desired, set enable bit, RCIE.\n3. If 9-bit reception is desired, set bit, RX9.\n4. To enable reception, set enable bit, CREN.\n5. Flag  bit,  RCIF,  will  be  set  when  reception  is complete.  An  interrupt will be  generated  if enable bit, RCIE, was set.\n6. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n7. Read  the  8-bit  received  data  by  reading  the RCREG register.\n8. If any error occurred, clear the error by clearing bit, CREN.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 51.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 51. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 51. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = RXDTP. BAUDCON, Bit 4 = TXCKP.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 51. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Reset Values on page = 51. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nSPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Reset Values on page = 51\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave reception.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "19.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nThe Analog-to-Digital (A/D) converter module has 10 inputs for the 28-pin devices and 13 for the 40/44-pin devices.  This  module  allows  conversion  of  an  analog input signal to a corresponding 10-bit digital number.\nThe ADCON0 register, shown in Register 19-1, controls the operation of the A/D module. The ADCON1 register, shown in Register 19-2, configures the functions of the port pins. The ADCON2 register, shown  in  Register 19-3,  configures  the  A/D  clock source, programmed acquisition time and justification.\nThe module has five registers:\n\u00b7 A/D Result High Register (ADRESH)\n\u00b7 A/D Result Low Register (ADRESL)\n\u00b7 A/D Control Register 0 (ADCON0)\n\u00b7 A/D Control Register 1 (ADCON1)\n\u00b7 A/D Control Register 2 (ADCON2)",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = CHS3. -, 3 = CHS2. -, 4 = CHS1. -, 5 = CHS0. -, 6 = GO/DONE. -, 7 = ADON. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as ' 0 '\nbit 5-2\nCHS3:CHS0: Analog Channel Select bits\n0000 = Channel 0 (AN0)\n0001 = Channel 1 (AN1)\n0010 = Channel 2 (AN2)\n0011 = Channel 3 (AN3)\n0100 = Channel 4 (AN4)\n0101 = Channel 5 (AN5)\n(1,2)\n0110 = Channel 6 (AN6) (1,2)\n0111 = Channel 7 (AN7) (1,2)\n1000 = Channel 8 (AN8)\n1001 = Channel 9 (AN9)\n1010 = Channel 10 (AN10)\n1011 = Channel 11 (AN11)\n1100 = Channel 12 (AN12)\n1101 = Unimplemented) (2)\n1110 = Unimplemented) (2)\n1111 = Unimplemented) (2)",
    "bit 1\nGO/DONE: A/D Conversion Status bit\nWhen ADON = 1 :\n1 = A/D conversion in progress\n0 = A/D Idle",
    "bit 0\nADON: A/D On bit\n1 = A/D Converter module is enabled\n0 = A/D Converter module is disabled\nNote 1: These channels are not implemented on 28-pin devices.\n2: Performing a conversion on unimplemented channels will return a floating input measurement.",
    "REGISTER 19-2: ADCON1: A/D CONTROL REGISTER 1\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-q (1). U-0, 6 = R/W-q (1). U-0, 7 = R/W-q (1). -, 1 = -. -, 2 = VCFG1. -, 3 = VCFG0. -, 4 = PCFG3. -, 5 = PCFG2. -, 6 = PCFG1. -, 7 = PCFG0. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "bit 7-6\nUnimplemented: Read as ' 0 '\nbit 5\nVCFG1: Voltage Reference Configuration bit (VREF- source)\n1 = VREF- (AN2)\n0 = VSS\nbit 4\nVCFG0: Voltage Reference Configuration bit (VREF+ source)\n1 = VREF+ (AN3)\n0 = VDD\nbit 3-0 PCFG3:PCFG0: A/D Port Configuration Control bits:",
    "bit 7-6\n0000 (1), AN12 = A. 0000 (1), AN11 = A. 0000 (1), AN10 = A. 0000 (1), AN9 = A. 0000 (1), AN8 = A. 0000 (1), AN7 (2) = A. 0000 (1), AN6 (2) = A. 0000 (1), AN5 (2) = A. 0000 (1), AN4 = A. 0000 (1), AN3 = A. 0000 (1), AN2 = A. 0000 (1), AN1 = A. 0000 (1), AN0 = A. 0001, AN12 = A. 0001, AN11 = A. 0001, AN10 = A. 0001, AN9 = A. 0001, AN8 = A. 0001, AN7 (2) = A. 0001, AN6 (2) = A. 0001, AN5 (2) = A. 0001, AN4 = A. 0001, AN3 = A. 0001, AN2 = A. 0001,",
    "bit 7-6\nAN1 = A. 0001, AN0 = A. 0010, AN12 = A. 0010, AN11 = A. 0010, AN10 = A. 0010, AN9 = A. 0010, AN8 = A. 0010, AN7 (2) = A. 0010, AN6 (2) = A. 0010, AN5 (2) = A. 0010, AN4 = A. 0010, AN3 = A. 0010, AN2 = A. 0010, AN1 = A. 0010, AN0 = A. 0011, AN12 = D. 0011, AN11 = A. 0011, AN10 = A. 0011, AN9 = A. 0011, AN8 = A. 0011, AN7 (2) = A. 0011, AN6 (2) = A. 0011, AN5 (2) = A. 0011, AN4 = A. 0011, AN3 = A. 0011, AN2 = A. 0011, AN1 = A. 0011, AN0 = A. 0100, AN12 = D. 0100, AN11",
    "bit 7-6\n= D. 0100, AN10 = A. 0100, AN9 = A. 0100, AN8 = A. 0100, AN7 (2) = A. 0100, AN6 (2) = A. 0100, AN5 (2) = A. 0100, AN4 = A. 0100, AN3 = A. 0100, AN2 = A. 0100, AN1 = A. 0100, AN0 = A. 0101, AN12 = D. 0101, AN11 = D. 0101, AN10 = D. 0101, AN9 = A. 0101, AN8 = A. 0101, AN7 (2) = A. 0101, AN6 (2) = A. 0101, AN5 (2) = A. 0101, AN4 = A. 0101, AN3 = A. 0101, AN2 = A. 0101, AN1 = A. 0101, AN0 = A. 0110, AN12 = D. 0110, AN11 = D. 0110, AN10 = D. 0110, AN9 = D. 0110, AN8 =",
    "bit 7-6\nA. 0110, AN7 (2) = A. 0110, AN6 (2) = A. 0110, AN5 (2) = A. 0110, AN4 = A. 0110, AN3 = A. 0110, AN2 = A. 0110, AN1 = A. 0110, AN0 = A. 0111 (1), AN12 = D. 0111 (1), AN11 = D. 0111 (1), AN10 = D. 0111 (1), AN9 = D. 0111 (1), AN8 = D. 0111 (1), AN7 (2) = A. 0111 (1), AN6 (2) = A. 0111 (1), AN5 (2) = A. 0111 (1), AN4 = A. 0111 (1), AN3 = A. 0111 (1), AN2 = A. 0111 (1), AN1 = A. 0111 (1), AN0 = A. 1000, AN12 = D. 1000, AN11 = D. 1000, AN10 = D. 1000, AN9",
    "bit 7-6\n= D. 1000, AN8 = D. 1000, AN7 (2) = D. 1000, AN6 (2) = A. 1000, AN5 (2) = A. 1000, AN4 = A. 1000, AN3 = A. 1000, AN2 = A. 1000, AN1 = A. 1000, AN0 = A. 1001, AN12 = D. 1001, AN11 = D. 1001, AN10 = D. 1001, AN9 = D. 1001, AN8 = D. 1001, AN7 (2) = D. 1001, AN6 (2) = D. 1001, AN5 (2) = A. 1001, AN4 = A. 1001, AN3 = A. 1001, AN2 = A. 1001, AN1 = A. 1001, AN0 = A. 1010, AN12 = D. 1010, AN11 = D. 1010, AN10 = D. 1010, AN9 = D. 1010, AN8 = D. 1010, AN7 (2) = D. 1010, AN6 (2) = D.",
    "bit 7-6\n1010, AN5 (2) = D. 1010, AN4 = A. 1010, AN3 = A. 1010, AN2 = A. 1010, AN1 = A. 1010, AN0 = A. 1011, AN12 = D. 1011, AN11 = D. 1011, AN10 = D. 1011, AN9 = D. 1011, AN8 = D. 1011, AN7 (2) = D. 1011, AN6 (2) = D. 1011, AN5 (2) = D. 1011, AN4 = D. 1011, AN3 = A. 1011, AN2 = A. 1011, AN1 = A. 1011, AN0 = A. 1100, AN12 = D. 1100, AN11 = D. 1100, AN10 = D. 1100, AN9 = D. 1100, AN8 = D. 1100, AN7 (2) = D. 1100, AN6 (2) = D. 1100, AN5 (2) = D. 1100, AN4 = D. 1100, AN3 = D. 1100, AN2 = A. 1100,",
    "bit 7-6\nAN1 = A. 1100, AN0 = A. 1101, AN12 = D. 1101, AN11 = D. 1101, AN10 = D. 1101, AN9 = D. 1101, AN8 = D. 1101, AN7 (2) = D. 1101, AN6 (2) = D. 1101, AN5 (2) = D. 1101, AN4 = D. 1101, AN3 = D. 1101, AN2 = D. 1101, AN1 = A. 1101, AN0 = A. 1110, AN12 = D. 1110, AN11 = D. 1110, AN10 = D. 1110, AN9 = D. 1110, AN8 = D. 1110, AN7 (2) = D. 1110, AN6 (2) = D. 1110, AN5 (2) = D. 1110, AN4 = D. 1110, AN3 = D. 1110, AN2 = D. 1110, AN1 = D. 1110, AN0 = A. 1111, AN12 = D. 1111, AN11 =",
    "bit 7-6\nD. 1111, AN10 = D. 1111, AN9 = D. 1111, AN8 = D. 1111, AN7 (2) = D. 1111, AN6 (2) = D. 1111, AN5 (2) = D. 1111, AN4 = D. 1111, AN3 = D. 1111, AN2 = D. 1111, AN1 = D. 1111, AN0 = D\nA = Analog input\nD = Digital I/O\nNote 1: The POR value of the PCFG bits depends on the value of the PBADEN Configuration bit. When PBADEN = 1 , PCFG<2:0> = 000 ; when PBADEN = 0 , PCFG<2:0> = 111 .\n2: AN5 through AN7 are available only on 40/44-pin devices.",
    "REGISTER 19-3: ADCON2: A/D CONTROL REGISTER 2\nADFM, U-0 = -. ADFM, R/W-0 = ACQT2. ADFM, R/W-0 = ACQT1. ADFM, R/W-0 = ACQT0. ADFM, R/W-0 = ADCS2. ADFM, R/W-0 = ADCS1. ADFM, R/W-0 = ADCS0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 19-3: ADCON2: A/D CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nADFM: A/D Result Format Select bit\n1 = Right justified\n0 = Left justified\nbit 6\nUnimplemented: Read as ' 0 '\nbit 5-3\nACQT2:ACQT0: A/D Acquisition Time Select bits\n111 = 20 TAD\n110 = 16 TAD\n101 = 12 TAD\n100 = 8 TAD\n011 = 6 TAD\n010 = 4 TAD\n001 = 2 TAD\n000 = 0 TAD (1)\nbit 2-0\nADCS2:ADCS0: A/D Conversion Clock Select bits\n111 = FRC (clock derived from A/D RC oscillator) (1)\n110 = FOSC/64\n101 = FOSC/16\n100 = FOSC/4\n011 = FRC (clock derived from A/D RC oscillator) (1)\n010 = FOSC/32\n001 = FOSC/8\n000 = FOSC/2\nNote 1: If the A/D FRC clock source is selected, a delay of one TCY (instruction cycle) is added before the A/D clock starts. This allows the SLEEP instruction to be executed before starting a conversion.",
    "PIC18F2525/2620/4525/4620\nThe analog reference voltage is software selectable to either the device's positive and negative supply voltage (VDD and VSS), or the voltage level on the RA3/AN3/ VREF+ and RA2/AN2/VREF-/CVREF pins.\nA device Reset forces all registers to their Reset state. This forces the A/D module to be turned off and any conversion in progress is aborted.\nThe A/D converter has a unique feature of being able to  operate  while  the  device  is  in  Sleep  mode.  To operate  in  Sleep,  the  A/D  conversion  clock  must  be derived from the A/D's internal RC oscillator.\nThe output of the sample and hold is the input into the converter,  which  generates  the  result  via  successive approximation.",
    "PIC18F2525/2620/4525/4620\nEach port pin associated with the A/D converter can be configured as an analog input, or as a digital I/O. The ADRESH and ADRESL registers contain the result of the A/D  conversion.  When  the  A/D  conversion  is complete, the result is loaded into the ADRESH:ADRESL  register  pair,  the  GO/DONE  bit (ADCON0 register) is cleared and A/D Interrupt Flag bit, ADIF, is set. The block diagram of the A/D module is shown in Figure 19-1.\nFIGURE 19-1:\nA/D BLOCK DIAGRAM\n- 2: I/O pins have diode protection to VDD and VSS.\nThe  value  in  the  ADRESH:ADRESL  registers  is  not modified for a Power-on Reset. The ADRESH:ADRESL registers  will  contain  unknown  data  after  a  Power-on Reset.",
    "PIC18F2525/2620/4525/4620\nAfter the A/D module has been configured as desired, the  selected  channel  must  be  acquired  before  the conversion is started. The analog input channels must have  their  corresponding  TRIS  bits  selected  as  an input. To determine acquisition time, see Section 19.1 'A/D Acquisition Requirements' .  After this acquisition  time  has  elapsed,  the  A/D  conversion  can  be started.  An  acquisition  time  can  be  programmed  to occur between setting the GO/DONE bit and the actual start of the conversion.\nThe following steps should be followed to perform an A/D conversion:",
    "PIC18F2525/2620/4525/4620\n1. Configure the A/D module:\n\u00b7 Configure analog pins, voltage reference and digital I/O (ADCON1)\n\u00b7 Select A/D input channel (ADCON0)\n\u00b7 Select A/D acquisition time (ADCON2)\n\u00b7 Select A/D conversion clock (ADCON2)\n\u00b7 Turn on A/D module (ADCON0)\n2. Configure A/D interrupt (if desired):\n\u00b7 Clear ADIF bit\n\u00b7 Set ADIE bit\n\u00b7 Set GIE bit\n3. Wait the required acquisition time (if required).\n4. Start conversion:\n\u00b7 Set GO/DONE bit (ADCON0 register)\n5. Wait for A/D conversion to complete, by either:\n\u00b7 Polling for the GO/DONE bit to be cleared OR\n\u00b7 Waiting for the A/D interrupt\n6. Read A/D Result registers (ADRESH:ADRESL); clear bit ADIF, if required.\n7. For next conversion, go to step 1 or step 2, as required.  The  A/D  conversion  time  per  bit  is defined  as  TAD.  A  minimum  wait  of  2  TAD  is required before the next acquisition starts.",
    "19.1 A/D Acquisition Requirements\nFor the A/D converter to meet its specified accuracy, the charge holding capacitor (CHOLD) must be allowed to fully charge to the input channel voltage level. The analog  input  model  is  shown  in  Figure 19-3.  The source  impedance  (RS)  and  the  internal  sampling switch (RSS) impedance directly affect the time required to charge the capacitor CHOLD. The sampling switch (RSS) impedance varies over the device voltage (VDD). The source impedance affects the offset voltage at the analog input (due to pin leakage current). The maximum  recommended  impedance  for  analog sources is 2.5 k \u03a9 .  After the analog input channel is selected (changed), the channel must be sampled for at least the minimum acquisition time before starting a conversion.\nNote:, 1 = When the conversion is started, the holding capacitor is disconnected from the input pin.",
    "EQUATION 19-1: ACQUISITION TIME\nTACQ, 1 = =. TACQ, 2 = Amplifier Settling Time + Holding Capacitor Charging Time + Temperature Coefficient. , 1 = =. , 2 = TAMP + TC + TCOFF",
    "EQUATION 19-2: A/D MINIMUM CHARGING TIME\nVHOLD or, 1 = =. VHOLD or, 2 = (VREF - (VREF/2048)) \u2022 (1 - e (-T C/CHOLD(RIC + RSS + RS)) ). TC, 1 = =. TC, 2 = -(CHOLD)(RIC + RSS + RS) ln(1/2048)",
    "EQUATION 19-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nTACQ, 1 = =. TACQ, 2 = TAMP + TC + TCOFF. TAMP, 1 = =. TAMP, 2 = 0.2 \u03bc s. TCOFF, 1 = =. TCOFF, 2 = (Temp - 25 \u00b0 C)(0.02 \u03bc s/ \u00b0 C) (85 \u00b0 C - 25 \u00b0 C)(0.02 \u03bc s/ \u00b0 C) 1.2 \u03bc s. Temperature coefficient is only required for temperatures > 25 \u00b0 C. Below 25 \u00b0 C, TCOFF = 0 ms., 1 = Temperature coefficient is only required for temperatures > 25 \u00b0 C. Below 25 \u00b0 C, TCOFF = 0 ms.. Temperature coefficient is only required for temperatures > 25 \u00b0 C. Below 25 \u00b0 C, TCOFF = 0 ms., 2 = Temperature coefficient is only required for temperatures > 25 \u00b0 C. Below 25 \u00b0 C, TCOFF = 0 ms.. TC, 1 = =. TC, 2 = -(CHOLD)(RIC + RSS + RS) ln(1/2047) -(25 pF) (1 k \u03a9 + 2 k \u03a9 + 2.5 k",
    "EQUATION 19-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\n\u03a9 ) ln(0.0004883) 1.05 \u03bc s. TACQ, 1 = =. TACQ, 2 = 0.2 \u03bc s + 1 \u03bc s + 1.2 \u03bc s 2.4 \u03bc s\nTo calculate the minimum acquisition time, Equation 19-1  may be  used.  This  equation  assumes that 1/2 LSb error is used (1024 steps for the A/D). The 1/2 LSb error is the maximum error allowed for the A/D to meet its specified resolution.\nExample 19-3 shows the calculation  of  the  minimum required  acquisition  time  TACQ.  This  calculation  is based on the following application system assumptions:\nCHOLD\n= 25 pF\nRs\n= 2.5 k \u03a9\nConversion Error\n\u2264 1/2 LSb\nVDD\n= 5V \u2192 Rss = 2 k \u03a9\nTemperature\n= 85 C (system max.) \u00b0",
    "19.2 Selecting and Configuring Acquisition Time\nThe  ADCON2  register  allows  the  user  to  select  an acquisition time that occurs each time the GO/DONE bit  is  set.  It  also  gives  users  the  option  to  use  an automatically determined acquisition time.\nAcquisition time may be set with the ACQT2:ACQT0 bits  (ADCON2<5:3>), which provides a range of 2 to 20 TAD. When the GO/DONE bit is set, the A/D module continues to sample the input for the selected acquisition  time,  then  automatically  begins  a  conversion. Since the acquisition time is programmed, there may be  no  need  to  wait  for  an  acquisition  time  between selecting a channel and setting the GO/DONE bit.\nManual acquisition is selected when ACQT2:ACQT0 = 000 . When the GO/DONE bit is set, sampling is stopped and a conversion begins. The user is responsible for ensuring the required acquisition time has passed  between  selecting the desired input channel and setting the GO/DONE bit. This option is also the default Reset state of the ACQT2:ACQT0 bits and  is  compatible  with  devices  that  do  not  offer programmable acquisition times.",
    "19.3 Selecting the A/D Conversion Clock\nThe A/D conversion time per bit is defined as TAD. The A/D conversion requires 11 TAD per 10-bit conversion. The  source  of  the  A/D  conversion  clock  is  software selectable. There are seven possible options for TAD:\n\u00b7 2 TOSC\n\u00b7 4 TOSC\n\u00b7 8 TOSC\n\u00b7 16 TOSC\n\u00b7 32 TOSC\n\u00b7 64 TOSC\n\u00b7 Internal RC Oscillator\nFor correct A/D conversions, the A/D conversion clock (TAD) must be as short as possible, but greater than the minimum TAD (see parameter 130 for more information).\nTable 19-1 shows the resultant TAD times derived from the  device  operating  frequencies  and  the  A/D  clock source selected.\nIn either case, when the conversion is completed, the GO/DONE bit is cleared, the ADIF flag is set and the A/D  begins  sampling  the  currently  selected  channel again. If  an  acquisition  time  is  programmed,  there  is nothing to indicate if the acquisition time has ended or if the conversion has begun.",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n2 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 000. 2 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 2.86 MHz. 2 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 1.43 kHz. 4 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 100. 4 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 5.71 MHz. 4 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 2.86 MHz. 8 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 001. 8 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 11.43 MHz. 8 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 5.72 MHz. 16 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 101. 16 TOSC,",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\nMaximum Device Frequency.PIC18F2X20/4X20 = 22.86 MHz. 16 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 11.43 MHz. 32 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 010. 32 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 40.0 MHz. 32 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 22.86 MHz. 64 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 110. 64 TOSC, Maximum Device Frequency.PIC18F2X20/4X20 = 40.0 MHz. 64 TOSC, Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 22.86 MHz. RC (3), AD Clock Source (T AD).ADCS2:ADCS0 = x11. RC (3), Maximum Device Frequency.PIC18F2X20/4X20 = 1.00 MHz",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n(1). RC (3), Maximum Device Frequency.PIC18LF2X20/4X20 (4) = 1.00 MHz (2)\nNote 1: The RC source has a typical TAD time of 1.2 \u03bc s.\n2: The RC source has a typical TAD time of 2.5 \u03bc s.\n3: For device frequencies above 1 MHz, the device must be in Sleep for the entire conversion or the A/D accuracy may be out of specification.\n4: Low-power (PIC18LFXXXX) devices only.",
    "19.5 Configuring Analog Port Pins\nThe selection of the automatic acquisition time and A/D conversion  clock  is  determined  in  part  by  the  clock source and frequency while in a power-managed mode.\nIf the A/D is expected to operate while the device is in a power-managed  mode,  the  ACQT2:ACQT0  and ADCS2:ADCS0 bits in ADCON2 should be updated in accordance with the  clock  source  to  be  used  in  that mode. After entering the mode, an A/D acquisition or conversion may be started. Once started, the device should  continue  to  be  clocked  by  the  same  clock source until the conversion has been completed.\n- If desired, the device may be placed into the corresponding Idle mode during the conversion. If the device clock frequency is less than 1 MHz, the A/D RC clock source should be selected.",
    "19.5 Configuring Analog Port Pins\nOperation  in  the  Sleep  mode  requires  the  A/D  FRC clock to be selected. If bits ACQT2:ACQT0 are set to ' 000 ' and a conversion is started, the conversion will be delayed one instruction cycle to allow execution of the SLEEP instruction and entry to Sleep mode. The IDLEN bit  (OSCCON<7>)  must  have  already  been  cleared prior to starting the conversion.\nThe ADCON1, TRISA, TRISB and TRISE registers all configure the A/D port pins. The port pins needed as analog inputs must have their corresponding TRIS bits set (input). If the TRIS bit is cleared (output), the digital output level (VOH or VOL) will be converted.\nThe A/D operation is independent of the state of the CHS3:CHS0 bits and the TRIS bits.",
    "19.5 Configuring Analog Port Pins\nNote 1: When reading the PORT register, all pins configured as analog input channels will read as cleared (a low level). Pins configured as digital inputs will convert as analog inputs. Analog levels on a digitally configured input will be accurately converted.\n2: Analog  levels  on  any  pin  defined  as  a digital  input  may  cause  the  digital  input buffer  to  consume  current  out  of  the device's specification limits.\n3: The PBADEN bit in Configuration Register  3H  configures  PORTB  pins  to reset as analog or digital pins by controlling how the PCFG<3:0> bits in ADCON1 are reset.",
    "19.6 A/D Conversions\nFigure 19-4 shows the operation of the A/D converter after the GO/DONE  bit has been set and the ACQT2:ACQT0  bits  are  cleared.  A  conversion  is started after the following instruction to allow entry into Sleep mode before the conversion begins.\nFigure 19-5 shows the operation of the A/D converter after the GO/DONE  bit has been set and the ACQT2:ACQT0 bits are set to ' 010 ' and selecting a 4 TAD acquisition time before the conversion starts.\nAfter  the  A/D  conversion  is  completed  or  aborted,  a 2 TAD wait is required before the next acquisition can be started.  After  this  wait,  acquisition  on  the  selected channel is automatically started.\nNote:, 1 = The GO/DONE bit should NOT be set in the same instruction that turns on the A/D.",
    "19.7 Discharge\nClearing the GO/DONE bit during a conversion will abort the current conversion. The A/D Result register pair will NOT  be  updated  with  the  partially  completed  A/D conversion sample. This means the ADRESH:ADRESL registers  will  continue  to  contain  the  value  of  the  last completed conversion (or the last value  written to the ADRESH:ADRESL registers).\nThe discharge phase is used to initialize the value of the  capacitor  array.  The  array  is  discharged  before every sample. This feature helps to optimize the unitygain amplifier, as the circuit always needs to charge the capacitor array, rather than charge/discharge based on previous measure values.",
    "FIGURE 19-4: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 000 , TACQ = 0 )\nFIGURE 19-5: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 010 , TACQ = 4 TAD)",
    "19.8 Use of the CCP2 Trigger\nAn A/D conversion can be started by the Special Event Trigger  of  the  CCP2  module.  This  requires  that  the CCP2M3:CCP2M0 bits (CCP2CON<3:0>) be programmed  as  ' 1011 '  and  that  the  A/D  module  is enabled (ADON bit is set). When the trigger occurs, the GO/DONE bit will be set, starting the A/D acquisition and conversion and the Timer1 (or Timer3) counter will be reset to zero. Timer1 (or Timer3) is reset to automatically  repeat  the  A/D  acquisition  period  with  minimal software overhead (moving ADRESH:ADRESL to the desired location). The appropriate analog input channel must be selected and the minimum acquisition period  is  either  timed  by  the  user,  or  an  appropriate TACQ time  selected  before  the  Special  Event  Trigger sets the GO/DONE bit (starts a conversion).\nIf the A/D module is not enabled (ADON is cleared), the Special Event Trigger will be ignored by the A/D module but will still reset the Timer1 (or Timer3) counter.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 49. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 52. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 52. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 52. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nPIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Reset Values on page = 51. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Reset Values on page = 51. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0,",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nBit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Reset Values on page = 51. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 51. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n0 = ADCS0. ADCON2, Reset Values on page = 51. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 52. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register. TRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 52. PORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 =",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nRB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 52. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 52. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nData Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Reset Values on page = 52. PORTE (4), Bit 7 = -. PORTE (4), Bit 6 = -. PORTE (4), Bit 5 = -. PORTE (4), Bit 4 = -. PORTE (4), Bit 3 = RE3 (3). PORTE (4), Bit 2 = RE2. PORTE (4), Bit 1 = RE1. PORTE (4), Bit 0 = RE0. PORTE (4), Reset Values on page = 52. TRISE (4), Bit 7 = IBF. TRISE (4), Bit 6 = OBF. TRISE (4), Bit 5 = IBOV. TRISE",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n(4), Bit 4 = PSPMODE. TRISE (4), Bit 3 = -. TRISE (4), Bit 2 = TRISE2. TRISE (4), Bit 1 = TRISE1. TRISE (4), Bit 0 = TRISE0. TRISE (4), Reset Values on page = 52. LATE (4), Bit 7 = -. LATE (4), Bit 6 = -. LATE (4), Bit 5 = -. LATE (4), Bit 4 = -. LATE (4), Bit 3 = -. LATE (4), Bit 2 = PORTE Data Latch Register. LATE (4), Bit 1 = PORTE Data Latch Register. LATE (4), Bit 0 = PORTE Data Latch Register. LATE (4), Reset Values on page = 52\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for A/D conversion.",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n3: RE3 port bit is available only as an input pin when the MCLRE Configuration bit is ' 0 '.\n4: These registers are not implemented on 28-pin devices.",
    "20.0 COMPARATOR MODULE\nThe analog comparator module contains two comparators  that  can  be  configured  in  a  variety  of ways.  The  inputs  can  be  selected  from  the  analog inputs multiplexed with pins RA0 through RA5, as well as  the  on-chip  voltage  reference  (see Section 21.0 'Comparator Voltage Reference Module' ). The digital outputs (normal or inverted) are available at the pin level and can also be read through the control register.\nThe CMCON  register (Register 20-1) selects the comparator input and output configuration. Block diagrams of the various comparator configurations are shown in Figure 20-1.",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nC2OUT, R-0 = C1OUT. C2OUT, R/W-0 = C2INV. C2OUT, R/W-0 = C1INV. C2OUT, R/W-0 = CIS. C2OUT, R/W-1 = CM2. C2OUT, R/W-1 = CM1. C2OUT, R/W-1 = CM0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nC2OUT : Comparator 2 Output bit\nWhen C2INV = 0 :\n1 = C2 VIN+ > C2 VIN-\n0 = C2 VIN+ < C2 VIN-\nWhen C2INV = 1 :\n1 = C2 VIN+ < C2 VIN-\n0 = C2 VIN+ > C2 VIN-",
    "bit 6\nC1OUT : Comparator 1 Output bit\nWhen C1INV = 0 :\n1 = C1 VIN+ > C1 VIN-\n0 = C1 VIN+ < C1 VIN-\nWhen C1INV = 1 :\n1 = C1 VIN+ < C1 VIN-\n0 = C1 VIN+ > C1 VIN-\nbit 5\nC2INV : Comparator 2 Output Inversion bit\n1 = C2 output inverted\n0 = C2 output not inverted\nbit 4\nC1INV : Comparator 1 Output Inversion bit\n1 = C1 output inverted\n0 = C1 output not inverted",
    "bit 3\nCIS : Comparator Input Switch bit\nWhen CM2:CM0 = 110 :\n1 = C1 VIN- connects to RA3/AN3/VREF+\nC2 VIN- connects to RA2/AN2/VREF-/CVREF\n0 = C1 VIN- connects to RA0/AN0\nC2 VIN- connects to RA1/AN1",
    "bit 2-0 CM2:CM0\n: Comparator Mode bits\nFigure 20-1 shows the Comparator modes and the CM2:CM0 bit settings.",
    "20.1 Comparator Configuration\nThere are eight modes of operation for the comparators,  shown  in  Figure 20-1.  Bits,  CM2:CM0  of  the CMCON register, are used to select these modes. The TRISA register controls the data direction of the comparator pins for each mode. If the Comparator mode is changed, the comparator output level may not be valid for the specified mode  change delay shown in Section 26.0 'Electrical Characteristics' .\nNote:, 1 = Comparator interrupts should be disabled during a Comparator mode change; otherwise, a false interrupt may occur.\nFIGURE 20-1:",
    "20.2 Comparator Operation\nA single comparator is shown in Figure 20-2, along with the  relationship  between  the  analog  input  levels  and the digital output. When the analog input at VIN+ is less than the analog input VIN-, the output of the comparator is a digital low level. When the analog input at VIN+ is greater  than  the  analog  input  VIN-,  the  output  of  the comparator is a digital high level. The shaded areas of the output of the comparator in Figure 20-2 represent the uncertainty, due to input offsets and response time.",
    "20.3 Comparator Reference\nDepending on the comparator operating mode, either an external or internal voltage reference may be used. The analog signal present at VIN- is compared to the signal at VIN+ and the digital output of the comparator is adjusted accordingly (Figure 20-2).\nFIGURE 20-2: SINGLE COMPARATOR",
    "20.3.1 EXTERNAL REFERENCE SIGNAL\nWhen  external voltage references are used, the comparator  module  can  be  configured  to  have  the comparators operate from the same  or different reference sources. However, threshold detector applications  may  require  the  same  reference.  The reference signal must be between VSS and VDD and can be applied to either pin of the comparator(s).",
    "20.3.2 INTERNAL REFERENCE SIGNAL\nThe comparator module also allows the selection of an internally generated voltage reference from the comparator voltage reference module. This module is described in more detail in Section 21.0 'Comparator Voltage Reference Module' .\nThe  internal  reference  is  only  available  in  the  mode where four inputs are multiplexed to two comparators (CM2:CM0 = 110 ).  In  this  mode,  the  internal  voltage reference is applied to the VIN+ pin of both comparators.",
    "20.4 Comparator Response Time\nResponse time is the minimum time, after selecting a new  reference  voltage  or  input  source,  before  the comparator output has a valid level. If the internal reference is changed, the maximum delay of the internal voltage reference must be considered when using the comparator outputs. Otherwise, the maximum delay of the  comparators  should  be  used  (see Section 26.0 'Electrical Characteristics' ).",
    "20.5 Comparator Outputs\nThe comparator outputs are read through the CMCON register.  These  bits  are  read-only.  The  comparator outputs may also be directly output to the RA4 and RA5 I/O pins. When enabled, multiplexors in the output path of the RA4 and RA5 pins will switch and the output of each  pin  will  be  the  unsynchronized  output  of  the comparator. The uncertainty of each of the comparators is related to the input offset voltage and the response time given in the specifications. Figure 20-3 shows the comparator output block diagram.\nThe TRISA bits will still function as an output enable/ disable for the RA4 and RA5 pins while in this mode.\nThe polarity of the comparator outputs can be changed using the C2INV and C1INV bits (CMCON<5:4>).\nNote 1: When reading the PORT register, all pins configured as analog inputs will read as a ' 0 '.  Pins  configured  as  digital  inputs  will convert an analog input according to the Schmitt Trigger input specification.\n2: Analog  levels  on  any  pin  defined  as  a digital input may cause the input buffer to consume more current than is specified.",
    "20.6 Comparator Interrupts\nThe comparator interrupt flag is set whenever there is a  change  in  the  output  value  of  either  comparator. Software  will  need  to  maintain  information  about  the status of the output bits, as read from CMCON<7:6>, to determine the actual change that occurred. The CMIF bit  (PIR2<6>)  is  the  Comparator  Interrupt  Flag.  The CMIF bit must be reset by clearing it. Since it is also possible  to  write  a  ' 1 ' to  this  register,  a  simulated interrupt may be initiated.",
    "20.7 Comparator Operation During Sleep\nBoth the CMIE  bit (PIE2<6>)  and  the PEIE  bit (INTCON<6>) must be set to enable the interrupt. In addition, the GIE bit (INTCON<7>) must also be set. If any of these bits are clear, the interrupt is not enabled, though  the  CMIF  bit  will  still  be  set  if  an  interrupt condition occurs.",
    "Note:\nIf a change in the CMCON  register (C1OUT or C2OUT) should occur when a read operation is being executed (start of the Q2 cycle), then the CMIF (PIR registers) interrupt flag may not get set.\nThe user, in the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  CMCON  will  end  the mismatch condition.\nb) Clear flag bit CMIF.\nA mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared.\nWhen a comparator is active and the device is placed in Sleep mode, the comparator remains active and the interrupt  is  functional  if  enabled.  This  interrupt  will wake-up the device from Sleep mode, when enabled. Each operational comparator will consume additional current, as shown in the comparator specifications. To minimize power consumption while in Sleep mode, turn off the comparators (CM2:CM0 = 111 ) before entering Sleep. If the device wakes up from Sleep, the contents of the CMCON register are not affected.",
    "20.8 Effects of a Reset\nA device Reset forces the CMCON register to its Reset state, causing the comparator modules to be turned off (CM2:CM0 = 111) . However,  the  input  pins  (RA0 through  RA3)  are  configured  as  analog  inputs  by default on device Reset. The I/O configuration for these pins is determined by the setting of the PCFG3:PCFG0 bits (ADCON1<3:0>).  Therefore,  device  current  is minimized  when  analog  inputs  are  present  at  Reset time.",
    "20.9 Analog Input Connection Considerations\nA  simplified  circuit  for  an  analog  input  is  shown  in Figure 20-4. Since the analog pins are connected to a digital output, they have reverse biased diodes to VDD and VSS. The analog input, therefore, must be between VSS and VDD. If the  input  voltage  deviates  from  this range by more than 0.6V in either direction, one of the diodes is forward biased and a latch-up condition may occur.  A  maximum  source  impedance  of  10 k \u03a9 is recommended  for  the  analog  sources.  Any  external component connected to an analog input pin, such as a  capacitor  or  a  Zener  diode,  should  have  very  little leakage current.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 51. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 51. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 =",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nTMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 52. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 =",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 52. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 52. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nRegister (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 52. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register. TRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 52\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are unused by the comparator module.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nNote 1: PORTA<7:6> and their direction and latch bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "21.0 COMPARATOR VOLTAGE REFERENCE MODULE\nThe comparator voltage reference is a 16-tap resistor ladder  network  that  provides  a  selectable  reference voltage. Although its primary purpose is to provide a reference for the analog comparators, it may also be used independently of them.\nA block diagram of the module is shown in Figure 21-1. The resistor ladder is segmented to provide two ranges of  CVREF  values  and  has  a  power-down  function  to conserve power when the reference is not being used. The module's supply reference can be provided from either device VDD/VSS or an external voltage reference.",
    "21.1 Configuring the Comparator Voltage Reference\nused is selected by the CVRR bit (CVRCON<5>). The primary difference between the ranges is the size of the steps selected by the CVREF selection bits (CVR3:CVR0), with one range offering finer resolution. The  equations  used  to  calculate  the  output  of  the comparator voltage reference are as follows:\nIf CVRR = 1 : CVREF = ((CVR3:CVR0)/24) x CVRSRC If CVRR = 0 :\nCVREF = (CVRSRC x 1/4) + (((CVR3:CVR0)/32) x CVRSRC)\nThe  comparator  reference  supply  voltage  can  come from either VDD and VSS, or the external VREF+ and VREF-  that  are  multiplexed  with  RA2  and  RA3.  The voltage source is selected by the CVRSS bit (CVRCON<4>).\nThe voltage reference module is controlled through the CVRCON  register  (Register 21-1).  The  comparator voltage reference provides two ranges of output voltage, each with 16 distinct levels. The range to be",
    "21.1 Configuring the Comparator Voltage Reference\nThe settling time of the comparator voltage reference must  be  considered  when  changing  the  CVREF output (see Table 26-3 in Section 26.0 'Electrical Characteristics' ).",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nCVREN, R/W-0 = CVROE (1). CVREN, R/W-0 = CVRR. CVREN, R/W-0 = CVRSS. CVREN, R/W-0 = CVR3. CVREN, R/W-0 = CVR2. CVREN, R/W-0 = CVR1. CVREN, R/W-0 = CVR0. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nCVREN: Comparator Voltage Reference Enable bit\n1 = CVREF circuit powered on\n0 = CVREF circuit powered down\nbit 6\nCVROE: Comparator VREF Output Enable bit (1)\n1 = CVREF voltage level is also output on the RA2/AN2/VREF-/CVREF pin\n0 = CVREF voltage is disconnected from the RA2/AN2/VREF-/CVREF pin\nbit 5\nCVRR: Comparator VREF Range Selection bit",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\n1 = 0 to 0.667 CVRSRC, with CVRSRC/24 step size (low range)\n0 = 0.25 CVRSRC to 0.75 CVRSRC, with CVRSRC/32 step size (high range)\nbit 4\nCVRSS: Comparator VREF Source Selection bit\n1 = Comparator reference source, CVRSRC = (VREF+) - (VREF-)\n0 = Comparator reference source, CVRSRC = VDD - VSS\nbit 3-0\nCVR3:CVR0: Comparator VREF Value Selection bits (0 \u2264 (CVR3:CVR0) \u2264 15)\nWhen CVRR = 1 :\nCVREF = ((CVR3:CVR0)/24)   (CVRSRC) \u2022\nWhen CVRR = 0 :\nCVREF = (CVRSRC/4) + ((CVR3:CVR0)/32)   (CVRSRC) \u2022\nNote 1: CVROE overrides the TRISA<2> bit setting.",
    "PIC18F2525/2620/4525/4620\nFIGURE 21-1: COMPARATOR VOLTAGE REFERENCE BLOCK DIAGRAM",
    "21.4 Effects of a Reset\nThe full range of voltage reference cannot be realized due to the construction of the module. The transistors on the top and bottom of the resistor ladder network (Figure 21-1) keep CVREF from approaching the reference source rails. The voltage reference is derived from the reference source; therefore, the CVREF output changes  with  fluctuations  in  that  source.  The  tested absolute  accuracy  of  the  voltage  reference  can  be found in Section 26.0 'Electrical Characteristics' .",
    "21.3 Operation During Sleep\nWhen  the  device  wakes  up  from  Sleep  through  an interrupt or a Watchdog Timer time-out, the contents of the  CVRCON  register  are  not  affected.  To  minimize current consumption  in Sleep mode,  the  voltage reference should be disabled.\nA  device  Reset  disables  the  voltage  reference  by clearing  bit,  CVREN  (CVRCON<7>).  This  Reset  also disconnects the reference from the RA2 pin by clearing bit, CVROE (CVRCON<6>) and selects the high-voltage range by clearing bit, CVRR (CVRCON<5>). The CVR value select bits are also cleared.",
    "21.5 Connection Considerations\nThe voltage reference module operates independently of the comparator module. The output of the reference generator  may  be  connected  to  the  RA2  pin  if  the CVROE  bit  is  set.  Enabling  the  voltage  reference output onto RA2 when it is configured as a digital input will increase current consumption. Connecting RA2 as a digital output with CVRSS enabled will also increase current consumption.\nThe RA2 pin can be used as a simple D/A output with limited drive capability. Due to the limited current drive capability, a  buffer  must  be  used  on  the  voltage reference  output  for  external  connections  to  VREF. Figure 21-2 shows an example buffering technique.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nCVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 51. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 51. TRISA, Bit 7 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 6 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 5 = TRISA7 (1)",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nTRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 4 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 3 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 2 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 1 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 0 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Reset Values on page = 52\nLegend: Shaded cells are not used with the comparator voltage reference.\nNote 1: PORTA pins are enabled based on oscillator configuration.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "22.0 HIGH/LOW-VOLTAGE DETECT (HLVD)\nPIC18F2525/2620/4525/4620 devices have a High/Low-Voltage  Detect  module  (HLVD).  This  is  a programmable  circuit  that  allows  the  user  to  specify both  a  device  voltage  trip  point  and  the  direction  of change from that point. If the device experiences an excursion past the trip point in that direction, an interrupt flag is set. If the interrupt is enabled, the program execution  will  branch  to  the  interrupt  vector  address and the software can then respond to the interrupt.\nThe High/Low-Voltage Detect Control register (Register 22-1) completely controls the operation of the HLVD module. This allows the circuitry to be 'turned off' by the user under software control, which minimizes the current consumption for the device.\nThe block diagram for the HLVD module is shown in Figure 22-1.",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nVDIRMAG, U-0 = -. VDIRMAG, R-0 = IRVST. VDIRMAG, R/W-0 = HLVDEN. VDIRMAG, R/W-0 = HLVDL3 (1). VDIRMAG, R/W-1 = HLVDL2 (1). VDIRMAG, R/W-0 = HLVDL1 (1). VDIRMAG, R/W-1 = HLVDL0 (1). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nVDIRMAG: Voltage Direction Magnitude Select bit\n1 = Event occurs when voltage equals or exceeds trip point (HLVDL3:HLDVL0)\n0 = Event occurs when voltage equals or falls below trip point (HLVDL3:HLVDL0)\nbit 6\nUnimplemented: Read as ' 0 '\nbit 5\nIRVST: Internal Reference Voltage Stable Flag bit",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\n1 = Indicates that the voltage detect logic will generate the interrupt flag at the specified voltage range 0 = Indicates that the voltage detect logic will not generate the interrupt flag at the specified voltage\nrange and the HLVD interrupt should not be enabled\nbit 4\nHLVDEN: High/Low-Voltage Detect Power Enable bit\n1 = HLVD enabled\n0 = HLVD disabled\nbit 3-0\nHLVDL3:HLVDL0: Voltage Detection Limit bits (1)\n1111 1110 = Maximum setting\n= External analog input is used (input comes from the HLVDIN pin)\n.\n.\n.\n0000 = Minimum setting\nNote 1: See Table 26-4 in Section 26.0 'Electrical Characteristics' for the specifications.\nThe  module  is  enabled  by  setting  the  HLVDEN  bit. Each  time  that  the  HLVD  module  is  enabled,  the circuitry requires some time to stabilize. The IRVST bit is a read-only bit and is used to indicate when the circuit is  stable.  The module can only generate an interrupt after the circuit is stable and IRVST is set.",
    "REGISTER 22-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nThe VDIRMAG bit determines the overall operation of the module. When VDIRMAG is cleared, the module monitors for drops in VDD below a predetermined set point. When the bit is set, the module monitors for rises in VDD above the set point.",
    "22.1 Operation\nWhen the HLVD module is enabled, a comparator uses an  internally  generated  reference  voltage  as  the  set point.  The  set  point  is  compared  with  the  trip  point, where each node in the resistor divider represents a trip point voltage. The 'trip point' voltage is the voltage level at which the device detects a high or low-voltage event, depending on the configuration of the module. When the supply voltage is equal to the trip point, the voltage tapped off of the resistor array is equal to the internal  reference  voltage  generated  by  the  voltage reference module. The comparator then generates an interrupt signal by setting the HLVDIF bit.\nThe trip point voltage is software programmable to any one of 16 values. The trip point is selected by programming the HLVDL3:HLVDL0 bits (HLVDCON<3:0>).",
    "22.1 Operation\nThe HLVD module has an additional feature that allows the user to supply the trip voltage to the module from an external  source.  This  mode  is  enabled  when  bits HLVDL3:HLVDL0 are set to ' 1111 '.  In  this  state,  the comparator input is multiplexed from the external input pin,  HLVDIN.  This  gives  users  flexibility  because  it allows them to configure the High/Low-Voltage Detect interrupt to occur at any voltage in the valid operating range.\nFIGURE 22-1: HLVD MODULE BLOCK DIAGRAM (WITH EXTERNAL INPUT)",
    "22.2 HLVD Setup\nThe following  steps  are  needed  to  set  up  the  HLVD module:\n1. Disable the module by clearing the HLVDEN bit (HLVDCON<4>).\n2. Write the value to the HLVDL3:HLVDL0 bits that selects the desired HLVD trip point.\n3. Set  the  VDIRMAG  bit  to  detect  high  voltage (VDIRMAG = 1 ) or low voltage (VDIRMAG = 0 ).\n4. Enable the HLVD module by setting the HLVDEN bit.\n5. Clear the HLVD interrupt flag (PIR2<2>), which may have been set from a previous interrupt.\n6. Enable  the  HLVD  interrupt  if  interrupts  are desired  by  setting  the  HLVDIE  and  GIE  bits (PIE<2> and INTCON<7>). An interrupt will not be generated until the IRVST bit is set.",
    "22.3 Current Consumption\nWhen the  module  is  enabled,  the  HLVD  comparator and voltage divider are enabled and will consume static current. The total current consumption, when enabled, is specified in electrical specification parameter D022B.\nDepending on the application, the HLVD module does not need to be operating constantly. To decrease the current  requirements,  the  HLVD  circuitry  may  only need to be enabled for short periods where the voltage is  checked. After doing the check, the HLVD module may be disabled.",
    "22.4 HLVD Start-up Time\nThe  internal  reference  voltage  of  the  HLVD  module, specified  in  electrical  specification  parameter  D420, may be  used  by  other  internal  circuitry,  such  as  the Programmable Brown-out Reset. If the HLVD or other circuits  using  the  voltage  reference  are  disabled  to lower the device's current consumption, the reference voltage circuit will require time to become stable before a low or high-voltage condition can be reliably detected. This start-up time, TIRVST, is an interval that is independent of device clock speed. It is specified in electrical specification parameter 36.\nThe HLVD interrupt flag is not enabled until TIRVST has expired and a stable reference voltage is reached. For this reason, brief excursions beyond the set point may not be detected during this interval. Refer to Figure 22-2 or Figure 22-3.",
    "PIC18F2525/2620/4525/4620\nFIGURE 22-3: HIGH-VOLTAGE DETECT OPERATION (VDIRMAG =  ) 1",
    "22.5 Applications\nIn many applications, the ability to detect a drop below or  rise  above  a  particular  threshold  is  desirable.  For example,  the  HLVD  module  could  be  periodically enabled to detect a Universal Serial Bus (USB) attach or detach. This assumes the device is powered by a lower voltage source than the USB when detached. An attach  would  indicate  a  high-voltage  detect  from,  for example,  3.3V  to  5V  (the  voltage  on  USB)  and  vice versa for a detach. This feature could save a design a few extra components and an attach signal (input pin).\nFIGURE 22-4: TYPICAL LOW-VOLTAGE DETECT APPLICATION\nFor general battery applications, Figure 22-4 shows a possible voltage curve. Over time, the device voltage decreases. When the device voltage reaches voltage VA, the HLVD logic generates an interrupt at time TA. The  interrupt  could  cause  the  execution  of  an  ISR, which would allow the application to perform 'housekeeping  tasks'  and  perform  a  controlled  shutdown before  the  device  voltage  exits  the  valid  operating range at TB. The HLVD, thus, would give the application  a  time  window,  represented  by  the  difference between TA and TB, to safely exit.",
    "22.7 Effects of a Reset\nWhen enabled, the HLVD circuitry continues to operate during  Sleep.  If  the  device  voltage  crosses  the  trip point,  the  HLVDIF  bit  will  be  set  and  the  device  will wake-up  from  Sleep.  Device  execution  will  continue from  the  interrupt  vector  address  if  interrupts  have been globally enabled.\nA device Reset forces all registers to their Reset state. This forces the HLVD module to be turned off.",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nHLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Reset Values on Page = 50. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 49. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 =",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\n-. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 52. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 52. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2,",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nBit 0 = CCP2IP. IPR2, Reset Values on Page = 52\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are unused by the HLVD module.",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "23.0 SPECIAL FEATURES OF THE CPU\nPIC18F2525/2620/4525/4620 devices include several features intended to maximize reliability and minimize cost through elimination of external components. These are:\n\u00b7 Oscillator Selection\n\u00b7 Resets:\n-Power-on Reset (POR)\n-Power-up Timer (PWRT)\n-Oscillator Start-up Timer (OST)\n-Brown-out Reset (BOR)\n\u00b7 Interrupts\n\u00b7 Watchdog Timer (WDT)\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Two-Speed Start-up\n\u00b7 Code Protection\n\u00b7 ID Locations\n\u00b7 In-Circuit Serial Programming\nThe  oscillator  can  be  configured  for  the  application depending on frequency, power, accuracy and cost. All of  the  options  are  discussed  in  detail  in Section 2.0 'Oscillator Configurations' .\nA complete discussion of device Resets and interrupts is available in previous sections of this data sheet.\nIn  addition  to  their  Power-up  and  Oscillator  Start-up Timers provided for Resets,  PIC18F2525/2620/4525/ 4620 devices have a Watchdog Timer, which is either permanently  enabled  via  the  Configuration  bits  or software controlled (if configured as disabled).",
    "23.0 SPECIAL FEATURES OF THE CPU\nThe inclusion of an internal RC oscillator also provides the  additional  benefits  of  a  Fail-Safe  Clock  Monitor (FSCM) and Two-Speed Start-up. FSCM provides for background  monitoring  of  the  peripheral  clock  and automatic switchover in the event of its failure.  TwoSpeed Start-up  enables  code  to  be  executed  almost immediately on start-up, while the primary clock source completes its start-up delays.\nAll  of  these  features  are  enabled  and  configured  by setting the appropriate Configuration register bits.",
    "23.1 Configuration Bits\nThe Configuration bits  can  be  programmed  (read  as ' 0 ') or left unprogrammed (read as ' 1 ') to select various device configurations. These bits are mapped starting at program memory location 300000h.\nThe user will note that address 300000h is beyond the user program memory space. In fact, it  belongs  to the configuration memory space (300000h-3FFFFFh), which can only be accessed using table reads and table writes.\nProgramming the Configuration registers is done in a manner similar to programming the Flash memory. The WR bit in the EECON1 register starts a self-timed write to the Configuration register. In normal operation mode, a TBLWT instruction, with the TBLPTR pointing to the Configuration  register,  sets  up  the  address  and  the data for the Configuration register write. Setting the WR bit starts a long write to the Configuration register. The Configuration registers are written a byte at a time. To write or erase a configuration cell, a TBLWT instruction can write a ' 1 ' or a ' 0 ' into the cell. For additional details on Flash programming, refer to Section 7.5 'Writing to Flash Program Memory' .",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n300001h, File Name = CONFIG1H. 300001h, Bit 7 = IESO. 300001h, Bit 6 = FCMEN. 300001h, Bit 5 = -. 300001h, Bit 4 = -. 300001h, Bit 3 = FOSC3. 300001h, Bit 2 = FOSC2. 300001h, Bit 1 = FOSC1. 300001h, Bit 0 = FOSC0. 300001h, Default/ Unprogrammed Value = 00-- 0111. 300001h, Default/ Unprogrammed Value = . 300002h, File Name = CONFIG2L. 300002h, Bit 7 = -. 300002h, Bit 6 = -. 300002h, Bit 5 = -. 300002h, Bit 4 = BORV1. 300002h, Bit 3 = BORV0. 300002h, Bit 2 = BOREN1. 300002h, Bit 1 = BOREN0. 300002h, Bit 0 = PWRTEN. 300002h, Default/",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\nUnprogrammed Value = ---1 1111. 300002h, Default/ Unprogrammed Value = . 300003h, File Name = CONFIG2H. 300003h, Bit 7 = -. 300003h, Bit 6 = -. 300003h, Bit 5 = -. 300003h, Bit 4 = WDTPS3. 300003h, Bit 3 = WDTPS2. 300003h, Bit 2 = WDTPS1. 300003h, Bit 1 = WDTPS0. 300003h, Bit 0 = WDTEN. 300003h, Default/ Unprogrammed Value = ---1 1111. 300003h, Default/ Unprogrammed Value = . 300005h, File Name = CONFIG3H. 300005h, Bit 7 = MCLRE. 300005h, Bit 6 = -. 300005h, Bit 5 = -. 300005h, Bit 4 = -. 300005h, Bit 3 = -. 300005h, Bit 2 =",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\nLPT1OSC. 300005h, Bit 1 = PBADEN. 300005h, Bit 0 = CCP2MX. 300005h, Default/ Unprogrammed Value = 1--- -011. 300005h, Default/ Unprogrammed Value = . 300006h, File Name = CONFIG4L. 300006h, Bit 7 = DEBUG. 300006h, Bit 6 = XINST. 300006h, Bit 5 = -. 300006h, Bit 4 = -. 300006h, Bit 3 = -. 300006h, Bit 2 = LVP. 300006h, Bit 1 = -. 300006h, Bit 0 = STVREN. 300006h, Default/ Unprogrammed Value = 10-- -1-1. 300006h, Default/ Unprogrammed Value = . 300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1). 300008h, Bit 2 = CP2. 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300008h, Default/ Unprogrammed Value = ---- 1111. 300008h, Default/ Unprogrammed Value = . 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 300009h, Default/ Unprogrammed Value = 11--. 300009h, Default/ Unprogrammed Value = . 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit 4 = -. 30000Ah, Bit 3 = WRT3 (1). 30000Ah, Bit 2 = WRT2. 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Ah, Default/ Unprogrammed Value = ---- 1111. 30000Ah, Default/ Unprogrammed Value = . 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Bh, Default/ Unprogrammed Value = 111- ----. 30000Bh, Default/ Unprogrammed Value = . 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1). 30000Ch, Bit 2 = EBTR2. 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Ch, Default/ Unprogrammed Value = ---- 1111. 30000Ch, Default/ Unprogrammed Value = . 30000Dh, File Name = CONFIG7H. 30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -. 30000Dh, Default/ Unprogrammed Value = -1--. 30000Dh, Default/ Unprogrammed Value = . 3FFFFEh, File Name = DEVID1. 3FFFFEh, Bit",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\n7 = DEV2. 3FFFFEh, Bit 6 = DEV1. 3FFFFEh, Bit 5 = DEV0. 3FFFFEh, Bit 4 = REV4. 3FFFFEh, Bit 3 = REV3. 3FFFFEh, Bit 2 = REV2. 3FFFFEh, Bit 1 = REV1. 3FFFFEh, Bit 0 = REV0. 3FFFFEh, Default/ Unprogrammed Value = xxxx. 3FFFFEh, Default/ Unprogrammed Value = . 3FFFFFh, File Name = DEVID2. 3FFFFFh, Bit 7 = DEV10. 3FFFFFh, Bit 6 = DEV9. 3FFFFFh, Bit 5 = DEV8. 3FFFFFh, Bit 4 = DEV7. 3FFFFFh, Bit 3 = DEV6. 3FFFFFh, Bit 2 = DEV5. 3FFFFFh, Bit 1 = DEV4. 3FFFFFh, Bit 0 = DEV3. 3FFFFFh, Default/ Unprogrammed Value = 0000. 3FFFFFh,",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDs\nDefault/ Unprogrammed Value = \nLegend: x = unknown, u = unchanged, -= unimplemented. Shaded cells are unimplemented, read as ' 0 '.\nNote\n1: Unimplemented in PIC18FX525 devices; maintain this bit set.\n2: See Register 23-12 and Register 23-13 for DEVID1 values. DEVID registers are read-only and cannot be programmed by the user.",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nIESO, R/P-0 = FCMEN. IESO, U-0 = -. IESO, U-0 = -. IESO, R/P-0 = FOSC3. IESO, R/P-1 = FOSC2. IESO, R/P-1 = FOSC1. IESO, R/P-1 = FOSC0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7\nIESO: Internal/External Oscillator Switchover bit\n1 = Oscillator Switchover mode enabled\n0 = Oscillator Switchover mode disabled",
    "bit 6\nFCMEN: Fail-Safe Clock Monitor Enable bit\n1 = Fail-Safe Clock Monitor enabled\n0 = Fail-Safe Clock Monitor disabled\nbit 5-4 Unimplemented: Read as ' 0 '",
    "bit 3-0 FOSC3:FOSC0: Oscillator Selection bits\n11xx = External RC oscillator, CLKO function on RA6\n101x = External RC oscillator, CLKO function on RA6\n1001 = Internal oscillator block, CLKO function on RA6, port function on RA7\n1000 = Internal oscillator block, port function on RA6 and RA7\n0111 = External RC oscillator, port function on RA6\n0110 = HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)\n0101 = EC oscillator, port function on RA6\n0100 = EC oscillator, CLKO function on RA6\n0011 = External RC oscillator, CLKO function on RA6\n0010 = HS oscillator\n0001 = XT oscillator\n0000 = LP oscillator",
    "REGISTER 23-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\n-, U-0 = -. -, U-0 = -. -, R/P-1 = BORV1 (1). -, R/P-1 = BORV0 (1). -, R/P-1 = BOREN1 (2). -, R/P-1 = BOREN0 (2). -, R/P-1 = PWRTEN (2). bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit P =, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-3 BORV1:BORV0: Brown-out Reset Voltage bits (1)\n11 = Minimum setting\n.\n.\n.\n00 = Maximum setting",
    "bit 2-1 BOREN1:BOREN0: Brown-out Reset Enable bits (2)\n11 = Brown-out Reset enabled in hardware only (SBOREN is disabled)\n10 = Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)\n01 = Brown-out Reset enabled and controlled by software (SBOREN is enabled)\n00 = Brown-out Reset disabled in hardware and software\nbit 0\nPWRTEN: Power-up Timer Enable bit (2)\n1 = PWRT disabled\n0 = PWRT enabled\nNote 1: See Section 26.1 'DC Characteristics: Supply Voltage' for specifications.\n2: The Power-up Timer is decoupled from Brown-out Reset, allowing these features to be independently controlled.",
    "REGISTER 23-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = R/P-1. U-0, 4 = R/P-1. U-0, 5 = R/P-1. U-0, 6 = R/P-1. U-0, 7 = R/P-1. -, 1 = -. -, 2 = -. -, 3 = WDTPS3. -, 4 = WDTPS2. -, 5 = WDTPS1. -, 6 = WDTPS0. -, 7 = WDTEN. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-1 WDTPS3:WDTPS0: Watchdog Timer Postscale Select bits\n1111 = 1:32,768\n1110 = 1:16,384\n1101 = 1:8,192\n1100 = 1:4,096\n1011 = 1:2,048\n1010 = 1:1,024\n1001 = 1:512\n1000 = 1:256\n0111 = 1:128\n0110 = 1:64\n0101 = 1:32\n0100 = 1:16\n0011 = 1:8\n0010 = 1:4\n0001 = 1:2\n0000 = 1:1",
    "bit 0\nWDTEN: Watchdog Timer Enable bit\n1 = WDT enabled\n0 = WDT disabled (control is placed on the SWDTEN bit)",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nMCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, U-0 = -. MCLRE, R/P-0 = LPT1OSC. MCLRE, R/P-1 = PBADEN. MCLRE, R/P-1 = CCP2MX. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nMCLRE:\nMCLR Pin Enable bit",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\n1 = MCLR pin enabled; RE3 input pin disabled\n0 = RE3 input pin enabled; MCLR disabled\nbit 6-3\nUnimplemented: Read as ' 0 '\nbit 2\nLPT1OSC: Low-Power Timer1 Oscillator Enable bit\n1 = Timer1 configured for low-power operation\n0 = Timer1 configured for higher power operation\nbit 1\nPBADEN: PORTB A/D Enable bit\n(Affects ADCON1 Reset state. ADCON1 controls PORTB<4:0> pin configuration.)\n1 = PORTB<4:0> pins are configured as analog input channels on Reset\n0 = PORTB<4:0> pins are configured as digital I/O on Reset",
    "bit 0 CCP2MX: CCP2 MUX bit\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RB3",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nR/P-1, 1 = R/P-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = R/P-1. R/P-1, 6 = U-0. R/P-1, 7 = R/P-1. DEBUG, 1 = XINST. DEBUG, 2 = -. DEBUG, 3 = -. DEBUG, 4 = -. DEBUG, 5 = LVP. DEBUG, 6 = -. DEBUG, 7 = STVREN. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\n0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nDEBUG: Background Debugger Enable bit\n1 = Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins\n0 = Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug\nbit 6\nXINST: Extended Instruction Set Enable bit\n1 = Instruction set extension and Indexed Addressing mode enabled\n0 = Instruction set extension and Indexed Addressing mode disabled (Legacy mode)\nbit 5-3 Unimplemented: Read as ' 0 '\nbit 2\nLVP: Single-Supply ICSP\u2122 Enable bit\n1 = Single-Supply ICSP enabled\n0 = Single-Supply ICSP disabled\nbit 1 Unimplemented: Read as ' 0 '\nbit 0\nSTVREN: Stack Full/Underflow Reset Enable bit\n1 = Stack full/underflow will cause Reset",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\n0 = Stack full/underflow will not cause Reset",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/C-1 = CP3 (1). -, R/C-1 = CP2. -, R/C-1 = CP1. -, R/C-1 = CP0. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-4 Unimplemented: Read as ' 0 '\nbit 3\nCP3: Code Protection bit (1)\n1 = Block 3 (006000-007FFFh) not code-protected\n0 = Block 3 (006000-007FFFh) code-protected\nbit 2\nCP2: Code Protection bit\n1 = Block 2 (004000-005FFFh) not code-protected\n0 = Block 2 (004000-005FFFh) code-protected\nbit 1\nCP1: Code Protection bit\n1 = Block 1 (002000-003FFFh) not code-protected\n0 = Block 1 (002000-003FFFh) code-protected\nbit 0\nCP0: Code Protection bit\n1 = Block 0 (000800-001FFFh) not code-protected\n0 = Block 0 (000800-001FFFh) code-protected\nNote 1: Unimplemented in PIC18FX525 devices; maintain this bit set.",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nR/C-1, 1 = R/C-1. R/C-1, 2 = U-0. R/C-1, 3 = U-0. R/C-1, 4 = U-0. R/C-1, 5 = U-0. R/C-1, 6 = U-0. R/C-1, 7 = U-0. CPD, 1 = CPB. CPD, 2 = -. CPD, 3 = -. CPD, 4 = -. CPD, 5 = -. CPD, 6 = -. CPD, 7 = -. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nCPD: Data EEPROM Code Protection bit\n1 = Data EEPROM not code-protected\n0 = Data EEPROM code-protected\nbit 6\nCPB: Boot Block Code Protection bit\n1 = Boot block (000000-0007FFh) not code-protected\n0 = Boot block (000000-0007FFh) code-protected\nbit 5-0\nUnimplemented: Read as ' 0 '",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nNote 1: Unimplemented in PIC18FX525 devices; maintain this bit set.\n\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/C-1 = WRT3 (1). -, R/C-1 = WRT2. -, R/C-1 = WRT1. -, R/C-1 = WRT0. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nbit 7-4, 1 = Unimplemented: Read as ' 0 '. bit 3, 1 = WRT3: Write Protection bit (1) 1 = Block 3 (006000-007FFFh) not write-protected 0 = Block 3 (006000-007FFFh) write-protected. bit 2, 1 = WRT2: Write Protection bit 1 = Block 2 (004000-005FFFh) not write-protected 0 = Block 2 (004000-005FFFh) write-protected. bit 1, 1 = WRT1: Write Protection bit 1 = Block 1 (002000-003FFFh) not write-protected 0 = Block 1 (002000-003FFFh) write-protected. bit 0, 1 = WRT0: Write Protection bit 1 = Block 0 (000800-001FFFh) not write-protected 0 = Block 0 (000800-001FFFh) write-protected",
    "REGISTER 23-9: CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nR/C-1, 1 = R/C-1. R/C-1, 2 = R/C-1. R/C-1, 3 = U-0. R/C-1, 4 = U-0. R/C-1, 5 = U-0. R/C-1, 6 = U-0. R/C-1, 7 = U-0. WRTD, 1 = WRTB. WRTD, 2 = WRTC (1). WRTD, 3 = -. WRTD, 4 = -. WRTD, 5 = -. WRTD, 6 = -. WRTD, 7 = -. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "REGISTER 23-9: CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nWRTD: Data EEPROM Write Protection bit\n1 = Data EEPROM not write-protected\n0 = Data EEPROM write-protected\nbit 6\nWRTB: Boot Block Write Protection bit\n1 = Boot block (000000-0007FFh) not write-protected\n0 = Boot block (000000-0007FFh) write-protected\nbit 5\nWRTC: Configuration Register Write Protection bit (1)\n1 = Configuration registers (300000-3000FFh) not write-protected\n0 = Configuration registers (300000-3000FFh) write-protected\nbit 4-0\nUnimplemented: Read as ' 0 '\nNote 1: This bit is read-only in normal execution mode; it can be written only in Program mode.",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nNote 1: Unimplemented in PIC18FX525 devices; maintain this bit set.\n\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = EBTR3 (1). -, 5 = EBTR2. -, 6 = EBTR1. -, 7 = EBTR0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nbit 7-4, 1 = Unimplemented: Read as ' 0 '. bit 3, 1 = EBTR3: Table Read Protection bit (1) 1 = Block 3 (006000-007FFFh) not protected from table reads executed in other blocks 0 = Block 3 (006000-007FFFh) protected from table reads executed in other blocks. bit 2, 1 = EBTR2: Table Read Protection bit 1 = Block 2 (004000-005FFFh) not protected from table reads executed in other blocks 0 = Block 2 (004000-005FFFh) protected from table reads executed in other blocks. bit 1, 1 = EBTR1: Table Read Protection bit 1 = Block 1 (002000-003FFFh) not protected from table reads executed in other blocks 0 = Block 1 (002000-003FFFh) protected from table reads executed in other blocks. bit 0, 1 = EBTR0: Table Read Protection bit 1 = Block 0",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\n(000800-001FFFh) not protected from table reads executed in other blocks 0 = Block 0 (000800-001FFFh) protected from table reads executed in other blocks",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nU-0, 1 = R/C-1. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = U-0. -, 1 = EBTRB. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = -. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nUnimplemented: Read as ' 0 '\nbit 6",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nEBTRB: Boot Block Table Read Protection bit\n- 1 = Boot block (000000-0007FFh) not protected from table reads executed in other blocks\n0 = Boot block (000000-0007FFh) protected from table reads executed in other blocks\nbit 5-0\nUnimplemented: Read as ' 0 '",
    "REGISTER 23-12: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F2525/2620/4525/4620\nDEV2, R = DEV1. DEV2, R = DEV0. DEV2, R = REV4. DEV2, R = REV3. DEV2, R = REV2. DEV2, R = REV1. DEV2, R = REV0. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-5 DEV2:DEV0: Device ID bits\n000 = PIC18F4620\n010 = PIC18F4525\n100 = PIC18F2620\n110 = PIC18F2525\nbit 4-0\nREV4:REV0: Revision ID bits\nThese bits are used to indicate the device revision.",
    "REGISTER 23-13: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F2525/2620/4525/4620\nDEV10 (1), R = DEV9 (1). DEV10 (1), R = DEV8 (1). DEV10 (1), R = DEV7 (1). DEV10 (1), R = DEV6 (1). DEV10 (1), R = DEV5 (1). DEV10 (1), R = DEV4 (1). DEV10 (1), R = DEV3 (1). bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 7. bit 7, R = bit 0\nLegend:, 1 = Legend:. R = Read-only bit P =, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-0 DEV10:DEV3: Device ID bits (1)\nThese bits are used with the DEV2:DEV0 bits in Device ID Register 1 to identify the part number. 0000 1100 = PIC18F2525/2620/4525/4620 devices\nNote 1: These values for DEV10:DEV3 may be shared with other devices. The specific device is always identified by using the entire DEV10:DEV0 bit sequence.",
    "23.2 Watchdog Timer (WDT)\nFor PIC18F2525/2620/4525/4620 devices, the WDT is driven  by  the  INTRC  source.  When  the  WDT  is enabled, the clock source is also enabled. The nominal WDT period is 4 ms and has the same stability as the INTRC oscillator.\nThe 4 ms period of the WDT is multiplied by a 16-bit postscaler. Any  output  of  the  WDT  postscaler  is selected by a multiplexer, controlled by bits in Configuration Register 2H. Available periods range from 4 ms to  131.072  seconds  (2.18  minutes).  The  WDT  and postscaler are cleared when any of the following events occur: a SLEEP or CLRWDT instruction is executed, the IRCF  bits  (OSCCON<6:4>)  are  changed  or  a  clock failure has occurred.",
    "23.2 Watchdog Timer (WDT)\nNote 1: The CLRWDT and SLEEP instructions clear  the  WDT  and  postscaler  counts when executed.\n2: Changing  the  setting  of  the  IRCF  bits (OSCCON<6:4>)  clears  the  WDT  and postscaler counts.\n3: When a CLRWDT instruction is executed, the postscaler count will be cleared.",
    "23.2.1 CONTROL REGISTER\nRegister 23-14 shows the WDTCON register. This is a readable and writable register which contains a control bit  that  allows  software  to  override  the  WDT  enable Configuration bit, but only if the Configuration bit has disabled the WDT.",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = SWDTEN (1). bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-1 Unimplemented : Read as ' 0 '\nbit 0\nSWDTEN: Software Controlled Watchdog Timer Enable bit (1)\n1 = Watchdog Timer is on\n0 = Watchdog Timer is off\nNote 1: This bit has no effect if the Configuration bit, WDTEN, is enabled.",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nRCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 50. WDTCON, Bit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Reset Values on page = 50\nLegend:\n- - = unimplemented, read as ' 0 '. Shaded cells are not used by the Watchdog Timer.",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nNote 1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .",
    "23.3 Two-Speed Start-up\nThe Two-Speed Start-up feature helps to minimize the latency period from oscillator start-up to code execution by  allowing  the  microcontroller  to  use  the  INTOSC oscillator  as  a  clock  source  until  the  primary  clock source is available. It is enabled by setting the IESO Configuration bit.\nTwo-Speed  Start-up  should  be  enabled  only  if  the primary  oscillator  mode  is  LP,  XT,  HS  or  HSPLL (Crystal-Based modes). Other sources do not require an OST start-up delay; for these, Two-Speed Start-up should be disabled.\nWhen enabled, Resets and wake-ups from Sleep mode cause  the  device  to  configure  itself  to  run  from  the internal oscillator block as the clock source, following the time-out of the Power-up Timer after a Power-on Reset is enabled. This allows almost immediate code execution  while  the  primary  oscillator  starts  and  the OST is running. Once the OST times out, the device automatically switches to PRI_RUN mode.",
    "23.3 Two-Speed Start-up\nIn all other power-managed modes, Two-Speed Startup  is  not  used.  The  device  will  be  clocked  by  the currently selected clock source until the primary clock source becomes available. The setting of the IESO bit is ignored.",
    "23.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nWhile using the INTOSC oscillator in Two-Speed Startup, the device still obeys the normal command sequences for entering power-managed modes, including multiple SLEEP instructions (refer to Section 3.1.4 'Multiple Sleep Commands' ). In practice,  this  means  that  user  code  can  change  the SCS1:SCS0 bit  settings  or  issue SLEEP instructions before the OST times out. This would allow an application to briefly wake-up, perform routine 'housekeeping' tasks and return to Sleep before the device starts to operate from the primary oscillator.\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits,  IRCF2:IRCF0, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF2:IRCF0 bits prior to entering Sleep mode.",
    "23.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nUser code can also check if the primary clock source is currently providing the device clocking by checking the status of the OSTS bit (OSCCON<3>). If the bit is set, the primary oscillator is providing the clock. Otherwise, the internal oscillator block is providing the clock during wake-up from Reset or Sleep mode.",
    "23.4 Fail-Safe Clock Monitor\nThe Fail-Safe Clock Monitor (FSCM)  allows the microcontroller to continue operation in the event of an external oscillator failure by automatically switching the device clock to the internal oscillator block. The FSCM function is enabled by setting the FCMEN Configuration bit.\nWhen FSCM is enabled, the INTRC oscillator runs at all times to monitor clocks to peripherals and provide a backup  clock  in  the  event  of  a  clock  failure.  Clock monitoring (shown in Figure 23-3) is accomplished by creating  a  sample  clock  signal,  which  is  the  INTRC output divided by 64. This allows ample time between FSCM sample  clocks  for  a  peripheral  clock  edge  to occur.  The  peripheral  device  clock  and  the  sample clock are presented as inputs to the Clock Monitor latch (CM). The CM is set on the falling edge of the device clock  source,  but  cleared  on  the  rising  edge  of  the sample clock.",
    "FIGURE 23-3: FSCM BLOCK DIAGRAM\nClock  failure  is  tested  for  on  the  falling  edge  of  the sample  clock.  If  a  sample  clock  falling  edge  occurs while CM is still set, a clock failure has been detected (Figure 23-4). This causes the following:\n\u00b7 the FSCM generates an oscillator fail interrupt by setting bit, OSCFIF (PIR2<7>);\n\u00b7 the device clock source is switched to the internal oscillator block (OSCCON is not updated to show the current clock source - this is the fail-safe condition); and\n\u00b7 the WDT is reset.\nDuring switchover, the postscaler frequency from the internal oscillator block may not be sufficiently stable for timing sensitive applications. In these cases, it may be desirable to select another clock configuration and enter an alternate power-managed mode. This can be done  to  attempt  a  partial  recovery  or execute  a controlled shutdown.  See Section 3.1.4  'Multiple Sleep Commands' and Section 23.3.1 'Special Considerations for Using Two-Speed Start-up' for more details.",
    "FIGURE 23-3: FSCM BLOCK DIAGRAM\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits,  IRCF2:IRCF0, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF2:IRCF0 bits prior to entering Sleep mode.\nThe FSCM will detect failures of the primary or secondary clock sources only. If  the internal  oscillator  block fails, no failure would be detected, nor would any action be possible.",
    "23.4.1 FSCM AND THE WATCHDOG TIMER\nBoth  the  FSCM  and  the  WDT  are  clocked  by  the INTRC  oscillator.  Since  the  WDT  operates  with  a separate divider and counter, disabling the WDT has no effect on the operation of the INTRC oscillator when the FSCM is enabled.\nAs already noted, the clock source is switched to the INTOSC  clock  when  a  clock  failure is detected. Depending on the frequency selected by the IRCF2:IRCF0 bits, this may mean a substantial change in the speed of code execution. If the WDT is enabled with a small prescale value, a decrease in clock speed allows  a  WDT  time-out  to  occur  and  a  subsequent device  Reset.  For  this  reason,  fail-safe  clock  events also reset the WDT and postscaler, allowing it to start timing from when execution speed was changed and decreasing the likelihood of an erroneous time-out.",
    "23.4.2 EXITING FAIL-SAFE OPERATION\nThe fail-safe condition is terminated by either a device Reset  or  by  entering  a  power-managed  mode.  On Reset,  the  controller  starts  the  primary  clock  source specified in Configuration Register 1H  (with any required  start-up  delays  that  are  required  for  the oscillator  mode,  such  as  OST  or  PLL  timer).  The INTOSC multiplexer provides the device clock until the primary clock source becomes ready (similar to a TwoSpeed Start-up). The clock source is then switched to the  primary  clock  (indicated  by  the  OSTS  bit  in  the OSCCON register becoming set). The Fail-Safe Clock Monitor then resumes monitoring the peripheral clock.\nThe  primary  clock  source  may  never  become  ready during start-up. In this case, operation is clocked by the INTOSC multiplexer. The OSCCON register will remain in  its  Reset  state  until  a  power-managed  mode  is entered.",
    "23.4.4 POR OR WAKE FROM SLEEP\nBy entering a power-managed mode, the clock multiplexer  selects  the  clock  source  selected  by  the OSCCON register. Fail-Safe Monitoring of the powermanaged clock source resumes in the power-managed mode.\nIf  an  oscillator  failure  occurs  during  power-managed operation, the subsequent events depend on whether or  not  the  oscillator  failure  interrupt  is  enabled.  If enabled (OSCFIF = 1 ), code execution will be clocked by  the  INTOSC  multiplexer.  An  automatic  transition back to the failed clock source will not occur.\nIf the interrupt is disabled, subsequent interrupts while in  Idle  mode  will  cause  the  CPU  to  begin  executing instructions while being clocked by the INTOSC source.\nThe FSCM is designed to detect oscillator failure at any point  after  the  device  has  exited  Power-on  Reset (POR) or low-power Sleep mode. When the primary device clock is EC, RC or INTRC modes, monitoring can begin immediately following these events.",
    "23.4.4 POR OR WAKE FROM SLEEP\nFor  oscillator  modes  involving  a  crystal  or  resonator (HS,  HSPLL,  LP  or  XT),  the  situation  is  somewhat different.  Since  the  oscillator  may  require  a  start-up time considerably longer than the FCSM sample clock time, a false clock failure may be detected. To prevent this, the internal oscillator block is automatically configured as the device clock and functions until the primary clock  is  stable  (the  OST  and  PLL  timers  have  timed out).  This  is  identical  to  Two-Speed  Start-up  mode. Once the primary clock is stable, the INTRC returns to its role as the FSCM source.",
    "Note:\nThe same logic that prevents false oscillator failure interrupts on POR, or wake from Sleep,  will  also  prevent  the  detection  of the oscillator's failure to start at all following these events. This can be avoided by monitoring  the  OSTS  bit  and  using  a timing routine to determine if the oscillator is  taking  too  long  to  start.  Even  so,  no oscillator failure interrupt will be flagged.\nAs noted in Section 23.3.1 'Special Considerations for Using Two-Speed Start-up' , it is also possible to select another clock configuration and enter an alternate power-managed mode while waiting for the primary clock to become stable. When the new powermanaged  mode  is  selected,  the  primary  clock  is disabled.",
    "23.5 Program Verification and Code Protection\nEach of the five blocks has three code protection bits associated with them. They are:\nThe  overall  structure  of  the  code  protection  on  the PIC18  Flash  devices  differs  significantly  from  other PIC \u00ae  devices.\n\u00b7 Code-Protect bit (CPn)\n\u00b7 Write-Protect bit (WRTn)\n\u00b7 External Block Table Read bit (EBTRn)\nThe user program memory is divided into five blocks. One of these is a boot block of 2 Kbytes. The remainder of  the  memory  is  divided  into  four  blocks  on  binary boundaries.\nFigure 23-5 shows the program memory organization for  48  and  64-Kbyte  devices  and  the  specific  code protection bit  associated with each block. The actual locations of the bits are summarized in Table 23-3.",
    "FIGURE 23-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F2525/2620/4525/4620\nBoot Block, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Boot Block. Boot Block, Address Range = 000000h 0007FFh. Boot Block, Block Code Protection.Controlled By: = CPB, WRTB, EBTRB. Block 0, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Block 0. Block 0, Address Range = 000800h 003FFFh. Block 0, Block Code Protection.Controlled By: = CP0, WRT0, EBTR0. Block 1, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Block 1. Block 1, Address Range = 004000h 007FFFh. Block 1, Block Code Protection.Controlled By: = CP1, WRT1, EBTR1. Block 2, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Block 2. Block 2, Address Range = 008000h",
    "FIGURE 23-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F2525/2620/4525/4620\n00B7FFh. Block 2, Block Code Protection.Controlled By: = CP2, WRT2, EBTR2. Unimplemented Read ' 0 's, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Block 3. Unimplemented Read ' 0 's, Address Range = 00C000h 00FFFFh. Unimplemented Read ' 0 's, Block Code Protection.Controlled By: = CP3, WRT3, EBTR3. Unimplemented Read ' 0 's, MEMORY SIZE/DEVICE.64 Kbytes (PIC18F2620/4620) = Unimplemented Read ' 0 's. Unimplemented Read ' 0 's, Address Range = 1FFFFFh. Unimplemented Read ' 0 's, Block Code Protection.Controlled By: = 1FFFFFh",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1). 300008h, Bit 2 = CP2. 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit 6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit 4 = -.",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n30000Ah, Bit 3 = WRT3 (1). 30000Ah, Bit 2 = WRT2. 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1). 30000Ch, Bit 2 = EBTR2. 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Dh, File Name =",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\nCONFIG7H. 30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -\nLegend:\nShaded cells are unimplemented.\nNote 1: These bits are unimplemented in PIC18FX525 devices; maintain this bit set.\nDS39626E-page 263",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nThe program memory may be read to or written from any  location  using  the  table  read  and  table  write instructions.  The  device  ID  may  be  read  with  table reads.  The  Configuration  registers  may  be  read  and written with the table read and table write instructions.\nA table  read  instruction  that  executes  from  a  location outside of that block is not allowed to read and will result in reading ' 0 's. Figures 23-6 through 23-8 illustrate table write and table read protection.\nNote:\nIn normal execution mode, the CPx bits have no direct effect.  CPx  bits  inhibit  external  reads  and  writes.  A block  of  user  memory  may  be  protected  from  table writes if the WRTx Configuration bit is ' 0 '. The EBTRx bits  control  table  reads.  For  a  block  of  user  memory with the EBTRx bit set to ' 0 ',  a  table  read  instruction that executes from within that block is allowed to read.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nCode protection bits may only be written to a ' 0 '  from a ' 1 '  state. It is not possible to write  a  ' 1 '  to  a  bit  in  the  ' 0 '  state.  Code protection bits are only set to ' 1 ' by a full chip erase or block erase function. The full chip erase and block erase functions can only be initiated via ICSP operation or an external programmer.",
    "FIGURE 23-6: TABLE WRITE (WRTx) DISALLOWED\nTBLPTR = 0008FFh PC = 003FFEh, Program Memory = 003FFFh 004000h TBLWT*. TBLPTR = 0008FFh PC = 003FFEh, Configuration Bit Settings = WRT0, EBTR0 = 01 WRT1, EBTR1 = 11. PC = 00BFFEh, Program Memory = TBLWT*. PC = 00BFFEh, Configuration Bit Settings = WRT2, EBTR2 = 11 WRT3, EBTR3 =. Results: All table writes disabled to Blockn whenever WRTx = 0 ., Program Memory = Results: All table writes disabled to Blockn whenever WRTx = 0 .. Results: All table writes disabled to Blockn whenever WRTx = 0 ., Configuration Bit Settings = Results: All table writes disabled to Blockn whenever WRTx = 0 .",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRx) DISALLOWED\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Program Memory = 000000h 0007FFh 000800h. TBLPTR = 0008FFh, Configuration Bit Settings = WRTB, EBTRB = 11. PC = 007FFEh, Program Memory = TBLRD*. PC = 007FFEh, Program Memory = 003FFFh 004000h 007FFFh 008000h. PC = 007FFEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11. Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of ' 0 '., Program Memory = . Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of ' 0 '., Program Memory = 00FFFFh. Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of ' 0 '., Configuration Bit Settings = EBTRx = 0",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRx) DISALLOWED\n.",
    "FIGURE 23-8: EXTERNAL BLOCK TABLE READ (EBTRx) ALLOWED\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Configuration Bit Settings = WRT0, EBTR0 = 10. Results: Table reads permitted within Blockn, even when EBTRx = TABLAT register returns the value of the data at the, Program Memory = 0 . location TBLPTR. 00BFFFh 00C000h 00FFFFh. Results: Table reads permitted within Blockn, even when EBTRx = TABLAT register returns the value of the data at the, Configuration Bit Settings = WRT2, EBTR2 = 11 WRT3, EBTR3 = 11",
    "23.5.2 DATA EEPROM CODE PROTECTION\nThe entire  data  EEPROM  is  protected  from  external reads and writes by two bits: CPD and WRTD. CPD inhibits  external  reads  and  writes  of  data  EEPROM. WRTD  inhibits  internal  and  external  writes  to  data EEPROM. The CPU can always read data EEPROM under normal operation, regardless of the protection bit settings.",
    "23.5.3 CONFIGURATION REGISTER PROTECTION\nThe  Configuration  registers  can  be  write-protected. The WRTC bit controls protection of the Configuration registers. In normal execution mode, the WRTC bit is readable  only.  WRTC  can  only  be  written  via  ICSP operation or an external programmer.",
    "23.6 ID Locations\nEight memory locations (200000h-200007h) are designated as ID locations, where the user can store checksum or other code identification numbers. These locations are both readable and writable during normal execution through the TBLRD and TBLWT instructions or during program/verify. The ID locations can be read when the device is code-protected.",
    "23.7 In-Circuit Serial Programming\nPIC18F2525/2620/4525/4620 microcontrollers can be serially programmed while in the end application circuit. This is simply done with two lines for clock and data and  three  other  lines  for  power,  ground  and  the programming voltage. This allows customers to manufacture boards with unprogrammed devices and then program the microcontroller just before shipping the product. This also allows the most recent firmware or a custom firmware to be programmed.",
    "23.8 In-Circuit Debugger\nWhen the DEBUG Configuration bit is programmed to a ' 0 ', the In-Circuit Debugger functionality is enabled. This function allows simple debugging functions when used with MPLAB \u00ae  IDE. When the microcontroller has this feature enabled, some resources are not available for general use. Table 23-4 shows which resources are required by the background debugger.",
    "TABLE 23-4: DEBUGGER RESOURCES\nI/O pins:, 1 = RB6, RB7. Stack:, 1 = 2 levels. Program Memory:, 1 = 512 bytes. Data Memory:, 1 = 10 bytes\nTo use the In-Circuit Debugger function of the microcontroller, the design must implement In-Circuit Serial Programming  connections  to  MCLR/VPP/RE3,  VDD, VSS, RB7 and RB6. This will interface to the In-Circuit Debugger module available from Microchip or one of the third party development tool companies.",
    "23.9 Single-Supply ICSP Programming\nThe LVP Configuration bit enables Single-Supply ICSP Programming  (formerly  known  as Low-Voltage  ICSP Programming or LVP ).  When  Single-Supply  Programming is enabled, the microcontroller can be programmed without  requiring  high  voltage  being  applied  to  the MCLR/VPP/RE3 pin, but the RB5/KBI1/PGM pin is then dedicated to controlling Program mode entry and is not available as a general purpose I/O pin.\nWhile  programming,  using  Single-Supply  Programming, VDD is applied to the MCLR/VPP/RE3 pin as in normal execution mode. To enter Programming mode, VDD is applied to the PGM pin.",
    "23.9 Single-Supply ICSP Programming\nNote 1: High-voltage programming is always available,  regardless  of  the  state  of  the LVP bit or the PGM pin, by applying VIHH to the MCLR pin.\n2: By default, Single-Supply ICSP Programming is enabled in unprogrammed devices (as supplied from Microchip) and erased devices.\n3: When Single-Supply Programming is enabled,  the  RB5  pin  can  no  longer  be used as a general purpose I/O pin.\n4: When LVP is enabled, externally pull the PGM pin to VSS to allow normal program execution.\nIf Single-Supply ICSP Programming mode will not be used, the LVP bit can be cleared. RB5/KBI1/PGM then becomes available as the digital I/O pin, RB5. The LVP bit  may  be  set  or  cleared  only  when  using  standard high-voltage programming (VIHH applied to the MCLR/ VPP/RE3 pin). Once LVP has been disabled, only the standard  high-voltage  programming  is  available  and must be used to program the device.",
    "23.9 Single-Supply ICSP Programming\nMemory that is not code-protected can be erased using either a block erase, or erased row by row, then written at any specified VDD. If code-protected memory is to be erased, a block erase is required. If a block erase is to be performed when using Low-Voltage Programming, the device must be supplied with VDD   of 4.5V to 5.5V.",
    "24.0 INSTRUCTION SET SUMMARY\nThe literal instructions may use some of the following operands:\nPIC18F2525/2620/4525/4620  devices  incorporate  the standard set of 75 PIC18 core instructions, as well as an extended set of 8 new instructions, for the optimization of code that is recursive or that utilizes a software stack. The extended set is discussed later in this section.",
    "24.1 Standard Instruction Set\nThe standard PIC18 instruction set adds many enhancements to the previous PIC \u00ae  MCU instruction sets, while maintaining an easy migration from these PIC  MCU  instruction  sets.  Most  instructions  are  a single program memory word (16 bits), but there are four  instructions  that  require  two  program  memory locations.\nEach single-word instruction  is  a 16-bit word  divided into an opcode, which specifies the instruction type and one  or  more  operands,  which  further  specify  the operation of the instruction.\nThe instruction set is highly orthogonal and is grouped into four basic categories:\n\u00b7 Byte-oriented operations\n\u00b7 Bit-oriented operations\n\u00b7 Literal operations\n\u00b7 Control operations\nThe PIC18 instruction set summary in Table 24-2 lists byte-oriented , bit-oriented , literal and control operations. Table 24-1 shows the opcode field descriptions.\nMost byte-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The destination of the result (specified by 'd')\n3. The accessed memory (specified by 'a')",
    "24.1 Standard Instruction Set\nThe  file  register  designator  'f'  specifies  which  file register is to be used by the instruction. The destination designator 'd' specifies where the result of the operation is to be placed. If 'd' is zero, the result is placed in the WREG register. If 'd' is one, the result is placed in the file register specified in the instruction.\nAll bit-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The bit in the file register (specified by 'b')\n3. The accessed memory (specified by 'a')\nThe bit field designator 'b' selects the number of the bit affected by the operation, while the file register designator 'f' represents the number of the file in which the bit is located.\n\u00b7 A literal value to be loaded into a file register (specified by 'k')\n\u00b7 The desired FSR register to load the literal value into (specified by 'f')\n\u00b7 No operand required (specified by '-')\nThe control instructions may use some of the following operands:",
    "24.1 Standard Instruction Set\n\u00b7 A program memory address (specified by 'n')\n\u00b7 The mode of the CALL or RETURN instructions (specified by 's')\n\u00b7 The mode of the table read and table write instructions (specified by 'm')\n\u00b7 No operand required (specified by '-')\nAll instructions  are  a  single  word,  except  for  four double-word instructions. These instructions were made double-word to contain the required information in 32 bits. In the second word, the 4 MSbs are ' 1 's. If this  second  word  is  executed  as  an  instruction  (by itself), it will execute as a NOP .\nAll  single-word  instructions  are  executed  in  a  single instruction cycle, unless a conditional test is true or the program counter is changed as a result of the instruction. In these cases, the execution takes two instruction cycles, with the additional instruction cycle(s) executed as a NOP .\nThe double-word instructions execute in two instruction cycles.",
    "24.1 Standard Instruction Set\nOne instruction cycle consists of four oscillator periods. Thus, for an oscillator frequency of 4 MHz, the normal instruction execution time is 1 \u03bc s. If a conditional test is true, or the program counter is changed as a result of an instruction, the instruction  execution  time is  2 \u03bc s. Two-word branch instructions (if true) would take 3 \u03bc s.\nFigure 24-1 shows the general formats that the instructions can have. All examples use the convention 'nnh' to represent a hexadecimal number.\nThe instruction set summary, shown in Table 24-2, lists the standard instructions recognized by the Microchip MPASM\u2122 Assembler.\nSection 24.1.1 'Standard Instruction Set' provides a description of each instruction.",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\na, Description = RAM access bit a = 0 : RAM location in Access RAM (BSR register is ignored) a = 1 : RAM bank is specified by BSR register. bbb, Description = Bit address within an 8-bit file register (0 to 7).. BSR, Description = Bank Select Register. Used to select the current RAM bank.. C, DC, Z, OV,, Description = ALU Status bits: C arry, D igit C arry, Z ero, Ov erflow, N egative.. d, Description = Destination select bit d = 0 : store result in WREG d = 1 : store result in file register f. dest, Description = Destination: either the WREG register or the specified register file location.. f, Description = 8-bit register file address (00h to FFh) or 2-bit FSR designator (0h to 3h).. f s, Description = 12-bit register file address (000h to FFFh). This is the source address.. f d, Description = 12-bit register file address (000h to FFFh). This is",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\nthe destination address.. GIE, Description = Global Interrupt Enable bit.. k, Description = Literal field, constant data or label (may be either an 8-bit, 12-bit or a 20-bit value).. label, Description = Label name.. mm, Description = The mode of the TBLPTR register for the table read and table write instructions.. *, Description = Only used with table read and table write instructions: No change to register (such as TBLPTR with table reads and writes). *+, Description = Post-Increment register (such as TBLPTR with table reads and writes). *-, Description = Post-Decrement register (such as TBLPTR with table reads and writes). +*, Description = Pre-Increment register (such as TBLPTR with table reads and writes). n, Description = The relative address (2's complement number) for relative branch instructions or the direct address for Call/Branch and Return instructions.. PC, Description = Program Counter.. PCL, Description = Program Counter Low Byte.. PCH, Description = Program Counter High Byte.. PCLATH, Description",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\n= Program Counter High Byte Latch.. PCLATU, Description = Program Counter Upper Byte Latch.. PD, Description = Power-down bit.. PRODH, Description = Product of Multiply High Byte.. PRODL s, Description = Product of Multiply Low Byte. Fast Call/Return mode select bit. , Description = s = 1 : certain registers loaded into/from shadow registers (Fast mode) 21-bit Table Pointer (points to a Program Memory location).. TBLPTR, Description = . TABLAT, Description = 8-bit Table Latch.. TO, Description = Time-out bit.. TOS, Description = Top-of-Stack.. u, Description = Unused or unchanged.. WDT, Description = Watchdog Timer.. WREG, Description = Working register (accumulator).. x, Description = Don't care (' 0 ' or ' 1 '). The assembler will generate code with x = 0 . It is the recommended form of use for compatibility with all Microchip software tools.. z s, Description = 7-bit offset value for indirect addressing of register files (source).. z d, Description =",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\n7-bit offset value for indirect addressing of register files (destination).. [text], Description = The contents of text. (text), Description = Indicates an indexed address. .. , Description = Specifies bit n of the register indicated by the pointer expr .. [expr]<n>, Description = . \u2192, Description = Assigned to.. < >, Description = Register bit field.. italics, Description = User-defined term (font is Courier New).",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nBYTE-ORIENTED OPERATIONS, Mnemonic,.Operands = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Description.Description = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Cycles.Cycles = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Status Affected.Status Affected = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Notes.Notes = BYTE-ORIENTED OPERATIONS. ADDWF, Mnemonic,.Operands = f, d, a. ADDWF, Description.Description = Add WREG and f. ADDWF, Cycles.Cycles = 1. ADDWF, 16-Bit Instruction Word.MSb = 0010. ADDWF, 16-Bit Instruction Word.MSb = 01da. ADDWF, 16-Bit Instruction Word. = ffff. ADDWF,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.LSb = ffff. ADDWF, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWF, Notes.Notes = 1, 2. ADDWFC, Mnemonic,.Operands = f, d, a. ADDWFC, Description.Description = Add WREG and Carry bit to f. ADDWFC, Cycles.Cycles = 1. ADDWFC, 16-Bit Instruction Word.MSb = 0010. ADDWFC, 16-Bit Instruction Word.MSb = 00da. ADDWFC, 16-Bit Instruction Word. = ffff. ADDWFC, 16-Bit Instruction Word.LSb = ffff. ADDWFC, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWFC, Notes.Notes = 1, 2. ANDWF, Mnemonic,.Operands = f, d, a. ANDWF, Description.Description = AND WREG with f. ANDWF, Cycles.Cycles = 1. ANDWF, 16-Bit Instruction Word.MSb = 0001.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nANDWF, 16-Bit Instruction Word.MSb = 01da. ANDWF, 16-Bit Instruction Word. = ffff. ANDWF, 16-Bit Instruction Word.LSb = ffff. ANDWF, Status Affected.Status Affected = Z, N. ANDWF, Notes.Notes = 1,2. CLRF, Mnemonic,.Operands = f, a. CLRF, Description.Description = Clear f. CLRF, Cycles.Cycles = 1. CLRF, 16-Bit Instruction Word.MSb = 0110. CLRF, 16-Bit Instruction Word.MSb = 101a. CLRF, 16-Bit Instruction Word. = ffff. CLRF, 16-Bit Instruction Word.LSb = ffff. CLRF, Status Affected.Status Affected = Z. CLRF, Notes.Notes = 2. COMF, Mnemonic,.Operands = f, d, a. COMF, Description.Description = Complement f. COMF, Cycles.Cycles = 1. COMF, 16-Bit Instruction Word.MSb = 0001. COMF, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 11da. COMF, 16-Bit Instruction Word. = ffff. COMF, 16-Bit Instruction Word.LSb = ffff. COMF, Status Affected.Status Affected = Z, N. COMF, Notes.Notes = 1, 2. CPFSEQ, Mnemonic,.Operands = f, a. CPFSEQ, Description.Description = Compare f with WREG, Skip =. CPFSEQ, Cycles.Cycles = 1 (2 or 3). CPFSEQ, 16-Bit Instruction Word.MSb = 0110. CPFSEQ, 16-Bit Instruction Word.MSb = 001a. CPFSEQ, 16-Bit Instruction Word. = ffff. CPFSEQ, 16-Bit Instruction Word.LSb = ffff. CPFSEQ, Status Affected.Status Affected = None. CPFSEQ, Notes.Notes = 4. CPFSGT, Mnemonic,.Operands = f, a. CPFSGT, Description.Description = Compare f with WREG, Skip >. CPFSGT, Cycles.Cycles = 1",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n(2 or 3). CPFSGT, 16-Bit Instruction Word.MSb = 0110. CPFSGT, 16-Bit Instruction Word.MSb = 010a. CPFSGT, 16-Bit Instruction Word. = ffff. CPFSGT, 16-Bit Instruction Word.LSb = ffff. CPFSGT, Status Affected.Status Affected = None. CPFSGT, Notes.Notes = 4. CPFSLT, Mnemonic,.Operands = f, a. CPFSLT, Description.Description = Compare f with WREG, Skip <. CPFSLT, Cycles.Cycles = 1 (2 or 3). CPFSLT, 16-Bit Instruction Word.MSb = 0110. CPFSLT, 16-Bit Instruction Word.MSb = 000a. CPFSLT, 16-Bit Instruction Word. = ffff. CPFSLT, 16-Bit Instruction Word.LSb = ffff. CPFSLT, Status Affected.Status Affected = None. CPFSLT, Notes.Notes = 1, 2. DECF, Mnemonic,.Operands = f, d, a.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nDECF, Description.Description = Decrement f. DECF, Cycles.Cycles = 1. DECF, 16-Bit Instruction Word.MSb = 0000. DECF, 16-Bit Instruction Word.MSb = 01da. DECF, 16-Bit Instruction Word. = ffff. DECF, 16-Bit Instruction Word.LSb = ffff. DECF, Status Affected.Status Affected = C, DC, Z, OV, N. DECF, Notes.Notes = 1, 2, 3, 4. DECFSZ, Mnemonic,.Operands = f, d, a. DECFSZ, Description.Description = Decrement f, Skip if 0. DECFSZ, Cycles.Cycles = 1 (2 or 3). DECFSZ, 16-Bit Instruction Word.MSb = 0010. DECFSZ, 16-Bit Instruction Word.MSb = 11da. DECFSZ, 16-Bit Instruction Word. = ffff. DECFSZ, 16-Bit Instruction Word.LSb = ffff. DECFSZ, Status Affected.Status Affected = None. DECFSZ,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nNotes.Notes = 1, 2, 3, 4. DCFSNZ, Mnemonic,.Operands = f, d, a. DCFSNZ, Description.Description = Decrement f, Skip if Not 0. DCFSNZ, Cycles.Cycles = 1 (2 or 3). DCFSNZ, 16-Bit Instruction Word.MSb = 0100. DCFSNZ, 16-Bit Instruction Word.MSb = 11da. DCFSNZ, 16-Bit Instruction Word. = ffff. DCFSNZ, 16-Bit Instruction Word.LSb = ffff. DCFSNZ, Status Affected.Status Affected = None. DCFSNZ, Notes.Notes = 1, 2. INCF, Mnemonic,.Operands = f, d, a. INCF, Description.Description = Increment f. INCF, Cycles.Cycles = 1. INCF, 16-Bit Instruction Word.MSb = 0010. INCF, 16-Bit Instruction Word.MSb = 10da. INCF, 16-Bit Instruction Word. = ffff. INCF, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nffff. INCF, Status Affected.Status Affected = C, DC, Z, OV, N. INCF, Notes.Notes = 1, 2, 3, 4. INCFSZ, Mnemonic,.Operands = f, d, a. INCFSZ, Description.Description = Increment f, Skip if 0. INCFSZ, Cycles.Cycles = 1 (2 or 3). INCFSZ, 16-Bit Instruction Word.MSb = 0011. INCFSZ, 16-Bit Instruction Word.MSb = 11da. INCFSZ, 16-Bit Instruction Word. = ffff. INCFSZ, 16-Bit Instruction Word.LSb = ffff. INCFSZ, Status Affected.Status Affected = None. INCFSZ, Notes.Notes = 4. INFSNZ, Mnemonic,.Operands = f, d, a. INFSNZ, Description.Description = Increment f, Skip if Not 0. INFSNZ, Cycles.Cycles = 1 (2 or 3). INFSNZ, 16-Bit Instruction Word.MSb = 0100. INFSNZ,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.MSb = 10da. INFSNZ, 16-Bit Instruction Word. = ffff. INFSNZ, 16-Bit Instruction Word.LSb = ffff. INFSNZ, Status Affected.Status Affected = None. INFSNZ, Notes.Notes = 1, 2. IORWF, Mnemonic,.Operands = f, d, a. IORWF, Description.Description = Inclusive OR WREG with f. IORWF, Cycles.Cycles = 1. IORWF, 16-Bit Instruction Word.MSb = 0001. IORWF, 16-Bit Instruction Word.MSb = 00da. IORWF, 16-Bit Instruction Word. = ffff. IORWF, 16-Bit Instruction Word.LSb = ffff. IORWF, Status Affected.Status Affected = Z, N. IORWF, Notes.Notes = 1, 2. MOVF, Mnemonic,.Operands = f, d, a. MOVF, Description.Description = Move f. MOVF, Cycles.Cycles = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMOVF, 16-Bit Instruction Word.MSb = 0101. MOVF, 16-Bit Instruction Word.MSb = 00da. MOVF, 16-Bit Instruction Word. = ffff. MOVF, 16-Bit Instruction Word.LSb = ffff. MOVF, Status Affected.Status Affected = Z, N. MOVF, Notes.Notes = 1. MOVFF, Mnemonic,.Operands = f s , f d. MOVFF, Description.Description = Move f s (source) to 1st word 1 2. MOVFF, Cycles.Cycles = . MOVFF, 16-Bit Instruction Word.MSb = 1100. MOVFF, 16-Bit Instruction Word.MSb = ffff. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word.LSb = ffff. MOVFF, Status Affected.Status Affected = None. MOVFF, Notes.Notes = . , Mnemonic,.Operands = . , Description.Description = f d (destination) 2nd word. , Cycles.Cycles = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n, 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = ffff. , 16-Bit Instruction Word. = ffff. , 16-Bit Instruction Word.LSb = ffff. , Status Affected.Status Affected = . , Notes.Notes = . MOVWF, Mnemonic,.Operands = f, a. MOVWF, Description.Description = Move WREG to f. MOVWF, Cycles.Cycles = 1. MOVWF, 16-Bit Instruction Word.MSb = 0110. MOVWF, 16-Bit Instruction Word.MSb = 111a. MOVWF, 16-Bit Instruction Word. = ffff. MOVWF, 16-Bit Instruction Word.LSb = ffff. MOVWF, Status Affected.Status Affected = None. MOVWF, Notes.Notes = . MULWF, Mnemonic,.Operands = f, a. MULWF, Description.Description = Multiply WREG with f. MULWF, Cycles.Cycles = 1.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMULWF, 16-Bit Instruction Word.MSb = 0000. MULWF, 16-Bit Instruction Word.MSb = 001a. MULWF, 16-Bit Instruction Word. = ffff. MULWF, 16-Bit Instruction Word.LSb = ffff. MULWF, Status Affected.Status Affected = None. MULWF, Notes.Notes = 1, 2. NEGF, Mnemonic,.Operands = f, a. NEGF, Description.Description = Negate f. NEGF, Cycles.Cycles = 1. NEGF, 16-Bit Instruction Word.MSb = 0110. NEGF, 16-Bit Instruction Word.MSb = 110a. NEGF, 16-Bit Instruction Word. = ffff. NEGF, 16-Bit Instruction Word.LSb = ffff. NEGF, Status Affected.Status Affected = C, DC, Z, OV, N. NEGF, Notes.Notes = . RLCF, Mnemonic,.Operands = f, d, a. RLCF, Description.Description = Rotate Left f through",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nCarry. RLCF, Cycles.Cycles = 1. RLCF, 16-Bit Instruction Word.MSb = 0011. RLCF, 16-Bit Instruction Word.MSb = 01da. RLCF, 16-Bit Instruction Word. = ffff. RLCF, 16-Bit Instruction Word.LSb = ffff. RLCF, Status Affected.Status Affected = C, Z, N. RLCF, Notes.Notes = 1, 2. RLNCF, Mnemonic,.Operands = f, d, a. RLNCF, Description.Description = Rotate Left f (No Carry). RLNCF, Cycles.Cycles = 1. RLNCF, 16-Bit Instruction Word.MSb = 0100. RLNCF, 16-Bit Instruction Word.MSb = 01da. RLNCF, 16-Bit Instruction Word. = ffff. RLNCF, 16-Bit Instruction Word.LSb = ffff. RLNCF, Status Affected.Status Affected = Z, N. RLNCF, Notes.Notes = . RRCF,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nMnemonic,.Operands = f, d, a. RRCF, Description.Description = Rotate Right f through Carry. RRCF, Cycles.Cycles = 1. RRCF, 16-Bit Instruction Word.MSb = 0011. RRCF, 16-Bit Instruction Word.MSb = 00da. RRCF, 16-Bit Instruction Word. = ffff. RRCF, 16-Bit Instruction Word.LSb = ffff. RRCF, Status Affected.Status Affected = C, Z, N. RRCF, Notes.Notes = . RRNCF, Mnemonic,.Operands = f, d, a. RRNCF, Description.Description = Rotate Right f (No Carry). RRNCF, Cycles.Cycles = 1. RRNCF, 16-Bit Instruction Word.MSb = 0100. RRNCF, 16-Bit Instruction Word.MSb = 00da. RRNCF, 16-Bit Instruction Word. = ffff. RRNCF, 16-Bit Instruction Word.LSb = ffff. RRNCF, Status Affected.Status Affected = Z,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nN. RRNCF, Notes.Notes = . SETF, Mnemonic,.Operands = f, a. SETF, Description.Description = Set f. SETF, Cycles.Cycles = 1. SETF, 16-Bit Instruction Word.MSb = 0110. SETF, 16-Bit Instruction Word.MSb = 100a. SETF, 16-Bit Instruction Word. = ffff. SETF, 16-Bit Instruction Word.LSb = ffff. SETF, Status Affected.Status Affected = None. SETF, Notes.Notes = 1, 2. SUBFWB, Mnemonic,.Operands = f, d, a. SUBFWB, Description.Description = Subtract f from WREG with Borrow. SUBFWB, Cycles.Cycles = 1. SUBFWB, 16-Bit Instruction Word.MSb = 0101. SUBFWB, 16-Bit Instruction Word.MSb = 01da. SUBFWB, 16-Bit Instruction Word. = ffff. SUBFWB, 16-Bit Instruction Word.LSb = ffff.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nSUBFWB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBFWB, Notes.Notes = . SUBWF, Mnemonic,.Operands = f, d, a. SUBWF, Description.Description = Subtract WREG from f. SUBWF, Cycles.Cycles = 1. SUBWF, 16-Bit Instruction Word.MSb = 0101. SUBWF, 16-Bit Instruction Word.MSb = 11da. SUBWF, 16-Bit Instruction Word. = ffff. SUBWF, 16-Bit Instruction Word.LSb = ffff. SUBWF, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWF, Notes.Notes = 1, 2. SUBWFB, Mnemonic,.Operands = f, d, a. SUBWFB, Description.Description = Subtract WREG from f with Borrow. SUBWFB, Cycles.Cycles = 1. SUBWFB, 16-Bit Instruction Word.MSb = 0101. SUBWFB, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 10da. SUBWFB, 16-Bit Instruction Word. = ffff. SUBWFB, 16-Bit Instruction Word.LSb = ffff. SUBWFB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWFB, Notes.Notes = . SWAPF, Mnemonic,.Operands = f, d, a. SWAPF, Description.Description = Swap Nibbles in f. SWAPF, Cycles.Cycles = 1. SWAPF, 16-Bit Instruction Word.MSb = 0011. SWAPF, 16-Bit Instruction Word.MSb = 10da. SWAPF, 16-Bit Instruction Word. = ffff. SWAPF, 16-Bit Instruction Word.LSb = ffff. SWAPF, Status Affected.Status Affected = None. SWAPF, Notes.Notes = 4. TSTFSZ, Mnemonic,.Operands = f, a. TSTFSZ, Description.Description = Test f, Skip if 0. TSTFSZ, Cycles.Cycles = 1 (2 or 3). TSTFSZ, 16-Bit Instruction Word.MSb",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\n= 0110. TSTFSZ, 16-Bit Instruction Word.MSb = 011a. TSTFSZ, 16-Bit Instruction Word. = ffff. TSTFSZ, 16-Bit Instruction Word.LSb = ffff. TSTFSZ, Status Affected.Status Affected = None. TSTFSZ, Notes.Notes = 1, 2. XORWF, Mnemonic,.Operands = f, d, a. XORWF, Description.Description = Exclusive OR WREG with f. XORWF, Cycles.Cycles = 1. XORWF, 16-Bit Instruction Word.MSb = 0001. XORWF, 16-Bit Instruction Word.MSb = 10da. XORWF, 16-Bit Instruction Word. = ffff. XORWF, 16-Bit Instruction Word.LSb = ffff. XORWF, Status Affected.Status Affected = Z, N. XORWF, Notes.Notes = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBIT-ORIENTED OPERATIONS, Mnemonic,.Operands = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Description.Description = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Cycles.Cycles = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Status Affected.Status Affected = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Notes.Notes = BIT-ORIENTED OPERATIONS. BCF, Mnemonic,.Operands = f, b, a. BCF, Description.Description = Bit Clear f. BCF, Cycles.Cycles = . BCF, 16-Bit Instruction Word.MSb = 1001. BCF, 16-Bit Instruction Word.MSb = bbba. BCF, 16-Bit Instruction Word. = ffff. BCF, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nffff. BCF, Status Affected.Status Affected = None. BCF, Notes.Notes = 1, 2 1, 2. BSF, Mnemonic,.Operands = f, b, a. BSF, Description.Description = Bit Set f. BSF, Cycles.Cycles = . BSF, 16-Bit Instruction Word.MSb = 1000. BSF, 16-Bit Instruction Word.MSb = bbba. BSF, 16-Bit Instruction Word. = ffff. BSF, 16-Bit Instruction Word.LSb = ffff. BSF, Status Affected.Status Affected = None. BSF, Notes.Notes = . BTFSC, Mnemonic,.Operands = f, b, a. BTFSC, Description.Description = Bit Test f, Skip if Clear. BTFSC, Cycles.Cycles = (2 or 3). BTFSC, 16-Bit Instruction Word.MSb = 1011. BTFSC, 16-Bit Instruction Word.MSb = bbba. BTFSC, 16-Bit Instruction Word. = ffff. BTFSC, 16-Bit",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nInstruction Word.LSb = ffff. BTFSC, Status Affected.Status Affected = None. BTFSC, Notes.Notes = 3, 4. BTFSS, Mnemonic,.Operands = f, b, a. BTFSS, Description.Description = Bit Test f, Skip if Set. BTFSS, Cycles.Cycles = (2 or 3). BTFSS, 16-Bit Instruction Word.MSb = 1010. BTFSS, 16-Bit Instruction Word.MSb = bbba. BTFSS, 16-Bit Instruction Word. = ffff. BTFSS, 16-Bit Instruction Word.LSb = ffff. BTFSS, Status Affected.Status Affected = None. BTFSS, Notes.Notes = 3, 4. BTG, Mnemonic,.Operands = f, b, a. BTG, Description.Description = Bit Toggle f. BTG, Cycles.Cycles = . BTG, 16-Bit Instruction Word.MSb = 0111. BTG, 16-Bit Instruction Word.MSb = bbba. BTG, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord. = ffff. BTG, 16-Bit Instruction Word.LSb = ffff. BTG, Status Affected.Status Affected = None. BTG, Notes.Notes = 1, 2. CONTROL OPERATIONS, Mnemonic,.Operands = CONTROL OPERATIONS. CONTROL OPERATIONS, Description.Description = CONTROL OPERATIONS. CONTROL OPERATIONS, Cycles.Cycles = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word. = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.LSb = CONTROL OPERATIONS. CONTROL OPERATIONS, Status Affected.Status Affected = CONTROL OPERATIONS. CONTROL OPERATIONS, Notes.Notes = CONTROL OPERATIONS. BC, Mnemonic,.Operands = n. BC, Description.Description = Branch if Carry. BC, Cycles.Cycles = (2). BC, 16-Bit Instruction Word.MSb = 1110. BC, 16-Bit Instruction Word.MSb = 0010. BC, 16-Bit Instruction Word. = nnnn. BC, 16-Bit Instruction Word.LSb =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nnnnn. BC, Status Affected.Status Affected = None. BC, Notes.Notes = . BN, Mnemonic,.Operands = n. BN, Description.Description = Branch if Negative. BN, Cycles.Cycles = (2). BN, 16-Bit Instruction Word.MSb = 1110. BN, 16-Bit Instruction Word.MSb = 0110. BN, 16-Bit Instruction Word. = nnnn. BN, 16-Bit Instruction Word.LSb = nnnn. BN, Status Affected.Status Affected = None. BN, Notes.Notes = . BNC, Mnemonic,.Operands = n. BNC, Description.Description = Branch if Not Carry. BNC, Cycles.Cycles = (2). BNC, 16-Bit Instruction Word.MSb = 1110. BNC, 16-Bit Instruction Word.MSb = 0011. BNC, 16-Bit Instruction Word. = nnnn. BNC, 16-Bit Instruction Word.LSb = nnnn. BNC, Status Affected.Status Affected = None. BNC, Notes.Notes = .",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBNN, Mnemonic,.Operands = n. BNN, Description.Description = Branch if Not Negative. BNN, Cycles.Cycles = (2). BNN, 16-Bit Instruction Word.MSb = 1110. BNN, 16-Bit Instruction Word.MSb = 0111. BNN, 16-Bit Instruction Word. = nnnn. BNN, 16-Bit Instruction Word.LSb = nnnn. BNN, Status Affected.Status Affected = None. BNN, Notes.Notes = . BNOV, Mnemonic,.Operands = n. BNOV, Description.Description = Branch if Not Overflow. BNOV, Cycles.Cycles = (2). BNOV, 16-Bit Instruction Word.MSb = 1110. BNOV, 16-Bit Instruction Word.MSb = 0101. BNOV, 16-Bit Instruction Word. = nnnn. BNOV, 16-Bit Instruction Word.LSb = nnnn. BNOV, Status Affected.Status Affected = None. BNOV, Notes.Notes = . BNZ, Mnemonic,.Operands",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= n. BNZ, Description.Description = Branch if Not Zero. BNZ, Cycles.Cycles = (2). BNZ, 16-Bit Instruction Word.MSb = 1110. BNZ, 16-Bit Instruction Word.MSb = 0001. BNZ, 16-Bit Instruction Word. = nnnn. BNZ, 16-Bit Instruction Word.LSb = nnnn. BNZ, Status Affected.Status Affected = None. BNZ, Notes.Notes = . BOV, Mnemonic,.Operands = n. BOV, Description.Description = Branch if Overflow. BOV, Cycles.Cycles = (2). BOV, 16-Bit Instruction Word.MSb = 1110. BOV, 16-Bit Instruction Word.MSb = 0100. BOV, 16-Bit Instruction Word. = nnnn. BOV, 16-Bit Instruction Word.LSb = nnnn. BOV, Status Affected.Status Affected = None. BOV, Notes.Notes = . BRA, Mnemonic,.Operands = n. BRA, Description.Description = Branch",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nUnconditionally. BRA, Cycles.Cycles = . BRA, 16-Bit Instruction Word.MSb = 1101. BRA, 16-Bit Instruction Word.MSb = 0nnn. BRA, 16-Bit Instruction Word. = nnnn. BRA, 16-Bit Instruction Word.LSb = nnnn. BRA, Status Affected.Status Affected = None. BRA, Notes.Notes = . BZ, Mnemonic,.Operands = n. BZ, Description.Description = Branch if Zero. BZ, Cycles.Cycles = (2). BZ, 16-Bit Instruction Word.MSb = 1110. BZ, 16-Bit Instruction Word.MSb = 0000. BZ, 16-Bit Instruction Word. = nnnn. BZ, 16-Bit Instruction Word.LSb = nnnn. BZ, Status Affected.Status Affected = None. BZ, Notes.Notes = . CALL, Mnemonic,.Operands = n, s. CALL, Description.Description = Call Subroutine 1st word. CALL, Cycles.Cycles = . CALL, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = 1110. CALL, 16-Bit Instruction Word.MSb = 110s. CALL, 16-Bit Instruction Word. = kkkk. CALL, 16-Bit Instruction Word.LSb = kkkk. CALL, Status Affected.Status Affected = None. CALL, Notes.Notes = . CLRWDT, Mnemonic,.Operands = -. CLRWDT, Description.Description = Clear Watchdog Timer. CLRWDT, Cycles.Cycles = . CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word. = 0000. CLRWDT, 16-Bit Instruction Word.LSb = 0100. CLRWDT, Status Affected.Status Affected = TO, PD. CLRWDT, Notes.Notes = . DAW, Mnemonic,.Operands = -. DAW, Description.Description = Decimal Adjust WREG. DAW, Cycles.Cycles = . DAW, 16-Bit Instruction Word.MSb",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word. = 0000. DAW, 16-Bit Instruction Word.LSb = 0111. DAW, Status Affected.Status Affected = C. DAW, Notes.Notes = . GOTO, Mnemonic,.Operands = n. GOTO, Description.Description = Go to Address 1st word 2nd word. GOTO, Cycles.Cycles = . GOTO, 16-Bit Instruction Word.MSb = 1110 1111. GOTO, 16-Bit Instruction Word.MSb = 1111 kkkk. GOTO, 16-Bit Instruction Word. = kkkk kkkk. GOTO, 16-Bit Instruction Word.LSb = kkkk kkkk. GOTO, Status Affected.Status Affected = None. GOTO, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 0000. NOP,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word. = 0000. NOP, 16-Bit Instruction Word.LSb = 0000. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 1111. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word. = xxxx. NOP, 16-Bit Instruction Word.LSb = xxxx. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = 4. POP, Mnemonic,.Operands = -. POP, Description.Description = Pop Top of Return Stack (TOS). POP, Cycles.Cycles = . POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word. =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n0000. POP, 16-Bit Instruction Word.LSb = 0110. POP, Status Affected.Status Affected = None. POP, Notes.Notes = . PUSH, Mnemonic,.Operands = -. PUSH, Description.Description = Push Top of Return Stack (TOS). PUSH, Cycles.Cycles = . PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word. = 0000. PUSH, 16-Bit Instruction Word.LSb = 0101. PUSH, Status Affected.Status Affected = None. PUSH, Notes.Notes = . RCALL, Mnemonic,.Operands = n. RCALL, Description.Description = Relative Call. RCALL, Cycles.Cycles = . RCALL, 16-Bit Instruction Word.MSb = 1101. RCALL, 16-Bit Instruction Word.MSb = 1nnn. RCALL, 16-Bit Instruction Word. = nnnn. RCALL, 16-Bit Instruction Word.LSb = nnnn. RCALL, Status Affected.Status Affected =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNone. RCALL, Notes.Notes = . RESET, Mnemonic,.Operands = . RESET, Description.Description = Software Device Reset. RESET, Cycles.Cycles = . RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word. = 1111. RESET, 16-Bit Instruction Word.LSb = 1111. RESET, Status Affected.Status Affected = All. RESET, Notes.Notes = . RETFIE, Mnemonic,.Operands = s. RETFIE, Description.Description = Return from Interrupt Enable. RETFIE, Cycles.Cycles = . RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word. = 0001. RETFIE, 16-Bit Instruction Word.LSb = 000s. RETFIE, Status Affected.Status Affected = GIE/GIEH,. RETFIE, Notes.Notes = . RETLW,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = k. RETLW, Description.Description = Return with Literal in WREG. RETLW, Cycles.Cycles = . RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = . RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW, Notes.Notes = . RETURN, Mnemonic,.Operands = s. RETURN, Description.Description = Return from Subroutine. RETURN, Cycles.Cycles = . RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = . RETURN, 16-Bit Instruction Word. = kkkk. RETURN, 16-Bit Instruction Word.LSb = . RETURN, Status Affected.Status Affected = . RETURN, Notes.Notes = . SLEEP, Mnemonic,.Operands = -. SLEEP, Description.Description = Go into Standby mode. SLEEP,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nCycles.Cycles = . SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.MSb = 0000 0000. SLEEP, 16-Bit Instruction Word. = 0001 0000. SLEEP, 16-Bit Instruction Word.LSb = 001s 0011. SLEEP, Status Affected.Status Affected = None TO, PD. SLEEP, Notes.Notes = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nLITERAL OPERATIONS, Mnemonic,.Operands = LITERAL OPERATIONS. LITERAL OPERATIONS, Description.Description = LITERAL OPERATIONS. LITERAL OPERATIONS, Cycles.Cycles = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, Status Affected. = LITERAL OPERATIONS. LITERAL OPERATIONS, Notes. = LITERAL OPERATIONS. ADDLW, Mnemonic,.Operands = k. ADDLW, Description.Description = Add Literal and WREG. ADDLW, Cycles.Cycles = 1. ADDLW, 16-Bit Instruction Word.MSb = 0000. ADDLW, 16-Bit Instruction Word.MSb = 1111. ADDLW, 16-Bit Instruction Word. = kkkk. ADDLW, 16-Bit Instruction Word. = kkkk. ADDLW, Status Affected. = C, DC, Z, OV, N. ADDLW, Notes. = . ANDLW,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = k. ANDLW, Description.Description = AND Literal with WREG. ANDLW, Cycles.Cycles = 1. ANDLW, 16-Bit Instruction Word.MSb = 0000. ANDLW, 16-Bit Instruction Word.MSb = 1011. ANDLW, 16-Bit Instruction Word. = kkkk. ANDLW, 16-Bit Instruction Word. = kkkk. ANDLW, Status Affected. = Z, N. ANDLW, Notes. = . IORLW, Mnemonic,.Operands = k. IORLW, Description.Description = Inclusive OR Literal with WREG. IORLW, Cycles.Cycles = 1. IORLW, 16-Bit Instruction Word.MSb = 0000. IORLW, 16-Bit Instruction Word.MSb = 1001. IORLW, 16-Bit Instruction Word. = kkkk. IORLW, 16-Bit Instruction Word. = kkkk. IORLW, Status Affected. = Z, N. IORLW, Notes. = . LFSR,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = f, k. LFSR, Description.Description = Move Literal (12-bit)2nd word to FSR(f) 1st word. LFSR, Cycles.Cycles = 2. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word. = 00ff. LFSR, 16-Bit Instruction Word. = kkkk. LFSR, Status Affected. = None. LFSR, Notes. = . MOVLB, Mnemonic,.Operands = k. MOVLB, Description.Description = Move Literal to BSR<3:0>. MOVLB, Cycles.Cycles = 1. MOVLB, 16-Bit Instruction Word.MSb = 0000. MOVLB, 16-Bit Instruction Word.MSb = 0001. MOVLB, 16-Bit Instruction Word. = 0000. MOVLB, 16-Bit Instruction Word. = kkkk. MOVLB, Status Affected. = None.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMOVLB, Notes. = . MOVLW, Mnemonic,.Operands = k. MOVLW, Description.Description = Move Literal to WREG. MOVLW, Cycles.Cycles = 1. MOVLW, 16-Bit Instruction Word.MSb = 0000. MOVLW, 16-Bit Instruction Word.MSb = 1110. MOVLW, 16-Bit Instruction Word. = kkkk. MOVLW, 16-Bit Instruction Word. = kkkk. MOVLW, Status Affected. = None. MOVLW, Notes. = . MULLW, Mnemonic,.Operands = k. MULLW, Description.Description = Multiply Literal with WREG. MULLW, Cycles.Cycles = 1. MULLW, 16-Bit Instruction Word.MSb = 0000. MULLW, 16-Bit Instruction Word.MSb = 1101. MULLW, 16-Bit Instruction Word. = kkkk. MULLW, 16-Bit Instruction Word. = kkkk. MULLW, Status",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nAffected. = None. MULLW, Notes. = . RETLW, Mnemonic,.Operands = k. RETLW, Description.Description = Return with Literal in WREG. RETLW, Cycles.Cycles = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, Status Affected. = None. RETLW, Notes. = . SUBLW, Mnemonic,.Operands = k. SUBLW, Description.Description = Subtract WREG from Literal. SUBLW, Cycles.Cycles = 1. SUBLW, 16-Bit Instruction Word.MSb = 0000. SUBLW, 16-Bit Instruction Word.MSb = 1000. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, Status Affected. =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nC, DC, Z, OV, N. SUBLW, Notes. = . XORLW, Mnemonic,.Operands = k. XORLW, Description.Description = Exclusive OR Literal with WREG. XORLW, Cycles.Cycles = 1. XORLW, 16-Bit Instruction Word.MSb = 0000. XORLW, 16-Bit Instruction Word.MSb = 1010. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, Status Affected. = Z, N. XORLW, Notes. = . DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Mnemonic,.Operands = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Description.Description = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Cycles.Cycles = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Status Affected. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Notes. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. TBLRD*, Mnemonic,.Operands = TBLRD*. TBLRD*, Description.Description = Table Read. TBLRD*, Cycles.Cycles = 2. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word. = 0000. TBLRD*, 16-Bit Instruction Word. = 1000. TBLRD*, Status Affected. = None. TBLRD*, Notes. = . TBLRD*+, Mnemonic,.Operands = TBLRD*+. TBLRD*+,",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nDescription.Description = Table Read with Post-Increment. TBLRD*+, Cycles.Cycles = . TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word. = 0000. TBLRD*+, 16-Bit Instruction Word. = 1001. TBLRD*+, Status Affected. = None. TBLRD*+, Notes. = . TBLRD*-, Mnemonic,.Operands = TBLRD*-. TBLRD*-, Description.Description = Table Read with Post-Decrement. TBLRD*-, Cycles.Cycles = . TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word. = 0000. TBLRD*-, 16-Bit Instruction Word. = 1010. TBLRD*-, Status Affected.",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= None. TBLRD*-, Notes. = . TBLRD+*, Mnemonic,.Operands = TBLRD+*. TBLRD+*, Description.Description = Table Read with Pre-Increment. TBLRD+*, Cycles.Cycles = . TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word. = 0000. TBLRD+*, 16-Bit Instruction Word. = 1011. TBLRD+*, Status Affected. = None. TBLRD+*, Notes. = . TBLWT*, Mnemonic,.Operands = TBLWT*. TBLWT*, Description.Description = Table Write. TBLWT*, Cycles.Cycles = 2. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word. =",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n0000. TBLWT*, 16-Bit Instruction Word. = 1100. TBLWT*, Status Affected. = None. TBLWT*, Notes. = . TBLWT*+, Mnemonic,.Operands = TBLWT*+. TBLWT*+, Description.Description = Table Write with Post-Increment. TBLWT*+, Cycles.Cycles = . TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word. = 0000. TBLWT*+, 16-Bit Instruction Word. = 1101. TBLWT*+, Status Affected. = None. TBLWT*+, Notes. = . TBLWT*-, Mnemonic,.Operands = TBLWT*-. TBLWT*-, Description.Description = Table Write with Post-Decrement. TBLWT*-, Cycles.Cycles = . TBLWT*-, 16-Bit Instruction Word.MSb",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= 0000. TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word. = 0000. TBLWT*-, 16-Bit Instruction Word. = 1110. TBLWT*-, Status Affected. = None. TBLWT*-, Notes. = . TBLWT+*, Mnemonic,.Operands = TBLWT+*. TBLWT+*, Description.Description = Table Write with Pre-Increment. TBLWT+*, Cycles.Cycles = . TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word. = 0000. TBLWT+*, 16-Bit Instruction Word. = 1111. TBLWT+*, Status Affected. = None. TBLWT+*, Notes. = ",
    "TABLE 24-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "24.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Literal to W = ADDLW. Syntax:, ADD Literal to W = k. Syntax:, ADD Literal to W = . Syntax:, ADD Literal to W = . Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = . Operands:, ADD Literal to W = . Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = . Operation:, ADD Literal to W = . Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = . Status Affected:, ADD Literal to W = . Encoding:, ADD Literal to W = 0000. Encoding:, ADD Literal to W = 1111. Encoding:, ADD Literal to W = kkkk. Encoding:, ADD Literal to W = kkkk.",
    "24.1.1 STANDARD INSTRUCTION SET\nDescription:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Words:, ADD Literal to W = 1. Words:, ADD Literal to W = . Words:, ADD Literal to W = . Words:, ADD Literal to W = . Cycles:, ADD Literal to W = 1. Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Q Cycle Activity: Q1, ADD Literal to W = Q2. Q Cycle Activity: Q1, ADD Literal to W = Q3. Q Cycle Activity: Q1, ADD Literal to W = . Q Cycle Activity: Q1,",
    "24.1.1 STANDARD INSTRUCTION SET\nADD Literal to W = Q4. Decode, ADD Literal to W = Read literal 'k'. Decode, ADD Literal to W = Process Data. Decode, ADD Literal to W = . Decode, ADD Literal to W = Write to W. Example:, ADD Literal to W = ADDLW. Example:, ADD Literal to W = 15h. Example:, ADD Literal to W = . Example:, ADD Literal to W = . Before Instruction, ADD Literal to W = Before Instruction. Before Instruction, ADD Literal to W = . Before Instruction, ADD Literal to W = . Before Instruction, ADD Literal to W = . W, ADD Literal to W = 10h. W, ADD Literal to W = . W, ADD Literal to W = . W, ADD Literal to W = . After Instruction, ADD Literal to W = After Instruction. After Instruction, ADD Literal to W = . After Instruction, ADD Literal to W = . After Instruction, ADD Literal to W = . W =, ADD Literal to W = 25h. W =, ADD Literal to W = . W =, ADD Literal to W = . W =, ADD Literal to W = ",
    "24.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Wto f = ADDWF. Syntax:, ADD Wto f = f {,d {,a}}. Syntax:, ADD Wto f = . Syntax:, ADD Wto f = . Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Status Affected:, ADD Wto f",
    "24.1.1 STANDARD INSTRUCTION SET\n= N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Encoding:, ADD Wto f = 0010. Encoding:, ADD Wto f = 01da. Encoding:, ADD Wto f = ffff. Encoding:, ADD Wto f = ffff. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "24.1.1 STANDARD INSTRUCTION SET\n24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select",
    "24.1.1 STANDARD INSTRUCTION SET\nthe GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, ADD Wto f = 1. Words:, ADD Wto f = . Words:, ADD Wto f = . Words:, ADD Wto f = . Cycles:, ADD Wto f",
    "24.1.1 STANDARD INSTRUCTION SET\n= 1. Cycles:, ADD Wto f = . Cycles:, ADD Wto f = . Cycles:, ADD Wto f = \nQ Cycle Activity:",
    "24.1.1 STANDARD INSTRUCTION SET\nExample:, Q2.Read register 'f' = ADDWF. Example:, Q3.Process Data = REG, 0,. Example:, Q4.Write to destination = . Before Instruction, Q2.Read register 'f' = Before Instruction. Before Instruction, Q3.Process Data = . Before Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 17h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = After Instruction. After Instruction, Q4.Write to destination = After Instruction. W, Q2.Read register 'f' = = 0D9h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data =",
    "24.1.1 STANDARD INSTRUCTION SET\n. REG, Q4.Write to destination = \nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction format then becomes: {label} instruction argument(s).",
    "PIC18F2525/2620/4525/4620\nSyntax:, ADD Wand Carry bit to f = ADDWFC f {,d. Syntax:, ADD Wand Carry bit to f = ADDWFC f {,d. Syntax:, ADD Wand Carry bit to f = {,a}}. Syntax:, ADD Wand Carry bit to f = . Operands:, ADD Wand Carry bit to f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wand Carry bit to f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wand Carry bit to f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wand Carry bit to f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, ADD Wand Carry bit to f = (W) + (f) + (C) \u2192 dest. Operation:, ADD Wand Carry bit to f = (W) + (f) + (C) \u2192 dest. Operation:, ADD Wand",
    "PIC18F2525/2620/4525/4620\nCarry bit to f = (W) + (f) + (C) \u2192 dest. Operation:, ADD Wand Carry bit to f = (W) + (f) + (C) \u2192 dest. Status Affected:, ADD Wand Carry bit to f = N,OV, C, DC, Z. Status Affected:, ADD Wand Carry bit to f = N,OV, C, DC, Z. Status Affected:, ADD Wand Carry bit to f = N,OV, C, DC, Z. Status Affected:, ADD Wand Carry bit to f = N,OV, C, DC, Z. Encoding:, ADD Wand Carry bit to f = 0010. Encoding:, ADD Wand Carry bit to f = 00da. Encoding:, ADD Wand Carry bit to f = ffff. Encoding:, ADD Wand Carry bit to f = ffff. Description:, ADD Wand Carry bit to f = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location",
    "PIC18F2525/2620/4525/4620\n'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wand Carry bit to f = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions",
    "PIC18F2525/2620/4525/4620\nin Indexed. Description:, ADD Wand Carry bit to f = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wand Carry bit to f = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR",
    "PIC18F2525/2620/4525/4620\nis used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, ADD Wand Carry bit to f = 1. Words:, ADD Wand Carry bit to f = . Words:, ADD Wand Carry bit to f = . Words:, ADD Wand Carry bit to f = . Cycles:, ADD Wand Carry bit to f = 1. Cycles:, ADD Wand Carry bit to f = . Cycles:, ADD Wand Carry bit to f = . Cycles:, ADD Wand Carry bit to f = \nQ Cycle Activity:",
    "Example:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. , Q2 = ADDWFC. , Q3 = REG, 0,. , Q4 = 1. Before Instruction, Q2 = Before Instruction. Before Instruction, Q3 = Before Instruction. Before Instruction, Q4 = Before Instruction. Carry bit, Q2 = = 1. Carry bit, Q3 = . Carry bit, Q4 = . REG, Q2 = = 02h. REG, Q3 = . REG, Q4 = . W, Q2 = = 4Dh. W, Q3 = . W, Q4 = . After Instruction, Q2 = After Instruction. After Instruction, Q3 = After Instruction. After Instruction, Q4 = After Instruction. Carry bit, Q2 = = 0. Carry bit, Q3 = . Carry bit, Q4 = . REG, Q2 = = 02h. REG, Q3 = . REG, Q4 = . W, Q2 = = 50h. W, Q3 = . W, Q4 = ",
    "Example:\nSyntax:, AND Literal with W = ANDLW. Syntax:, AND Literal with W = k. Syntax:, AND Literal with W = . Syntax:, AND Literal with W = . Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = . Operands:, AND Literal with W = . Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = . Operation:, AND Literal with W = . Status Affected:, AND Literal with W = N, Z. Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Encoding:, AND Literal with W = 0000. Encoding:, AND Literal with W = 1011. Encoding:, AND Literal with W = kkkk. Encoding:, AND Literal with W = kkkk. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal",
    "Example:\n'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Words:, AND Literal with W = 1. Words:, AND Literal with W = . Words:, AND Literal with W = . Words:, AND Literal with W = . Cycles:, AND Literal with W = 1. Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = Q2. Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q1, AND Literal with W = . Q1, AND Literal with W = Q3. Q1, AND Literal with",
    "Example:\nW = . Q1, AND Literal with W = Q4. Decode, AND Literal with W = Read literal 'k'. Decode, AND Literal with W = Process Data. Decode, AND Literal with W = . Decode, AND Literal with W = Write to W\nExample:\nANDLW\nBefore Instruction\nW\n=\nA3h\nAfter Instruction\nW\n=\n03h\n05Fh\nWords:\nCycles:",
    "PIC18F2525/2620/4525/4620\nSyntax:, AND Wwith f = ANDWF. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Operands:, AND Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, AND Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, AND Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, AND Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operation:, AND Wwith f = (W) .AND. (f) \u2192 dest. Operation:, AND Wwith f = (W) .AND. (f) \u2192 dest. Operation:, AND Wwith f = (W) .AND. (f) \u2192 dest. Operation:, AND Wwith f = (W) .AND. (f) \u2192 dest. Status Affected:,",
    "PIC18F2525/2620/4525/4620\nAND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Encoding:, AND Wwith f = 0001. Encoding:, AND Wwith f = 01da. Encoding:, AND Wwith f = ffff. Encoding:, AND Wwith f = ffff. Description:, AND Wwith f = The contents of Ware ANDed with. Description:, AND Wwith f = The contents of Ware ANDed with. Description:, AND Wwith f = The contents of Ware ANDed with. Description:, AND Wwith f = The contents of Ware ANDed with\nregister 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.",
    "PIC18F2525/2620/4525/4620\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nANDWF\nBefore Instruction\nW\n=\n17h\nREG\n=\nC2h\nAfter Instruction\nW\n=\n02h\nREG\n=\nC2h\nREG, 0, 0",
    "PIC18F2525/2620/4525/4620\nSyntax:, Branch if = Syntax:. Syntax:, Carry = BC n. Syntax:, Carry = BC n. Syntax:, Carry = BC n. Syntax:, Carry = BC n. Syntax:, Carry = BC n. Operands:, Branch if = Operands:. Operands:, Carry = -128 \u2264 n \u2264 127. Operands:, Carry = -128 \u2264 n \u2264 127. Operands:, Carry = -128 \u2264 n \u2264 127. Operands:, Carry = -128 \u2264 n \u2264 127. Operands:, Carry = -128 \u2264 n \u2264 127. Operation:, Branch if = Operation:. Operation:, Carry = if Carry bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Carry = if Carry bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Carry = if Carry bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Carry = if Carry bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Carry = if Carry bit is ' 1",
    "PIC18F2525/2620/4525/4620\n', (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if = Status Affected:. Status Affected:, Carry = None. Status Affected:, Carry = None. Status Affected:, Carry = None. Status Affected:, Carry = None. Status Affected:, Carry = None. Encoding:, Branch if = Encoding:. Encoding:, Carry = 1110. Encoding:, Carry = 1110. Encoding:, Carry = 0010. Encoding:, Carry = nnnn. Encoding:, Carry = nnnn. Description:, Branch if = Description:. Description:, Carry = If the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Carry = If the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to",
    "PIC18F2525/2620/4525/4620\nfetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Carry = If the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Carry = If the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Carry = If the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a",
    "PIC18F2525/2620/4525/4620\ntwo-cycle instruction.. Words:, Branch if = Words:. Words:, Carry = 1. Words:, Carry = 1. Words:, Carry = 1. Words:, Carry = 1. Words:, Carry = 1. Cycles:, Branch if = Cycles:. Cycles:, Carry = 1(2). Cycles:, Carry = 1(2). Cycles:, Carry = 1(2). Cycles:, Carry = 1(2). Cycles:, Carry = 1(2). Q Cycle Activity: If Jump:, Branch if = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Carry = . Q Cycle Activity: If Jump:, Carry = . Q Cycle Activity: If Jump:, Carry = . Q Cycle Activity: If Jump:, Carry = . Q Cycle Activity: If Jump:, Carry = . Q1, Branch if = Q1. Q1, Carry = . Q1, Carry = . Q1, Carry = . Q1, Carry = . Q1, Carry = . , Branch if = . , Carry = Q2. , Carry = . , Carry =",
    "PIC18F2525/2620/4525/4620\nQ3. , Carry = . , Carry = Q4. , Branch if = Decode. , Carry = Read literal 'n'. , Carry = Read literal 'n'. , Carry = Process Data. , Carry = Process Data. , Carry = Write to PC. , Branch if = No operation. , Carry = No operation. , Carry = No operation. , Carry = No operation. , Carry = No operation. , Carry = No operation. If No Jump:, Branch if = If No Jump:. If No Jump:, Carry = . If No Jump:, Carry = . If No Jump:, Carry = . If No Jump:, Carry = . If No Jump:, Carry = . , Branch if = Q1. , Carry = Q2. , Carry = Q2. , Carry = Q3. , Carry = Q3. , Carry = Q4. , Branch if = Decode. , Carry = Read literal 'n'. , Carry = Read literal 'n'. , Carry = Process Data. , Carry = Process Data. , Carry = No operation. Example:, Branch if = Example:. Example:, Carry =",
    "PIC18F2525/2620/4525/4620\nHERE. Example:, Carry = HERE. Example:, Carry = 5. Example:, Carry = 5. Example:, Carry = . Before Instruction, Branch if = Before Instruction. Before Instruction, Carry = Before Instruction. Before Instruction, Carry = . Before Instruction, Carry = . Before Instruction, Carry = . Before Instruction, Carry = . , Branch if = PC. , Carry = =. , Carry = address. , Carry = address. , Carry = (HERE). , Carry = (HERE). After, Branch if = Instruction If Carry. After, Carry = = =. After, Carry = 1; address. After, Carry = 1; address. After, Carry = . After, Carry = . , Branch if = If Carry 0; PC. , Carry = = =. , Carry = . , Carry = . , Carry = + 12) + 2). , Carry = + 12) + 2)",
    "PIC18F2525/2620/4525/4620\nSyntax:, Bit Clear f = BCF f, b {,a}. Syntax:, Bit Clear f = BCF f, b {,a}. Syntax:, Bit Clear f = BCF f, b {,a}. Syntax:, Bit Clear f = BCF f, b {,a}. Operands:, Bit Clear f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, Bit Clear f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, Bit Clear f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, Bit Clear f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operation:, Bit Clear f = 0 \u2192 f<b>. Operation:, Bit Clear f = 0 \u2192 f<b>. Operation:, Bit Clear f = 0 \u2192 f<b>. Operation:, Bit Clear f = 0 \u2192 f<b>. Status Affected:, Bit Clear f = None. Status Affected:,",
    "PIC18F2525/2620/4525/4620\nBit Clear f = None. Status Affected:, Bit Clear f = None. Status Affected:, Bit Clear f = None. Encoding:, Bit Clear f = 1001. Encoding:, Bit Clear f = bbba. Encoding:, Bit Clear f = ffff. Encoding:, Bit Clear f = ffff. Description:, Bit Clear f = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Clear f = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is",
    "PIC18F2525/2620/4525/4620\n' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Clear f = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Clear f = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is",
    "PIC18F2525/2620/4525/4620\nenabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Bit Clear f = 1. Words:, Bit Clear f = 1. Words:, Bit Clear f = 1. Words:, Bit Clear f = 1. Cycles:, Bit Clear f = 1. Cycles:, Bit Clear f = 1. Cycles:, Bit Clear f = 1. Cycles:, Bit Clear f = 1. Q Cycle Activity:, Bit Clear f = . Q Cycle Activity:, Bit Clear f = . Q Cycle Activity:, Bit Clear f = . Q Cycle Activity:, Bit Clear f = . Q1, Bit Clear f = Q2. Q1, Bit Clear f = Q2. Q1, Bit Clear f = Q3. Q1, Bit Clear f = Q4. Decode, Bit Clear f = Read register 'f'. Decode, Bit Clear f = . Decode, Bit Clear f = Process Data. Decode, Bit Clear f = Write register",
    "PIC18F2525/2620/4525/4620\n'f'. Before Instruction, Bit Clear f = Before Instruction. Before Instruction, Bit Clear f = C7h. Before Instruction, Bit Clear f = C7h. Before Instruction, Bit Clear f = C7h",
    "PIC18F2525/2620/4525/4620\nSyntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operation:, Branch if Negative = if Negative bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1",
    "PIC18F2525/2620/4525/4620\n', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Encoding:, Branch if Negative = 1110. Encoding:, Branch if Negative = 1110. Encoding:, Branch if Negative = 0110 nnnn. Encoding:, Branch if Negative = 0110 nnnn. Encoding:, Branch if Negative = nnnn. Encoding:, Branch if Negative = . Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction,",
    "PIC18F2525/2620/4525/4620\nthe new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a",
    "PIC18F2525/2620/4525/4620\ntwo-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative =",
    "PIC18F2525/2620/4525/4620\n1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q1, Branch if Negative = Q2. Q1, Branch if Negative = . Q1, Branch if Negative = Q3. Q1, Branch if Negative = . Q1, Branch if Negative = Q4. Q1, Branch if Negative = . , Branch if Negative = Decode. , Branch if Negative = Read literal 'n'. , Branch if Negative = Process Data. , Branch if Negative = Process Data. , Branch if Negative = Write to PC. , Branch if Negative = . , Branch if Negative = No operation. , Branch if Negative = No operation. , Branch if",
    "PIC18F2525/2620/4525/4620\nNegative = No operation. , Branch if Negative = No operation. , Branch if Negative = No operation. , Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . , Branch if Negative = Q1. , Branch if Negative = Q2. , Branch if Negative = Q3. , Branch if Negative = Q3. , Branch if Negative = Q4. , Branch if Negative = . , Branch if Negative = Decode. , Branch if Negative = Read literal 'n'. , Branch if Negative = Process Data. , Branch if Negative = Process Data. , Branch if Negative = No operation. , Branch if Negative = . Example:, Branch if Negative = Example:. Example:, Branch if Negative = HERE. Example:, Branch if Negative = BN Jump. Example:, Branch if Negative = . Example:, Branch if Negative = . Example:, Branch if Negative = . Before Instruction, Branch if Negative =",
    "PIC18F2525/2620/4525/4620\nBefore Instruction. Before Instruction, Branch if Negative = Before Instruction. Before Instruction, Branch if Negative = . Before Instruction, Branch if Negative = . Before Instruction, Branch if Negative = . Before Instruction, Branch if Negative = . , Branch if Negative = PC If Negative. , Branch if Negative = =. , Branch if Negative = address (HERE). , Branch if Negative = . , Branch if Negative = . , Branch if Negative = . , Branch if Negative = After Instruction PC. , Branch if Negative = = =. , Branch if Negative = 1; address (Jump). , Branch if Negative = . , Branch if Negative = . , Branch if Negative = . , Branch if Negative = If Negative PC. , Branch if Negative = = =. , Branch if Negative = 0; address (HERE. , Branch if Negative = +. , Branch if Negative = 2). , Branch if Negative = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Branch if Not Carry = BNC n. Syntax:, Branch if Not Carry = BNC n. Syntax:, Branch if Not Carry = BNC n. Syntax:, Branch if Not Carry = BNC n. Syntax:, Branch if Not Carry = BNC n. Operands:, Branch if Not Carry = -128 \u2264 n \u2264 127. Operands:, Branch if Not Carry = -128 \u2264 n \u2264 127. Operands:, Branch if Not Carry = -128 \u2264 n \u2264 127. Operands:, Branch if Not Carry = -128 \u2264 n \u2264 127. Operands:, Branch if Not Carry = -128 \u2264 n \u2264 127. Operation:, Branch if Not Carry = if Carry bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Carry = if Carry bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Carry = if Carry bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Carry = if Carry bit is ' 0 ', (PC) + 2",
    "PIC18F2525/2620/4525/4620\n+ 2n \u2192 PC. Operation:, Branch if Not Carry = if Carry bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if Not Carry = None. Status Affected:, Branch if Not Carry = None. Status Affected:, Branch if Not Carry = None. Status Affected:, Branch if Not Carry = None. Status Affected:, Branch if Not Carry = None. Encoding:, Branch if Not Carry = 1110. Encoding:, Branch if Not Carry = 1110. Encoding:, Branch if Not Carry = 0011. Encoding:, Branch if Not Carry = nnnn. Encoding:, Branch if Not Carry = nnnn. Description:, Branch if Not Carry = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Carry = If the Carry bit is ' 0 ', then the program will",
    "PIC18F2525/2620/4525/4620\nbranch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Carry = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Carry = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Carry = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added",
    "PIC18F2525/2620/4525/4620\nto the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Carry = 1. Words:, Branch if Not Carry = 1. Words:, Branch if Not Carry = 1. Words:, Branch if Not Carry = 1. Words:, Branch if Not Carry = 1. Cycles:, Branch if Not Carry = 1(2). Cycles:, Branch if Not Carry = 1(2). Cycles:, Branch if Not Carry = 1(2). Cycles:, Branch if Not Carry = 1(2). Cycles:, Branch if Not Carry = 1(2). Q Cycle Activity: If Jump:, Branch if Not Carry = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Carry = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Carry = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Carry = Q Cycle Activity: If Jump:. Q Cycle",
    "PIC18F2525/2620/4525/4620\nActivity: If Jump:, Branch if Not Carry = Q Cycle Activity: If Jump:. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:, Branch if Not Carry = Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:. Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:, Branch if Not Carry = Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:. Decode Read literal",
    "PIC18F2525/2620/4525/4620\n'n' Process Data Write to PC No operation No operation No operation No operation Jump:, Branch if Not Carry = Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:. Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:, Branch if Not Carry = Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:. Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:, Branch if Not Carry = Decode Read literal 'n' Process Data Write to PC No operation No operation No operation No operation Jump:. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Q1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4.",
    "PIC18F2525/2620/4525/4620\nQ1 Q2 Q3 Q4, Branch if Not Carry = Q1 Q2 Q3 Q4. Decode Read literal 'n' Process Data No operation, Branch if Not Carry = Decode Read literal 'n' Process Data No operation. Decode Read literal 'n' Process Data No operation, Branch if Not Carry = Decode Read literal 'n' Process Data No operation. Decode Read literal 'n' Process Data No operation, Branch if Not Carry = Decode Read literal 'n' Process Data No operation. Decode Read literal 'n' Process Data No operation, Branch if Not Carry = Decode Read literal 'n' Process Data No operation. Decode Read literal 'n' Process Data No operation, Branch if Not Carry = Decode Read literal 'n' Process Data No operation. HERE BNC Jump, Branch if Not Carry = HERE BNC Jump. HERE BNC Jump, Branch if Not Carry = HERE BNC Jump. HERE BNC Jump, Branch if Not Carry = HERE BNC Jump. HERE BNC Jump, Branch if Not Carry = HERE BNC Jump. HERE BNC Jump, Branch if Not Carry = HERE BNC",
    "PIC18F2525/2620/4525/4620\nJump. Example: Before Instruction, Branch if Not Carry = Example: Before Instruction. Example: Before Instruction, Branch if Not Carry = Example: Before Instruction. Example: Before Instruction, Branch if Not Carry = Example: Before Instruction. Example: Before Instruction, Branch if Not Carry = Example: Before Instruction. Example: Before Instruction, Branch if Not Carry = Example: Before Instruction. , Branch if Not Carry = . , Branch if Not Carry = =. , Branch if Not Carry = address. , Branch if Not Carry = (HERE). , Branch if Not Carry = . PC, Branch if Not Carry = PC. PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = =. , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . After Instruction, Branch if Not Carry = After Instruction. After Instruction, Branch if Not Carry = . After Instruction, Branch if Not Carry = . After Instruction, Branch if Not Carry = . After Instruction, Branch if Not Carry = . If",
    "PIC18F2525/2620/4525/4620\nCarry =, Branch if Not Carry = If Carry =. If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = address. , Branch if Not Carry = address. , Branch if Not Carry = address. PC, Branch if Not Carry = PC. PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = (Jump). , Branch if Not Carry = (Jump). , Branch if Not Carry = (Jump). If Carry =, Branch if Not Carry = If Carry =. If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . If Carry =, Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = .",
    "PIC18F2525/2620/4525/4620\n, Branch if Not Carry = (HERE +. , Branch if Not Carry = (HERE +. , Branch if Not Carry = (HERE +. , Branch if Not Carry = . , Branch if Not Carry = =. , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = 2). , Branch if Not Carry = 2). , Branch if Not Carry = 2). PC, Branch if Not Carry = PC. PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . PC, Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = . , Branch if Not Carry = address. , Branch if Not Carry = address. , Branch if Not Carry = address. 1;, Branch if Not Carry = 1;. 1;, Branch if Not Carry = 1;. 1;, Branch if Not Carry = 1;. 1;, Branch if Not Carry = 1;. 1;, Branch if Not Carry = 1;",
    "PIC18F2525/2620/4525/4620\nSyntax:, BNN = Syntax:. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Syntax:, Branch if Not Negative = BNN n. Operands:, BNN = Operands:. Operands:, Branch if Not Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Not Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Not Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Not Negative = -128 \u2264 n \u2264 127. Operation:, BNN = Operation:. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Negative = if Negative bit is ' 0 ', (PC) +",
    "PIC18F2525/2620/4525/4620\n2 + 2n \u2192 PC. Status Affected:, BNN = Status Affected:. Status Affected:, Branch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Status Affected:, Branch if Not Negative = None. Encoding:, BNN = Encoding:. Encoding:, Branch if Not Negative = 1110. Encoding:, Branch if Not Negative = 1110. Encoding:, Branch if Not Negative = 0111. Encoding:, Branch if Not Negative = nnnn. Description:, BNN = Description:. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the",
    "PIC18F2525/2620/4525/4620\nPC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Negative = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BNN = Words:. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Words:, Branch if Not Negative = 1. Cycles:, BNN =",
    "PIC18F2525/2620/4525/4620\nCycles:. Cycles:, Branch if Not Negative = 1(2). Cycles:, Branch if Not Negative = 1(2). Cycles:, Branch if Not Negative = 1(2). Cycles:, Branch if Not Negative = 1(2). Q Cycle Activity:, BNN = Q Cycle Activity:. Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . Q Cycle Activity:, Branch if Not Negative = . Jump: Q1, BNN = Jump: Q1. Jump: Q1, Branch if Not Negative = . Jump: Q1, Branch if Not Negative = . Jump: Q1, Branch if Not Negative = . Jump: Q1, Branch if Not Negative = . , BNN = . , Branch if Not Negative = Q2. , Branch if Not Negative = . , Branch if Not Negative = Q3. , Branch if Not Negative = . , BNN = Decode. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative",
    "PIC18F2525/2620/4525/4620\n= Process Data. , Branch if Not Negative = Process Data. , BNN = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation. , Branch if Not Negative = No operation. If No Jump:, BNN = If No Jump:. If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . If No Jump:, Branch if Not Negative = . , BNN = Q1. , Branch if Not Negative = Q2. , Branch if Not Negative = Q2. , Branch if Not Negative = Q3. , Branch if Not Negative = Q3. , BNN = Decode. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Read literal 'n'. , Branch if Not Negative = Process Data. , Branch if Not Negative = Process Data. Example:, BNN = Example:. Example:, Branch if Not Negative = HERE. Example:, Branch if Not Negative = HERE. Example:, Branch if Not Negative =",
    "PIC18F2525/2620/4525/4620\nBNN. Example:, Branch if Not Negative = Jump. Before Instruction, BNN = Before Instruction. Before Instruction, Branch if Not Negative = Before Instruction. Before Instruction, Branch if Not Negative = . Before Instruction, Branch if Not Negative = . Before Instruction, Branch if Not Negative = . , BNN = PC. , Branch if Not Negative = =. , Branch if Not Negative = address. , Branch if Not Negative = address. , Branch if Not Negative = (HERE). , BNN = After Instruction. , Branch if Not Negative = After Instruction. , Branch if Not Negative = . , Branch if Not Negative = . , Branch if Not Negative = . , BNN = If Negative = PC =. , Branch if Not Negative = If Negative = PC =. , Branch if Not Negative = 0; address. , Branch if Not Negative = 0; address. , Branch if Not Negative = (Jump). , BNN = If Negative = PC =. , Branch if Not Negative = If Negative = PC =. , Branch if Not Negative = 1; address. , Branch if Not Negative = 1; address. , Branch if Not Negative = (HERE",
    "PIC18F2525/2620/4525/4620\nSyntax:, BNOV = Syntax:. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Operands:, BNOV = Operands:. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operation:, BNOV = Operation:. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not",
    "PIC18F2525/2620/4525/4620\nOverflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Status Affected:, BNOV = Status Affected:. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Encoding:, BNOV = Encoding:. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 0101. Encoding:, Branch if Not Overflow = nnnn. Description:, BNOV = Description:. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is",
    "PIC18F2525/2620/4525/4620\n' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BNOV = Words:. Words:, Branch if Not Overflow = 1. Words:,",
    "PIC18F2525/2620/4525/4620\nBranch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Cycles:, BNOV = Cycles:. Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Q Cycle Activity:, BNOV = Q Cycle Activity:. Q Cycle Activity:, Branch if Not Overflow = . Q Cycle Activity:, Branch if Not Overflow = . Q Cycle Activity:, Branch if Not Overflow = . Q Cycle Activity:, Branch if Not Overflow = . , BNOV = Q1. , Branch if Not Overflow = Q2. , Branch if Not Overflow = . , Branch if Not Overflow = Q3. , Branch if Not Overflow = . , BNOV = Decode. , Branch if Not Overflow = Read literal 'n'. , Branch if Not Overflow = Read literal 'n'. , Branch if Not Overflow = Process Data.",
    "PIC18F2525/2620/4525/4620\n, Branch if Not Overflow = Process Data. , BNOV = No operation. , Branch if Not Overflow = No operation. , Branch if Not Overflow = No operation. , Branch if Not Overflow = No operation. , Branch if Not Overflow = No operation. , BNOV = Q1. , Branch if Not Overflow = Q2. , Branch if Not Overflow = Q2. , Branch if Not Overflow = Q3. , Branch if Not Overflow = Q3. , BNOV = Decode. , Branch if Not Overflow = Read literal 'n'. , Branch if Not Overflow = Read literal 'n'. , Branch if Not Overflow = Process Data. , Branch if Not Overflow = Process Data. Example:, BNOV = Example:. Example:, Branch if Not Overflow = HERE. Example:, Branch if Not Overflow = HERE. Example:, Branch if Not Overflow = BNOV Jump. Example:, Branch if Not Overflow = BNOV Jump. , BNOV = Before Instruction. , Branch if Not Overflow = Before Instruction. , Branch if Not Overflow = . , Branch if",
    "PIC18F2525/2620/4525/4620\nNot Overflow = . , Branch if Not Overflow = . , BNOV = If Overflow PC = If Overflow =. , Branch if Not Overflow = If Overflow PC = If Overflow =. , Branch if Not Overflow = = 0;. , Branch if Not Overflow = = 0;. , Branch if Not Overflow = = 0;. , BNOV = PC =. , Branch if Not Overflow = PC =. , Branch if Not Overflow = 1; address (HERE +. , Branch if Not Overflow = 1; address (HERE +. , Branch if Not Overflow = 1; address (HERE +",
    "PIC18F2525/2620/4525/4620\nSyntax:, Branch if Not Zero = BNZ n. Syntax:,  = . Syntax:,  = . Syntax:,  = . Syntax:,  = . Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:,  = . Operands:,  = . Operands:,  = . Operands:,  = . Operation:, Branch if Not Zero = if Zero bit is ' 0 ', (PC) + 2 + 2n \u2192 PC. Operation:,  = . Operation:,  = . Operation:,  = . Operation:,  = . Status Affected:, Branch if Not Zero = None. Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Encoding:, Branch if Not Zero = 1110. Encoding:,  = 0001. Encoding:,  = nnnn. Encoding:,  = nnnn. Encoding:,",
    "PIC18F2525/2620/4525/4620\n= . Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:,  = . Description:,  = . Description:,  = . Description:,  = . Words:, Branch if Not Zero = 1. Words:,  = . Words:,  = . Words:,  = . Words:,  = . Cycles:, Branch if Not Zero = 1(2). Cycles:,  = . Cycles:,  = . Cycles:,  = . Cycles:,  = . Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:,  = . Q Cycle Activity: If Jump:,  = . Q Cycle Activity: If Jump:,  = . Q Cycle Activity: If Jump:,  = . Q1, Branch if Not Zero = Q2. Q1,  = . Q1,  = Q3. Q1,",
    "PIC18F2525/2620/4525/4620\n= Q4. Q1,  = . Decode, Branch if Not Zero = Read literal 'n' Process Data Write to PC No operation No operation No operation. Decode,  = . Decode,  = . Decode,  = . Decode,  = . Q1, Branch if Not Zero = . Q1,  = . Q1,  = . Q1,  = . Q1,  = . Decode, Branch if Not Zero = Q2 Q3 Q4 literal Process Data No. Decode,  = . Decode,  = . Decode,  = . Decode,  = . , Branch if Not Zero = HERE. ,  = . ,  = . ,  = Jump. ,  = . Before, Branch if Not Zero = Read 'n' Instruction. Before,  = address. Before,  = . Before,  = operation. Before,  = . Example:, Branch if Not Zero = . Example:,  = . Example:,  = BNZ. Example:,  = . Example:,  = . , Branch if Not Zero = . ,  = . ,  = (HERE). ,  = . ,  = . , Branch if Not Zero = =. ,  = . ,  = . ,",
    "PIC18F2525/2620/4525/4620\n= +. ,  = . PC After Instruction If Zero, Branch if Not Zero = =. PC After Instruction If Zero,  = . PC After Instruction If Zero,  = . PC After Instruction If Zero,  = . PC After Instruction If Zero,  = . If Zero, Branch if Not Zero = . If Zero,  = . If Zero,  = . If Zero,  = . If Zero,  = . PC, Branch if Not Zero = . PC,  = 1;. PC,  = . PC,  = . PC,  = . , Branch if Not Zero = =. ,  = . ,  = . ,  = . ,  = . , Branch if Not Zero = =. ,  = . ,  = . ,  = . ,  = . , Branch if Not Zero = =. ,  = 0;. ,  = . ,  = . ,  = . PC, Branch if Not Zero = . PC,  = . PC,  = . PC,  = . PC,  = . , Branch if Not Zero = . ,  = . ,  = . ,  = (Jump). ,  = . , Branch if Not Zero = . ,  = . ,  = address. ,  = . ,  = . , Branch if Not Zero = . ,",
    "PIC18F2525/2620/4525/4620\n= . ,  = . ,  = (HERE. ,  = . , Branch if Not Zero = . ,  = address. ,  = . ,  = . ,  = . , Branch if Not Zero = . ,  = . ,  = . ,  = . ,  = 2)\nBRA\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:",
    "Unconditional Branch\nBRA    n\n-1024 \u2264 n \u2264 1023\n(PC) + 2 + 2n \u2192 PC\nNone\n1101\n0nnn nnnn\nnnnn\nDescription:\nAdd the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nDecode, 1 = Read literal 'n'. Decode, 2 = Process Data. Decode, 3 = Write to PC. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nBefore Instruction PC, HERE = =. Before Instruction PC, BRA = address. Before Instruction PC, Jump = (HERE). After Instruction PC, HERE = =. After Instruction PC, BRA = address. After Instruction PC, Jump = (Jump)",
    "PIC18F2525/2620/4525/4620\nSyntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 \u2208. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 \u2208. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 \u2208. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 \u2208. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f =",
    "PIC18F2525/2620/4525/4620\nNone. Encoding:, Bit Set f = 1000. Encoding:, Bit Set f = bbba. Encoding:, Bit Set f = ffff. Encoding:, Bit Set f = ffff. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95",
    "PIC18F2525/2620/4525/4620\n(5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "PIC18F2525/2620/4525/4620\n24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . Q1, Bit Set f = . , Bit Set f = Q2 Read. , Bit Set f = Q3. , Bit Set f = Q3. , Bit Set f = Q4 Write register 'f'. Decode Example:, Bit Set f = register 'f' BSF. Decode Example:, Bit Set f = Process Data FLAG_REG, 7,. Decode",
    "PIC18F2525/2620/4525/4620\nExample:, Bit Set f = Process Data FLAG_REG, 7,. Decode Example:, Bit Set f = 1. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = =. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = 0Ah. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = 0Ah. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = \nQ4\nBTFSC",
    "Bit Test File, Skip if Clear\nSyntax:\nBTFSC   f, b {,a}\nOperands:\n0 \u2264 f \u2264 255\n0 \u2264 b \u2264 7\na \u2208 [0,1]\nOperation:\nskip if (f<b>) = 0\nStatus Affected:\nNone\nEncoding:\n1011\nbbba\nffff\nffff\nDescription:\nIf bit 'b' in register 'f' is ' 0 ', then the next instruction is skipped. If bit 'b' is ' 0 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh).\nSee Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Bit Test File, Skip if Clear\nSyntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>)",
    "Bit Test File, Skip if Clear\n= 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Encoding:, Bit Test File, Skip if Set = 1010. Encoding:, Bit Test File, Skip if Set = bbba. Encoding:, Bit Test File, Skip if Set = ffff. Encoding:, Bit Test File, Skip if Set = ffff. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If",
    "Bit Test File, Skip if Clear\n'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1",
    "Bit Test File, Skip if Clear\n', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and",
    "Bit Test File, Skip if Clear\nthe extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and. Words:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = . Words:, Bit Test File, Skip if Set = . Words:, Bit Test File, Skip if Set = . Cycles:, Bit Test File, Skip if Set = 1(2) Note:. Cycles:, Bit Test File, Skip if Set = . Cycles:, Bit Test File, Skip if Set = . Cycles:, Bit Test File, Skip if Set = followed",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation",
    "If skip:\nNo operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nBefore Instruction PC, HERE = =. Before Instruction PC, BTFSC : = address. Before Instruction PC, FLAG, = (HERE). Before Instruction PC, 1, 0 = . After Instruction If FLAG<1> PC If FLAG<1> PC, HERE = = = = =. After Instruction If FLAG<1> PC If FLAG<1> PC, BTFSC : = 0; address 1; address. After Instruction If FLAG<1> PC If FLAG<1> PC, FLAG, = (TRUE). After Instruction If FLAG<1> PC If FLAG<1> PC, 1, 0 = \n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation\nIf skip:\nNo operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSS\n:\n:\nFLAG, 1, 0\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress (FALSE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress (TRUE)\nWords:\nCycles:",
    "PIC18F2525/2620/4525/4620\nSyntax:, Bit Toggle f = BTG f, b {,a}. Syntax:, Bit Toggle f = BTG f, b {,a}. Syntax:, Bit Toggle f = BTG f, b {,a}. Syntax:, Bit Toggle f = BTG f, b {,a}. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255. , Bit Toggle f = 0 \u2264 b < 7. , Bit Toggle f = 0 \u2264 b < 7. , Bit Toggle f = 0 \u2264 b < 7. , Bit Toggle f = 0 \u2264 b < 7. , Bit Toggle f = a \u2208 [0,1]. , Bit Toggle f = a \u2208 [0,1]. , Bit Toggle f = a \u2208 [0,1]. , Bit Toggle f = a \u2208 [0,1]. Operation:, Bit Toggle",
    "PIC18F2525/2620/4525/4620\nf = (f<b>) \u2192 f<b>. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Encoding:, Bit Toggle f = 0111. Encoding:, Bit Toggle f = bbba. Encoding:, Bit Toggle f = ffff. Encoding:, Bit Toggle f = ffff. Description:, Bit Toggle f = Bit 'b' in data memory location 'f' is. Description:, Bit Toggle f = Bit 'b' in data memory location 'f' is. Description:, Bit Toggle f = Bit 'b' in data memory location 'f' is. Description:, Bit Toggle f = Bit 'b' in data memory location",
    "PIC18F2525/2620/4525/4620\n'f' is\nBit 'b' in data memory location 'f' is inverted.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write register 'f'\nExample:\nBTG\nPORTC,\n4, 0\nBefore Instruction:\nPORTC\n=\n0111 0101 [75h]\nAfter Instruction:\nPORTC\n=\n0110 0101 [65h]",
    "PIC18F2525/2620/4525/4620\nSyntax:, BOV = Syntax:. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Syntax:, Branch if Overflow = BOV n. Operands:, BOV = Operands:. Operands:, Branch if Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Overflow = -128 \u2264 n \u2264 127. Operation:, BOV = Operation:. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ', (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Overflow = if Overflow bit is ' 1 ',",
    "PIC18F2525/2620/4525/4620\n(PC) + 2 + 2n \u2192 PC. Status Affected:, BOV = Status Affected:. Status Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Status Affected:, Branch if Overflow = None. Encoding:, BOV = Encoding:. Encoding:, Branch if Overflow = 1110. Encoding:, Branch if Overflow = 1110. Encoding:, Branch if Overflow = 0100. Encoding:, Branch if Overflow = nnnn. Description:, BOV = Description:. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added",
    "PIC18F2525/2620/4525/4620\nto the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Overflow = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BOV = Words:. Words:, Branch if Overflow = 1. Words:, Branch if Overflow = 1. Words:, Branch if Overflow = 1. Words:, Branch if Overflow =",
    "PIC18F2525/2620/4525/4620\n1. Cycles:, BOV = Cycles:. Cycles:, Branch if Overflow = 1(2). Cycles:, Branch if Overflow = 1(2). Cycles:, Branch if Overflow = 1(2). Cycles:, Branch if Overflow = 1(2). Q Cycle Activity:, BOV = Q Cycle Activity:. Q Cycle Activity:, Branch if Overflow = . Q Cycle Activity:, Branch if Overflow = . Q Cycle Activity:, Branch if Overflow = . Q Cycle Activity:, Branch if Overflow = . , BOV = Q1. , Branch if Overflow = Q2. , Branch if Overflow = . , Branch if Overflow = Q3. , Branch if Overflow = . , BOV = Decode. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Process Data. , Branch if Overflow = Process Data. , BOV = No operation. , Branch if Overflow = No operation. , Branch if Overflow = No operation. , Branch if Overflow = No operation.",
    "PIC18F2525/2620/4525/4620\n, Branch if Overflow = No operation. , BOV = Q1. , Branch if Overflow = Q2. , Branch if Overflow = Q2. , Branch if Overflow = Q3. , Branch if Overflow = Q3. , BOV = Decode. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Read literal 'n'. , Branch if Overflow = Process Data. , Branch if Overflow = Process Data. Example:, BOV = Example:. Example:, Branch if Overflow = HERE. Example:, Branch if Overflow = HERE. Example:, Branch if Overflow = BOV. Example:, Branch if Overflow = Jump. , BOV = Before Instruction. , Branch if Overflow = Before Instruction. , Branch if Overflow = . , Branch if Overflow = . , Branch if Overflow = . , BOV = PC. , Branch if Overflow = . , Branch if Overflow = =. , Branch if Overflow = address. , Branch if Overflow = (HERE). , BOV = If Overflow = PC =. , Branch if",
    "PIC18F2525/2620/4525/4620\nOverflow = If Overflow = PC =. , Branch if Overflow = =. , Branch if Overflow = address 0;. , Branch if Overflow = (Jump). , BOV = If Overflow PC =. , Branch if Overflow = If Overflow PC =. , Branch if Overflow = . , Branch if Overflow = address. , Branch if Overflow = (HERE",
    "Branch if Zero\nSyntax:\nBZ    n\nOperands:\n-128 \u2264 n \u2264 127\nOperation:\nif Zero bit is ' 1 ',\n(PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1110\n0000\nnnnn\nnnnn\nDescription:\nIf the Zero bit is ' 1 ', then the program will branch.\nThe 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\nWords:\n1\nCycles:\n1(2)\nQ Cycle Activity: If Jump:\nDecode, Q2 = Read literal 'n'. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:\nQ1\nDecode\nQ2\nRead literal\nQ3\nProcess\nQ4\nNo\n'n'\nData operation\nExample:\nHERE\nBZ\nJump\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Zero\n=\n1;\nPC\n=\naddress\n(Jump)\nIf Zero\n=\n0;\nPC\n=",
    "Branch if Zero\naddress (HERE + 2)",
    "Branch if Zero\nSyntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, \u2192. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, \u2192. Operation:,",
    "Branch if Zero\nSubroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, \u2192. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, \u2192. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 110s k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd",
    "Branch if Zero\nword(k<19:8>), Subroutine Call = kkkk 0 kkkk 8. Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.. Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.. Description:,",
    "Branch if Zero\nSubroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.. Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.. Words:, Subroutine Call = 2. Words:, Subroutine Call = 2. Words:, Subroutine Call = 2.",
    "Branch if Zero\nWords:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q1, Subroutine Call = Q2. Q1, Subroutine Call = Q3. Q1, Subroutine Call = Q4. Q1, Subroutine Call = Q4. Decode, Subroutine Call = Read literal 'k'<7:0>,. Decode, Subroutine Call = PUSHPCto stack. Decode, Subroutine Call = Read literal 'k'<19:8>, Write to PC. Decode, Subroutine Call = Read literal 'k'<19:8>, Write to PC. No operation, Subroutine Call = No operation. No operation, Subroutine Call = No",
    "Branch if Zero\noperation. No operation, Subroutine Call = No operation. No operation, Subroutine Call = No operation\nBefore Instruction, HERE = . Before Instruction, CALL THERE, 1 = . PC, HERE = =. PC, CALL THERE, 1 = address (HERE). After Instruction, HERE = . After Instruction, CALL THERE, 1 = . PC, HERE = =. PC, CALL THERE, 1 = address (THERE). TOS, HERE = =. TOS, CALL THERE, 1 = address (HERE + 4). WS, HERE = =. WS, CALL THERE, 1 = W. BSRS, HERE = =. BSRS, CALL THERE, 1 = BSR. STATUSS=, HERE = . STATUSS=, CALL THERE, 1 = STATUS",
    "PIC18F2525/2620/4525/4620\nCLRF, 1 = Clear f. CLRF, 2 = Clear f. CLRF, 3 = Clear f. CLRF, 4 = Clear f. Syntax:, 1 = CLRF f {,a}. Syntax:, 2 = CLRF f {,a}. Syntax:, 3 = CLRF f {,a}. Syntax:, 4 = CLRF f {,a}. Operands:, 1 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, 2 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, 4 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, 1 = 000h \u2192 f, 1 \u2192 Z. Operation:, 2 = 000h \u2192 f, 1 \u2192 Z. Operation:, 3 = 000h \u2192 f, 1 \u2192 Z. Operation:, 4 = 000h \u2192 f, 1 \u2192 Z. Status Affected:, 1 = Z. Status Affected:, 2 = Z. Status Affected:, 3 = Z. Status",
    "PIC18F2525/2620/4525/4620\nAffected:, 4 = Z. Encoding:, 1 = 0110. Encoding:, 2 = 101a. Encoding:, 3 = ffff. Encoding:, 4 = ffff. Description:, 1 = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3",
    "PIC18F2525/2620/4525/4620\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:,",
    "PIC18F2525/2620/4525/4620\n1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = Q2. Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Decode, 1 = Read register 'f'. Decode, 2 = Read register 'f'. Decode, 3 = Process Data. Decode, 4 = Write register 'f'. Example:, 1 = CLRF. Example:, 2 = . Example:, 3 = FLAG_REG,. Example:, 4 = 1. Before Instruction FLAG_REG, 1 = =. Before Instruction FLAG_REG, 2 = 5Ah. Before Instruction FLAG_REG, 3 = . Before Instruction FLAG_REG, 4 = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer =",
    "PIC18F2525/2620/4525/4620\nTO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0100. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits,",
    "PIC18F2525/2620/4525/4620\nTO and PD, are set.. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q3. Q1, Clear Watchdog Timer = . Q1, Clear Watchdog Timer = Q4. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = Process Data. Decode, Clear Watchdog Timer = . Decode, Clear Watchdog Timer = No operation",
    "CLRWDT\n00h\nBefore Instruction\nWDT Counter\n=\n?\nAfter Instruction\nWDT Counter\n=\nWDT Postscaler\n=\n0\nTO\n=\n1\nPD\n=\n1",
    "PIC18F2525/2620/4525/4620\nSyntax:, Complement f = COMF. Syntax:, Complement f = f {,d {,a}}. Syntax:, Complement f = . Syntax:, Complement f = . Operands:, Complement f = 0 \u2264 f \u2264 255. Operands:, Complement f = . Operands:, Complement f = . Operands:, Complement f = . , Complement f = d \u2208 [0,1]. , Complement f = . , Complement f = . , Complement f = . , Complement f = a \u2208 [0,1]. , Complement f = . , Complement f = . , Complement f = . Operation:, Complement f = (f) \u2192 dest. Operation:, Complement f = . Operation:, Complement f = . Operation:, Complement f = . Status Affected:, Complement f = N, Z. Status Affected:, Complement f = . Status Affected:, Complement f = . Status Affected:, Complement f = . Encoding:, Complement f = 0001. Encoding:, Complement f = 11da. Encoding:, Complement f = ffff. Encoding:, Complement f = ffff. Description:, Complement f = The",
    "PIC18F2525/2620/4525/4620\ncontents of register 'f' are. Description:, Complement f = The contents of register 'f' are. Description:, Complement f = The contents of register 'f' are. Description:, Complement f = The contents of register 'f' are\nThe contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\nCycles:\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nCOMF",
    "PIC18F2525/2620/4525/4620\nREG, 0, 0\nBefore Instruction\nREG\n=\n13h\nAfter Instruction\nREG\n=\n13h\nW\n=\nECh",
    "PIC18F2525/2620/4525/4620\nSyntax:, Compare f with W, Skip if f = W = CPFSEQ f {,a}. Syntax:, Compare f with W, Skip if f = W = CPFSEQ f {,a}. Syntax:, Compare f with W, Skip if f = W = CPFSEQ f {,a}. Syntax:, Compare f with W, Skip if f = W = CPFSEQ f {,a}. Syntax:, Compare f with W, Skip if f = W = CPFSEQ f {,a}. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip",
    "PIC18F2525/2620/4525/4620\nif f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Compare f with W, Skip if f = W = (f) - (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) - (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) - (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) - (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) - (W), skip if (f) = (W) (unsigned comparison). Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip",
    "PIC18F2525/2620/4525/4620\nif f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Encoding:, Compare f with W, Skip if f = W = . Encoding:, Compare f with W, Skip if f = W = . Encoding:, Compare f with W, Skip if f = W = 001a. Encoding:, Compare f with W, Skip if f = W = ffff. Encoding:, Compare f with W, Skip if f = W = ffff. , Compare f with W, Skip if f = W = 0110. , Compare f with W, Skip if f = W = 0110. , Compare f with W, Skip if f = W = . , Compare f with W, Skip if f = W = . , Compare f with W, Skip if f = W = . Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location 'f' to the contents of Wby performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded",
    "PIC18F2525/2620/4525/4620\nand a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location 'f' to the contents of Wby performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95",
    "PIC18F2525/2620/4525/4620\n(5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location 'f' to the contents of Wby performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location 'f' to the contents of Wby performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making",
    "PIC18F2525/2620/4525/4620\nthis a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location 'f' to the contents of Wby performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3",
    "PIC18F2525/2620/4525/4620\n'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Compare f with W, Skip if f = W = Literal Offset Mode' for details. 1. Words:, Compare f with W, Skip if f = W = Literal Offset Mode' for details. 1. Words:, Compare f with W, Skip if f = W = Literal Offset Mode' for details. 1. Words:, Compare f with W, Skip if f = W = Literal Offset Mode' for details. 1. Words:, Compare f with W, Skip if f = W = Literal Offset Mode' for details. 1. , Compare f with W, Skip if f = W = 1(2) cycles if skip and followed. , Compare f with W, Skip if f = W = 1(2) cycles if skip and followed. , Compare f with W, Skip if f = W = 1(2) cycles if skip and followed. , Compare f with W, Skip if f = W = 1(2) cycles if skip and followed. , Compare f with W, Skip if f = W = 1(2) cycles if skip and followed. Cycles:, Compare f",
    "PIC18F2525/2620/4525/4620\nwith W, Skip if f = W = Note: 3 by. Cycles:, Compare f with W, Skip if f = W = Note: 3 by. Cycles:, Compare f with W, Skip if f = W = . Cycles:, Compare f with W, Skip if f = W = . Cycles:, Compare f with W, Skip if f = W = . Q1, Compare f with W, Skip if f = W = Q2 Read register 'f'. Q1, Compare f with W, Skip if f = W = Q2 Read register 'f'. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q4. Decode, Compare f with W, Skip if f = W = . Decode, Compare f with W, Skip if f = W = . Decode, Compare f with W, Skip if f = W = Process Data. Decode, Compare f with W, Skip if f = W = Process Data. Decode, Compare f",
    "PIC18F2525/2620/4525/4620\nwith W, Skip if f = W = No operation. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q4. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with",
    "PIC18F2525/2620/4525/4620\nW, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word",
    "PIC18F2525/2620/4525/4620\ninstruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q4. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W",
    "PIC18F2525/2620/4525/4620\n= operation. operation, Compare f with W, Skip if f = W = operation. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. , Compare f with W, Skip if f = W = HERE. , Compare f with W, Skip if f = W = HERE. , Compare f with W, Skip if f = W = CPFSEQ REG,. , Compare f with W, Skip if f = W = CPFSEQ REG,. , Compare f with W, Skip if",
    "PIC18F2525/2620/4525/4620\nf = W = . Example: NEQUAL, Compare f with W, Skip if f = W = Example: NEQUAL. Example: NEQUAL, Compare f with W, Skip if f = W = :. Example: NEQUAL, Compare f with W, Skip if f = W = :. Example: NEQUAL, Compare f with W, Skip if f = W = 0. Example: NEQUAL, Compare f with W, Skip if f = W = 0. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. PC Address, Compare f with W, Skip if f = W = =. PC Address, Compare f with W, Skip if f = W = HERE. PC Address, Compare f with W, Skip if f = W = HERE. PC Address, Compare f with W, Skip if f",
    "PIC18F2525/2620/4525/4620\n= W = . PC Address, Compare f with W, Skip if f = W = . W, Compare f with W, Skip if f = W = =. W, Compare f with W, Skip if f = W = ?. W, Compare f with W, Skip if f = W = ?. W, Compare f with W, Skip if f = W = . W, Compare f with W, Skip if f = W = . REG, Compare f with W, Skip if f = W = =. REG, Compare f with W, Skip if f = W = ?. REG, Compare f with W, Skip if f = W = ?. REG, Compare f with W, Skip if f = W = . REG, Compare f with W, Skip if f = W = . After Instruction, Compare f with W, Skip if f = W = After Instruction. After Instruction, Compare f with W, Skip if f = W = After Instruction. After Instruction, Compare f with W, Skip if f = W = After Instruction. After Instruction, Compare f with W, Skip if f = W = After Instruction. After Instruction, Compare f with W, Skip",
    "PIC18F2525/2620/4525/4620\nif f = W = After Instruction. If REG, Compare f with W, Skip if f = W = =. If REG, Compare f with W, Skip if f = W = W;. If REG, Compare f with W, Skip if f = W = W;. If REG, Compare f with W, Skip if f = W = . If REG, Compare f with W, Skip if f = W = . PC, Compare f with W, Skip if f = W = = \u2260. PC, Compare f with W, Skip if f = W = Address W;. PC, Compare f with W, Skip if f = W = Address W;. PC, Compare f with W, Skip if f = W = (EQUAL). PC, Compare f with W, Skip if f = W = (EQUAL). If REG PC, Compare f with W, Skip if f = W = =. If REG PC, Compare f with W, Skip if f = W = Address. If REG PC, Compare f with W, Skip if f = W = Address. If REG PC, Compare f with W, Skip if f = W =",
    "PIC18F2525/2620/4525/4620\n(NEQUAL). If REG PC, Compare f with W, Skip if f = W = (NEQUAL)",
    "CPFSGT\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:",
    "Q Cycle Activity:\nQ1\nDecode\nQ1\nNo",
    "PIC18F2525/2620/4525/4620\nCompare f with W, Skip if f > W\nCPFSGT    f {,a}\n0 \u2264 f \u2264 255\na \u2208 [0,1]\n(f) -( W), skip if (f) > (W)\n(unsigned comparison)\nNone\n0110\n010a\nffff\nffff\nCompares the contents of data memory location 'f' to the contents of the W by performing an unsigned subtraction. If the contents of 'f' are greater than the contents of WREG, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See\nSection 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1(2)\nNote:\nQ2\n3 cycles if skip and followed by a 2-word instruction.",
    "PIC18F2525/2620/4525/4620\nQ3\nQ4\nRead register 'f'\nQ2\nNo\nProcess\nData\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation\nQ4\nNo operation\nQ4\nNo operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nExample:\nHERE      CPFSGT REG, 0\nNGREATER  :\nGREATER   :\nBefore Instruction\nPC\n=\nAddress (HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n>\nW;\nPC\n= Address (GREATER)\nIf REG\n\u2264\nW;\nPC\n= Address (NGREATER)",
    "CPFSLT\nCompare f with W, Skip if f < W\nSyntax:\nCPFSLT    f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(f) - ( W),\nskip if (f) < (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n000a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If the contents of 'f' are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation\nIf skip:",
    "CPFSLT\nNo operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation, No = No operation. No operation, No = No operation. No operation, No operation = No operation\nExample:\nHERE    CPFSLT REG, 1\nNLESS   :\nLESS    :\nBefore Instruction\nPC\n=\nAddress (HERE) ?\nW\n=\nAfter Instruction\nIf REG\n<\nW;\nPC\n=\nAddress (LESS)\nIf REG\n\u2265\nW;\nPC\n=\nAddress (NLESS)\nQ4\nIf skip:",
    "PIC18F2525/2620/4525/4620\nSyntax:, DAW = Syntax:. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Operands:, DAW = Operands:. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operation:, DAW = Operation:. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \u2192 W<3:0>; else, ( W<3:0>) \u2192 W<3:0>; If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \u2192 W<7:4> ; else, (W<7:4>) + DC \u2192 W<7:4>. Operation:, Decimal Adjust WRegister = If",
    "PIC18F2525/2620/4525/4620\n[W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \u2192 W<3:0>; else, ( W<3:0>) \u2192 W<3:0>; If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \u2192 W<7:4> ; else, (W<7:4>) + DC \u2192 W<7:4>. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then, (W<3:0>) + 6 \u2192 W<3:0>; else, ( W<3:0>) \u2192 W<3:0>; If [W<7:4> + DC > 9] or [C = 1 ] then, ( W<7:4>) + 6 + DC \u2192 W<7:4> ; else, (W<7:4>) + DC \u2192 W<7:4>. Status",
    "PIC18F2525/2620/4525/4620\nAffected:, DAW = Status Affected:. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Encoding:, DAW = Encoding:. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Description:, DAW = Description:. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result..",
    "PIC18F2525/2620/4525/4620\nWords:, DAW = Words:. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Cycles:, DAW = Cycles:. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Q Cycle Activity:, DAW = Q Cycle Activity:. Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . , DAW = Q1. , Decimal Adjust WRegister = Q2. , Decimal Adjust WRegister = Q3. , Decimal Adjust WRegister = . , DAW = Decode. , Decimal Adjust WRegister = Read register W. , Decimal Adjust WRegister = Process Data. , Decimal Adjust WRegister = \nExample 1:\nDAW",
    "Before Instruction\nW\n=\nA5h\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n05h\nC\n=\n1\nDC\n=\n0\nExample 2:\nBefore Instruction\nW\n=\nCEh\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n34h\nC\n=\n1\nDC\n=\n0",
    "Before Instruction\nSyntax:, Decrement f = DECF. Syntax:, Decrement f = f {,d {,a}}. Syntax:, Decrement f = . Syntax:, Decrement f = . Operands:, Decrement f = 0 \u2264 f \u2264 255. Operands:, Decrement f = 0 \u2264 f \u2264 255. Operands:, Decrement f = . Operands:, Decrement f = . , Decrement f = d \u2208 [0,1]. , Decrement f = d \u2208 [0,1]. , Decrement f = . , Decrement f = . , Decrement f = a \u2208 [0,1]. , Decrement f = a \u2208 [0,1]. , Decrement f = . , Decrement f = . Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = . Operation:, Decrement f = . Status Affected:, Decrement f = C, DC, N, OV, Z. Status",
    "Before Instruction\nAffected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = . Status Affected:, Decrement f = . Encoding:, Decrement f = 0000. Encoding:, Decrement f = 01da. Encoding:, Decrement f = ffff. Encoding:, Decrement f = ffff\nDescription:\nDecrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nWords:\nCycles:\nQ Cycle Activity:",
    "Before Instruction\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nDECF    CNT,\n1, 0\nBefore Instruction\nCNT\n=\n01h\nZ\n=\n0\nAfter Instruction\nCNT\n=\n00h\nZ\n=\n1",
    "PIC18F2525/2620/4525/4620\nSyntax:, DECFSZ = Syntax:. Syntax:, Decrement f, Skip if 0 = DECFSZ f {,d {,a}}. Syntax:, Decrement f, Skip if 0 = DECFSZ f {,d {,a}}. Syntax:, Decrement f, Skip if 0 = DECFSZ f {,d {,a}}. Syntax:, Decrement f, Skip if 0 = DECFSZ f {,d {,a}}. Operands:, DECFSZ = Operands:. Operands:, Decrement f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208",
    "PIC18F2525/2620/4525/4620\n[0,1] a \u2208 [0,1]. Operation:, DECFSZ = Operation:. Operation:, Decrement f, Skip if 0 = (f) - 1 \u2192 dest, skip if result = 0. Operation:, Decrement f, Skip if 0 = (f) - 1 \u2192 dest, skip if result = 0. Operation:, Decrement f, Skip if 0 = (f) - 1 \u2192 dest, skip if result = 0. Operation:, Decrement f, Skip if 0 = (f) - 1 \u2192 dest, skip if result = 0. Status Affected:, DECFSZ = Status Affected:. Status Affected:, Decrement f, Skip if 0 = None. Status Affected:, Decrement f, Skip if 0 = None. Status Affected:, Decrement f, Skip if 0 = None. Status Affected:, Decrement f, Skip if 0 = None. Encoding:, DECFSZ = Encoding:. Encoding:, Decrement f, Skip if 0 = 0010 11da. Encoding:, Decrement f, Skip if 0 =",
    "PIC18F2525/2620/4525/4620\n0010 11da. Encoding:, Decrement f, Skip if 0 = ffff. Encoding:, Decrement f, Skip if 0 = ffff. Description:, DECFSZ = Description:. Description:, Decrement f, Skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details..",
    "PIC18F2525/2620/4525/4620\nDescription:, Decrement f, Skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is '",
    "PIC18F2525/2620/4525/4620\n1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making",
    "PIC18F2525/2620/4525/4620\nit a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, DECFSZ = Words:. Words:, Decrement f, Skip if 0 = 1. Words:, Decrement f, Skip if 0 = 1. Words:, Decrement f, Skip if 0 = 1. Words:, Decrement f, Skip if 0 = 1. Cycles:, DECFSZ = Cycles:. Cycles:, Decrement f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word",
    "PIC18F2525/2620/4525/4620\ninstruction.. Cycles:, Decrement f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycle Activity:, DECFSZ = Cycle Activity:. Cycle Activity:, Decrement f, Skip if 0 = . Cycle Activity:, Decrement f, Skip if 0 = . Cycle Activity:, Decrement f, Skip if 0 = . Cycle Activity:, Decrement f, Skip if 0 = . Q1, DECFSZ = . Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q3. Q1, Decrement f, Skip if 0 = Q4. Decode, DECFSZ = Read register. Decode, Decrement f, Skip if 0 = 'f'. Decode, Decrement f, Skip if 0 =",
    "PIC18F2525/2620/4525/4620\n'f'. Decode, Decrement f, Skip if 0 = Process Data. Decode, Decrement f, Skip if 0 = Write to destination. If skip:, DECFSZ = If skip:. If skip:, Decrement f, Skip if 0 = If skip:. If skip:, Decrement f, Skip if 0 = If skip:. If skip:, Decrement f, Skip if 0 = If skip:. If skip:, Decrement f, Skip if 0 = If skip:. Q1, DECFSZ = . Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q3. Q1, Decrement f, Skip if 0 = Q4. No operation, DECFSZ = No operation. No operation, Decrement f, Skip if 0 = . No operation, Decrement f, Skip if 0 = . No operation, Decrement f, Skip if 0 = No operation. No operation, Decrement f,",
    "PIC18F2525/2620/4525/4620\nSkip if 0 = No operation. If skip and followed by 2-word instruction:, DECFSZ = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if 0 = If skip and followed by 2-word instruction:. Q1, DECFSZ = . Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q2. Q1, Decrement f, Skip if 0 = Q3. Q1, Decrement f, Skip if 0 = Q4. No operation, DECFSZ = operation. No operation, Decrement f,",
    "PIC18F2525/2620/4525/4620\nSkip if 0 = No. No operation, Decrement f, Skip if 0 = No. No operation, Decrement f, Skip if 0 = No operation. No operation, Decrement f, Skip if 0 = No operation. No operation, DECFSZ = . No operation, Decrement f, Skip if 0 = No operation. No operation, Decrement f, Skip if 0 = No operation. No operation, Decrement f, Skip if 0 = No operation. No operation, Decrement f, Skip if 0 = No operation. Example:, DECFSZ = Example:. Example:, Decrement f, Skip if 0 = HERE. Example:, Decrement f, Skip if 0 = HERE. Example:, Decrement f, Skip if 0 = DECFSZ GOTO. Example:, Decrement f, Skip if 0 = CNT, 1, 1 LOOP. CONTINUE, DECFSZ = CONTINUE. CONTINUE, Decrement f, Skip if 0 = CONTINUE. CONTINUE, Decrement f, Skip if 0 = CONTINUE. CONTINUE, Decrement f, Skip if 0 = CONTINUE.",
    "PIC18F2525/2620/4525/4620\nCONTINUE, Decrement f, Skip if 0 = CONTINUE. Before Instruction PC, DECFSZ = =. Before Instruction PC, Decrement f, Skip if 0 = Before Instruction PC. Before Instruction PC, Decrement f, Skip if 0 = Address. Before Instruction PC, Decrement f, Skip if 0 = (HERE). Before Instruction PC, Decrement f, Skip if 0 = . After Instruction CNT = If CNT, DECFSZ = After Instruction CNT = If CNT. After Instruction CNT = If CNT, Decrement f, Skip if 0 = After Instruction CNT = If CNT. After Instruction CNT = If CNT, Decrement f, Skip if 0 = - 1 Address. After Instruction CNT = If CNT, Decrement f, Skip if 0 = . After Instruction CNT = If CNT, Decrement f, Skip if 0 = . PC If CNT, DECFSZ = = =. PC If CNT, Decrement f, Skip if 0 = CNT 0;. PC If CNT, Decrement f, Skip if 0 = CNT",
    "PIC18F2525/2620/4525/4620\n0;. PC If CNT, Decrement f, Skip if 0 = (CONTINUE). PC If CNT, Decrement f, Skip if 0 = . PC, DECFSZ = \u2260 =. PC, Decrement f, Skip if 0 = 0; Address. PC, Decrement f, Skip if 0 = 0; Address. PC, Decrement f, Skip if 0 = (HERE + 2). PC, Decrement f, Skip if 0 = \nDCFSNZ\nDecrement f, Skip if Not 0\nSyntax:\nDCFSNZ    f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) - 1 \u2192 dest,\nskip if result \u2260 0\nStatus Affected:\nNone\nEncoding:\n0100\n11da\nffff\nffff\nDescription:",
    "PIC18F2525/2620/4525/4620\nThe contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation",
    "Q Cycle Activity:\nExample:, 1 = HERE. Example:, 2 = DCFSNZ TEMP, 1, 0. , 1 = ZERO. , 2 = :. , 1 = NZERO. , 2 = :. Before Instruction, 1 = . Before Instruction, 2 = . TEMP After Instruction TEMP, 1 = . TEMP After Instruction TEMP, 2 = ? TEMP - 1,. If TEMP, 1 = . If TEMP, 2 = 0;. PC, 1 = =. PC, 2 = Address (ZERO). If TEMP, 1 = \u2260 =. If TEMP, 2 = 0; Address",
    "PIC18F2525/2620/4525/4620\nSyntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Encoding: 1st word (k<7:0>) 2nd",
    "PIC18F2525/2620/4525/4620\nword(k<19:8>), Unconditional Branch = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = 1111 k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = kkkk 0 kkkk 8. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:,",
    "PIC18F2525/2620/4525/4620\nUnconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch =",
    "PIC18F2525/2620/4525/4620\nQ Cycle Activity:. Q1, Unconditional Branch = Q2. Q1, Unconditional Branch = Q3. Q1, Unconditional Branch = . Q1, Unconditional Branch = Q4. Decode, Unconditional Branch = Read literal 'k'<7:0>,. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation\nWords:\nCycles:",
    "PIC18F2525/2620/4525/4620\nSyntax:, Increment f = INCF. Syntax:, Increment f = f {,d {,a}}. Syntax:, Increment f = . Syntax:, Increment f = . Operands:, Increment f = 0 \u2264 f \u2264 255. Operands:, Increment f = 0 \u2264 f \u2264 255. Operands:, Increment f = . Operands:, Increment f = . , Increment f = d \u2208 [0,1]. , Increment f = d \u2208 [0,1]. , Increment f = . , Increment f = . , Increment f = a \u2208 [0,1]. , Increment f = a \u2208 [0,1]. , Increment f = . , Increment f = . Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = . Operation:, Increment f = . Status Affected:, Increment f =",
    "PIC18F2525/2620/4525/4620\nC, DC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = . Status Affected:, Increment f = . Encoding:, Increment f = 0010. Encoding:, Increment f = 10da. Encoding:, Increment f = ffff. Encoding:, Increment f = ffff\nDescription:\nThe contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.",
    "PIC18F2525/2620/4525/4620\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nINCF\nCNT, 1, 0\nBefore Instruction\nCNT\n=\nFFh\nZ\n=\n0\nC\n=\n?\nDC\n=\n?\nAfter Instruction\nCNT\n=\n00h\nZ\n=\n1\nC\n=\n1\nDC\n=\n1",
    "Example:\nGOTO THERE\nAfter Instruction\nPC = Address (THERE)",
    "PIC18F2525/2620/4525/4620\nSyntax:, INCFSZ = Syntax:. Syntax:, Increment f, Skip if 0 = INCFSZ f {,d {,a}}. Syntax:, Increment f, Skip if 0 = INCFSZ f {,d {,a}}. Syntax:, Increment f, Skip if 0 = INCFSZ f {,d {,a}}. Syntax:, Increment f, Skip if 0 = INCFSZ f {,d {,a}}. Operands:, INCFSZ = Operands:. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208",
    "PIC18F2525/2620/4525/4620\n[0,1] a \u2208 [0,1]. Operation:, INCFSZ = Operation:. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Status Affected:, INCFSZ = Status Affected:. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Encoding:, INCFSZ = Encoding:. Encoding:, Increment f, Skip if 0 = 0011. Encoding:, Increment f, Skip if 0 =",
    "PIC18F2525/2620/4525/4620\n11da. Encoding:, Increment f, Skip if 0 = ffff. Encoding:, Increment f, Skip if 0 = ffff. Description:, INCFSZ = Description:. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:,",
    "PIC18F2525/2620/4525/4620\nIncrement f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ',",
    "PIC18F2525/2620/4525/4620\nthe result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a",
    "PIC18F2525/2620/4525/4620\ntwo-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, INCFSZ = Words:. Words:, Increment f, Skip if 0 = 1. Words:, Increment f, Skip if 0 = 1. Words:, Increment f, Skip if 0 = 1. Words:, Increment f, Skip if 0 = 1. Cycles:, INCFSZ = Cycles:. Cycles:, Increment f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed. Cycles:, Increment f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed. Cycles:, Increment f, Skip if 0 =",
    "PIC18F2525/2620/4525/4620\n1(2) Note: 3 cycles if skip and followed. Cycles:, Increment f, Skip if 0 = 1(2) Note: 3 cycles if skip and followed. Cycle Activity:, INCFSZ = Cycle Activity:. Cycle Activity:, Increment f, Skip if 0 = Cycle Activity:. Cycle Activity:, Increment f, Skip if 0 = Cycle Activity:. Cycle Activity:, Increment f, Skip if 0 = Cycle Activity:. Cycle Activity:, Increment f, Skip if 0 = Cycle Activity:. Q1, INCFSZ = . Q1, Increment f, Skip if 0 = Q2. Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q4. Decode, INCFSZ = . Decode, Increment f, Skip if 0 = Read register 'f'. Decode, Increment f, Skip if 0 = Process Data. Decode, Increment f, Skip if 0 = Process Data.",
    "PIC18F2525/2620/4525/4620\nDecode, Increment f, Skip if 0 = Write to destination. If skip:, INCFSZ = If skip:. If skip:, Increment f, Skip if 0 = If skip:. If skip:, Increment f, Skip if 0 = If skip:. If skip:, Increment f, Skip if 0 = If skip:. If skip:, Increment f, Skip if 0 = If skip:. Q1, INCFSZ = . Q1, Increment f, Skip if 0 = Q2. Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q4. No operation, INCFSZ = . No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. If skip and followed by 2-word",
    "PIC18F2525/2620/4525/4620\ninstruction:, INCFSZ = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Increment f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Increment f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Increment f, Skip if 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Increment f, Skip if 0 = If skip and followed by 2-word instruction:. Q1, INCFSZ = Q2. Q1, Increment f, Skip if 0 = . Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q3. Q1, Increment f, Skip if 0 = Q4. No operation, INCFSZ = . No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip",
    "PIC18F2525/2620/4525/4620\nif 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, INCFSZ = . No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. No operation, Increment f, Skip if 0 = No operation. Example:, INCFSZ = Example:. Example:, Increment f, Skip if 0 = HERE NZERO ZERO. Example:, Increment f, Skip if 0 = INCFSZ : :. Example:, Increment f, Skip if 0 = CNT,. Example:, Increment f, Skip if 0 = 1, 0. Before Instruction PC, INCFSZ = Before Instruction PC. Before Instruction PC, Increment f, Skip if 0 = = Address. Before Instruction PC, Increment f, Skip if 0 = . Before Instruction PC, Increment f, Skip if 0 = . Before Instruction PC,",
    "PIC18F2525/2620/4525/4620\nIncrement f, Skip if 0 = . , INCFSZ = . , Increment f, Skip if 0 = . , Increment f, Skip if 0 = (HERE). , Increment f, Skip if 0 = . , Increment f, Skip if 0 = . After Instruction CNT = If, INCFSZ = CNT = = \u2260. After Instruction CNT = If, Increment f, Skip if 0 = CNT + 1 0; Address. After Instruction CNT = If, Increment f, Skip if 0 = . After Instruction CNT = If, Increment f, Skip if 0 = . After Instruction CNT = If, Increment f, Skip if 0 = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Increment f, Skip if Not 0 = INFSNZ. Syntax:, Increment f, Skip if Not 0 = f {,d {,a}}. Syntax:, Increment f, Skip if Not 0 = . Syntax:, Increment f, Skip if Not 0 = . Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if",
    "PIC18F2525/2620/4525/4620\nNot 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Encoding:, Increment f, Skip if Not 0 = 0100. Encoding:, Increment f, Skip if Not 0 = 10da. Encoding:, Increment f, Skip if Not 0 = ffff. Encoding:, Increment f, Skip if Not 0 = ffff. Description:, Increment f, Skip if Not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in",
    "PIC18F2525/2620/4525/4620\nW. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Description:, Increment f, Skip if Not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is '",
    "PIC18F2525/2620/4525/4620\n0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Description:, Increment f, Skip if Not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See.",
    "PIC18F2525/2620/4525/4620\nDescription:, Increment f, Skip if Not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Words:, Increment f, Skip if Not 0 = 1. Words:, Increment f, Skip if Not 0 = . Words:, Increment f, Skip if Not 0 = . Words:, Increment f, Skip if Not 0 = . Cycles:, Increment f, Skip if Not",
    "PIC18F2525/2620/4525/4620\n0 = 1(2). Cycles:, Increment f, Skip if Not 0 = . Cycles:, Increment f, Skip if Not 0 = . Cycles:, Increment f, Skip if Not 0 = \nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. If skip:, Q2 = . If skip:, Q3 = . If skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE    INFSNZ  REG, 1, 0\nZERO\nNZERO\nBefore Instruction, 1 = Before Instruction. Before Instruction, 2 = Before Instruction. PC, 1 = =. PC, 2 = Address (HERE). After Instruction, 1 = After Instruction. After Instruction, 2 = After Instruction. REG, 1 = =. REG, 2 = REG + 1. If REG, 1 = \u2260. If REG, 2 = 0;. PC, 1 = =. PC, 2 = Address (NZERO). If REG, 1 = =. If REG, 2 = 0;. PC, 1 = =. PC, 2 = Address (ZERO)",
    "PIC18F2525/2620/4525/4620\nSyntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:,",
    "PIC18F2525/2620/4525/4620\nInclusive OR Literal with W = N, Z. Encoding:, Inclusive OR Literal with W = 0000. Encoding:, Inclusive OR Literal with W = 1001. Encoding:, Inclusive OR Literal with W = kkkk. Encoding:, Inclusive OR Literal with W = kkkk. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal",
    "PIC18F2525/2620/4525/4620\nwith W = 1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q1, Inclusive OR Literal with W = Q2. Q1, Inclusive OR Literal with W = Q3. Q1, Inclusive OR Literal with W = Q3. Q1, Inclusive OR Literal with W = Q4. Decode, Inclusive OR Literal with W = Read literal 'k'. Decode, Inclusive OR Literal with W = Process Data. Decode, Inclusive OR Literal with W = Process Data. Decode, Inclusive OR Literal with W = Write to W. Example:, Inclusive OR Literal with W = IORLW. Example:, Inclusive OR Literal with W = 35h. Example:, Inclusive OR Literal with W = . Example:, Inclusive OR",
    "PIC18F2525/2620/4525/4620\nLiteral with W = . Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = . Before Instruction, Inclusive OR Literal with W = . Before Instruction, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = 9Ah. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = . After Instruction, Inclusive OR Literal with W = . After Instruction, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = BFh. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Inclusive OR Wwith f = IORWF. Syntax:, Inclusive OR Wwith f = f {,d {,a}}. Syntax:, Inclusive OR Wwith f = . Syntax:, Inclusive OR Wwith f = . Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:,",
    "PIC18F2525/2620/4525/4620\nInclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Encoding:, Inclusive OR Wwith f = 0001. Encoding:, Inclusive OR Wwith f = 00da. Encoding:, Inclusive OR Wwith f = ffff. Encoding:, Inclusive OR Wwith f = ffff. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever",
    "PIC18F2525/2620/4525/4620\nf \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'",
    "PIC18F2525/2620/4525/4620\n(default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and",
    "PIC18F2525/2620/4525/4620\nBit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Q Cycle Activity: Q1, Inclusive OR Wwith f = Q2. Q Cycle Activity: Q1, Inclusive OR Wwith f = Q3. Q Cycle Activity: Q1, Inclusive OR Wwith f = . Q Cycle Activity: Q1, Inclusive OR Wwith f = Q4. Decode, Inclusive OR Wwith f = . Decode, Inclusive OR Wwith f = Read register 'f'. Decode, Inclusive OR Wwith f = Process Data. Decode, Inclusive OR Wwith f = Write to destination\nExample:\nIORWF  RESULT, 0, 1\nBefore Instruction\nRESULT = 13h\nW\n= 91h\nAfter Instruction\nRESULT =\n13h\nW\n=",
    "PIC18F2525/2620/4525/4620\n93h\nQ Cycle Activity:",
    "PIC18F2525/2620/4525/4620\nSyntax:, Load FSR = LFSR. Syntax:, Load FSR = f, k. Syntax:, Load FSR = . Syntax:, Load FSR = . Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Encoding:, Load FSR = 1110 1111. Encoding:, Load FSR = 1110 0000. Encoding:, Load",
    "PIC18F2525/2620/4525/4620\nFSR = 00ff k 7 kkk. Encoding:, Load FSR = k 11 kkk kkkk. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2",
    "PIC18F2525/2620/4525/4620\nDecode, Q2 = Read literal 'k' MSB. Decode, Q3 = Process Data. Decode, Q4 = Write literal 'k' MSB to FSRfH. Decode, Q2 = Read literal 'k' LSB. Decode, Q3 = Process Data. Decode, Q4 = Write literal 'k' to FSRfL\nExample:\nLFSR 2, 3ABh\nAfter Instruction\nFSR2H FSR2L\n=\n03h\n= ABh",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move f = MOVF. Syntax:, Move f = f {,d {,a}}. Syntax:, Move f = f {,d {,a}}. Syntax:, Move f = f {,d {,a}}. Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. Operation:, Move f = f \u2192 dest. Operation:, Move f = f \u2192 dest. Operation:, Move f = f \u2192 dest. Operation:,",
    "PIC18F2525/2620/4525/4620\nMove f = f \u2192 dest. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Encoding:, Move f = 0101. Encoding:, Move f = 00da. Encoding:, Move f = ffff. Encoding:, Move f = ffff\nDescription:\nThe contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.",
    "PIC18F2525/2620/4525/4620\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nWords:\nCycles:\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write W\nBefore Instruction, MOVF = . Before Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = FFh. After Instruction, MOVF = . After Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = 22h",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move f to f = MOVFF f s ,f d. Syntax:, Move f to f = MOVFF f s ,f d. Syntax:,  = . Syntax:,  = . Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operands:,  = . Operands:,  = . Operation:, Move f to f = (f s ) \u2192 f d. Operation:, Move f to f = (f s ) \u2192 f d. Operation:,  = . Operation:,  = . Status Affected:, Move f to f = None. Status Affected:, Move f to f = None. Status Affected:,  = . Status Affected:,  = . Encoding:, Move f to f = . Encoding:, Move f to f = . Encoding:,  = . Encoding:,",
    "PIC18F2525/2620/4525/4620\n= . 1st word (source), Move f to f = 1100. 1st word (source), Move f to f = ffff. 1st word (source),  = ffff. 1st word (source),  = ffff s. 2nd word (destin.), Move f to f = 1111. 2nd word (destin.), Move f to f = ffff. 2nd word (destin.),  = ffff. 2nd word (destin.),  = ffff d\nDescription:\nThe contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh.\nEither source or destination can be W\n(a useful special situation).",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Encoding:, Move Literal to Low Nibble in BSR = 0000. Encoding:, Move Literal to Low",
    "PIC18F2525/2620/4525/4620\nNibble in BSR = 0001 kkkk. Encoding:, Move Literal to Low Nibble in BSR = kkkk. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble in BSR = 1.",
    "PIC18F2525/2620/4525/4620\nWords:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Q Cycle Activity:, Move Literal to Low Nibble in BSR = Q Cycle Activity:. Q Cycle Activity:, Move Literal to Low Nibble in BSR = Q Cycle Activity:. Q Cycle Activity:, Move Literal to Low Nibble in BSR = Q Cycle Activity:. Q1, Move Literal to Low Nibble in BSR = Q2. Q1, Move Literal to Low Nibble in BSR = Q3. Q1, Move Literal to Low Nibble in BSR = Q4. Decode, Move Literal to Low Nibble in BSR = Read literal 'k'. Decode, Move Literal to Low Nibble in BSR = Process Data. Decode, Move Literal to Low Nibble in BSR = Write literal 'k' to BSR",
    "PIC18F2525/2620/4525/4620\nMOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port).\nThe MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\n2\n2 (3)\nBefore Instruction, MOVLB = Before Instruction. Before Instruction, 5 = Before Instruction. BSR Register =, MOVLB = BSR Register =. BSR Register =, 5 = 02h. After Instruction, MOVLB = After Instruction. After Instruction, 5 = After Instruction. BSR Register =, MOVLB = BSR Register =. BSR Register =, 5 = 05h\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3\nDecode, 1 = Read register 'f' (src). Decode, 2 = Process Data. Decode, 3 = No operation. Decode, 1 = No operation No dummy read. Decode, 2 = No operation. Decode, 3 = Write register 'f' (dest)\nExample:\nMOVFF   REG1, REG2\nBefore Instruction\nREG1\n=\n33h\nREG2\n=\n11h",
    "PIC18F2525/2620/4525/4620\nAfter Instruction\nREG1\n= 33h\nREG2\n=\n33h\nQ4",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Encoding:, Move Literal to W = 0000. Encoding:, Move Literal to W = 1110. Encoding:, Move Literal to W = kkkk.",
    "PIC18F2525/2620/4525/4620\nEncoding:, Move Literal to W = kkkk. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:.",
    "PIC18F2525/2620/4525/4620\nQ1, Move Literal to W = Q2. Q1, Move Literal to W = Q3. Q1, Move Literal to W = Q4. Q1, Move Literal to W = Q4. Decode, Move Literal to W = Read literal 'k'. Decode, Move Literal to W = Process Data. Decode, Move Literal to W = Write to W. Decode, Move Literal to W = Write to W. Example:, Move Literal to W = MOVLW. Example:, Move Literal to W = 5Ah. Example:, Move Literal to W = . Example:, Move Literal to W = . After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move Wto f = MOVWF. Syntax:, Move Wto f = f {,a}. Syntax:, Move Wto f = . Syntax:, Move Wto f = . Operands:, Move Wto f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Move Wto f = . Operands:, Move Wto f = . Operands:, Move Wto f = . Operation:, Move Wto f = (W) \u2192 f. Operation:, Move Wto f = . Operation:, Move Wto f = . Operation:, Move Wto f = . Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Encoding:, Move Wto f = 0110. Encoding:, Move Wto f = 111a. Encoding:, Move Wto f = ffff. Encoding:, Move Wto f = ffff. Description:, Move Wto f = Move data from Wto register 'f'. Location",
    "PIC18F2525/2620/4525/4620\n'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:,",
    "PIC18F2525/2620/4525/4620\nMove Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and",
    "PIC18F2525/2620/4525/4620\nBit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Move Wto f = 1. Words:, Move Wto f = . Words:, Move Wto f = . Words:, Move Wto f = . Cycles:, Move Wto f = 1. Cycles:, Move Wto f = . Cycles:, Move Wto f = . Cycles:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q1, Move Wto f = Q2. Q1, Move Wto f = Q3. Q1, Move Wto f = . Q1, Move Wto f = Q4. Decode, Move Wto f = Read register 'f'. Decode, Move Wto f = Process Data. Decode, Move Wto f = Process Data. Decode, Move Wto f = Write register 'f'. Example:, Move Wto f = MOVWF. Example:, Move",
    "PIC18F2525/2620/4525/4620\nWto f = REG, 0. Example:, Move Wto f = . Example:, Move Wto f = . Before Instruction, Move Wto f = Before Instruction. Before Instruction, Move Wto f = . Before Instruction, Move Wto f = . Before Instruction, Move Wto f = . W, Move Wto f = 4Fh FFh. W, Move Wto f = . W, Move Wto f = . W, Move Wto f = . After Instruction, Move Wto f = After Instruction. After Instruction, Move Wto f = . After Instruction, Move Wto f = . After Instruction, Move Wto f = . W REG, Move Wto f = 4Fh 4Fh. W REG, Move Wto f = . W REG, Move Wto f = . W REG, Move Wto f = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Multiply Literal with W = MULLW. Syntax:, Multiply Literal with W = k. Syntax:, Multiply Literal with W = k. Syntax:, Multiply Literal with W = k. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None.",
    "PIC18F2525/2620/4525/4620\nEncoding:, Multiply Literal with W = 0000. Encoding:, Multiply Literal with W = 1101. Encoding:, Multiply Literal with W = kkkk. Encoding:, Multiply Literal with W = kkkk\nDescription:\nAn unsigned multiplication is carried out between the contents of W and the 8-bit literal 'k'. The 16-bit result is placed in the PRODH:PRODL register pair. PRODH contains the high byte. W is unchanged.\nNone of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected.\nWords:\nCycles:\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read literal 'k'. Decode, Q3 = Process Data. Decode, Q4 = Write registers PRODH: PRODL\nExample:\nMULLW   0C4h\nBefore Instruction\nW\n=\nE2h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nE2h\nPRODH\n=\nADh\nPRODL\n=\n08h",
    "Multiply W with f\nSyntax:\nMULWF     f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(W) x (f) \u2192 PRODH:PRODL\nStatus Affected:\nNone\nEncoding:\n0000\n001a\nffff\nffff\nDescription:\nAn unsigned multiplication is carried out between the contents of W and the register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both W and 'f' are unchanged.\nNone of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset\nAddressing mode whenever\nf \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2",
    "Multiply W with f\nQ3\nQ4\nDecode\nRead register 'f'\nProcess Data\nWrite registers PRODH: PRODL",
    "Example:\nMULWF   REG, 1\nBefore Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n8Ah\nPRODL\n=\n94h\nQ Cycle Activity:",
    "PIC18F2525/2620/4525/4620\nSyntax:, Negate f = NEGF. Syntax:, Negate f = f {,a}. Syntax:, Negate f = . Syntax:, Negate f = . Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:, Negate f = . Operation:, Negate f = . Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C,",
    "PIC18F2525/2620/4525/4620\nDC, Z. Encoding:, Negate f = 0110. Encoding:, Negate f = 110a. Encoding:, Negate f = ffff. Encoding:, Negate f = ffff. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is '",
    "PIC18F2525/2620/4525/4620\n0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If",
    "PIC18F2525/2620/4525/4620\n'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Negate f = 1. Words:, Negate f = . Words:, Negate f = . Words:, Negate f = . Cycles:, Negate f = 1. Cycles:, Negate f = . Cycles:, Negate f = . Cycles:, Negate f = \nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write register 'f'\nBefore Instruction REG =, NEGF = 0011. Before Instruction REG =, REG, = 1010. Before Instruction REG =, 1 = [3Ah]. After Instruction REG =, NEGF = 1100. After Instruction REG =, REG, = 0110. After Instruction REG =, 1 = [C6h]",
    "PIC18F2525/2620/4525/4620\nSyntax:, No Operation = NOP. Syntax:, No Operation = NOP. Syntax:, No Operation = NOP. Syntax:, No Operation = NOP. Operands:, No Operation = None. Operands:, No Operation = None. Operands:, No Operation = None. Operands:, No Operation = None. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Encoding:, No Operation = 0000 1111. Encoding:, No Operation = 0000 xxxx. Encoding:, No Operation = 0000 xxxx. Encoding:, No Operation = 0000 xxxx. Description:, No Operation = No operation.. Description:, No Operation = No operation.. Description:, No Operation = No operation.. Description:, No Operation = No operation.. Words:, No Operation = 1. Words:, No Operation =",
    "PIC18F2525/2620/4525/4620\n1. Words:, No Operation = 1. Words:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q1, No Operation = Q2. Q1, No Operation = Q3. Q1, No Operation = . Q1, No Operation = Q4. Decode, No Operation = No operation. Decode, No Operation = No operation. Decode, No Operation = . Decode, No Operation = No operation\nExample:\nNone.",
    "PIC18F2525/2620/4525/4620\nSyntax:, Pop Top of Return Stack = POP. Syntax:, Pop Top of Return Stack = POP. Syntax:, Pop Top of Return Stack = POP. Syntax:, Pop Top of Return Stack = POP. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Encoding:, Pop Top of Return Stack = 0000. Encoding:, Pop Top of Return Stack = 0000. Encoding:, Pop Top of Return Stack =",
    "PIC18F2525/2620/4525/4620\n0000. Encoding:, Pop Top of Return Stack = 0110. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided",
    "PIC18F2525/2620/4525/4620\nto enable the user to properly manage the return stack to incorporate a software stack.. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Q Cycle Activity:, Pop Top of Return Stack = . Q Cycle Activity:, Pop Top of Return Stack = . Q Cycle Activity:, Pop Top of Return Stack = . Q Cycle Activity:, Pop Top of Return Stack = . Q1, Pop Top of Return Stack = Q2. Q1, Pop Top of Return Stack = Q3. Q1, Pop Top of Return Stack = Q3. Q1, Pop Top of Return Stack = Q4. Decode, Pop Top of Return Stack = No operation. Decode, Pop Top of Return Stack = POP TOS value. Decode, Pop Top of Return Stack = POP TOS value.",
    "PIC18F2525/2620/4525/4620\nDecode, Pop Top of Return Stack = No operation. Example:, Pop Top of Return Stack = POP. Example:, Pop Top of Return Stack = . Example:, Pop Top of Return Stack = . Example:, Pop Top of Return Stack = . Before Instruction TOS, Pop Top of Return Stack = Before Instruction TOS. Before Instruction TOS, Pop Top of Return Stack = =. Before Instruction TOS, Pop Top of Return Stack = 0031A2h. Before Instruction TOS, Pop Top of Return Stack = . Stack (1 level down), Pop Top of Return Stack = Stack (1 level down). Stack (1 level down), Pop Top of Return Stack = =. Stack (1 level down), Pop Top of Return Stack = 014332h. Stack (1 level down), Pop Top of Return Stack = . After Instruction TOS, Pop Top of Return Stack = After Instruction TOS. After Instruction TOS, Pop Top of Return Stack = = =. After Instruction TOS, Pop Top of Return Stack = 014332h NEW. After Instruction TOS, Pop Top of Return Stack = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of",
    "PIC18F2525/2620/4525/4620\nReturn Stack = 0000. Encoding:, Push Top of Return Stack = 0101. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack..",
    "PIC18F2525/2620/4525/4620\nWords:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q1, Push Top of Return Stack = Q2. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q4. Decode, Push Top of Return Stack = PUSH PC + 2 onto return stack. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation.",
    "PIC18F2525/2620/4525/4620\nDecode, Push Top of Return Stack = No operation. Example: PUSH, Push Top of Return Stack = Example: PUSH. Example: PUSH, Push Top of Return Stack = Example: PUSH. Example: PUSH, Push Top of Return Stack = Example: PUSH. Example: PUSH, Push Top of Return Stack = Example: PUSH. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. TOS =, Push Top of Return Stack = TOS =. TOS =, Push Top of Return Stack = TOS =. TOS =, Push Top of Return Stack = 345Ah. TOS =, Push Top of Return Stack = 345Ah. PC = 0124h After Instruction, Push Top of Return Stack = PC = 0124h After Instruction. PC = 0124h After Instruction, Push Top of Return Stack = PC = 0124h After Instruction. PC = 0124h After Instruction, Push Top of Return Stack = PC = 0124h After Instruction. PC = 0124h After",
    "PIC18F2525/2620/4525/4620\nInstruction, Push Top of Return Stack = PC = 0124h After Instruction. PC =, Push Top of Return Stack = PC =. PC =, Push Top of Return Stack = PC =. PC =, Push Top of Return Stack = 0126h. PC =, Push Top of Return Stack = 0126h. TOS =, Push Top of Return Stack = TOS =. TOS =, Push Top of Return Stack = TOS =. TOS =, Push Top of Return Stack = 0126h. TOS =, Push Top of Return Stack = 0126h. Stack (1 level down) =, Push Top of Return Stack = Stack (1 level down) =. Stack (1 level down) =, Push Top of Return Stack = Stack (1 level down) =. Stack (1 level down) =, Push Top of Return Stack = 345Ah. Stack (1 level down) =, Push Top of Return Stack = 345Ah",
    "PIC18F2525/2620/4525/4620\nSyntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call =",
    "PIC18F2525/2620/4525/4620\nNone. Encoding:, Relative Call = 1101. Encoding:, Relative Call = 1nnn. Encoding:, Relative Call = nnnn. Encoding:, Relative Call = nnnn. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current",
    "PIC18F2525/2620/4525/4620\nlocation. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q Cycle Activity:,",
    "PIC18F2525/2620/4525/4620\nRelative Call = Q Cycle Activity:. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q1, Relative Call = Q2. Q1, Relative Call = Q3. Q1, Relative Call = . Q1, Relative Call = Q4. Decode, Relative Call = Read literal 'n' PUSHPCto stack. Decode, Relative Call = Process Data. Decode, Relative Call = . Decode, Relative Call = Write to PC. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = . No operation, Relative Call = No operation\nExample:\nHERE\nRCALL Jump\nBefore Instruction\nPC\n=\nAddress\n(HERE)\nAfter Instruction\nPC\n=\nAddress\n(Jump)\nTOS =\nAddress\n(HERE + 2)",
    "PIC18F2525/2620/4525/4620\nSyntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Encoding:, Reset = 0000. Encoding:, Reset = 0000. Encoding:, Reset = 1111. Encoding:, Reset = 1111. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in",
    "PIC18F2525/2620/4525/4620\nsoftware.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q1, Reset = Q2. Q1, Reset = Q3. Q1, Reset = Q3. Q1, Reset = Q4. Decode, Reset = Start Reset. Decode, Reset = No operation. Decode, Reset = No operation. Decode, Reset = No operation",
    "Example:\nRESET\nAfter Instruction\nRegisters =\nReset Value\nFlags*\n=\nReset Value",
    "Return from Interrupt\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\nRETFIE   {s}\ns \u2208 [0,1]\n(TOS) \u2192 PC,\n1 \u2192 GIE/GIEH or PEIE/GIEL;\nif s =\n1,\n(WS) \u2192 W,\n(STATUSS) \u2192 STATUS,\n(BSRS)\n\u2192 BSR,\nPCLATU, PCLATH are unchanged\nGIE/GIEH, PEIE/GIEL.\n0000\n0000\n0001\n000s\nReturn from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).\n1\n2",
    "Return from Interrupt\nSyntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Status",
    "Return from Interrupt\nAffected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Encoding:, Return Literal to W = 0000. Encoding:, Return Literal to W = 1100. Encoding:, Return Literal to W = kkkk. Encoding:, Return Literal to W = kkkk. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the",
    "Return from Interrupt\nreturn address). The high address latch (PCLATH) remains unchanged.. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q1, Return Literal to W = Q2. Q1, Return Literal to W = Q3. Q1, Return Literal to W = . Q1, Return Literal to W = Q4. Decode, Return Literal to W = Read literal 'k'. Decode, Return Literal to W = Process Data. Decode, Return Literal to W = . Decode, Return Literal to W = POP PC from stack, Write to W. No operation,",
    "Return from Interrupt\nReturn Literal to W = No operation. No operation, Return Literal to W = No operation. No operation, Return Literal to W = . No operation, Return Literal to W = No operation\nQ Cycle Activity:\nDecode, Q2 = No operation. Decode, Q3 = No operation. Decode, Q4 = POP PC from stack Set GIEH or GIEL. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:\nRETFIE  1\nAfter Interrupt\nPC\n=\nTOS\nW\n=\nWS\nBSR\n=\nBSRS\nSTATUS\n=\nSTATUSS\nGIE/GIEH, PEIE/GIEL\n=\n1",
    "Example:\n:\nTABLE\n:\n:\nCALL TABLE\n; W contains table\n; offset value\n; W now has\n; table value\nADDWF PCL\n; W = offset\nRETLW k0\n; Begin table\nRETLW k1\n;\nRETLW kn\n; End of table\nBefore Instruction\nW\n=\n07h\nAfter Instruction\nW\n=\nvalue of kn",
    "PIC18F2525/2620/4525/4620\nSyntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Operands:, Return from Subroutine = s \u2208 [0,1]. Operands:, Return from Subroutine = s \u2208 [0,1]. Operands:, Return from Subroutine = s \u2208 [0,1]. Operands:, Return from Subroutine = s \u2208 [0,1]. Operation:, Return from Subroutine = (TOS) \u2192 PC; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Subroutine = (TOS) \u2192 PC; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Subroutine = (TOS) \u2192 PC; if s = 1 , (WS) \u2192",
    "PIC18F2525/2620/4525/4620\nW, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Subroutine = (TOS) \u2192 PC; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0001. Encoding:, Return from Subroutine = 001s. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these",
    "PIC18F2525/2620/4525/4620\nregisters occurs (default).. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS,",
    "PIC18F2525/2620/4525/4620\nSTATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q1, Return from Subroutine = Q2. Q1, Return from Subroutine = Q3. Q1, Return from Subroutine = . Q1, Return from Subroutine = Q4. Decode, Return from",
    "PIC18F2525/2620/4525/4620\nSubroutine = No. Decode, Return from Subroutine = operation. Decode, Return from Subroutine = Process Data. Decode, Return from Subroutine = POP PC from stack. No, Return from Subroutine = operation. No, Return from Subroutine = No operation. No, Return from Subroutine = No operation. No, Return from Subroutine = No operation\nExample:\nRETURN\nAfter Instruction: PC = TOS",
    "PIC18F2525/2620/4525/4620\nSyntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C,",
    "PIC18F2525/2620/4525/4620\n(C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Encoding:, Rotate Left f through Carry = 0011. Encoding:, Rotate Left f through Carry = 01da. Encoding:, Rotate Left f through Carry = ffff. Encoding:, Rotate Left f through Carry = ffff. Description:, Rotate Left f",
    "PIC18F2525/2620/4525/4620\nthrough Carry = The one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset. Description:, Rotate Left f through Carry = contents of register. Description:, Rotate Left f through Carry = The one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the",
    "PIC18F2525/2620/4525/4620\nBSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset. Description:, Rotate Left f through Carry = are rotated. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Q Cycle Activity:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = . Q1 Decode, Rotate Left f through Carry = Q2. Q1 Decode, Rotate Left f through Carry =",
    "PIC18F2525/2620/4525/4620\nQ2. Q1 Decode, Rotate Left f through Carry = Q3. Q1 Decode, Rotate Left f through Carry = Q4. , Rotate Left f through Carry = Read register 'f'. , Rotate Left f through Carry = Read register 'f'. , Rotate Left f through Carry = Process Data. , Rotate Left f through Carry = Write to destination. Example: RLCF REG, 0, 0 Before Instruction, Rotate Left f through Carry = Example: RLCF REG, 0, 0 Before Instruction. Example: RLCF REG, 0, 0 Before Instruction, Rotate Left f through Carry = Example: RLCF REG, 0, 0 Before Instruction. Example: RLCF REG, 0, 0 Before Instruction, Rotate Left f through Carry = Example: RLCF REG, 0, 0 Before Instruction. Example: RLCF REG, 0, 0 Before Instruction, Rotate Left f through Carry = Example: RLCF REG, 0, 0 Before Instruction. REG, Rotate Left f through Carry = = 1110. REG, Rotate Left f through Carry = 0110. REG, Rotate Left f through Carry = . REG, Rotate Left",
    "PIC18F2525/2620/4525/4620\nf through Carry = . After Instruction, Rotate Left f through Carry = After Instruction. After Instruction, Rotate Left f through Carry = After Instruction. After Instruction, Rotate Left f through Carry = After Instruction. After Instruction, Rotate Left f through Carry = After Instruction. REG, Rotate Left f through Carry = = 1110 1100. REG, Rotate Left f through Carry = 0110. REG, Rotate Left f through Carry = . REG, Rotate Left f through Carry = . W, Rotate Left f through Carry = =. W, Rotate Left f through Carry = 1100. W, Rotate Left f through Carry = . W, Rotate Left f through Carry = . C, Rotate Left f through Carry = = 1. C, Rotate Left f through Carry = . C, Rotate Left f through Carry = . C, Rotate Left f through Carry = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Rotate Left f (No Carry) = RLNCF. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Syntax:, Rotate Left f (No Carry) = f {,d {,a}}. Operands:, Rotate Left f (No Carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f (No Carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f (No Carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f (No Carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Left f (No Carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192",
    "PIC18F2525/2620/4525/4620\ndest<0>. Operation:, Rotate Left f (No Carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (No Carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (No Carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Status Affected:, Rotate Left f (No Carry) = N, Z. Encoding:, Rotate Left f (No Carry) = 0100. Encoding:, Rotate Left f (No Carry) = 01da. Encoding:, Rotate Left f (No Carry) = ffff. Encoding:, Rotate Left f (No Carry) =",
    "PIC18F2525/2620/4525/4620\nffff. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank",
    "PIC18F2525/2620/4525/4620\nis selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset",
    "PIC18F2525/2620/4525/4620\nMode' for details.. Description:, Rotate Left f (No Carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Words:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No",
    "PIC18F2525/2620/4525/4620\nCarry) = 1. Cycles:, Rotate Left f (No Carry) = 1. Cycles:, Rotate Left f (No Carry) = 1. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q2. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q3. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q3. Q Cycle Activity: Q1, Rotate Left f (No Carry) = Q4. Decode, Rotate Left f (No Carry) = Read register. Decode, Rotate Left f (No Carry) = 'f' Process Data. Decode, Rotate Left f (No Carry) = 'f' Process Data. Decode, Rotate Left f (No Carry) = Write to destination. Example:, Rotate Left f (No Carry) = RLNCF. Example:, Rotate Left f (No Carry) = REG,. Example:, Rotate Left f (No Carry) = 1,. Example:, Rotate Left f (No Carry) = 0. Before Instruction REG =, Rotate Left f (No Carry) = 1010. Before Instruction REG",
    "PIC18F2525/2620/4525/4620\n=, Rotate Left f (No Carry) = 1011. Before Instruction REG =, Rotate Left f (No Carry) = . Before Instruction REG =, Rotate Left f (No Carry) = ",
    "PIC18F2525/2620/4525/4620\nSyntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C,",
    "PIC18F2525/2620/4525/4620\n(C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Encoding:, Rotate Right f through Carry = 0011. Encoding:, Rotate Right f through Carry = 00da. Encoding:, Rotate Right f through Carry = ffff. Encoding:,",
    "PIC18F2525/2620/4525/4620\nRotate Right f through Carry = ffff. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If",
    "PIC18F2525/2620/4525/4620\n'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3",
    "PIC18F2525/2620/4525/4620\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate",
    "PIC18F2525/2620/4525/4620\nRight f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q Cycle Activity:, Rotate Right f through Carry = Q Cycle Activity:. Q1, Rotate Right f through Carry = Q2. Q1, Rotate Right f through Carry = Q3. Q1, Rotate Right f through Carry = Q3. Q1, Rotate Right f through Carry = Q4. Decode, Rotate Right f through Carry = Read register 'f'. Decode, Rotate Right f through Carry = Process. Decode, Rotate Right f through Carry = Process. Decode, Rotate Right f through Carry = Write to destination. Example:, Rotate Right f through Carry = RRCF. Example:, Rotate Right f through Carry = REG, 0,. Example:, Rotate Right f through Carry = 0. Example:, Rotate Right f through Carry = . Before Instruction,",
    "PIC18F2525/2620/4525/4620\nRotate Right f through Carry = Before Instruction. Before Instruction, Rotate Right f through Carry = . Before Instruction, Rotate Right f through Carry = . Before Instruction, Rotate Right f through Carry = . REG C, Rotate Right f through Carry = = 1110 = 0. REG C, Rotate Right f through Carry = 0110. REG C, Rotate Right f through Carry = . REG C, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = After Instruction. After Instruction, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = . After Instruction, Rotate Right f through Carry = . REG, Rotate Right f through Carry = = 1110. REG, Rotate Right f through Carry = 0110. REG, Rotate Right f through Carry = . REG, Rotate Right f through Carry = . W, Rotate Right f through Carry = = 0111. W, Rotate Right f through Carry = 0011. W, Rotate Right f through Carry = . W, Rotate Right f through Carry = . C, Rotate Right f through Carry = = 0. C, Rotate Right f through Carry = . C, Rotate Right f through Carry = . C, Rotate",
    "PIC18F2525/2620/4525/4620\nRight f through Carry = \nWords:\nCycles:\nQ Cycle Activity:\nQ1\nDecode\nQ2\nQ3\nQ4\nRead\nProcess register 'f'\nData\nExample 1:\nRRNCF   REG, 1, 0\nBefore Instruction\nREG\n=\n1101 0111\nAfter Instruction\nREG\n=\n1110 1011\nExample 2:\nRRNCF   REG, 0, 0\nBefore Instruction\nW\n=\n?\nREG\n=\n1101 0111\nAfter Instruction\nW\n=\n1110 1011\nREG\n=\n1101 0111\nWrite to destination",
    "PIC18F2525/2620/4525/4620\nSyntax:, Rotate Right f (No Carry) = RRNCF. Syntax:, Rotate Right f (No Carry) = f {,d {,a}}. Syntax:, Rotate Right f (No Carry) = . Syntax:, Rotate Right f (No Carry) = . Operands:, Rotate Right f (No Carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f (No Carry) = . Operands:, Rotate Right f (No Carry) = . Operands:, Rotate Right f (No Carry) = . Operation:, Rotate Right f (No Carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (No Carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (No Carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192",
    "PIC18F2525/2620/4525/4620\ndest<7>. Operation:, Rotate Right f (No Carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Status Affected:, Rotate Right f (No Carry) = N, Z. Status Affected:, Rotate Right f (No Carry) = . Status Affected:, Rotate Right f (No Carry) = . Status Affected:, Rotate Right f (No Carry) = . Encoding:, Rotate Right f (No Carry) = 0100. Encoding:, Rotate Right f (No Carry) = 00da. Encoding:, Rotate Right f (No Carry) = ffff. Encoding:, Rotate Right f (No Carry) = ffff. Description:, Rotate Right f (No Carry) = The contents of register 'f' are rotated. Description:, Rotate Right f (No Carry) = The contents of register 'f' are rotated. Description:, Rotate Right f (No Carry) = The contents of register 'f' are rotated. Description:, Rotate Right f (No Carry) = The contents of register 'f' are rotated",
    "PIC18F2525/2620/4525/4620\nThe contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See\nSection 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1",
    "PIC18F2525/2620/4525/4620\nSyntax:, Set f = SETF f {,a}. Syntax:, Set f = SETF f {,a}. Syntax:, Set f = SETF f {,a}. Syntax:, Set f = SETF f {,a}. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Status Affected:, Set f = None. Status Affected:, Set f = None. Status Affected:, Set f = None. Status Affected:, Set f = None. Encoding:, Set f = 0110. Encoding:, Set f = 100a. Encoding:, Set f =",
    "PIC18F2525/2620/4525/4620\nffff. Encoding:, Set f = ffff. Description:, Set f = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Set f = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details..",
    "PIC18F2525/2620/4525/4620\nDescription:, Set f = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Set f = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Set f = 1. Words:, Set",
    "PIC18F2525/2620/4525/4620\nf = 1. Words:, Set f = 1. Words:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Q Cycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q1, Set f = Q2. Q1, Set f = Q2. Q1, Set f = Q3. Q1, Set f = Q4. Decode, Set f = Read register 'f'. Decode, Set f = Read register 'f'. Decode, Set f = Process Data. Decode, Set f = Write register 'f'. Example:, Set f = SETF. Example:, Set f = . Example:, Set f = REG, 1. Example:, Set f = . Before Instruction REG, Set f = =. Before Instruction REG, Set f = 5Ah. Before Instruction REG, Set f = . Before Instruction REG, Set f = . After Instruction REG, Set",
    "PIC18F2525/2620/4525/4620\nf = =. After Instruction REG, Set f = FFh. After Instruction REG, Set f = . After Instruction REG, Set f = \nSyntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:,  = . Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:,  = . Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, \u2192. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, \u2192. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, \u2192. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, \u2192. Operation:,",
    "PIC18F2525/2620/4525/4620\n= . Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:,  = . Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0011. Encoding:,",
    "PIC18F2525/2620/4525/4620\n= . Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:,",
    "PIC18F2525/2620/4525/4620\n= . Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:,  = . Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:,  = . Q Cycle Activity:, Enter Sleep mode = Q Cycle Activity:. Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:,  = . Q1, Enter Sleep mode = Q2. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q4. Q1,  = . Decode, Enter Sleep mode = No operation. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Go to Sleep. Decode,  = ",
    "Example:\nSLEEP\nBefore Instruction\nTO\n=\n?\nPD\n=\n?\nAfter Instruction\nTO\n=\n1\u2020\nPD\n=\n0",
    "Example:\nSyntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Subtract f from Wwith Borrow = (W) -",
    "Example:\n(f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Encoding:, Subtract f from Wwith Borrow = 0101. Encoding:, Subtract f from Wwith Borrow = 01da. Encoding:, Subtract f from Wwith Borrow = ffff. Encoding:, Subtract f from Wwith Borrow = ffff. Description:, Subtract",
    "Example:\nf from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR",
    "Example:\nis used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement",
    "Example:\nmethod). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1\n- \u2020   If WDT causes wake-up, this bit is cleared.",
    "Example:\nQ Cycle Activity:",
    "Example:\nBefore Instruction, Q2.Read register.Example 1: = Before Instruction. Before Instruction, 'f'.SUBFWB = . Before Instruction, Q3.Process Data.REG, 1, 0 = . Before Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG, 'f'.SUBFWB = 3. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 2. W, Q3.Process Data.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C, 'f'.SUBFWB = 1. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . After Instruction, Q2.Read register.Example 1: = After Instruction. After Instruction, 'f'.SUBFWB = . After Instruction, Q3.Process",
    "Example:\nData.REG, 1, 0 = . After Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG, 'f'.SUBFWB = FF. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 2. W, Q3.Process Data.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C, 'f'.SUBFWB = 0. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . Z, Q2.Read register.Example 1: = =. Z, 'f'.SUBFWB = 0. Z, Q3.Process Data.REG, 1, 0 = . Z, Q4.Write to destination. = . N, Q2.Read register.Example 1: = =. N,",
    "Example:\n'f'.SUBFWB = 1 ;. N, Q3.Process Data.REG, 1, 0 = result is negative. N, Q4.Write to destination. = . Example 2:, Q2.Read register.Example 1: = . Example 2:, 'f'.SUBFWB = SUBFWB. Example 2:, Q3.Process Data.REG, 1, 0 = REG, 0, 0. Example 2:, Q4.Write to destination. = . Before Instruction, Q2.Read register.Example 1: = Before Instruction. Before Instruction, 'f'.SUBFWB = . Before Instruction, Q3.Process Data.REG, 1, 0 = . Before Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG, 'f'.SUBFWB = 2. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 5. W, Q3.Process",
    "Example:\nData.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C, 'f'.SUBFWB = 1. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . After Instruction, Q2.Read register.Example 1: = After Instruction. After Instruction, 'f'.SUBFWB = . After Instruction, Q3.Process Data.REG, 1, 0 = . After Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG, 'f'.SUBFWB = 2. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 3. W, Q3.Process Data.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C,",
    "Example:\n'f'.SUBFWB = 1. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . Z, Q2.Read register.Example 1: = =. Z, 'f'.SUBFWB = 0. Z, Q3.Process Data.REG, 1, 0 = . Z, Q4.Write to destination. = . N, Q2.Read register.Example 1: = =. N, 'f'.SUBFWB = 0. N, Q3.Process Data.REG, 1, 0 = ; result is positive. N, Q4.Write to destination. = . Example 3:, Q2.Read register.Example 1: = . Example 3:, 'f'.SUBFWB = SUBFWB. Example 3:, Q3.Process Data.REG, 1, 0 = REG, 1, 0. Example 3:, Q4.Write to destination. = . Before Instruction, Q2.Read register.Example 1: = Before Instruction. Before Instruction, 'f'.SUBFWB = . Before Instruction, Q3.Process",
    "Example:\nData.REG, 1, 0 = . Before Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG, 'f'.SUBFWB = 1. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 2. W, Q3.Process Data.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C, 'f'.SUBFWB = 0. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . After Instruction, Q2.Read register.Example 1: = After Instruction. After Instruction, 'f'.SUBFWB = . After Instruction, Q3.Process Data.REG, 1, 0 = . After Instruction, Q4.Write to destination. = . REG, Q2.Read register.Example 1: = =. REG,",
    "Example:\n'f'.SUBFWB = 0. REG, Q3.Process Data.REG, 1, 0 = . REG, Q4.Write to destination. = . W, Q2.Read register.Example 1: = =. W, 'f'.SUBFWB = 2. W, Q3.Process Data.REG, 1, 0 = . W, Q4.Write to destination. = . C, Q2.Read register.Example 1: = =. C, 'f'.SUBFWB = 1. C, Q3.Process Data.REG, 1, 0 = . C, Q4.Write to destination. = . Z, Q2.Read register.Example 1: = =. Z, 'f'.SUBFWB = 1. Z, Q3.Process Data.REG, 1, 0 = ; result is zero. Z, Q4.Write to destination. = . N, Q2.Read register.Example 1: = =. N, 'f'.SUBFWB = 0. N, Q3.Process Data.REG, 1, 0 = . N, Q4.Write to destination. = ",
    "PIC18F2525/2620/4525/4620\nSyntax: SUBLW k, Subtract Wfrom Literal = . Syntax: SUBLW k,  = . Syntax: SUBLW k,  = . Syntax: SUBLW k,  = . Syntax: SUBLW k,  = . Syntax: SUBLW k,  = . Syntax: SUBLW k,  = . Operands: 0 \u2264 k \u2264 255, Subtract Wfrom Literal = . Operands: 0 \u2264 k \u2264 255,  = . Operands: 0 \u2264 k \u2264 255,  = . Operands: 0 \u2264 k \u2264 255,  = . Operands: 0 \u2264 k \u2264 255,  = . Operands: 0 \u2264 k \u2264 255,  = . Operands: 0 \u2264 k \u2264 255,  = . Operation: k - (W) \u2192 W, Subtract Wfrom Literal = . Operation: k - (W) \u2192 W,  = . Operation: k - (W) \u2192 W,  = . Operation: k - (W) \u2192 W,  = . Operation: k - (W) \u2192 W,  = . Operation: k - (W) \u2192 W,",
    "PIC18F2525/2620/4525/4620\n= . Operation: k - (W) \u2192 W,  = . Status Affected: N, OV, C, DC, Z, Subtract Wfrom Literal = . Status Affected: N, OV, C, DC, Z,  = . Status Affected: N, OV, C, DC, Z,  = . Status Affected: N, OV, C, DC, Z,  = . Status Affected: N, OV, C, DC, Z,  = . Status Affected: N, OV, C, DC, Z,  = . Status Affected: N, OV, C, DC, Z,  = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom Literal = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,",
    "PIC18F2525/2620/4525/4620\n= . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,  = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,  = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,  = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,  = . Encoding: 0000 1000 kkkk kkkk Description Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1,  = . Q Cycle Activity: Q1, Subtract Wfrom Literal = Q2. Q Cycle Activity: Q1,  = . Q Cycle Activity: Q1,  = . Q Cycle Activity: Q1,",
    "PIC18F2525/2620/4525/4620\n= Q3. Q Cycle Activity: Q1,  = Q4. Q Cycle Activity: Q1,  = . Q Cycle Activity: Q1,  = . Decode, Subtract Wfrom Literal = . Decode,  = Read. Decode,  = . Decode,  = Data. Decode,  = Write to. Decode,  = W. Decode,  = . Example 1: SUBLW 02h, Subtract Wfrom Literal = . Example 1: SUBLW 02h,  = . Example 1: SUBLW 02h,  = . Example 1: SUBLW 02h,  = . Example 1: SUBLW 02h,  = . Example 1: SUBLW 02h,  = . Example 1: SUBLW 02h,  = . Instruction W, Subtract Wfrom Literal = = = =. Instruction W,  = 01h. Instruction W,  = result. Instruction W,  = . Instruction W,  = . Instruction W,  = . Instruction W,  = . Before, Subtract Wfrom Literal = . Before,  = literal. Before,  = 'k'. Before,  = Process. Before,",
    "PIC18F2525/2620/4525/4620\n= . Before,  = . Before,  = . Instruction W C After, Subtract Wfrom Literal = = = Instruction. Instruction W C After,  = 01h ?. Instruction W C After,  = . Instruction W C After,  = . Instruction W C After,  = . Instruction W C After,  = . Instruction W C After,  = . W C Z N, Subtract Wfrom Literal = =. W C Z N,  = . W C Z N,  = 1 0 0. W C Z N,  = is positive. W C Z N,  = . W C Z N,  = . W C Z N,  = . Before C After Instruction W C Z N, Subtract Wfrom Literal = = = = = = Instruction = = =. Before C After Instruction W C Z N,  = . Before C After Instruction W C Z N,  = ;. Before C After Instruction W C Z N,  = . Before C After Instruction W C Z N,  = . Before C After Instruction W C Z N,  = . Before C After Instruction W C Z N,",
    "PIC18F2525/2620/4525/4620\n= . Example 2:, Subtract Wfrom Literal = =. Example 2:,  = . Example 2:,  = SUBLW. Example 2:,  = . Example 2:,  = . Example 2:,  = . Example 2:,  = . , Subtract Wfrom Literal = . ,  = . ,  = 02h ? 00h 1 1 0. ,  = . ,  = . ,  = . ,  = . , Subtract Wfrom Literal = . ,  = . ,  = 02h. ,  = . ,  = . ,  = . ,  = . Before W, Subtract Wfrom Literal = . Before W,  = . Before W,  = . Before W,  = . Before W,  = . Before W,  = . Before W,  = . , Subtract Wfrom Literal = = = =. ,  = . ,  = 0 0 1. ,  = complement) is. ,  = negative. ,  = . ,  = . C, Subtract Wfrom Literal = . C,  = . C,  = FFh (2's. C,  = . C,  = . C,  = . C,",
    "PIC18F2525/2620/4525/4620\n= ;. , Subtract Wfrom Literal = . ,  = . ,  = 03h ?. ,  = . ,  = . ,  = . ,  = . Example 3:, Subtract Wfrom Literal = . Example 3:,  = . Example 3:,  = SUBLW 02h. Example 3:,  = . Example 3:,  = . Example 3:,  = . Example 3:,  = . After Instruction W C Z, Subtract Wfrom Literal = . After Instruction W C Z,  = . After Instruction W C Z,  = . After Instruction W C Z,  = result. After Instruction W C Z,  = . After Instruction W C Z,  = . After Instruction W C Z,  = . N, Subtract Wfrom Literal = . N,  = . N,  = . N,  = . N,  = . N,  = . N,  = . , Subtract Wfrom Literal = . ,  = . ,  = . ,  = . ,  = . ,  = . ,  = ;",
    "PIC18F2525/2620/4525/4620\nSyntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208",
    "PIC18F2525/2620/4525/4620\n[0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status",
    "PIC18F2525/2620/4525/4620\nAffected:, Subtract Wfrom f = N, OV, C, DC, Z. Encoding:, Subtract Wfrom f = 0101. Encoding:, Subtract Wfrom f = 11da. Encoding:, Subtract Wfrom f = ffff. Encoding:, Subtract Wfrom f = . Encoding:, Subtract Wfrom f = ffff. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If",
    "PIC18F2525/2620/4525/4620\n'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the",
    "PIC18F2525/2620/4525/4620\nAccess Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract",
    "PIC18F2525/2620/4525/4620\nWfrom f = 1. Cycles:, Subtract Wfrom f = 1. Q1 Decode, Subtract Wfrom f = Q2 Read. Q1 Decode, Subtract Wfrom f = Q3. Q1 Decode, Subtract Wfrom f = Q3. Q1 Decode, Subtract Wfrom f = Q4. Q1 Decode, Subtract Wfrom f = Q4. Example 1:, Subtract Wfrom f = register 'f'. Example 1:, Subtract Wfrom f = Process. Example 1:, Subtract Wfrom f = Data. Example 1:, Subtract Wfrom f = destination. Example 1:, Subtract Wfrom f = SUBWF. REG, 1, 0 Before Instruction, Subtract Wfrom f = REG, 1, 0 Before Instruction. REG, 1, 0 Before Instruction, Subtract Wfrom f = REG, 1, 0 Before Instruction. REG, 1, 0 Before Instruction, Subtract Wfrom f = REG,",
    "PIC18F2525/2620/4525/4620\n1, 0 Before Instruction. REG, 1, 0 Before Instruction, Subtract Wfrom f = REG, 1, 0 Before Instruction. REG, 1, 0 Before Instruction, Subtract Wfrom f = REG, 1, 0 Before Instruction. REG W C, Subtract Wfrom f = = Instruction. REG W C, Subtract Wfrom f = ? 1 2. REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = = 3 = 2. REG W C, Subtract Wfrom f = =. REG W C, Subtract Wfrom f = ;. REG W C, Subtract Wfrom f = result is positive. REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = = = 1. Example 2:, Subtract Wfrom f = Example 2:. Example 2:, Subtract Wfrom f = REG,. Example 2:, Subtract Wfrom",
    "PIC18F2525/2620/4525/4620\nf = 0,. Example 2:, Subtract Wfrom f = . Example 2:, Subtract Wfrom f = SUBWF. 0 Before Instruction, Subtract Wfrom f = 0 Before Instruction. 0 Before Instruction, Subtract Wfrom f = 0 Before Instruction. 0 Before Instruction, Subtract Wfrom f = 0 Before Instruction. 0 Before Instruction, Subtract Wfrom f = 0 Before Instruction. 0 Before Instruction, Subtract Wfrom f = 0 Before Instruction. REG W C, Subtract Wfrom f = =. REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = . REG W C, Subtract Wfrom f = 2 = 2 = ?. After Instruction REG W, Subtract Wfrom f = = =. After Instruction REG W, Subtract Wfrom f = 1. After Instruction REG W, Subtract Wfrom f = . After Instruction REG W, Subtract Wfrom f",
    "PIC18F2525/2620/4525/4620\n= . After Instruction REG W, Subtract Wfrom f = 2 0. C Z N, Subtract Wfrom f = = =. C Z N, Subtract Wfrom f = ;. C Z N, Subtract Wfrom f = result is zero. C Z N, Subtract Wfrom f = . C Z N, Subtract Wfrom f = . 3:, Subtract Wfrom f = =. 3:, Subtract Wfrom f = 1 0. 3:, Subtract Wfrom f = . 3:, Subtract Wfrom f = . 3:, Subtract Wfrom f = . Example Before Instruction, Subtract Wfrom f = . Example Before Instruction, Subtract Wfrom f = . Example Before Instruction, Subtract Wfrom f = REG, 1, 0. Example Before Instruction, Subtract Wfrom f = . Example Before Instruction, Subtract Wfrom f = SUBWF. W C, Subtract Wfrom f = . W C,",
    "PIC18F2525/2620/4525/4620\nSubtract Wfrom f = . W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . W C, Subtract Wfrom f = 1. REG, Subtract Wfrom f = = = =. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = 2. After Instruction, Subtract Wfrom f = =. After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = ?. , Subtract Wfrom f = = =. , Subtract Wfrom f = 0 ;. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . W C, Subtract Wfrom f = . W C, Subtract Wfrom",
    "PIC18F2525/2620/4525/4620\nf = . W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . W C, Subtract Wfrom f = . Z, Subtract Wfrom f = . Z, Subtract Wfrom f = . Z, Subtract Wfrom f = result is negative. Z, Subtract Wfrom f = . Z, Subtract Wfrom f = 2. N, Subtract Wfrom f = . N, Subtract Wfrom f = . N, Subtract Wfrom f = complement). N, Subtract Wfrom f = . N, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = FFh ;(2's. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . , Subtract Wfrom f = =. , Subtract Wfrom f = . , Subtract",
    "PIC18F2525/2620/4525/4620\nWfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = 1. , Subtract Wfrom f = . , Subtract Wfrom f = 0. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = =. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = ",
    "Subtract W from f with Borrow\nSyntax:\nSUBWFB    f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) - (W) - (C) \u2192 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0101\n10da\nffff\nffff\nDescription:\nSubtract W and the Carry flag (borrow) from register 'f' (2's\ncomplement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:",
    "Subtract W from f with Borrow\nBefore Instruction, Q2.Read register 'f'.Example 1: = Before Instruction. Before Instruction, Read register 'f'.SUBWFB = . Before Instruction, Q3.Process Data.REG, 1, = . Before Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register 'f'.SUBWFB = 19h. REG, Q3.Process Data.REG, 1, = (0001. REG, Q4.Write to destination.0 = 1001). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 0Dh. W, Q3.Process Data.REG, 1, = (0000. W, Q4.Write to destination.0 = 1101). C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 1. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . After",
    "Subtract W from f with Borrow\nInstruction, Q2.Read register 'f'.Example 1: = After Instruction. After Instruction, Read register 'f'.SUBWFB = . After Instruction, Q3.Process Data.REG, 1, = . After Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register 'f'.SUBWFB = 0Ch. REG, Q3.Process Data.REG, 1, = (0000. REG, Q4.Write to destination.0 = 1011). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 0Dh. W, Q3.Process Data.REG, 1, = (0000. W, Q4.Write to destination.0 = 1101). C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 1. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . Z,",
    "Subtract W from f with Borrow\nQ2.Read register 'f'.Example 1: = =. Z, Read register 'f'.SUBWFB = 0. Z, Q3.Process Data.REG, 1, = . Z, Q4.Write to destination.0 = . N, Q2.Read register 'f'.Example 1: = =. N, Read register 'f'.SUBWFB = 0. N, Q3.Process Data.REG, 1, = ; result is. N, Q4.Write to destination.0 = positive. Example 2: SUBWFB, Q2.Read register 'f'.Example 1: = Example 2: SUBWFB. Example 2: SUBWFB, Read register 'f'.SUBWFB = Example 2: SUBWFB. Example 2: SUBWFB, Q3.Process Data.REG, 1, = REG, 0,. Example 2: SUBWFB, Q4.Write to destination.0 = 0. Before Instruction, Q2.Read register 'f'.Example 1: = Before Instruction. Before Instruction, Read register 'f'.SUBWFB = . Before Instruction, Q3.Process",
    "Subtract W from f with Borrow\nData.REG, 1, = . Before Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register 'f'.SUBWFB = 1Bh. REG, Q3.Process Data.REG, 1, = (0001. REG, Q4.Write to destination.0 = 1011). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 1Ah. W, Q3.Process Data.REG, 1, = (0001. W, Q4.Write to destination.0 = 1010). C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 0. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . After Instruction, Q2.Read register 'f'.Example 1: = After Instruction. After Instruction, Read register 'f'.SUBWFB = . After Instruction, Q3.Process",
    "Subtract W from f with Borrow\nData.REG, 1, = . After Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register 'f'.SUBWFB = 1Bh. REG, Q3.Process Data.REG, 1, = (0001. REG, Q4.Write to destination.0 = 1011). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 00h. W, Q3.Process Data.REG, 1, = . W, Q4.Write to destination.0 = . C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 1. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . Z, Q2.Read register 'f'.Example 1: = =. Z, Read register 'f'.SUBWFB = 1. Z, Q3.Process Data.REG, 1, = ; result is.",
    "Subtract W from f with Borrow\nZ, Q4.Write to destination.0 = zero. N, Q2.Read register 'f'.Example 1: = =. N, Read register 'f'.SUBWFB = 0. N, Q3.Process Data.REG, 1, = . N, Q4.Write to destination.0 = . Example 3: SUBWFB, Q2.Read register 'f'.Example 1: = Example 3: SUBWFB. Example 3: SUBWFB, Read register 'f'.SUBWFB = Example 3: SUBWFB. Example 3: SUBWFB, Q3.Process Data.REG, 1, = REG, 1,. Example 3: SUBWFB, Q4.Write to destination.0 = 0. Before Instruction, Q2.Read register 'f'.Example 1: = Before Instruction. Before Instruction, Read register 'f'.SUBWFB = Before Instruction. Before Instruction, Q3.Process Data.REG, 1, = . Before Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register",
    "Subtract W from f with Borrow\n'f'.SUBWFB = 03h. REG, Q3.Process Data.REG, 1, = (0000. REG, Q4.Write to destination.0 = 0011). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 0Eh. W, Q3.Process Data.REG, 1, = (0000. W, Q4.Write to destination.0 = 1101). C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 1. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . After Instruction, Q2.Read register 'f'.Example 1: = After Instruction. After Instruction, Read register 'f'.SUBWFB = After Instruction. After Instruction, Q3.Process Data.REG, 1, = . After Instruction, Q4.Write to destination.0 = . REG, Q2.Read register 'f'.Example 1: = =. REG, Read register",
    "Subtract W from f with Borrow\n'f'.SUBWFB = F5h. REG, Q3.Process Data.REG, 1, = (1111 ; [2's comp]. REG, Q4.Write to destination.0 = 0100). W, Q2.Read register 'f'.Example 1: = =. W, Read register 'f'.SUBWFB = 0Eh. W, Q3.Process Data.REG, 1, = (0000. W, Q4.Write to destination.0 = 1101). C, Q2.Read register 'f'.Example 1: = =. C, Read register 'f'.SUBWFB = 0. C, Q3.Process Data.REG, 1, = . C, Q4.Write to destination.0 = . Z, Q2.Read register 'f'.Example 1: = =. Z, Read register 'f'.SUBWFB = 0. Z, Q3.Process Data.REG, 1, = . Z, Q4.Write to destination.0 = . N, Q2.Read register 'f'.Example 1: = =.",
    "Subtract W from f with Borrow\nN, Read register 'f'.SUBWFB = 1. N, Q3.Process Data.REG, 1, = ; result is. N, Q4.Write to destination.0 = negative\nWords:\nCycles:",
    "Subtract W from f with Borrow\nSyntax:, Swap f = SWAPF. Syntax:, Swap f = f {,d {,a}}. Syntax:, Swap f = f {,d {,a}}. Syntax:, Swap f = f {,d {,a}}. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1]. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>)",
    "Subtract W from f with Borrow\n\u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Encoding:, Swap f = 0011. Encoding:, Swap f = 10da. Encoding:, Swap f = ffff. Encoding:, Swap f = ffff\nDescription:\nThe upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.",
    "Subtract W from f with Borrow\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination",
    "Example:\nSWAPF\nREG, 1, 0\nBefore Instruction\nREG\n=\nAfter Instruction\nREG\n=\n53h\n35h",
    "PIC18F2525/2620/4525/4620\nTBLRD, 1 = TBLRD. TBLRD, 2 = Table Read. TBLRD, 3 = Table Read. TBLRD, 4 = Table Read. Syntax:, 1 = Syntax:. Syntax:, 2 = TBLRD ( *; *+; *-; +*). Syntax:, 3 = TBLRD ( *; *+; *-; +*). Syntax:, 4 = TBLRD ( *; *+; *-; +*). Operands:, 1 = Operands:. Operands:, 2 = None. Operands:, 3 = None. Operands:, 4 = None. Operation:, 1 = Operation:. Operation:, 2 = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT,",
    "PIC18F2525/2620/4525/4620\n(TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, \u2192. Operation:, 3 = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, \u2192. Operation:, 4 = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, \u2192. Status",
    "PIC18F2525/2620/4525/4620\nAffected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 0000. Encoding:, 3 = 0000. Encoding:, 4 = 0000. Description:, 1 = Description:. Description:, 2 = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte. Description:, 3 = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a",
    "PIC18F2525/2620/4525/4620\n2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte. Description:, 4 = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte. Words:, 1 = Words:. Words:, 2 = . Words:, 3 = . Words:, 4 = . Cycles:, 1 = Cycles:. Cycles:, 2 = . Cycles:, 3 = . Cycles:, 4 = . Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. , 1 = Q1. , 2 = Q1. , 3 = Q2. , 4 =",
    "PIC18F2525/2620/4525/4620\nQ3. , 1 = Decode. , 2 = Decode. , 3 = No operation. , 4 = No operation. , 1 = No operation. , 2 = No operation. , 3 = No operation (Read Program Memory). , 4 = No operation",
    "PIC18F2525/2620/4525/4620\nExample 1:, Table Read (Continued) = TBLRD. Example 1:, Table Read (Continued) = ;. Example 1:, Table Read (Continued) = . Before Instruction, Table Read (Continued) = Before Instruction. Before Instruction, Table Read (Continued) = =. Before Instruction, Table Read (Continued) = 55h. TBLPTR, Table Read (Continued) = TBLPTR. TBLPTR, Table Read (Continued) = =. TBLPTR, Table Read (Continued) = 00A356h. MEMORY (00A356h), Table Read (Continued) = MEMORY (00A356h). MEMORY (00A356h), Table Read (Continued) = =. MEMORY (00A356h), Table Read (Continued) = 34h. After Instruction TABLAT, Table Read (Continued) = After Instruction TABLAT. After Instruction TABLAT, Table Read (Continued) = =. After Instruction TABLAT, Table Read (Continued) = 34h. TBLPTR, Table Read (Continued) = TBLPTR. TBLPTR, Table Read (Continued) = =.",
    "PIC18F2525/2620/4525/4620\nTBLPTR, Table Read (Continued) = 00A357h. Example 2:, Table Read (Continued) = TBLRD +*. Example 2:, Table Read (Continued) = ;. Example 2:, Table Read (Continued) = . Before Instruction TABLAT, Table Read (Continued) = Before Instruction TABLAT. Before Instruction TABLAT, Table Read (Continued) = =. Before Instruction TABLAT, Table Read (Continued) = AAh. TBLPTR, Table Read (Continued) = TBLPTR. TBLPTR, Table Read (Continued) = =. TBLPTR, Table Read (Continued) = 01A357h. MEMORY (01A357h), Table Read (Continued) = MEMORY (01A357h). MEMORY (01A357h), Table Read (Continued) = =. MEMORY (01A357h), Table Read (Continued) = 12h. MEMORY (01A358h), Table Read (Continued) = MEMORY (01A358h). MEMORY (01A358h), Table Read (Continued) = =. MEMORY",
    "PIC18F2525/2620/4525/4620\n(01A358h), Table Read (Continued) = 34h. After Instruction TABLAT, Table Read (Continued) = After Instruction TABLAT. After Instruction TABLAT, Table Read (Continued) = =. After Instruction TABLAT, Table Read (Continued) = 34h. TBLPTR, Table Read (Continued) = TBLPTR. TBLPTR, Table Read (Continued) = =. TBLPTR, Table Read (Continued) = 01A358h\nTBLWT\nTable Write\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\nQ Cycle Activity:\nTBLWT ( *; *+; *-; +*)\nNone if TBLWT*,\n(TABLAT)\n\u2192\nHolding Register,\nTBLPTR - No Change;\nif TBLWT*+,\n(TABLAT)\n\u2192\nHolding Register,\n(TBLPTR) + 1\n\u2192\nTBLPTR;\nif TBLWT*-,\n(TABLAT)\n\u2192\nHolding Register,\n(TBLPTR) - 1\n\u2192\nTBLPTR;\nif TBLWT+*,\n(TBLPTR) + 1\n\u2192\nTBLPTR,\n(TABLAT)",
    "PIC18F2525/2620/4525/4620\n\u2192\nHolding Register\nNone\n0000\n0000",
    "PIC18F2525/2620/4525/4620\nExample 1:, Table Write = TBLWT *+;. Example 1:, (Continued) = . Example 1:, (Continued) = . Before Instruction, Table Write = . Before Instruction, (Continued) = . Before Instruction, (Continued) = . TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A356h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = FFh. After Instructions (table write completion), Table Write = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After Instructions (table write completion). TABLAT, Table Write = TABLAT.",
    "PIC18F2525/2620/4525/4620\nTABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A357h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = 55h. Example 2:, Table Write = TBLWT +*;. Example 2:, (Continued) = . Example 2:, (Continued) = . Before Instruction, Table Write = Before Instruction. Before Instruction, (Continued) = . Before Instruction, (Continued) = . TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 34h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Ah. HOLDING REGISTER, Table Write = HOLDING REGISTER. HOLDING REGISTER,",
    "PIC18F2525/2620/4525/4620\n(Continued) = =. HOLDING REGISTER, (Continued) = FFh. (01389Ah) HOLDING REGISTER (01389Bh), Table Write = (01389Ah) HOLDING REGISTER (01389Bh). (01389Ah) HOLDING REGISTER (01389Bh), (Continued) = =. (01389Ah) HOLDING REGISTER (01389Bh), (Continued) = FFh. After Instruction (table write completion), Table Write = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 34h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Bh. HOLDING REGISTER (01389Ah), Table Write = HOLDING REGISTER (01389Ah). HOLDING REGISTER",
    "PIC18F2525/2620/4525/4620\n(01389Ah), (Continued) = =. HOLDING REGISTER (01389Ah), (Continued) = FFh. HOLDING REGISTER (01389Bh), Table Write = HOLDING REGISTER (01389Bh). HOLDING REGISTER (01389Bh), (Continued) = =. HOLDING REGISTER (01389Bh), (Continued) = 34h\n11nn nn=0 *\n=1 *+\n=2 *-\n=3 +*\nThis instruction uses the 3 LSBs of TBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). (Refer to Section 7.0 'Flash Program Memory' for additional details on programming Flash memory.) The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. The LSb of the TBLPTR selects which byte of the program memory location to access.\nTBLPTR[0] = 0 :\nLeast Significant Byte of Program Memory Word\nTBLPTR[0] = 1 :",
    "PIC18F2525/2620/4525/4620\nMost Significant\nByte of Program\nMemory Word\nThe TBLWT instruction can modify the value of TBLPTR as follows:\n\u00b7 no change\n\u00b7 post-increment\n\u00b7 post-decrement\n\u00b7 pre-increment\n1\n2\nDecode, Q2 = No operation. Decode, Q3 = No operation. Decode, Q4 = No operation. No operation, Q2 = No operation (Read TABLAT). No operation, Q3 = No operation. No operation, Q4 = No operation (Write to Holding Register )\n0000",
    "PIC18F2525/2620/4525/4620\nSyntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, Skip if 0 = TSTFSZ f {,a}. Operands:, Test f, Skip if 0 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Test f, Skip if 0 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Test f, Skip if 0 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Test f, Skip if 0 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Operation:, Test f, Skip if 0 = skip if f = 0. Status Affected:, Test",
    "PIC18F2525/2620/4525/4620\nf, Skip if 0 = None. Status Affected:, Test f, Skip if 0 = None. Status Affected:, Test f, Skip if 0 = None. Status Affected:, Test f, Skip if 0 = None. Encoding:, Test f, Skip if 0 = 0110. Encoding:, Test f, Skip if 0 = 011a. Encoding:, Test f, Skip if 0 = ffff. Encoding:, Test f, Skip if 0 = ffff. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if",
    "PIC18F2525/2620/4525/4620\n0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See",
    "PIC18F2525/2620/4525/4620\nSection 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Test f, Skip if 0 = If 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Words:, Test f, Skip if 0 = 1. Cycles:, Test f, Skip if 0 = 1(2). Cycles:, Test f, Skip if 0 = 1(2). Cycles:, Test f, Skip if 0 =",
    "PIC18F2525/2620/4525/4620\n1(2). Cycles:, Test f, Skip if 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "PIC18F2525/2620/4525/4620\nSyntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Syntax:, Exclusive OR Literal with W = XORLW k. Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with W =",
    "PIC18F2525/2620/4525/4620\nN, Z. Status Affected:, Exclusive OR Literal with W = N, Z. Encoding:, Exclusive OR Literal with W = 0000. Encoding:, Exclusive OR Literal with W = 1010. Encoding:, Exclusive OR Literal with W = kkkk. Encoding:, Exclusive OR Literal with W = kkkk. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORed with the 8-bit literal 'k'. The result is placed in W.. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W =",
    "PIC18F2525/2620/4525/4620\n1. Cycles:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W = 1. Cycles:, Exclusive OR Literal with W = 1. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Exclusive OR Literal with W = Q Cycle Activity:. Q1, Exclusive OR Literal with W = Q2. Q1, Exclusive OR Literal with W = Q3. Q1, Exclusive OR Literal with W = Q3. Q1, Exclusive OR Literal with W = Q4. Decode, Exclusive OR Literal with W = Read literal 'k'. Decode, Exclusive OR Literal with W = Process. Decode, Exclusive OR Literal with W = Process. Decode, Exclusive OR Literal with W = Write to W. Example:, Exclusive OR Literal with W = XORLW. Example:, Exclusive OR Literal with W = 0AFh. Example:, Exclusive OR Literal with",
    "PIC18F2525/2620/4525/4620\nW = . Example:, Exclusive OR Literal with W = . Before Instruction, Exclusive OR Literal with W = Before Instruction. Before Instruction, Exclusive OR Literal with W = . Before Instruction, Exclusive OR Literal with W = . Before Instruction, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = B5h. W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . After Instruction, Exclusive OR Literal with W = After Instruction. After Instruction, Exclusive OR Literal with W = . After Instruction, Exclusive OR Literal with W = . After Instruction, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = 1Ah. W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = . W, Exclusive OR Literal with W = ",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE    TSTFSZ  CNT, 1\nNZERO   :\nZERO    :\nBefore Instruction\nPC\n=\nAddress (HERE)\nAfter Instruction\nIf CNT\n=\n00h,\nPC\n=\nAddress (ZERO)\nIf CNT\n\u2260\n00h,\nPC\n=\nAddress (NZERO)",
    "Exclusive OR W with f\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\nXORWF     f {,d {,a}}\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\n(W) .XOR. (f) \u2192 dest\nN, Z\n0001\n10da ffff\nffff\nExclusive OR the contents of W with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 24.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\n1\n1\nQ Cycle Activity:",
    "Exclusive OR W with f\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nXORWF   REG, 1, 0\nBefore Instruction\nREG\n=\nW\n=\nAfter Instruction\nREG\n=\nW\n=\nAFh\nB5h\n1Ah\nB5h",
    "24.2 Extended Instruction Set\nIn addition to the standard 75 instructions of the PIC18 instruction  set,  PIC18F2525/2620/4525/4620  devices also  provide  an  optional  extension  to  the  core  CPU functionality. The added features include eight additional instructions that augment indirect and indexed addressing operations and the implementation of Indexed Literal Offset Addressing mode for many of the standard PIC18 instructions.\nThe additional features of the extended instruction set are disabled by default. To enable them, users must set the XINST Configuration bit.\nThe instructions in the extended set (with the exception of CALLW MOVSF , and MOVSS ) can all be classified as literal operations,  which  either  manipulate  the  File Select Registers, or use them for Indexed Addressing. Two  of  the  instructions, ADDFSR and SUBFSR ,  each have an additional special instantiation for using FSR2. These  versions  ( ADDULNK and SUBULNK )  allow  for automatic return after execution.",
    "24.2 Extended Instruction Set\nThe extended instructions are specifically implemented to optimize re-entrant program code (that is, code that is  recursive  or  that  uses  a  software  stack)  written  in high-level languages,  particularly C. Among  other things, they allow users working in high-level languages  to perform  certain operations on  data structures more efficiently. These include:\n\u00b7 dynamic allocation and deallocation of software stack space when entering and leaving subroutines\n\u00b7 Function Pointer invocation\n\u00b7 Software Stack Pointer manipulation\nA summary of the instructions in the extended instruction set is provided in Table 24-3. Detailed descriptions are provided in Section 24.2.2 'Extended  Instruction Set' . The  opcode  field descriptions in Table 24-1 (page 268)  apply  to  both  the  standard  and  extended PIC18 instruction sets.\nNote:\nThe  instruction set extension  and  the Indexed  Literal  Offset  Addressing  mode were designed for optimizing applications written in C; the user may likely never use these  instructions  directly  in  assembler. The syntax for these commands is provided as a reference for users who may be reviewing code that has been generated by a compiler.",
    "24.2.1 EXTENDED INSTRUCTION SYNTAX\nMost of the extended instructions use indexed arguments, using one of the File Select Registers and some offset to specify a source or destination register. When an argument for an instruction serves as part of indexed addressing, it is enclosed in square brackets ('[ ]'). This is done to indicate that the argument is used as  an  index  or  offset.  The  MPASM\u2122  Assembler  will flag an error if it determines that an index or offset value is not bracketed.\nWhen the extended instruction set is enabled, brackets are  also  used  to  indicate  index  arguments  in  byteoriented and bit-oriented instructions. This is in addition to other changes in their syntax. For more details, see Section 24.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' .\nNote:\n- \u00b7 manipulation of variables located in a software stack\nIn  the  past,  square  brackets  have  been used to denote optional arguments in the PIC18 and earlier instruction sets. In this text and going forward, optional arguments are denoted by braces ('{ }').",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nADDFSR, Mnemonic,.Operands = f, k. ADDFSR, Description. = Add Literal to FSR. ADDFSR, Cycles. = 1. ADDFSR, 16-Bit Instruction Word.MSb = 1110. ADDFSR, 16-Bit Instruction Word.MSb = 1000. ADDFSR, 16-Bit Instruction Word.LSb = ffkk. ADDFSR, 16-Bit Instruction Word. = kkkk. ADDFSR, Status Affected. = None. ADDULNK, Mnemonic,.Operands = k. ADDULNK, Description. = Add Literal to FSR2 and Return. ADDULNK, Cycles. = 2. ADDULNK, 16-Bit Instruction Word.MSb = 1110. ADDULNK, 16-Bit Instruction Word.MSb = 1000. ADDULNK, 16-Bit Instruction Word.LSb = 11kk. ADDULNK, 16-Bit Instruction Word. = kkkk. ADDULNK, Status Affected. = None. CALLW, Mnemonic,.Operands = . CALLW, Description. = Call Subroutine using",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nWREG. CALLW, Cycles. = 2. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.LSb = 0001. CALLW, 16-Bit Instruction Word. = 0100. CALLW, Status Affected. = None. MOVSF, Mnemonic,.Operands = z s , f d. MOVSF, Description. = Move z s (source) to 1st word. MOVSF, Cycles. = 2. MOVSF, 16-Bit Instruction Word.MSb = 1110. MOVSF, 16-Bit Instruction Word.MSb = 1011. MOVSF, 16-Bit Instruction Word.LSb = 0zzz. MOVSF, 16-Bit Instruction Word. = zzzz. MOVSF, Status Affected. = None. , Mnemonic,.Operands = . , Description. = f d (destination)2nd word. , Cycles. = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nWord.MSb = ffff. , 16-Bit Instruction Word.LSb = ffff. , 16-Bit Instruction Word. = ffff. , Status Affected. = . MOVSS, Mnemonic,.Operands = z s , z d. MOVSS, Description. = Move z s (source) to 1st word. MOVSS, Cycles. = 2. MOVSS, 16-Bit Instruction Word.MSb = 1110. MOVSS, 16-Bit Instruction Word.MSb = 1011. MOVSS, 16-Bit Instruction Word.LSb = 1zzz. MOVSS, 16-Bit Instruction Word. = zzzz. MOVSS, Status Affected. = None. , Mnemonic,.Operands = . , Description. = z d (destination)2nd word. , Cycles. = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = xxxx. , 16-Bit Instruction Word.LSb = xzzz. , 16-Bit Instruction Word. = zzzz. , Status Affected. = . PUSHL,",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nMnemonic,.Operands = k. PUSHL, Description. = Store Literal at FSR2, Decrement FSR2. PUSHL, Cycles. = 1. PUSHL, 16-Bit Instruction Word.MSb = 1110. PUSHL, 16-Bit Instruction Word.MSb = 1010. PUSHL, 16-Bit Instruction Word.LSb = kkkk. PUSHL, 16-Bit Instruction Word. = kkkk. PUSHL, Status Affected. = None. SUBFSR, Mnemonic,.Operands = f, k. SUBFSR, Description. = Subtract Literal from FSR. SUBFSR, Cycles. = 1. SUBFSR, 16-Bit Instruction Word.MSb = 1110. SUBFSR, 16-Bit Instruction Word.MSb = 1001. SUBFSR, 16-Bit Instruction Word.LSb = ffkk. SUBFSR, 16-Bit Instruction Word. = kkkk. SUBFSR, Status Affected. = None. SUBULNK, Mnemonic,.Operands = k. SUBULNK, Description. = Subtract",
    "TABLE 24-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nLiteral from FSR2 and Return. SUBULNK, Cycles. = 2. SUBULNK, 16-Bit Instruction Word.MSb = 1110. SUBULNK, 16-Bit Instruction Word.MSb = 1001. SUBULNK, 16-Bit Instruction Word.LSb = 11kk. SUBULNK, 16-Bit Instruction Word. = kkkk. SUBULNK, Status Affected. = None",
    "Add Literal to FSR\nSyntax:, 1 = ADDFSR f, k. Syntax:, 2 = ADDFSR f, k. Syntax:, 3 = ADDFSR f, k. Syntax:, 4 = ADDFSR f, k. Operands:, 1 = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, 2 = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, 3 = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, 4 = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operation:, 1 = FSR(f) + k \u2192 FSR(f). Operation:, 2 = FSR(f) + k \u2192 FSR(f). Operation:, 3 = FSR(f) + k \u2192 FSR(f). Operation:, 4 = FSR(f) + k \u2192 FSR(f). Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 1110. Encoding:,",
    "Add Literal to FSR\n2 = 1000. Encoding:, 3 = ffkk. Encoding:, 4 = kkkk. Description:, 1 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 2 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 3 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, 4 = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity: Q1, 1 = Q2. Q Cycle Activity: Q1, 2 = Q3. Q Cycle Activity: Q1, 3 = . Q Cycle Activity: Q1, 4 = Q4. Decode, 1 = Read literal 'k'.",
    "Add Literal to FSR\nDecode, 2 = Process Data. Decode, 3 = . Decode, 4 = Write to FSR",
    "Example:\nADDFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n0422h",
    "Example:\nSyntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2,",
    "Example:\n(TOS) \u2192 PC. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Encoding:, Add Literal to FSR2 and Return = 1110. Encoding:, Add Literal to FSR2 and Return = 1000. Encoding:, Add Literal to FSR2 and Return = 11kk. Encoding:, Add Literal to FSR2 and Return = kkkk. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two",
    "Example:\ncycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = . Words:, Add Literal to FSR2 and Return = . Words:, Add Literal to FSR2 and Return = . Cycles:, Add Literal to FSR2 and Return =",
    "Example:\n2. Cycles:, Add Literal to FSR2 and Return = . Cycles:, Add Literal to FSR2 and Return = . Cycles:, Add Literal to FSR2 and Return = ",
    "Q Cycle Activity:\nDecode, Q2 = Read literal 'k'. Decode, Q3 = Process Data. Decode, Q4 = Write to FSR. No Operation, Q2 = No Operation. No Operation, Q3 = No Operation. No Operation, Q4 = No Operation\nExample:\nADDULNK 23h\nBefore Instruction\nFSR2\n=\n03FFh\nPC\n=\n0100h\nAfter Instruction\nFSR2\n=\n0422h\nPC\n=\n(TOS)\nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction syntax then becomes: {label}    instruction    argument(s).",
    "PIC18F2525/2620/4525/4620\nSyntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH,",
    "PIC18F2525/2620/4525/4620\n(PCLATU) \u2192 PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0001. Encoding:, Subroutine Call Using WREG = 0100. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a",
    "PIC18F2525/2620/4525/4620\nNOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine",
    "PIC18F2525/2620/4525/4620\nCall Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Q Cycle Activity: Q1, Subroutine Call Using WREG = Q2. Q Cycle Activity: Q1, Subroutine Call Using WREG = Q3. Q Cycle",
    "PIC18F2525/2620/4525/4620\nActivity: Q1, Subroutine Call Using WREG = Q3. Q Cycle Activity: Q1, Subroutine Call Using WREG = Q4. Decode, Subroutine Call Using WREG = Read WREG. Decode, Subroutine Call Using WREG = PUSHPCto stack. Decode, Subroutine Call Using WREG = PUSHPCto stack. Decode, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation\nExample:\nHERE\nCALLW\nBefore Instruction\nPC\n=\naddress (HERE)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nAfter Instruction\nPC\n=\n001006h\nTOS\n=\naddress (HERE + 2)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3",
    "PIC18F2525/2620/4525/4620\nDecode, Determine source addr = No operation No dummy read. Decode, Determine source addr = No operation. Decode, Read source reg = Write register 'f' (dest)\nBefore Instruction, MOVSF = . Before Instruction, [05h], REG2 = . FSR2, MOVSF = =. FSR2, [05h], REG2 = 80h. Contents of 85h, MOVSF = =. Contents of 85h, [05h], REG2 = 33h. REG2, MOVSF = =. REG2, [05h], REG2 = 11h. After Instruction, MOVSF = . After Instruction, [05h], REG2 = . FSR2, MOVSF = =. FSR2, [05h], REG2 = 80h. Contents of 85h, MOVSF = =. Contents of 85h, [05h], REG2 = 33h. REG2, MOVSF = =. REG2, [05h], REG2 = 33h",
    "PIC18F2525/2620/4525/4620\nSyntax:, Move Indexed to f = MOVSF. Syntax:, Move Indexed to f = [z s ], f d. Syntax:, Move Indexed to f = . Syntax:,  = . Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operands:, Move Indexed to f = . Operands:,  = . Operation:, Move Indexed to f = ((FSR2) + z s ) \u2192 f d. Operation:, Move Indexed to f = ((FSR2) + z s ) \u2192 f d. Operation:, Move Indexed to f = . Operation:,  = . Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = . Status Affected:, Move Indexed to f = . Status Affected:,  = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:,",
    "PIC18F2525/2620/4525/4620\n= . 1st word (source), Move Indexed to f = 1110. 1st word (source), Move Indexed to f = 1011. 1st word (source), Move Indexed to f = 0zzz. 1st word (source),  = zzzz s. 2nd word (destin.), Move Indexed to f = 1111. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.),  = ffff d\nDescription:\nThe contents of the source register are moved to destination register 'f d '. The actual address of the source register is determined by adding the 7-bit literal offset 'z s ' in the first word to the value of FSR2. The address of the destination register is specified by the 12-bit literal 'f d ' in the second word. Both addresses can be anywhere in the 4096-byte data space (000h to FFFh).\nThe MOVSF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.",
    "PIC18F2525/2620/4525/4620\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h.\n2\n2\nQ4",
    "Move Indexed to Indexed\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding: 1st word (source) 2nd word (dest.)\nDescription\nWords:\nCycles:\nMOVSS   [z s ], [z d ]\n0 \u2264 z s \u2264 127\n0 \u2264 z d \u2264 127\n((FSR2) + z s ) \u2192 ((FSR2) + z d )\nNone\n1110\n1011\n1zzz zzzz s",
    "Move Indexed to Indexed\nSyntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2.",
    "Move Indexed to Indexed\nOperation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1111. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1010. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk\n1111\nxxxx xzzz\nzzzz d",
    "Move Indexed to Indexed\nThe contents of the source register are addresses of the source and destination moved to the destination register. The registers are determined by adding the 7-bit literal offsets 'z s ' or 'z d ', respectively, to the value of FSR2. Both registers can be located anywhere in the 4096-byte data memory space (000h to FFFh).\nThe MOVSS instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h. If the resultant destination address points to an indirect addressing register, the instruction will execute as a NOP .\n2\n2\nQ Cycle Activity:\nDecode, Q2 = Determine source addr. Decode, Q3 = Determine source addr. Decode, Q4 = Read source reg. Decode, Q2 = Determine dest addr. Decode, Q3 = Determine dest addr. Decode, Q4 = Write to dest reg\nExample:\nMOVSS [05h], [06h]\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nContents\nof 86h\n= 11h",
    "Move Indexed to Indexed\nAfter Instruction\nFSR2\n= 80h\nContents\nof 85h\n=\n33h\nContents\nof 86h\n= 33h\nDescription:\nThe 8-bit literal 'k' is written to the data memory address specified by FSR2. FSR2 is decremented by 1 after the operation. This instruction allows users to push values onto a software stack.\nWords:\nCycles:\nQ Cycle Activity:\n1\n1\nDecode, Q2 = Read 'k'. Decode, Q3 = Process data. Decode, Q4 = Write to destination\nExample:\nPUSHL 08h\nBefore Instruction\nFSR2H:FSR2L\n=\n01ECh\nMemory (01ECh)\n= 00h\nAfter Instruction\nFSR2H:FSR2L\n=\n01EBh\nMemory (01ECh)\n= 08h",
    "PIC18F2525/2620/4525/4620\nSyntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. , Subtract Literal from FSR = f \u2208 [ 0, 1, 2 ]. , Subtract Literal from FSR = f \u2208 [ 0, 1, 2 ]. , Subtract Literal from FSR = f \u2208 [ 0, 1, 2 ]. , Subtract Literal from FSR = f \u2208 [ 0, 1, 2 ]. Operation:, Subtract Literal from FSR = FSR(f - k) \u2192",
    "PIC18F2525/2620/4525/4620\nFSR(f). Operation:, Subtract Literal from FSR = FSR(f - k) \u2192 FSR(f). Operation:, Subtract Literal from FSR = FSR(f - k) \u2192 FSR(f). Operation:, Subtract Literal from FSR = FSR(f - k) \u2192 FSR(f). Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Encoding:, Subtract Literal from FSR = 1110. Encoding:, Subtract Literal from FSR = 1001. Encoding:, Subtract Literal from FSR = ffkk. Encoding:, Subtract Literal from FSR = kkkk. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The",
    "PIC18F2525/2620/4525/4620\n6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:,",
    "PIC18F2525/2620/4525/4620\nSubtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q1, Subtract Literal from FSR = Q2. Q1, Subtract Literal from FSR = Q3. Q1, Subtract Literal from FSR = . Q1, Subtract Literal from FSR = Q4. Decode, Subtract Literal from FSR = Read register 'f'. Decode, Subtract Literal from FSR = Process Data. Decode, Subtract Literal from FSR = . Decode, Subtract Literal from FSR = Write to destination\nExample:\nSUBFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n03DCh",
    "PIC18F2525/2620/4525/4620\nSyntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192",
    "PIC18F2525/2620/4525/4620\nFSR2, (TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2, (TOS) \u2192 PC. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Encoding:, Subtract Literal from FSR2and Return = 1110. Encoding:, Subtract Literal from FSR2and Return = 1001. Encoding:, Subtract Literal from FSR2and Return = 11kk. Encoding:, Subtract Literal from FSR2and Return = kkkk. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the",
    "PIC18F2525/2620/4525/4620\nsecond cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on",
    "PIC18F2525/2620/4525/4620\nFSR2.. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Q Cycle Activity:,",
    "PIC18F2525/2620/4525/4620\nSubtract Literal from FSR2and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q1, Subtract Literal from FSR2and Return = . Q1, Subtract Literal from FSR2and Return = Q2. Q1, Subtract Literal from FSR2and Return = Q3. Q1, Subtract Literal from FSR2and Return = Q4. , Subtract Literal from FSR2and Return = Decode. , Subtract Literal from FSR2and Return = Read register 'f'. , Subtract Literal from FSR2and Return = Process Data. , Subtract Literal from FSR2and Return = Write to destination. No, Subtract Literal from FSR2and Return = Operation. No, Subtract Literal from FSR2and Return = No Operation. No,",
    "PIC18F2525/2620/4525/4620\nSubtract Literal from FSR2and Return = No Operation. No, Subtract Literal from FSR2and Return = No Operation\nExample:\nSUBULNK 23h\nBefore Instruction\nFSR2\n=\n03FFh\nPC\n=\n0100h\nAfter Instruction\nFSR2\n=\n03DCh\nPC\n=\n(TOS)",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nNote:\nEnabling the PIC18 instruction set extension may cause legacy applications to behave erratically or fail entirely.\nIn addition to eight new commands in the extended set, enabling  the  extended  instruction  set  also  enables Indexed Literal Offset Addressing mode ( Section 5.5.1 'Indexed Addressing with Literal Offset' ). This has a significant impact on the way that many commands of the standard PIC18 instruction set are interpreted.\nWhen the extended set is disabled, addresses embedded in opcodes are treated as literal memory locations: either as a location in the Access Bank ('a' = 0 ) or in a GPR bank designated by the BSR ('a' = 1 ). When the extended  instruction  set  is enabled  and  'a'  = 0 , however,  a  file  register  argument  of  5Fh  or  less  is interpreted as an offset from the pointer value in FSR2 and not as a literal address. For practical purposes, this means that all instructions that use the Access RAM bit as  an  argument  -  that  is,  all  byte-oriented  and  bitoriented instructions, or almost half of the core PIC18 instructions -may behave differently when the extended instruction set is enabled.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the content of FSR2 is 00h, the boundaries of the Access RAM are essentially remapped to their original values.  This  may  be  useful  in  creating  backward compatible code. If this technique is used, it may be necessary  to  save  the  value  of  FSR2  and  restore  it when moving back and forth between C and assembly routines in order to preserve the Stack Pointer. Users must also keep in mind the syntax requirements of the extended instruction set (see Section 24.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' ).\nAlthough the Indexed Literal Offset Addressing mode can  be  very  useful  for  dynamic  stack  and  pointer manipulation, it can also be very annoying if a simple arithmetic operation is carried out on  the wrong register.  Users  who  are  accustomed  to  the  PIC18 programming  must  keep  in  mind  that,  when  the extended instruction set is enabled, register addresses of  5Fh  or  less  are  used  for  Indexed  Literal  Offset Addressing mode.\nRepresentative examples of typical byte-oriented and bit-oriented  instructions  in  the  Indexed  Literal  Offset Addressing mode are provided on the following page to show how execution is affected. The operand conditions shown in the examples are applicable to all instructions of these types.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the extended instruction set is enabled, the file register argument, 'f', in the standard byte-oriented and bit-oriented commands is replaced with the literal offset value, 'k'. As already noted, this occurs only when 'f' is less than or equal to 5Fh. When an offset value is used, it must be indicated by square brackets ('[ ]'). As with the extended instructions, the use of brackets indicates to the compiler that the value is to be interpreted as an index  or  an  offset.  Omitting  the  brackets,  or  using  a value greater than 5Fh within brackets, will generate an error in the MPASM Assembler.\nIf the index argument is properly bracketed for Indexed Literal Offset  Addressing  mode,  the  Access  RAM argument  is  never  specified;  it  will  automatically  be assumed  to  be  ' 0 '. This  is  in  contrast  to  standard operation (extended instruction set disabled) when 'a' is set on the basis of the target address. Declaring the Access RAM bit in this mode will also generate an error in the MPASM Assembler.\nThe destination argument, 'd', functions as before.",
    "24.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nIn the latest versions  of the MPASM  assembler, language support for the extended instruction set must be  explicitly  invoked.  This  is  done  with  either  the command line  option, /y ,  or  the  PE  directive  in  the source listing.",
    "24.2.4 CONSIDERATIONS WHEN ENABLING THE EXTENDED INSTRUCTION SET\nIt is important to note that the extensions to the instruction set may not be beneficial to all users. In particular, users who are not writing code that uses a software stack may not benefit from using the extensions to the instruction set.\nAdditionally, the  Indexed  Literal  Offset  Addressing mode  may  create  issues  with  legacy  applications written to the  PIC18  assembler.  This  is  because instructions in the legacy code may attempt to address registers in the Access Bank below 5Fh. Since these addresses  are  interpreted  as  literal  offsets  to  FSR2 when  the  instruction  set  extension  is  enabled,  the application  may  read  or  write  to  the  wrong  data addresses.\nWhen porting an application to the PIC18F2525/2620/ 4525/4620, it is very important to consider the type of code. A large, re-entrant application that is written in 'C' and would benefit from efficient compilation will do well when  using  the  instruction  set  extensions.  Legacy applications that heavily use the Access Bank will most likely  not  benefit  from  using  the  extended  instruction set.",
    "PIC18F2525/2620/4525/4620\nADDWF",
    "ADD W to Indexed (Indexed Literal Offset mode)\nSyntax:\nADDWF      [k] {,d}\nOperands:\n0 \u2264 k \u2264 95\nd \u2208 [0,1]\nOperation:\n(W) + ((FSR2) + k) \u2192 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0010\n01d0\nkkkk\nkkkk\nDescription:\nThe contents of W are added to the contents of the register indicated by FSR2, offset by the value 'k'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead 'k'\nProcess\nData\nWrite to\ndestination\nExample:\nADDWF\n[OFST] , 0\nBefore Instruction\nW\n=\n17h\nOFST\n=\n2Ch\nFSR2\n=\n0A00h\nContents\nof 0A2Ch\n= 20h\nAfter Instruction\nW\n= 37h\nContents\nof 0A2Ch\n=\n20h",
    "ADD W to Indexed (Indexed Literal Offset mode)\nSyntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Syntax:, (Indexed Literal Offset mode) = BSF [k], b. Operands:, (Indexed Literal Offset mode) = 0 \u2264 f \u2264 95 0 \u2264 b \u2264 7. Operands:, (Indexed Literal Offset mode) = 0 \u2264 f \u2264 95 0 \u2264 b \u2264 7. Operands:, (Indexed Literal Offset mode) = 0 \u2264 f \u2264 95 0 \u2264 b \u2264 7. Operands:, (Indexed Literal Offset mode) = 0 \u2264 f \u2264 95 0 \u2264 b \u2264 7. Operands:, (Indexed Literal Offset mode) = 0 \u2264 f \u2264 95 0 \u2264 b \u2264 7. Operation:, (Indexed Literal Offset mode) = 1 \u2192 ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \u2192 ((FSR2) +",
    "ADD W to Indexed (Indexed Literal Offset mode)\nk)<b>. Operation:, (Indexed Literal Offset mode) = 1 \u2192 ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \u2192 ((FSR2) + k)<b>. Operation:, (Indexed Literal Offset mode) = 1 \u2192 ((FSR2) + k)<b>. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Encoding:, (Indexed Literal Offset mode) = 1000. Encoding:, (Indexed Literal Offset mode) = bbb0. Encoding:, (Indexed Literal Offset mode) = bbb0. Encoding:, (Indexed Literal Offset mode) = kkkk. Encoding:, (Indexed Literal Offset mode) = kkkk. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is",
    "ADD W to Indexed (Indexed Literal Offset mode)\nset.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Description:, (Indexed Literal Offset mode) = Bit 'b' of the register indicated by FSR2, offset by the value 'k', is set.. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset",
    "ADD W to Indexed (Indexed Literal Offset mode)\nmode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q1, (Indexed Literal Offset mode) = Q2. Q1, (Indexed Literal Offset mode) = Q2. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q4. Decode, (Indexed Literal Offset mode) = Read register 'f'. Decode, (Indexed Literal Offset mode) = Read register 'f'. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Write to destination. Example:, (Indexed Literal Offset mode) = BSF. Example:, (Indexed Literal Offset mode) = . Example:,",
    "ADD W to Indexed (Indexed Literal Offset mode)\n(Indexed Literal Offset mode) = [FLAG_OFST], 7. Example:, (Indexed Literal Offset mode) = [FLAG_OFST], 7. Example:, (Indexed Literal Offset mode) = [FLAG_OFST], 7. Before Instruction, (Indexed Literal Offset mode) = Before Instruction. Before Instruction, (Indexed Literal Offset mode) = = =. Before Instruction, (Indexed Literal Offset mode) = . Before Instruction, (Indexed Literal Offset mode) = . Before Instruction, (Indexed Literal Offset mode) = . FSR2 Contents of 0A0Ah, (Indexed Literal Offset mode) = FSR2 Contents of 0A0Ah. FSR2 Contents of 0A0Ah, (Indexed Literal Offset mode) = =. FSR2 Contents of 0A0Ah, (Indexed Literal Offset mode) = 55h. FSR2 Contents of 0A0Ah, (Indexed Literal Offset mode) = 55h. FSR2 Contents of 0A0Ah, (Indexed Literal Offset mode) = 55h. After Instruction, (Indexed Literal Offset mode) = After Instruction. After Instruction, (Indexed Literal Offset mode) = =. After",
    "ADD W to Indexed (Indexed Literal Offset mode)\nInstruction, (Indexed Literal Offset mode) = . After Instruction, (Indexed Literal Offset mode) = . After Instruction, (Indexed Literal Offset mode) = ",
    "ADD W to Indexed (Indexed Literal Offset mode)\nSyntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) +",
    "ADD W to Indexed (Indexed Literal Offset mode)\nk). Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Encoding:, Set Indexed (Indexed Literal Offset mode) = 0110. Encoding:, Set Indexed (Indexed Literal Offset mode) = 1000. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents",
    "ADD W to Indexed (Indexed Literal Offset mode)\nof the register indicated by FSR2, offset by 'k', are set to FFh.. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q1, Set Indexed (Indexed Literal Offset mode) = Q2. Q1, Set Indexed (Indexed Literal Offset mode) = Q3. Q1, Set Indexed",
    "ADD W to Indexed (Indexed Literal Offset mode)\n(Indexed Literal Offset mode) = . Q1, Set Indexed (Indexed Literal Offset mode) = Q4. Decode, Set Indexed (Indexed Literal Offset mode) = Read 'k'. Decode, Set Indexed (Indexed Literal Offset mode) = Process Data. Decode, Set Indexed (Indexed Literal Offset mode) = . Decode, Set Indexed (Indexed Literal Offset mode) = Write register\nBefore Instruction, SETF = . Before Instruction, [OFST] = . OFST, SETF = =. OFST, [OFST] = 2Ch. FSR2, SETF = =. FSR2, [OFST] = 0A00h. Contents of 0A2Ch, SETF = =. Contents of 0A2Ch, [OFST] = 00h. After Instruction Contents of 0A2Ch, SETF = =. After Instruction Contents of 0A2Ch, [OFST] = FFh",
    "24.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThe latest versions of Microchip's software tools have been designed to fully support the extended instruction set of the PIC18F2525/2620/4525/4620  family of devices.  This  includes  the  MPLAB  C18  C  compiler, MPASM  assembly  language  and  MPLAB  Integrated Development Environment (IDE).\nWhen selecting a target device for software development, MPLAB IDE will automatically set default Configuration bits for that device. The default setting for the XINST  Configuration bit is ' 0 ', disabling the extended  instruction  set  and  Indexed  Literal  Offset Addressing mode. For proper execution of applications developed to take advantage of the extended instruction set, XINST must be set during programming.\nTo develop software for the extended instruction set, the user must enable support for the instructions and the Indexed Addressing mode in their language tool(s). Depending on the environment being used, this may be done in several ways:\n\u00b7 A menu option, or dialog box within the environment, that allows the user to configure the language tool and its settings for the project\n\u00b7 A command line option\n\u00b7 A directive in the source code",
    "24.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThese options vary between different compilers, assemblers and development environments. Users are encouraged to review the documentation accompanying  their  development  systems  for  the  appropriate information.",
    "25.0 DEVELOPMENT SUPPORT\nThe  PIC \u00ae   microcontrollers  are  supported  with  a  full range of hardware and software development tools:",
    "25.1 MPLAB Integrated Development Environment Software\n\u00b7 Integrated Development Environment\n-MPLAB \u00ae  IDE Software\n\u00b7 Assemblers/Compilers/Linkers\n-MPASM TM  Assembler\n-MPLAB C18 and MPLAB C30 C Compilers\n-MPLINK TM  Object Linker/ MPLIB TM  Object Librarian\n-MPLAB ASM30 Assembler/Linker/Library\n\u00b7 Simulators\n-MPLAB SIM Software Simulator\n\u00b7 Emulators\n-MPLAB ICE 2000 In-Circuit Emulator\n-MPLAB REAL ICE\u2122 In-Circuit Emulator\n\u00b7 In-Circuit Debugger\n-MPLAB ICD 2\n\u00b7 Device Programmers\n-PICSTART \u00ae  Plus Development Programmer\n-MPLAB PM3 Device Programmer\n-PICkit\u2122 2 Development Programmer\n\u00b7 Low-Cost Demonstration and Development Boards and Evaluation Kits\nThe MPLAB IDE software brings an ease of software development previously unseen in the 8/16-bit microcontroller  market.  The  MPLAB  IDE  is  a  Windows \u00ae operating system-based application that contains:",
    "25.1 MPLAB Integrated Development Environment Software\n\u00b7 A single graphical interface to all debugging tools\n-Simulator\n-Programmer (sold separately)\n-Emulator (sold separately)\n-In-Circuit Debugger (sold separately)\n\u00b7 A full-featured editor with color-coded context\n\u00b7 A multiple project manager\n\u00b7 Customizable data windows with direct edit of contents\n\u00b7 High-level source code debugging\n\u00b7 Visual device initializer for easy register initialization\n\u00b7 Mouse over variable inspection\n\u00b7 Drag and drop variables from source to watch windows\n\u00b7 Extensive on-line help\n\u00b7 Integration of select third party tools, such as HI-TECH Software C Compilers and IAR C Compilers\nThe MPLAB IDE allows you to:\n\u00b7 Edit your source files (either assembly or C)\n\u00b7 One touch assemble (or compile) and download to PIC MCU emulator and simulator tools (automatically updates all project information)\n\u00b7 Debug using:\n-Source files (assembly or C)\n-Mixed assembly and C\n-Machine code",
    "25.1 MPLAB Integrated Development Environment Software\nMPLAB  IDE  supports  multiple  debugging  tools  in  a single development paradigm, from the cost-effective simulators,  through  low-cost  in-circuit  debuggers,  to full-featured  emulators.  This  eliminates  the  learning curve when upgrading to tools with increased flexibility and power.",
    "25.2 MPASM Assembler\nThe  MPASM  Assembler  is  a  full-featured,  universal macro assembler for all PIC MCUs.",
    "25.5 MPLAB ASM30 Assembler, Linker and Librarian\nThe MPASM Assembler generates relocatable object files for the MPLINK Object Linker, Intel \u00ae  standard HEX files,  MAP  files  to  detail  memory  usage  and  symbol reference, absolute LST files that contain source lines and  generated  machine  code  and  COFF  files  for debugging.\nThe MPASM Assembler features include:\n\u00b7 Integration into MPLAB IDE projects\n\u00b7 User-defined macros to streamline assembly code\n\u00b7 Conditional assembly for multi-purpose source files\n\u00b7 Directives that allow complete control over the assembly process",
    "25.3 MPLAB C18 and MPLAB C30 C Compilers\nThe MPLAB C18 and MPLAB C30 Code Development Systems are complete ANSI C compilers for Microchip's PIC18 and PIC24 families of microcontrollers and the dsPIC30 and dsPIC33 family of digital signal controllers. These  compilers  provide powerful integration capabilities, superior code optimization and ease of use not found with other compilers.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.",
    "25.4 MPLINK Object Linker/ MPLIB Object Librarian\nThe  MPLINK  Object  Linker  combines relocatable objects  created  by  the  MPASM  Assembler  and  the MPLAB C18 C Compiler. It can link relocatable objects from  precompiled  libraries,  using  directives  from  a linker script.\nThe MPLIB Object Librarian manages the creation and modification of library files of precompiled code. When a routine from a library is called from a source file, only the modules that contain that routine will be linked in with  the  application.  This  allows  large  libraries  to  be used efficiently in many different applications.\nThe object linker/library features include:\n\u00b7 Efficient linking of single libraries instead of many smaller files\n\u00b7 Enhanced code maintainability by grouping related modules together\n\u00b7 Flexible creation of libraries with easy module listing, replacement, deletion and extraction",
    "25.4 MPLINK Object Linker/ MPLIB Object Librarian\nMPLAB ASM30 Assembler produces relocatable machine  code  from  symbolic  assembly  language  for dsPIC30F devices. MPLAB C30 C Compiler uses the assembler  to  produce  its  object  file.  The  assembler generates  relocatable  object  files  that  can  then  be archived or linked with other relocatable object files and archives to create an executable file. Notable features of the assembler include:\n\u00b7 Support for the entire dsPIC30F instruction set\n\u00b7 Support for fixed-point and floating-point data\n\u00b7 Command line interface\n\u00b7 Rich directive set\n\u00b7 Flexible macro language\n\u00b7 MPLAB IDE compatibility",
    "25.6 MPLAB SIM Software Simulator\nThe  MPLAB  SIM  Software  Simulator  allows  code development in a PC-hosted environment by simulating the PIC MCUs and dsPIC \u00ae  DSCs on an instruction level. On any given instruction, the data areas can be examined or modified and stimuli can be applied from a comprehensive stimulus controller. Registers can be logged to files for further run-time analysis. The trace buffer and logic analyzer display extend the power of the simulator to record and track program execution, actions on I/O, most peripherals and internal registers.\nThe  MPLAB  SIM  Software  Simulator  fully  supports symbolic debugging using the MPLAB  C18  and MPLAB  C30  C Compilers,  and  the MPASM  and MPLAB ASM30 Assemblers.  The software  simulator offers the flexibility to develop and debug code outside of the hardware laboratory environment, making it an excellent, economical software development tool.",
    "25.7 MPLAB ICE 2000 High-Performance In-Circuit Emulator\nThe MPLAB ICE 2000 In-Circuit Emulator is intended to  provide  the  product  development  engineer  with  a complete microcontroller design tool set for PIC microcontrollers. Software control of the MPLAB ICE 2000 In-Circuit Emulator is advanced by the MPLAB Integrated  Development  Environment,  which  allows editing,  building,  downloading and  source  debugging from a single environment.\nThe  MPLAB  ICE  2000  is  a  full-featured  emulator system with enhanced trace, trigger and data monitoring features. Interchangeable processor modules allow the system to be easily reconfigured for emulation of different  processors.  The  architecture  of  the  MPLAB ICE  2000  In-Circuit  Emulator  allows  expansion  to support new PIC microcontrollers.\nThe MPLAB ICE 2000 In-Circuit Emulator system has been designed as a real-time emulation system with advanced  features  that  are  typically  found  on  more expensive  development  tools.  The  PC  platform  and Microsoft \u00ae   Windows \u00ae   32-bit  operating  system  were chosen  to  best  make  these  features  available  in  a simple, unified application.",
    "25.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB  REAL  ICE  In-Circuit Emulator System  is Microchip's  next  generation  high-speed  emulator  for Microchip Flash DSC and MCU devices. It debugs and programs PIC \u00ae  Flash MCUs and dsPIC \u00ae  Flash DSCs with the easy-to-use, powerful graphical user interface of the MPLAB Integrated Development Environment (IDE), included with each kit.\nThe MPLAB REAL ICE probe is connected to the design engineer's PC using a high-speed USB 2.0 interface and is connected  to  the  target  with  either  a  connector compatible  with  the  popular  MPLAB  ICD  2  system (RJ11) or with the new high-speed, noise tolerant, LowVoltage Differential Signal (LVDS) interconnection (CAT5).",
    "25.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB REAL ICE is field upgradeable through future firmware downloads  in MPLAB  IDE.  In  upcoming releases of MPLAB IDE, new devices will be supported, and new features will be added, such as software breakpoints  and  assembly  code  trace.  MPLAB  REAL  ICE offers significant advantages over competitive emulators including low-cost, full-speed emulation, real-time variable watches, trace analysis, complex breakpoints, a ruggedized probe interface and long (up to three meters) interconnection cables.",
    "25.9 MPLAB ICD 2 In-Circuit Debugger\nMicrochip's  In-Circuit  Debugger,  MPLAB  ICD  2,  is  a powerful, low-cost, run-time development tool, connecting to the host PC via an RS-232 or high-speed USB  interface.  This  tool  is  based  on  the  Flash  PIC MCUs and can be used to develop for these and other PIC MCUs and dsPIC DSCs. The MPLAB ICD 2 utilizes the  in-circuit  debugging  capability  built  into  the Flash devices. This feature, along with Microchip's In-Circuit Serial  Programming TM   (ICSP TM )  protocol,  offers  costeffective, in-circuit Flash debugging from the graphical user interface of the MPLAB Integrated Development Environment. This enables a designer to develop and debug source code by setting breakpoints, single stepping  and  watching  variables,  and  CPU  status  and peripheral  registers.  Running  at  full  speed  enables testing hardware and applications in real time. MPLAB ICD 2 also serves as a development programmer for selected PIC devices.",
    "25.10 MPLAB PM3 Device Programmer\nThe MPLAB PM3 Device Programmer is a universal, CE compliant device programmer with programmable voltage verification at VDDMIN and VDDMAX for maximum  reliability.  It  features  a  large  LCD  display (128 x 64) for menus and error messages and a modular,  detachable  socket  assembly  to  support  various package types. The ICSP\u2122 cable assembly is included as a standard item. In Stand-Alone mode, the MPLAB PM3 Device Programmer can read, verify and program PIC devices without a PC connection. It can also set code  protection in this mode.  The  MPLAB  PM3 connects to the host PC via an RS-232 or USB cable. The MPLAB PM3 has high-speed communications and optimized  algorithms  for  quick  programming  of  large memory devices and incorporates an SD/MMC card for file storage and secure data applications.",
    "25.13 Demonstration, Development and Evaluation Boards\nThe PICSTART Plus Development Programmer is an easy-to-use, low-cost, prototype programmer. It connects to the PC via a COM (RS-232) port. MPLAB Integrated Development Environment software makes using the programmer simple and efficient. The PICSTART  Plus  Development  Programmer  supports most  PIC  devices  in  DIP  packages  up  to  40  pins. Larger pin count devices, such as the PIC16C92X and PIC17C76X, may be supported with an adapter socket. The PICSTART Plus Development Programmer is CE compliant.",
    "25.12 PICkit 2 Development Programmer\nThe PICkit\u2122 2 Development Programmer is a low-cost programmer and selected Flash device debugger with an  easy-to-use  interface  for  programming  many  of Microchip's baseline, mid-range and PIC18F families of Flash memory microcontrollers. The PICkit 2 Starter Kit includes  a  prototyping  development  board,  twelve sequential  lessons,  software  and  HI-TECH's  PICC\u2122 Lite C compiler, and is designed to help get up to speed quickly using PIC \u00ae  microcontrollers.  The kit provides everything needed to program, evaluate and develop applications using  Microchip's  powerful,  mid-range Flash memory family of microcontrollers.\nA  wide  variety  of demonstration,  development  and evaluation  boards  for  various  PIC  MCUs  and  dsPIC DSCs allows quick application development on fully functional systems. Most boards include prototyping areas for adding custom circuitry and provide application firmware and source code for examination and modification.\nThe boards support a variety of features, including LEDs, temperature sensors, switches, speakers, RS-232 interfaces, LCD displays, potentiometers and additional EEPROM memory.",
    "25.12 PICkit 2 Development Programmer\nThe  demonstration  and  development  boards  can  be used in teaching environments, for prototyping custom circuits and for learning about various microcontroller applications.\nIn addition to the PICDEM\u2122 and dsPICDEM\u2122 demonstration/development board series of circuits, Microchip has a line of evaluation kits and demonstration software for  analog  filter  design,  KEELOQ \u00ae security  ICs,  CAN, IrDA \u00ae ,  PowerSmart  battery  management,  SEEVAL \u00ae evaluation system, Sigma-Delta ADC, flow rate sensing, plus many more.\nCheck the Microchip web page (www.microchip.com) for  the  complete  list  of  demonstration,  development and evaluation kits.",
    "Absolute Maximum Ratings (\u2020)\nAmbient temperature under bias.............................................................................................................-40\u00b0C to +125\u00b0C",
    "Absolute Maximum Ratings (\u2020)\nStorage temperature .............................................................................................................................. -65\u00b0C to +150\u00b0C\nVoltage on any pin with respect to VSS (except VDD and MCLR) ................................................... -0.3V to (VDD + 0.3V)",
    "Absolute Maximum Ratings (\u2020)\nVoltage on VDD with respect to VSS  .........................................................................................................  -0.3V to +7.5V\nVoltage on MCLR with respect to VSS (Note 2)\n......................................................................................... 0V to +13.25V\nTotal power dissipation (Note 1)",
    "Absolute Maximum Ratings (\u2020)\n...............................................................................................................................1.0W",
    "Absolute Maximum Ratings (\u2020)\nMaximum current out of VSS pin ...........................................................................................................................300 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current into VDD pin ..............................................................................................................................250 mA\nInput clamp current, IIK (VI < 0 or VI > VDD)",
    "Absolute Maximum Ratings (\u2020)\n...................................................................................................................... \u00b1\n20 mA\nOutput clamp current, IOK (VO < 0 or VO > VDD)\n.............................................................................................................. \u00b1",
    "Absolute Maximum Ratings (\u2020)\n20 mA\nMaximum output current sunk by any I/O pin..........................................................................................................25 mA\nMaximum output current sourced by any I/O pin ....................................................................................................25 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current sunk by all ports .......................................................................................................................200 mA\nMaximum current sourced by all ports ..................................................................................................................200 mA",
    "Absolute Maximum Ratings (\u2020)\nNote 1: Power dissipation is calculated as follows:\nPdis = VDD x {IDD -\u2211 IOH} + \u2211 {(VDD - VOH) x IOH} + \u2211 (VOL x IOL)\n- 2: Voltage spikes below VSS at the MCLR/VPP/RE3 pin, inducing currents greater than 80 mA, may cause latch-up. Thus, a series resistor of 50-100 \u03a9 should be used when applying a 'low' level to the MCLR/VPP/ RE3 pin, rather than pulling this pin directly to VSS.\n\u2020 NOTICE: Stresses above those listed under 'Absolute Maximum Ratings' may cause permanent damage to the device. This is a stress rating only and functional operation of the device at those or any other conditions above those indicated in the operation listings of this specification is not implied. Exposure to maximum rating conditions for extended periods may affect device reliability.",
    "PIC18F2525/2620/4525/4620\nFIGURE 26-2: PIC18F2525/2620/4525/4620 VOLTAGE-FREQUENCY GRAPH (EXTENDED)",
    "26.1 DC Characteristics:\nSupply Voltage PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "26.1 DC Characteristics:\nD001, Symbol = VDD. D001, Characteristic = Supply Voltage. D001, Min = Supply Voltage. D001, Typ = Supply Voltage. D001, Max = Supply Voltage. D001, Units = Supply Voltage. D001, Conditions = Supply Voltage. D001, Symbol = VDD. D001, Characteristic = PIC18LFX525/X620. D001, Min = 2.0. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = HS, XT, RC and LP Oscillator mode. D001, Symbol = VDD. D001, Characteristic = PIC18FX525/X620. D001, Min = 4.2. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = . D002, Symbol = VDR. D002, Characteristic = RAM Data Retention Voltage (1). D002, Min = 1.5.",
    "26.1 DC Characteristics:\nD002, Typ = -. D002, Max = -. D002, Units = V. D002, Conditions = . D003, Symbol = VPOR. D003, Characteristic = VDD Start Voltage to ensure internal Power-on Reset signal. D003, Min = -. D003, Typ = -. D003, Max = 0.7. D003, Units = V. D003, Conditions = See section on Power-on Reset for details. D004, Symbol = SVDD. D004, Characteristic = VDD Rise Rate to ensure internal Power-on Reset signal. D004, Min = 0.05. D004, Typ = -. D004, Max = -. D004, Units = V/ms. D004, Conditions = See section on Power-on Reset for details. D005, Symbol = VBOR. D005, Characteristic = Brown-out Reset Voltage. D005, Min = Brown-out Reset Voltage. D005, Typ = Brown-out Reset Voltage. D005, Max = Brown-out Reset Voltage.",
    "26.1 DC Characteristics:\nD005, Units = Brown-out Reset Voltage. D005, Conditions = Brown-out Reset Voltage. D005, Symbol = VBOR. D005, Characteristic = PIC18LFX525/X620. D005, Min = . D005, Typ = . D005, Max = . D005, Units = . D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV1:BORV0 = 11. D005, Min = 2.00. D005, Typ = 2.11. D005, Max = 2.22. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV1:BORV0 = 10. D005, Min = 2.65. D005, Typ = 2.79. D005, Max = 2.93. D005, Units = V. D005, Conditions = . D005, Symbol = . D005, Characteristic = All Devices.",
    "26.1 DC Characteristics:\nD005, Min = All Devices. D005, Typ = All Devices. D005, Max = All Devices. D005, Units = All Devices. D005, Conditions = All Devices. D005, Symbol = . D005, Characteristic = BORV1:BORV0 = 01 (2). D005, Min = 4.11. D005, Typ = 4.33. D005, Max = 4.55. D005, Units = V. D005, Conditions = . D005, Symbol = . D005, Characteristic = BORV1:BORV0 = 00. D005, Min = 4.36. D005, Typ = 4.59. D005, Max = 4.82. D005, Units = V. D005, Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "26.1 DC Characteristics:\n1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n2: With BOR enabled, full-speed operation (FOSC = 40 MHz) is supported until a BOR occurs. This is valid although VDD may be below the minimum voltage for this frequency.",
    "PIC18F2525/2620/4525/4620\n26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "PIC18F2525/2620/4525/4620\nPower-Down, Device = Current (I PD) (1). Power-Down, Typ = Current (I PD) (1). Power-Down, Max = Current (I PD) (1). Power-Down, Units = Current (I PD) (1). Power-Down, Conditions = Current (I PD) (1). Power-Down, Conditions = Current (I PD) (1). , Device = PIC18LFX525/X620. , Typ = 0.1. , Max = 0.5. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = PIC18LFX525/X620. , Typ = 0.1. , Max = 0.5. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = PIC18LFX525/X620. , Typ = 0.2. , Max = 2.5. , Units = \u03bc A.",
    "PIC18F2525/2620/4525/4620\n, Conditions = +85\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = PIC18LFX525/X620. , Typ = 0.1. , Max = 0.7. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = PIC18LFX525/X620. , Typ = 0.1. , Max = 0.7. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = PIC18LFX525/X620. , Typ = 0.3. , Max = 3.5. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = All devices. , Typ = 0.1. , Max = 1.0. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V",
    "PIC18F2525/2620/4525/4620\n( Sleep mode). , Device = All devices. , Typ = 0.2. , Max = 1.0. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = All devices. , Typ = 0.7. , Max = 10. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = Extended devices only. , Typ = 10. , Max = 100. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode)\n- Legend:\nShading of rows is to assist in readability of the table.",
    "PIC18F2525/2620/4525/4620\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2525/2620/4525/4620\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current\nPIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C TA +85\u00b0C for industrial\n\u2264 \u2264\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply, Device = Current (I DD) (2). Supply, Typ = Current (I DD) (2). Supply, Max = Current (I DD) (2). Supply, Units = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). , Device = PIC18LFX525/X620. , Typ = 13. , Max = 25. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 13. , Max = 22. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 14. , Max = 25. , Units = \u03bc A. , Conditions =",
    "26.2 DC Characteristics:\n+85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = PIC18LFX525/X620. , Typ = 42. , Max = 61. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 34. , Max = 46. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 28. , Max = 45. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = All devices. , Typ = 103. , Max = 160. , Units = \u03bc A. ,",
    "26.2 DC Characteristics:\nConditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 82. , Max = 130. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = . , Typ = 67. , Max = 120. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = Extended devices only. , Typ = 71. , Max = 230. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_RUN mode, INTRC source). , Device = PIC18LFX525/X620. , Typ = 320. , Max = 440. , Units = \u03bc",
    "26.2 DC Characteristics:\nA. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 330. , Max = 440. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 330. , Max = 440. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = PIC18LFX525/X620. , Typ = 630. , Max = 800. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 590. , Max = 720. , Units = \u03bc A. , Conditions =",
    "26.2 DC Characteristics:\n+25\u00b0C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 570. , Max = 700. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = All devices. , Typ = 1.2. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 1.0. , Max = 1.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = . , Typ = 1.0. , Max = 1.5. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD =",
    "26.2 DC Characteristics:\n5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source). , Device = Extended devices only. , Typ = 1.0. , Max = 1.5. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, INTOSC source)\nLegend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.",
    "26.2 DC Characteristics:\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n26.2 DC Characteristics:\nPIC18LF2525/2620/4525/4620\n(Industrial)\nPIC18F2525/2620/4525/4620",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nSupply, Device = Current (I DD) (2). Supply, Typ = Current (I DD) (2). Supply, Max = Current (I DD) (2). Supply, Units = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). , Device = PIC18LFX525/X620. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 0.8. , Max = 1.1. , Units = mA. , Conditions = +85\u00b0C.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n, Conditions = . , Device = PIC18LFX525/X620. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 1.3. , Max = 1.7. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n+25\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 2.5. , Max = 3.5. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 2.9. , Max = 5. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 3.1. , Max = 5. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 3.6. , Max = 9.5. , Units = \u03bc A. , Conditions",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n= +85\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 4.5. , Max = 8. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 4.8. , Max = 8. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 5.8. , Max = 15. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.2. , Max = 16. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.8. , Max = 16. , Units = \u03bc A. , Conditions =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n+25\u00b0C. , Conditions = . , Device = All devices. , Typ = 11.0. , Max = 35. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 21. , Max = 160. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply, Device = Current (I DD) (2). Supply, Typ = Current (I DD) (2). Supply, Max = Current (I DD) (2). Supply, Units = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). Supply, Conditions = Current (I DD) (2). , Device = PIC18LFX525/X620. , Typ = 165. , Max = 250. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 175. , Max = 250. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 190. , Max = 270. , Units = \u03bc A. , Conditions =",
    "26.2 DC Characteristics:\n+85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LFX525/X620. , Typ = 250. , Max = 360. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 270. , Max = 360. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 290. , Max = 380. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = All devices. , Typ = 500. , Max = 700. , Units = \u03bc A. ,",
    "26.2 DC Characteristics:\nConditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 520. , Max = 700. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 550. , Max = 700. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = Extended devices only. , Typ = 0.6. , Max = 1. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LFX525/X620. , Typ = 340. , Max = 500. , Units =",
    "26.2 DC Characteristics:\n\u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 350. , Max = 500. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 360. , Max = 500. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = PIC18LFX525/X620. , Typ = 520. , Max = 800. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 540. , Max = 800. , Units = \u03bc A. , Conditions =",
    "26.2 DC Characteristics:\n+25\u00b0C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 580. , Max = 850. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = All devices. , Typ = 1.0. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = . , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD =",
    "26.2 DC Characteristics:\n5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source). , Device = Extended devices only. , Typ = 1.1. , Max = 2.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_IDLE mode, INTOSC source)\nLegend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.",
    "26.2 DC Characteristics:\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "PIC18F2525/2620/4525/4620\n26.2 DC Characteristics:",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620 (Industrial)\nPIC18F2525/2620/4525/4620\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264\nTA\n\u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2). , Typ = Supply Current (I DD) (2). , Max = Supply Current (I DD) (2). , Units = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Device = PIC18LFX525/X620. , Typ = 250. , Max = 350. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 260. , Max = 350. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LFX525/X620. , Typ = 250. , Max = 350. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 550. , Max = 650. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 480. , Max = 640. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 460. , Max = 600. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = .",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n, Device = All devices. , Typ = 1.2. , Max = 1.5. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.3. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 1.0. , Max = 3.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LFX525/X620. , Typ = 0.72. ,",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nMax = 1.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 0.74. , Max = 1.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 0.74. , Max = 1.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LFX525/X620. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 1.3. , Max = 1.8. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 2.7. , Max = 4.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 2.6. , Max = 4.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\ndevices. , Typ = 2.5. , Max = 4.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 2.6. , Max = 5.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = Extended devices only. , Typ = 8.4. , Max = 13. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = Extended devices only. , Typ = 11. , Max = 16. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = -40\u00b0C. ,",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nConditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 20. , Max = 25. , Units",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n= mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = \nLegend: Shading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\nDS39626E-page 329",
    "26.2 DC Characteristics:\nPower-Down and Supply Current\nPIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C TA +85\u00b0C for industrial\n\u2264 \u2264\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "26.2 DC Characteristics:\n, Device = Supply Current (I DD) (2). , Typ = Supply Current (I DD) (2). , Max = Supply Current (I DD) (2). , Units = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Conditions = Supply Current (I DD) (2). , Device = All devices. , Typ = 7.5. , Max = 10. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.4. , Max = 10. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.3. , Max = 10. , Units = mA. , Conditions",
    "26.2 DC Characteristics:\n= +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 8.0. , Max = 12. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 12. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 12. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 9.7. ,",
    "26.2 DC Characteristics:\nMax = 12. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 10. , Max = 14. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 15. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices.",
    "26.2 DC Characteristics:\n, Typ = 15. , Max = 20. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 20. , Max = 25. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HS+PLL )",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n26.2 DC Characteristics:\nPIC18LF2525/2620/4525/4620 (Industrial)\nPIC18F2525/2620/4525/4620",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LFX525/X620. , Typ = 65. , Max = 100. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 65. , Max = 100. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 70. , Max = 110. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LFX525/X620. , Typ = 120. , Max = 140. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 120. , Max = 140. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 130. , Max = 160. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 230. , Max = 300. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. ,",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nTyp = 235. , Max = 300. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 240. , Max = 300. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 260. , Max = 500. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LFX525/X620. , Typ = 260. , Max = 360. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 255. , Max = 360. , Units = \u03bc A. , Conditions =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n+25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 270. , Max = 360. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 420. , Max = 620. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 430. , Max = 620. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX525/X620. , Typ = 450. , Max = 650. , Units = \u03bc A.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n, Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 0.9. , Max = 1.2. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 1. , Max = 1.3. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n5.0V. , Conditions = . , Device = Extended devices only. , Typ = 2.8. , Max = 6.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = Extended devices only. , Typ = 4.3. , Max = 8.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 6.0. , Max = 10. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 6.2. , Max = 10. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n6.6. , Max = 10. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 8.1. , Max = 13. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 9.1. , Max = 12. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 8.3. , Max = 12. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "26.2 DC Characteristics:\nSupply Current (I DD) (2), Typ = Supply Current (I DD) (2). Supply Current (I DD) (2), Max = Supply Current (I DD) (2). Supply Current (I DD) (2), Units = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). Supply Current (I DD) (2), Conditions = Supply Current (I DD) (2). PIC18LFX525/X620, Typ = 10. PIC18LFX525/X620, Max = 25. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = -40\u00b0C (3). PIC18LFX525/X620, Conditions = VDD = 2.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode,",
    "26.2 DC Characteristics:\nTimer1 as clock). PIC18LFX525/X620, Typ = 11. PIC18LFX525/X620, Max = 21. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +25\u00b0C. PIC18LFX525/X620, Conditions = VDD = 2.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LFX525/X620, Typ = 12. PIC18LFX525/X620, Max = 25. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +85\u00b0C. PIC18LFX525/X620, Conditions = VDD = 2.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock).",
    "26.2 DC Characteristics:\nPIC18LFX525/X620, Typ = 42. PIC18LFX525/X620, Max = 57. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = -40\u00b0C (3). PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LFX525/X620, Typ = 33. PIC18LFX525/X620, Max = 45. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +25\u00b0C. PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock).",
    "26.2 DC Characteristics:\nPIC18LFX525/X620, Typ = 29. PIC18LFX525/X620, Max = 45. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +85\u00b0C. PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 105. All devices, Max = 150. All devices, Units = \u03bc A. All devices, Conditions = -40\u00b0C (3). All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 81. All devices, Max = 130. All devices, Units = \u03bc A. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC =",
    "26.2 DC Characteristics:\n32 kHz (3) ( SEC_RUN mode, Timer1 as clock). All devices, Typ = 67. All devices, Max = 130. All devices, Units = \u03bc A. All devices, Conditions = +85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_RUN mode, Timer1 as clock). PIC18LFX525/X620, Typ = 3.0. PIC18LFX525/X620, Max = 12. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = -40\u00b0C (3). PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LFX525/X620, Typ = 3.0. PIC18LFX525/X620, Max = 6.",
    "26.2 DC Characteristics:\nPIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +25\u00b0C. PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LFX525/X620, Typ = 3.7. PIC18LFX525/X620, Max = 10. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +85\u00b0C. PIC18LFX525/X620, Conditions = VDD = 3.0V. PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LFX525/X620, Typ = 5.0. PIC18LFX525/X620, Max = 15.",
    "26.2 DC Characteristics:\nPIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = -40\u00b0C (3). PIC18LFX525/X620, Conditions = . PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LFX525/X620, Typ = 5.4. PIC18LFX525/X620, Max = 10. PIC18LFX525/X620, Units = \u03bc A. PIC18LFX525/X620, Conditions = +25\u00b0C. PIC18LFX525/X620, Conditions = . PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). PIC18LFX525/X620, Typ = 6.3. PIC18LFX525/X620, Max = 15. PIC18LFX525/X620, Units = \u03bc A.",
    "26.2 DC Characteristics:\nPIC18LFX525/X620, Conditions = +85\u00b0C. PIC18LFX525/X620, Conditions = . PIC18LFX525/X620, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 8.5. All devices, Max = 25. All devices, Units = \u03bc A. All devices, Conditions = -40\u00b0C (3). All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 9.0. All devices, Max = 20. All devices, Units = \u03bc A. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock). All devices, Typ = 10.5. All devices, Max = 30. All devices, Units = \u03bc A. All devices, Conditions =",
    "26.2 DC Characteristics:\n+85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 32 kHz (3) ( SEC_IDLE mode, Timer1 as clock)\nLegend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:",
    "26.2 DC Characteristics:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT enabled/disabled as specified.\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "PIC18F2525/2620/4525/4620\n26.2 DC Characteristics:\nPower-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2525/2620/4525/4620\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "PIC18F2525/2620/4525/4620\n, Device = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Typ = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Max = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Units = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Conditions = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Conditions = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Conditions = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D026 ( \u0394 I AD), Device = A/D Converter.",
    "PIC18F2525/2620/4525/4620\nD026 ( \u0394 I AD), Typ = 0.2. D026 ( \u0394 I AD), Max = 1.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 2.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 0.2. D026 ( \u0394 I AD), Max = 1.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 3.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter.",
    "PIC18F2525/2620/4525/4620\nD026 ( \u0394 I AD), Typ = 0.2. D026 ( \u0394 I AD), Max = 1.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 0.5. D026 ( \u0394 I AD), Max = 4.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40\u00b0C to +125\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D022 ( \u0394 I WDT), Device = Watchdog Timer.",
    "PIC18F2525/2620/4525/4620\nD022 ( \u0394 I WDT), Typ = 1.3. D022 ( \u0394 I WDT), Max = 2.2. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 2.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 1.4. D022 ( \u0394 I WDT), Max = 2.2. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 2.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ =",
    "PIC18F2525/2620/4525/4620\n1.6. D022 ( \u0394 I WDT), Max = 2.3. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 2.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 1.9. D022 ( \u0394 I WDT), Max = 3.5. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 2.0. D022 ( \u0394 I WDT),",
    "PIC18F2525/2620/4525/4620\nMax = 3.5. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 2.2. D022 ( \u0394 I WDT), Max = 3.5. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 3.0. D022 ( \u0394 I WDT), Max = 7.5. D022 ( \u0394 I",
    "PIC18F2525/2620/4525/4620\nWDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 3.5. D022 ( \u0394 I WDT), Max = 7.5. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 3.5. D022 ( \u0394 I WDT), Max = 7.8. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394",
    "PIC18F2525/2620/4525/4620\nI WDT), Conditions = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 4.0. D022 ( \u0394 I WDT), Max = 10. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT), Conditions = +125\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT), Conditions = . D022A ( \u0394 I BOR), Device = Brown-out Reset (4). D022A ( \u0394 I BOR), Typ = 35. D022A ( \u0394 I BOR), Max = 50. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40\u00b0C",
    "PIC18F2525/2620/4525/4620\nto +85\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 3.0V. D022A ( \u0394 I BOR), Conditions = . D022A ( \u0394 I BOR), Device = Brown-out Reset (4). D022A ( \u0394 I BOR), Typ = 40. D022A ( \u0394 I BOR), Max = 55. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40\u00b0C to +85\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = . D022A ( \u0394 I BOR), Device = Brown-out Reset (4). D022A ( \u0394 I BOR), Typ = 55. D022A ( \u0394 I BOR), Max = 65. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I",
    "PIC18F2525/2620/4525/4620\nBOR), Conditions = -40\u00b0C to +125\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = . D022A ( \u0394 I BOR), Device = Brown-out Reset (4). D022A ( \u0394 I BOR), Typ = 0. D022A ( \u0394 I BOR), Max = 2. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40\u00b0C to +85\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = Sleep mode, BOREN1:BOREN0 = 10. D022A ( \u0394 I BOR), Device = Brown-out Reset (4). D022A ( \u0394 I BOR), Typ = 0. D022A ( \u0394 I BOR), Max = 5.",
    "PIC18F2525/2620/4525/4620\nD022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40\u00b0C to +125\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = Sleep mode, BOREN1:BOREN0 = 10. D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (4). D022B ( \u0394 I LVD), Typ = 22. D022B ( \u0394 I LVD), Max = 38. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 2.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (4). D022B (",
    "PIC18F2525/2620/4525/4620\n\u0394 I LVD), Typ = 25. D022B ( \u0394 I LVD), Max = 40. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 3.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (4). D022B ( \u0394 I LVD), Typ = 29. D022B ( \u0394 I LVD), Max = 45. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device =",
    "PIC18F2525/2620/4525/4620\nHigh/Low-Voltage Detect (4). D022B ( \u0394 I LVD), Typ = 30. D022B ( \u0394 I LVD), Max = 45. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40\u00b0C to +125\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD), Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that\nadd delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\nDS39626E-page 333",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nPIC18LF2525/2620/4525/4620\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2525/2620/4525/4620\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nD025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 4.5. D025L ( \u0394 I OSCB), Max = 9.0. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = -40\u00b0C (3). D025L ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 0.9. D025L ( \u0394 I OSCB), Max = 1.6. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nOSCB), Conditions = -10\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 0.9. D025L ( \u0394 I OSCB), Max = 1.6. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = +25\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n= 0.9. D025L ( \u0394 I OSCB), Max = 1.8. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = +85\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 4.8. D025L ( \u0394 I OSCB), Max = 10. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = -40\u00b0C (3). D025L ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025L ( \u0394",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nI OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.0. D025L ( \u0394 I OSCB), Max = 2.0. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = -10\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.0. D025L ( \u0394 I OSCB), Max = 2.0. D025L ( \u0394 I OSCB), Units = \u03bc A.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nD025L ( \u0394 I OSCB), Conditions = +25\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.0. D025L ( \u0394 I OSCB), Max = 2.6. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = +85\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nI OSCB), Typ = 6.0. D025L ( \u0394 I OSCB), Max = 11. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = -40\u00b0C (3). D025L ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.6. D025L ( \u0394 I OSCB), Max = 4.0. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = -10\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD =",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n5.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.6. D025L ( \u0394 I OSCB), Max = 4.0. D025L ( \u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = +25\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1. D025L ( \u0394 I OSCB), Device = Timer1 Oscillator. D025L ( \u0394 I OSCB), Typ = 1.6. D025L ( \u0394 I OSCB), Max = 4.0. D025L (",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n\u0394 I OSCB), Units = \u03bc A. D025L ( \u0394 I OSCB), Conditions = +85\u00b0C. D025L ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025L ( \u0394 I OSCB), Conditions = 32 kHz on Timer1\nLegend:\nShading of rows is to assist in readability of the table.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD or VSS;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "DC CHARACTERISTICS\nD030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Symbol = VIL. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Characteristic = Input Low Voltage I/O Ports: with TTL Buffer. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Min = VSS - VSS VSS VSS VSS VSS VSS VSS VSS. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Max = 0.15 VDD 0.8 0.2 VDD 0.3 VDD 0.8 0.2 VDD 0.3 VDD 0.2 VDD 0.3 0.3. D030 D030A D031 D031A D031B D032",
    "DC CHARACTERISTICS\nD033 D033A D033B D034, Units = V V V V V V V V V. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Conditions = VDD < 4.5V 4.5V \u2264 VDD \u2264 5.5V I 2 C\u2122enabled SMBus enabled HS, HSPLL modes RC, EC modes (1) XT, LP modes. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Symbol = VIH. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Characteristic = OSC1 T13CKI Input High Voltage I/O Ports: with TTL Buffer. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Min = 0.25 VDD + 0.8V 2.0",
    "DC CHARACTERISTICS\n0.8 VDD 0.7 VDD 2.1 0.8 VDD 0.7 VDD 0.8 VDD. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Max = VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Units = V V V V V V V V V V V. D040 D040A D041 D041A D041B D042 D043 D043A D043B, Conditions = VDD < 4.5V 4.5V \u2264 VDD \u2264 5.5V I 2 C enabled SMBus enabled HS, HSPLL modes. D043C D044 D060, Symbol = I IL. D043C D044 D060, Characteristic = OSC1 OSC1 T13CKI Input Leakage I/O Ports. D043C",
    "DC CHARACTERISTICS\nD044 D060, Min = 0.9 VDD 1.6 1.6 -. D043C D044 D060, Max = \u00b1 200 \u00b1 50 \u00b1 1. D043C D044 D060, Units = V nA nA \u03bc A. D043C D044 D060, Conditions = RC mode (1) XT, LP modes VDD < 5.5V VSS \u2264 VPIN \u2264 VDD, Pin at VDD < 3V VSS \u2264 VPIN \u2264 VDD,. , Symbol = . , Characteristic = Current (2,3). , Min = - -. , Max = \u00b1 1. , Units = . , Conditions = high-impedance Pin at high-impedance Vss \u2264 VPIN \u2264 VDD. D061, Symbol = . D061, Characteristic = MCLR OSC1. D061, Min = . D061, Max = . D061, Units = \u03bc A. D061, Conditions = Vss \u2264 VPIN \u2264 VDD. D063, Symbol = I PU. D063, Characteristic = Weak Pull-up Current",
    "DC CHARACTERISTICS\nPORTB Weak Pull-up Current. D063, Min = 50. D063, Max = . D063, Units = . D063, Conditions = VDD = 5V, VPIN = VSS. D070, Symbol = I PURB. D070, Characteristic = . D070, Min = . D070, Max = 400. D070, Units = \u03bc A. D070, Conditions = \nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nD080, DC CHARACTERISTICS.Symbol = VOL. D080, DC CHARACTERISTICS.Characteristic = Output Low Voltage I/O Ports. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 0.6. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OL = 8.5 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D083, DC CHARACTERISTICS.Symbol = . D083, DC CHARACTERISTICS.Characteristic = OSC2/CLKO (RC,",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nRCIO, EC, ECIO modes). D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 0.6. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OL = 1.6 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D090, DC CHARACTERISTICS.Symbol = VOH. D090, DC CHARACTERISTICS.Characteristic = Output High Voltage (3) I/O Ports. D090, Standard Operating Conditions (unless otherwise stated) Operating",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\ntemperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = VDD - 0.7. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = -. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OH = -3.0 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D092, DC CHARACTERISTICS.Symbol = . D092, DC CHARACTERISTICS.Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nindustrial.Min = VDD - 0.7. D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = -. D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OH = -1.3 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D100, DC CHARACTERISTICS.Symbol = COSC2. D100, DC CHARACTERISTICS.Characteristic = OSC2 pin. D100, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D100, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n+85\u00b0C for industrial.Max = 15. D100, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = pF. D100, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = In XT, HS and LP modes when external clock is used to drive OSC1. D101, DC CHARACTERISTICS.Symbol = CIO. D101, DC CHARACTERISTICS.Characteristic = All I/O pins and OSC2 (in RC mode). D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 50. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\n+85\u00b0C for industrial.Units = pF. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = To meet the AC Timing Specifications. D102, DC CHARACTERISTICS.Symbol = CB. D102, DC CHARACTERISTICS.Characteristic = SCL, SDA. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 400. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = pF. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I 2 C\u2122Specification",
    "26.3 DC Characteristics: PIC18F2525/2620/4525/4620 (Industrial) PIC18LF2525/2620/4525/4620 (Industrial) (Continued)\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.",
    "DC CHARACTERISTICS\nD120, Sym = ED. D120, Characteristic = Data EEPROM Memory Byte Endurance. D120, Min = 100K. D120, Typ\u2020 = 1M. D120, Max = -. D120, Units = E/W. D120, Conditions = -40 \u00b0 C to +85 \u00b0 C. D121, Sym = VDRW. D121, Characteristic = VDD for Read/Write. D121, Min = VMIN. D121, Typ\u2020 = -. D121, Max = 5.5. D121, Units = V. D121, Conditions = Using EECON to read/write VMIN = Minimum operating voltage. D122, Sym = TDEW. D122, Characteristic = Erase/Write Cycle Time. D122, Min = -. D122, Typ\u2020 = 4. D122, Max = -. D122, Units = ms. D122, Conditions = . D123, Sym = TRETD. D123, Characteristic = Characteristic Retention. D123, Min = 40. D123,",
    "DC CHARACTERISTICS\nTyp\u2020 = -. D123, Max = -. D123, Units = Year. D123, Conditions = Provided no other specifications are violated. D124, Sym = TREF. D124, Characteristic = Number of Total Erase/Write Cycles before Refresh (1). D124, Min = 1M. D124, Typ\u2020 = 10M. D124, Max = -. D124, Units = E/W. D124, Conditions = -40\u00b0C to +85\u00b0C. D125, Sym = I DDP. D125, Characteristic = Supply Current during Programming. D125, Min = -. D125, Typ\u2020 = 10. D125, Max = -. D125, Units = mA. D125, Conditions = . , Sym = . , Characteristic = Program Flash Memory. , Min = . , Typ\u2020 = . , Max = . , Units = . , Conditions = . D130, Sym = EP. D130, Characteristic = Cell Endurance. D130, Min = 10K. D130, Typ\u2020 = 100K.",
    "DC CHARACTERISTICS\nD130, Max = -. D130, Units = E/W. D130, Conditions = -40 \u00b0 C to +85 \u00b0 C. D131, Sym = VPR. D131, Characteristic = VDD for Read. D131, Min = VMIN. D131, Typ\u2020 = -. D131, Max = 5.5. D131, Units = V. D131, Conditions = VMIN = Minimum operating voltage. D132, Sym = VIE. D132, Characteristic = VDD for Block Erase. D132, Min = 3.0. D132, Typ\u2020 = -. D132, Max = 5.5. D132, Units = V. D132, Conditions = Using ICSP\u2122 port, +25 \u00b0 C. D132A, Sym = VIW. D132A, Characteristic = VDD for Externally Timed Erase or Write. D132A, Min = 4.5. D132A, Typ\u2020 = -. D132A, Max = 5.5. D132A, Units = V.",
    "DC CHARACTERISTICS\nD132A, Conditions = Using ICSP\u2122 port, +25 \u00b0 C. D132B, Sym = VPEW. D132B, Characteristic = VDD for Self-Timed Write. D132B, Min = VMIN. D132B, Typ\u2020 = -. D132B, Max = 5.5. D132B, Units = V. D132B, Conditions = VMIN = Minimum operating voltage. D133, Sym = TIE. D133, Characteristic = ICSP Block Erase Cycle Time. D133, Min = -. D133, Typ\u2020 = 4. D133, Max = -. D133, Units = ms. D133, Conditions = VDD \u2265 4.5V. D133A, Sym = TIW. D133A, Characteristic = ICSP Erase or Write Cycle Time (externally timed). D133A, Min = 1. D133A, Typ\u2020 = -. D133A, Max = -. D133A, Units = ms. D133A, Conditions = VDD \u2265 4.5V,",
    "DC CHARACTERISTICS\n+25\u00b0C. D133A, Sym = TIW. D133A, Characteristic = Self-Timed Write Cycle Time. D133A, Min = -. D133A, Typ\u2020 = 2. D133A, Max = -. D133A, Units = ms. D133A, Conditions = . D134, Sym = TRETD. D134, Characteristic = Characteristic Retention. D134, Min = 40. D134, Typ\u2020 = 100. D134, Max = -. D134, Units = Year. D134, Conditions = Provided no other specifications are violated. D135, Sym = I DDP. D135, Characteristic = Supply Current during Programming. D135, Min = -. D135, Typ\u2020 = 10. D135, Max = -. D135, Units = mA. D135, Conditions = \nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial",
    "DC CHARACTERISTICS\n\u2020 Data in 'Typ' column is at 5.0V, 25\u00b0C unless otherwise stated. These parameters are for design guidance only and are not tested.\nNote 1: Refer to Section 6.8 'Using the Data EEPROM' for a more detailed discussion on data EEPROM endurance.",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nD300, Sym = VIOFF. D300, Characteristics = Input Offset Voltage. D300, Min = -. D300, Typ = \u00b15.0. D300, Max = \u00b110. D300, Units = mV. D300, Comments = . D301, Sym = VICM. D301, Characteristics = Input Common Mode Voltage. D301, Min = 0. D301, Typ = -. D301, Max = VDD - 1.5. D301, Units = V. D301, Comments = . D302, Sym = CMRR. D302, Characteristics = Common Mode Rejection Ratio. D302, Min = 55. D302, Typ = -. D302, Max = -. D302, Units = dB. D302, Comments = . 300, Sym = TRESP. 300, Characteristics = Response Time (1). 300, Min = -. 300, Typ = 150. 300, Max = 400. 300, Units = ns. 300, Comments = PIC18 F XXXX. 300A,",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nSym = . 300A, Characteristics = . 300A, Min = -. 300A, Typ = 150. 300A, Max = 600. 300A, Units = ns. 300A, Comments = PIC18 LF XXXX, VDD = 2.0V. 301, Sym = TMC2OV. 301, Characteristics = Comparator Mode Change to Output Valid. 301, Min = -. 301, Typ = -. 301, Max = 10. 301, Units = \u03bc s. 301, Comments = \nNote 1: Response time measured with one comparator input at (VDD - 1.5)/2, while the other input transitions from VSS to VDD.",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nD310, Sym = VRES. D310, Characteristics = Resolution. D310, Min = VDD/24. D310, Typ = -. D310, Max = VDD/32. D310, Units = LSb. D310, Comments = . D311, Sym = VRAA. D311, Characteristics = Absolute Accuracy. D311, Min = -. D311, Typ = -. D311, Max = 1/2. D311, Units = LSb. D311, Comments = . D312, Sym = VRUR. D312, Characteristics = Unit Resistor Value (R). D312, Min = -. D312, Typ = 2k. D312, Max = -. D312, Units = \u03a9. D312, Comments = . 310, Sym = TSET. 310, Characteristics = Settling Time (1). 310, Min = -. 310, Typ = -. 310, Max = 10. 310, Units = \u03bc s. 310, Comments = ",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nNote 1: Settling time measured while CVRR = 1 and CVR3:CVR0 transitions from ' 0000 ' to ' 1111 '.",
    "PIC18F2525/2620/4525/4620\nTABLE 26-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS",
    "Standard Operating Conditions (unless otherwise stated)\nOperating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial",
    "Standard Operating Conditions (unless otherwise stated)\nD420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0000. D420, Min = 2.06. D420, Typ = 2.17. D420, Max = 2.28. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0001. D420, Min = 2.12. D420, Typ = 2.23. D420, Max = 2.34. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0010. D420, Min = 2.24. D420, Typ = 2.36. D420, Max =",
    "Standard Operating Conditions (unless otherwise stated)\n2.48. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0011. D420, Min = 2.32. D420, Typ = 2.44. D420, Max = 2.56. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0100. D420, Min = 2.47. D420, Typ = 2.60. D420, Max = 2.73. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0101. D420, Min = 2.65.",
    "Standard Operating Conditions (unless otherwise stated)\nD420, Typ = 2.79. D420, Max = 2.93. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0110. D420, Min = 2.74. D420, Typ = 2.89. D420, Max = 3.04. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 0111. D420, Min = 2.96. D420, Typ = 3.12. D420, Max = 3.28. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic =",
    "Standard Operating Conditions (unless otherwise stated)\nHLVDL = 1000. D420, Min = 3.22. D420, Typ = 3.39. D420, Max = 3.56. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 1001. D420, Min = 3.37. D420, Typ = 3.55. D420, Max = 3.73. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 1010. D420, Min = 3.52. D420, Typ = 3.71. D420, Max = 3.90. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on",
    "Standard Operating Conditions (unless otherwise stated)\nVDD Transition High-to-Low. D420, Characteristic = HLVDL = 1011. D420, Min = 3.70. D420, Typ = 3.90. D420, Max = 4.10. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 1100. D420, Min = 3.90. D420, Typ = 4.11. D420, Max = 4.32. D420, Units = V. D420, Conditions = . D420, Sym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 1101. D420, Min = 4.11. D420, Typ = 4.33. D420, Max = 4.55. D420, Units = V. D420, Conditions = . D420,",
    "Standard Operating Conditions (unless otherwise stated)\nSym = . D420, Characteristic = HLVD Voltage on VDD Transition High-to-Low. D420, Characteristic = HLVDL = 1110. D420, Min = 4.36. D420, Typ = 4.59. D420, Max = 4.82. D420, Units = V. D420, Conditions = ",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nThe  timing  parameter  symbols  have  been  created using one of the following formats:",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nT, 1. TppS2ppS 2. TppS = . T, 3. TCC:ST 4. Ts = . T, (I 2 C specifications only) (I 2 C specifications only) = . F, 1. TppS2ppS 2. TppS = Frequency. F, 3. TCC:ST 4. Ts = T. F, (I 2 C specifications only) (I 2 C specifications only) = Time. Lowercase letters (pp) and their meanings:, 1. TppS2ppS 2. TppS = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, 3. TCC:ST 4. Ts = . Lowercase letters (pp) and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = . pp, 1. TppS2ppS 2. TppS = . pp, 3. TCC:ST 4. Ts = . pp, (I 2 C specifications only) (I 2 C specifications only) = . cc, 1. TppS2ppS 2. TppS = CCP1. cc, 3. TCC:ST 4.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nTs = osc. cc, (I 2 C specifications only) (I 2 C specifications only) = OSC1. ck, 1. TppS2ppS 2. TppS = CLKO. ck, 3. TCC:ST 4. Ts = rd. ck, (I 2 C specifications only) (I 2 C specifications only) = RD. cs, 1. TppS2ppS 2. TppS = CS. cs, 3. TCC:ST 4. Ts = rw. cs, (I 2 C specifications only) (I 2 C specifications only) = RD or WR. di, 1. TppS2ppS 2. TppS = SDI. di, 3. TCC:ST 4. Ts = sc. di, (I 2 C specifications only) (I 2 C specifications only) = SCK. do, 1. TppS2ppS 2. TppS = SDO. do, 3. TCC:ST 4. Ts = ss. do, (I 2 C specifications only) (I 2 C specifications only) = SS. dt, 1. TppS2ppS 2. TppS = Data in. dt, 3.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nTCC:ST 4. Ts = t0. dt, (I 2 C specifications only) (I 2 C specifications only) = T0CKI. io, 1. TppS2ppS 2. TppS = I/O port. io, 3. TCC:ST 4. Ts = t1. io, (I 2 C specifications only) (I 2 C specifications only) = T13CKI. mc, 1. TppS2ppS 2. TppS = MCLR. mc, 3. TCC:ST 4. Ts = wr. mc, (I 2 C specifications only) (I 2 C specifications only) = WR. Uppercase letters and their meanings:, 1. TppS2ppS 2. TppS = Uppercase letters and their meanings:. Uppercase letters and their meanings:, 3. TCC:ST 4. Ts = . Uppercase letters and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = . S, 1. TppS2ppS 2. TppS = . S, 3. TCC:ST 4. Ts = . S, (I 2 C specifications only) (I 2 C specifications",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nonly) = . F, 1. TppS2ppS 2. TppS = Fall. F, 3. TCC:ST 4. Ts = P. F, (I 2 C specifications only) (I 2 C specifications only) = Period. H, 1. TppS2ppS 2. TppS = High. H, 3. TCC:ST 4. Ts = R. H, (I 2 C specifications only) (I 2 C specifications only) = Rise. I, 1. TppS2ppS 2. TppS = Invalid (High-impedance). I, 3. TCC:ST 4. Ts = V. I, (I 2 C specifications only) (I 2 C specifications only) = Valid. L, 1. TppS2ppS 2. TppS = Low. L, 3. TCC:ST 4. Ts = Z. L, (I 2 C specifications only) (I 2 C specifications only) = High-impedance. I 2 C only, 1. TppS2ppS 2. TppS = I 2 C only. I 2 C only, 3. TCC:ST 4. Ts = . I 2 C only,",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n(I 2 C specifications only) (I 2 C specifications only) = . AA, 1. TppS2ppS 2. TppS = output access. AA, 3. TCC:ST 4. Ts = High. AA, (I 2 C specifications only) (I 2 C specifications only) = High. BUF, 1. TppS2ppS 2. TppS = Bus free. BUF, 3. TCC:ST 4. Ts = Low. BUF, (I 2 C specifications only) (I 2 C specifications only) = Low. TCC:ST (I 2 C specifications only), 1. TppS2ppS 2. TppS = TCC:ST (I 2 C specifications only). TCC:ST (I 2 C specifications only), 3. TCC:ST 4. Ts = . TCC:ST (I 2 C specifications only), (I 2 C specifications only) (I 2 C specifications only) = . CC, 1. TppS2ppS 2. TppS = . CC, 3. TCC:ST 4. Ts = . CC, (I 2 C specifications only) (I 2 C specifications only) =",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n. HD, 1. TppS2ppS 2. TppS = Hold. HD, 3. TCC:ST 4. Ts = SU. HD, (I 2 C specifications only) (I 2 C specifications only) = Setup. ST, 1. TppS2ppS 2. TppS = ST. ST, 3. TCC:ST 4. Ts = . ST, (I 2 C specifications only) (I 2 C specifications only) = . DAT, 1. TppS2ppS 2. TppS = DATA input hold. DAT, 3. TCC:ST 4. Ts = STO. DAT, (I 2 C specifications only) (I 2 C specifications only) = Stop condition. STA, 1. TppS2ppS 2. TppS = Start condition. STA, 3. TCC:ST 4. Ts = . STA, (I 2 C specifications only) (I 2 C specifications only) = ",
    "26.4.2 TIMING CONDITIONS\nNote:\nThe temperature and voltages specified in Table 26-5 apply  to  all timing  specifications  unless  otherwise noted. Figure 26-5 specifies the load conditions for the timing specifications.\nBecause  of  space  limitations,  the  generic terms 'PIC18FXXXX' and 'PIC18LFXXXX' are used throughout this section to refer to the PIC18F2525/2620/4525/4620 and PIC18LF2525/2620/4525/4620  families  of devices specifically and only those devices.",
    "TABLE 26-5: TEMPERATURE AND VOLTAGE SPECIFICATIONS - AC\nAC CHARACTERISTICS, 1 = Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial Operating voltage VDD range as described in DC spec Section 26.1 and Section 26.3 . LF parts operate for industrial temperatures only.",
    "FIGURE 26-5: LOAD CONDITIONS FOR DEVICE TIMING SPECIFICATIONS\nVDD/2 CL RL Pin VSS, Load Condition 2 = Pin for all pins except OSC2/CLKO and including D and E outputs as ports",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n1A, Symbol = FOSC. 1A, Characteristic = External CLKI Frequency (1). 1A, Min = DC DC DC DC DC 0.1 4 4 5 40 32. 1A, Max = 1 25 31.25 40 4 4 25 10 200 - - - -. 1A, Units = MHz MHz kHz MHz MHz MHz MHz MHz kHz ns ns \u03bc s ns ns \u03bc s. 1A, Conditions = XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode EC Oscillator mode RC Oscillator mode XT Oscillator mode HS Oscillator mode HS + PLL Oscillator mode LP Oscillator mode XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode. 1, Symbol = TOSC. 1, Characteristic = External CLKI Period (1) Oscillator Period (1). 1, Min = 1000 25 250 0.25 40 100. 1, Max = - 10 250 250. 1, Units = ns. 1, Conditions = EC Oscillator mode RC Oscillator mode XT Oscillator mode HS",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nOscillator mode. 2, Symbol = TCY. 2, Characteristic = Instruction Cycle Time. 2, Min = 5 100. 2, Max = 200 -. 2, Units = \u03bc s ns. 2, Conditions = LP Oscillator mode TCY = 4/FOSC, Industrial. 3, Symbol = . 3, Characteristic = (1) External Clock in (OSC1). 3, Min = 160 30 2.5. 3, Max = - - - -. 3, Units = ns ns. 3, Conditions = TCY = 4/FOSC, Extended XT Oscillator mode. 4, Symbol = TOSL, TOSH. 4, Characteristic = High or Low Time External Clock in (OSC1) Rise or Fall Time. 4, Min = 10 - -. 4, Max = 20 50. 4, Units = \u03bc s ns ns ns. 4, Conditions = LP Oscillator mode HS Oscillator mode XT Oscillator mode LP Oscillator mode. , Symbol = TOSR, TOSF. , Characteristic = . , Min = . , Max = . , Units = . , Conditions =",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n. , Symbol = . , Characteristic = . , Min = -. , Max = 7.5. , Units = ns. , Conditions = HS Oscillator mode\nNote 1: Instruction cycle period (TCY) equals four times the input oscillator time base period for all configurations except PLL. All specified values are based on characterization data for that particular oscillator type under standard operating conditions with the device executing code. Exceeding these specified limits may result in an unstable oscillator operation and/or higher than expected current consumption. All devices are tested to operate at 'min.' values with an external clock applied to the OSC1/CLKI pin. When an external clock input is used, the 'max.' cycle time limit is 'DC' (no clock) for all devices.",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF10, Sym = FOSC. F10, Characteristic = Oscillator Frequency Range. F10, Min = 4. F10, Typ\u2020 = -. F10, Max = 10. F10, Units = MHz. F10, Conditions = HS mode only. F11, Sym = FSYS. F11, Characteristic = On-Chip VCO System Frequency. F11, Min = 16. F11, Typ\u2020 = -. F11, Max = 40. F11, Units = MHz. F11, Conditions = HS mode only. F12, Sym = t rc. F12, Characteristic = PLL Start-up Time (Lock Time). F12, Min = -. F12, Typ\u2020 = -. F12, Max = 2. F12, Units = ms. F12, Conditions = . F13, Sym = \u0394 CLK. F13, Characteristic = CLKO Stability (Jitter). F13, Min = -2. F13, Typ\u2020 = -. F13, Max = +2.",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF13, Units = %. F13, Conditions = \n- \u2020 Data in 'Typ' column is at 5V, 25 C unless otherwise stated. These parameters are for design guidance \u00b0 only and are not tested.",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n, PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18LF2525/2620/4525/4620. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nMHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nTA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 2.7-3.3V. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nkHz, 31 kHz (1) = . , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nkHz, 31 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nindustrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 2.7-3.3V. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18F2525/2620/4525/4620. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nMHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nAccuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD =",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n4.5-5.5V. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = . , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nkHz, 125 kHz, 31 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nfor industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 4.5-5.5V. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nkHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n@Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nkHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = INTRC Accuracy @Freq = 31 kHz. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18LF2525/2620/4525/4620. , Standard Operating Conditions (unless otherwise stated) Operating",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\ntemperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nstated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nfor industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 2.7-3.3V. , PIC18LF2525/2620/4525/4620 (Industrial).PIC18F2525/2620/4525/4620 (Industrial).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = PIC18F2525/2620/4525/4620. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) =",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Standard Operating Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz,",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions (unless otherwise stated) -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz, 31 kHz (1) = VDD = 4.5-5.5V\nLegend:",
    "TABLE 26-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nShading of rows is to assist in readability of the table.\n- Note 1: Frequency calibrated at 25\u00b0C. OSCTUNE register can be used to compensate for temperature drift.",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n10, Symbol = TosH2ckL. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Min = -. 10, Typ = 75. 10, Max = 200. 10, Units = ns. 10, Conditions = (Note 1). 11, Symbol = TosH2ckH. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Min = -. 11, Typ = 75. 11, Max = 200. 11, Units = ns. 11, Conditions = (Note 1). 12, Symbol = TckR. 12, Characteristic = CLKO Rise Time. 12, Characteristic = CLKO Rise Time. 12, Min = -. 12, Typ = 35. 12, Max = 100. 12, Units = ns. 12, Conditions = (Note 1). 13, Symbol = TckF. 13, Characteristic = CLKO Fall Time. 13, Characteristic = CLKO Fall Time. 13, Min = -. 13, Typ = 35. 13, Max =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n100. 13, Units = ns. 13, Conditions = (Note 1). 14, Symbol = TckL2ioV. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Min = -. 14, Typ = -. 14, Max = 0.5 TCY + 20. 14, Units = ns. 14, Conditions = (Note 1). 15, Symbol = TioV2ckH. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Min = 0.25 TCY + 25. 15, Typ = -. 15, Max = -. 15, Units = ns. 15, Conditions = (Note 1). 16, Symbol = TckH2ioI. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Min = 0. 16, Typ = -. 16, Max = -. 16, Units = ns. 16, Conditions = (Note 1). 17, Symbol =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nTosH2ioV. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Min = -. 17, Typ = 50. 17, Max = 150. 17, Units = ns. 17, Conditions = . 18, Symbol = TosH2ioI. 18, Characteristic = OSC1 \u2191 (Q2 cycle) to. 18, Characteristic = PIC18 F XXXX. 18, Min = 100. 18, Typ = -. 18, Max = -. 18, Units = ns. 18, Conditions = . 18A, Symbol = . 18A, Characteristic = Port Input Invalid (I/O in hold time). 18A, Characteristic = PIC18 LF XXXX. 18A, Min = 200. 18A, Typ = -. 18A, Max = -. 18A, Units = ns. 18A, Conditions = VDD = 2.0V. 19, Symbol = TioV2osH. 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\ntime). 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup time). 19, Min = 0. 19, Typ = -. 19, Max = -. 19, Units = ns. 19, Conditions = . 20, Symbol = TioR. 20, Characteristic = Port Output Rise Time. 20, Characteristic = PIC18 F XXXX. 20, Min = -. 20, Typ = 10. 20, Max = 25. 20, Units = ns. 20, Conditions = . 20A, Symbol = . 20A, Characteristic = . 20A, Characteristic = PIC18 LF XXXX. 20A, Min = -. 20A, Typ = -. 20A, Max = 60. 20A, Units = ns. 20A, Conditions = VDD = 2.0V. 21, Symbol = TioF. 21, Characteristic = Port Output Fall Time. 21, Characteristic = PIC18 F XXXX. 21, Min = -. 21, Typ = 10. 21, Max = 25. 21, Units = ns. 21, Conditions = . 21A, Symbol = . 21A, Characteristic =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n. 21A, Characteristic = PIC18 LF XXXX. 21A, Min = -. 21A, Typ = -. 21A, Max = 60. 21A, Units = ns. 21A, Conditions = VDD = 2.0V. 22\u2020, Symbol = TINP. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Min = TCY. 22\u2020, Typ = -. 22\u2020, Max = -. 22\u2020, Units = ns. 22\u2020, Conditions = . 23\u2020, Symbol = TRBP. 23\u2020, Characteristic = RB7:RB4 Change INTx High or Low Time. 23\u2020, Characteristic = RB7:RB4 Change INTx High or Low Time. 23\u2020, Min = TCY. 23\u2020, Typ = -. 23\u2020, Max = -. 23\u2020, Units = ns. 23\u2020, Conditions = \n\u2020 These parameters are asynchronous events not related to any internal clock edges.\nNote 1: Measurements are taken in RC mode, where CLKO output is 4 x TOSC.",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nFIGURE 26-8: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER AND POWER-UP TIMER TIMING",
    "BROWN-OUT RESET TIMING\nTABLE 26-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS",
    "BROWN-OUT RESET TIMING\n30, Symbol = TmcL. 30, Characteristic = MCLR Pulse Width (low). 30, Min = 2. 30, Typ = -. 30, Max = -. 30, Units = \u03bc s. 30, Conditions = . 31, Symbol = TWDT. 31, Characteristic = Watchdog Timer Time-out Period (no postscaler). 31, Min = 3.4. 31, Typ = 4.1. 31, Max = 4.71. 31, Units = ms. 31, Conditions = . 32, Symbol = TOST. 32, Characteristic = Oscillation Start-up Timer Period. 32, Min = 1024 TOSC. 32, Typ = -. 32, Max = 1024 TOSC. 32, Units = -. 32, Conditions = TOSC = OSC1 period. 33, Symbol = TPWRT. 33, Characteristic = Power-up Timer Period. 33, Min = 55.6. 33, Typ = 65.5. 33, Max = 75.4. 33, Units = ms. 33, Conditions = . 34, Symbol = TIOZ. 34, Characteristic = I/O High-Impedance from MCLR",
    "BROWN-OUT RESET TIMING\nLow or Watchdog Timer Reset. 34, Min = -. 34, Typ = 2. 34, Max = -. 34, Units = \u03bc s. 34, Conditions = . 35, Symbol = TBOR. 35, Characteristic = Brown-out Reset Pulse Width. 35, Min = 200. 35, Typ = -. 35, Max = -. 35, Units = \u03bc s. 35, Conditions = VDD \u2264 BVDD (see D005). 36, Symbol = TIVRST. 36, Characteristic = Time for Internal Reference Voltage to become Stable. 36, Min = -. 36, Typ = 20. 36, Max = 50. 36, Units = \u03bc s. 36, Conditions = . 37, Symbol = TLVD. 37, Characteristic = High/Low-Voltage Detect Pulse Width. 37, Min = 200. 37, Typ = -. 37, Max = -. 37, Units = \u03bc s. 37, Conditions = VDD \u2264 VLVD. 38, Symbol = TCSD. 38, Characteristic = CPU Start-up Time. 38, Min = -. 38, Typ = 10. 38, Max = -. 38, Units = \u03bc",
    "BROWN-OUT RESET TIMING\ns. 38, Conditions = . 39, Symbol = TIOBST. 39, Characteristic = Time for INTOSC to Stabilize. 39, Min = -. 39, Typ = 1. 39, Max = -. 39, Units = \u03bc s. 39, Conditions = ",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n40, Symbol = Tt0H. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = No prescaler. 40, Min = 0.5 TCY + 20. 40, Max = -. 40, Units = ns. 40, Conditions = . 40, Symbol = Tt0H. 40, Characteristic = . 40, Characteristic = . 40, Characteristic = With prescaler. 40, Min = 10. 40, Max = -. 40, Units = ns. 40, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = No prescaler. 41, Min = 0.5 TCY + 20. 41, Max = -. 41, Units = ns. 41, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = . 41, Characteristic = . 41, Characteristic = With prescaler. 41, Min = 10. 41, Max = -. 41, Units = ns. 41, Conditions = . 42, Symbol =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nTt0P. 42, Characteristic = T0CKI Period. 42, Characteristic = T0CKI Period. 42, Characteristic = No prescaler. 42, Min = TCY + 10. 42, Max = -. 42, Units = ns. 42, Conditions = . 42, Symbol = Tt0P. 42, Characteristic = . 42, Characteristic = . 42, Characteristic = With prescaler. 42, Min = Greater of: 20 ns or (T CY + 40)/N. 42, Max = -. 42, Units = ns. 42, Conditions = N = prescale value (1, 2, 4,..., 256). 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, no prescaler. 45, Characteristic = Synchronous, no prescaler. 45, Min = 0.5 TCY + 20. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nSynchronous, with prescaler. 45, Characteristic = PIC18 F XXXX. 45, Min = 10. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 LF XXXX. 45, Min = 25. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 F XXXX. 45, Min = 30. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 LF XXXX. 45, Min = 50. 45, Max = -. 45, Units = ns. 45, Conditions = VDD =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, no prescaler. 46, Characteristic = Synchronous, no prescaler. 46, Min = 0.5 TCY + 5. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 F XXXX. 46, Min = 10. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 LF XXXX. 46, Min = 25. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nAsynchronous. 46, Characteristic = PIC18 F XXXX. 46, Min = 30. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 LF XXXX. 46, Min = 50. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Synchronous. 47, Characteristic = Synchronous. 47, Min = Greater of: 20 ns or (T CY + 40)/N. 47, Max = -. 47, Units = ns. 47, Conditions = N = prescale value (1, 2, 4, 8). 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Asynchronous. 47, Characteristic = Asynchronous. 47, Min = 60. 47, Max =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n-. 47, Units = ns. 47, Conditions = . , Symbol = Ft1. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Min = DC. , Max = 50. , Units = kHz. , Conditions = . 48, Symbol = Tcke2tmrI. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Min = 2 TOSC. 48, Max = 7 TOSC. 48, Units = -. 48, Conditions = ",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = No prescaler. 50, Characteristic = No prescaler. 50, Min = 0.5 TCY + 20. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 F XXXX. 50, Min = 10. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 LF XXXX. 50, Min = 20. 50, Max = -. 50, Units = ns. 50, Conditions = VDD = 2.0V. 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = No prescaler. 51, Characteristic = No prescaler. 51, Min = 0.5",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nTCY + 20. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 F XXXX. 51, Min = 10. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 LF XXXX. 51, Min = 20. 51, Max = -. 51, Units = ns. 51, Conditions = VDD = 2.0V. 52, Symbol = TccP. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Min = 3 TCY + 40 N. 52, Max = -. 52, Units = ns. 52, Conditions = N = prescale value (1, 4 or 16). 53, Symbol = TccR. 53,",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nCharacteristic = CCPx Output Fall Time. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = PIC18 F XXXX. 53, Min = -. 53, Max = 25. 53, Units = ns. 53, Conditions = . 53, Symbol = TccR. 53, Characteristic = . 53, Characteristic = . 53, Characteristic = PIC18 LF XXXX. 53, Min = -. 53, Max = 45. 53, Units = ns. 53, Conditions = VDD = 2.0V. 54, Symbol = TccF. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = PIC18 F XXXX. 54, Min = -. 54, Max = 25. 54, Units = ns. 54, Conditions = . 54, Symbol = TccF. 54, Characteristic = . 54, Characteristic = . 54, Characteristic = PIC18 LF XXXX. 54, Min = -. 54, Max = 45. 54, Units = ns. 54, Conditions = VDD = 2.0V",
    "TABLE 26-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4525/4620)\n62, Symbol = TdtV2wrH. 62, Characteristic = Data In Valid before WR \u2191 or CS \u2191 (setup time). 62, Characteristic = Data In Valid before WR \u2191 or CS \u2191 (setup time). 62, Min = 20. 62, Max = -. 62, Units = ns. 62, Conditions = . 63, Symbol = TwrH2dtI. 63, Characteristic = WR \u2191 or CS \u2191 to Data-In Invalid (hold time). 63, Characteristic = PIC18 F XXXX. 63, Min = 20. 63, Max = -. 63, Units = ns. 63, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = 35. , Max = -. , Units = ns. , Conditions = VDD = 2.0V. 64, Symbol = TrdL2dtV. 64, Characteristic = RD \u2193 and CS \u2193 to Data-Out Valid. 64, Characteristic = RD \u2193 and CS \u2193 to Data-Out Valid. 64, Min = -. 64, Max = 80. 64, Units = ns. 64, Conditions",
    "TABLE 26-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4525/4620)\n= . 65, Symbol = TrdH2dtI. 65, Characteristic = RD \u2191 or CS \u2193 to Data-Out Invalid. 65, Characteristic = RD \u2191 or CS \u2193 to Data-Out Invalid. 65, Min = 10. 65, Max = 30. 65, Units = ns. 65, Conditions = . 66, Symbol = TibfINH. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Min = -. 66, Max = 3 TCY. 66, Units = . 66, Conditions = ",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n)\nTABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71, Symbol = TscH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = -. 71, Units = ns. 71, Conditions = . 71A, Symbol = TscH. 71A, Characteristic = SCK Input High Time (Slave mode). 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = -. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TscL. 72, Characteristic = SCK Input Low Time (Slave mode). 72, Characteristic = Continuous. 72, Min = 1.25 TCY + 30. 72, Max = -. 72, Units = ns.",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n72, Conditions = . 72A, Symbol = TscL. 72A, Characteristic = SCK Input Low Time (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL.",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78,",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\nCharacteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\nafter SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V\nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n)\nTABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n71, Symbol = TscH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = -. 71, Units = ns. 71, Conditions = . 71A, Symbol = . 71A, Characteristic = . 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = -. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TscL. 72, Characteristic = SCK Input Low Time. 72, Characteristic = Continuous. 72, Min = 1.25 TCY + 30. 72, Max = -. 72, Units = ns. 72, Conditions = . 72A, Symbol = . 72A, Characteristic = (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\nto SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max =",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n25. 75, Units = ns. 75, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = . , Max = 45. , Units = ns. , Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XXXX. , Min = . , Max = 45. , Units = ns. , Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\nmode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV,. 80, Characteristic = SDO Data Output Valid after. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . , Symbol = TscL2doV. , Characteristic = SCK Edge. , Characteristic = PIC18 LF XXXX. , Min = . , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 81, Symbol = TdoV2scH, TdoV2scL. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Min = TCY. 81, Max = -. 81, Units = ns. 81, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-15: EXAMPLE SPI SLAVE MODE TIMING (CKE = 0\n)",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n)",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = 3 TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n72A, Characteristic = Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min =",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = . 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nOutput Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = . 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n(Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = . 80, Characteristic = PIC18 LF XXXX. 80, Min = . 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK edge. 83, Characteristic = SS \u2191 after SCK edge. 83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = ",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 26-16: EXAMPLE SPI SLAVE MODE TIMING (CKE = 1\n)",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n)",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = 3 TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A,",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nCharacteristic = Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nSCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = . 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50.",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n77, Units = ns. 77, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80,",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nUnits = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 F XXXX. 82, Min = -. 82, Max = 50. 82, Units = ns. 82, Conditions = . 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 LF XXXX. 82, Min = -. 82, Max = 100. 82, Units = ns. 82, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK Edge. 83, Characteristic = SS \u2191 after SCK Edge.",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "TABLE 26-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\n90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4700. 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. , Symbol = . , Characteristic = . , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 91, Symbol = THD:STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 4000. 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first. , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 4700. 92, Max = -. 92, Units = ns. 92, Conditions = . , Symbol = . ,",
    "TABLE 26-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\nCharacteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 4000. 93, Max = -. 93, Units = ns. 93, Conditions = . , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = ",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 4.0. 100, Max = -. 100, Units = \u03bc s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 0.6. 100, Max = -. 100, Units = \u03bc s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = MSSP module. 100, Min = 1.5 TCY. 100, Max = -. 100, Units = . 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 4.7. 101, Max = -. 101, Units = \u03bc s. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 1.3. 101, Max = -. 101, Units = \u03bc s. 101, Conditions",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n= . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = MSSP module. 101, Min = 1.5 TCY. 101, Max = -. 101, Units = . 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = . 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nmode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4.7. 90, Max = -. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 0.6. 90, Max = -. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 4.0. 91, Max = -. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nTime. 91, Characteristic = 400 kHz mode. 91, Min = 0.6. 91, Max = -. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = \u03bc s. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107,",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nUnits = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 4.7. 92, Max = -. 92, Units = \u03bc s. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 0.6. 92, Max = -. 92, Units = \u03bc s. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = (Note 1). 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = (Note 1). 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n= 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 26-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nNote 1: As a transmitter, the device must provide this internal minimum delay time to bridge the undefined region (min. 300 ns) of the falling edge of SCL to avoid unintended generation of Start or Stop conditions.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but the requirement TSU:DAT \u2265 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, TR max. + TSU:DAT = 1000 + 250 = 1250 ns (according to the Standard mode I 2 C bus specification), before the SCL line is released.",
    "TABLE 26-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.",
    "TABLE 26-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = . 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = . 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 2(T OSC)(BRG + 1).",
    "TABLE 26-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = . 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU:STO. 92, Characteristic",
    "TABLE 26-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n= Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU:STO. 92, Characteristic = . 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 93, Symbol = THD:STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Hold Time. 93, Characteristic = 400 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD:STO. 93, Characteristic =",
    "TABLE 26-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n. 93, Characteristic = 1 MHz mode (1). 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = ",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 1 MHz mode (1). 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nTime. 101, Characteristic = 400 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 1 MHz mode (1). 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nand SCL Rise Time. 102, Characteristic = 1 MHz mode (1). 102, Min = -. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 1 MHz mode (1). 103, Min = -. 103, Max = 100. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\npF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 2(T",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nOSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT.",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = ms. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min =",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = 1000. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 1 MHz mode (1). 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = . 110,",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nSymbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 26-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but parameter 107 \u2265 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, parameter 102 + parameter 107 = 1000 + 250 = 1250 ns (for 100 kHz mode), before the SCL line is released.",
    "TABLE 26-22: EUSART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n120, Symbol = TckH2dtV. 120, Characteristic = SYNC XMIT (MASTER & SLAVE) Clock High to Data Out Valid. 120, Characteristic = PIC18 F XXXX. 120, Min = -. 120, Max = 40. 120, Units = ns. 120, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 121, Symbol = Tckrf. 121, Characteristic = Clock Out Rise Time and Fall Time. 121, Characteristic = PIC18 F XXXX. 121, Min = -. 121, Max = 20. 121, Units = ns. 121, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V. 122, Symbol = Tdtrf. 122, Characteristic = Data Out Rise Time and Fall Time. 122, Characteristic = PIC18 F XXXX. 122, Min =",
    "TABLE 26-22: EUSART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n-. 122, Max = 20. 122, Units = ns. 122, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V",
    "TABLE 26-23: EUSART SYNCHRONOUS RECEIVE REQUIREMENTS\n125, Symbol = TdtV2ckl. 125, Characteristic = SYNC RCV (MASTER & SLAVE) Data Hold before CK \u2193 (DT hold time). 125, Min = 10. 125, Max = -. 125, Units = ns. 125, Conditions = . 126, Symbol = TckL2dtl. 126, Characteristic = Data Hold after CK \u2193 (DT hold time). 126, Min = 15. 126, Max = -. 126, Units = ns. 126, Conditions = ",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nA01, Symbol = NR. A01, Characteristic = Resolution. A01, Characteristic = Resolution. A01, Min = -. A01, Typ = -. A01, Max = 10. A01, Units = bit. A01, Conditions = \u0394 VREF \u2265 3.0V. A03, Symbol = EIL. A03, Characteristic = Integral Linearity Error. A03, Characteristic = Integral Linearity Error. A03, Min = -. A03, Typ = -. A03, Max = <\u00b11. A03, Units = LSb. A03, Conditions = \u0394 VREF \u2265 3.0V. A04, Symbol = EDL. A04, Characteristic = Differential Linearity Error. A04, Characteristic = Differential Linearity Error. A04, Min = -. A04, Typ = -. A04, Max = <\u00b11. A04, Units =",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nLSb. A04, Conditions = \u0394 VREF \u2265 3.0V. A06, Symbol = EOFF. A06, Characteristic = Offset Error. A06, Characteristic = Offset Error. A06, Min = -. A06, Typ = -. A06, Max = <\u00b12.0. A06, Units = LSb. A06, Conditions = \u0394 VREF \u2265 3.0V. A07, Symbol = EGN. A07, Characteristic = Gain Error. A07, Characteristic = Gain Error. A07, Min = -. A07, Typ = -. A07, Max = <\u00b11. A07, Units = LSb. A07, Conditions = \u0394 VREF \u2265 3.0V. A10, Symbol = -. A10, Characteristic = Monotonicity. A10, Characteristic = Monotonicity. A10, Min = Guaranteed",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\n(1). A10, Typ = Guaranteed (1). A10, Max = Guaranteed (1). A10, Units = -. A10, Conditions = VSS \u2264 VAIN \u2264 VREF. A20, Symbol = \u0394 VREF. A20, Characteristic = Reference Voltage Range (VREFH - VREFL). A20, Characteristic = Reference Voltage Range (VREFH - VREFL). A20, Min = 1.8 3. A20, Typ = - -. A20, Max = - -. A20, Units = V V. A20, Conditions = VDD < 3.0V VDD \u2265 3.0V. A21, Symbol = VREFH. A21, Characteristic = Reference Voltage High. A21, Characteristic = Reference Voltage High. A21, Min = VSS. A21, Typ = -. A21, Max = VREFH. A21, Units = V. A21, Conditions = .",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nA22, Symbol = VREFL. A22, Characteristic = Reference Voltage Low. A22, Characteristic = Reference Voltage Low. A22, Min = VSS - 0.3V. A22, Typ = -. A22, Max = VDD - 3.0V. A22, Units = V. A22, Conditions = . A25, Symbol = VAIN. A25, Characteristic = Analog Input Voltage. A25, Characteristic = Analog Input Voltage. A25, Min = VREFL. A25, Typ = -. A25, Max = VREFH. A25, Units = V. A25, Conditions = . A30, Symbol = ZAIN. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Min = -. A30, Typ = -. A30, Max = 2.5. A30, Units = k \u03a9. A30, Conditions = .",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nA40, Symbol = I AD. A40, Characteristic = A/DCurrent from. A40, Characteristic = PIC18 F XXXX. A40, Min = -. A40, Typ = 180. A40, Max = -. A40, Units = \u03bc A. A40, Conditions = Average current during conversion. A40, Symbol = I AD. A40, Characteristic = A/DCurrent from. A40, Characteristic = PIC18 LF XX20. A40, Min = -. A40, Typ = 90. A40, Max = -. A40, Units = \u03bc A. A40, Conditions = Average current during conversion. A50, Symbol = I REF. A50, Characteristic = VREF Input Current (2). A50, Characteristic = VREF Input Current (2). A50, Min = - -. A50, Typ = - -. A50, Max = 5 150. A50, Units = \u03bc A \u03bc A.",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2525/2620/4525/4620 (INDUSTRIAL) PIC18LF2525/2620/4525/4620 (INDUSTRIAL)\nA50, Conditions = During VAIN acquisition. During A/D conversion cycle.\nNote 1: The A/D conversion result never decreases with an increase in the input voltage and has no missing codes.\n2:\nVREFH current is from RA3/AN3/VREF+ pin or VDD, whichever is selected as the VREFH source. VREFL current is from RA2/AN2/VREF-/CVREF pin or VSS, whichever is selected as the VREFL source.",
    "FIGURE 26-23: A/D CONVERSION TIMING\nNote 1: If the A/D clock source is selected as RC, a time of TCY is added before the A/D clock starts.\nThis allows the SLEEP\ninstruction to be executed.\n2: This is a minimal RC delay (typically 100 ns), which also disconnects the holding capacitor from the analog input.",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\n130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = 0.7. 130, Max = 25.0 (1). 130, Units = \u03bc s. 130, Conditions = TOSC based, VREF \u2265 3.0V. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = 1.4. 130, Max = 25.0 (1). 130, Units = \u03bc s. 130, Conditions = VDD = 2.0V; TOSC based, VREF full range. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = -. 130, Max = 1. 130, Units = \u03bc s. 130, Conditions = A/D RC mode. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = -. 130, Max = 3. 130, Units = \u03bc s. 130, Conditions",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\n= VDD = 2.0V; A/D RC mode. 131, Symbol = TCNV. 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Min = 11. 131, Max = 12. 131, Units = TAD. 131, Conditions = . 132, Symbol = TACQ. 132, Characteristic = Acquisition Time (Note 3). 132, Characteristic = Acquisition Time (Note 3). 132, Min = 1.4. 132, Max = -. 132, Units = \u03bc s. 132, Conditions = -40 \u00b0 C to +85 \u00b0 C. 135, Symbol = TSWC. 135, Characteristic = Switching Time from Convert \u2192 Sample. 135, Characteristic = Switching Time from Convert \u2192 Sample. 135, Min = -. 135, Max = (Note 4). 135, Units = . 135, Conditions = . TBD, Symbol = TDIS. TBD, Characteristic = Discharge Time. TBD, Characteristic = Discharge Time. TBD, Min = 0.2. TBD, Max = -. TBD, Units = \u03bc",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\ns. TBD, Conditions = \nNote 1: The time of the A/D clock period is dependent on the device frequency and the TAD clock divider.\n2: ADRES register may be read on the following TCY cycle.\n3: The time for the holding capacitor to acquire the 'New' input voltage when the voltage changes full scale after the conversion (VDD to VSS or VSS to VDD). The source impedance ( RS ) on the input channels is 50 \u03a9 .\n4: On the following cycle of the device clock.",
    "27.0 DC AND AC CHARACTERISTICS GRAPHS AND TABLES\nNote:\nThe graphs and tables provided following this note are a statistical summary based on a limited number of samples and are provided for informational purposes only. The performance characteristics listed herein are not tested or guaranteed. In some graphs or tables, the data presented may be outside the specified operating range (e.g., outside specified power supply range) and therefore, outside the warranted range.\n'Typical' represents the mean of the distribution at 25 C. 'Maximum' or 'minimum' represents (mean + 3 \u00b0 \u03c3 ) or (mean - 3 \u03c3 ) respectively, where \u03c3 is a standard deviation, over the whole temperature range.",
    "FIGURE 27-3: MAXIMUM IPD vs. VDD ACROSS TEMPERATURE (SLEEP MODE)\nFIGURE 27-4:",
    "PIC18F2525/2620/4525/4620\nTYPICAL T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP,\nT1OSC IN LOW-POWER MODE)\np\nFIGURE 27-5: MAXIMUM T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP, TIOSC IN LOW-POWER MODE)\nFIGURE 27-6:\nTYPICAL T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP, T1OSC IN HIGH-POWER MODE)\nFIGURE 27-7: MAXIMUM T1OSC DELTA CURRENT vs. VDD ACROSS TEMP. (DEVICE IN SLEEP, T1OSC IN HIGH-POWER MODE)",
    "FIGURE 27-8:\nTYPICAL BOR DELTA CURRENT vs. VDD ACROSS TEMP. (BORV = 2.7V, SLEEP MODE)",
    "PIC18F2525/2620/4525/4620\nFIGURE 27-9:\nTYPICAL WDT CURRENT vs. VDD ACROSS TEMPERATURE (WDT DELTA\nCURRENT IN SLEEP MODE)\nFIGURE 27-10: MAXIMUM WDT CURRENT vs. VDD ACROSS TEMPERATURE (WDT DELTA CURRENT IN SLEEP MODE)\nFIGURE 27-12: MAXIMUM IDD ACROSS VDD (RC_RUN MODE, 85\u00b0C)\nFIGURE 27-13: TYPICAL AND MAXIMUM IDD ACROSS VDD (RC_RUN MODE, 31 kHz)\nFIGURE 27-14: TYPICAL IDD ACROSS VDD (RC_IDLE MODE, 25\u00b0C)\nFIGURE 27-16: TYPICAL AND MAXIMUM IDD ACROSS VDD (RC_IDLE MODE, 31 kHz)\nFIGURE 27-17: TYPICAL AND MAXIMUM SEC_RUN CURRENT vs. VDD ACROSS TEMPERATURE (T1OSC IN LOW-POWER MODE)\nFIGURE 27-18: TYPICAL AND MAXIMUM SEC_IDLE CURRENT vs. VDD ACROSS TEMPERATURE (T1OSC IN LOW-POWER MODE)\nMAXIMUM IDD vs. FOSC, 500 kHz TO 4 MHz (PRI_RUN MODE (EC CLOCK),\nFIGURE 27-20: -40\u00b0C TO +125\u00b0C)",
    "PIC18F2525/2620/4525/4620\nFIGURE 27-22: MAXIMUM IDD vs. FOSC, 4 MHz TO 40 MHz (PRI_RUN MODE (EC CLOCK), -40\u00b0C TO +125\u00b0C)\nFIGURE 27-26: MAXIMUM IDD vs. FOSC, 500 kHz TO 4 MHz (PRI_IDLE MODE, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-30:\nMAXIMUM IDD vs. FOSC, HS/PLL (PRI_IDLE MODE, -40\u00b0C)",
    "FIGURE 27-31: VIN (ST) vs. VDD, 25\u00b0C (-40\u00b0C TO +125\u00b0C)\nFIGURE 27-32: VIN (TTL) vs. VDD, 25\u00b0C (-40\u00b0C TO +125\u00b0C)",
    "PIC18F2525/2620/4525/4620\nFIGURE 27-34: VOL vs. IOL (VDD = 5.0V, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-36: VOH vs. IOH (VDD = 5.0V, -40\u00b0C TO +125\u00b0C)\nFIGURE 27-39:\nWDT PERIOD vs. VDD ACROSS TEMPERATURE (1:1 POSTSCALER, -40\u00b0C TO +125\u00b0C)\nNOTES:",
    "Legend:\nXX...X\nCustomer-specific information\nY\nYear code (last digit of calendar year)\nYY\nYear code (last 2 digits of calendar year)\nWW\nWeek code (week of January 1 is week '01')\nNNN\nAlphanumeric traceability code\nPb-free JEDEC designator for Matte Tin (Sn) This package is Pb-free. The Pb-free JEDEC designator (     ) can be found on the outer packaging for this package. 3 e\n*",
    "Note :\nIn the event the full Microchip part number cannot be marked on one line, it will be carried over to the next line, thus limiting the number of available characters for customer-specific information.\n3\ne",
    "28.2 Package Details\nThe following sections give the technical details of the packages.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36. /g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n= /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g72/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g37/g68/g86/g72/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g72/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g72/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g87/g82/;#23#23#23/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g87/g82/;#23#23#23/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g87/g82/;#23#23#23/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g87/g82/;#23#23#23/g54/g75/g82/g88/g79/g71/g72/g85/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g55/g76/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g55/g76/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g55/g76/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g55/g76/g83/;#23#23#23/g87/g82/;#23#23#23/g54/g72/g68/g87/g76/g81/g74/;#23#23#23/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g70.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g83/g83/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g69/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g56/g83/g83/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g83/g83/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g56/g83/g83/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g82/g90/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69. /g47/g82/g90/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g82/g90/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g82/g90/g72/g85/;#23#23#23/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g53/g82/g90/;#23#23#23/g54/g83/g68/g70/g76/g81/g74/;#23#23#23/;#23#23#23/g134,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72/g37.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g53/g82/g90/;#23#23#23/g54/g83/g68/g70/g76/g81/g74/;#23#23#23/;#23#23#23/g134, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g53/g82/g90/;#23#23#23/g54/g83/g68/g70/g76/g81/g74/;#23#23#23/;#23#23#23/g134, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g53/g82/g90/;#23#23#23/g54/g83/g68/g70/g76/g81/g74/;#23#23#23/;#23#23#23/g134, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g68/g85/g72/g68/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g134/;#23#23#23/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/;#23#23#23/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23/;#23#23#23/g83/g72/g85/;#23#23#23/g86/g76/g71/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g48/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g54/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23/g89/g68/g79/g88/g72/;#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g37",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23 /g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23/g134, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23/g134,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g75/g68/g80/g73/g72/g85/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/;#23#23#23#23#23#23#23#23#23#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g75.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g75/g68/g80/g73/g72/g85/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/;#23#23#23#23#23#23#23#23#23#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g75/g68/g80/g73/g72/g85/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/;#23#23#23#23#23#23#23#23#23#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g75/g68/g80/g73/g72/g85/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/;#23#23#23#23#23#23#23#23#23#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n= /g47. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n= /g177. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g68.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g68/g85/g72/g68/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g134/;#23#23#23/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/;#23#23#23/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g80/g80/;#23#23#23/g83/g72/g85/;#23#23#23/g86/g76/g71/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g48/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g54/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23/g89/g68/g79/g88/g72/;#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g88/g86/g88/g68/g79/g79/g92/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g73/g82/g85/;#23#23#23/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g83/g88/g85/g83/g82/g86/g72/g86/;#23#23#23/g82/g81/g79/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g37\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g134/;#23#23#23/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/;#23#23#23/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23/;#23#23#23/g83/g72/g85/;#23#23#23/g86/g76/g71/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g48/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g54/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23/g89/g68/g79/g88/g72/;#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g37",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g51/g76/g81/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/g91/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g87/g82/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g40/g91 /g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g46.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g87/g82/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g40/g91 /g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g38/g82/g81/g87/g68/g70/g87/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g87/g82/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g40/g91",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g82/g81/g87/g68/g70/g87/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g87/g82/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g40/g91 /g83/g82/g86/g72/g71/;#23#23#23/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g68/g85/g72/g68/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g76/g86/;#23#23#23/g86/g68/g90/;#23#23#23/g86/g76/g81/g74/g88/g79/g68/g87/g72/g71/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g48/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g54/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23/g89/g68/g79/g88/g72/;#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g88/g86/g88/g68/g79/g79/g92/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g73/g82/g85/;#23#23#23/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g83/g88/g85/g83/g82/g86/g72/g86/;#23#23#23/g82/g81/g79/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g37",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n= /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g70.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g68/g85/g72/g68/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/g75/g68/g80/g73/g72/g85/g86/;#23#23#23/g68/g87/;#23#23#23/g70/g82/g85/g81/g72/g85/g86/;#23#23#23/g68/g85/g72/;#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g86/g76/g93/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g80/g80/;#23#23#23/g83/g72/g85/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g86/g76/g71/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/g48/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g54/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n;\n#23#23#23/g89/g68/g79/g88/g72/;#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g88/g86/g88/g68/g79/g79/g92/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g73/g82/g85/;#23#23#23/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/;",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n#23#23#23/g83/g88/g85/g83/g82/g86/g72/g86/;#23#23#23/g82/g81/g79/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g37",
    "PIC18F2525/2620/4525/4620\nNOTES:",
    "Revision A (April 2004)\nOriginal  data  sheet  for  PIC18F2525/2620/4525/4620 devices.",
    "Revision B (June 2004)\nThis revision introduces High/Low-Voltage Detect updates to Section 22.0 and includes minor corrections to the data sheet text related to the High/Low-Voltage Detect update.",
    "Revision C (January 2007)\nThis update includes revisions to the packaging diagrams.\nUpdated values in 'Power-Down and Supply Current' tables  in Section  26.2,  'DC  Characteristics' and modified Figure 17-9, 'I 2 C Slave Mode Timing (Transmission, 7-Bit Address)'. In Section 28.2, 'Package Details' , added land-pattern drawings for both 44-lead packages.",
    "Revision E (May 2008)\nUpdated Section 26.0  'Electrical  Characteristics' . Added characteristics data tables in Section 27.0 'DC and AC Characteristics Graphs and Tables' . Minor text edits throughout the rest of the document.",
    "APPENDIX B: DEVICE DIFFERENCES\nThe differences between the devices listed in this data sheet are shown in Table B-1.",
    "TABLE B-1: DEVICE DIFFERENCES\nProgram Memory (Bytes), PIC18F2525 = 49152. Program Memory (Bytes), PIC18F2620 = 65536. Program Memory (Bytes), PIC18F4525 = 49152. Program Memory (Bytes), PIC18F4620 = 65536. Program Memory (Instructions), PIC18F2525 = 24576. Program Memory (Instructions), PIC18F2620 = 32768. Program Memory (Instructions), PIC18F4525 = 24576. Program Memory (Instructions), PIC18F4620 = 32768. Interrupt Sources, PIC18F2525 = 19. Interrupt Sources, PIC18F2620 = 19. Interrupt Sources, PIC18F4525 = 20. Interrupt Sources, PIC18F4620 = 20. I/O Ports, PIC18F2525 = Ports A, B, C, (E). I/O Ports, PIC18F2620 = Ports A, B, C, (E). I/O Ports, PIC18F4525 = Ports A, B, C, D, E. I/O Ports, PIC18F4620 =",
    "TABLE B-1: DEVICE DIFFERENCES\nPorts A, B, C, D, E. Capture/Compare/PWM Modules, PIC18F2525 = 2. Capture/Compare/PWM Modules, PIC18F2620 = 2. Capture/Compare/PWM Modules, PIC18F4525 = 1. Capture/Compare/PWM Modules, PIC18F4620 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F2525 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F2620 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F4525 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F4620 = 1. Parallel Communications (PSP), PIC18F2525 = No. Parallel Communications (PSP), PIC18F2620 = No. Parallel Communications (PSP), PIC18F4525 = Yes. Parallel Communications (PSP), PIC18F4620 = Yes. 10-Bit Analog-to-Digital Module, PIC18F2525 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F2620 = 10 Input",
    "TABLE B-1: DEVICE DIFFERENCES\nChannels. 10-Bit Analog-to-Digital Module, PIC18F4525 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4620 = 13 Input Channels. Packages, PIC18F2525 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F2620 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F4525 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN. Packages, PIC18F4620 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN",
    "APPENDIX C: CONVERSION CONSIDERATIONS\nThis appendix discusses the considerations for converting  from  previous  versions  of  a  device  to  the ones listed in this data sheet. Typically, these changes are due to the differences in the process technology used. An example of this type of conversion is from a PIC16C74A to a PIC16C74B.\nNot Applicable\nAPPENDIX D:\nMIGRATION FROM BASELINE TO ENHANCED DEVICES\nThis section discusses how to migrate from a Baseline device (i.e., PIC16C5X) to an Enhanced MCU device (i.e., PIC18FXXX).\nThe  following  are  the  list  of  modifications  over  the PIC16C5X microcontroller family:\nNot Currently Available",
    "APPENDIX E: MIGRATION FROM MID-RANGE TO ENHANCED DEVICES\nAPPENDIX F:\nMIGRATION FROM HIGH-END TO ENHANCED DEVICES\nA detailed  discussion of the  differences between  the mid-range  MCU  devices  (i.e.,  PIC16CXXX)  and  the Enhanced  devices  (i.e.,  PIC18FXXX)  is  provided  in AN716,  'Migrating  Designs  from  PIC16C74A/74B  to PIC18C442 '.  The  changes  discussed,  while  device specific,  are  generally  applicable  to  all  mid-range  to Enhanced device migrations.\nThis Application Note is available as Literature Number DS00716.\nA  detailed  discussion  of  the  migration  pathway  and differences between the high-end MCU devices (i.e., PIC17CXXX) and the Enhanced devices (i.e., PIC18FXXX)  is  provided  in AN726,  'PIC17CXXX  to PIC18CXXX Migration '.\nThis Application Note is available as Literature Number DS00726.",
    "A\nA/D, 1 = ................................................................................... 223. A/D Converter Interrupt, Configuring ........................................, 1 = ....................... 227. Acquisition Requirements, 1 = 228. ADCON0 Register ...................................................., 1 = 223. ADCON1 Register, 1 =",
    "A\n.................................................... 223. ADCON2 Register, 1 = .................................................... 223. ADRESH Register, 1 = ............................................ 223, 226. ADRESL Register, 1 = .................................................... 223. Analog Port Pins, Configuring, 1 =",
    "A\n.................................. 230. Associated Registers ..............................................., 1 = 232. Configuring the Module, 1 = ............................................ 227. Conversion Status (GO/DONE Bit), 1 = .......................... 226. Conversions ............................................................., 1 = . , 1 = 231.",
    "A\nConverter Characteristics, 1 = ........................................ 359. Discharge ................................................................., 1 = 231. Operation in Power-Managed Modes, 1 = ...................... 230. Selecting and Configuring Acquisition, 1 = Time ............ 229. Special Event Trigger (CCP), 1 = .................................... 232. Special Event Trigger (ECCP), 1 =",
    "A\n................................. 148. Use of the CCP2 Trigger, 1 = .......................................... 232. Absolute Maximum Ratings, 1 = 321. , 1 = .............................................. AC (Timing) Characteristics ............................................., 1 = 340. Timing Specifications, 1 = ....................................... 341. Parameter Symbology, 1 =",
    "A\n............................................. 340. Temperature and Voltage Specifications, 1 = ................. 341. Timing Conditions, 1 = .................................................... 341. AC Characteristics Internal RC Accuracy, 1 = ............................................... 343. Access Bank, 1 = . Mapping with Indexed Literal Offset, 1 = 71. Addressing Mode ...............................................",
    "A\nRemapping with Indexed Literal Offset Addressing Mode ..............................................., 1 = 71. ACKSTAT ........................................................................, 1 = 191. ACKSTAT Status Flag, 1 = ..................................................... 191. ADCON0 Register",
    "A\n............................................................, 1 = 223. GO/DONE Bit, 1 = ........................................................... 226. ADCON1 Register, 1 = ............................................................ 223. ADCON2 Register, 1 =",
    "A\n............................................................ 223. ADDFSR, 1 = .......................................................................... 310. ADDLW ............................................................................, 1 = 273. ADDULNK, 1 =",
    "A\n........................................................................ 310. ADDWF ADDWFC, 1 = ............................................................................ 273. ADRESH Register, 1 = ............................................................ 223. ADRESL Register, 1 =",
    "A\n.................................................... 223, 226. Analog-to-Digital Converter. See A/D., 1 = . ANDLW, 1 = 274. ANDWF, 1 = ............................................................................ ............................................................................ 275. Assembler, 1 = . MPASM Assembler, 1 =",
    "A\n.................................................. 318. Auto-Wake-up on Sync Break Character, 1 = ......................... 214. B, 1 = . Bank Select Register (BSR), 1 = ............................................... 59. Baud Rate Generator, 1 = ....................................................... 187. BC",
    "A\n...................................................................................., 1 = 275. BCF, 1 = .................................................................................. 276. BF",
    "A\n.................................................................................... BF Status Flag, 1 = 191 ................................................................. 191\nBlock Diagrams",
    "A\nAnalog Input Model, 226 = .................................................. 227. Baud Rate Generator, 226 = .............................................. 187. Capture Mode Operation ........................................., 226 = 141. Comparator Analog Input Model, 226 = .............................. 237. Comparator I/O Operating Modes, 226 = ........................... 234. Comparator Output",
    "A\n.................................................., 226 = 236. Comparator Voltage Reference, 226 = ............................... 240. Compare Mode Operation ......................................., 226 = 142. Device Clock, 226 = .............................................................. 28. Enhanced PWM, 226 =",
    "A\n....................................................... 149. EUSART Receive, 226 = .................................................... 213. EUSART Transmit, 226 = ................................................... 211. External Power-on Reset Circuit (Slow VDD Power-up) ........................................, 226 = 43. Fail-Safe Clock Monitor, 226 =",
    "A\n........................................... 261. Generic I/O Port ........................................................., 226 = 91. High/Low-Voltage Detect with External Input, 226 = .......... 244. Interrupt Logic .........................................................., 226 = 110. MSSP (I 2 C Master Mode), 226 = ........................................ 185.",
    "A\nMSSP (I 2 C Mode), 226 = .................................................... 170. MSSP (SPI Mode), 226 = ................................................... 161. On-Chip Reset Circuit, 226 = ................................................ 41. PIC18F2525/2620, 226 = ..................................................... 10.",
    "A\nPIC18F4525/4620, 226 = ..................................................... 11. PLL (HS Mode), 226 = .......................................................... 25. PORTD and PORTE (Parallel Slave Port), 226 = ............... 106. PWM Operation (Simplified) .................................... Memory, 226 = 144 ......................... 83. Reads from Flash Program Single Comparator",
    "A\n..................................................., 226 = 235. Table Read Operation, 226 = ............................................... 79. Table Write Operation, 226 = ............................................... 80. Table Writes to Flash Program Memory, 226 = .................... 85. Timer0 in 16-Bit Mode ............................................., 226 = 124.",
    "A\nTimer0 in 8-Bit Mode, 226 = ............................................... 124. Timer1, 226 = ..................................................................... 128. Timer1 (16-Bit Read/Write Mode), 226 = ............................ 128. Timer2, 226 = ..................................................................... 134.",
    "A\nTimer3 ....................................................................., 226 = 136. Timer3 (16-Bit Read/Write Mode) ............................ Buffer Example, 226 = 136 241. Voltage Reference Output Timer ......................................................, 226 = ............. 258. Watchdog, 226 = 276. BN",
    "A\n.................................................................................... BNC, 226 = ................................................................................. 277. BNN",
    "A\n................................................................................., 226 = 277. BNOV, 226 = .............................................................................. 278. BNZ, 226 = 278.",
    "A\n................................................................................. BOR. See Brown-out Reset., 226 = . BOV ................................................................................. BRA",
    "A\n................................................................................., 226 = 281 279. Break Character (12-Bit) Transmit and Receive BRG., 226 = .............. 216. See Baud Rate Generator. Brown-out Reset (BOR) ....................................................., 226 = 44. Detecting",
    "A\n..................................................................., 226 = 44. Disabling in Sleep Mode Software Enabled ......................................................, 226 = ............................................ 44.",
    "A\n.................................................................................., 226 = 44. BSF BTFSC, 226 = 279 280. BTFSS, 226 = ............................................................................. 280. BTG",
    "A\n................................................................................. BZ ...................................................................................., 226 = 281 282",
    "C\nC18 MPLAB C30, ............................................................. 318 = ............................................................. 318. CALL, ............................................................. 318 =",
    "C\n................................................................................ 282. CALLW ............................................................................., ............................................................. 318 = 311. Capture (CCP Module)",
    "C\n....................................................., ............................................................. 318 = 141. Associated Registers, ............................................................. 318 = ............................................... 143. CCP Pin Configuration,",
    "C\n............................................................. 318 = ............................................. 141. CCPRxH:CCPRxL Registers, ............................................................. 318 = ................................... 141. Prescaler,",
    "C\n............................................................. 318 = .................................................................. 141. Software Interrupt, ............................................................. 318 = .................................................... 141.",
    "C\nTimer1/Timer3 Mode Selection, ............................................................. 318 = ................................ 141. Capture (ECCP Module) .................................................., ............................................................. 318 = 148. Capture/Compare/PWM (CCP)",
    "C\n........................................, ............................................................. 318 = 139. Capture Mode. See Capture., ............................................................. 318 = . CCPRxH Register, ............................................................. 318 =",
    "C\n.................................................... 140. CCPRxL Register, ............................................................. 318 = ..................................................... 140. Compare Mode. See Compare., ............................................................. 318 = . Interaction of Two CCP",
    "C\nModules, ............................................................. 318 = ............................. 140. Module Configuration, ............................................................. 318 = ............................................... 140. Pin Assignment",
    "C\n........................................................, ............................................................. 318 = 140. Timer Resources ......................................................, ............................................................. 318 = 140. Clock Sources,",
    "C\n............................................................. 318 = .................................................................... 28. Selecting the 31 kHz Source ......................................, ............................................................. 318 = 29. Selection Using OSCCON Register,",
    "C\n............................................................. 318 = ........................... 29. CLRF ................................................................................, ............................................................. 318 = 283. CLRWDT,",
    "C\n............................................................. 318 = .......................................................................... 283. Code Examples, ............................................................. 318 = . 16 x 16 Signed Multiply Routine,",
    "C\n............................................................. 318 = ................................ 90. 16 x 16 Unsigned Multiply Routine, ............................................................. 318 = ............................ 90. 8 x 8 Signed Multiply Routine ....................................,",
    "C\n............................................................. 318 = 89. 8 x 8 Unsigned Multiply Routine, ............................................................. 318 = ................................ 89. Changing Between Capture Prescalers, ............................................................. 318 =",
    "C\n................... 141. Computed GOTO Using an Offset Value, ............................................................. 318 = ................... 56. Data EEPROM Read, ............................................................. 318 = ................................................. 75. Data EEPROM Refresh Routine,",
    "C\n............................................................. 318 = ................................ 76. Data EEPROM Write ................................................., ............................................................. 318 = 75. Erasing a Flash Program Memory Row,",
    "C\n............................................................. 318 = ..................... 84. Fast Register Stack ...................................................., ............................................................. 318 = 56. How to Clear RAM (Bank 1) Using Indirect Addressing",
    "C\n............................................ Implementing a Real-Time Clock, ............................................................. 318 = 67. Using a Timer1 Interrupt Service Initializing PORTA ......................................................, ............................................................. 318 =",
    "C\n..................... 131. , ............................................................. 318 = 91. Initializing PORTB, ............................................................. 318 = ...................................................... 94",
    "C\n...................................................... 97. Initializing PORTC Initializing PORTD, ............................................................. 318 = 100. .................................................... Initializing PORTE, ............................................................. 318 =",
    "C\n.................................................... 103. Loading the SSPBUF (SSPSR) Register, ............................................................. 318 = ................. 164. Reading a Flash Program Memory Word, ............................................................. 318 = .................. 83. Saving STATUS, WREG and,",
    "C\n............................................................. 318 = 121. , ............................................................. 318 = 86-87. BSR Registers in RAM ....................................., ............................................................. 318 = . Writing to Flash Program Memory",
    "C\n....................... Code Protection ......................................................., ............................................................. 318 = 249, 263. Associated Registers ...............................................,",
    "C\n............................................................. 318 = 263. Configuration Register Protection, ............................................................. 318 = ............................ 266. Data EEPROM .........................................................,",
    "C\n............................................................. 318 = 266. Program Memory, ............................................................. 318 = 264. , ............................................................. 318 = ...................................................... COMF",
    "C\n............................................................................... Comparator, ............................................................. 318 = 284 ...................................................................... 233. Analog Input Connection Considerations,",
    "C\n............................................................. 318 = ................. 237. Associated Registers ..............................................., ............................................................. 318 = 237. Configuration",
    "C\n............................................................, ............................................................. 318 = 234. Effects of a Reset, ............................................................. 318 = ..................................................... 236",
    "C\nInterrupts, 1 = ................................................................. 236. Operation ................................................................. ..........................................., 1 = 235. Operation During Sleep, 1 = 236. Outputs, 1 =",
    "C\n.................................................................... 235. Reference, 1 = ................................................................ 235. External Signal, 1 = ................................................ 235. Internal Signal, 1 = .................................................. 235. Response Time",
    "C\nComparator Specifications, 1 = ........................................................ 235. ............................................... Comparator Voltage Reference, 1 = 338. Accuracy and Error .................................................., 1 = 240. Associated Registers, 1 = ............................................... 241. Configuring, 1 = 239.",
    "C\n.............................................................. Connection Considerations, 1 = ...................................... 240. Effects of a Reset, 1 = .................................................... 240. Operation During Sleep, 1 = ........................................... 240. Compare (CCP Module)",
    "C\n.................................................., 1 = 142 ................................................ Associated Registers, 1 = 143. , 1 = ...................................................... 142. CCPRx Register, 1 = ..................................................... 142. Pin Configuration Software Interrupt, 1 =",
    "C\n.................................................... 142. Special Event Trigger, 1 = .............................. 137, 142, 232. Timer1/Timer3 Mode Selection, 1 = ................................ 142. Compare (ECCP Module) ................................................, 1 = 148. Special Event Trigger, 1 = .............................................. 148. Computed",
    "C\nGOTO ..............................................................., 1 = 56. Configuration Bits, 1 = 249. ............................................................ Context Saving During Interrupts, 1 = ..................................... 121. Considerations CPFSEQ",
    "C\n.........................................................................., 1 = .............................................. 395. Conversion, 1 = 284. CPFSLT, 1 = 285. ..........................................................................., 1 = 23. Crystal Oscillator/Ceramic Resonator Customer Change Notification Service, 1 =",
    "C\n................................ 407. Customer Notification Service ........................................., 1 = 407. Customer Support, 1 = ............................................................ 407. D, 1 = . Data Addressing Modes, 1 = .................................................... 67. Comparing Options with the Extended Instruction Set Enabled",
    "C\n....................................., 1 = 70. Direct ......................................................................... Indexed Literal Offset, 1 = 67 ................................................ 69. Instructions Affected, 1 = .......................................... 69. Indirect, 1 =",
    "C\n....................................................................... 67. Inherent and Literal, 1 = .................................................... 67. Data EEPROM Memory, 1 = ..................................................... 73. Associated Registers, 1 = ................................................. 77. EEADR",
    "C\nand EEADRH Registers, 1 = ............................... 73. EECON1 and EECON2 Registers, 1 = ............................. 73. Operation During Code-Protect ................................., 1 = 76. Protection Against Spurious Write, 1 = ............................. 76. Reading, 1 = ..................................................................... 75. Using",
    "C\n........................................................................., 1 = 76. Write Verify, 1 = ................................................................ 75. Writing, 1 = ....................................................................... 75. Data Memory, 1 = 59.",
    "C\n..................................................................... Access Bank, 1 = 61. .............................................................. and the Extended Instruction Set, 1 = .............................. 69. Bank Select Register (BSR) ......................................, 1 = 59. General Purpose Registers, 1 =",
    "C\n....................................... 61. Map for PIC18FX525/X620 Registers, 1 = ........................................ 60. Special Function, 1 = ........................................ 62. DAW ................................................................................, 1 = 286. DC and AC Characteristics, 1 = . Graphs and Tables",
    "C\n.................................................., 1 = 361",
    "PIC18F2525/2620/4525/4620\nDC Characteristics ..........................................................., 1 = 335. Power-Down and Supply Current ........................................................., 1 = ............................ 325. Supply Voltage, 1 = 324. DCFSNZ",
    "PIC18F2525/2620/4525/4620\n.........................................................................., 1 = 287. DECF ..............................................................................., 1 = 286. DECFSZ",
    "PIC18F2525/2620/4525/4620\n..........................................................................., 1 = 287. Development Support, 1 = ...................................................... 317. Device Differences, 1 = ........................................................... 394. Device Overview, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 7. Details on Individual Family Members, 1 = ......................... 8. Features (table) ............................................................, 1 = 9. New Core Features ......................................................, 1 = 7. Other Special Features, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................ 8. Device Reset Timers .........................................................., 1 = 45. Oscillator Start-up Timer (OST), 1 = ................................. 45. PLL Lock Time-out ....................................................., 1 = 45. Power-up Timer (PWRT), 1",
    "PIC18F2525/2620/4525/4620\n= ........................................... 45. Time-out Sequence, 1 = .................................................... 45. Direct Addressing, 1 = ............................................................... 68. E, 1 = . Effect on Standard PIC MCU Instructions, 1 = ........................ 314. Effects of Power-Managed Modes on Various Clock Sources, 1 =",
    "PIC18F2525/2620/4525/4620\n............................................... 31. Electrical Characteristics, 1 = .................................................. 321. Enhanced Capture/Compare/PWM (ECCP), 1 = .................... 147. Associated Registers ..............................................., 1 = 160. Capture and Compare Modes, 1 = .................................. 148. Outputs and",
    "PIC18F2525/2620/4525/4620\nConfiguration ....................................... ................................., 1 = 148 148. Pin Configurations for ECCP1, 1 = . PWM Mode. See PWM (ECCP Module). Standard PWM Mode ..............................................., 1 = 148. Timer Resources ......................................................, 1 = 148. Enhanced PWM Mode. See PWM (ECCP Module). Enhanced Universal",
    "PIC18F2525/2620/4525/4620\nSynchronous Asynchronous, 1 = 149. , 1 = ......... Receiver Transmitter (EUSART). Equations, 1 = See EUSART.. A/D Acquisition Time, 1 = ................................................ 228. A/D Minimum Charging Time ..................................., 1 = 228. Calculating the Minimum Required Acquisition Time, 1 = .............................................. 228. Errata EUSART, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................................................... 5. Asynchronous Mode, 1 = ................................................ 211. 12-Bit Break Transmit and Receive, 1 = ................. 216. Associated Registers, Receive, 1 = ........................ 214. Associated Registers, Transmit, 1 = ....................... 212.",
    "PIC18F2525/2620/4525/4620\nAuto-Wake-up on Sync Break, 1 = ......................... 214. Receiver ..........................................................., 1 = 213. Setting up 9-Bit Mode with Address Detect ........................................, 1 = 213. Transmitter, 1 = 211. Baud Rate Generator, 1 = ........................................................ Operation in Power-Managed Mode, 1 =",
    "PIC18F2525/2620/4525/4620\n................ 205. Baud Rate Generator (BRG) ...................................., 1 = 205. Associated Registers, 1 = ....................................... 206. Auto-Baud Rate Detect ...................................., 1 = 209. Baud Rate Error, Calculating ..........................., 1 = 206. Baud Rates, Asynchronous Modes, 1 = ................. 207",
    "PIC18F2525/2620/4525/4620\n................. 205. High Baud Rate Select (BRGH Bit) Sampling .........................................................., 1 = 205",
    "PIC18F2525/2620/4525/4620\nSynchronous Master Mode, 1 = ...................................... 217. Associated Registers, Receive ........................, 1 = 219. Associated Registers, Transmit, 1 = ....................... 218. Reception, 1 = ........................................................ 219. Transmission, 1 = ................................................... 217. Synchronous Slave Mode, 1 =",
    "PIC18F2525/2620/4525/4620\n........................................ 220. Associated Registers, Receive, 1 = ........................ 221. Associated Registers, Transmit, 1 = ....................... 220. Reception, 1 = ........................................................ 221. Transmission, 1 = ................................................... 220. Extended Instruction Set, 1 = . ADDFSR, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 310. ADDULNK, 1 = ............................................................... 310. and Using MPLAB IDE Tools, 1 = .................................. 316. CALLW, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................... 311. Considerations for Use, 1 = ............................................ 314. MOVSF, 1 = .................................................................... 311. MOVSS, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................... 312. PUSHL, 1 = ..................................................................... 312. SUBFSR, 1 = .................................................................. 313. SUBULNK, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................................ 313. Syntax, 1 = ...................................................................... 309. External Clock Input, 1 = ........................................................... 24. F, 1 = . Fail-Safe Clock Monitor, 1 =",
    "PIC18F2525/2620/4525/4620\n........................................... 249, 261. Exiting Operation, 1 = ..................................................... 261. Interrupts in Power-Managed Modes, 1 = ...................... 262. POR or Wake from Sleep ........................................, 1 = 262. WDT During Oscillator Failure, 1 = ................................. 261. Fast Register Stack, 1",
    "PIC18F2525/2620/4525/4620\n= ........................................................... 56. Firmware Instructions, 1 = ...................................................... 267. Flash Program Memory, 1 = ..................................................... 79 .................................................. Associated Registers, 1 = 87. Control",
    "PIC18F2525/2620/4525/4620\nRegisters ....................................................... EECON1 and, 1 = 80 80. EECON2 ..................................... TABLAT (Table Latch), 1 = ........................ 82. Register TBLPTR (Table Pointer) Register, 1 = ...................... 82. Erase Sequence ........................................................, 1 = 84. Erasing",
    "PIC18F2525/2620/4525/4620\n......................................................................, 1 = 84. Operation During Code-Protect, 1 = ................................. 87. Reading, 1 = 83. Table Pointer, 1 = ...................................................................... Boundaries Based on Operation, 1 = ....................... 82. Operations with TBLRD and TBLWT",
    "PIC18F2525/2620/4525/4620\n(table) ..........................................., 1 = 82. Table Pointer Boundaries .........................................., 1 = 82 ................................... Table Reads and Table Writes, 1 = 79. Write Sequence ........................................................., 1 = 85. Writing",
    "PIC18F2525/2620/4525/4620\n......................................................................., 1 = 85. Protection Against Spurious Unexpected Termination, 1 = Writes ................... 87 ................................... 87. Write Verify ........................................................, 1 = 87. FSCM. See Fail-Safe Clock Monitor., 1 = . G, 1 = . GOTO, 1 =",
    "PIC18F2525/2620/4525/4620\n.............................................................................. 288. H, 1 = . Hardware Multiplier, 1 = ............................................................ 89. Introduction Operation, 1 = ................................................................ 89 89.",
    "PIC18F2525/2620/4525/4620\n................................................................... Performance Comparison, 1 = .......................................... 89",
    "PIC18F2525/2620/4525/4620\nHigh/Low-Voltage Detect, 1 = ................................................. 243. Applications .............................................................., 1 = 246. Associated Registers, 1 = ............................................... 247. Characteristics, 1 =",
    "PIC18F2525/2620/4525/4620\n......................................................... 339. Current Consumption, 1 = ............................................... 245. Effects of a Reset ....................................................., 1 = 247. Operation .................................................................,",
    "PIC18F2525/2620/4525/4620\n1 = 244. During Sleep, 1 = .................................................... 247. Setup ........................................................................, 1 = 245. Start-up Time, 1 = ........................................................... 245. Typical Application",
    "PIC18F2525/2620/4525/4620\n..................................................., 1 = 246. HLVD. See High/Low-Voltage Detect., 1 = ............................. 243. I, 1 = . Ports ............................................................................., 1 = . I/O, 1 = 91. I 2 C Mode (MSSP), 1 = . Acknowledge Sequence Timing, 1 =",
    "PIC18F2525/2620/4525/4620\n............................... 194. Baud Rate Generator Bus Collision, 1 = ............................................... 187. During a Repeated Start Condition, 1 = .................. 198. During a Start Condition, 1 = ................................... 196. During a Stop Condition, 1 = ................................... 199. Clock Arbitration",
    "PIC18F2525/2620/4525/4620\n....................................................... ......................................................., 1 = 188. Clock Stretching, 1 = 180. 10-Bit Slave Receive Mode (SEN = 1), 1 = ............. 180. 10-Bit Slave Transmit Mode ............................., 1 = 180. 7-Bit Slave Receive Mode (SEN = 1), 1 = ............... 180. 7-Bit Slave Transmit Mode",
    "PIC18F2525/2620/4525/4620\n............................... Clock Synchronization and the CKP bit, 1 = 180. (SEN = 1), 1 = ......................................................... 181. Effects of a Reset, 1 = ..................................................... 195. General Call Address Support, 1 = ................................. 184. I 2 C Clock Rate w/BRG, 1 =",
    "PIC18F2525/2620/4525/4620\n............................................. 187. Master Mode, 1 = ............................................................ 185. Operation, 1 = ......................................................... 186. Reception ........................................................., 1 = 191. Repeated Start",
    "PIC18F2525/2620/4525/4620\nCondition Timing, 1 = ..................... 190 ...................................... Start Condition Timing Transmission, 1 = 189 191. Multi-Master Communication, Bus Collision, 1 = ..................................................... and Arbitration, 1 = .................................................. 195. Multi-Master Mode",
    "PIC18F2525/2620/4525/4620\n..................................................., 1 = 195. Operation ................................................................., 1 = 174. Read/Write Bit Information (R/W Bit), 1 = ............... 174, 175. Registers .................................................................., 1 = 170. Serial Clock",
    "PIC18F2525/2620/4525/4620\n(RC3/SCK/SCL), 1 = ................................... 175. Slave Mode .............................................................., 1 = 174. Addressing, 1 = ....................................................... 174. Reception ........................................................., 1 = 175",
    "PIC18F2525/2620/4525/4620\n175. Sleep Operation ......................................................., 1 = 195. Stop Condition Timing, 1 = .............................................. 194. ID Locations ............................................................., 1 = 249, 266",
    "PIC18F2525/2620/4525/4620\n.................................................................................. INCF INCFSZ, 1 = 288 ............................................................................. In-Circuit, 1 = 289. Debugger, 1 = .......................................................... 266.",
    "PIC18F2525/2620/4525/4620\nIn-Circuit Serial Programming (ICSP) Indexed Literal Offset Addressing, 1 = ...................... 249, 266. and Standard PIC18 Instructions, 1 = ............................. 314. Indexed Literal Offset Mode, 1 = ............................................. 314. Indirect Addressing, 1 = ............................................................ 68. INFSNZ",
    "PIC18F2525/2620/4525/4620\n............................................................................, 1 = 289. Initialization Conditions for all Registers, 1 = ...................... 49-52 ................................................................. 57. Clocking Scheme ....................................................... Instruction",
    "PIC18F2525/2620/4525/4620\nFlow/Pipelining, 1 = 57 ................................................. 57",
    "PIC18F2525/2620/4525/4620\nInstruction Set, 1 = .................................................................. 267. ADDLW, 1 = .................................................................... 273. ADDWF, 1 = .................................................................... 273. ADDWF (Indexed Literal Offset Mode), 1 =",
    "PIC18F2525/2620/4525/4620\n.................... 315. ADDWFC, 1 = ................................................................. 274. ANDLW, 1 = .................................................................... 274. ANDWF, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................... 275. BC ............................................................................, 1 = 275. BCF, 1 = ......................................................................... 276. BN",
    "PIC18F2525/2620/4525/4620\n............................................................................, 1 = 276. BNC, 1 = ......................................................................... 277. BNN, 1 = ......................................................................... 277.",
    "PIC18F2525/2620/4525/4620\nBNOV, 1 = ...................................................................... 278. BNZ, 1 = ......................................................................... 278. BOV, 1 = ......................................................................... 281. BRA, 1 =",
    "PIC18F2525/2620/4525/4620\n......................................................................... 279. BSF .........................................................................., 1 = 279. BSF (Indexed Literal Offset Mode), 1 = .......................... 315. BTFSC, 1 =",
    "PIC18F2525/2620/4525/4620\n..................................................................... 280. BTFSS, 1 = ..................................................................... 280. BTG, 1 = ......................................................................... 281. BZ",
    "PIC18F2525/2620/4525/4620\n............................................................................, 1 = 282. CALL, 1 = ........................................................................ 282. CLRF, 1 = ....................................................................... 283. CLRWDT,",
    "PIC18F2525/2620/4525/4620\n1 = ................................................................. 283. COMF ......................................................................, 1 = 284 .................................................................. 284. CPFSEQ CPFSGT, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 285. CPFSLT, 1 = ................................................................... 285. DAW ........................................................................, 1 = 286. DCFSNZ, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 287. DECF ......................................................................., 1 = 286. DECFSZ .................................................................., 1 = 287. Extended Instruction Set",
    "PIC18F2525/2620/4525/4620\n........................................., 1 = 309. General Format, 1 = ........................................................ 269. GOTO, 1 = ...................................................................... 288. INCF",
    "PIC18F2525/2620/4525/4620\n........................................................................, 1 = 288. INCFSZ, 1 = .................................................................... 289 .................................................................... 289. INFSNZ IORLW, 1 =",
    "PIC18F2525/2620/4525/4620\n..................................................................... 290. IORWF, 1 = ..................................................................... 290. LFSR, 1 = ....................................................................... 291. MOVF, 1 =",
    "PIC18F2525/2620/4525/4620\n...................................................................... 291. MOVFF, 1 = .................................................................... 292. MOVLB, 1 = .................................................................... 292. MOVLW, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................................... 293. MOVWF, 1 = ................................................................... 293 .................................................................... 294. MULLW, 1 =",
    "PIC18F2525/2620/4525/4620\n..................................................................... MULWF, 1 = 294 ........................................................................ NEGF, 1 = 295 295. NOP ......................................................................... Opcode Field Descriptions, 1 = 268. POP",
    "PIC18F2525/2620/4525/4620\n......................................................................... ......................................................................., 1 = ........................................ , 1 = 296 296. PUSH RCALL, 1 =",
    "PIC18F2525/2620/4525/4620\n...................................................................... , 1 = 297. RESET RETFIE, 1 = ..................................................................... 297 .................................................................... 298. RETLW, 1 = .",
    "PIC18F2525/2620/4525/4620\n...................................................................., 1 = 298 ................................................................... RETURN RLCF ......................................................................., 1 = 299 299. , 1 = 300. RLNCF RRCF",
    "PIC18F2525/2620/4525/4620\n......................................................................., 1 = ..................................................................... 300. , 1 = 301. RRNCF .................................................................... SETF, 1 = 301.",
    "PIC18F2525/2620/4525/4620\n....................................................................... SETF (Indexed Literal Offset Mode), 1 = ........................ 315",
    "PIC18F2525/2620/4525/4620\nSLEEP, 1 = ..................................................................... 302. SUBFWB, 1 = .................................................................. 302. SUBLW, 1 = .................................................................... 303. SUBWF, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................... 303. SUBWFB, 1 = .................................................................. 304. SWAPF, 1 = .................................................................... 304. TBLRD, 1 =",
    "PIC18F2525/2620/4525/4620\n..................................................................... 305. TBLWT, 1 = ..................................................................... 306. TSTFSZ, 1 = ................................................................... 307. XORLW, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................... 307. XORWF, 1 = .................................................................... 308. INTCON Registers, 1 = ................................................... 111-113. Inter-Integrated Circuit. See I 2 C., 1 = . Internal Oscillator Block",
    "PIC18F2525/2620/4525/4620\n....................................................., 1 = 26. Adjustment, 1 = ................................................................. 26. INTIO Modes, 1 = .............................................................. 26. INTOSC Frequency Drift",
    "PIC18F2525/2620/4525/4620\n............................................, 1 = 26. INTOSC Output Frequency, 1 = ........................................ 26. OSCTUNE Register, 1 = ................................................... 26. PLL in INTOSC Modes, 1 = .............................................. 26. Internal RC Oscillator, 1 = . Use with WDT, 1 =",
    "PIC18F2525/2620/4525/4620\n.......................................................... 258. Internet Address, 1 = ............................................................... 407. Interrupt Sources, 1 = ............................................................. 249. A/D Conversion Complete, 1 =",
    "PIC18F2525/2620/4525/4620\n....................................... 227. Capture Complete (CCP) ........................................., 1 = 141. Compare Complete (CCP), 1 = ....................................... 142. Interrupt-on-Change (RB7:RB4) INTx Pin ..................................................................., 1 =",
    "PIC18F2525/2620/4525/4620\n................................ 94 121. PORTB, Interrupt-on-Change, 1 = .................................. 121. TMR0 ......................................................................., 1 = 121. TMR0 Overflow, 1 = ........................................................ 125. TMR1 Overflow, 1 = 127.",
    "PIC18F2525/2620/4525/4620\n........................................................ TMR2 to PR2 Match (PWM), 1 = ............................ 144, 149. TMR3 Overflow ................................................, 1 = 135, 137. Interrupts ..........................................................................",
    "PIC18F2525/2620/4525/4620\nInterrupts, Flag, 1 = 109. Bits Interrupt-on-Change, 1 = . INTOSC, INTRC. See Internal Oscillator Block. IORLW ............................................................................., 1 = 290. IORWF ............................................................................., 1 = 290. IPR Registers, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................................... 118. L, 1 = . LFSR ................................................................................ Low-Voltage ICSP Programming., 1 = 291. M, 1 = . Master Synchronous Serial Port (MSSP). See MSSP. Memory Organization",
    "PIC18F2525/2620/4525/4620\n........................................................., 1 = 53. Data Memory, 1 = ............................................................. 59. Program Memory, 1 = ....................................................... 53. Memory Programming Requirements, 1 = .............................. 337. Microchip Internet Web Site",
    "PIC18F2525/2620/4525/4620\n............................................., 1 = 407. Migration from Baseline to Enhanced Devices, 1 = ................ 395. Migration from High-End to Enhanced Devices, 1 = ............... 396. Migration from Mid-Range to, 1 = Enhanced Devices ............ 396. MOVF ..............................................................................., 1 = 291 292. MOVFF, 1 =",
    "PIC18F2525/2620/4525/4620\n............................................................................. MOVLB, 1 = ............................................................................ 292 293. MOVLW MOVSF, 1 =",
    "PIC18F2525/2620/4525/4620\n........................................................................... ............................................................................ 311. MOVSS, 1 = ............................................................................ 312",
    "PIC18F2525/2620/4525/4620\nMOVWF, 1 = ........................................................................... 293. MPLAB ASM30 Assembler, Linker, Librarian .................., 1 = 318. MPLAB ICD 2 In-Circuit Debugger .................................., 1 = 319. MPLAB ICE 2000 High-Performance Universal In-Circuit Emulator ..................................................., 1 = 319. MPLAB Integrated Development",
    "PIC18F2525/2620/4525/4620\nEnvironment Software ............................................., 1 = 317. MPLAB PM3 Device Programmer, 1 = 319. ................................... MPLAB REAL ICE In-Circuit Emulator System, 1 = ............... 319. MPLINK Object Linker/MPLIB Object Librarian, 1 = ............... 318. MSSP, 1 = . ACK Pulse, 1 = 174, 175. ....................................................... Control Registers (general), 1 =",
    "PIC18F2525/2620/4525/4620\n..................................... 161. I 2 C Mode. See I 2 C Mode. Module Overview, 1 = ..................................................... 161. SPI Master/Slave Connection, 1 = .................................. 165. SPI Mode. See SPI Mode. SSPBUF Register ...................................................., 1 = 166. SSPSR Register, 1 =",
    "PIC18F2525/2620/4525/4620\n...................................................... 166. MULLW ............................................................................, 1 = 294. MULWF, 1 = ............................................................................ 294. N, 1 = . NEGF, 1 = 295.",
    "PIC18F2525/2620/4525/4620\n............................................................................... NOP ................................................................................., 1 = 295. Oscillator Configuration EC, 1 = ..................................................... 23",
    "PIC18F2525/2620/4525/4620\n.............................................................................. 23 23. ECIO, 1 = ........................................................................... HS .............................................................................., 1",
    "PIC18F2525/2620/4525/4620\n= 23. HSPLL, 1 = ....................................................................... 23. Internal Oscillator Block, 1 = ............................................. 26. INTIO1, 1 = ....................................................................... 23",
    "PIC18F2525/2620/4525/4620\n........................................................................ INTIO2, 1 = 23. LP, 1 = .............................................................................. 23. RC, 1 =",
    "PIC18F2525/2620/4525/4620\n............................................................................. 23. RCIO, 1 = .......................................................................... 23. XT .............................................................................., 1",
    "PIC18F2525/2620/4525/4620\n= 23. Oscillator Selection .......................................................... Oscillator Start-up Timer (OST), 1 = 249. ..........................................................., 1 = ................................... 31, 45. Oscillator Switching, 1 = 28. Oscillator Transitions",
    "PIC18F2525/2620/4525/4620\n....................................................., 1 = ......................................................... 29. Oscillator, Timer1, 1 = 127, 137. Oscillator, Timer3, 1 = ............................................................. 135. P, 1 = . Packaging Information, 1 =",
    "PIC18F2525/2620/4525/4620\n..................................................... 383. Details, 1 = 385. ...................................................................... Marking, 1 = .................................................................... 383. Parallel Slave Port (PSP)",
    "PIC18F2525/2620/4525/4620\n........................................., 1 = 100, 106. Associated Registers, 1 = ............................................... 107. CS (Chip Select) ...................................................................., 1 = ...................................................... 106 106. PORTD, 1 = . RD",
    "PIC18F2525/2620/4525/4620\n(Read Input) ......................................................, 1 = 106 100,. Select (PSPMODE Bit), 1 = .................................... 106 106. WR (Write Input) ......................................................, 1 = 320. PICSTART Plus Development Programmer",
    "PIC18F2525/2620/4525/4620\n..................................................................., 1 = ..................... PIE Registers, 1 = 116. Pin Functions MCLR/VPP/RE3, 1 = 12, 16. ................................................... OSC1/CLKI/RA7 .................................................., 1 = 12, 16. OSC2/CLKO/RA6,",
    "PIC18F2525/2620/4525/4620\n1 = ................................................ 12, 16. RA0/AN0, 1 = .............................................................. 13, 17. RA1/AN1 .............................................................., 1 = 13, 17. RA2/AN2/VREF-/CVREF",
    "PIC18F2525/2620/4525/4620\n......................................., 1 = 13, 17",
    "PIC18F2525/2620/4525/4620\nRA3/AN3/VREF+, 1 = ................................................... 13, 17. RA4/T0CKI/C1OUT .............................................., 1 = 13, 17. RA5/AN4/SS/HLVDIN/C2OUT, 1 = ............................. 13, 17. RB0/INT0/FLT0/AN12 .........................................., 1 = 14, 18.",
    "PIC18F2525/2620/4525/4620\nRB1/INT1/AN10, 1 = ................................................... 14, 18. RB2/INT2/AN8, 1 = ..................................................... 14, 18. RB3/AN9/CCP2, 1 = ................................................... 14, 18. RB4/KBI0/AN11, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................... 14, 18. RB5/KBI1/PGM, 1 = .................................................... 14, 18. RB6/KBI2/PGC, 1 = .................................................... 14, 18. RB7/KBI3/PGD",
    "PIC18F2525/2620/4525/4620\n...................................................., 1 = 14, 18. RC0/T1OSO/T13CKI, 1 = ........................................... 15, 19. RC1/T1OSI/CCP2, 1 = ................................................ 15, 19. RC2/CCP1, 1 =",
    "PIC18F2525/2620/4525/4620\n................................................................. 15. RC2/CCP1/P1A, 1 = ......................................................... 19. RC3/SCK/SCL, 1 = ..................................................... 15, 19. RC4/SDI/SDA, 1 =",
    "PIC18F2525/2620/4525/4620\n...................................................... 15, 19. RC5/SDO, 1 = ............................................................. 15, 19. RC6/TX/CK, 1 = .......................................................... 15, 19. RC7/RX/DT, 1 =",
    "PIC18F2525/2620/4525/4620\n.......................................................... 15, 19. RD0/PSP0, 1 = .................................................................. 20. RD1/PSP1, 1 = .................................................................. 20. RD2/PSP2, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 20. RD3/PSP3, 1 = .................................................................. 20. RD4/PSP4, 1 = .................................................................. 20. RD5/PSP5/P1B, 1 =",
    "PIC18F2525/2620/4525/4620\n.......................................................... 20. RD6/PSP6/P1C, 1 = .......................................................... 20. RD7/PSP7/P1D, 1 = .......................................................... 20. RE0/RD/AN5, 1 =",
    "PIC18F2525/2620/4525/4620\n.............................................................. 21. RE1/WR/AN6, 1 = ............................................................. 21. RE2/CS/AN7, 1 = .............................................................. 21. VDD",
    "PIC18F2525/2620/4525/4620\n......................................................................., 1 = 15,. VSS, 1 = . Pinout I/O, 1 = 21 15, 21. ....................................................................... Descriptions PIC18F2525/2620, 1 = ...................................................... 12",
    "PIC18F2525/2620/4525/4620\n...................................................... 16. PIR Registers ................................................................... PLL Frequency Multiplier, 1 = 114 ................................................... 25. HSPLL Oscillator Mode, 1 =",
    "PIC18F2525/2620/4525/4620\n.............................................. 25. Use with INTOSC, 1 = 25. ......................................................., 1 = . POP .................................................................................. POR. See Power-on Reset., 1 = 296. Associated Registers LATA Register",
    "PIC18F2525/2620/4525/4620\n............................................................ PORTA Register ........................................................, 1 = ................................................. 93 91 91 91. TRISA Register .........................................................., 1 = .",
    "PIC18F2525/2620/4525/4620\nPORTB Associated Registers, 1 = ................................................. 96 ............................................................ 94. PORTB Register ........................................................ RB7:RB4 Interrupt-on-Change, 1 = . , 1 = 94. Flag (RBIF Bit)",
    "PIC18F2525/2620/4525/4620\n........................................................... .........................................................., 1 = 94. TRISB Register, 1 = 94. PORTC Associated Registers, 1 = ................................................. 99. LATC Register",
    "PIC18F2525/2620/4525/4620\n........................................................... PORTC Register ........................................................, 1 = 97 97 175. RC3/SCK/SCL Pin, 1 = . TRISC Register .........................................................., 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................... PORTD, 1 = 97. , 1 = ............................................... 102 ......................................................... 100. Associated Registers LATD Register, 1 = .......................... 100. Parallel Slave Port (PSP) Function PORTD Register",
    "PIC18F2525/2620/4525/4620\n......................................................, 1 = 100",
    "PIC18F2525/2620/4525/4620\nPORTE, 100 = ......................................................... Associated Registers, 100 = ............................................... 105. LATE Register, 100 = ......................................................... 103. PORTE Register ......................................................, 100 = 103. PSP",
    "PIC18F2525/2620/4525/4620\nMode Select (PSPMODE Bit), 100 = .......................... 100. TRISE Register, 100 = ........................................................ 103. Power-Managed Modes, 100 = ..................................................... 33. and A/D Operation, 100 = ................................................... 230. and EUSART Operation, 100 =",
    "PIC18F2525/2620/4525/4620\n.......................................... 205. and PWM Operation, 100 = ................................................ 159. and SPI Operation, 100 = ................................................... 169. Clock Sources ............................................................, 100 = 33. Clock Transitions and Status Indicators, 100 =",
    "PIC18F2525/2620/4525/4620\n.................... 34. Effects on Clock Sources ..........................................., 100 = 31. Entering ....................................................................., 100 = 33. Exiting Idle and Sleep Modes Interrupt ........................................................, 100 =",
    "PIC18F2525/2620/4525/4620\n.................................... 39. By, 100 = 39. By Reset, 100 = ............................................................ 39. By WDT Time-out .............................................., 100 = 39. Without an Oscillator Start-up Delay, 100 = ................. 40. Idle Modes",
    "PIC18F2525/2620/4525/4620\n................................................................., 100 = 37. PRI_IDLE, 100 = ........................................................... 38. RC_IDLE, 100 = ........................................................... 39. SEC_IDLE, 100 =",
    "PIC18F2525/2620/4525/4620\n......................................................... 38. Multiple Sleep Commands Run Modes ................................................................, 100 = ......................................... 34 34. PRI_RUN, 100 = ........................................................... 34.",
    "PIC18F2525/2620/4525/4620\nRC_RUN ............................................................, 100 = 35. SEC_RUN, 100 = ......................................................... 34. Selecting ...................................................................., 100 = 33. Sleep Mode, 100 =",
    "PIC18F2525/2620/4525/4620\n............................................................... 37. Summary (table), 100 = ........................................................ 33 43. Power-on Reset (POR) ......................................................, 100 = ........................................... 45.",
    "PIC18F2525/2620/4525/4620\nPower-up Timer (PWRT) Time-out Sequence ..................................................., 100 = 45. Power-up Delays ..............................................................., 100 = 31. Power-up Timer (PWRT), 100 = . , 100 = ................................................... 31. Prescaler, 100 = . Timer2, 100 =",
    "PIC18F2525/2620/4525/4620\n..................................................................... 150. Prescaler, Timer0, 100 = ............................................................ 125. Prescaler, Timer2, 100 = ............................................................ 145. PRI_IDLE Mode, 100 =",
    "PIC18F2525/2620/4525/4620\n................................................................. 38. PRI_RUN Mode, 100 = ................................................................. 34. Program Counter, 100 = ............................................................... 54. PCL, PCH and PCU Registers, 100 =",
    "PIC18F2525/2620/4525/4620\n.................................. 54. PCLATH and PCLATU Registers, 100 = .............................. 54. Program Memory, 100 = . And Extended Instruction Set, 100 = .................................... 71. Instructions ................................................................, 100 = 58. Two-Word, 100 =",
    "PIC18F2525/2620/4525/4620\n.......................................................... 58. Interrupt Vector, 100 = 53. .......................................................... Look-up Tables .........................................................., 100 = 56. Map and Stack (diagram) .........................................., 100",
    "PIC18F2525/2620/4525/4620\n= 53. Reset Vector .............................................................., 100 = 53. Program Verification ........................................................, 100 = 263. Programming, Device Instructions, 100 = ................................... 267. PSP. See Parallel Slave Port. Pulse-Width Modulation. See PWM (CCP Module) and PWM (ECCP Module)., 100 = 296. PUSH",
    "PIC18F2525/2620/4525/4620\n............................................................................... PUSH and POP Instructions, 100 = .............................................. 55. PUSHL ............................................................................., 100 = 312",
    "PIC18F2525/2620/4525/4620\nPWM (CCP Module), 1 = . Associated Registers ..............................................., 1 = 146. Auto-Shutdown (CCP1 Only) ..................................., 1 = 145. Duty Cycle ................................................................, 1 = 144. Example Frequencies/Resolutions, 1 = .......................... 145. Operation Setup",
    "PIC18F2525/2620/4525/4620\n......................................................., 1 = 145. Period ......................................................................., 1 = 144. TMR2 to PR2 Match ........................................, 1 = 144, 149. PWM (ECCP Module)",
    "PIC18F2525/2620/4525/4620\n...................................................... CCPR1H:CCPR1L Registers, 1 = 149. Duty Cycle ................................................................, 1 = ................................... 149 150. , 1 = 159. Effects of a Reset ....................................................., 1 =",
    "PIC18F2525/2620/4525/4620\n156. Enhanced PWM Auto-Shutdown, 1 = ............................. .......................... 150. Example Frequencies/Resolutions Full-Bridge Application Example, 1 = .............................. 154. Full-Bridge Mode ......................................................, 1 = 153. Direction Change, 1 = 154. ............................................., 1 = 152. Half-Bridge Mode",
    "PIC18F2525/2620/4525/4620\n..................................................... Half-Bridge Output Mode Applications Example, 1 = ...... 152. Operation in Power-Managed Modes, 1 = 159. ...................... Clock Monitor, 1 = ................... 159. Operation with Fail-Safe, 1 = . Output Configurations .............................................., 1 = 150. Output Relationships (Active-High) .........................., 1 = 151 151. Output Relationships (Active-Low)",
    "PIC18F2525/2620/4525/4620\n..........................., 1 = 149. Period ....................................................................... ............................, 1 = 156. Programmable Dead-Band Delay ........................................, 1 = . Setup for PWM Operation Start-up Considerations ..........................................., 1",
    "PIC18F2525/2620/4525/4620\n= 159 158. Q, 1 = . Q Clock ...................................................................., 1 = 145, 150. R, 1 = . RAM. See Data Memory. RBIF Bit, 1 = .............................................................................. 94. RC Oscillator, 1 =",
    "PIC18F2525/2620/4525/4620\n...................................................................... 25. RCIO Oscillator Mode RC_IDLE Mode .................................................................., 1 = ................................................ 25 39. RC_RUN Mode, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................................. 35. RCALL ............................................................................., 1 = 297. RCON Register Bit Status During Initialization, 1 = .................. 48. Reader Response, 1 =",
    "PIC18F2525/2620/4525/4620\n............................................................ 408. Register File ......................................................................., 1 = 61. Registers, 1 = . ADCON0 (A/D Control 0), 1 = ......................................... 223. ADCON1 (A/D Control 1), 1 =",
    "PIC18F2525/2620/4525/4620\n......................................... 224. ADCON2 (A/D Control 2), 1 = ......................................... 225. BAUDCON (Baud Rate Control), 1 = .............................. 204. CCP1CON (ECCP Control, 40/44-Pin Devices) .........................................., 1 = 147. CCPxCON (CCPx Control, 28-Pin Devices), 1 = ............ 139.",
    "PIC18F2525/2620/4525/4620\nCONFIG1H (Configuration 1 High), 1 = .......................... 250. CONFIG2H (Configuration 2 High), 1 = .......................... 252. CONFIG2L (Configuration 2 Low), 1 = ............................ 251. , 1 = 253. CONFIG3H (Configuration 3 High), 1 = .......................... ............................. CONFIG4L (Configuration 4 Low), 1 = 253 .......................... 254.",
    "PIC18F2525/2620/4525/4620\nCONFIG5H (Configuration 5 High) CONFIG5L (Configuration 5 Low), 1 = ............................ 254. CONFIG6H (Configuration 6 High), 1 = 255. CONFIG6L (Configuration 6 Low) CONFIG7H (Configuration 7 High), 1 = .......................... ............................ 255. Low), 1 = .......................... 256 ............................ 256. CONFIG7L (Configuration 7, 1 = . CVRCON (Comparator Voltage Reference Control)",
    "PIC18F2525/2620/4525/4620\n.........................................., 1 = 239",
    "PIC18F2525/2620/4525/4620\nDEVID1 (Device ID 1), 1 = .............................................. 257. DEVID2 (Device ID 2) .............................................., 1 = 257. ECCP1AS (ECCP Auto-Shutdown Control) ............, 1 = 157. EECON1 (EEPROM Control 1) ..........................., 1 = 74, 81. HLVDCON (High/Low-Voltage Detect Control), 1 = ....... 243. INTCON (Interrupt Control)",
    "PIC18F2525/2620/4525/4620\n....................................., 1 = 111. INTCON2 (Interrupt Control 2), 1 = ................................ 112. INTCON3 (Interrupt Control 3), 1 = ................................ 113. IPR1 (Peripheral Interrupt Priority 1), 1 = ....................... 118. IPR2 (Peripheral Interrupt Priority 2), 1 = ....................... 119. OSCCON (Oscillator Control), 1 =",
    "PIC18F2525/2620/4525/4620\n.................................... 30. OSCTUNE (Oscillator Tuning), 1 = ................................... 27. PIE1 (Peripheral Interrupt Enable 1), 1 = ....................... 116. PIE2 (Peripheral Interrupt Enable 2) ......................., 1 = 117. PIR1 (Peripheral Interrupt Request (Flag) 1), 1 = ........... 114. PIR2 (Peripheral Interrupt Request (Flag) 2), 1 = ........... 115. PWM1CON (PWM Configuration), 1 =",
    "PIC18F2525/2620/4525/4620\n........................... 156. RCON (Reset Control) ......................................., 1 = 42, 120. RCSTA (Receive Status and Control), 1 = ..................... 203. SSPCON1 (MSSP Control 1, I 2 C Mode), 1 = ................. 172. SSPCON1 (MSSP Control 1, SPI Mode), 1 = ................ 163. SSPCON2 (MSSP Control 2, I 2 C Mode), 1 = ................. 173. SSPSTAT (MSSP Status, I 2 C Mode)",
    "PIC18F2525/2620/4525/4620\n......................, 1 = 171. SSPSTAT (MSSP Status, SPI Mode), 1 = ...................... 162. STATUS, 1 = .................................................................... 66. STKPTR (Stack Pointer), 1 = ............................................ 55. T0CON (Timer0 Control), 1 =",
    "PIC18F2525/2620/4525/4620\n......................................... 123. T1CON (Timer1 Control), 1 = ......................................... 127. T2CON (Timer2 Control), 1 = ......................................... 133. T3CON (Timer3 Control) ........................................., 1 = 135. TRISE (PORTE/PSP Control)",
    "PIC18F2525/2620/4525/4620\n................................., 1 = 104. TXSTA (Transmit Status and Control) ....................., 1 = 202. WDTCON (Watchdog Timer Control) ......................, 1 = 259. RESET ............................................................................., 1 = 297. Reset State of Registers, 1 =",
    "PIC18F2525/2620/4525/4620\n.................................................... 48. Resets ....................................................................... Brown-out Reset (BOR) ..........................................., 1 = 41, 249 249. Oscillator Start-up Timer (OST), 1 = ............................... 249. Power-on Reset (POR)",
    "PIC18F2525/2620/4525/4620\n............................................, 1 = 249. Power-up Timer (PWRT) ............................................................................, 1 = ......................................... 249 298. RETFIE RETLW, 1 = 298.",
    "PIC18F2525/2620/4525/4620\n............................................................................ RETURN, 1 = 299. .......................................................................... Return Address Stack ........................................................, 1 = 54. Associated Registers",
    "PIC18F2525/2620/4525/4620\n................................................., 1 = 54. Return Stack Pointer (STKPTR) History ..............................................................., 1 = ........................................ 55. Revision, 1 = 393 299. RLCF",
    "PIC18F2525/2620/4525/4620\n............................................................................... RLNCF ............................................................................., 1 = 300. RRCF",
    "PIC18F2525/2620/4525/4620\n..............................................................................., 1 = 300. , 1 = 301. RRNCF ............................................................................, 1 = . S, 1 = . SCK",
    "PIC18F2525/2620/4525/4620\n................................................................................., 1 = 161. SDI ..................................................................................., 1 = 161. SDO",
    "PIC18F2525/2620/4525/4620\n................................................................................., 1 = 161. SEC_IDLE Mode, 1 = ............................................................... 38. SEC_RUN Mode, 1 = ................................................................ 34. Serial Clock, SCK",
    "PIC18F2525/2620/4525/4620\n............................................................, 1 = 161. Serial Data In (SDI) .........................................................., 1 = 161. Serial Data Out (SDO) ....................................................., 1 = 161. Serial Peripheral Interface. See SPI Mode.",
    "PIC18F2525/2620/4525/4620\n..............................................................................., 1 = . SETF, 1 = 301. Single-Supply ICSP Programming. ............................................................., 1 = 161. Slave Select (SS) SLEEP",
    "PIC18F2525/2620/4525/4620\n............................................................................., 1 = 302",
    "PIC18F2525/2620/4525/4620\nOSC1 and OSC2 Pin States Software Simulator (MPLAB SIM) ...................................., ...................................... 31 = 318. Special Event Trigger. See Compare (ECCP Mode). Special Event Trigger. See Compare (ECCP Module)., ...................................... 31 = . Special Features of the CPU ............................................,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = 249. Special Function Registers, ...................................... 31 = ................................................ 62. Map, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n............................................................................ 62. SPI Mode (MSSP), ...................................... 31 = . Associated Registers ..............................................., ...................................... 31 = 169. Bus Mode Compatibility,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ........................................... 169. Effects of a Reset ....................................................., ...................................... 31 = 169. Enabling SPI I/O, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n...................................................... 165. Master Mode, ...................................... 31 = ............................................................ 166. Master/Slave Connection, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n......................................... 165. Operation, ...................................... 31 = ................................................................. 164. Operation in Power-Managed Modes, ...................................... 31 = ...................... 169. Serial Clock,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = .............................................................. 161. Serial Data In ..........................................................., ...................................... 31 = 161. Serial Data Out,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ........................................................ 161. Slave Mode .............................................................., ...................................... 31 = 167. Slave Select,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ............................................................. 161. Slave Select Synchronization, ...................................... 31 = .................................. 167. SPI Clock, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n................................................................. 166. Typical Connection, ...................................... 31 = .................................................. 165. SS",
    "PIC18F2525/2620/4525/4620\n...................................................................................., ...................................... 31 = 161. SSPOV .............................................................................,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = 191. SSPOV Status Flag SSPSTAT Register, ...................................... 31 = .......................................................... 191. R/W Bit .............................................................,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = 174, 175. Stack Full/Underflow Resets Standard Instructions ......................................................., ...................................... 31 = .............................................. 56 267. STATUS Register, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n............................................................... 66. SUBFSR, ...................................... 31 = ............................................................................ , ...................................... 31 = 313. SUBFWB,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = .......................................................................... 302. SUBLW ............................................................................, ...................................... 31 = 303. SUBULNK,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ........................................................................ 313. SUBWF ............................................................................, ...................................... 31 = 303. SUBWFB,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = .......................................................................... 304. SWAPF, ...................................... 31 = ............................................................................ 304. T,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = . Table Reads/Table Writes, ...................................... 31 = .................................................. 56. TBLRD, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n............................................................................. 305. TBLWT ............................................................................., ...................................... 31 = 306. Time-out in Various Situations (table),",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ................................ 45. Timer0 .............................................................................., ...................................... 31 = 123. Associated Registers, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n............................................... 125. Operation, ...................................... 31 = ................................................................. 124. Overflow Interrupt, ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n.................................................... 125. Prescaler .................................................................., ...................................... 31 = 125. Prescaler Assignment (PSA Bit) .............................. Prescaler Select (T0PS2:T0PS0 Bits),",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = 125 125. Prescaler. See Prescaler, Timer0., ...................................... 31 = . Reads and Writes in 16-Bit Mode, ...................................... 31 = ............................ 124. Source Edge Select (T0SE Bit), ...................................... 31 =",
    "PIC18F2525/2620/4525/4620\n................................ 124. Source Select (T0CS Bit) ........................................., ...................................... 31 = 124. Switching Prescaler Assignment, ...................................... 31 = .............................. 125. Timer1",
    "PIC18F2525/2620/4525/4620\n.............................................................................., ...................................... 31 = 127. , ...................................... 31 = ........................................... 129. 16-Bit Read/Write Mode Associated Registers,",
    "PIC18F2525/2620/4525/4620\n...................................... 31 = ............................................... 131. Interrupt ...................................................................., ...................................... 31 = 130. Operation, ...................................... 31",
    "PIC18F2525/2620/4525/4620\n= ................................................................. 128 127, 129. Oscillator .......................................................... Layout Considerations, ...................................... 31 = ..................................... 130. Low-Power Option",
    "PIC18F2525/2620/4525/4620\n..........................................., ...................................... 31 = 129",
    "PIC18F2525/2620/4525/4620\nOverflow Interrupt ...................................................., 1 = 127. Resetting, Using the CCP Special Event Trigger, 1 = .... 130. Special Event Trigger (ECCP) ................................., 1 = 148. TMR1H Register ......................................................, 1 = 127. TMR1L Register",
    "PIC18F2525/2620/4525/4620\n......................................................., 1 = 127. Use as a Real-Time Clock ......................................., 1 = 130. Timer2 .............................................................................., 1 = 133. Associated Registers",
    "PIC18F2525/2620/4525/4620\n............................................... ..................................................................., 1 = 134 134. Interrupt Operation ................................................................., 1 = 133. Output",
    "PIC18F2525/2620/4525/4620\n......................................................................, 1 = 134. PR2 Register ..................................................., 1 = 144, 149. TMR2 to PR2 Match Interrupt .........................., 1 = 144, 149. Timer3",
    "PIC18F2525/2620/4525/4620\n.............................................................................., 1 = 135. 16-Bit Read/Write Mode, 1 = .......................................... 137. Associated Registers ..............................................., 1 = 137. Operation",
    "PIC18F2525/2620/4525/4620\n................................................................. Oscillator, 1 = 136 135, 137. .........................................................., 1 = 135, 137. Overflow Interrupt ............................................, 1 = . Special Event Trigger (CCP), 1 = ................................... 137.",
    "PIC18F2525/2620/4525/4620\nTMR3H Register ......................................................, 1 = 135. TMR3L Register ......................................................., 1 = 135. Timing Diagrams, 1 = . A/D Conversion ........................................................, 1 = 360. Acknowledge Sequence, 1 =",
    "PIC18F2525/2620/4525/4620\n.......................................... 194. Asynchronous Reception ........................................., 1 = 214. Asynchronous Transmission, 1 = .................................... 212. Asynchronous Transmission (Back to Back) ................................................., 1 = 212. Automatic Baud Rate Calculation Auto-Wake-up Bit (WUE) During Normal Operation",
    "PIC18F2525/2620/4525/4620\n............................................, 1 = ............................ 210 215. Auto-Wake-up Bit (WUE) During Sleep ..................., 1 = 215. Baud Rate Generator with Clock Arbitration, 1 = ............ 188. BRG Overflow Sequence ........................................., 1 = 210. BRG Reset Due to SDA Arbitration During Start Condition ....................................., 1 = 197",
    "PIC18F2525/2620/4525/4620\n345. Brown-out Reset (BOR) ........................................... Bus Collision During a Repeated Start Condition (Case 1) .................................., 1 = 198. Bus Collision During a Repeated Start Condition (Case 2) .................................., 1 = 198. Bus Collision During a Start Condition (SCL = 0) ........................................., 1 = 197. Bus Collision During a Stop Condition (Case 1)",
    "PIC18F2525/2620/4525/4620\n..........................................., 1 = 199. Bus Collision During a Stop Condition (Case 2) ..........................................., 1 = 199. Bus Collision During Start Condition (SDA Only), 1 = 196. ...................................... Bus Collision for Transmit and Acknowledge CCP Modules) ............, 1 = .......... 195. Capture/Compare/PWM (All CLKO and I/O",
    "PIC18F2525/2620/4525/4620\n.........................................................., 1 = 347 344. Clock Synchronization ............................................. Clock/Instruction Cycle, 1 = 181 57. EUSART Synchronous, 1 = 359. .............................................. Receive (Master/Slave) ................................................. EUSART",
    "PIC18F2525/2620/4525/4620\nSynchronous, 1 = . Transmission (Master/Slave) ................................................. Example SPI Master Mode (CKE = 0), 1 = 358 ..................... 349. Example SPI Master Mode (CKE = 1) Example SPI Slave Mode (CKE = 0) ......................., 1 = ..................... 350 351. Example SPI Slave Mode (CKE = 1), 1 = 353. ....................... External Clock (All Modes Except PLL), 1 = .",
    "PIC18F2525/2620/4525/4620\n..................., 1 = 342. Fail-Safe Clock Monitor ..........................................., 1 = 262",
    "PIC18F2525/2620/4525/4620\nFirst Start Bit Timing, 1 = ................................................ 189. Full-Bridge PWM Output .........................................., 1 = 153. Half-Bridge PWM Output ........................................., 1 = 152. High/Low-Voltage Detect Characteristics ................, 1 = 339. High-Voltage Detect Operation (VDIRMAG = 1), 1 = ...... 246. I 2 C Bus Data",
    "PIC18F2525/2620/4525/4620\n............................................................, 1 = 354. I 2 C Bus Start/Stop Bits ............................................., 1 = 354. I 2 C Master Mode (7 or 10-Bit Transmission), 1 = ........... 192. I 2 C Master Mode (7-Bit Reception) .........................., 1 = 193. I 2 C Slave Mode (10-Bit Reception, SEN = 0), 1 = .......... 178. I 2 C Slave Mode (10-Bit Reception, SEN = 1), 1 =",
    "PIC18F2525/2620/4525/4620\n.......... 183. I 2 C Slave Mode (10-Bit Transmission) ....................., 1 = 179. I 2 C Slave Mode (7-Bit Reception, SEN = 0), 1 = ............ 176. I 2 C Slave Mode (7-Bit Reception, SEN = 1) 2 ......................., 1 = ............ 182. I C Slave Mode (7-Bit Transmission) I 2, 1 = 177. C Slave Mode General Call Address Sequence (7 or 10-Bit Address Mode), 1 = ............ 184. I 2 C Stop Condition Receive or Transmit Mode = 0), 1 = ........ 194. Low-Voltage Detect Operation (VDIRMAG, 1 = ...... 245. Master SSP I 2 C Bus Data",
    "PIC18F2525/2620/4525/4620\n........................................, 1 = 356. Master SSP I 2 C Bus Start/Stop Bits, 1 = ........................ 356. Parallel Slave Port (PIC18F4525/4620), 1 = ................... 348. Parallel Slave Port (PSP) Read ..............................., 1 = 107. Parallel Slave Port (PSP) Write ..............................., 1 = 107. PWM Auto-Shutdown (PRSEN = 0, Auto-Restart Disabled)",
    "PIC18F2525/2620/4525/4620\n...................................., 1 = 158. PWM Direction Change ........................................... PWM Direction Change at Near, 1 = 155. 100% Duty Cycle, 1 = 155. ............................................. PWM Output ............................................................, 1 = 144. Repeat Start Condition",
    "PIC18F2525/2620/4525/4620\n............................................. Start-up, 1 = 190. Reset, Watchdog Timer (WDT), Oscillator Timer (OST), Power-up Timer (PWRT) ..........., 1 = 345. Send Break Character Sequence Slave Synchronization ............................................., 1 = ............................ 216 167. Slow Rise Time (MCLR Tied to VDD, VDD Rise > TPWRT)",
    "PIC18F2525/2620/4525/4620\n............................................, 1 = 47. SPI Mode (Master Mode), 1 = ......................................... 166. SPI Mode (Slave Mode, CKE = 0) SPI Mode (Slave Mode, CKE =, 1 = ........................... 168. 1), 1 = 219. ........................... Synchronous Reception (Master Mode, SREN) Synchronous Transmission",
    "PIC18F2525/2620/4525/4620\n......................................, 1 = 168 ....... Synchronous Transmission (Through TXEN) Time-out Sequence on POR w/PLL Enabled, 1 = 217 ........... (MCLR Tied to VDD), 1 = 218. ........................................... Time-out Sequence on Power-up, 1 = 47. Time-out Sequence on Power-up (MCLR Not Tied to VDD, Case 2) ....................... Time-out Sequence on Power-up, 1 = 46. (MCLR Tied to VDD, VDD Rise < TPWRT), 1 = ........... 46.",
    "PIC18F2525/2620/4525/4620\nTimer0 and Timer1 External Clock .........................., 1 = 346 38. Transition for Entry to Idle Mode ................................ Transition for Entry to SEC_RUN, 1 = . Mode Transition for Entry to Sleep Mode ............................, 1 = .................... 35. Transition for Two-Speed Start-up, 1 = 37. (INTOSC to HSPLL) ........................................, 1 = . Transition for Wake from Idle to Run Mode Transition for Wake from Sleep (HSPLL)",
    "PIC18F2525/2620/4525/4620\n..................., 1 = 260 ............... 38 37. Transition from RC_RUN Mode to, 1 = 36. PRI_RUN Mode ................................................. Transition from SEC_RUN Mode to, 1 = . PRI_RUN Mode (HSPLL) .................................., 1 = 35",
    "PIC18F2525/2620/4525/4620\nTiming Diagrams and Specifications, 36 = ............................... 342. A/D Conversion Requirements, 36 = ................................ 360. Capture/Compare/PWM (CCP) Requirements, 36 = ........ 347. CLKO and I/O Requirements ..................................., 36 = 344. EUSART Synchronous Receive Requirements ......., 36 = 359. EUSART Synchronous Transmission Requirements, 36 = ..................................................",
    "PIC18F2525/2620/4525/4620\n358. Example SPI Mode Requirements (Master Mode, CKE = 0) .................................., 36 = 349. Example SPI Mode Requirements (Master Mode, CKE = 1) .................................., 36 = 350. Example SPI Mode Requirements (Slave Mode, CKE = 0) ...................................., 36 = 352. Example SPI Mode Requirements (Slave Mode, CKE = 1) ....................................",
    "PIC18F2525/2620/4525/4620\n.................................., 36 = 353. External Clock Requirements, 36 = 342. I 2 C Bus Data Requirements (Slave Mode), 36 = .............. 355. Master SSP I 2 C Bus Data Requirements, 36 = ................ 357. Master SSP I 2 C Bus Start/Stop Bits Requirements .................................................., 36 = 356. Parallel Slave Port Requirements (PIC18F4525/4620) ........................................., 36 = 348. PLL Clock, 36 =",
    "PIC18F2525/2620/4525/4620\n................................................................ 343. Reset, Watchdog Timer, Oscillator Start-up Timer, Power-up Timer and Brown-out Reset Requirements ........................................, 36 = 345. Timer0 and Timer1 External Clock Requirements .................................................., 36 = 346. Top-of-Stack Access TRISE Register, 36 =",
    "PIC18F2525/2620/4525/4620\n.......................................................... 54. PSPMODE Bit, 36 = ......................................................... 100. TSTFSZ ..........................................................................., 36 = 307. Two-Speed Start-up, 36 =",
    "PIC18F2525/2620/4525/4620\n................................................. 249, 260. Two-Word Instructions Example Cases, 36 = ......................................................... 58. TXSTA Register BRGH Bit, 36 = ................................................................. 205. Voltage Reference Specifications, 36 = .................................... 338.",
    "PIC18F2525/2620/4525/4620\nWatchdog Timer (WDT) ........................................... Associated Registers Control Register ......................................................., 36 = 249, 258. During Oscillator Failure Programming Considerations, 36 = . , 36 = 258. .........................................., 36 = 261. , 36 = .................................. 258. WCOL",
    "PIC18F2525/2620/4525/4620\n......................................................, 36 = 189, 190, 191, 194. WWWAddress, 36 = 407. , 36 = 308. XORWF, 36 = . XORLW, 36 = . , 36 = 5. X, 36 = . , 36 = 189, 190, 191, 194. WWW,, 36 = . , 36 = ....................................................... , 36 = 307.",
    "PIC18F2525/2620/4525/4620\n........................................................................... ..........................................................................., 36 = ...........................................................................",
    "PIC18F2525/2620/4525/4620\n............................................................................ , 36 = On-Line Support. WCOL Status Flag, 36 = WCOL Status Flag. ................................... ................................................................, 36 = ...................................",
    "PIC18F2525/2620/4525/4620\n................................................................\nNOTES:",
    "CUSTOMER SUPPORT\nMicrochip provides online support via our WWW site at www.microchip.com. This web site is used as a means to make  files and  information  easily available to customers. Accessible by using your favorite Internet browser, the web site contains the following information:\n\u00b7 Product Support - Data sheets and errata, application notes and sample programs, design resources, user's guides and hardware support documents, latest software releases and archived software\n\u00b7 General Technical Support - Frequently Asked Questions (FAQ), technical support requests, online discussion groups, Microchip consultant program member listing\n\u00b7 Business of Microchip - Product selector and ordering guides, latest Microchip press releases, listing of seminars and events, listings of Microchip sales offices, distributors and factory representatives",
    "CUSTOMER CHANGE NOTIFICATION SERVICE\nMicrochip's  customer  notification  service  helps  keep customers current on Microchip products. Subscribers will receive  e-mail  notification  whenever  there  are changes,  updates,  revisions  or  errata  related  to  a specified product family or development tool of interest.\nTo register, access the Microchip web site at www.microchip.com, click on Customer Change Notification and follow the registration instructions.\nUsers  of  Microchip  products  can  receive  assistance through several channels:\n\u00b7 Distributor or Representative\n\u00b7 Local Sales Office\n\u00b7 Field Application Engineer (FAE)\n\u00b7 Technical Support\n\u00b7 Development Systems Information Line\nCustomers should contact their distributor, representative  or  field  application  engineer  (FAE)  for support. Local sales offices are also available to help customers.  A  listing  of  sales  offices  and  locations  is included in the back of this document.\nTechnical support is available through the web site at: http://support.microchip.com",
    "READER RESPONSE\nIt is our intention to provide you with the best documentation possible to ensure successful use of your Microchip product.  If you wish to provide your comments on organization, clarity, subject matter, and ways in which our documentation can better serve you, please FAX your comments to the Technical Publications Manager at (480) 792-4150.\nPlease list the following information, and use this outline to provide us with your comments about this document.\nTo:\nTechnical Publications Manager\nRE:\nReader Response\nTotal Pages Sent ________\nFrom:\nName\nCompany\nAddress\nCity / State / ZIP / Country\nTelephone: (_______) _________ - _________\nApplication (optional):\nWould you like a reply?       Y         N\nDevice:  PIC18F2525/2620/4525/4620\nLiterature Number:  DS39626E\nQuestions:\nFAX: (______) _________ - _________\n1. What are the best features of this document?\n2. How does this document meet your hardware and software development needs?",
    "READER RESPONSE\n3. Do you find the organization of this document easy to follow? If not, why?\n4. What additions to the document do you think would enhance the structure and subject?\n5. What deletions from the document could be made without affecting the overall usefulness?\n6. Is there any incorrect or misleading information (what and where)?\n7. How would you improve this document?",
    "PIC18F2525/2620/4525/4620 PRODUCT IDENTIFICATION SYSTEM\nTo order or obtain information, e.g., on pricing or delivery, refer to the factory or the listed sales office.",
    "PIC18F2525/2620/4525/4620 PRODUCT IDENTIFICATION SYSTEM\nDevice, X Temperature Range = PIC18F2525/2620 (1) , PIC18F4525/4620 (1) , PIC18F2525/2620T (2) , PIC18F4525/4620T (2) ; VDD range 4.2V to 5.5V PIC18LF2525/2620 (1) , PIC18LF4525/4620 (1) , PIC18LF2525/2620T (2) , PIC18LF4525/4620T (2) ;. Device, /XX Package = PIC18F2525/2620 (1) , PIC18F4525/4620 (1) , PIC18F2525/2620T (2) , PIC18F4525/4620T (2) ; VDD range 4.2V to 5.5V PIC18LF2525/2620 (1) , PIC18LF4525/4620 (1) , PIC18LF2525/2620T (2) , PIC18LF4525/4620T (2) ;.",
    "PIC18F2525/2620/4525/4620 PRODUCT IDENTIFICATION SYSTEM\nDevice, XXX Pattern = PIC18F2525/2620 (1) , PIC18F4525/4620 (1) , PIC18F2525/2620T (2) , PIC18F4525/4620T (2) ; VDD range 4.2V to 5.5V PIC18LF2525/2620 (1) , PIC18LF4525/4620 (1) , PIC18LF2525/2620T (2) , PIC18LF4525/4620T (2) ;. Temperature Range, X Temperature Range = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Temperature Range, /XX Package = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Temperature Range, XXX Pattern = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Package, X Temperature Range = PT = TQFP (Thin",
    "PIC18F2525/2620/4525/4620 PRODUCT IDENTIFICATION SYSTEM\nQuad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Package, /XX Package = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Package, XXX Pattern = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Pattern, X Temperature Range = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, /XX Package = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, XXX Pattern = QTP, SQTP, Code or Special Requirements (blank otherwise)",
    "Examples:\na) PIC18LF4620-I/P 301 = Industrial temp., PDIP package, Extended VDD limits, QTP pattern #301.\nb) PIC18LF2620-I/SO = Industrial temp., SOIC package, Extended VDD limits.\nc) PIC18F4620-I/P = Industrial temp., PDIP package, normal VDD limits.\nNote 1:\nF\n=\nStandard Voltage Range\nLF =\nWide Voltage Range\n2:\nT\n=\nin tape and reel TQFP packages only.",
    "AMERICAS\nCorporate Office 2355 West Chandler Blvd. Chandler, AZ  85224-6199 Tel:  480-792-7200 Fax:  480-792-7277 Technical Support: http://support.microchip.com Web Address: www.microchip.com\nAtlanta Duluth, GA Tel: 678-957-9614 Fax: 678-957-1455",
    "Boston\nWestborough, MA Tel: 774-760-0087 Fax: 774-760-0088",
    "Chicago\nItasca, IL\nTel: 630-285-0071\nFax: 630-285-0075\nDallas Addison, TX Tel: 972-818-7423 Fax: 972-818-2924\nDetroit Farmington Hills, MI Tel: 248-538-2250 Fax: 248-538-2260\nKokomo Kokomo, IN Tel: 765-864-8360 Fax: 765-864-8387\nLos Angeles Mission Viejo, CA Tel: 949-462-9523 Fax: 949-462-9608\nSanta Clara Santa Clara, CA Tel: 408-961-6444 Fax: 408-961-6445\nToronto Mississauga, Ontario, Canada Tel: 905-673-0699 Fax:  905-673-6509",
    "ASIA/PACIFIC\nAsia Pacific Office Suites 3707-14, 37th Floor Tower 6, The Gateway Harbour City, Kowloon Hong Kong Tel: 852-2401-1200 Fax: 852-2401-3431\nAustralia - Sydney Tel: 61-2-9868-6733 Fax: 61-2-9868-6755\nChina - Beijing Tel: 86-10-8528-2100 Fax: 86-10-8528-2104\nChina - Chengdu Tel: 86-28-8665-5511 Fax: 86-28-8665-7889\nChina - Hong Kong SAR Tel: 852-2401-1200 Fax: 852-2401-3431\nChina - Nanjing Tel: 86-25-8473-2460 Fax: 86-25-8473-2470\nChina - Qingdao Tel: 86-532-8502-7355 Fax: 86-532-8502-7205\nChina - Shanghai Tel: 86-21-5407-5533 Fax: 86-21-5407-5066",
    "ASIA/PACIFIC\nChina - Shenyang Tel: 86-24-2334-2829 Fax: 86-24-2334-2393\nChina - Shenzhen Tel: 86-755-8203-2660 Fax: 86-755-8203-1760\nChina - Wuhan Tel: 86-27-5980-5300 Fax: 86-27-5980-5118\nChina - Xiamen Tel: 86-592-2388138 Fax: 86-592-2388130\nChina - Xian Tel: 86-29-8833-7252 Fax: 86-29-8833-7256\nChina - Zhuhai Tel: 86-756-3210040 Fax: 86-756-3210049\nIndia - Bangalore Tel: 91-80-4182-8400 Fax: 91-80-4182-8422\nIndia - New Delhi Tel: 91-11-4160-8631 Fax: 91-11-4160-8632\nIndia - Pune Tel: 91-20-2566-1512 Fax: 91-20-2566-1513",
    "ASIA/PACIFIC\nJapan - Yokohama Tel: 81-45-471- 6166 Fax: 81-45-471-6122",
    "Korea - Daegu\nTel: 82-53-744-4301\nFax: 82-53-744-4302\nKorea - Seoul Tel: 82-2-554-7200 Fax: 82-2-558-5932 or 82-2-558-5934",
    "Malaysia - Kuala Lumpur\nTel: 60-3-6201-9857 Fax: 60-3-6201-9859\nMalaysia - Penang Tel: 60-4-227-8870 Fax: 60-4-227-4068",
    "Philippines - Manila\nTel: 63-2-634-9065 Fax: 63-2-634-9069",
    "Singapore\nTel:  65-6334-8870 Fax: 65-6334-8850\nTaiwan - Hsin Chu Tel: 886-3-572-9526 Fax: 886-3-572-6459\nTaiwan - Kaohsiung\nTel: 886-7-536-4818\nFax: 886-7-536-4803",
    "Taiwan - Taipei\nTel: 886-2-2500-6610 Fax: 886-2-2508-0102\nThailand - Bangkok Tel: 66-2-694-1351 Fax: 66-2-694-1350",
    "EUROPE\nAustria - Wels Tel: 43-7242-2244-39 Fax: 43-7242-2244-393\nDenmark - Copenhagen Tel: 45-4450-2828 Fax: 45-4485-2829",
    "France - Paris\nTel: 33-1-69-53-63-20\nFax: 33-1-69-30-90-79\nGermany - Munich Tel: 49-89-627-144-0 Fax: 49-89-627-144-44\nItaly - Milan\nTel: 39-0331-742611 Fax: 39-0331-466781",
    "Netherlands - Drunen\nTel: 31-416-690399 Fax: 31-416-690340\nSpain - Madrid Tel: 34-91-708-08-90 Fax: 34-91-708-08-91\nUK - Wokingham Tel: 44-118-921-5869 Fax: 44-118-921-5820",
    "Mouser Electronics\nAuthorized Distributor\nClick to View Pricing, Inventory, Delivery & Lifecycle Information:",
    "Microchip:\nPIC18F4525-I/P\u00a0 PIC18F2620T-I/SO\u00a0 PIC18F4620-E/ML\u00a0 PIC18F4525-E/P\u00a0 PIC18F2525T-I/SO\u00a0 PIC18F4525-E/PT PIC18F4620-I/P\u00a0 PIC18LF2525T-I/SO\u00a0 PIC18F2525-I/SO\u00a0 PIC18F2525-I/SP\u00a0 PIC18F4620-E/P\u00a0 PIC18F4525T-I/PT PIC18F2525-E/SP\u00a0 PIC18F2525-E/SO\u00a0 PIC18F2620-E/SO\u00a0 PIC18F2620-E/SP\u00a0 PIC18LF4620-I/ML\u00a0 PIC18LF4620-I/P PIC18LF4620T-I/ML\u00a0 PIC18LF4620T-I/PT\u00a0 PIC18LF2525-I/SO\u00a0 PIC18F4620-I/ML\u00a0 PIC18LF2525-I/SP\u00a0 PIC18F4620-I/PT PIC18LF4525-I/ML\u00a0 PIC18F2620-I/SO\u00a0 PIC18F2620-I/SP",
    "Microchip:\nPIC18LF4525-I/PT\u00a0 PIC18F4525-I/PT\u00a0 PIC18F4620T-I/PT PIC18F4620T-I/ML\u00a0 PIC18LF2620-I/SO\u00a0 PIC18LF2620-I/SP\u00a0 PIC18F4620-E/PT\u00a0 PIC18LF4525T-I/ML\u00a0 PIC18LF4525TI/PT\u00a0 PIC18LF2620T-I/SO\u00a0 PIC18F4525-I/ML\u00a0 PIC18LF4620-I/PT\u00a0 PIC18LF4525-I/P"
]