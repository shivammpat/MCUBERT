[
    "Flexible Oscillator Structure:\n\u00b7 Run: CPU On, Peripherals On\n\u00b7 Idle: CPU Off, Peripherals On\n\u00b7 Sleep: CPU Off, Peripherals Off\n\u00b7 Idle mode Currents Down to 3.0 \u03bc A Typical\n\u00b7 Sleep mode Currents Down to 20 nA Typical\n\u00b7 Timer1 Oscillator: 1.8 \u03bc A, 32 kHz, 2V\n\u00b7 Watchdog Timer: 2.1 \u03bc A\n\u00b7 Two-Speed Oscillator Start-up",
    "Peripheral Highlights:\n\u00b7 High-Current Sink/Source 25 mA/25 mA\n\u00b7 Up to 2 Capture/Compare/PWM (CCP) modules, One with Auto-Shutdown (28-pin devices)\n\u00b7 Enhanced Capture/Compare/PWM (ECCP) module (40/44-pin devices only):\n-One, two or four PWM outputs\n-Selectable polarity\n-Programmable dead time\n-Auto-shutdown and auto-restart\n\u00b7 Master Synchronous Serial Port (MSSP) module Supporting 3-Wire SPI (all 4 modes) and I 2 C\u2122 Master and Slave modes\n\u00b7 Enhanced Addressable USART module:\n-Supports RS-485, RS-232 and LIN 1.2\n-RS-232 operation using internal oscillator block (no external crystal required)\n-Auto-wake-up on Start bit\n-Auto-Baud Detect\n\u00b7 10-Bit, Up to 13-Channel Analog-to-Digital Converter module (A/D):\n-Auto-acquisition capability\n-Conversion available during Sleep\n\u00b7 Dual Analog Comparators with Input Multiplexing\n\u00b7 Programmable 16-Level High/Low-Voltage Detection (HLVD) module:",
    "Peripheral Highlights:\n-Supports interrupt on High/Low-Voltage Detection\n\u00b7 Four Crystal modes, Up to 40 MHz\n\u00b7 4x Phase Lock Loop (PLL) - Available for Crystal and Internal Oscillators\n\u00b7 Two External RC modes, Up to 4 MHz\n\u00b7 Two External Clock modes, Up to 40 MHz\n\u00b7 Internal Oscillator Block:\n-8 user-selectable frequencies, from 31 kHz to 8 MHz\n-Provides a complete range of clock speeds from 31 kHz to 32 MHz when used with PLL\n-User-tunable to compensate for frequency drift\n\u00b7 Secondary Oscillator using Timer1 @ 32 kHz\n\u00b7 Fail-Safe Clock Monitor:\n-Allows for safe shutdown if peripheral clock stops",
    "Special Microcontroller Features:\n\u00b7 C Compiler Optimized Architecture:\n-Optional extended instruction set designed to optimize re-entrant code\n\u00b7 100,000 Erase/Write Cycle Flash Program Memory Typical\n\u00b7 Three Programmable External Interrupts\n\u00b7 Four Input Change Interrupts\n\u00b7 Priority Levels for Interrupts\n\u00b7 8 x 8 Single-Cycle Hardware Multiplier\n\u00b7 Extended Watchdog Timer (WDT):\n-Programmable period from 4 ms to 131s\n\u00b7 Single-Supply 5V In-Circuit Serial Programming\u2122 (ICSP\u2122) via Two Pins\n\u00b7 In-Circuit Debug (ICD) via Two Pins\n\u00b7 Wide Operating Voltage Range: 2.0V to 5.5V\n\u00b7 Programmable Brown-out Reset (BOR) with Software Enable Option",
    "PIC18F2X1X/4X1X\nPIC18F2410, Program Memory.Flash (bytes) = 16K. PIC18F2410, Program Memory.# Single-Word Instructions = 8192. PIC18F2410, Data Memory.SRAM (bytes) = 768. PIC18F2410, I/O.I/O = 25. PIC18F2410, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2410, CCP/ECCP (PWM).CCP/ECCP (PWM) = 2/0. PIC18F2410, MSSP.SPI = Y. PIC18F2410, MSSP.Master I 2 C\u2122 = Y. PIC18F2410, EUSART.EUSART = 1. PIC18F2410, Comp..Comp. = 2. PIC18F2410, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F2510, Program Memory.Flash (bytes) = 32K. PIC18F2510, Program",
    "PIC18F2X1X/4X1X\nMemory.# Single-Word Instructions = 16384. PIC18F2510, Data Memory.SRAM (bytes) = 1536. PIC18F2510, I/O.I/O = 25. PIC18F2510, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2510, CCP/ECCP (PWM).CCP/ECCP (PWM) = 2/0. PIC18F2510, MSSP.SPI = Y. PIC18F2510, MSSP.Master I 2 C\u2122 = Y. PIC18F2510, EUSART.EUSART = 1. PIC18F2510, Comp..Comp. = 2. PIC18F2510, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F2515, Program Memory.Flash (bytes) = 48K. PIC18F2515, Program Memory.# Single-Word Instructions = 24576. PIC18F2515, Data Memory.SRAM (bytes)",
    "PIC18F2X1X/4X1X\n= 3968. PIC18F2515, I/O.I/O = 25. PIC18F2515, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2515, CCP/ECCP (PWM).CCP/ECCP (PWM) = 2/0. PIC18F2515, MSSP.SPI = Y. PIC18F2515, MSSP.Master I 2 C\u2122 = Y. PIC18F2515, EUSART.EUSART = 1. PIC18F2515, Comp..Comp. = 2. PIC18F2515, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F2610, Program Memory.Flash (bytes) = 64K. PIC18F2610, Program Memory.# Single-Word Instructions = 32768. PIC18F2610, Data Memory.SRAM (bytes) = 3968. PIC18F2610, I/O.I/O = 25.",
    "PIC18F2X1X/4X1X\nPIC18F2610, 10-Bit A/D (ch).10-Bit A/D (ch) = 10. PIC18F2610, CCP/ECCP (PWM).CCP/ECCP (PWM) = 2/0. PIC18F2610, MSSP.SPI = Y. PIC18F2610, MSSP.Master I 2 C\u2122 = Y. PIC18F2610, EUSART.EUSART = 1. PIC18F2610, Comp..Comp. = 2. PIC18F2610, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F4410, Program Memory.Flash (bytes) = 16K. PIC18F4410, Program Memory.# Single-Word Instructions = 8192. PIC18F4410, Data Memory.SRAM (bytes) = 768. PIC18F4410, I/O.I/O = 36. PIC18F4410, 10-Bit A/D (ch).10-Bit A/D (ch)",
    "PIC18F2X1X/4X1X\n= 13. PIC18F4410, CCP/ECCP (PWM).CCP/ECCP (PWM) = 1/1. PIC18F4410, MSSP.SPI = Y. PIC18F4410, MSSP.Master I 2 C\u2122 = Y. PIC18F4410, EUSART.EUSART = 1. PIC18F4410, Comp..Comp. = 2. PIC18F4410, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F4510, Program Memory.Flash (bytes) = 32K. PIC18F4510, Program Memory.# Single-Word Instructions = 16384. PIC18F4510, Data Memory.SRAM (bytes) = 1536. PIC18F4510, I/O.I/O = 36. PIC18F4510, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4510, CCP/ECCP (PWM).CCP/ECCP",
    "PIC18F2X1X/4X1X\n(PWM) = 1/1. PIC18F4510, MSSP.SPI = Y. PIC18F4510, MSSP.Master I 2 C\u2122 = Y. PIC18F4510, EUSART.EUSART = 1. PIC18F4510, Comp..Comp. = 2. PIC18F4510, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F4515, Program Memory.Flash (bytes) = 48K. PIC18F4515, Program Memory.# Single-Word Instructions = 24576. PIC18F4515, Data Memory.SRAM (bytes) = 3968. PIC18F4515, I/O.I/O = 36. PIC18F4515, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4515, CCP/ECCP (PWM).CCP/ECCP (PWM) = 1/1. PIC18F4515, MSSP.SPI = Y.",
    "PIC18F2X1X/4X1X\nPIC18F4515, MSSP.Master I 2 C\u2122 = Y. PIC18F4515, EUSART.EUSART = 1. PIC18F4515, Comp..Comp. = 2. PIC18F4515, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F4610, Program Memory.Flash (bytes) = 64K. PIC18F4610, Program Memory.# Single-Word Instructions = 32768. PIC18F4610, Data Memory.SRAM (bytes) = 3968. PIC18F4610, I/O.I/O = 36. PIC18F4610, 10-Bit A/D (ch).10-Bit A/D (ch) = 13. PIC18F4610, CCP/ECCP (PWM).CCP/ECCP (PWM) = 1/1. PIC18F4610, MSSP.SPI = Y. PIC18F4610, MSSP.Master I 2 C\u2122 = Y. PIC18F4610,",
    "PIC18F2X1X/4X1X\nEUSART.EUSART = 1. PIC18F4610, Comp..Comp. = 2. PIC18F4610, Timers 8/16-Bit.Timers 8/16-Bit = 1/3",
    "Table of Contents\n1.0, 1 = Device Overview ........................................................................................................................................................................... 1.0, 2 = 9. 2.0, 1 = Oscillator Configurations",
    "Table of Contents\n............................................................................................................................................................. 2.0, 2 = 25. 3.0, 1 = Power-Managed",
    "Table of Contents\nModes.............................................................................................................................................................. 3.0, 2 = 35. 4.0, 1 =",
    "Table of Contents\nReset........................................................................................................................................................................................... 4.0, 2 = 43. 5.0, 1 = Memory",
    "Table of Contents\nOrganization.................................................................................................................................................................. 5.0, 2 = 55. 6.0, 1 = Flash Program",
    "Table of Contents\nMemory............................................................................................................................................................... 6.0, 2 = 77. 7.0, 1 = 8 x 8 Hardware",
    "Table of Contents\nMultiplier............................................................................................................................................................. 7.0, 2 = 81. 8.0, 1 = Interrupts",
    "Table of Contents\n..................................................................................................................................................................................... 8.0, 2 = 83. 9.0, 1 = I/O Ports",
    "Table of Contents\n...................................................................................................................................................................................... 9.0, 2 = 97. 10.0, 1 = Timer0 Module",
    "Table of Contents\n.......................................................................................................................................................................... 10.0, 2 = 115. 11.0, 1 = Timer1 Module",
    "Table of Contents\n.......................................................................................................................................................................... 11.0, 2 = 119. 12.0, 1 = Timer2 Module",
    "Table of Contents\n.......................................................................................................................................................................... 12.0, 2 = 125. 13.0, 1 = Timer3 Module",
    "Table of Contents\n.......................................................................................................................................................................... 13.0, 2 = 127. 14.0, 1 = Capture/Compare/PWM (CCP) Modules",
    "Table of Contents\n.................................................................................................................................. 14.0, 2 = 131. 15.0, 1 = Enhanced Capture/Compare/PWM (ECCP)",
    "Table of Contents\nModule................................................................................................................. 15.0, 2 = 139. 16.0, 1 = Master Synchronous Serial Port (MSSP) Module",
    "Table of Contents\n..................................................................................................................... 16.0, 2 = 153. 17.0, 1 = Enhanced Universal Synchronous Receiver Transmitter (EUSART)........................................................................................ 17.0, 2 = 193. 18.0, 1 = 10-Bit",
    "Table of Contents\nAnalog-to-Digital Converter (A/D) Module ...................................................................................................................... 18.0, 2 = 213. 19.0, 1 = Comparator",
    "Table of Contents\nModule................................................................................................................................................................... 19.0, 2 = 223. 20.0, 1 = Comparator Voltage Reference",
    "Table of Contents\nModule.................................................................................................................................... 20.0, 2 = 229. 21.0, 1 = High/Low-Voltage Detect",
    "Table of Contents\n(HLVD).............................................................................................................................................. 21.0, 2 = 233. 22.0, 1 = Special Features of the",
    "Table of Contents\nCPU..................................................................................................................................................... 22.0, 2 = 239. 23.0, 1 = Instruction Set",
    "Table of Contents\nSummary........................................................................................................................................................... 23.0, 2 = 259. 24.0, 1 = Development",
    "Table of Contents\nSupport................................................................................................................................................................ 24.0, 2 = 309. 25.0, 1 = Electrical",
    "Table of Contents\nCharacteristics........................................................................................................................................................... 25.0, 2 = 313. 26.0, 1 = DC and AC Characteristics Graphs And Tables",
    "Table of Contents\n....................................................................................................................... 26.0, 2 = 351. 27.0, 1 = Packaging",
    "Table of Contents\nInformation............................................................................................................................................................... 27.0, 2 = 353. Appendix, 1 = A: Revision",
    "Table of Contents\nHistory.............................................................................................................................................................. Appendix, 2 = 361. Appendix B: Device Differences",
    "Table of Contents\n........................................................................................................................................................, 1 = Appendix B: Device Differences",
    "Table of Contents\n......................................................................................................................................................... Appendix B: Device Differences",
    "Table of Contents\n........................................................................................................................................................, 2 = 361. Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 1 = Appendix C: Conversion Considerations",
    "Table of Contents\n............................................................................................................................................ Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 2 = 362. Appendix D: Migration From Baseline to Enhanced Devices",
    "Table of Contents\n............................................................................................................, 1 = Appendix D: Migration From Baseline to Enhanced Devices ............................................................................................................. Appendix D: Migration From Baseline to Enhanced Devices",
    "Table of Contents\n............................................................................................................, 2 = 362. Appendix E: Migration From Mid-Range to Enhanced Devices........................................................................................................., 1 = Appendix E: Migration From Mid-Range to Enhanced",
    "Table of Contents\nDevices.......................................................................................................... Appendix E: Migration From Mid-Range to Enhanced Devices........................................................................................................., 2 = 363. Appendix F: Migration From High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................, 1 = Appendix F: Migration From High-End to Enhanced Devices............................................................................................................. Appendix F: Migration From High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................, 2 = 363. Index",
    "Table of Contents\n................................................................................................................................................................................................., 1 = Index",
    "Table of Contents\n.................................................................................................................................................................................................. Index",
    "Table of Contents\n................................................................................................................................................................................................., 2 = 365. The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 1 = The Microchip Web",
    "Table of Contents\nSite...................................................................................................................................................................... The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 2 = 375. Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 1 = Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................... Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 2 = 375. Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 1 = Customer",
    "Table of Contents\nSupport............................................................................................................................................................................... Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 2 = 375. Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 1 = Reader",
    "Table of Contents\nResponse............................................................................................................................................................................... Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 2 = 376. PIC18F2X1X/4X1X Product Identification",
    "Table of Contents\nSystem............................................................................................................................., 1 = PIC18F2X1X/4X1X Product Identification",
    "Table of Contents\nSystem.............................................................................................................................. PIC18F2X1X/4X1X Product Identification",
    "Table of Contents\nSystem............................................................................................................................., 2 = 377",
    "TO OUR VALUED CUSTOMERS\nIt is our intention to provide our valued customers with the best documentation possible to ensure successful use of your Microchip products. To this end, we will continue to improve our publications to better suit your needs. Our publications will be refined and enhanced as new volumes and updates are introduced.\nIf you have any questions or comments regarding this publication, please contact the Marketing Communications Department via E-mail at docerrors@microchip.com or fax the Reader Response Form in the back of this data sheet to (480) 792-4150. We welcome your feedback.",
    "Most Current Data Sheet\nTo obtain the most up-to-date version of this data sheet, please register at our Worldwide Web site at:\nhttp://www.microchip.com\nYou can determine the version of a data sheet by examining its literature number found on the bottom outside corner of any page. The last character of the literature number is the version number, (e.g., DS30000A is version A of document DS30000).",
    "Errata\nAn errata sheet, describing minor operational differences from the data sheet and recommended workarounds, may exist for current devices. As device/documentation issues become known to us, we will publish an errata sheet. The errata will specify the revision of silicon and revision of document to which it applies.\nTo determine if an errata sheet exists for a particular device, please check with one of the following:\n\u00b7 Microchip's Worldwide Web site; http://www.microchip.com\n\u00b7 Your local Microchip sales office (see last page)\nWhen contacting a sales office, please specify which device, revision of silicon and data sheet (include literature number) you are using.",
    "Customer Notification System\nRegister on our web site at www.microchip.com to receive the most current information on all of our products.",
    "1.0 DEVICE OVERVIEW\nThis document contains device specific information for the following devices:\n\u2022 PIC18F2410\n\u2022 PIC18LF2410\n\u2022 PIC18F2510\n\u2022 PIC18LF2510\n\u2022 PIC18F2515\n\u2022 PIC18LF2515\n\u2022 PIC18F2610\n\u2022 PIC18LF2610\n\u2022 PIC18F4410\n\u2022 PIC18LF4410\n\u2022 PIC18F4510\n\u2022 PIC18LF4510\n\u2022 PIC18F4515\n\u2022 PIC18LF4515\n\u2022 PIC18F4610\n\u2022 PIC18LF4610\nThis family offers the advantages of all PIC18 microcontrollers -namely, high computational performance at an economical price - with the addition of  high-endurance, Flash program memory. On top of these features, the PIC18F2X1X/4X1X family introduces design enhancements that make these microcontrollers a  logical  choice  for  many  high-performance,  power sensitive applications.",
    "1.1.1 nanoWatt TECHNOLOGY\nAll  of  the  devices  in  the  PIC18F2X1X/4X1X  family incorporate  a  range  of  features  that  can  significantly reduce  power  consumption  during  operation.  Key items include:\n\u00b7 Alternate Run Modes: By clocking the controller from the Timer1 source or the internal oscillator block, power consumption during code execution can be reduced by as much as 90%.\n\u00b7 Multiple Idle Modes: The controller can also run with its CPU core disabled but the peripherals still active. In these states, power consumption can be reduced even further, to as little as 4% of normal operation requirements.\n\u00b7 On-the-fly Mode Switching: The powermanaged modes are invoked by user code during operation, allowing the user to incorporate powersaving ideas into their application's software design.\n\u00b7 Lower Consumption in Key Modules: The power requirements for both Timer1 and the Watchdog Timer have been minimized. See Section 25.0 'Electrical Characteristics' for values.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nAll of the devices in the PIC18F2X1X/4X1X family offer ten different  oscillator  options,  allowing  users  a  wide range of choices in developing application hardware. These include:",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\n\u00b7 Four Crystal modes, using crystals or ceramic resonators\n\u00b7 Two External Clock modes, offering the option of using two pins (oscillator input and a divide-by-4 clock output) or one pin (oscillator input, with the second pin reassigned as general I/O)\n\u00b7 Two External RC Oscillator modes with the same pin options as the External Clock modes\n\u00b7 An internal oscillator block which provides an 8 MHz clock and an INTRC source (approximately 31 kHz), as well as a range of 6 user selectable clock frequencies, between 125 kHz to 4 MHz, for a total of 8 clock frequencies. This option frees the two oscillator pins for use as additional general purpose I/O.\n\u00b7 A Phase Lock Loop (PLL) frequency multiplier, available to both the high-speed crystal and Internal Oscillator modes, which allows clock speeds of up to 40 MHz. Used with the internal oscillator, the PLL gives users a complete selection of clock speeds, from 31 kHz to 32 MHz - all without using an external crystal or clock circuit.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nBesides its availability as a clock source, the internal oscillator block provides a stable reference source that gives the family additional features for robust operation:\n\u00b7 Fail-Safe Clock Monitor: This option constantly monitors the main clock source against a reference signal provided by the internal oscillator. If a clock failure occurs, the controller is switched to the internal oscillator block, allowing for continued low-speed operation or a safe application shutdown.\n\u00b7 Two-Speed Start-up: This option allows the internal oscillator to serve as the clock source from Power-on Reset, or wake-up from Sleep mode, until the primary clock source is available.",
    "1.2 Other Special Features\n\u00b7 Memory Endurance: The Flash cells for program memory are rated to 100,000 erase/write cycles. Data retention without refresh is conservatively estimated to be greater than 40 years.\n\u00b7 Extended Instruction Set: The PIC18F2X1X/ 4X1X family introduces an optional extension to the PIC18 instruction set, which adds 8 new instructions and an Indexed Addressing mode. This extension, enabled as a device configuration option, has been specifically designed to optimize re-entrant application code originally developed in high-level languages, such as C.\n\u00b7 Enhanced CCP Module: In PWM mode, this module provides 1, 2 or 4 modulated outputs for controlling half-bridge and full-bridge drivers. Other features include Auto-Shutdown, for disabling PWM outputs on interrupt or other select conditions and Auto-Restart, to reactivate outputs once the condition has cleared.",
    "1.2 Other Special Features\n\u00b7 Enhanced Addressable USART: This serial communication module is capable of standard RS-232 operation and provides support for the LIN bus protocol. Other enhancements include automatic baud rate detection and a 16-bit Baud Rate Generator for improved resolution. When the microcontroller is using the internal oscillator block, the USART provides stable operation for applications that talk to the outside world without using an external crystal (or its accompanying power requirement).\n\u00b7 10-bit A/D Converter: This module incorporates programmable acquisition time, allowing for a channel to be selected and a conversion to be initiated without waiting for a sampling period and thus, reduce code overhead.\n\u00b7 Extended Watchdog Timer (WDT): This enhanced version incorporates a 16-bit prescaler, allowing an extended time-out range that is stable across operating voltage and temperature. See Section 25.0 'Electrical Characteristics' for time-out periods.",
    "1.3 Details on Individual Family Members\nDevices in the PIC18F2X1X/4X1X family are available in 28-pin and 40/44-pin packages. Block diagrams for the two groups are shown in Figure 1-1 and Figure 1-2.\nThe devices are differentiated from each other in five ways:\n1. Flash program memory\n\u00b7 16 Kbytes for PIC18F2410/4410 devices\n\u00b7 32 Kbytes for PIC18F2510/4510 devices\n\u00b7 48 Kbytes for PIC18F2515/4515 devices\n\u00b7 64 Kbytes for PIC18F2610/4610 devices\n2. A/D channels (10 for 28-pin devices, 13 for 40/44-pin devices).\n3. I/O ports (3 bidirectional ports on 28-pin devices, 5 bidirectional ports on 40/44-pin devices).\n4. CCP and Enhanced CCP implementation (28-pin devices have 2 standard CCP modules; 40/44-pin devices have one standard CCP module and one ECCP module).\n5. Parallel  Slave  Port  (present  only  on  40/44-pin devices).",
    "1.3 Details on Individual Family Members\nAll other features for devices in this family are identical. These are summarized in Table 1-1.\nThe pinouts for all devices are listed in Table 1-3 and Table 1-4.\nLike  all  Microchip  PIC18  devices,  members  of  the PIC18F2X1X/4X1X family are available as both standard  and  low-voltage  devices.  Standard  devices with Flash memory, designated with an 'F' in the part number  (such  as  PIC18 F 2610),  accommodate  an operating  VDD  range  of  4.2V  to  5.5V.  Low-voltage parts,  designated  by  'LF'  (such  as  PIC18 LF 2610), function over an extended VDD range of 2.0V to 5.5V.",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\nOperating Frequency, PIC18F2410 = DC - 40 MHz. Operating Frequency, PIC18F2510 = DC - 40 MHz. Operating Frequency, PIC18F2515 = DC - 40 MHz. Operating Frequency, PIC18F2610 = DC - 40 MHz. Program Memory (Bytes), PIC18F2410 = 16384. Program Memory (Bytes), PIC18F2510 = 32768. Program Memory (Bytes), PIC18F2515 = 49152. Program Memory (Bytes), PIC18F2610 = 65536. Program Memory (Instructions), PIC18F2410 = 8192. Program Memory (Instructions), PIC18F2510 = 16384. Program Memory (Instructions), PIC18F2515 = 24576. Program Memory (Instructions), PIC18F2610 = 32768. Data Memory (Bytes), PIC18F2410 = 768. Data Memory (Bytes), PIC18F2510 = 1536. Data Memory (Bytes), PIC18F2515 = 3968. Data Memory",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\n(Bytes), PIC18F2610 = 3968. Interrupt Sources, PIC18F2410 = 18. Interrupt Sources, PIC18F2510 = 18. Interrupt Sources, PIC18F2515 = 18. Interrupt Sources, PIC18F2610 = 18. I/O Ports, PIC18F2410 = Ports A, B, C, (E). I/O Ports, PIC18F2510 = Ports A, B, C, (E). I/O Ports, PIC18F2515 = Ports A, B, C, (E). I/O Ports, PIC18F2610 = Ports A, B, C, (E). Timers, PIC18F2410 = 4. Timers, PIC18F2510 = 4. Timers, PIC18F2515 = 4. Timers, PIC18F2610 = 4. Capture/Compare/PWM Modules, PIC18F2410 = 2. Capture/Compare/PWM Modules, PIC18F2510 = 2.",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\nCapture/Compare/PWM Modules, PIC18F2515 = 2. Capture/Compare/PWM Modules, PIC18F2610 = 2. Enhanced Capture/Compare/PWM Modules, PIC18F2410 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2510 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2515 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2610 = 0. Serial Communications, PIC18F2410 = MSSP, Enhanced USART. Serial Communications, PIC18F2510 = MSSP, Enhanced USART. Serial Communications, PIC18F2515 = MSSP, Enhanced USART. Serial Communications, PIC18F2610 = MSSP, Enhanced USART. Parallel Communications (PSP), PIC18F2410 = No. Parallel Communications (PSP), PIC18F2510 = No. Parallel Communications (PSP), PIC18F2515 = No. Parallel Communications (PSP), PIC18F2610 = No.",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\n10-bit Analog-to-Digital Module, PIC18F2410 = 10 Input Channels. 10-bit Analog-to-Digital Module, PIC18F2510 = 10 Input Channels. 10-bit Analog-to-Digital Module, PIC18F2515 = 10 Input Channels. 10-bit Analog-to-Digital Module, PIC18F2610 = 10 Input Channels. Resets (and Delays), PIC18F2410 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2510 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2515 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2610 = POR,",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\nBOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Programmable High/Low-Voltage Detect, PIC18F2410 = Yes. Programmable High/Low-Voltage Detect, PIC18F2510 = Yes. Programmable High/Low-Voltage Detect, PIC18F2515 = Yes. Programmable High/Low-Voltage Detect, PIC18F2610 = Yes. Programmable Brown-out Reset, PIC18F2410 = Yes. Programmable Brown-out Reset, PIC18F2510 = Yes. Programmable Brown-out Reset, PIC18F2515 = Yes. Programmable Brown-out Reset, PIC18F2610 = Yes. Instruction Set, PIC18F2410 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F2510 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F2515 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F2610 = 75 Instructions; 83 with Extended",
    "TABLE 1-1: DEVICE FEATURES (PIC18F2410/2415/2510/2515/2610)\nInstruction Set enabled. Packages, PIC18F2410 = 28-pin SPDIP 28-pin SOIC 28-pin QFN. Packages, PIC18F2510 = 28-pin SPDIP 28-pin SOIC 28-pin QFN. Packages, PIC18F2515 = 28-pin SPDIP 28-pin SOIC. Packages, PIC18F2610 = 28-pin SPDIP 28-pin SOIC",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\nOperating Frequency, PIC18F4410 = DC - 40 MHz. Operating Frequency, PIC18F4510 = DC - 40 MHz. Operating Frequency, PIC18F4515 = DC - 40 MHz. Operating Frequency, PIC18F4610 = DC - 40 MHz. Program Memory (Bytes), PIC18F4410 = 16384. Program Memory (Bytes), PIC18F4510 = 32768. Program Memory (Bytes), PIC18F4515 = 49152. Program Memory (Bytes), PIC18F4610 = 65536. Program Memory (Instructions), PIC18F4410 = 8192. Program Memory (Instructions), PIC18F4510 = 16384. Program Memory (Instructions), PIC18F4515 = 24576. Program Memory (Instructions), PIC18F4610 = 32768. Data Memory (Bytes), PIC18F4410 = 768. Data Memory (Bytes), PIC18F4510 = 1536. Data Memory (Bytes), PIC18F4515 = 3968. Data Memory",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\n(Bytes), PIC18F4610 = 3968. Interrupt Sources, PIC18F4410 = 19. Interrupt Sources, PIC18F4510 = 19. Interrupt Sources, PIC18F4515 = 19. Interrupt Sources, PIC18F4610 = 19. I/O Ports, PIC18F4410 = Ports A, B, C, D, E. I/O Ports, PIC18F4510 = Ports A, B, C, D, E. I/O Ports, PIC18F4515 = Ports A, B, C, D, E. I/O Ports, PIC18F4610 = Ports A, B, C, D, E. Timers, PIC18F4410 = 4. Timers, PIC18F4510 = 4. Timers, PIC18F4515 = 4. Timers, PIC18F4610 = 4. Capture/Compare/PWM Modules, PIC18F4410 = 1. Capture/Compare/PWM Modules, PIC18F4510 = 1.",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\nCapture/Compare/PWM Modules, PIC18F4515 = 1. Capture/Compare/PWM Modules, PIC18F4610 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4410 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4510 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4515 = 1. Enhanced Capture/Compare/PWM Modules, PIC18F4610 = 1. Serial Communications, PIC18F4410 = MSSP, Enhanced USART. Serial Communications, PIC18F4510 = MSSP, Enhanced USART. Serial Communications, PIC18F4515 = MSSP, Enhanced USART. Serial Communications, PIC18F4610 = MSSP, Enhanced USART. Parallel Communications (PSP), PIC18F4410 = Yes. Parallel Communications (PSP), PIC18F4510 = Yes. Parallel Communications (PSP), PIC18F4515 = Yes. Parallel Communications (PSP), PIC18F4610 = Yes.",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\n10-Bit Analog-to-Digital Module, PIC18F4410 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4510 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4515 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4610 = 13 Input Channels. Resets (and Delays), PIC18F4410 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4510 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4515 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4610 = POR,",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\nBOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Programmable High/Low-Voltage Detect, PIC18F4410 = Yes. Programmable High/Low-Voltage Detect, PIC18F4510 = Yes. Programmable High/Low-Voltage Detect, PIC18F4515 = Yes. Programmable High/Low-Voltage Detect, PIC18F4610 = Yes. Programmable Brown-out Reset, PIC18F4410 = Yes. Programmable Brown-out Reset, PIC18F4510 = Yes. Programmable Brown-out Reset, PIC18F4515 = Yes. Programmable Brown-out Reset, PIC18F4610 = Yes. Instruction Set, PIC18F4410 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F4510 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F4515 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F4610 = 75 Instructions; 83 with Extended",
    "TABLE 1-2: DEVICE FEATURES (PIC18F4410/4415/4510/4515/4610)\nInstruction Set enabled. Packages, PIC18F4410 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4510 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4515 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4610 = 40-pin PDIP 44-pin QFN 44-pin TQFP",
    "PIC18F2410/2415/2510/2515/2610 (28-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "FIGURE 1-2: PIC18F4410/4415/4510/4515/4610 (40/44-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set, or RB3 when CCP2MX is not set.\n2: RE3 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 'Oscillator Configurations' for additional information.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3, Pin Number.SPDIP, SOIC = 1. MCLR/VPP/RE3, Pin Number.QFN = 26. MCLR/VPP/RE3, Pin Type = . MCLR/VPP/RE3, Buffer Type = . MCLR/VPP/RE3, Description = Master Clear (input) or programming voltage (input).. MCLR, Pin Number.SPDIP, SOIC = . MCLR, Pin Number.QFN = . MCLR, Pin Type = I. MCLR, Buffer Type = ST. MCLR, Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number.SPDIP, SOIC = . VPP, Pin Number.QFN = . VPP, Pin Type = P. VPP, Buffer Type = . VPP, Description = Programming voltage input.. RE3, Pin Number.SPDIP, SOIC = . RE3, Pin Number.QFN = .",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS\nRE3, Pin Type = I. RE3, Buffer Type = ST. RE3, Description = Digital input.. OSC1/CLKI/RA7, Pin Number.SPDIP, SOIC = 9. OSC1/CLKI/RA7, Pin Number.QFN = 6. OSC1/CLKI/RA7, Pin Type = . OSC1/CLKI/RA7, Buffer Type = . OSC1/CLKI/RA7, Description = Oscillator crystal or external clock input.. OSC1, Pin Number.SPDIP, SOIC = . OSC1, Pin Number.QFN = . OSC1, Pin Type = I. OSC1, Buffer Type = ST. OSC1, Description = Oscillator crystal input or external clock source input.. CLKI, Pin Number.SPDIP, SOIC = . CLKI, Pin Number.QFN = . CLKI, Pin Type = I. CLKI, Buffer Type = CMOS. CLKI, Description = ST buffer when",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS\nconfigured in RC mode; CMOSotherwise. External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Number.QFN = . RA7, Pin Type = I/O. RA7, Buffer Type = TTL. RA7, Description = General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number.SPDIP, SOIC = 10. OSC2/CLKO/RA6, Pin Number.QFN = 7. OSC2/CLKO/RA6, Pin Type = . OSC2/CLKO/RA6, Buffer Type = . OSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number.SPDIP, SOIC = . OSC2, Pin Number.QFN = . OSC2, Pin Type = O.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS\nOSC2, Buffer Type = -. OSC2, Description = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number.SPDIP, SOIC = . CLKO, Pin Number.QFN = . CLKO, Pin Type = O. CLKO, Buffer Type = -. CLKO, Description = In RC mode, OSC2 pin outputs CLKO, which has 1/4 the. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Number.QFN = . RA6, Pin Type = I/O. RA6, Buffer Type = TTL. RA6, Description = General purpose I/O pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS, Pin Number.SPDIP, SOIC = 2. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS, Pin Number.QFN = 27. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS, Pin.Type = . RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nVREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS, Buffer Type = . RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3/AN3/VREF+ RA3 AN3 VREF+ RA4 T0CKI C1OUT C2OUT RA5 AN4 SS, Description = PORTA is a bidirectional I/O port.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type = TTL. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = Analog input 0.. , Pin Number.SPDIP, SOIC = 3. , Pin Number.QFN = 28. ,",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = . , Buffer Type = . , Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type = TTL. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = Analog input 1.. RA2/AN2/VREF-/CVREF, Pin Number.SPDIP, SOIC = 4. RA2/AN2/VREF-/CVREF, Pin Number.QFN = 1. RA2/AN2/VREF-/CVREF, Pin.Type = . RA2/AN2/VREF-/CVREF, Buffer Type = . RA2/AN2/VREF-/CVREF, Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . ,",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = I/O. , Buffer Type = TTL. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = Analog input 2.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = A/D reference voltage (low) input.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = O. , Buffer Type = Analog. , Description = Comparator reference voltage output.. , Pin Number.SPDIP, SOIC = 5. , Pin Number.QFN = 2. , Pin.Type = . , Buffer Type = . , Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= TTL. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = Analog input 3.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog. , Description = A/D reference voltage (high) input.. RA4/T0CKI/C1OUT, Pin Number.SPDIP, SOIC = 6. RA4/T0CKI/C1OUT, Pin Number.QFN = 3. RA4/T0CKI/C1OUT, Pin.Type = . RA4/T0CKI/C1OUT, Buffer Type = . RA4/T0CKI/C1OUT, Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type = ST. , Description = Digital",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = ST. , Description = Timer0 external clock input.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = O. , Buffer Type = -. , Description = Comparator 1 output.. RA5/AN4/SS/HLVDIN/, Pin Number.SPDIP, SOIC = 7. RA5/AN4/SS/HLVDIN/, Pin Number.QFN = 4. RA5/AN4/SS/HLVDIN/, Pin.Type = . RA5/AN4/SS/HLVDIN/, Buffer Type = . RA5/AN4/SS/HLVDIN/, Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I/O. , Buffer Type",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= TTL. , Description = Digital I/O.. , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = . , Pin.Type = I. , Buffer Type = Analog TTL. , Description = Analog input 4. SPI slave select input.. HLVDIN, Pin Number.SPDIP, SOIC = . HLVDIN, Pin Number.QFN = . HLVDIN, Pin.Type = I I. HLVDIN, Buffer Type = Analog. HLVDIN, Description = High/Low-Voltage Detect input.. C2OUT, Pin Number.SPDIP, SOIC = . C2OUT, Pin Number.QFN = . C2OUT, Pin.Type = O. C2OUT, Buffer Type = -. C2OUT, Description = Comparator 2 output.. RA6, Pin Number.SPDIP, SOIC = . RA6, Pin Number.QFN = . RA6, Pin.Type = . RA6, Buffer Type = . RA6, Description =",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nSee the OSC2/CLKO/RA6 pin.. RA7, Pin Number.SPDIP, SOIC = . RA7, Pin Number.QFN = . RA7, Pin.Type = . RA7, Buffer Type = . RA7, Description = See the OSC1/CLKI/RA7 pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP = Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0/FLT0/AN12, Pin Number.SPDIP, SOIC = 21. RB0/INT0/FLT0/AN12, Pin Number.QFN = 18. RB0/INT0/FLT0/AN12, Pin Type = . RB0/INT0/FLT0/AN12, Buffer Type = . RB0/INT0/FLT0/AN12, Description = programmed for internal weak pull-ups on all inputs.. RB0, Pin Number.SPDIP, SOIC = . RB0, Pin Number.QFN = . RB0, Pin Type = I/O. RB0, Buffer Type = TTL. RB0, Description = Digital I/O.. INT0, Pin Number.SPDIP, SOIC = . INT0, Pin Number.QFN = . INT0, Pin Type = I. INT0, Buffer Type = ST. INT0, Description = External interrupt 0.. FLT0, Pin Number.SPDIP, SOIC = .",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nFLT0, Pin Number.QFN = . FLT0, Pin Type = I. FLT0, Buffer Type = ST. FLT0, Description = PWM Fault input for CCP1.. AN12, Pin Number.SPDIP, SOIC = . AN12, Pin Number.QFN = . AN12, Pin Type = I. AN12, Buffer Type = Analog. AN12, Description = Analog input 12.. RB1/INT1/AN10, Pin Number.SPDIP, SOIC = 22. RB1/INT1/AN10, Pin Number.QFN = 19. RB1/INT1/AN10, Pin Type = . RB1/INT1/AN10, Buffer Type = . RB1/INT1/AN10, Description = . RB1, Pin Number.SPDIP, SOIC = . RB1, Pin Number.QFN = . RB1, Pin Type = I/O. RB1, Buffer Type = TTL. RB1, Description = Digital",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. INT1, Pin Number.SPDIP, SOIC = . INT1, Pin Number.QFN = . INT1, Pin Type = I. INT1, Buffer Type = ST. INT1, Description = External interrupt 1.. AN10, Pin Number.SPDIP, SOIC = . AN10, Pin Number.QFN = . AN10, Pin Type = I. AN10, Buffer Type = Analog. AN10, Description = Analog input 10.. RB2/INT2/AN8, Pin Number.SPDIP, SOIC = 23. RB2/INT2/AN8, Pin Number.QFN = 20. RB2/INT2/AN8, Pin Type = . RB2/INT2/AN8, Buffer Type = . RB2/INT2/AN8, Description = . RB2, Pin Number.SPDIP, SOIC = . RB2, Pin Number.QFN = . RB2, Pin Type = I/O. RB2, Buffer Type = TTL.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB2, Description = Digital I/O.. INT2, Pin Number.SPDIP, SOIC = . INT2, Pin Number.QFN = . INT2, Pin Type = I. INT2, Buffer Type = ST. INT2, Description = External interrupt 2.. AN8, Pin Number.SPDIP, SOIC = . AN8, Pin Number.QFN = . AN8, Pin Type = I. AN8, Buffer Type = Analog. AN8, Description = Analog input 8.. RB3/AN9/CCP2, Pin Number.SPDIP, SOIC = 24. RB3/AN9/CCP2, Pin Number.QFN = 21. RB3/AN9/CCP2, Pin Type = . RB3/AN9/CCP2, Buffer Type = . RB3/AN9/CCP2, Description = . RB3, Pin Number.SPDIP, SOIC = . RB3, Pin Number.QFN = . RB3, Pin Type =",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. RB3, Buffer Type = TTL. RB3, Description = Digital I/O.. AN9, Pin Number.SPDIP, SOIC = . AN9, Pin Number.QFN = . AN9, Pin Type = I. AN9, Buffer Type = Analog. AN9, Description = Analog input 9.. CCP2 (1), Pin Number.SPDIP, SOIC = . CCP2 (1), Pin Number.QFN = . CCP2 (1), Pin Type = I/O. CCP2 (1), Buffer Type = ST. CCP2 (1), Description = Capture 2 input/Compare 2 output/PWM 2 output.. RB4/KBI0/AN11, Pin Number.SPDIP, SOIC = 25. RB4/KBI0/AN11, Pin Number.QFN = . RB4/KBI0/AN11, Pin Type = . RB4/KBI0/AN11, Buffer Type = .",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB4/KBI0/AN11, Description = . , Pin Number.SPDIP, SOIC = . , Pin Number.QFN = 22. , Pin Type = . , Buffer Type = . , Description = . RB4, Pin Number.SPDIP, SOIC = . RB4, Pin Number.QFN = . RB4, Pin Type = I/O. RB4, Buffer Type = TTL. RB4, Description = Digital I/O.. KBI0, Pin Number.SPDIP, SOIC = . KBI0, Pin Number.QFN = . KBI0, Pin Type = I. KBI0, Buffer Type = TTL. KBI0, Description = Interrupt-on-change pin.. AN11, Pin Number.SPDIP, SOIC = . AN11, Pin Number.QFN = . AN11, Pin Type = I. AN11, Buffer Type = Analog. AN11, Description = Analog input 11.. RB5/KBI1/PGM, Pin",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.SPDIP, SOIC = 26. RB5/KBI1/PGM, Pin Number.QFN = 23. RB5/KBI1/PGM, Pin Type = . RB5/KBI1/PGM, Buffer Type = . RB5/KBI1/PGM, Description = . RB5, Pin Number.SPDIP, SOIC = . RB5, Pin Number.QFN = . RB5, Pin Type = I/O. RB5, Buffer Type = TTL. RB5, Description = Digital I/O.. KBI1, Pin Number.SPDIP, SOIC = . KBI1, Pin Number.QFN = . KBI1, Pin Type = I. KBI1, Buffer Type = TTL. KBI1, Description = Interrupt-on-change pin.. PGM, Pin Number.SPDIP, SOIC = . PGM, Pin Number.QFN = . PGM, Pin Type = I/O. PGM, Buffer Type = ST.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPGM, Description = Low-Voltage ICSP\u2122 Programming enable pin.. RB6/KBI2/PGC, Pin Number.SPDIP, SOIC = 27. RB6/KBI2/PGC, Pin Number.QFN = 24. RB6/KBI2/PGC, Pin Type = . RB6/KBI2/PGC, Buffer Type = . RB6/KBI2/PGC, Description = . RB6, Pin Number.SPDIP, SOIC = . RB6, Pin Number.QFN = . RB6, Pin Type = I/O. RB6, Buffer Type = TTL. RB6, Description = Digital I/O.. KBI2, Pin Number.SPDIP, SOIC = . KBI2, Pin Number.QFN = . KBI2, Pin Type = I. KBI2, Buffer Type = TTL. KBI2, Description = Interrupt-on-change pin.. PGC, Pin Number.SPDIP, SOIC = .",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPGC, Pin Number.QFN = . PGC, Pin Type = I/O. PGC, Buffer Type = ST. PGC, Description = In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD, Pin Number.SPDIP, SOIC = 28. RB7/KBI3/PGD, Pin Number.QFN = 25. RB7/KBI3/PGD, Pin Type = . RB7/KBI3/PGD, Buffer Type = . RB7/KBI3/PGD, Description = . RB7, Pin Number.SPDIP, SOIC = . RB7, Pin Number.QFN = . RB7, Pin Type = I/O. RB7, Buffer Type = TTL. RB7, Description = Digital I/O.. KBI3, Pin Number.SPDIP, SOIC = . KBI3, Pin Number.QFN = . KBI3, Pin Type = I. KBI3, Buffer Type =",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTTL. KBI3, Description = Interrupt-on-change pin.. PGD, Pin Number.SPDIP, SOIC = . PGD, Pin Number.QFN = . PGD, Pin Type = I/O. PGD, Buffer Type = ST. PGD, Description = In-Circuit Debugger and ICSP programming data pin.\nLegend:\n- TTL = TTL compatible input\nCMOS = CMOS compatible input or output\n- ST = Schmitt Trigger input with CMOS levels\nI\n=\nInput\n- O = Output\nP = Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n, Pin Number.SPDIP, SOIC = 11. , Pin Number.QFN = 8. , Pin.Type = . , Buffer Type = . , Description = PORTC is a bidirectional I/O port.. RC0/T1OSO/T13CKI RC0, Pin Number.SPDIP, SOIC = . RC0/T1OSO/T13CKI RC0, Pin Number.QFN = . RC0/T1OSO/T13CKI RC0, Pin.Type = I/O. RC0/T1OSO/T13CKI RC0, Buffer Type = ST. RC0/T1OSO/T13CKI RC0, Description = Digital I/O.. T1OSO, Pin Number.SPDIP, SOIC = . T1OSO, Pin Number.QFN = . T1OSO, Pin.Type = O. T1OSO, Buffer Type = -. T1OSO, Description = Timer1 oscillator output.. T13CKI, Pin Number.SPDIP,",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nSOIC = . T13CKI, Pin Number.QFN = . T13CKI, Pin.Type = I. T13CKI, Buffer Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.SPDIP, SOIC = 12. RC1/T1OSI/CCP2, Pin Number.QFN = 9. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.SPDIP, SOIC = . RC1, Pin Number.QFN = . RC1, Pin.Type = I/O. RC1, Buffer Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number.SPDIP, SOIC = . T1OSI, Pin Number.QFN = . T1OSI, Pin.Type",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= I. T1OSI, Buffer Type = Analog. T1OSI, Description = Timer1 oscillator input.. CCP2 (2), Pin Number.SPDIP, SOIC = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer Type = ST. CCP2 (2), Description = Capture 2 input/Compare 2 output/PWM 2 output.. RC2/CCP1, Pin Number.SPDIP, SOIC = 13. RC2/CCP1, Pin Number.QFN = 10. RC2/CCP1, Pin.Type = . RC2/CCP1, Buffer Type = . RC2/CCP1, Description = . RC2, Pin Number.SPDIP, SOIC = . RC2, Pin Number.QFN = . RC2, Pin.Type = I/O. RC2, Buffer Type = ST. RC2, Description =",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDigital I/O.. CCP1, Pin Number.SPDIP, SOIC = . CCP1, Pin Number.QFN = . CCP1, Pin.Type = I/O. CCP1, Buffer Type = ST. CCP1, Description = Capture 1 input/Compare 1 output/PWM 1 output.. RC3/SCK/SCL, Pin Number.SPDIP, SOIC = 14. RC3/SCK/SCL, Pin Number.QFN = 11. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.SPDIP, SOIC = . RC3, Pin Number.QFN = . RC3, Pin.Type = I/O. RC3, Buffer Type = ST. RC3, Description = Digital I/O.. SCK, Pin Number.SPDIP, SOIC = . SCK, Pin",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . SCK, Pin.Type = I/O. SCK, Buffer Type = ST. SCK, Description = Synchronous serial clock input/output for SPI. SCL, Pin Number.SPDIP, SOIC = . SCL, Pin Number.QFN = . SCL, Pin.Type = I/O. SCL, Buffer Type = ST. SCL, Description = mode. Synchronous serial clock input/output for I 2 C\u2122mode.. RC4/SDI/SDA, Pin Number.SPDIP, SOIC = 15. RC4/SDI/SDA, Pin Number.QFN = 12. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.SPDIP, SOIC = . RC4, Pin Number.QFN = . RC4, Pin.Type = I/O.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC4, Buffer Type = ST. RC4, Description = Digital I/O.. SDI, Pin Number.SPDIP, SOIC = . SDI, Pin Number.QFN = . SDI, Pin.Type = I. SDI, Buffer Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.SPDIP, SOIC = . SDA, Pin Number.QFN = . SDA, Pin.Type = I/O. SDA, Buffer Type = ST. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number.SPDIP, SOIC = 16. RC5/SDO, Pin Number.QFN = 13. RC5/SDO, Pin.Type = . RC5/SDO, Buffer Type = . RC5/SDO, Description = . RC5, Pin Number.SPDIP, SOIC = . RC5, Pin Number.QFN = . RC5, Pin.Type = I/O.",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC5, Buffer Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.SPDIP, SOIC = . SDO, Pin Number.QFN = . SDO, Pin.Type = O. SDO, Buffer Type = -. SDO, Description = SPI data out.. RC6/TX/CK, Pin Number.SPDIP, SOIC = 17. RC6/TX/CK, Pin Number.QFN = 14. RC6/TX/CK, Pin.Type = . RC6/TX/CK, Buffer Type = . RC6/TX/CK, Description = . RC6, Pin Number.SPDIP, SOIC = . RC6, Pin Number.QFN = . RC6, Pin.Type = I/O. RC6, Buffer Type = ST. RC6, Description = Digital I/O.. TX, Pin Number.SPDIP, SOIC = . TX, Pin Number.QFN = . TX, Pin.Type = O. TX, Buffer",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType = -. TX, Description = EUSART asynchronous transmit.. CK, Pin Number.SPDIP, SOIC = . CK, Pin Number.QFN = . CK, Pin.Type = I/O. CK, Buffer Type = ST. CK, Description = EUSART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.SPDIP, SOIC = 18. RC7/RX/DT, Pin Number.QFN = 15. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer Type = . RC7/RX/DT, Description = . RC7, Pin Number.SPDIP, SOIC = . RC7, Pin Number.QFN = . RC7, Pin.Type = I/O. RC7, Buffer Type = ST. RC7, Description = Digital I/O.. RX, Pin Number.SPDIP, SOIC = . RX, Pin",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . RX, Pin.Type = I. RX, Buffer Type = ST. RX, Description = EUSART asynchronous receive.. DT, Pin Number.SPDIP, SOIC = . DT, Pin Number.QFN = . DT, Pin.Type = I/O. DT, Buffer Type = ST. DT, Description = EUSART synchronous data (see related TX/CK).. RE3, Pin Number.SPDIP, SOIC = -. RE3, Pin Number.QFN = -. RE3, Pin.Type = -. RE3, Buffer Type = -. RE3, Description = See MCLR/VPP/RE3 pin.. VSS, Pin Number.SPDIP, SOIC = 8, 19. VSS, Pin Number.QFN = 5, 16. VSS, Pin.Type = P. VSS, Buffer Type = -. VSS, Description = Ground reference for logic and I/O pins..",
    "TABLE 1-3: PIC18F2410/2415/2510/2515/2610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nVDD, Pin Number.SPDIP, SOIC = 20. VDD, Pin Number.QFN = 17. VDD, Pin.Type = P. VDD, Buffer Type = -. VDD, Description = Positive supply for logic and I/O pins.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3 MCLR, Pin Number.PDIP = 1. MCLR/VPP/RE3 MCLR, Pin Number.QFN = 18. MCLR/VPP/RE3 MCLR, Pin Number.TQFP = 18. MCLR/VPP/RE3 MCLR, Pin Type.Pin Type = . MCLR/VPP/RE3 MCLR, Buffer Type.Buffer Type = . MCLR/VPP/RE3 MCLR,  = Master Clear (input) or programming voltage (input). active-low. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin Type.Pin Type = I. , Buffer Type.Buffer Type = ST. ,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS\n= Master Clear (Reset) input. This pin is an. VPP RE3, Pin Number.PDIP = . VPP RE3, Pin Number.QFN = . VPP RE3, Pin Number.TQFP = . VPP RE3, Pin Type.Pin Type = P I. VPP RE3, Buffer Type.Buffer Type = ST. VPP RE3,  = Programming voltage Digital input.. OSC1/CLKI/RA7, Pin Number.PDIP = 13. OSC1/CLKI/RA7, Pin Number.QFN = 32. OSC1/CLKI/RA7, Pin Number.TQFP = 30. OSC1/CLKI/RA7, Pin Type.Pin Type = . OSC1/CLKI/RA7, Buffer Type.Buffer Type = . OSC1/CLKI/RA7,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS\n= Oscillator crystal or external clock input.. CLKI, Pin Number.PDIP = . CLKI, Pin Number.QFN = . CLKI, Pin Number.TQFP = . CLKI, Pin Type.Pin Type = I. CLKI, Buffer Type.Buffer Type = CMOS. CLKI,  = analog otherwise. External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number.PDIP = . RA7, Pin Number.QFN = . RA7, Pin Number.TQFP = . RA7, Pin Type.Pin Type = I/O. RA7, Buffer Type.Buffer Type = TTL. RA7,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS\n= General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number.PDIP = 14. OSC2/CLKO/RA6, Pin Number.QFN = 33. OSC2/CLKO/RA6, Pin Number.TQFP = 31. OSC2/CLKO/RA6, Pin Type.Pin Type = . OSC2/CLKO/RA6, Buffer Type.Buffer Type = . OSC2/CLKO/RA6,  = Oscillator crystal or clock output.. CLKO, Pin Number.PDIP = . CLKO, Pin Number.QFN = . CLKO, Pin Number.TQFP = . CLKO, Pin Type.Pin Type = O. CLKO, Buffer Type.Buffer Type = -. CLKO,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS\n= or resonator in Crystal Oscillator mode. In RC mode, OSC2 pin outputs CLKO, which has 1/4 the frequency of OSC1 and denotes. RA6, Pin Number.PDIP = . RA6, Pin Number.QFN = . RA6, Pin Number.TQFP = . RA6, Pin Type.Pin Type = I/O. RA6, Buffer Type.Buffer Type = TTL. RA6,  = General purpose I/O pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Pin Number.PDIP = 2. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Pin Number.QFN = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Pin Number.TQFP = 19. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Pin.Type = I/O I I/O I I/O I I O I/O I I I/O.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Buffer.Type = TTL Analog. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF- CVREF RA3 AN3 VREF+ RA4 T0CKI C1OUT, Description = PORTA is a bidirectional I/O port. Digital I/O. Analog input 0.. , Pin Number.PDIP = 3. , Pin Number.QFN = 20. , Pin Number.TQFP = 20. , Pin.Type = . , Buffer.Type = TTL Analog. , Description = Digital I/O. Analog input 1.. RA2/AN2/VREF-/CVREF, Pin Number.PDIP = 4. RA2/AN2/VREF-/CVREF, Pin Number.QFN = 21.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA2/AN2/VREF-/CVREF, Pin Number.TQFP = 21. RA2/AN2/VREF-/CVREF, Pin.Type = . RA2/AN2/VREF-/CVREF, Buffer.Type = TTL Analog Analog Analog. RA2/AN2/VREF-/CVREF, Description = Digital I/O. Analog input 2. A/D reference voltage (low) input. Comparator reference voltage output.. RA3/AN3/VREF+, Pin Number.PDIP = 5. RA3/AN3/VREF+, Pin Number.QFN = 22. RA3/AN3/VREF+, Pin Number.TQFP = 22. RA3/AN3/VREF+, Pin.Type = . RA3/AN3/VREF+, Buffer.Type = TTL Analog Analog. RA3/AN3/VREF+, Description = Digital I/O. Analog input 3. A/D reference voltage",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n(high) input.. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Pin Number.PDIP = 6. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Pin Number.QFN = 23. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Pin Number.TQFP = 23. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Pin.Type = I O. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Buffer.Type = ST ST -. RA4/T0CKI/C1OUT C2OUT RA5 AN4 SS HLVDIN C2OUT, Description = Digital I/O. Timer0 external clock input. Comparator 1 output.. RA5/AN4/SS/HLVDIN/ RA6, Pin Number.PDIP",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= 7. RA5/AN4/SS/HLVDIN/ RA6, Pin Number.QFN = 24. RA5/AN4/SS/HLVDIN/ RA6, Pin Number.TQFP = 24. RA5/AN4/SS/HLVDIN/ RA6, Pin.Type = I/O I I I O. RA5/AN4/SS/HLVDIN/ RA6, Buffer.Type = TTL Analog TTL Analog -. RA5/AN4/SS/HLVDIN/ RA6, Description = Digital I/O. Analog input 4. SPI slave select input. High/Low-Voltage Detect input. Comparator 2 output. See the OSC2/CLKO/RA6 pin. See the OSC1/CLKI/RA7 pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.PDIP = . RB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.QFN = 9. RB0/INT0/FLT0/AN12 RB0 INT0, Pin Number.TQFP = 8. RB0/INT0/FLT0/AN12 RB0 INT0, Pin.Type = . RB0/INT0/FLT0/AN12 RB0 INT0, Buffer.Type = . RB0/INT0/FLT0/AN12 RB0 INT0, Description = . , Pin Number.PDIP = 33. , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O I I I. , Buffer.Type = TTL ST. , Description = Digital I/O. External interrupt 0.. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1)",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB4/KBI0/AN11 RB4, Pin Number.PDIP = 35 36. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1) RB4/KBI0/AN11 RB4, Pin Number.QFN = 11 12. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1) RB4/KBI0/AN11 RB4, Pin Number.TQFP = 10. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1) RB4/KBI0/AN11 RB4, Pin.Type = I/O I I. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1) RB4/KBI0/AN11 RB4, Buffer.Type = TTL ST Analog TTL. RB2/INT2/AN8 RB2 INT2 AN8 CCP2 (1) RB4/KBI0/AN11 RB4, Description = Digital",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. External interrupt 2. Analog input 8. Digital I/O.. RB3/AN9/CCP2 RB3 AN9, Pin Number.PDIP = . RB3/AN9/CCP2 RB3 AN9, Pin Number.QFN = . RB3/AN9/CCP2 RB3 AN9, Pin Number.TQFP = 11. RB3/AN9/CCP2 RB3 AN9, Pin.Type = I/O I I/O I/O. RB3/AN9/CCP2 RB3 AN9, Buffer.Type = Analog ST TTL. RB3/AN9/CCP2 RB3 AN9, Description = Analog input 9. Capture 2 input/Compare 2 output/PWM 2 output.. KBI0, Pin Number.PDIP = 37. KBI0, Pin Number.QFN = 14. KBI0, Pin Number.TQFP = 14. KBI0, Pin.Type = I I. KBI0, Buffer.Type",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= TTL Analog. KBI0, Description = Digital I/O. Interrupt-on-change pin.. AN11 RB5/KBI1/PGM RB5, Pin Number.PDIP = . AN11 RB5/KBI1/PGM RB5, Pin Number.QFN = . AN11 RB5/KBI1/PGM RB5, Pin Number.TQFP = 15. AN11 RB5/KBI1/PGM RB5, Pin.Type = . AN11 RB5/KBI1/PGM RB5, Buffer.Type = TTL. AN11 RB5/KBI1/PGM RB5, Description = Analog input 11.. KBI1 PGM, Pin Number.PDIP = 38. KBI1 PGM, Pin Number.QFN = 15 16. KBI1 PGM, Pin Number.TQFP = 16. KBI1 PGM, Pin.Type = I/O I I/O. KBI1 PGM, Buffer.Type = TTL",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nST. KBI1 PGM, Description = Digital I/O. Interrupt-on-change pin. Low-Voltage ICSP\u2122 Programming enable pin.. RB6/KBI2/PGC RB6 KBI2 PGC, Pin Number.PDIP = 39. RB6/KBI2/PGC RB6 KBI2 PGC, Pin Number.QFN = . RB6/KBI2/PGC RB6 KBI2 PGC, Pin Number.TQFP = 17. RB6/KBI2/PGC RB6 KBI2 PGC, Pin.Type = I/O I I/O. RB6/KBI2/PGC RB6 KBI2 PGC, Buffer.Type = TTL TTL ST. RB6/KBI2/PGC RB6 KBI2 PGC, Description = Digital I/O. Interrupt-on-change pin. In-Circuit Debugger and ICSP programming. RB7/KBI3/PGD RB7, Pin Number.PDIP =",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n40. RB7/KBI3/PGD RB7, Pin Number.QFN = 17. RB7/KBI3/PGD RB7, Pin Number.TQFP = . RB7/KBI3/PGD RB7, Pin.Type = I/O. RB7/KBI3/PGD RB7, Buffer.Type = TTL. RB7/KBI3/PGD RB7, Description = clock pin. Digital I/O.. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = TTL. , Description = Interrupt-on-change pin.. KBI3, Pin Number.PDIP = . KBI3, Pin Number.QFN = . KBI3, Pin Number.TQFP = . KBI3, Pin.Type = I. KBI3, Buffer.Type = . KBI3, Description = In-Circuit Debugger and ICSP. , Pin",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = . , Description = . PGD, Pin Number.PDIP = . PGD, Pin Number.QFN = . PGD, Pin Number.TQFP = . PGD, Pin.Type = . PGD, Buffer.Type = ST. PGD, Description = programming data pin.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number.PDIP = 15. RC0/T1OSO/T13CKI, Pin Number.QFN = 34. RC0/T1OSO/T13CKI, Pin Number.TQFP = 32. RC0/T1OSO/T13CKI, Pin.Type = . RC0/T1OSO/T13CKI, Buffer.Type = . RC0/T1OSO/T13CKI, Description = PORTC is a bidirectional I/O port.. RC0, Pin Number.PDIP = . RC0, Pin Number.QFN = . RC0, Pin Number.TQFP = . RC0, Pin.Type = I/O. RC0, Buffer.Type = ST. RC0, Description = Digital I/O.. T1OSO, Pin Number.PDIP = . T1OSO, Pin Number.QFN = . T1OSO, Pin Number.TQFP = . T1OSO, Pin.Type = O.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nT1OSO, Buffer.Type = -. T1OSO, Description = Timer1 oscillator output.. T13CKI, Pin Number.PDIP = . T13CKI, Pin Number.QFN = . T13CKI, Pin Number.TQFP = . T13CKI, Pin.Type = I. T13CKI, Buffer.Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.PDIP = 16. RC1/T1OSI/CCP2, Pin Number.QFN = 35. RC1/T1OSI/CCP2, Pin Number.TQFP = 35. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer.Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.PDIP = . RC1, Pin Number.QFN = . RC1, Pin",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . RC1, Pin.Type = I/O. RC1, Buffer.Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number.PDIP = . T1OSI, Pin Number.QFN = . T1OSI, Pin Number.TQFP = . T1OSI, Pin.Type = I. T1OSI, Buffer.Type = CMOS. T1OSI, Description = Timer1 oscillator input.. CCP2 (2), Pin Number.PDIP = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin Number.TQFP = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer.Type = ST. CCP2 (2), Description = Capture 2 input/Compare 2 output/PWM 2 output.. RC2/CCP1/P1A, Pin Number.PDIP = 17.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC2/CCP1/P1A, Pin Number.QFN = 36. RC2/CCP1/P1A, Pin Number.TQFP = 36. RC2/CCP1/P1A, Pin.Type = . RC2/CCP1/P1A, Buffer.Type = . RC2/CCP1/P1A, Description = . RC2, Pin Number.PDIP = . RC2, Pin Number.QFN = . RC2, Pin Number.TQFP = . RC2, Pin.Type = I/O. RC2, Buffer.Type = ST. RC2, Description = Digital I/O.. CCP1, Pin Number.PDIP = . CCP1, Pin Number.QFN = . CCP1, Pin Number.TQFP = . CCP1, Pin.Type = I/O. CCP1, Buffer.Type = ST. CCP1, Description = Capture1 input/Compare1 output/PWM1 output..",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nP1A, Pin Number.PDIP = . P1A, Pin Number.QFN = . P1A, Pin Number.TQFP = . P1A, Pin.Type = O. P1A, Buffer.Type = -. P1A, Description = Enhanced CCP1 output.. RC3/SCK/SCL, Pin Number.PDIP = 18. RC3/SCK/SCL, Pin Number.QFN = 37. RC3/SCK/SCL, Pin Number.TQFP = 37. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer.Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.PDIP = . RC3, Pin Number.QFN = . RC3, Pin Number.TQFP = . RC3, Pin.Type = I/O. RC3, Buffer.Type = ST. RC3, Description = Digital I/O.. SCK, Pin",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . SCK, Pin Number.QFN = . SCK, Pin Number.TQFP = . SCK, Pin.Type = I/O. SCK, Buffer.Type = ST. SCK, Description = Synchronous serial clock input/output for SPI mode.. SCL, Pin Number.PDIP = . SCL, Pin Number.QFN = . SCL, Pin Number.TQFP = . SCL, Pin.Type = I/O. SCL, Buffer.Type = ST. SCL, Description = 2. , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = . , Buffer.Type = . , Description = Synchronous serial clock input/output for I C\u2122mode.. RC4/SDI/SDA, Pin Number.PDIP = 23. RC4/SDI/SDA, Pin Number.QFN = 42.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC4/SDI/SDA, Pin Number.TQFP = 42. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer.Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.PDIP = . RC4, Pin Number.QFN = . RC4, Pin Number.TQFP = . RC4, Pin.Type = I/O. RC4, Buffer.Type = ST. RC4, Description = Digital I/O.. SDI, Pin Number.PDIP = . SDI, Pin Number.QFN = . SDI, Pin Number.TQFP = . SDI, Pin.Type = I. SDI, Buffer.Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.PDIP = . SDA, Pin Number.QFN = . SDA, Pin Number.TQFP = . SDA, Pin.Type = I/O. SDA,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = ST. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number.PDIP = 24. RC5/SDO, Pin Number.QFN = 43. RC5/SDO, Pin Number.TQFP = 43. RC5/SDO, Pin.Type = . RC5/SDO, Buffer.Type = . RC5/SDO, Description = . RC5, Pin Number.PDIP = . RC5, Pin Number.QFN = . RC5, Pin Number.TQFP = . RC5, Pin.Type = I/O. RC5, Buffer.Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.PDIP = . SDO, Pin Number.QFN = . SDO, Pin Number.TQFP = . SDO, Pin.Type = O. SDO, Buffer.Type = . SDO, Description = SPI data out.. RC6/TX/CK, Pin",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . RC6/TX/CK, Pin Number.QFN = . RC6/TX/CK, Pin Number.TQFP = . RC6/TX/CK, Pin.Type = . RC6/TX/CK, Buffer.Type = -. RC6/TX/CK, Description = . , Pin Number.PDIP = 25. , Pin Number.QFN = 44. , Pin Number.TQFP = 44. , Pin.Type = . , Buffer.Type = . , Description = . RC6, Pin Number.PDIP = . RC6, Pin Number.QFN = . RC6, Pin Number.TQFP = . RC6, Pin.Type = I/O. RC6, Buffer.Type = ST. RC6, Description = Digital I/O.. TX, Pin Number.PDIP = . TX, Pin Number.QFN = . TX, Pin Number.TQFP = . TX, Pin.Type = O. TX, Buffer.Type = -. TX, Description =",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nEUSART asynchronous transmit.. CK, Pin Number.PDIP = . CK, Pin Number.QFN = . CK, Pin Number.TQFP = . CK, Pin.Type = I/O. CK, Buffer.Type = ST. CK, Description = EUSART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.PDIP = 26. RC7/RX/DT, Pin Number.QFN = 1. RC7/RX/DT, Pin Number.TQFP = 1. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer.Type = . RC7/RX/DT, Description = . RC7, Pin Number.PDIP = . RC7, Pin Number.QFN = . RC7, Pin Number.TQFP = . RC7, Pin.Type = I/O. RC7, Buffer.Type = ST. RC7, Description = Digital",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. RX, Pin Number.PDIP = . RX, Pin Number.QFN = . RX, Pin Number.TQFP = . RX, Pin.Type = I. RX, Buffer.Type = ST. RX, Description = EUSART asynchronous receive.. DT, Pin Number.PDIP = . DT, Pin Number.QFN = . DT, Pin Number.TQFP = . DT, Pin.Type = I/O. DT, Buffer.Type = ST. DT, Description = EUSART synchronous data (see related TX/CK).\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP = Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/PSP0 RD0, Pin Number.PDIP = 19. RD0/PSP0 RD0, Pin Number.QFN = 38. RD0/PSP0 RD0, Pin Number.TQFP = 38. RD0/PSP0 RD0, Pin.Type = . RD0/PSP0 RD0, Buffer.Type = . RD0/PSP0 RD0, Description = . , Pin Number.PDIP = . , Pin Number.QFN = . , Pin Number.TQFP = . , Pin.Type = I/O. , Buffer.Type = ST. , Description = Digital I/O.. PSP0, Pin Number.PDIP = . PSP0, Pin Number.QFN = . PSP0, Pin Number.TQFP = . PSP0, Pin.Type = I/O. PSP0, Buffer.Type = TTL. PSP0, Description = Parallel Slave Port data.. RD1/PSP1, Pin Number.PDIP =",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n20. RD1/PSP1, Pin Number.QFN = 39. RD1/PSP1, Pin Number.TQFP = 39. RD1/PSP1, Pin.Type = . RD1/PSP1, Buffer.Type = . RD1/PSP1, Description = . RD1, Pin Number.PDIP = . RD1, Pin Number.QFN = . RD1, Pin Number.TQFP = . RD1, Pin.Type = I/O. RD1, Buffer.Type = ST. RD1, Description = Digital I/O.. PSP1, Pin Number.PDIP = . PSP1, Pin Number.QFN = . PSP1, Pin Number.TQFP = . PSP1, Pin.Type = I/O. PSP1, Buffer.Type = TTL. PSP1, Description = Parallel Slave Port data.. RD2/PSP2, Pin Number.PDIP = 21. RD2/PSP2, Pin",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = 40. RD2/PSP2, Pin Number.TQFP = 40. RD2/PSP2, Pin.Type = . RD2/PSP2, Buffer.Type = . RD2/PSP2, Description = . RD2, Pin Number.PDIP = . RD2, Pin Number.QFN = . RD2, Pin Number.TQFP = . RD2, Pin.Type = I/O. RD2, Buffer.Type = ST. RD2, Description = Digital I/O.. PSP2, Pin Number.PDIP = . PSP2, Pin Number.QFN = . PSP2, Pin Number.TQFP = . PSP2, Pin.Type = I/O. PSP2, Buffer.Type = TTL. PSP2, Description = Parallel Slave Port data.. RD3/PSP3, Pin Number.PDIP = 22. RD3/PSP3, Pin Number.QFN = 41.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD3/PSP3, Pin Number.TQFP = 41. RD3/PSP3, Pin.Type = . RD3/PSP3, Buffer.Type = . RD3/PSP3, Description = . RD3, Pin Number.PDIP = . RD3, Pin Number.QFN = . RD3, Pin Number.TQFP = . RD3, Pin.Type = I/O. RD3, Buffer.Type = ST. RD3, Description = Digital I/O.. PSP3, Pin Number.PDIP = . PSP3, Pin Number.QFN = . PSP3, Pin Number.TQFP = . PSP3, Pin.Type = I/O. PSP3, Buffer.Type = TTL. PSP3, Description = Parallel Slave Port data.. RD4/PSP4, Pin Number.PDIP = 27. RD4/PSP4, Pin Number.QFN = 2. RD4/PSP4, Pin Number.TQFP =",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\n2. RD4/PSP4, Pin.Type = . RD4/PSP4, Buffer.Type = . RD4/PSP4, Description = . RD4, Pin Number.PDIP = . RD4, Pin Number.QFN = . RD4, Pin Number.TQFP = . RD4, Pin.Type = I/O. RD4, Buffer.Type = ST. RD4, Description = Digital I/O. Parallel Slave Port. PSP4, Pin Number.PDIP = . PSP4, Pin Number.QFN = . PSP4, Pin Number.TQFP = . PSP4, Pin.Type = I/O. PSP4, Buffer.Type = TTL. PSP4, Description = data.. RD5/PSP5/P1B, Pin Number.PDIP = 28. RD5/PSP5/P1B, Pin Number.QFN = 3. RD5/PSP5/P1B, Pin Number.TQFP = 3.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD5/PSP5/P1B, Pin.Type = . RD5/PSP5/P1B, Buffer.Type = . RD5/PSP5/P1B, Description = . RD5, Pin Number.PDIP = . RD5, Pin Number.QFN = . RD5, Pin Number.TQFP = . RD5, Pin.Type = I/O. RD5, Buffer.Type = ST. RD5, Description = Digital I/O.. PSP5, Pin Number.PDIP = . PSP5, Pin Number.QFN = . PSP5, Pin Number.TQFP = . PSP5, Pin.Type = I/O. PSP5, Buffer.Type = TTL. PSP5, Description = Parallel Slave Port data.. P1B, Pin Number.PDIP = . P1B, Pin Number.QFN = . P1B, Pin Number.TQFP = . P1B, Pin.Type = O. P1B,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer.Type = -. P1B, Description = Enhanced CCP1 output.. RD6/PSP6/P1C, Pin Number.PDIP = 29. RD6/PSP6/P1C, Pin Number.QFN = 4. RD6/PSP6/P1C, Pin Number.TQFP = 4. RD6/PSP6/P1C, Pin.Type = . RD6/PSP6/P1C, Buffer.Type = . RD6/PSP6/P1C, Description = . RD6, Pin Number.PDIP = . RD6, Pin Number.QFN = . RD6, Pin Number.TQFP = . RD6, Pin.Type = I/O. RD6, Buffer.Type = ST. RD6, Description = Digital I/O.. PSP6, Pin Number.PDIP = . PSP6, Pin Number.QFN = . PSP6, Pin Number.TQFP = . PSP6,",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = I/O. PSP6, Buffer.Type = TTL -. PSP6, Description = Parallel Slave Port data. Enhanced CCP1. P1C, Pin Number.PDIP = . P1C, Pin Number.QFN = . P1C, Pin Number.TQFP = . P1C, Pin.Type = O. P1C, Buffer.Type = . P1C, Description = output.. RD7/PSP7/P1D, Pin Number.PDIP = 30. RD7/PSP7/P1D, Pin Number.QFN = 5. RD7/PSP7/P1D, Pin Number.TQFP = 5. RD7/PSP7/P1D, Pin.Type = . RD7/PSP7/P1D, Buffer.Type = . RD7/PSP7/P1D, Description = . RD7, Pin Number.PDIP = . RD7, Pin Number.QFN = .",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD7, Pin Number.TQFP = . RD7, Pin.Type = . RD7, Buffer.Type = . RD7, Description = Digital I/O.. PSP7, Pin Number.PDIP = . PSP7, Pin Number.QFN = . PSP7, Pin Number.TQFP = . PSP7, Pin.Type = I/O I/O. PSP7, Buffer.Type = ST TTL. PSP7, Description = Parallel Slave Port. P1D, Pin Number.PDIP = . P1D, Pin Number.QFN = . P1D, Pin Number.TQFP = . P1D, Pin.Type = O. P1D, Buffer.Type = -. P1D, Description = data. Enhanced CCP1 output.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n- 2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.PDIP = 8. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.QFN = 25. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin Number.TQFP = 25. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Pin.Type = I/O I I I/O I I. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Buffer.Type = ST TTL Analog ST TTL Analog. RE0/RD/AN5 RE0 RD AN5 RE1 WR AN6 RE2/CS/AN7 RE2 CS, Description = PORTE is",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\na bidirectional I/O port. Digital I/O. Read control for Parallel Slave Port (see also WRand CS pins). Analog input 5.. RE1/WR/AN6, Pin Number.PDIP = 9. RE1/WR/AN6, Pin Number.QFN = 26. RE1/WR/AN6, Pin Number.TQFP = 26. RE1/WR/AN6, Pin.Type = . RE1/WR/AN6, Buffer.Type = . RE1/WR/AN6, Description = Digital I/O. Write control for Parallel Slave Port (see CS and RD pins). Analog input 6.. AN7, Pin Number.PDIP = 10. AN7, Pin Number.QFN = 27. AN7, Pin Number.TQFP = 27. AN7, Pin.Type = I/O I I. AN7, Buffer.Type = ST TTL Analog. AN7, Description = Digital I/O. Chip select control for Parallel (see related RD and",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nWR). Analog input 7. See MCLR/VPP/RE3 pin.. RE3, Pin Number.PDIP = -. RE3, Pin Number.QFN = -. RE3, Pin Number.TQFP = -. RE3, Pin.Type = -. RE3, Buffer.Type = - -. RE3, Description = . VSS, Pin Number.PDIP = 12, 31. VSS, Pin Number.QFN = 6, 30, 31. VSS, Pin Number.TQFP = 6, 29. VSS, Pin.Type = P. VSS, Buffer.Type = . VSS, Description = Ground reference for logic and I/O. VDD, Pin Number.PDIP = 11, 32. VDD, Pin Number.QFN = 7, 8, 28, 29. VDD, Pin Number.TQFP = 7, 28. VDD, Pin.Type = P. VDD, Buffer.Type = -. VDD, Description = Positive supply for logic and",
    "TABLE 1-4: PIC18F4410/4415/4510/4515/4610 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O pins.. NC, Pin Number.PDIP = -. NC, Pin Number.QFN = 13. NC, Pin Number.TQFP = 12,13, 33, 34. NC, Pin.Type = -. NC, Buffer.Type = -. NC, Description = No connect.\nLegend:\nTTL = TTL compatible input\nCMOS = CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "2.1 Oscillator Types\nPIC18F2X1X/4X1X  devices  can  be  operated  in  ten different oscillator modes. The user can program the Configuration  bits,  FOSC3:FOSC0,  in  Configuration Register 1H to select one of these ten modes:\n1. LP\nLow-Power Crystal\n2. XT\nCrystal/Resonator\n3. HS\nHigh-Speed Crystal/Resonator\n4. HSPLL\nHigh-Speed Crystal/Resonator\nwith PLL enabled\n5. RC\nExternal Resistor/Capacitor with FOSC/4 output on RA6\n6. RCIO\nExternal Resistor/Capacitor with I/O on RA6\n7. INTIO1\nInternal Oscillator with FOSC/4 output on RA6 and I/O on RA7\n8. INTIO2\nInternal Oscillator with I/O on RA6 and RA7\n9. EC\nExternal Clock with FOSC/4 output\n10. ECIO\nExternal Clock with I/O on RA6",
    "2.2 Crystal Oscillator/Ceramic Resonators\nIn XT, LP, HS or HSPLL Oscillator modes, a crystal or ceramic  resonator  is  connected  to  the  OSC1  and OSC2 pins to establish  oscillation.  Figure 2-1  shows the pin connections.\nThe oscillator design requires the use of a parallel cut crystal.\nNote:\nUse  of  a  series  cut  crystal  may  give  a frequency out of the crystal manufacturer's specifications.\nFIGURE 2-1:\nCRYSTAL/CERAMIC RESONATOR OPERATION (XT, LP, HS OR HSPLL CONFIGURATION)\nNote 1: See Table 2-1 and Table 2-2 for initial values of C1 and C2.\n2: A series resistor (RS) may be required for AT strip cut crystals.\n3: RF varies with the oscillator mode chosen.",
    "Typical Capacitor Values Used:\nXT, Freq = 3.58 MHz. XT, OSC1 = 15 pF. XT, OSC2 = 15 pF. XT, Freq = 4.19 MHz. XT, OSC1 = 15 pF. XT, OSC2 = 15 pF. XT, Freq = 4 MHz. XT, OSC1 = 30 pF. XT, OSC2 = 30 pF. XT, Freq = 4 MHz. XT, OSC1 = 50 pF. XT, OSC2 = 50 pF",
    "Capacitor values are for design guidance only.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following Table 2-2 for additional information.",
    "Note:\nWhen using  resonators  with  frequencies above  3.5  MHz,  the  use  of  HS  mode, rather  than  XT  mode,  is  recommended. HS  mode  may  be  used  at  any  VDD  for which  the  controller  is  rated.  If  HS  is selected, it is possible that the gain of the oscillator will overdrive the resonator. Therefore,  a  series  resistor  should  be placed  between  the  OSC2  pin  and  the resonator.  As  a  good  starting  point,  the recommended value of RS is 330 \u03a9 .",
    "TABLE 2-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nLP, Crystal Freq.Crystal Freq = 32 kHz. LP, Typical Capacitor Values Tested:.C1 = 30 pF. LP, Typical Capacitor Values Tested:.C2 = 30 pF. XT, Crystal Freq.Crystal Freq = 1 MHz. XT, Typical Capacitor Values Tested:.C1 = 15 pF. XT, Typical Capacitor Values Tested:.C2 = 15 pF. XT, Crystal Freq.Crystal Freq = 4 MHz. XT, Typical Capacitor Values Tested:.C1 = 15 pF. XT, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 4 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 10 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF.",
    "TABLE 2-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nHS, Crystal Freq.Crystal Freq = 20 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF. HS, Crystal Freq.Crystal Freq = 25 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF",
    "Capacitor values are for design guidance only.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following  this  table  for  additional information.\nNote 1: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n2: When operating below 3V VDD, or when using certain  ceramic  resonators  at  any voltage, it may be necessary to use the HS mode or switch to a crystal oscillator.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Rs may be required to avoid overdriving crystals with low drive level specification.\n5: Always verify oscillator performance over the  VDD  and  temperature  range  that  is expected for the application.\nAn external clock source may also be connected to the OSC1 pin in the HS mode, as shown in Figure 2-2.\nFIGURE 2-2:\nEXTERNAL CLOCK INPUT OPERATION (HS OSCILLATOR CONFIGURATION)",
    "2.3 External Clock Input\nThe EC and ECIO Oscillator modes require an external clock source to be connected to the OSC1 pin. There is no  oscillator  start-up  time  required  after  a  Power-on Reset or after an exit from Sleep mode.\nIn  the  EC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 2-3 shows the pin connections for the EC Oscillator mode.",
    "EXTERNAL CLOCK INPUT OPERATION (EC CONFIGURATION)\nThe ECIO Oscillator mode functions like the EC mode, except  that  the  OSC2  pin  becomes  an  additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6). Figure 2-4 shows the pin connections for the ECIO Oscillator mode.",
    "2.4 RC Oscillator\nFor timing insensitive applications, the 'RC'  and 'RCIO'  device  options  offer  additional  cost  savings. The actual oscillator frequency is a function of several factors:\n\u00b7 supply voltage\n\u00b7 values of the external resistor (REXT) and capacitor (CEXT)\n\u00b7 operating temperature\nGiven the same device, operating voltage and temperature and component values, there will also be unit-to-unit frequency variations. These are due to factors such as:\n\u00b7 normal manufacturing variation\n\u00b7 difference in lead frame capacitance between package types (especially for low CEXT values)\n\u00b7 variations within the tolerance of limits of REXT and CEXT\nIn  the  RC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic.  Figure 2-5  shows  how  the  R/C  combination  is connected.",
    "FIGURE 2-5: RC OSCILLATOR MODE\nThe RCIO Oscillator mode (Figure 2-6) functions like the RC mode, except that the OSC2 pin becomes an additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6).",
    "2.5 PLL Frequency Multiplier\nA Phase Locked Loop (PLL) circuit is provided as an option  for  users  who  wish  to  use  a  lower  frequency oscillator circuit or to clock the device up to its highest rated frequency from a crystal oscillator. This may be useful for customers who are concerned with EMI due to high-frequency crystals or users who require higher clock speeds from an internal oscillator.",
    "2.5.1 HSPLL OSCILLATOR MODE\nThe HSPLL mode makes use of the HS mode oscillator for frequencies up to 10 MHz. A PLL then multiplies the oscillator output frequency by 4 to produce an internal clock frequency up to 40 MHz. The PLLEN bit is not available in this oscillator mode.\nThe PLL is only available to the crystal oscillator when the FOSC3:FOSC0 Configuration bits are programmed for HSPLL mode (= 0110 ).",
    "2.5.2 PLL AND INTOSC\nThe PLL is also available to the internal oscillator block in selected oscillator modes. In this configuration, the PLL  is  enabled  in  software  and  generates  a  clock output of up to 32 MHz. The operation of INTOSC with the PLL is described in Section 2.6.4 'PLL in INTOSC Modes' .",
    "2.6 Internal Oscillator Block\nThe  PIC18F2X1X/4X1X  devices  include  an  internal oscillator  block  which  generates  two  different  clock signals;  either  can  be  used  as  the  microcontroller's clock source. This may eliminate the need for external oscillator circuits on the OSC1 and/or OSC2 pins.\nThe main output (INTOSC) is an 8 MHz clock source, which can be used to directly drive the device clock. It also drives a postscaler, which can provide a range of clock frequencies from 31 kHz to 4 MHz. The INTOSC output is enabled when a clock frequency from 125 kHz to 8 MHz is selected.\nThe  other  clock  source  is  the  internal  RC  oscillator (INTRC),  which  provides  a  nominal  31 kHz  output. INTRC is enabled if it is selected as the device clock source; it is also enabled automatically when any of the following are enabled:\n\u00b7 Power-up Timer\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Watchdog Timer\n\u00b7 Two-Speed Start-up\nThese  features  are  discussed  in  greater  detail  in Section 22.0 'Special Features of the CPU' .",
    "2.6 Internal Oscillator Block\nThe  clock  source  frequency  (INTOSC  direct,  INTRC direct or INTOSC postscaler) is selected by configuring the IRCF bits of the OSCCON register (page 32).",
    "2.6.1 INTIO MODES\nUsing the internal oscillator as the clock source eliminates the need for up to two external oscillator pins, which  can  then  be  used  for  digital  I/O.  Two  distinct configurations are available:\n\u00b7 In INTIO1 mode, the OSC2 pin outputs FOSC/4, while OSC1 functions as RA7 for digital input and output.\n\u00b7 In INTIO2 mode, OSC1 functions as RA7 and OSC2 functions as RA6, both for digital input and output.",
    "2.6.2 INTOSC OUTPUT FREQUENCY\nThe internal oscillator block is calibrated at the factory to produce an INTOSC output frequency of 8.0 MHz.\nThe  INTRC  oscillator  operates  independently  of  the INTOSC  source.  Any  changes  in  INTOSC  across voltage and temperature are not necessarily reflected by changes in INTRC and vice versa.",
    "2.6.3 OSCTUNE REGISTER\nThe internal oscillator's output has been calibrated at the factory but can be adjusted in the user's application. This is done by writing to the OSCTUNE register (Register 2-1). The tuning sensitivity is constant throughout the tuning range.\nWhen the OSCTUNE register is modified, the INTOSC frequency will begin shifting to the new frequency. The INTRC  clock  will  reach  the  new  frequency  within 8 clock cycles (approximately 8 * 32 \u03bc s = 256 \u03bc s). The INTOSC clock will stabilize within 1 ms. Code execution continues during this shift. There is no indication that the shift has occurred.\nThe OSCTUNE register also implements the INTSRC and PLLEN bits, which control certain features of the internal oscillator block. The INTSRC bit allows users to  select  which  internal  oscillator  provides  the  clock source when the 31 kHz frequency option is selected. This  is  covered  in  greater  detail  in Section 2.7.1 'Oscillator Control Register' .\nThe PLLEN bit controls the operation of the frequency multiplier, PLL, in Internal Oscillator modes.",
    "2.6.4 PLL IN INTOSC MODES\nThe  4x  frequency  multiplier  can  be  used  with  the internal oscillator block to produce faster device clock speeds  than  are  normally  possible  with  an  internal oscillator.  When  enabled,  the  PLL  produces  a  clock speed of up to 32 MHz.\nUnlike  HSPLL  mode,  the  PLL  is  controlled  through software. The control bit,  PLLEN (OSCTUNE<6>), is used to enable or disable its operation.\nThe PLL is available when the device is configured to use  the  internal  oscillator  block  as  its  primary  clock source (FOSC3:FOSC0 = 1001 or 1000 ). Additionally, the PLL will only function when the selected output frequency is either 4 MHz or 8 MHz (OSCCON<6:4> = 111 or 110 ). If both of these conditions are not met, the PLL is disabled.\nThe  PLLEN  control  bit  is  only  functional  in  those internal Oscillator modes where the PLL is available. In all  other  modes,  it  is  forced  to  ' 0 '  and  is  effectively unavailable.",
    "2.6.5 INTOSC FREQUENCY DRIFT\nThe  factory  calibrates  the  internal  oscillator  block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes, which can affect the controller operation in a variety of ways. It is possible to adjust the INTOSC frequency by modifying the value in the OSCTUNE register. This has no effect on the INTRC clock source frequency.\nTuning the INTOSC source requires knowing when to make the adjustment, in which direction it  should  be made  and  in  some  cases,  how  large  a  change  is needed. Three compensation techniques are discussed  in Section 2.6.5.1  'Compensating  with the  USART' , Section 2.6.5.2  'Compensating  with the  Timers' and Section 2.6.5.3  'Compensating with the CCP Module in Capture Mode' ,  but  other techniques may be used.",
    "OSCTUNE: OSCILLATOR TUNING REGISTER\nR/W-0, 1 = R/W-0 (1). R/W-0, 2 = U-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. INTSRC, 1 = PLLEN (1). INTSRC, 2 = -. INTSRC, 3 = TUN4. INTSRC, 4 = TUN3. INTSRC, 5 = TUN2. INTSRC, 6 = TUN1. INTSRC, 7 = TUN0\nbit 7\nbit 0\nbit 7\nINTSRC: Internal Oscillator Low-Frequency Source Select bit\n1 = 31.25 kHz device clock derived from 8 MHz INTOSC source (divide-by-256 enabled)\n0 =\n31 kHz device clock derived directly from INTRC internal oscillator\nbit 6\nPLLEN: Frequency Multiplier PLL for INTOSC Enable bit (1)",
    "OSCTUNE: OSCILLATOR TUNING REGISTER\n1 = PLL enabled for INTOSC (4 MHz and 8 MHz only)\n0 = PLL disabled\nNote 1: Available only in certain oscillator configurations; otherwise, this bit is unavailable and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' for details.\nbit 5",
    "bit 4-0 TUN4:TUN0: Frequency Tuning bits\n01111 = Maximum frequency\n\u2022\n\u2022\n\u2022\n\u2022\n00001\n00000 = Center frequency. Oscillator module is running at the calibrated frequency.\n11111\n\u2022\n\u2022\n\u2022\n\u2022\n10000 = Minimum frequency",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "2.6.5.1 Compensating with the USART\nAn  adjustment  may  be  required  when  the  USART begins to generate framing errors or receives data with errors  while  in  Asynchronous  mode.  Framing  errors indicate that the device clock frequency is too high; to adjust for  this,  decrement the  value in  OSCTUNE to reduce the clock frequency. On the other hand, errors in data may suggest that the clock speed is too low; to compensate,  increment  OSCTUNE  to  increase  the clock frequency.",
    "2.6.5.2 Compensating with the Timers\nThis technique compares device clock speed to some reference clock. Two timers may be used; one timer is clocked  by  the  peripheral  clock,  while  the  other  is clocked  by  a  fixed  reference  source,  such  as  the Timer1 oscillator.\nBoth timers are cleared, but the timer clocked by the reference  generates  interrupts.  When  an  interrupt occurs,  the  internally  clocked  timer  is  read  and  both timers are cleared. If the internally clocked timer value is  greater  than  expected,  then  the  internal  oscillator block is running too fast. To adjust for this, decrement the OSCTUNE register.",
    "2.6.5.2 Compensating with the Timers\nA  CCP  module  can  use  free  running  Timer1  (or Timer3), clocked by the internal oscillator block and an external  event  with  a  known  period  (i.e.,  AC  power frequency). The time of the first event is captured in the CCPRxH:CCPRxL registers  and  is  recorded  for  use later.  When  the  second  event  causes  a  capture,  the time of the first event is subtracted from the time of the second event. Since the period of the external event is known,  the  time  difference  between  events  can  be calculated.\nIf  the  measured time is much greater than the calculated  time,  the  internal  oscillator  block  is  running  too fast; to compensate, decrement the OSCTUNE register. If the measured time is much less than the calculated time, the internal oscillator block is running too slow; to compensate, increment the OSCTUNE register.",
    "2.7 Clock Sources and Oscillator Switching\nLike previous PIC18 devices, the PIC18F2X1X/4X1X family includes a feature that allows the device clock source to be switched from the main oscillator to an alternate  low-frequency  clock  source.  PIC18F2X1X/ 4X1X devices offer two alternate clock sources. When an  alternate  clock  source  is  enabled,  the  various power-managed operating modes are available.\nEssentially,  there  are  three  clock  sources  for  these devices:\n\u00b7 Primary oscillators\n\u00b7 Secondary oscillators\n\u00b7 Internal oscillator block\nThe primary oscillators include the External Crystal and  Resonator  modes,  the  External  RC  modes,  the External Clock modes and the internal oscillator block. The particular mode is defined by the FOSC3:FOSC0 Configuration  bits.  The  details  of  these  modes  are covered earlier in this chapter.\nThe secondary oscillators are those external sources not  connected  to  the  OSC1  or  OSC2  pins.  These sources  may  continue  to  operate  even  after the controller is placed in a power-managed mode.",
    "2.7 Clock Sources and Oscillator Switching\nPIC18F2X1X/4X1X devices offer the Timer1 oscillator as a secondary oscillator. This oscillator, in all powermanaged modes, is often the time base for functions such as a real-time clock.\nMost often, a 32.768 kHz watch crystal is connected between  the  RC0/T1OSO/T13CKI  and  RC1/T1OSI pins. Like the  LP  mode  oscillator  circuit,  loading capacitors are also connected from each pin to ground.\nThe Timer1 oscillator is discussed in greater detail in Section 11.3 'Timer1 Oscillator' .\nIn addition to being a primary clock source, the internal oscillator  block is  available  as  a  power-managed mode clock source. The INTRC source is also used as the clock source for several special features, such as the WDT and Fail-Safe Clock Monitor.\nThe clock sources for the PIC18F2X1X/4X1X devices are  shown  in  Figure 2-8.  See Section 22.0  'Special Features of the CPU' for Configuration register details.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe OSCCON register (Register 2-2) controls several aspects  of  the  device  clock's  operation,  both  in  full power operation and in power-managed modes.\nThe System Clock Select bits, SCS1:SCS0, select the clock  source.  The  available  clock  sources  are  the primary clock (defined by the FOSC3:FOSC0 Configuration bits), the secondary clock (Timer1 oscillator) and the internal oscillator block. The clock source changes immediately after one or more of the bits is written to, following a brief clock transition interval. The SCS bits are cleared on all forms of Reset.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe Internal Oscillator Frequency Select bits (IRCF2:IRCF0)  select  the  frequency  output  of  the internal oscillator block to drive the device clock. The choices  are  the  INTRC  source,  the  INTOSC  source (8 MHz)  or  one  of  the  frequencies  derived  from  the INTOSC  postscaler (31.25 kHz to 4 MHz). If the internal oscillator block is supplying the device clock, changing the states of these bits will have an immediate  change  on  the  internal  oscillator's  output.  On device  Resets,  the  default  output  frequency  of  the internal oscillator block is set at 1 MHz.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nWhen a nominal output frequency of 31 kHz is selected (IRCF2:IRCF0 = 000 ), users may choose which internal oscillator acts as the source. This is done with the INTSRC bit in the OSCTUNE register (OSCTUNE<7>). Setting this bit selects INTOSC as a 31.25 kHz clock source  by  enabling  the  divide-by-256  output  of  the INTOSC postscaler. Clearing INTSRC selects INTRC (nominally 31 kHz) as the clock source.\nThis option allows users to select the tunable and more precise INTOSC as a clock source, while maintaining power savings with a very low clock speed. Regardless of the setting of INTSRC, INTRC always remains the clock source for features such as the Watchdog Timer and the Fail-Safe Clock Monitor.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe OSTS, IOFS and T1RUN bits indicate which clock source  is  currently  providing  the  device  clock.  The OSTS bit indicates  that  the  Oscillator  Start-up  Timer has timed out and the primary clock is providing the device  clock  in  Primary  Clock  modes.  The  IOFS  bit indicates when the internal oscillator block has stabilized  and  is  providing  the  device  clock  in  RC  Clock modes. The T1RUN bit (T1CON<6>) indicates when the  Timer1  oscillator  is  providing  the  device  clock  in Secondary Clock modes. In power-managed modes, only one of these three bits will be set at any time. If none of these bits are set, the INTRC is providing the clock or the internal oscillator block has just started and is not yet stable.\nThe IDLEN bit determines if the device goes into Sleep mode  or  one  of  the  Idle  modes  when  the SLEEP instruction is executed.\nThe use of the flag and control bits in the OSCCON register  is  discussed  in  more  detail  in Section 3.0 'Power-Managed Modes' .",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nNote 1: The Timer1 oscillator must be enabled to select  the  secondary  clock  source.  The Timer1 oscillator is enabled by setting the T1OSCEN bit in the Timer1 Control register  (T1CON<3>). If the Timer1 oscillator is not enabled, then any attempt to select a secondary clock source will be ignored.\n2: It is recommended that the Timer1 oscillator be operating and stable before selecting the secondary clock source or a very  long  delay  may  occur  while  the Timer1 oscillator starts.",
    "2.7.2 OSCILLATOR TRANSITIONS\nPIC18F2X1X/4X1X devices contain circuitry to prevent clock 'glitches' when switching between clock sources. A  short  pause  in  the  device  clock  occurs  during  the clock switch. The length of this pause is the sum of two cycles of the old clock source and three to four cycles of the new clock source. This formula assumes that the new clock source is stable.\nClock  transitions  are  discussed  in  greater  detail  in Section 3.1.2 'Entering Power-Managed Modes' .",
    "OSCCON: OSCILLATOR CONTROL REGISTER\nR/W-0, 1 = R/W-1. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R (1). R/W-0, 5 = R-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. IDLEN, 1 = IRCF2. IDLEN, 2 = IRCF1. IDLEN, 3 = IRCF0. IDLEN, 4 = OSTS. IDLEN, 5 = IOFS. IDLEN, 6 = SCS1. IDLEN, 7 = SCS0\nbit 7\nbit 0",
    "bit 7 IDLEN: Idle Enable bit\n1 = Device enters Idle mode on SLEEP instruction\n0 = Device enters Sleep mode on SLEEP instruction",
    "bit 6-4 IRCF2:IRCF0: Internal Oscillator Frequency Select bits\n111 = 8 MHz (INTOSC drives clock directly)\n110 = 4 MHz\n101 = 2 MHz\n100 = 1 MHz (3)\n011 = 500 kHz\n010 = 250 kHz\n001 = 125 kHz\n000 = 31 kHz (from either INTOSC/256 or INTRC directly) (2)\nbit 3 OSTS: Oscillator Start-up Time-out Status bit (1)\n1 = Oscillator start-up time-out timer has expired; primary oscillator is running\n0 = Oscillator start-up time-out timer is running; primary oscillator is not ready\nIOFS:\nINTOSC Frequency Stable bit\n1 = INTOSC frequency is stable\n0 = INTOSC frequency is not stable",
    "bit 1-0 SCS1:SCS0: System Clock Select bits\n1x = Internal oscillator block\n01 = Secondary (Timer1) oscillator\n00 = Primary oscillator\nNote 1:\nReset state depends on state of the IESO Configuration bit.\n2: Source selected by the INTSRC bit (OSCTUNE<7>), see text.\n3: Default output frequency of INTOSC on Reset.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 2",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nWhen  PRI_IDLE  mode  is  selected,  the  designated primary oscillator continues to run without interruption. For  all  other  power-managed  modes,  the  oscillator using the OSC1 pin is disabled. The OSC1 pin (and OSC2 pin, if used by the oscillator) will stop oscillating.\nIn Secondary Clock modes (SEC_RUN and SEC_IDLE),  the  Timer1  oscillator  is  operating  and providing the device clock. The Timer1 oscillator may also  run  in  all  power-managed  modes  if  required  to clock Timer1 or Timer3.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nIn Internal Oscillator modes (RC_RUN and RC_IDLE), the internal oscillator block provides the device clock source. The 31 kHz INTRC output can be used directly to  provide  the  clock  and  may  be  enabled  to  support various  special  features,  regardless  of  the  powermanaged mode (see Section 22.2 'Watchdog Timer (WDT)' , Section 22.3  'Two-Speed  Start-up' and Section 22.4  'Fail-Safe  Clock  Monitor' for more information on WDT, Fail-Safe Clock Monitor and TwoSpeed Start-up). The INTOSC output at 8 MHz may be used  directly  to  clock  the  device  or  may  be  divided down by the postscaler. The INTOSC output is disabled if the clock is provided directly from the INTRC output.\nIf  the  Sleep  mode  is  selected,  all  clock  sources  are stopped.  Since  all  the  transistor  switching  currents have been stopped, Sleep mode achieves the lowest current consumption  of  the device (only leakage currents).",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\ntime clock. Other features may be operating that do not require  a  device  clock  source  (i.e.,  SSP  slave,  PSP , INTn  pins  and  others).  Peripherals  that  may  add significant current consumption are listed in Section 25.2 'DC Characteristics'.",
    "2.9 Power-up Delays\nPower-up delays are controlled by two timers, so that no external Reset circuitry is required for most applications.  The  delays  ensure  that  the  device  is  kept  in Reset until the device power supply is stable under normal circumstances and the primary clock is operating and  stable.  For  additional  information  on  power-up delays, see Section 4.5 'Device Reset Timers' .\nThe first timer is the Power-up Timer (PWRT), which provides  a  fixed  delay  on  power-up  (parameter  33, Table 25-10). It is enabled  by  clearing (= 0 ) the PWRTEN Configuration bit.\nThe  second  timer  is  the  Oscillator  Start-up  Timer (OST),  intended  to  keep  the  chip  in  Reset  until  the crystal oscillator is stable (LP , XT and HS modes). The OST  does  this  by  counting  1024  oscillator  cycles before allowing the oscillator to clock the device.\nWhen  the  HSPLL  Oscillator  mode  is  selected,  the device is kept in Reset for an additional 2 ms, following the HS mode OST delay, so the PLL can lock to the incoming clock frequency.",
    "2.9 Power-up Delays\nEnabling any on-chip feature that will  operate during Sleep will increase the current consumed during Sleep. The INTRC is required to support WDT operation. The Timer1 oscillator may be operating to support a real-\nThere  is  a  delay  of  interval  TCSD  (parameter  38, Table 25-10), following POR,  while the controller becomes ready to execute instructions. This delay runs concurrently  with  any  other  delays.  This  may  be  the only delay that occurs when any of the EC, RC or INTIO modes are used as the primary clock source.",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nRC, INTIO1, OSC1 Pin = Floating, external resistor should pull high. RC, INTIO1, OSC2 Pin = At logic low (clock/4 output). RCIO, OSC1 Pin = Floating, external resistor should pull high. RCIO, OSC2 Pin = Configured as PORTA, bit 6. INTIO2, OSC1 Pin = Configured as PORTA, bit 7. INTIO2, OSC2 Pin = Configured as PORTA, bit 6. ECIO, OSC1 Pin = Floating, pulled by external clock. ECIO, OSC2 Pin = Configured as PORTA, bit 6. EC, OSC1 Pin = Floating, pulled by external clock. EC, OSC2 Pin = At logic low (clock/4 output). LP, XT and HS, OSC1 Pin = Feedback inverter disabled at quiescent voltage level. LP, XT and HS, OSC2 Pin = Feedback inverter disabled at quiescent voltage level",
    "TABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\nNote: See Table 4-2 in Section 4.0 'Reset' for time-outs due to Sleep and MCLR Reset.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "3.0 POWER-MANAGED MODES\nPIC18F2X1X/4X1X devices offer a total of seven operating  modes  for  more  efficient  power  management. These modes provide a variety of options for selective power  conservation  in  applications  where  resources may be limited (i.e., battery-powered devices).\nThere are three categories of power-managed modes:\n\u00b7 Run modes\n\u00b7 Idle modes\n\u00b7 Sleep mode\nThese categories define which portions of the device are clocked and sometimes, what speed. The Run and Idle modes may use any of the three available clock sources (primary, secondary or internal oscillator block); the Sleep mode does not use a clock source.\nThe  power-managed  modes  include  several  powersaving features offered on previous PIC \u00ae  devices. One is  the  clock  switching feature, offered in other PIC18 devices, allowing the controller to use the Timer1 oscillator in place of the primary oscillator. Also included is the Sleep mode, offered by all PIC devices, where all device clocks are stopped.",
    "3.1 Selecting Power-Managed Modes\nSelecting a power-managed mode requires two decisions: if  the  CPU  is  to  be  clocked  or  not  and  the selection of a clock source. The IDLEN bit (OSCCON<7>) controls CPU clocking, while the SCS1:SCS0  bits  (OSCCON<1:0>)  select  the  clock source. The individual modes, bit settings, clock sources and affected modules are summarized in Table 3-1.",
    "3.1.1 CLOCK SOURCES\nThe SCS1:SCS0 bits allow the selection of one of three clock sources for power-managed modes. They are:\n\u00b7 the primary clock, as defined by the FOSC3:FOSC0 Configuration bits\n\u00b7 the secondary clock (the Timer1 oscillator)\n\u00b7 the internal oscillator block (for RC modes)",
    "3.1.2 ENTERING POWER-MANAGED MODES\nSwitching from one power-managed mode to another begins by loading the OSCCON register. The SCS1:SCS0 bits select the clock source and determine which Run or Idle mode is to be used. Changing these bits  causes  an  immediate  switch  to  the  new  clock source,  assuming  that  it  is  running.  The  switch  may also  be  subject  to  clock  transition  delays.  These  are discussed  in Section 3.1.3  'Clock  Transitions  and Status Indicators' and subsequent sections.\nEntry  to  the  power-managed  Idle  or  Sleep  modes  is triggered by the execution of a SLEEP instruction. The actual mode that results depends on the status of the IDLEN bit.\nDepending on the  current  mode  and the  mode being switched to, a change to a power-managed mode does not  always  require  setting  all  of  these  bits. Many transitions may be done by changing the oscillator select bits, or changing the IDLEN bit, prior to issuing a SLEEP instruction. If the IDLEN  bit  is already  configured correctly, it may only be necessary to perform a SLEEP instruction to switch to the desired mode.",
    "TABLE 3-1: POWER-MANAGED MODES\nSleep, OSCCON Bits.IDLEN (1) <7> = 0. Sleep, OSCCON Bits.SCS1:SCS0 <1:0> = N/A. Sleep, Module Clocking.CPU = Off. Sleep, Module Clocking.Peripherals = Off. Sleep, Available Clock and Oscillator Source.Available Clock and Oscillator Source = None - All clocks are disabled. PRI_RUN, OSCCON Bits.IDLEN (1) <7> = N/A. PRI_RUN, OSCCON Bits.SCS1:SCS0 <1:0> = 00. PRI_RUN, Module Clocking.CPU = Clocked. PRI_RUN, Module Clocking.Peripherals = Clocked. PRI_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC and Internal Oscillator Block (2) . This is the normal full power execution mode.. SEC_RUN, OSCCON Bits.IDLEN (1) <7> = N/A.",
    "TABLE 3-1: POWER-MANAGED MODES\nSEC_RUN, OSCCON Bits.SCS1:SCS0 <1:0> = 01. SEC_RUN, Module Clocking.CPU = Clocked. SEC_RUN, Module Clocking.Peripherals = Clocked. SEC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_RUN, OSCCON Bits.IDLEN (1) <7> = N/A. RC_RUN, OSCCON Bits.SCS1:SCS0 <1:0> = 1x. RC_RUN, Module Clocking.CPU = Clocked. RC_RUN, Module Clocking.Peripherals = Clocked. RC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2). PRI_IDLE, OSCCON Bits.IDLEN (1) <7> = 1. PRI_IDLE, OSCCON Bits.SCS1:SCS0 <1:0> = 00. PRI_IDLE, Module Clocking.CPU = Off.",
    "TABLE 3-1: POWER-MANAGED MODES\nPRI_IDLE, Module Clocking.Peripherals = Clocked. PRI_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC. SEC_IDLE, OSCCON Bits.IDLEN (1) <7> = 1. SEC_IDLE, OSCCON Bits.SCS1:SCS0 <1:0> = 01. SEC_IDLE, Module Clocking.CPU = Off. SEC_IDLE, Module Clocking.Peripherals = Clocked. SEC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_IDLE, OSCCON Bits.IDLEN (1) <7> = 1. RC_IDLE, OSCCON Bits.SCS1:SCS0 <1:0> = 1x. RC_IDLE, Module Clocking.CPU = Off. RC_IDLE, Module Clocking.Peripherals = Clocked. RC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source =",
    "TABLE 3-1: POWER-MANAGED MODES\nInternal Oscillator Block (2)\nNote 1: IDLEN reflects its value when the SLEEP instruction is executed.\n2: Includes INTOSC and INTOSC postscaler, as well as the INTRC source.",
    "3.1.3 CLOCK TRANSITIONS AND STATUS INDICATORS\nThe length of the transition between clock sources is the sum of two cycles of the old clock source and three to  four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nThree  bits  indicate  the  current  clock  source  and  its status. They are:\n\u00b7 OSTS (OSCCON<3>)\n\u00b7 IOFS (OSCCON<2>)\n\u00b7 T1RUN (T1CON<6>)\nIn general, only one of these bits will be set while in a given  power-managed  mode.  When  the  OSTS  bit  is set,  the  primary  clock  is  providing  the  device  clock. When  the  IOFS  bit  is  set,  the  INTOSC  output  is providing a stable 8 MHz clock source to a divider that actually drives the device clock. When the T1RUN bit is set, the Timer1 oscillator is providing the clock. If none of  these  bits  are  set,  then  either  the  INTRC  clock source is clocking the device, or the INTOSC source is not yet stable.",
    "3.1.3 CLOCK TRANSITIONS AND STATUS INDICATORS\nIf the  internal  oscillator  block  is  configured  as  the primary clock source by the FOSC3:FOSC0 Configuration bits, then both the OSTS and IOFS bits may be set when in PRI_RUN or PRI_IDLE modes. This indicates that the primary clock (INTOSC output) is generating a stable 8 MHz output. Entering another power-managed RC mode at the same frequency would clear the OSTS bit.\nNote 1: Caution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\n2: Executing a SLEEP instruction  does  not necessarily  place  the  device  into  Sleep mode. It acts as the trigger to place the controller  into  either  the  Sleep  mode  or one of the Idle modes, depending on the setting of the IDLEN bit.",
    "3.1.4 MULTIPLE SLEEP COMMANDS\nThe  power-managed  mode  that  is  invoked  with  the SLEEP instruction is determined by the setting of the IDLEN  bit  at  the  time  the  instruction  is  executed.  If another SLEEP instruction is executed, the device will enter the power-managed mode specified by IDLEN at that time. If IDLEN has changed, the device will enter the new power-managed mode specified by the new setting.",
    "3.2 Run Modes\nIn the  Run  modes,  clocks  to  both  the  core  and peripherals are active. The difference between these modes is the clock source.",
    "3.2.1 PRI_RUN MODE\nThe PRI_RUN mode is the normal, full power execution mode  of  the  microcontroller.  This  is  also  the  default mode upon a device Reset, unless Two-Speed Start-up is enabled (see Section 22.3 'Two-Speed Start-up' for details). In this mode, the OSTS bit is set. The IOFS bit  may  be  set  if  the  internal  oscillator  block  is  the primary  clock  source  (see Section 2.7.1  'Oscillator Control Register' ).",
    "3.2.2 SEC_RUN MODE\nThe SEC_RUN mode is the compatible mode to the 'clock switching' feature offered in other PIC18 devices.  In  this  mode,  the  CPU  and  peripherals  are clocked from the Timer1 oscillator. This gives users the option of lower power consumption while still using a high accuracy clock source.\nSEC_RUN mode is entered by setting the SCS1:SCS0 bits to ' 01 '. The device clock source is switched to the Timer1 oscillator (see Figure 3-1), the primary oscillator is shut down, the T1RUN bit (T1CON<6>) is set and the OSTS bit is cleared.\nNote:\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_RUN mode. If  the  T1OSCEN  bit  is  not  set  when  the SCS1:SCS0 bits are set to ' 01 ',  entry  to SEC_RUN  mode  will  not  occur.  If  the Timer1  oscillator  is  enabled  but  not  yet running, device clocks will be delayed until the  oscillator  has  started.  In  such  situations, initial oscillator operation is far from stable  and  unpredictable  operation  may result.",
    "3.2.2 SEC_RUN MODE\nOn transitions from SEC_RUN mode to PRI_RUN, the peripherals and CPU continue to be clocked from the Timer1  oscillator  while  the  primary  clock  is  started. When the primary clock becomes ready, a clock switch back  to  the  primary  clock  occurs  (see  Figure 3-2). When the clock switch is complete, the T1RUN bit is cleared, the OSTS bit is set and the primary clock is providing the clock. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "3.2.3 RC_RUN MODE\nIn RC_RUN  mode,  the  CPU  and  peripherals  are clocked  from  the  internal  oscillator  block  using  the INTOSC multiplexer. In this mode, the primary clock is shut down. When using the INTRC source, this mode provides  the  best  power  conservation  of  all  the  Run modes, while still executing code. It works well for user applications which are not highly timing sensitive or do not require high-speed clocks at all times.\nIf  the  primary  clock  source  is  the  internal  oscillator block (either INTRC  or INTOSC), there are no distinguishable  differences  between  PRI_RUN  and RC_RUN modes during execution. However, a clock switch  delay  will  occur  during  entry  to  and  exit  from RC_RUN mode. Therefore, if the primary clock source is  the  internal  oscillator  block,  the  use  of  RC_RUN mode is not recommended.",
    "3.2.3 RC_RUN MODE\nThis mode is entered by setting SCS1 to ' 1 '. Although it  is  ignored,  it  is  recommended  that  SCS0  also  be cleared; this is to maintain software compatibility with future devices. When the clock source is switched to the INTOSC multiplexer (see Figure 3-3), the primary oscillator is shut down and the OSTS bit is cleared. The IRCF bits may be modified at any time to immediately change the clock speed.",
    "Note:\nCaution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.",
    "PIC18F2X1X/4X1X\nIf  the IRCF bits and the INTSRC bit are all clear, the INTOSC output is not  enabled  and  the  IOFS  bit  will remain clear; there will be no indication of the current clock  source.  The  INTRC  source  is  providing  the device clocks.\nIf the  IRCF  bits  are  changed  from  all  clear  (thus, enabling the INTOSC output) or if INTSRC is set, the IOFS  bit becomes  set  after the INTOSC  output becomes stable. Clocks to the device continue while the  INTOSC  source  stabilizes  after  an  interval  of TIOBST.\nOn transitions from RC_RUN mode to PRI_RUN mode, the device continues to be clocked from the INTOSC multiplexer while the primary clock is started. When the primary  clock  becomes  ready,  a  clock  switch  to  the primary clock occurs (see Figure 3-4). When the clock switch is complete, the IOFS bit is cleared, the OSTS bit is set and the primary clock is providing the device clock. The IDLEN and SCS bits are not affected by the switch. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "PIC18F2X1X/4X1X\nIf the IRCF bits were previously at a non-zero value, or if INTSRC  was  set  before  setting  SCS1  and  the INTOSC source was already stable, the IOFS bit will remain set.",
    "3.3 Sleep Mode\nThe power-managed Sleep mode in the PIC18F2X1X/ 4X1X devices  is  identical  to  the  legacy  Sleep  mode offered in all other PIC devices. It is entered by clearing the IDLEN bit (the default state on device Reset) and executing the SLEEP instruction. This shuts down the selected oscillator (Figure 3-5). All clock source status bits are cleared.\nEntering the Sleep mode from any other mode does not require a clock switch. This is because no clocks are needed once the controller has entered Sleep. If the WDT is selected,  the  INTRC  source  will  continue  to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.3 Sleep Mode\nWhen a wake event occurs in Sleep mode (by interrupt, Reset or WDT time-out), the device will not be clocked until the clock source selected by the SCS1:SCS0 bits becomes ready (see Figure 3-6), or it will be clocked from the internal oscillator block if either the Two-Speed Start-up  or  the  Fail-Safe  Clock  Monitor  are  enabled (see Section 22.0 'Special Features of the CPU' ). In either case, the OSTS bit is set when the primary clock is providing the device clocks. The IDLEN and SCS bits are not affected by the wake-up.",
    "3.4 Idle Modes\nThe  Idle  modes  allow  the  controller's  CPU  to  be selectively shut down while the peripherals continue to operate. Selecting a particular Idle mode allows users to further manage power consumption.\nIf the IDLEN bit is set to a ' 1 ' when a SLEEP instruction is executed, the peripherals will be clocked from the clock source selected using the SCS1:SCS0 bits; however, the CPU will not be clocked. The clock source status bits are not  affected.  Setting  IDLEN  and  executing  a SLEEP instruction provides a quick method of switching from a given Run mode to its corresponding Idle mode.\nIf the WDT is selected, the INTRC source will continue to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "3.4 Idle Modes\nSince the CPU is not executing instructions, the only exits from any of the Idle modes are by interrupt, WDT time-out or a Reset. When a wake event occurs, CPU execution is delayed by an interval of TCSD (parameter 38, Table 25-10) while it becomes ready to execute code. When the CPU begins executing code, it resumes with the same clock source for the current Idle mode. For example, when waking from RC_IDLE mode, the internal oscillator block will clock the CPU and peripherals (in other words, RC_RUN mode). The IDLEN and SCS bits are not affected by the wake-up.\nWhile in any Idle mode or the Sleep mode, a WDT timeout  will  result  in  a  WDT  wake-up  to  the  Run  mode currently specified by the SCS1:SCS0 bits.",
    "FIGURE 3-5: TRANSITION TIMING FOR ENTRY TO SLEEP MODE\nFIGURE 3-6:",
    "3.4.1 PRI_IDLE MODE\nThis mode is unique among the three low-power Idle modes, in that it does not disable the primary device clock. For timing sensitive applications, this allows for the fastest resumption of device operation with its more accurate primary clock source, since the clock source does not have to 'warm up' or transition from another oscillator.\nPRI_IDLE mode is entered from PRI_RUN mode by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first, then  clear  the  SCS  bits  and  execute SLEEP . Although the CPU is disabled, the peripherals continue to be clocked from the primary clock source specified by the FOSC3:FOSC0 Configuration bits. The OSTS bit remains set (see Figure 3-7).",
    "3.4.2 SEC_IDLE MODE\nIn  SEC_IDLE  mode,  the  CPU  is  disabled  but  the peripherals  continue  to  be  clocked  from  the  Timer1 oscillator.  This  mode  is  entered  from  SEC_RUN  by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first, then set SCS1:SCS0 to ' 01 ' and execute SLEEP . When  the  clock  source  is  switched  to  the Timer1 oscillator, the primary oscillator is shut down, the OSTS bit is cleared and the T1RUN bit is set.\nWhen a wake event occurs, the peripherals continue to be clocked from the Timer1 oscillator. After an interval of TCSD following the wake event, the CPU begins executing code being clocked by the Timer1 oscillator. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run (see Figure 3-8).",
    "3.4.2 SEC_IDLE MODE\nWhen a wake event occurs, the CPU is clocked from the primary  clock  source.  A  delay  of  interval  TCSD  is required  between  the  wake  event  and  when  code execution starts. This is required to allow the CPU to become ready to execute instructions. After the wakeup, the OSTS bit remains set. The IDLEN and SCS bits are not affected by the wake-up (see Figure 3-8).\nNote: The  Timer1  oscillator  should  already  be running prior to entering SEC_IDLE mode. If  the  T1OSCEN  bit  is  not  set  when  the SLEEP instruction is executed, the SLEEP instruction  will  be  ignored  and  entry  to SEC_IDLE  mode  will  not  occur.  If  the Timer1  oscillator  is  enabled  but  not  yet running, peripheral clocks will be delayed until  the  oscillator  has  started.  In  such situations, initial oscillator operation is far from  stable  and  unpredictable  operation may result.",
    "3.4.3 RC_IDLE MODE\nIn RC_IDLE mode, the CPU is disabled but the peripherals continue to be clocked from the internal oscillator block using the INTOSC multiplexer. This mode allows for controllable power conservation during Idle periods.\nFrom  RC_RUN,  this  mode  is  entered  by  setting  the IDLEN  bit  and  executing  a SLEEP instruction.  If  the device is in another Run mode, first set IDLEN, then set the SCS1 bit and execute SLEEP . Although its value is ignored, it is recommended that SCS0 also be cleared; this  is  to  maintain  software  compatibility  with  future devices.  The  INTOSC  multiplexer  may  be  used  to select a higher clock frequency by modifying the IRCF bits before executing the SLEEP instruction. When the clock source is switched to the INTOSC multiplexer, the primary  oscillator  is  shut  down  and  the  OSTS  bit  is cleared.",
    "3.4.3 RC_IDLE MODE\nIf  the IRCF bits are set to any non-zero value, or the INTSRC bit is set, the INTOSC output is enabled. The IOFS  bit becomes  set,  after  the INTOSC  output becomes stable, after an interval of TIOBST (parameter 39, Table 25-10). Clocks to the peripherals continue  while  the  INTOSC  source  stabilizes.  If  the IRCF  bits  were  previously  at  a  non-zero  value,  or INTSRC was set before the SLEEP instruction was executed and the INTOSC source was already stable, the IOFS bit will remain set. If the IRCF bits and INTSRC are all clear, the INTOSC output will not be enabled, the IOFS bit will remain clear and there will be no indication of the current clock source.",
    "3.4.3 RC_IDLE MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the INTOSC multiplexer. After a delay of  TCSD  following  the  wake  event,  the  CPU  begins executing  code  being  clocked  by  the  INTOSC  multiplexer. The IDLEN and SCS bits are not affected by the wake-up.  The  INTRC  source  will  continue  to  run  if either  the  WDT  or  the  Fail-Safe  Clock  Monitor  is enabled.",
    "3.5 Exiting Idle and Sleep Modes\nAn exit from Sleep mode or any of the Idle modes is triggered by an interrupt, a Reset or a WDT time-out. This  section  discusses  the  triggers  that  cause  exits from power-managed modes. The clocking subsystem actions are discussed in each of the power-managed modes (see Section 3.2 'Run Modes', Section 3.3 'Sleep Mode' and Section 3.4 'Idle Modes' ).",
    "3.5.1 EXIT BY INTERRUPT\nAny of the available interrupt sources can cause the device to exit from an Idle mode or the Sleep mode to a Run mode. To enable this functionality, an interrupt source must be enabled by setting its enable bit in one of the INTCON or PIE registers. The exit sequence is initiated when the corresponding interrupt flag bit is set.\nOn all exits from Idle or Sleep modes by interrupt, code execution branches to the interrupt vector if the GIE/ GIEH bit (INTCON<7>) is set. Otherwise, code execution  continues  or  resumes  without  branching  (see Section 8.0 'Interrupts' ).\nA fixed delay of interval TCSD following the wake event is required when leaving Sleep and Idle modes. This delay is required for the CPU to prepare for execution. Instruction execution resumes on the first clock cycle following this delay.",
    "3.5.2 EXIT BY WDT TIME-OUT\nA WDT time-out will cause different actions depending on which power-managed mode the device is in when the time-out occurs.\nIf the device is not executing code (all Idle modes and Sleep mode), the time-out will result in an exit from the powe-managed mode (see Section 3.2 'Run Modes' and Section 3.3  'Sleep  Mode' ). If the  device  is executing code (all Run modes), the time-out will result in a WDT Reset (see Section 22.2 'Watchdog Timer (WDT)' ).\nThe WDT  timer and postscaler are cleared by executing a SLEEP or CLRWDT instruction, the loss of a currently selected clock source (if the Fail-Safe Clock Monitor is enabled) and modifying the IRCF bits in the OSCCON register if the internal oscillator block is the device clock source.",
    "3.5.3 EXIT BY RESET\nNormally, the device is held in Reset by the Oscillator Start-up Timer (OST) until the primary clock becomes ready. At that time, the OSTS bit is set and the device begins executing code. If the internal oscillator block is the new clock source, the IOFS bit is set instead.\nThe  exit  delay  time  from  Reset  to  the  start  of  code execution depends on both the clock sources before and after the wake-up and the type of oscillator if the new clock source is the primary clock. Exit delays are summarized in Table 3-2.",
    "3.5.3 EXIT BY RESET\nCode  execution  can  begin  before  the  primary  clock becomes ready. If either the Two-Speed Start-up (see Section 22.3  'Two-Speed  Start-up' ) or Fail-Safe Clock  Monitor  (see Section 22.4  'Fail-Safe  Clock Monitor' ) is enabled, the device may begin execution as soon as the Reset source has cleared. Execution is clocked  by  the  INTOSC  multiplexer  driven  by  the internal  oscillator  block.  Execution  is  clocked  by  the internal  oscillator  block  until  either  the  primary  clock becomes ready or a power-managed mode is entered before the primary clock becomes ready; the primary clock is then shut down.",
    "3.5.4 EXIT WITHOUT AN OSCILLATOR START-UP DELAY\nCertain  exits  from  power-managed  modes  do  not invoke the OST at all. There are two cases:\n\u00b7 PRI_IDLE mode, where the primary clock source is not stopped; and\n\u00b7 the primary clock source is not any of the LP, XT, HS or HSPLL modes.\nIn  these  instances,  the  primary  clock  source  either does not require an oscillator start-up delay since it is already  running  (PRI_IDLE),  or  normally  does  not require an oscillator start-up delay (RC, EC and INTIO Oscillator  modes).  However,  a fixed delay  of  interval TCSD following  the  wake  event  is  still  required  when leaving  Sleep  and  Idle  modes  to  allow  the  CPU  to prepare for  execution.  Instruction  execution  resumes on the first clock cycle following this delay.",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nPrimary Device Clock (PRI_IDLE mode), Clock Source after Wake-up = LP, XT, HS. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status bit (OSCCON) = . Primary Device Clock (PRI_IDLE mode), Clock Source after Wake-up = HSPLL. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status bit (OSCCON) = OSTS. Primary Device Clock (PRI_IDLE mode), Clock Source after Wake-up = EC, RC. Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status bit (OSCCON) = . Primary Device Clock (PRI_IDLE mode), Clock Source after Wake-up = INTRC (1). Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (2). Primary",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nDevice Clock (PRI_IDLE mode), Clock Ready Status bit (OSCCON) = -. Primary Device Clock (PRI_IDLE mode), Clock Source after Wake-up = INTOSC (3). Primary Device Clock (PRI_IDLE mode), Exit Delay = TCSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status bit (OSCCON) = IOFS. T1OSC or INTRC (1), Clock Source after Wake-up = LP, XT, HS. T1OSC or INTRC (1), Exit Delay = TOST (4). T1OSC or INTRC (1), Clock Ready Status bit (OSCCON) = OSTS. T1OSC or INTRC (1), Clock Source after Wake-up = HSPLL. T1OSC or INTRC (1), Exit Delay = TOST + t rc (4). T1OSC or INTRC (1), Clock Ready Status bit (OSCCON) = . T1OSC or INTRC",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\n(1), Clock Source after Wake-up = EC, RC. T1OSC or INTRC (1), Exit Delay = TCSD (2). T1OSC or INTRC (1), Clock Ready Status bit (OSCCON) = . T1OSC or INTRC (1), Clock Source after Wake-up = INTOSC (2). T1OSC or INTRC (1), Exit Delay = TIOBST (5). T1OSC or INTRC (1), Clock Ready Status bit (OSCCON) = IOFS. INTOSC (3), Clock Source after Wake-up = LP, XT, HS. INTOSC (3), Exit Delay = TOST (5). INTOSC (3), Clock Ready Status bit (OSCCON) = OSTS. INTOSC (3), Clock Source after Wake-up = HSPLL. INTOSC (3), Exit Delay = TOST + t rc (4). INTOSC (3), Clock Ready Status bit (OSCCON) =",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\n. INTOSC (3), Clock Source after Wake-up = EC, RC. INTOSC (3), Exit Delay = TCSD (2). INTOSC (3), Clock Ready Status bit (OSCCON) = . INTOSC (3), Clock Source after Wake-up = INTOSC (2). INTOSC (3), Exit Delay = None. INTOSC (3), Clock Ready Status bit (OSCCON) = IOFS. None (Sleep mode), Clock Source after Wake-up = LP, XT, HS. None (Sleep mode), Exit Delay = TOST (4). None (Sleep mode), Clock Ready Status bit (OSCCON) = OSTS. None (Sleep mode), Clock Source after Wake-up = HSPLL. None (Sleep mode), Exit Delay = TOST + t rc (4). None (Sleep mode), Clock Ready Status bit (OSCCON) = . None (Sleep mode), Clock Source after Wake-up = EC, RC. None (Sleep mode), Exit Delay =",
    "TABLE 3-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nTCSD (2). None (Sleep mode), Clock Ready Status bit (OSCCON) = . None (Sleep mode), Clock Source after Wake-up = INTOSC (2). None (Sleep mode), Exit Delay = TIOBST (5). None (Sleep mode), Clock Ready Status bit (OSCCON) = IOFS\nNote 1: In this instance, refers specifically to the 31 kHz INTRC clock source.\n2: TCSD (parameter 38) is a required delay when waking from Sleep and all Idle modes and runs concurrently with any other required delays (see Section 3.4 'Idle Modes' ). On Reset, INTOSC defaults to 1 MHz.\n3: Includes both the INTOSC 8 MHz source and postscaler derived frequencies.\n4: TOST is the Oscillator Start-up Timer (parameter 32). t rc  is the PLL Lock-out Timer (parameter F12); it is also designated as TPLL.\n5: Execution continues during TIOBST (parameter 39), the INTOSC stabilization period.",
    "4.0 RESET\nThe  PIC18F2X1X/4X1X  devices  differentiate  between various kinds of Reset:\na) Power-on Reset (POR)\nb) MCLR Reset during normal operation\nc) MCLR Reset during power-managed modes\nd) Watchdog Timer (WDT) Reset (during execution)\ne) Programmable Brown-out Reset (BOR)\nf) RESET Instruction\ng) Stack Full Reset\nh) Stack Underflow Reset\nThis  section  discusses  Resets  generated  by  MCLR, POR and BOR and covers the operation of the various start-up  timers.  Stack  Reset  events  are  covered  in Section 5.1.2.4 'Stack Full and Underflow Resets' . WDT Resets are covered in Section 22.2 'Watchdog Timer (WDT)' .\nA simplified block diagram of the On-Chip Reset Circuit is shown in Figure 4-1.",
    "4.1 RCON Register\nDevice Reset events are tracked through the RCON register (Register 4-1). The  lower  five  bits  of the register indicate that a specific Reset  event  has occurred. In most cases, these bits can only be cleared by the event and must be set by the application after the event. The state of these flag bits, taken together, can  be  read  to  indicate  the  type  of  Reset  that  just occurred. This is described in more detail in Section 4.6 'Reset State of Registers' .\nThe  RCON  register  also  has  control  bits  for  setting interrupt  priority  (IPEN)  and  software  control  of  the BOR  (SBOREN).  Interrupt  priority  is  discussed  in Section 8.0 'Interrupts' . BOR is covered in Section 4.4 'Brown-out Reset (BOR)' .",
    "SIMPLIFIED BLOCK DIAGRAM OF ON-CHIP RESET CIRCUIT\nNote 1: This is the INTRC source from the internal oscillator block and is separate from the RC oscillator of the CLKI pin.\n2: See Table 4-2 for time-out situations.",
    "RCON: RESET CONTROL REGISTER\nR/W-0, 1 = R/W-1 (1). R/W-0, 2 = U-0. R/W-0, 3 = R/W-1. R/W-0, 4 = R-1. R/W-0, 5 = R-1. R/W-0, 6 = R/W-0 (2). R/W-0, 7 = R/W-0. IPEN, 1 = SBOREN. IPEN, 2 = -. IPEN, 3 = RI. IPEN, 4 = TO. IPEN, 5 = PD. IPEN, 6 = POR. IPEN, 7 = BOR\nbit 7\nbit 0",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)",
    "bit 6 SBOREN: BOR Software Enable bit (1)\nIf BOREN1:BOREN0 = 01 :\n1 = BOR is enabled\n0 = BOR is disabled\nIf BOREN1:BOREN0 = 00 10 , or 11 :\nBit is disabled and read as ' 0 '.",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4 RI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a Brown-out Reset occurs)",
    "bit 3 TO: Watchdog Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred",
    "bit 2 PD: Power-down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Set by execution of the SLEEP instruction",
    "bit 1 POR: Power-on Reset Status bit (2)\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)",
    "bit 0 BOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)\nNote 1: The  SBOREN  bit  is  only  available  when  the  BOREN1:BOREN0  Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: The actual Reset value of POR is determined by the type of device Reset. See the notes  following  this  register  and Section 4.6  'Reset  State  of  Registers' for additional information.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nNote 1: It  is  recommended  that  the  POR  bit  be  set  after  a  Power-on  Reset  has  been detected so that subsequent Power-on Resets may be detected.\n2: Brown-out Reset is said to have occurred when BOR is ' 0 ' and POR is ' 1 ' (assuming that POR was set to ' 1 ' by software immediately after POR).",
    "4.2 Master Clear (MCLR)\nThe  MCLR  pin  provides  a  method  for  triggering  an external Reset of the device. A Reset is generated by holding the pin low. These devices have a noise filter in the MCLR Reset path which detects and ignores small pulses.\nThe MCLR pin is not driven low by any internal Resets, including the WDT.\nIn PIC18F2X1X/4X1X devices, the MCLR input can be disabled  with  the  MCLRE  Configuration  bit.  When MCLR is disabled, the pin becomes a digital input. See Section 9.5  'PORTE,  TRISE  and  LATE  Registers' for more information.",
    "4.3 Power-on Reset (POR)\nA Power-on Reset pulse is generated on-chip whenever  VDD  rises  above  a  certain  threshold.  This allows the device to start in the initialized state when VDD is adequate for operation.\nTo take advantage of the POR circuitry, tie the MCLR pin through a resistor (1 k \u03a9 to 10 k \u03a9 ) to VDD. This will eliminate external RC components usually needed to create a Power-on Reset delay. A minimum rise rate for VDD  is  specified  (parameter  D004).  For  a  slow  rise time, see Figure 4-2.\nWhen the device starts normal operation (i.e., exits the Reset  condition),  device  operating  parameters  (voltage,  frequency,  temperature,  etc.)  must  be  met  to ensure operation. If these conditions are not met, the device  must  be  held  in  Reset  until  the  operating conditions are met.",
    "4.3 Power-on Reset (POR)\nPOR events are captured by the POR bit (RCON<1>). The state of the bit is set to ' 0 ' whenever a POR occurs; it does not change for any other Reset event. POR is not  reset  to  ' 1 '  by  any  hardware  event.  To  capture multiple events, the user manually resets the bit to ' 1 ' in software following any POR.\nFIGURE 4-2:\nEXTERNAL POWER-ON RESET CIRCUIT (FOR SLOW VDD POWER-UP)\nNote 1: External  Power-on  Reset  circuit  is  required only  if  the  VDD  power-up  slope is too  slow. The  diode  D  helps  discharge  the  capacitor quickly when VDD powers down.\n2: R < 40 k \u03a9 is recommended to make sure that the  voltage  drop  across  R  does  not  violate the device's electrical specification.\n3: R1 \u2265 1  k \u03a9 will  limit  any  current  flowing into MCLR from external capacitor C, in the event of MCLR/VPP pin breakdown, due to Electrostatic  Discharge  (ESD)  or  Electrical Overstress (EOS).",
    "4.4 Brown-out Reset (BOR)\nPIC18F2X1X/4X1X devices implement a BOR circuit that provides the user with a number of configuration and power-saving options. The BOR is controlled by the BORV1:BORV0 and BOREN1:BOREN0 Configuration bits. There are a total of four BOR configurations which are summarized in Table 4-1.\nThe BOR threshold is set by the BORV1:BORV0 bits. If BOR  is  enabled  (any  values  of  BOREN1:BOREN0, except ' 00 '), any drop of VDD below VBOR (parameter D005) for greater than TBOR (parameter 35) will reset the device. A Reset may or may not occur if VDD falls below VBOR for less than TBOR. The chip will remain in Brown-out Reset until VDD rises above VBOR.",
    "4.4 Brown-out Reset (BOR)\nIf the Power-up Timer is enabled, it will be invoked after VDD  rises  above  VBOR;  it  then  will  keep  the  chip  in Reset for an additional time delay, TPWRT (parameter 33).  If  VDD  drops  below  VBOR  while  the Power-up Timer is running, the chip will go back into a Brown-out  Reset  and  the  Power-up  Timer  will  be initialized. Once VDD rises above VBOR, the Power-up Timer will execute the additional time delay.\nBOR and the Power-on Timer (PWRT) are independently configured. Enabling BOR Reset does not automatically enable the PWRT.",
    "4.4.1 SOFTWARE ENABLED BOR\nWhen  BOREN1:BOREN0  = 01 , the  BOR  can  be enabled  or  disabled  by  the  user  in  software.  This  is done  with the control bit, SBOREN  (RCON<6>). Setting  SBOREN  enables  the  BOR  to  function  as previously described. Clearing SBOREN disables the BOR entirely.  The  SBOREN bit operates only in this mode; otherwise it is read as ' 0 '.\nPlacing the BOR under software control gives the user the additional flexibility of tailoring the application to its environment without having to reprogram the device to change BOR configuration. It also allows the user to tailor device power consumption in software by eliminating the incremental current that the BOR consumes. While the BOR current is typically very small, it may have some impact in low-power applications.\nNote:\nEven when BOR is under software control, the BOR Reset voltage level is still set by the  BORV1:BORV0 Configuration bits.  It cannot be changed in software.",
    "4.4.2 DETECTING BOR\nWhen BOR is enabled, the BOR bit always resets to ' 0 ' on any BOR or POR event. This makes it difficult to determine if a BOR event has occurred just by reading the state of BOR alone. A more reliable method is to simultaneously check the state of both POR and BOR. This assumes that the POR bit is reset to ' 1 ' in software immediately after any POR event. If BOR is ' 0 '  while POR is ' 1 ', it can be reliably assumed that a BOR event has occurred.",
    "4.4.3 DISABLING BOR IN SLEEP MODE\nWhen  BOREN1:BOREN0  = 10 , the  BOR  remains under  hardware  control  and  operates  as  previously described. Whenever the device enters Sleep mode, however, the BOR is automatically disabled. When the device  returns  to  any  other  operating  mode,  BOR  is automatically re-enabled.\nThis  mode  allows  for  applications  to  recover  from brown-out  situations,  while  actively  executing  code, when the device requires BOR protection the most. At the same time, it saves additional power in Sleep mode by eliminating the small incremental BOR current.",
    "4.4.3 DISABLING BOR IN SLEEP MODE\nTABLE 4-1: BOR CONFIGURATIONS\n\n0, BOR Configuration.BOREN0 = 0. 0, Status of SBOREN.(RCON<6>) = Unavailable. 0, BOR Operation = BOR disabled; must be enabled by reprogramming the Configuration bits.. 0, BOR Configuration.BOREN0 = 1. 0, Status of SBOREN.(RCON<6>) = Available. 0, BOR Operation = BOR enabled in software; operation controlled by SBOREN.. 1, BOR Configuration.BOREN0 = 0. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware in Run and Idle modes, disabled during Sleep mode.. 1, BOR Configuration.BOREN0 = 1. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR enabled in hardware; must be disabled by reprogramming the Configuration bits.",
    "4.5 Device Reset Timers\nPIC18F2X1X/4X1X devices incorporate three separate on-chip timers that help regulate the Power-on Reset process.  Their  main  function  is  to  ensure  that  the device clock is stable before code is executed. These timers are:\n\u00b7 Power-up Timer (PWRT)\n\u00b7 Oscillator Start-up Timer (OST)\n\u00b7 PLL Lock Time-out",
    "4.5.1 POWER-UP TIMER (PWRT)\nThe  Power-up  Timer  (PWRT)  of  PIC18F2X1X/4X1X devices  is  an  11-bit  counter  which  uses  the  INTRC source as the clock input. This yields an approximate time  interval of 2048 x 32 \u03bc s = 65.6 ms.  While  the PWRT is counting, the device is held in Reset.\nThe power-up time delay depends on the INTRC clock and will vary from chip to chip due to temperature and process variation. See DC parameter 33 for details.\nThe  PWRT  is  enabled  by  clearing  the  PWRTEN Configuration bit.",
    "4.5.2 OSCILLATOR START-UP TIMER (OST)\nThe Oscillator Start-up Timer (OST) provides a 1024 oscillator  cycle  (from  OSC1  input)  delay  after  the PWRT delay is over (parameter 33). This ensures that the  crystal  oscillator  or  resonator  has  started  and stabilized.\nThe OST time-out is invoked only for XT, LP, HS and HSPLL modes and only on Power-on Reset, or on exit from most power-managed modes.",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\nHSPLL, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC + 2 ms (2). HSPLL, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC + 2 ms (2). HSPLL, Exit From Power-Managed Mode. = 1024 TOSC + 2 ms (2). HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC. HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC. HS, XT, LP, Exit From Power-Managed Mode. = 1024 TOSC. EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. EC, ECIO, Exit From Power-Managed Mode. = -.",
    "TABLE 4-2: TIME-OUT IN VARIOUS SITUATIONS\nRC, RCIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. RC, RCIO, Exit From Power-Managed Mode. = -. INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 1 = -. INTIO1, INTIO2, Exit From Power-Managed Mode. = -\nNote 1: 66 ms (65.5 ms) is the nominal Power-up Timer (PWRT) delay.\n2: 2 ms is the nominal time required for the PLL to lock.",
    "4.5.3 PLL LOCK TIME-OUT\nWith  the  PLL  enabled  in  its  PLL  mode,  the  time-out sequence following a Power-on Reset is slightly different  from  other  oscillator  modes.  A  separate  timer  is used to provide a fixed time-out that is sufficient for the PLL to lock to the main oscillator frequency. This PLL lock  time-out  (TPLL) is  typically  2  ms and follows  the oscillator start-up time-out.",
    "4.5.4 TIME-OUT SEQUENCE\nOn power-up, the time-out sequence is as follows:\n1. After the POR pulse has cleared, PWRT time-out is invoked (if enabled).\n2. Then, the OST is activated.\nThe total time-out will vary based on oscillator configuration and the status of the PWRT.  Figure 4-3, Figure 4-4,  Figure 4-5,  Figure 4-6  and  Figure 4-7  all depict  time-out  sequences  on  power-up,  with  the Power-up Timer enabled and the device operating in HS  Oscillator  mode.  Figures 4-3  through 4-6  also apply  to  devices  operating  in  XT  or  LP  modes.  For devices in RC mode and with the PWRT disabled, there will be no time-out at all.\nSince the time-outs occur from the POR pulse, if MCLR is kept low long enough, all time-outs will expire. Bringing MCLR  high  will begin execution immediately (Figure 4-5). This is useful for testing purposes or to synchronize more  than one PIC18FXXXX  device operating in parallel.",
    "FIGURE 4-3: TIME-OUT SEQUENCE ON POWER-UP (MCLR TIED TO VDD, VDD RISE < TPWRT)\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "FIGURE 4-6: SLOW RISE TIME (MCLR TIED TO VDD, VDD RISE > TPWRT)\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET\n0V\n5V\nTPWRT\nTOST",
    "TIME-OUT SEQUENCE ON POR W/PLL ENABLED (MCLR TIED TO VDD)\nNote:\nTOST = 1024 clock cycles.\nTPLL \u2248 2 ms max. First three stages of the PWRT timer.",
    "4.6 Reset State of Registers\nMost registers are unaffected by a Reset. Their status is unknown  on  POR  and  unchanged  by  all  other Resets.  The  other  registers  are  forced  to  a  'Reset state' depending on the type of Reset that occurred.\nTable 4-4  describes  the  Reset  states  for  all  of  the Special Function Registers. These are categorized by Power-on  and  Brown-out  Resets,  Master  Clear  and WDT Resets and WDT wake-ups.\nMost  registers  are  not  affected  by  a  WDT  wake-up, since this is viewed as the resumption of normal operation. Status bits from the RCON register, RI, TO, PD, POR and BOR, are set or cleared differently in different Reset situations, as indicated in Table 4-3. These bits are  used  in  software  to  determine  the  nature  of  the Reset.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nPower-on Reset, Program Counter.Program Counter = 0000h. Power-on Reset, RCON Register.SBOREN = 1. Power-on Reset, RCON Register.RI = 1. Power-on Reset, RCON Register.TO = 1. Power-on Reset, RCON Register.PD = 1. Power-on Reset, RCON Register.POR = 0. Power-on Reset, RCON Register.BOR = 0. Power-on Reset, STKPTR Register.STKFUL = 0. Power-on Reset, STKPTR Register.STKUNF = 0. RESET instruction, Program Counter.Program Counter = 0000h. RESET instruction, RCON Register.SBOREN = u (2). RESET instruction, RCON Register.RI = 0. RESET instruction, RCON Register.TO = u. RESET instruction, RCON Register.PD = u. RESET instruction, RCON Register.POR = u. RESET instruction, RCON Register.BOR = u. RESET instruction, STKPTR Register.STKFUL = u. RESET instruction,",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nSTKPTR Register.STKUNF = u. Brown-out Reset, Program Counter.Program Counter = 0000h. Brown-out Reset, RCON Register.SBOREN = u (2). Brown-out Reset, RCON Register.RI = 1. Brown-out Reset, RCON Register.TO = 1. Brown-out Reset, RCON Register.PD = 1. Brown-out Reset, RCON Register.POR = u. Brown-out Reset, RCON Register.BOR = 0. Brown-out Reset, STKPTR Register.STKFUL = u. Brown-out Reset, STKPTR Register.STKUNF = u. MCLR during power-managed Run modes, Program Counter.Program Counter = 0000h. MCLR during power-managed Run modes, RCON Register.SBOREN = u (2). MCLR during power-managed Run modes, RCON Register.RI = u. MCLR during power-managed Run modes, RCON Register.TO = 1. MCLR during power-managed Run modes, RCON Register.PD =",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nu. MCLR during power-managed Run modes, RCON Register.POR = u. MCLR during power-managed Run modes, RCON Register.BOR = u. MCLR during power-managed Run modes, STKPTR Register.STKFUL = u. MCLR during power-managed Run modes, STKPTR Register.STKUNF = u. MCLR during power-managed Idle modes and Sleep mode, Program Counter.Program Counter = 0000h. MCLR during power-managed Idle modes and Sleep mode, RCON Register.SBOREN = u (2). MCLR during power-managed Idle modes and Sleep mode, RCON Register.RI = u. MCLR during power-managed Idle modes and Sleep mode, RCON Register.TO = 1. MCLR during power-managed Idle modes and Sleep mode, RCON Register.PD = 0. MCLR during power-managed Idle modes and Sleep mode, RCON Register.POR = u. MCLR during power-managed Idle modes and Sleep mode, RCON Register.BOR = u. MCLR during power-managed Idle modes and",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nSleep mode, STKPTR Register.STKFUL = u. MCLR during power-managed Idle modes and Sleep mode, STKPTR Register.STKUNF = u. WDT time-out during full power or power-managed Run mode, Program Counter.Program Counter = 0000h. WDT time-out during full power or power-managed Run mode, RCON Register.SBOREN = u (2). WDT time-out during full power or power-managed Run mode, RCON Register.RI = u. WDT time-out during full power or power-managed Run mode, RCON Register.TO = 0. WDT time-out during full power or power-managed Run mode, RCON Register.PD = u. WDT time-out during full power or power-managed Run mode, RCON Register.POR = u. WDT time-out during full power or power-managed Run mode, RCON Register.BOR = u. WDT time-out during full power or power-managed Run mode, STKPTR Register.STKFUL = u.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nWDT time-out during full power or power-managed Run mode, STKPTR Register.STKUNF = u. MCLR during full power execution, Program Counter.Program Counter = 0000h. MCLR during full power execution, RCON Register.SBOREN = u (2). MCLR during full power execution, RCON Register.RI = u. MCLR during full power execution, RCON Register.TO = u. MCLR during full power execution, RCON Register.PD = u. MCLR during full power execution, RCON Register.POR = u. MCLR during full power execution, RCON Register.BOR = u. MCLR during full power execution, STKPTR Register.STKFUL = u. MCLR during full power execution, STKPTR Register.STKUNF = u. Stack Full Reset (STVREN = 1 ), Program Counter.Program Counter = 0000h. Stack Full Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Full Reset (STVREN = 1 ),",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nRCON Register.RI = u. Stack Full Reset (STVREN = 1 ), RCON Register.TO = u. Stack Full Reset (STVREN = 1 ), RCON Register.PD = u. Stack Full Reset (STVREN = 1 ), RCON Register.POR = u. Stack Full Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKFUL = 1. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKUNF = u. Stack Underflow Reset (STVREN = 1 ), Program Counter.Program Counter = 0000h. Stack Underflow Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Underflow Reset (STVREN = 1 ), RCON Register.RI = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.TO = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.PD =",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nu. Stack Underflow Reset (STVREN = 1 ), RCON Register.POR = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKFUL = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKUNF = 1. Stack Underflow Error (not an actual Reset, STVREN = 0 ), Program Counter.Program Counter = 0000h. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.SBOREN = u (2). Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.RI = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.TO = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.PD = u. Stack Underflow Error (not an actual Reset, STVREN",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 0 ), RCON Register.POR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.BOR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKFUL = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKUNF = 1. WDT Time-out during power-managed Idle or Sleep modes, Program Counter.Program Counter = PC + 2. WDT Time-out during power-managed Idle or Sleep modes, RCON Register.SBOREN = u (2). WDT Time-out during power-managed Idle or Sleep modes, RCON Register.RI = u. WDT Time-out during power-managed Idle or Sleep modes, RCON Register.TO = 0. WDT Time-out during power-managed Idle or Sleep modes, RCON Register.PD = 0. WDT Time-out during power-managed Idle or Sleep modes, RCON Register.POR = u.",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nWDT Time-out during power-managed Idle or Sleep modes, RCON Register.BOR = u. WDT Time-out during power-managed Idle or Sleep modes, STKPTR Register.STKFUL = u. WDT Time-out during power-managed Idle or Sleep modes, STKPTR Register.STKUNF = u. Interrupt exit from power-managed modes, Program Counter.Program Counter = PC + 2 (1). Interrupt exit from power-managed modes, RCON Register.SBOREN = u (2). Interrupt exit from power-managed modes, RCON Register.RI = u. Interrupt exit from power-managed modes, RCON Register.TO = u. Interrupt exit from power-managed modes, RCON Register.PD = 0. Interrupt exit from power-managed modes, RCON Register.POR = u. Interrupt exit from power-managed modes, RCON Register.BOR = u. Interrupt exit from power-managed modes, STKPTR Register.STKFUL = u. Interrupt exit from power-managed modes, STKPTR Register.STKUNF",
    "TABLE 4-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= u\nLegend:\nu = unchanged\nNote 1: When the wake-up is due to an interrupt and the GIEH or GIEL bits are set, the PC is loaded with the interrupt vector (008h or 0018h).\n2: Reset state is ' 1 ' for POR and unchanged for all other Resets when software BOR is enabled (BOREN1:BOREN0 Configuration bits = 01 and SBOREN = 1 ); otherwise, the Reset state is ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSU, Applicable = 2410. TOSU, Applicable = 2510. TOSU, Applicable = 2515. TOSU, Applicable = 2610. TOSU, Devices = 4410. TOSU, Applicable = 4510. TOSU, Applicable = 4515. TOSU, Applicable = 4610. TOSU, Power-on Reset, Brown-out Reset = ---0. TOSU, Power-on Reset, Brown-out Reset = 0000. TOSU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0. TOSU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TOSU, Wake-up via WDT or Interrupt = ---0 uuuu. TOSU, Wake-up via WDT or Interrupt = . TOSH, Applicable = 2410. TOSH, Applicable = 2510. TOSH, Applicable = 2515. TOSH, Applicable = 2610. TOSH, Devices = 4410. TOSH, Applicable = 4510. TOSH, Applicable = 4515. TOSH, Applicable = 4610. TOSH,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPower-on Reset, Brown-out Reset = 0000. TOSH, Power-on Reset, Brown-out Reset = 0000. TOSH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TOSH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TOSH, Wake-up via WDT or Interrupt = uuuu uuuu. TOSH, Wake-up via WDT or Interrupt = . TOSL, Applicable = 2410. TOSL, Applicable = 2510. TOSL, Applicable = 2515. TOSL, Applicable = 2610. TOSL, Devices = 4410. TOSL, Applicable = 4510. TOSL, Applicable = 4515. TOSL, Applicable = 4610. TOSL, Power-on Reset, Brown-out Reset = 0000. TOSL, Power-on Reset, Brown-out Reset = 0000. TOSL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TOSL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n0000. TOSL, Wake-up via WDT or Interrupt = uuuu uuuu. TOSL, Wake-up via WDT or Interrupt = . STKPTR, Applicable = 2410. STKPTR, Applicable = 2510. STKPTR, Applicable = 2515. STKPTR, Applicable = 2610. STKPTR, Devices = 4410. STKPTR, Applicable = 4510. STKPTR, Applicable = 4515. STKPTR, Applicable = 4610. STKPTR, Power-on Reset, Brown-out Reset = 00-0. STKPTR, Power-on Reset, Brown-out Reset = 0000. STKPTR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu-0. STKPTR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. STKPTR, Wake-up via WDT or Interrupt = uu-u uuuu. STKPTR, Wake-up via WDT or Interrupt = .",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPCLATU, Applicable = 2410. PCLATU, Applicable = 2510. PCLATU, Applicable = 2515. PCLATU, Applicable = 2610. PCLATU, Devices = 4410. PCLATU, Applicable = 4510. PCLATU, Applicable = 4515. PCLATU, Applicable = 4610. PCLATU, Power-on Reset, Brown-out Reset = ---0. PCLATU, Power-on Reset, Brown-out Reset = 0000. PCLATU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---0. PCLATU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PCLATU, Wake-up via WDT or Interrupt = ---u uuuu. PCLATU, Wake-up via WDT or Interrupt = . PCLATH, Applicable = 2410. PCLATH, Applicable = 2510. PCLATH, Applicable = 2515. PCLATH, Applicable = 2610. PCLATH, Devices = 4410. PCLATH, Applicable =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n4510. PCLATH, Applicable = 4515. PCLATH, Applicable = 4610. PCLATH, Power-on Reset, Brown-out Reset = 0000. PCLATH, Power-on Reset, Brown-out Reset = 0000. PCLATH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PCLATH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PCLATH, Wake-up via WDT or Interrupt = uuuu uuuu. PCLATH, Wake-up via WDT or Interrupt = . PCL, Applicable = 2410. PCL, Applicable = 2510. PCL, Applicable = 2515. PCL, Applicable = 2610. PCL, Devices = 4410. PCL, Applicable = 4510. PCL, Applicable = 4515. PCL, Applicable = 4610. PCL, Power-on Reset, Brown-out Reset = 0000. PCL, Power-on Reset, Brown-out Reset = 0000. PCL, MCLR Resets, WDT Reset,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nRESET Instruction, Stack Resets = 0000. PCL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PCL, Wake-up via WDT or Interrupt = PC + 2 (2). PCL, Wake-up via WDT or Interrupt = . TBLPTRU, Applicable = 2410. TBLPTRU, Applicable = 2510. TBLPTRU, Applicable = 2515. TBLPTRU, Applicable = 2610. TBLPTRU, Devices = 4410. TBLPTRU, Applicable = 4510. TBLPTRU, Applicable = 4515. TBLPTRU, Applicable = 4610. TBLPTRU, Power-on Reset, Brown-out Reset = --00. TBLPTRU, Power-on Reset, Brown-out Reset = 0000. TBLPTRU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. TBLPTRU, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TBLPTRU, Wake-up via WDT or Interrupt =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n--uu uuuu. TBLPTRU, Wake-up via WDT or Interrupt = . TBLPTRH, Applicable = 2410. TBLPTRH, Applicable = 2510. TBLPTRH, Applicable = 2515. TBLPTRH, Applicable = 2610. TBLPTRH, Devices = 4410. TBLPTRH, Applicable = 4510. TBLPTRH, Applicable = 4515. TBLPTRH, Applicable = 4610. TBLPTRH, Power-on Reset, Brown-out Reset = 0000. TBLPTRH, Power-on Reset, Brown-out Reset = 0000. TBLPTRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TBLPTRH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TBLPTRH, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRH, Wake-up via WDT or Interrupt = . TBLPTRL, Applicable = 2410. TBLPTRL, Applicable =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n2510. TBLPTRL, Applicable = 2515. TBLPTRL, Applicable = 2610. TBLPTRL, Devices = 4410. TBLPTRL, Applicable = 4510. TBLPTRL, Applicable = 4515. TBLPTRL, Applicable = 4610. TBLPTRL, Power-on Reset, Brown-out Reset = 0000. TBLPTRL, Power-on Reset, Brown-out Reset = 0000. TBLPTRL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TBLPTRL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TBLPTRL, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRL, Wake-up via WDT or Interrupt = . TABLAT, Applicable = 2410. TABLAT, Applicable = 2510. TABLAT, Applicable = 2515. TABLAT, Applicable = 2610. TABLAT, Devices = 4410. TABLAT, Applicable = 4510. TABLAT, Applicable = 4515. TABLAT, Applicable",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= 4610. TABLAT, Power-on Reset, Brown-out Reset = 0000. TABLAT, Power-on Reset, Brown-out Reset = 0000. TABLAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TABLAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TABLAT, Wake-up via WDT or Interrupt = uuuu uuuu. TABLAT, Wake-up via WDT or Interrupt = . PRODH, Applicable = 2410. PRODH, Applicable = 2510. PRODH, Applicable = 2515. PRODH, Applicable = 2610. PRODH, Devices = 4410. PRODH, Applicable = 4510. PRODH, Applicable = 4515. PRODH, Applicable = 4610. PRODH, Power-on Reset, Brown-out Reset = xxxx. PRODH, Power-on Reset, Brown-out Reset = xxxx. PRODH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. PRODH, MCLR Resets, WDT",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nReset, RESET Instruction, Stack Resets = uuuu. PRODH, Wake-up via WDT or Interrupt = uuuu uuuu. PRODH, Wake-up via WDT or Interrupt = . PRODL, Applicable = 2410. PRODL, Applicable = 2510. PRODL, Applicable = 2515. PRODL, Applicable = 2610. PRODL, Devices = 4410. PRODL, Applicable = 4510. PRODL, Applicable = 4515. PRODL, Applicable = 4610. PRODL, Power-on Reset, Brown-out Reset = xxxx. PRODL, Power-on Reset, Brown-out Reset = xxxx. PRODL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. PRODL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. PRODL, Wake-up via WDT or Interrupt = uuuu uuuu. PRODL, Wake-up via WDT or Interrupt = . INTCON, Applicable = 2410. INTCON, Applicable = 2510. INTCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nApplicable = 2515. INTCON, Applicable = 2610. INTCON, Devices = 4410. INTCON, Applicable = 4510. INTCON, Applicable = 4515. INTCON, Applicable = 4610. INTCON, Power-on Reset, Brown-out Reset = 0000. INTCON, Power-on Reset, Brown-out Reset = 000x. INTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. INTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 000u. INTCON, Wake-up via WDT or Interrupt = uuuu uuuu. INTCON, Wake-up via WDT or Interrupt = . INTCON2, Applicable = 2410. INTCON2, Applicable = 2510. INTCON2, Applicable = 2515. INTCON2, Applicable = 2610. INTCON2, Devices = 4410. INTCON2, Applicable = 4510. INTCON2, Applicable = 4515. INTCON2, Applicable = 4610. INTCON2, Power-on Reset, Brown-out Reset = 1111.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nINTCON2, Power-on Reset, Brown-out Reset = -1-1. INTCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111. INTCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -1-1. INTCON2, Wake-up via WDT or Interrupt = uuuu -u-u. INTCON2, Wake-up via WDT or Interrupt = . INTCON3, Applicable = 2410. INTCON3, Applicable = 2510. INTCON3, Applicable = 2515. INTCON3, Applicable = 2610. INTCON3, Devices = 4410. INTCON3, Applicable = 4510. INTCON3, Applicable = 4515. INTCON3, Applicable = 4610. INTCON3, Power-on Reset, Brown-out Reset = 11-0. INTCON3, Power-on Reset, Brown-out Reset = 0-00. INTCON3, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-0. INTCON3, MCLR Resets,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nWDT Reset, RESET Instruction, Stack Resets = 0-00. INTCON3, Wake-up via WDT or Interrupt = uu-u u-uu. INTCON3, Wake-up via WDT or Interrupt = . INDF0, Applicable = 2410. INDF0, Applicable = 2510. INDF0, Applicable = 2515. INDF0, Applicable = 2610. INDF0, Devices = 4410. INDF0, Applicable = 4510. INDF0, Applicable = 4515. INDF0, Applicable = 4610. INDF0, Power-on Reset, Brown-out Reset = N/A. INDF0, Power-on Reset, Brown-out Reset = . INDF0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . INDF0, Wake-up via WDT or Interrupt = N/A. INDF0, Wake-up via WDT or Interrupt = . POSTINC0, Applicable = 2410.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPOSTINC0, Applicable = 2510. POSTINC0, Applicable = 2515. POSTINC0, Applicable = 2610. POSTINC0, Devices = 4410. POSTINC0, Applicable = 4510. POSTINC0, Applicable = 4515. POSTINC0, Applicable = 4610. POSTINC0, Power-on Reset, Brown-out Reset = N/A. POSTINC0, Power-on Reset, Brown-out Reset = . POSTINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . POSTINC0, Wake-up via WDT or Interrupt = N/A. POSTINC0, Wake-up via WDT or Interrupt = . POSTDEC0, Applicable = 2410. POSTDEC0, Applicable = 2510. POSTDEC0, Applicable = 2515. POSTDEC0, Applicable = 2610. POSTDEC0, Devices = 4410. POSTDEC0, Applicable = 4510.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPOSTDEC0, Applicable = 4515. POSTDEC0, Applicable = 4610. POSTDEC0, Power-on Reset, Brown-out Reset = . POSTDEC0, Power-on Reset, Brown-out Reset = N/A. POSTDEC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . POSTDEC0, Wake-up via WDT or Interrupt = N/A. POSTDEC0, Wake-up via WDT or Interrupt = . PREINC0, Applicable = 2410. PREINC0, Applicable = 2510. PREINC0, Applicable = 2515. PREINC0, Applicable = 2610. PREINC0, Devices = 4410. PREINC0, Applicable = 4510. PREINC0, Applicable = 4515. PREINC0, Applicable = 4610. PREINC0, Power-on Reset, Brown-out Reset = . PREINC0, Power-on Reset, Brown-out Reset",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= N/A. PREINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . PREINC0, Wake-up via WDT or Interrupt = N/A. PREINC0, Wake-up via WDT or Interrupt = . PLUSW0, Applicable = 2410. PLUSW0, Applicable = 2510. PLUSW0, Applicable = 2515. PLUSW0, Applicable = 2610. PLUSW0, Devices = 4410. PLUSW0, Applicable = 4510. PLUSW0, Applicable = 4515. PLUSW0, Applicable = 4610. PLUSW0, Power-on Reset, Brown-out Reset = . PLUSW0, Power-on Reset, Brown-out Reset = N/A. PLUSW0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . PLUSW0, Wake-up via WDT",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nor Interrupt = N/A. PLUSW0, Wake-up via WDT or Interrupt = . FSR0H, Applicable = 2410. FSR0H, Applicable = 2510. FSR0H, Applicable = 2515. FSR0H, Applicable = 2610. FSR0H, Devices = 4410. FSR0H, Applicable = 4510. FSR0H, Applicable = 4515. FSR0H, Applicable = 4610. FSR0H, Power-on Reset, Brown-out Reset = ----. FSR0H, Power-on Reset, Brown-out Reset = 0000. FSR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ----. FSR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. FSR0H, Wake-up via WDT or Interrupt = ---- uuuu. FSR0H, Wake-up via WDT or Interrupt = . FSR0L, Applicable = 2410. FSR0L, Applicable =",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n2510. FSR0L, Applicable = 2515. FSR0L, Applicable = 2610. FSR0L, Devices = 4410. FSR0L, Applicable = 4510. FSR0L, Applicable = 4515. FSR0L, Applicable = 4610. FSR0L, Power-on Reset, Brown-out Reset = xxxx. FSR0L, Power-on Reset, Brown-out Reset = xxxx. FSR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. FSR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. FSR0L, Wake-up via WDT or Interrupt = uuuu uuuu. FSR0L, Wake-up via WDT or Interrupt = . WREG, Applicable = 2410. WREG, Applicable = 2510. WREG, Applicable = 2515. WREG, Applicable = 2610. WREG, Devices = 4410. WREG, Applicable = 4510. WREG, Applicable = 4515.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nWREG, Applicable = 4610. WREG, Power-on Reset, Brown-out Reset = xxxx. WREG, Power-on Reset, Brown-out Reset = xxxx. WREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. WREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. WREG, Wake-up via WDT or Interrupt = uuuu uuuu. WREG, Wake-up via WDT or Interrupt = . INDF1, Applicable = 2410. INDF1, Applicable = 2510. INDF1, Applicable = 2515. INDF1, Applicable = 2610. INDF1, Devices = 4410. INDF1, Applicable = 4510. INDF1, Applicable = 4515. INDF1, Applicable = 4610. INDF1, Power-on Reset, Brown-out Reset = . INDF1, Power-on Reset, Brown-out Reset = N/A. INDF1, MCLR Resets, WDT Reset, RESET Instruction, Stack",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nResets = N/A. INDF1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . INDF1, Wake-up via WDT or Interrupt = N/A. INDF1, Wake-up via WDT or Interrupt = . POSTINC1, Applicable = 2410. POSTINC1, Applicable = 2510. POSTINC1, Applicable = 2515. POSTINC1, Applicable = 2610. POSTINC1, Devices = 4410. POSTINC1, Applicable = 4510. POSTINC1, Applicable = 4515. POSTINC1, Applicable = 4610. POSTINC1, Power-on Reset, Brown-out Reset = . POSTINC1, Power-on Reset, Brown-out Reset = N/A. POSTINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . POSTINC1, Wake-up via WDT or Interrupt = N/A. POSTINC1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nWake-up via WDT or Interrupt = . POSTDEC1, Applicable = 2410. POSTDEC1, Applicable = 2510. POSTDEC1, Applicable = 2515. POSTDEC1, Applicable = 2610. POSTDEC1, Devices = 4410. POSTDEC1, Applicable = 4510. POSTDEC1, Applicable = 4515. POSTDEC1, Applicable = 4610. POSTDEC1, Power-on Reset, Brown-out Reset = . POSTDEC1, Power-on Reset, Brown-out Reset = N/A. POSTDEC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . POSTDEC1, Wake-up via WDT or Interrupt = N/A. POSTDEC1, Wake-up via WDT or Interrupt = . PREINC1, Applicable = 2410. PREINC1, Applicable = 2510. PREINC1, Applicable = 2515. PREINC1, Applicable = 2610.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPREINC1, Devices = 4410. PREINC1, Applicable = 4510. PREINC1, Applicable = 4515. PREINC1, Applicable = 4610. PREINC1, Power-on Reset, Brown-out Reset = . PREINC1, Power-on Reset, Brown-out Reset = N/A. PREINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . PREINC1, Wake-up via WDT or Interrupt = N/A. PREINC1, Wake-up via WDT or Interrupt = . PLUSW1, Applicable = 2410. PLUSW1, Applicable = 2510. PLUSW1, Applicable = 2515. PLUSW1, Applicable = 2610. PLUSW1, Devices = 4410. PLUSW1, Applicable = 4510. PLUSW1, Applicable = 4515. PLUSW1, Applicable = 4610. PLUSW1, Power-on Reset, Brown-out Reset = .",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPLUSW1, Power-on Reset, Brown-out Reset = N/A. PLUSW1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = . PLUSW1, Wake-up via WDT or Interrupt = N/A. PLUSW1, Wake-up via WDT or Interrupt = \nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nFSR1H,  = 2410. FSR1H,  = 2510. FSR1H,  = 2515. FSR1H, Applicable = 2610. FSR1H, Devices = 4410. FSR1H,  = 4510. FSR1H,  = 4515. FSR1H,  = 4610. FSR1H, Power-on Reset, Brown-out Reset = ----. FSR1H, Power-on Reset, Brown-out Reset = 0000. FSR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR1H, Wake-up via WDT or Interrupt = ---- uuuu. FSR1H,  = . FSR1L,  = 2410. FSR1L,  = 2510. FSR1L,  = 2515. FSR1L, Applicable = 2610. FSR1L, Devices = 4410. FSR1L,  = 4510. FSR1L,  = 4515. FSR1L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. FSR1L, Power-on Reset, Brown-out Reset = xxxx. FSR1L, Power-on Reset, Brown-out Reset = xxxx. FSR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR1L, Wake-up via WDT or Interrupt = uuuu uuuu. FSR1L,  = . BSR,  = 2410. BSR,  = 2510. BSR,  = 2515. BSR, Applicable = 2610. BSR, Devices = 4410. BSR,  = 4510. BSR,  = 4515. BSR,  = 4610. BSR, Power-on Reset, Brown-out Reset = ----. BSR, Power-on Reset, Brown-out Reset = 0000. BSR, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. BSR, Wake-up via WDT or Interrupt = ---- uuuu. BSR,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . INDF2,  = 2410. INDF2,  = 2510. INDF2,  = 2515. INDF2, Applicable = 2610. INDF2, Devices = 4410. INDF2,  = 4510. INDF2,  = 4515. INDF2,  = 4610. INDF2, Power-on Reset, Brown-out Reset = N/A. INDF2, Power-on Reset, Brown-out Reset = . INDF2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. INDF2, Wake-up via WDT or Interrupt = N/A. INDF2,  = . POSTINC2,  = 2410. POSTINC2,  = 2510. POSTINC2,  = 2515. POSTINC2, Applicable = 2610. POSTINC2, Devices = 4410. POSTINC2,  = 4510. POSTINC2,  = 4515. POSTINC2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. POSTINC2, Power-on Reset, Brown-out Reset = N/A. POSTINC2, Power-on Reset, Brown-out Reset = . POSTINC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTINC2, Wake-up via WDT or Interrupt = N/A. POSTINC2,  = . POSTDEC2,  = 2410. POSTDEC2,  = 2510. POSTDEC2,  = 2515. POSTDEC2, Applicable = 2610. POSTDEC2, Devices = 4410. POSTDEC2,  = 4510. POSTDEC2,  = 4515. POSTDEC2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. POSTDEC2, Power-on Reset, Brown-out Reset = . POSTDEC2, Power-on Reset, Brown-out Reset = N/A. POSTDEC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. POSTDEC2, Wake-up via WDT or Interrupt = N/A. POSTDEC2,  = . PREINC2,  = 2410. PREINC2,  = 2510. PREINC2,  = 2515. PREINC2, Applicable = 2610. PREINC2, Devices = 4410. PREINC2,  = 4510. PREINC2,  = 4515. PREINC2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PREINC2, Power-on Reset, Brown-out Reset = N/A. PREINC2, Power-on Reset, Brown-out Reset = . PREINC2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PREINC2, Wake-up via WDT or Interrupt = N/A. PREINC2,  = . PLUSW2,  = 2410. PLUSW2,  = 2510. PLUSW2,  = 2515. PLUSW2, Applicable = 2610. PLUSW2, Devices = 4410. PLUSW2,  = 4510. PLUSW2,  = 4515. PLUSW2,  = 4610. PLUSW2, Power-on Reset, Brown-out Reset = N/A. PLUSW2, Power-on Reset, Brown-out Reset = . PLUSW2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = N/A. PLUSW2, Wake-up via WDT or Interrupt = N/A. PLUSW2,  = . FSR2H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2410. FSR2H,  = 2510. FSR2H,  = 2515. FSR2H, Applicable = 2610. FSR2H, Devices = 4410. FSR2H,  = 4510. FSR2H,  = 4515. FSR2H,  = 4610. FSR2H, Power-on Reset, Brown-out Reset = ----. FSR2H, Power-on Reset, Brown-out Reset = 0000. FSR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- 0000. FSR2H, Wake-up via WDT or Interrupt = ---- uuuu. FSR2H,  = . FSR2L,  = 2410. FSR2L,  = 2510. FSR2L,  = 2515. FSR2L, Applicable = 2610. FSR2L, Devices = 4410. FSR2L,  = 4510. FSR2L,  = 4515. FSR2L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. FSR2L, Power-on Reset, Brown-out Reset = xxxx. FSR2L, Power-on Reset, Brown-out Reset = xxxx. FSR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. FSR2L, Wake-up via WDT or Interrupt = uuuu uuuu. FSR2L,  = . STATUS,  = 2410. STATUS,  = 2510. STATUS,  = 2515. STATUS, Applicable = 2610. STATUS, Devices = 4410. STATUS,  = 4510. STATUS,  = 4515. STATUS,  = 4610. STATUS, Power-on Reset, Brown-out Reset = ---x. STATUS, Power-on Reset, Brown-out Reset = xxxx. STATUS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---u uuuu. STATUS, Wake-up via WDT or Interrupt = ---u uuuu. STATUS,  = . TMR0H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2410. TMR0H,  = 2510. TMR0H,  = 2515. TMR0H, Applicable = 2610. TMR0H, Devices = 4410. TMR0H,  = 4510. TMR0H,  = 4515. TMR0H,  = 4610. TMR0H, Power-on Reset, Brown-out Reset = 0000. TMR0H, Power-on Reset, Brown-out Reset = 0000. TMR0H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR0H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0H,  = . TMR0L,  = 2410. TMR0L,  = 2510. TMR0L,  = 2515. TMR0L, Applicable = 2610. TMR0L, Devices = 4410. TMR0L,  = 4510. TMR0L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4515. TMR0L,  = 4610. TMR0L, Power-on Reset, Brown-out Reset = xxxx. TMR0L, Power-on Reset, Brown-out Reset = xxxx. TMR0L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR0L, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0L,  = . T0CON,  = 2410. T0CON,  = 2510. T0CON,  = 2515. T0CON, Applicable = 2610. T0CON, Devices = 4410. T0CON,  = 4510. T0CON,  = 4515. T0CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. T0CON, Power-on Reset, Brown-out Reset = 1111. T0CON, Power-on Reset, Brown-out Reset = 1111. T0CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. T0CON, Wake-up via WDT or Interrupt = uuuu uuuu. T0CON,  = . OSCCON,  = 2410. OSCCON,  = 2510. OSCCON,  = 2515. OSCCON, Applicable = 2610. OSCCON, Devices = 4410. OSCCON,  = 4510. OSCCON,  = 4515. OSCCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. OSCCON, Power-on Reset, Brown-out Reset = 0100. OSCCON, Power-on Reset, Brown-out Reset = q000. OSCCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0100 q000. OSCCON, Wake-up via WDT or Interrupt = uuuu uuqu. OSCCON,  = . HLVDCON,  = 2410. HLVDCON,  = 2510. HLVDCON,  = 2515. HLVDCON, Applicable = 2610. HLVDCON, Devices = 4410. HLVDCON,  = 4510. HLVDCON,  = 4515. HLVDCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. HLVDCON, Power-on Reset, Brown-out Reset = 0-00. HLVDCON, Power-on Reset, Brown-out Reset = 0101. HLVDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00 0101. HLVDCON, Wake-up via WDT or Interrupt = u-uu uuuu. HLVDCON,  = . WDTCON,  = 2410. WDTCON,  = 2510. WDTCON,  = 2515. WDTCON, Applicable = 2610. WDTCON, Devices = 4410. WDTCON,  = 4510. WDTCON,  = 4515. WDTCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. WDTCON, Power-on Reset, Brown-out Reset = ----. WDTCON, Power-on Reset, Brown-out Reset = ---0. WDTCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- ---0. WDTCON, Wake-up via WDT or Interrupt = ---- ---u. WDTCON,  = . RCON (4),  = 2410. RCON (4),  = 2510. RCON (4),  = 2515. RCON (4), Applicable = 2610. RCON (4), Devices = 4410. RCON (4),  = 4510. RCON (4),  = 4515. RCON (4),",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. RCON (4), Power-on Reset, Brown-out Reset = 0q-1. RCON (4), Power-on Reset, Brown-out Reset = 11q0. RCON (4), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0q-q qquu. RCON (4), Wake-up via WDT or Interrupt = uq-u qquu. RCON (4),  = . TMR1H,  = 2410. TMR1H,  = 2510. TMR1H,  = 2515. TMR1H, Applicable = 2610. TMR1H, Devices = 4410. TMR1H,  = 4510. TMR1H,  = 4515. TMR1H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TMR1H, Power-on Reset, Brown-out Reset = xxxx. TMR1H, Power-on Reset, Brown-out Reset = xxxx. TMR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1H,  = . TMR1L,  = 2410. TMR1L,  = 2510. TMR1L,  = 2515. TMR1L, Applicable = 2610. TMR1L, Devices = 4410. TMR1L,  = 4510. TMR1L,  = 4515. TMR1L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TMR1L, Power-on Reset, Brown-out Reset = xxxx. TMR1L, Power-on Reset, Brown-out Reset = xxxx. TMR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. TMR1L, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1L,  = . T1CON,  = 2410. T1CON,  = 2510. T1CON,  = 2515. T1CON, Applicable = 2610. T1CON, Devices = 4410. T1CON,  = 4510. T1CON,  = 4515. T1CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. T1CON, Power-on Reset, Brown-out Reset = 0000. T1CON, Power-on Reset, Brown-out Reset = 0000. T1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = u0uu uuuu. T1CON, Wake-up via WDT or Interrupt = uuuu uuuu. T1CON,  = . TMR2,  = 2410. TMR2,  = 2510. TMR2,  = 2515. TMR2, Applicable = 2610. TMR2, Devices = 4410. TMR2,  = 4510. TMR2,  = 4515. TMR2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TMR2, Power-on Reset, Brown-out Reset = 0000. TMR2, Power-on Reset, Brown-out Reset = 0000. TMR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. TMR2, Wake-up via WDT or Interrupt = uuuu uuuu. TMR2,  = . PR2,  = 2410. PR2,  = 2510. PR2,  = 2515. PR2, Applicable = 2610. PR2, Devices = 4410. PR2,  = 4510. PR2,  = 4515. PR2,  = 4610. PR2, Power-on Reset, Brown-out Reset = 1111. PR2, Power-on Reset, Brown-out Reset = 1111. PR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. PR2, Wake-up via WDT or Interrupt = 1111 1111. PR2,  = . T2CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 2410. T2CON,  = 2510. T2CON,  = 2515. T2CON, Applicable = 2610. T2CON, Devices = 4410. T2CON,  = 4510. T2CON,  = 4515. T2CON,  = 4610. T2CON, Power-on Reset, Brown-out Reset = -000. T2CON, Power-on Reset, Brown-out Reset = 0000. T2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. T2CON, Wake-up via WDT or Interrupt = -uuu uuuu. T2CON,  = . SSPBUF,  = 2410. SSPBUF,  = 2510. SSPBUF,  = 2515. SSPBUF, Applicable = 2610. SSPBUF, Devices = 4410. SSPBUF,  = 4510. SSPBUF,  = 4515. SSPBUF,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. SSPBUF, Power-on Reset, Brown-out Reset = xxxx. SSPBUF, Power-on Reset, Brown-out Reset = xxxx. SSPBUF, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. SSPBUF, Wake-up via WDT or Interrupt = uuuu uuuu. SSPBUF,  = . SSPADD,  = 2410. SSPADD,  = 2510. SSPADD,  = 2515. SSPADD, Applicable = 2610. SSPADD, Devices = 4410. SSPADD,  = 4510. SSPADD,  = 4515. SSPADD,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. SSPADD, Power-on Reset, Brown-out Reset = 0000. SSPADD, Power-on Reset, Brown-out Reset = 0000. SSPADD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPADD, Wake-up via WDT or Interrupt = uuuu uuuu. SSPADD,  = . SSPSTAT,  = 2410. SSPSTAT,  = 2510. SSPSTAT,  = 2515. SSPSTAT, Applicable = 2610. SSPSTAT, Devices = 4410. SSPSTAT,  = 4510. SSPSTAT,  = 4515. SSPSTAT,  = 4610. SSPSTAT, Power-on Reset, Brown-out Reset = 0000. SSPSTAT, Power-on Reset, Brown-out Reset = 0000. SSPSTAT, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPSTAT, Wake-up via WDT or Interrupt = uuuu uuuu. SSPSTAT,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . SSPCON1,  = 2410. SSPCON1,  = 2510. SSPCON1,  = 2515. SSPCON1, Applicable = 2610. SSPCON1, Devices = 4410. SSPCON1,  = 4510. SSPCON1,  = 4515. SSPCON1,  = 4610. SSPCON1, Power-on Reset, Brown-out Reset = 0000. SSPCON1, Power-on Reset, Brown-out Reset = 0000. SSPCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPCON1, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON1,  = . SSPCON2,  = 2410. SSPCON2,  = 2510. SSPCON2,  = 2515. SSPCON2, Applicable = 2610. SSPCON2, Devices = 4410. SSPCON2,  = 4510. SSPCON2,  = 4515. SSPCON2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. SSPCON2, Power-on Reset, Brown-out Reset = 0000. SSPCON2, Power-on Reset, Brown-out Reset = 0000. SSPCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. SSPCON2, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON2,  = \nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nADRESH,  = 2410. ADRESH,  = 2510. ADRESH,  = 2515. ADRESH, Applicable = 2610. ADRESH, Devices = 4410. ADRESH,  = 4510. ADRESH,  = 4515. ADRESH,  = 4610. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu. ADRESL,  = 2410. ADRESL,  = 2510. ADRESL,  = 2515. ADRESL, Applicable = 2610. ADRESL, Devices = 4410. ADRESL,  = 4510. ADRESL,  = 4515. ADRESL,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESL, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu. ADCON0,  = 2410. ADCON0,  = 2510. ADCON0,  = 2515. ADCON0, Applicable = 2610. ADCON0, Devices = 4410. ADCON0,  = 4510. ADCON0,  = 4515. ADCON0,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ADCON0, Power-on Reset, Brown-out Reset = --00. ADCON0, Power-on Reset, Brown-out Reset = 0000. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON0, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON0, Wake-up via WDT or Interrupt = --uu. ADCON0, Wake-up via WDT or Interrupt = uuuu. ADCON1,  = 2410. ADCON1,  = 2510. ADCON1,  = 2515. ADCON1, Applicable = 2610. ADCON1, Devices = 4410. ADCON1,  = 4510. ADCON1,  = 4515. ADCON1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ADCON1, Power-on Reset, Brown-out Reset = --00. ADCON1, Power-on Reset, Brown-out Reset = 0qqq. ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. ADCON1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0qqq. ADCON1, Wake-up via WDT or Interrupt = --uu. ADCON1, Wake-up via WDT or Interrupt = uuuu. ADCON2,  = 2410. ADCON2,  = 2510. ADCON2,  = 2515. ADCON2, Applicable = 2610. ADCON2, Devices = 4410. ADCON2,  = 4510. ADCON2,  = 4515. ADCON2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ADCON2, Power-on Reset, Brown-out Reset = 0-00. ADCON2, Power-on Reset, Brown-out Reset = 0000. ADCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00. ADCON2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ADCON2, Wake-up via WDT or Interrupt = u-uu. ADCON2, Wake-up via WDT or Interrupt = uuuu. CCPR1H,  = 2410. CCPR1H,  = 2510. CCPR1H,  = 2515. CCPR1H, Applicable = 2610. CCPR1H, Devices = 4410. CCPR1H,  = 4510. CCPR1H,  = 4515. CCPR1H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu. CCPR1L,  = 2410. CCPR1L,  = 2510. CCPR1L,  = 2515. CCPR1L, Applicable = 2610. CCPR1L, Devices = 4410. CCPR1L,  = 4510. CCPR1L,  = 4515. CCPR1L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu. CCP1CON,  = 2410. CCP1CON,  = 2510. CCP1CON,  = 2515. CCP1CON, Applicable = 2610. CCP1CON, Devices = 4410. CCP1CON,  = 4510. CCP1CON,  = 4515. CCP1CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCP1CON,  = 2410. CCP1CON,  = 2510. CCP1CON,  = 2515. CCP1CON, Applicable = 2610. CCP1CON, Devices = 4410. CCP1CON,  = 4510. CCP1CON,  = 4515. CCP1CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCP1CON, Power-on Reset, Brown-out Reset = --00. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = --uu. CCP1CON, Wake-up via WDT or Interrupt = uuuu. CCPR2H,  = 2410. CCPR2H,  = 2510. CCPR2H,  = 2515. CCPR2H, Applicable = 2610. CCPR2H, Devices = 4410. CCPR2H,  = 4510. CCPR2H,  = 4515. CCPR2H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu. CCPR2L,  = 2410. CCPR2L,  = 2510. CCPR2L,  = 2515. CCPR2L, Applicable = 2610. CCPR2L, Devices = 4410. CCPR2L,  = 4510. CCPR2L,  = 4515. CCPR2L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu. CCP2CON,  = 2410. CCP2CON,  = 2510. CCP2CON,  = 2515. CCP2CON, Applicable = 2610. CCP2CON, Devices = 4410. CCP2CON,  = 4510. CCP2CON,  = 4515. CCP2CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CCP2CON, Power-on Reset, Brown-out Reset = --00. CCP2CON, Power-on Reset, Brown-out Reset = 0000. CCP2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = --00. CCP2CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CCP2CON, Wake-up via WDT or Interrupt = --uu. CCP2CON, Wake-up via WDT or Interrupt = uuuu. BAUDCON,  = 2410. BAUDCON,  = 2510. BAUDCON,  = 2515. BAUDCON, Applicable = 2610. BAUDCON, Devices = 4410. BAUDCON,  = 4510. BAUDCON,  = 4515. BAUDCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. BAUDCON, Power-on Reset, Brown-out Reset = 01-0. BAUDCON, Power-on Reset, Brown-out Reset = 0-00. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 01-0. BAUDCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0-00. BAUDCON, Wake-up via WDT or Interrupt = --uu. BAUDCON, Wake-up via WDT or Interrupt = uuuu. PWM1CON,  = 2410. PWM1CON,  = 2510. PWM1CON,  = 2515. PWM1CON, Applicable = 2610. PWM1CON, Devices = 4410. PWM1CON,  = 4510. PWM1CON,  = 4515. PWM1CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. PWM1CON, Wake-up via WDT or Interrupt = uuuu. PWM1CON, Wake-up via WDT or Interrupt = uuuu. ECCP1AS,  = 2410. ECCP1AS,  = 2510. ECCP1AS,  = 2515. ECCP1AS, Applicable = 2610. ECCP1AS, Devices = 4410. ECCP1AS,  = 4510. ECCP1AS,  = 4515. ECCP1AS,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS,  = 2410. ECCP1AS,  = 2510. ECCP1AS,  = 2515. ECCP1AS, Applicable = 2610. ECCP1AS, Devices = 4410. ECCP1AS,  = 4510. ECCP1AS,  = 4515. ECCP1AS,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. ECCP1AS, Power-on Reset, Brown-out Reset = 0000. ECCP1AS, Power-on Reset, Brown-out Reset = 00--. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. ECCP1AS, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00--. ECCP1AS, Wake-up via WDT or Interrupt = uuuu. ECCP1AS, Wake-up via WDT or Interrupt = uu--. CVRCON,  = 2410. CVRCON,  = 2510. CVRCON,  = 2515. CVRCON, Applicable = 2610. CVRCON, Devices = 4410. CVRCON,  = 4510. CVRCON,  = 4515. CVRCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CVRCON, Wake-up via WDT or Interrupt = uuuu. CVRCON, Wake-up via WDT or Interrupt = uuuu. CMCON,  = 2410. CMCON,  = 2510. CMCON,  = 2515. CMCON, Applicable = 2610. CMCON, Devices = 4410. CMCON,  = 4510. CMCON,  = 4515. CMCON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. CMCON, Power-on Reset, Brown-out Reset = 0000. CMCON, Power-on Reset, Brown-out Reset = 0111. CMCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. CMCON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0111. CMCON, Wake-up via WDT or Interrupt = uuuu. CMCON, Wake-up via WDT or Interrupt = uuuu. TMR3H,  = 2410. TMR3H,  = 2510. TMR3H,  = 2515. TMR3H, Applicable = 2610. TMR3H, Devices = 4410. TMR3H,  = 4510. TMR3H,  = 4515. TMR3H,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu. TMR3L,  = 2410. TMR3L,  = 2510. TMR3L,  = 2515. TMR3L, Applicable = 2610. TMR3L, Devices = 4410. TMR3L,  = 4510. TMR3L,  = 4515. TMR3L,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu. T3CON,  = 2410. T3CON,  = 2510. T3CON,  = 2515. T3CON, Applicable = 2610. T3CON, Devices = 4410. T3CON,  = 4510. T3CON,  = 4515. T3CON,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu. SPBRGH,  = 2410. SPBRGH,  = 2510. SPBRGH,  = 2515. SPBRGH, Applicable = 2610. SPBRGH, Devices = 4410. SPBRGH,  = 4510. SPBRGH,  = 4515. SPBRGH,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, Power-on Reset, Brown-out Reset = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRGH, Wake-up via WDT or Interrupt = uuuu. SPBRG,  = 2410. SPBRG,  = 2510. SPBRG,  = 2515. SPBRG, Applicable = 2610. SPBRG, Devices = 4410. SPBRG,  = 4510. SPBRG,  = 4515. SPBRG,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. SPBRG, Wake-up via WDT or Interrupt = uuuu. SPBRG, Wake-up via WDT or Interrupt = uuuu. RCREG,  = 2410. RCREG,  = 2510. RCREG,  = 2515. RCREG, Applicable = 2610. RCREG, Devices = 4410. RCREG,  = 4510. RCREG,  = 4515. RCREG,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCREG, Wake-up via WDT or Interrupt = uuuu. RCREG, Wake-up via WDT or Interrupt = uuuu. TXREG,  = 2410. TXREG,  = 2510. TXREG,  = 2515. TXREG, Applicable = 2610. TXREG, Devices = 4410. TXREG,  = 4510. TXREG,  = 4515. TXREG,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXREG, Wake-up via WDT or Interrupt = uuuu. TXREG, Wake-up via WDT or Interrupt = uuuu. TXSTA,  = 2410. TXSTA,  = 2510. TXSTA,  = 2515. TXSTA, Applicable = 2610. TXSTA, Devices = 4410. TXSTA,  = 4510. TXSTA,  = 4515. TXSTA,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TXSTA, Power-on Reset, Brown-out Reset = 0000. TXSTA, Power-on Reset, Brown-out Reset = 0010. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. TXSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0010. TXSTA, Wake-up via WDT or Interrupt = uuuu. TXSTA, Wake-up via WDT or Interrupt = uuuu. RCSTA,  = 2410. RCSTA,  = 2510. RCSTA,  = 2515. RCSTA, Applicable = 2610. RCSTA, Devices = 4410. RCSTA,  = 4510. RCSTA,  = 4515. RCSTA,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. RCSTA, Power-on Reset, Brown-out Reset = 0000. RCSTA, Power-on Reset, Brown-out Reset = 000x. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000. RCSTA, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 000x. RCSTA, Wake-up via WDT or Interrupt = uuuu. RCSTA, Wake-up via WDT or Interrupt = uuuu\nLegend: u = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nIPR2,  = 2410. IPR2,  = 2510. IPR2,  = 2515. IPR2, Applicable = 2610. IPR2, Devices = 4410. IPR2,  = 4510. IPR2,  = 4515. IPR2,  = 4610. IPR2, Power-on Reset, Brown-out Reset = 11-- 1111. IPR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 11-- 1111. IPR2, Wake-up via WDT or Interrupt = uu-- uuuu. IPR2, Wake-up via WDT or Interrupt = uu-- uuuu. IPR2, Wake-up via WDT or Interrupt = uu-- uuuu. PIR2,  = 2410. PIR2,  = 2510. PIR2,  = 2515. PIR2, Applicable = 2610. PIR2, Devices = 4410. PIR2,  = 4510. PIR2,  = 4515. PIR2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIR2, Power-on Reset, Brown-out Reset = 00-- 0000. PIR2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-- 0000. PIR2, Wake-up via WDT or Interrupt = uu--. PIR2, Wake-up via WDT or Interrupt = uuuu. PIR2, Wake-up via WDT or Interrupt = (1). PIE2,  = 2410. PIE2,  = 2510. PIE2,  = 2515. PIE2, Applicable = 2610. PIE2, Devices = 4410. PIE2,  = 4510. PIE2,  = 4515. PIE2,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIE2, Power-on Reset, Brown-out Reset = 00-- 0000. PIE2, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-- 0000. PIE2, Wake-up via WDT or Interrupt = uu--. PIE2, Wake-up via WDT or Interrupt = uuuu. PIE2, Wake-up via WDT or Interrupt = uuuu. IPR1,  = 2410. IPR1,  = 2510. IPR1,  = 2515. IPR1, Applicable = 2610. IPR1, Devices = 4410. IPR1,  = 4510. IPR1,  = 4515. IPR1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. IPR1, Power-on Reset, Brown-out Reset = 1111 1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. IPR1, Wake-up via WDT or Interrupt = uuuu. IPR1, Wake-up via WDT or Interrupt = uuuu. IPR1, Wake-up via WDT or Interrupt = uuuu. IPR1,  = 2410. IPR1,  = 2510. IPR1,  = 2515. IPR1, Applicable = 2610. IPR1, Devices = 4410. IPR1,  = 4510. IPR1,  = 4515. IPR1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. IPR1, Power-on Reset, Brown-out Reset = -111 1111. IPR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -111 1111. IPR1, Wake-up via WDT or Interrupt = -uuu. IPR1, Wake-up via WDT or Interrupt = uuuu. IPR1, Wake-up via WDT or Interrupt = uuuu. PIR1,  = 2410. PIR1,  = 2510. PIR1,  = 2515. PIR1, Applicable = 2610. PIR1, Devices = 4410. PIR1,  = 4510. PIR1,  = 4515. PIR1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIR1, Power-on Reset, Brown-out Reset = 0000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIR1, Wake-up via WDT or Interrupt = uuuu. PIR1, Wake-up via WDT or Interrupt = uuuu. PIR1, Wake-up via WDT or Interrupt = (1). PIR1,  = 2410. PIR1,  = 2510. PIR1,  = 2515. PIR1, Applicable = 2610. PIR1, Devices = 4410. PIR1,  = 4510. PIR1,  = 4515. PIR1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIR1, Power-on Reset, Brown-out Reset = -000 0000. PIR1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. PIR1, Wake-up via WDT or Interrupt = -uuu. PIR1, Wake-up via WDT or Interrupt = uuuu. PIR1, Wake-up via WDT or Interrupt = (1). PIE1,  = 2410. PIE1,  = 2510. PIE1,  = 2515. PIE1, Applicable = 2610. PIE1, Devices = 4410. PIE1,  = 4510. PIE1,  = 4515. PIE1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIE1, Power-on Reset, Brown-out Reset = 0000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 0000. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1,  = 2410. PIE1,  = 2510. PIE1,  = 2515. PIE1, Applicable = 2610. PIE1, Devices = 4410. PIE1,  = 4510. PIE1,  = 4515. PIE1,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PIE1, Power-on Reset, Brown-out Reset = -000 0000. PIE1, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = -000 0000. PIE1, Wake-up via WDT or Interrupt = -uuu. PIE1, Wake-up via WDT or Interrupt = uuuu. PIE1, Wake-up via WDT or Interrupt = uuuu. OSCTUNE,  = 2410. OSCTUNE,  = 2510. OSCTUNE,  = 2515. OSCTUNE, Applicable = 2610. OSCTUNE, Devices = 4410. OSCTUNE,  = 4510. OSCTUNE,  = 4515. OSCTUNE,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. OSCTUNE, Power-on Reset, Brown-out Reset = 00-0 0000. OSCTUNE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 00-0 0000. OSCTUNE, Wake-up via WDT or Interrupt = uu-u. OSCTUNE, Wake-up via WDT or Interrupt = uuuu. OSCTUNE, Wake-up via WDT or Interrupt = uuuu. TRISE,  = 2410. TRISE,  = 2510. TRISE,  = 2515. TRISE, Applicable = 2610. TRISE, Devices = 4410. TRISE,  = 4510. TRISE,  = 4515. TRISE,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TRISE, Power-on Reset, Brown-out Reset = 0000 -111. TRISE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 0000 -111. TRISE, Wake-up via WDT or Interrupt = uuuu. TRISE, Wake-up via WDT or Interrupt = -uuu. TRISE, Wake-up via WDT or Interrupt = -uuu. TRISD,  = 2410. TRISD,  = 2510. TRISD,  = 2515. TRISD, Applicable = 2610. TRISD, Devices = 4410. TRISD,  = 4510. TRISD,  = 4515. TRISD,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TRISD, Power-on Reset, Brown-out Reset = 1111 1111. TRISD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISD, Wake-up via WDT or Interrupt = uuuu. TRISD, Wake-up via WDT or Interrupt = uuuu. TRISD, Wake-up via WDT or Interrupt = uuuu. TRISC,  = 2410. TRISC,  = 2510. TRISC,  = 2515. TRISC, Applicable = 2610. TRISC, Devices = 4410. TRISC,  = 4510. TRISC,  = 4515. TRISC,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TRISC, Power-on Reset, Brown-out Reset = 1111 1111. TRISC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISC, Wake-up via WDT or Interrupt = uuuu. TRISC, Wake-up via WDT or Interrupt = uuuu. TRISC, Wake-up via WDT or Interrupt = uuuu. TRISB,  = 2410. TRISB,  = 2510. TRISB,  = 2515. TRISB, Applicable = 2610. TRISB, Devices = 4410. TRISB,  = 4510. TRISB,  = 4515. TRISB,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TRISB, Power-on Reset, Brown-out Reset = 1111 1111. TRISB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111. TRISB, Wake-up via WDT or Interrupt = uuuu. TRISB, Wake-up via WDT or Interrupt = uuuu. TRISB, Wake-up via WDT or Interrupt = uuuu. TRISA (5),  = 2410. TRISA (5),  = 2510. TRISA (5),  = 2515. TRISA (5), Applicable = 2610. TRISA (5), Devices = 4410. TRISA (5),  = 4510. TRISA (5),  = 4515. TRISA (5),",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. TRISA (5), Power-on Reset, Brown-out Reset = 1111 1111 (5). TRISA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = 1111 1111 (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu. TRISA (5), Wake-up via WDT or Interrupt = uuuu (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu (5). LATE,  = 2410. LATE,  = 2510. LATE,  = 2515. LATE, Applicable = 2610. LATE, Devices = 4410. LATE,  = 4510. LATE,  = 4515. LATE,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. LATE, Power-on Reset, Brown-out Reset = ---- -xxx. LATE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- -uuu. LATE, Wake-up via WDT or Interrupt = ----. LATE, Wake-up via WDT or Interrupt = -uuu. LATE, Wake-up via WDT or Interrupt = -uuu. LATD,  = 2410. LATD,  = 2510. LATD,  = 2515. LATD, Applicable = 2610. LATD, Devices = 4410. LATD,  = 4510. LATD,  = 4515. LATD,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. LATD, Power-on Reset, Brown-out Reset = xxxx xxxx. LATD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATD, Wake-up via WDT or Interrupt = uuuu. LATD, Wake-up via WDT or Interrupt = uuuu. LATD, Wake-up via WDT or Interrupt = uuuu. LATC,  = 2410. LATC,  = 2510. LATC,  = 2515. LATC, Applicable = 2610. LATC, Devices = 4410. LATC,  = 4510. LATC,  = 4515. LATC,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. LATC, Power-on Reset, Brown-out Reset = xxxx xxxx. LATC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATC, Wake-up via WDT or Interrupt = uuuu. LATC, Wake-up via WDT or Interrupt = uuuu. LATC, Wake-up via WDT or Interrupt = uuuu. LATB,  = 2410. LATB,  = 2510. LATB,  = 2515. LATB, Applicable = 2610. LATB, Devices = 4410. LATB,  = 4510. LATB,  = 4515. LATB,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. LATB, Power-on Reset, Brown-out Reset = xxxx xxxx. LATB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. LATB, Wake-up via WDT or Interrupt = uuuu. LATB, Wake-up via WDT or Interrupt = uuuu. LATB, Wake-up via WDT or Interrupt = uuuu. LATA (5),  = 2410. LATA (5),  = 2510. LATA (5),  = 2515. LATA (5), Applicable = 2610. LATA (5), Devices = 4410. LATA (5),  = 4510. LATA (5),  = 4515. LATA (5),",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. LATA (5), Power-on Reset, Brown-out Reset = xxxx xxxx (5). LATA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu (5). LATA (5), Wake-up via WDT or Interrupt = uuuu. LATA (5), Wake-up via WDT or Interrupt = uuuu (5). LATA (5), Wake-up via WDT or Interrupt = uuuu (5). PORTE,  = 2410. PORTE,  = 2510. PORTE,  = 2515. PORTE, Applicable = 2610. PORTE, Devices = 4410. PORTE,  = 4510. PORTE,  = 4515. PORTE,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PORTE, Power-on Reset, Brown-out Reset = ---- x000. PORTE, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = ---- x000. PORTE, Wake-up via WDT or Interrupt = ----. PORTE, Wake-up via WDT or Interrupt = uuuu. PORTE, Wake-up via WDT or Interrupt = uuuu. PORTD,  = 2410. PORTD,  = 2510. PORTD,  = 2515. PORTD, Applicable = 2610. PORTD, Devices = 4410. PORTD,  = 4510. PORTD,  = 4515. PORTD,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PORTD, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTD, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu. PORTC,  = 2410. PORTC,  = 2510. PORTC,  = 2515. PORTC, Applicable = 2610. PORTC, Devices = 4410. PORTC,  = 4510. PORTC,  = 4515. PORTC,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PORTC, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTC, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu. PORTB,  = 2410. PORTB,  = 2510. PORTB,  = 2515. PORTB, Applicable = 2610. PORTB, Devices = 4410. PORTB,  = 4510. PORTB,  = 4515. PORTB,",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PORTB, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTB, MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uuuu uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu. PORTA (5),  = 2410. PORTA (5),  = 2510. PORTA (5),  = 2515. PORTA (5), Applicable = 2610. PORTA (5), Devices = 4410. PORTA (5),  = 4510. PORTA (5),  = 4515. PORTA (5),",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 4610. PORTA (5), Power-on Reset, Brown-out Reset = xx0x 0000 (5). PORTA (5), MCLR Resets, WDT Reset, RESET Instruction, Stack Resets = uu0u 0000 (5). PORTA (5), Wake-up via WDT or Interrupt = uuuu. PORTA (5), Wake-up via WDT or Interrupt = uuuu (5). PORTA (5), Wake-up via WDT or Interrupt = uuuu (5)\nLegend: u = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 4-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-3 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "5.0 MEMORY ORGANIZATION\nThere are two types of memory in PIC18F2X1X/4X1X microcontroller devices:\n\u00b7 Program Memory\n\u00b7 Data RAM\nAs Harvard architecture devices, the data and program memories use separate busses; this allows for concurrent access of the two memory spaces.\nAdditional detailed information on the operation of the Flash  program  memory  is  provided  in Section 6.0 'Flash Program Memory' .",
    "5.1 Program Memory Organization\nPIC18  microcontrollers  implement  a  21-bit  program counter,  which  is  capable  of  addressing  a  2-Mbyte program memory space. Accessing a location between the  upper  boundary  of  the  physically  implemented memory and the 2-Mbyte address will return all ' 0 's (a NOP instruction).\nThe  PIC18F2410/4410  and  PIC18F2510  each  have 16 Kbytes of Flash memory and can store up to 8,192 single-word  instructions.  The  PIC18F2510/4510  each have 32 Kbytes of Flash memory and can store up to 16,384 single-word instructions. The PIC18F2515/4515 each have 48 Kbytes of Flash memory and can store up to  24,576  single-word  instructions.  The  PIC18F2610/ 4610 each have 64 Kbytes of Flash memory and can store up to 32,768 single-word instructions.\nPIC18 devices have two interrupt vectors. The Reset vector  address  is  at  0000h  and  the  interrupt  vector addresses are at 0008h and 0018h.",
    "5.1 Program Memory Organization\nThe  program  memory  map  for  PIC18F2X1X/4X1X devices is shown in Figure 5-1.",
    "PROGRAM MEMORY MAP AND STACK FOR\nFIGURE 5-1: PIC18F2X1X/4X1X DEVICES",
    "5.1.1 PROGRAM COUNTER\nThe Program Counter (PC) specifies the address of the instruction to fetch for execution. The PC is 21 bits wide and is contained in three separate 8-bit registers. The low byte, known as the PCL register, is both readable and writable. The high byte, or PCH register, contains the PC<15:8> bits; it is not directly readable or writable. Updates to the PCH register are performed through the PCLATH register. The upper byte is called PCU. This register  contains  the  PC<20:16>  bits;  it  is  also  not directly  readable  or  writable.  Updates  to  the  PCU register are performed through the PCLATU register.\nThe contents of PCLATH and PCLATU are transferred to  the  program  counter  by  any  operation  that  writes PCL.  Similarly,  the  upper  two  bytes  of  the  program counter are transferred to PCLATH and PCLATU by an operation that reads PCL. This is useful for computed offsets  to  the  PC  (see Section 5.1.4.1  'Computed GOTO' ).",
    "5.1.1 PROGRAM COUNTER\nThe PC addresses bytes in the program memory. To prevent the PC from becoming misaligned with word instructions, the Least Significant bit of PCL is fixed to a  value  of  ' 0 '.  The  PC  increments  by  2  to  address sequential instructions in the program memory.\nThe CALL , RCALL , GOTO and program branch instructions write to the program counter directly. For these instructions, the contents of PCLATH  and PCLATU are not transferred to the program counter.",
    "5.1.2 RETURN ADDRESS STACK\nThe return address stack allows any combination of up to 31 program calls and interrupts to occur. The PC is pushed onto the stack when a CALL or RCALL instruction is executed or an interrupt is Acknowledged. The PC value is pulled off the stack on a RETURN RETLW , or a RETFIE instruction.  PCLATU and PCLATH are not affected by any of the RETURN or CALL instructions.\nThe stack operates as a 31-word by 21-bit RAM and a 5-bit Stack Pointer, STKPTR. The stack space is not part of either program or data space. The Stack Pointer is readable and writable and the address on the top of the stack is readable and writable through the top-ofstack Special File Registers. Data can also be pushed to, or popped from the stack, using these registers.",
    "5.1.2 RETURN ADDRESS STACK\nA CALL type instruction causes a push onto the stack; the Stack Pointer is first incremented and the location pointed  to  by  the  Stack  Pointer  is  written  with  the contents of the PC (already pointing to the instruction following the CALL ). A RETURN type instruction causes a  pop  from  the  stack;  the  contents  of  the  location pointed to by the STKPTR are transferred to the PC and then the Stack Pointer is decremented.\nThe  Stack  Pointer  is  initialized  to  ' 00000 ' after  all Resets. There is no RAM associated with the location corresponding to a Stack Pointer value of ' 00000 '; this is only a Reset value. Status bits indicate if the stack is full or has overflowed or has underflowed.",
    "5.1.2.1 Top-of-Stack Access\nOnly  the  top  of  the  return  address  stack  (TOS)  is readable and writable. A set of three registers, TOSU:TOSH:TOSL, hold the contents of the stack location pointed to by the STKPTR register (Figure 5-2). This allows users to implement a software stack if necessary. After a CALL, RCALL or interrupt, the software can read the  pushed  value  by  reading  the  TOSU:TOSH:TOSL registers. These values can be placed on a user defined software stack. At return time, the software can return these values to TOSU:TOSH:TOSL and do a return.\nThe user must disable the global interrupt enable bits while accessing the stack to prevent inadvertent stack corruption.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe STKPTR register (Register 5-1) contains the Stack Pointer value, the STKFUL (Stack Full) status bit and the STKUNF (Stack Underflow) status bits. The value of  the  Stack Pointer can be 0 through 31. The Stack Pointer increments before values are pushed onto the stack and decrements after values are popped off the stack. On Reset, the Stack Pointer value will be zero. The user may read and write the Stack Pointer value. This  feature  can  be  used  by  a  Real-Time  Operating System (RTOS) for return stack maintenance.\nAfter the PC is pushed onto the stack 31 times (without popping any values off the stack), the STKFUL bit is set.  The  STKFUL  bit  is  cleared  by  software  or  by  a POR.",
    "5.1.2.2 Return Stack Pointer (STKPTR)\nThe action that takes place when the stack becomes full depends on the state of the STVREN (Stack Overflow Reset Enable) Configuration bit. (Refer to Section 22.1 'Configuration Bits' for a description of the device  Configuration  bits.) If STVREN  is  set (default),  the  31st push will  push the  (PC  + 2)  value onto  the  stack,  set  the  STKFUL  bit  and  reset  the device. The STKFUL bit will remain set and the Stack Pointer will be set to zero.\nWhen  the  stack  has  been  popped  enough  times  to unload the stack, the next pop will return a value of zero to  the  PC  and sets the STKUNF bit, while the Stack Pointer remains at zero. The STKUNF bit will remain set until cleared by software or until a POR occurs.\nNote:\nReturning a value of zero to the PC on an underflow has the effect of vectoring the program  to  the  Reset  vector,  where  the stack conditions can be verified and appropriate actions can be taken. This is not the same as a Reset, as the contents of the SFRs are not affected.",
    "5.1.2.3 PUSH and POP Instructions\nSince  the  Top-of-Stack  is  readable  and  writable,  the ability to push values onto the stack and pull values off the stack without disturbing normal program execution is a desirable  feature. The  PIC18  instruction  set includes  two  instructions, PUSH and POP ,  that  permit the  TOS  to  be  manipulated  under  software  control. TOSU, TOSH and TOSL can be modified to place data or a return address on the stack.\nIf STVREN is cleared, the STKFUL bit will be set on the 31st push and the Stack Pointer will increment to 31. Any additional pushes will not overwrite the 31st push and STKPTR will remain at 31.\nThe PUSH instruction places the current PC value onto the stack. This increments the Stack Pointer and loads the current PC value onto the stack.\nThe POP instruction discards the current TOS by decrementing the Stack Pointer. The previous value pushed onto the stack then becomes the TOS value.",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\nR/C-0, 1 = R/C-0. R/C-0, 2 = U-0. R/C-0, 3 = R/W-0. R/C-0, 4 = R/W-0. R/C-0, 5 = R/W-0. R/C-0, 6 = R/W-0. R/C-0, 7 = R/W-0. STKFUL (1), 1 = STKUNF (1). STKFUL (1), 2 = -. STKFUL (1), 3 = SP4. STKFUL (1), 4 = SP3. STKFUL (1), 5 = SP2. STKFUL (1), 6 = SP1. STKFUL (1), 7 = SP0\nbit 7\nbit 0\nbit 7\nSTKFUL: Stack Full Flag bit\n(1)\n1 = Stack became full or overflowed\n0 = Stack has not become full or overflowed\nbit 6\nSTKUNF: Stack Underflow Flag bit (1)\n1 = Stack underflow occurred",
    "REGISTER 5-1: STKPTR: STACK POINTER REGISTER\n0 = Stack underflow did not occur\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4-0 SP4:SP0:\nStack Pointer Location bits\nNote 1: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented\nC = Clearable only bit\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "5.1.2.4 Stack Full and Underflow Resets\nDevice Resets on stack overflow and stack underflow conditions are enabled by setting the STVREN bit in Configuration Register 4L. When STVREN is set, a full or underflow  will set the appropriate  STKFUL  or STKUNF bit  and  then  cause  a  device  Reset.  When STVREN is cleared, a full or underflow condition will set the appropriate STKFUL or STKUNF bit but not cause a  device  Reset.  The  STKFUL  or  STKUNF  bits  are cleared by the user software or a Power-on Reset.",
    "5.1.3 FAST REGISTER STACK\nA  fast  register  stack  is  provided  for  the  STATUS, WREG and BSR registers, to provide a 'fast  return' option for interrupts. The stack for each register is only one level deep and is neither readable nor writable. It is loaded with the current value of the corresponding register  when  the  processor  vectors  for  an  interrupt.  All interrupt sources will push values into the stack registers. The values in the registers are then loaded back into  their  associated  registers  if  the RETFIE, FAST instruction is used to return from the interrupt.\nIf both low and high priority interrupts are enabled, the stack registers cannot be used reliably to return from low priority interrupts. If a high priority interrupt occurs while servicing a low priority interrupt, the stack register values  stored  by  the  low  priority  interrupt  will  be overwritten. In these cases, users must save the key registers in software during a low priority interrupt.",
    "5.1.3 FAST REGISTER STACK\nIf interrupt priority is not used, all interrupts may use the fast register stack for returns from interrupt. If no interrupts are used, the fast register stack can be used to restore the STATUS, WREG and BSR registers at the end of a subroutine call. To use the fast register stack for a subroutine call, a CALL label, FAST instruction must  be  executed  to  save  the  STATUS,  WREG  and BSR registers to the fast register stack. A RETURN, FAST instruction is then executed to restore these registers from the fast register stack.\nExample 5-1 shows a source code example that uses the  fast  register  stack  during  a  subroutine  call  and return.",
    "EXAMPLE 5-1: FAST REGISTER STACK CODE EXAMPLE\nCALL SUB1,, 1 = ;STATUS, WREG, BSR ;SAVED IN FAST REGISTER ;STACK. SUB1 RETURN,, 1 = ;RESTORE VALUES SAVED ;IN FAST REGISTER STACK",
    "5.1.4 LOOK-UP TABLES IN PROGRAM MEMORY\nThere may be programming situations that require the creation of data structures, or look-up tables, in program memory. For PIC18 devices, look-up tables can be implemented in two ways:\n\u00b7 Computed GOTO\n\u00b7 Table Reads",
    "5.1.4.1 Computed GOTO\nA computed GOTO is accomplished by adding an offset to  the  program  counter.  An  example  is  shown  in Example 5-2.\nA look-up table can be formed  with an ADDWF  PCL instruction and a group of RETLW nn instructions. The W register is loaded with an offset into the table before executing a call to that table. The first instruction of the called routine is the ADDWF PCL instruction. The next instruction  executed  will  be  one  of  the RETLW  nn instructions  that  returns  the  value  ' nn '  to  the  calling function.\nThe offset  value  (in  WREG)  specifies  the  number  of bytes  that  the  program  counter  should  advance  and should be multiples of 2 (LSb = 0 ).\nIn  this  method,  only  one  data  byte  may  be  stored  in each  instruction  location  and  room  on  the  return address stack is required.",
    "EXAMPLE 5-2: COMPUTED GOTO USING AN OFFSET VALUE\n, 1 = MOVF CALL. , 2 = OFFSET, W TABLE. ORG, 1 = nn00h. ORG, 2 = . TABLE, 1 = ADDWF. TABLE, 2 = PCL. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = .. , 2 = . , 1 = .. , 2 = . , 1 = .. , 2 = ",
    "5.1.4.2 Table Reads and Table Writes\nA  better  method  of  storing  data  in  program  memory allows two bytes of data to be stored in each instruction location.\nLook-up  table  data  may  be  stored  two  bytes  per program  word  by  using  table  reads  and  writes.  The Table  Pointer  (TBLPTR)  register  specifies  the  byte address and the Table Latch (TABLAT) register contains the data that is read from or written to program memory.  Data  is  transferred to or from program memory one byte at a time.\nTable  read  and  table  write  operations  are  discussed further in Section 6.1 'Table Reads' .",
    "5.2.1 CLOCKING SCHEME\nThe  microcontroller clock input, whether  from  an internal or external source, is internally divided by four to  generate  four  non-overlapping  quadrature  clocks (Q1, Q2, Q3 and Q4). Internally, the program counter is incremented  on  every  Q1;  the  instruction  is  fetched from the program memory and latched into the instruction register during Q4. The instruction is decoded and executed  during  the  following  Q1  through  Q4.  The clocks  and  instruction  execution  flow  are  shown  in Figure 5-3.",
    "5.2.2 INSTRUCTION FLOW/PIPELINING\nAn  'Instruction  Cycle'  consists  of  four  Q  cycles:  Q1 through  Q4.  The  instruction  fetch  and  execute  are pipelined  in  such  a  manner  that  a  fetch  takes  one instruction  cycle,  while  the  decode  and  execute  take another  instruction  cycle.  However,  due  to  the  pipelining, each  instruction  effectively  executes  in  one cycle. If an instruction causes the program counter to change (e.g., GOTO ),  then  two  cycles are required to complete the instruction (Example 5-3).\nA fetch cycle begins with the Program Counter (PC) incrementing in Q1.\nIn the execution cycle, the fetched instruction is latched into  the  Instruction  Register  (IR)  in  cycle  Q1.  This instruction  is  then  decoded  and  executed  during  the Q2, Q3 and Q4 cycles. Data memory is read during Q2 (operand  read)  and  written  during  Q4  (destination write).",
    "EXAMPLE 5-3: INSTRUCTION PIPELINE FLOW\nAll instructions are single cycle, except for any program branches. These take two cycles since the fetch instruction is 'flushed' from the pipeline while the new instruction is being fetched and then executed.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe program memory is addressed in bytes. Instructions are stored as two bytes or four bytes in program memory. The Least Significant Byte of an instruction word is always stored in a program memory location with an even address (LSb = 0 ). To maintain alignment with instruction boundaries, the PC increments in steps of 2 and the LSb will always read ' 0 ' (see Section 5.1.1 'Program Counter' ).\nFigure 5-4 shows an example of how instruction words are stored in the program memory.",
    "5.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe CALL and GOTO instructions  have  the  absolute program memory address embedded into the instruction.  Since  instructions  are  always  stored  on  word boundaries,  the  data  contained  in  the  instruction  is  a word address. The word address is written to PC<20:1>, which  accesses  the  desired  byte  address  in  program memory.  Instruction  #2  in  Figure 5-4  shows  how  the instruction GOTO  0006h is  encoded  in  the  program memory. Program branch instructions, which encode a relative address offset, operate in the same manner. The offset value stored in a branch instruction represents the number of single-word instructions that the PC will be offset  by. Section 23.0  'Instruction  Set  Summary' provides further details of the instruction set.",
    "FIGURE 5-4: INSTRUCTIONS IN PROGRAM MEMORY\nProgram Memory\nByte Locations\n\u2192\nInstruction 1:\nInstruction 2:\nMOVLW\n055h\nGOTO\n0006h\nInstruction 3:\nLSB = 1, 1 = LSB = 0. LSB = 1, 2 = Word Address \u2193. , 1 = . , 2 = 000000h. , 1 = . , 2 = 000002h. , 1 = . , 2 = 000004h. , 1 = . , 2 = 000006h. 0Fh, 1 = 55h. 0Fh, 2 = 000008h. EFh, 1 = 03h. EFh, 2 = 00000Ah. F0h, 1 = 00h. F0h, 2 = 00000Ch. C1h, 1 = 23h. C1h, 2 = 00000Eh. F4h, 1 = 56h. F4h, 2 = 000010h. , 1 = . , 2 = 000012h. , 1 = . , 2 = 000014h\nMOVFF\n123h, 456h",
    "5.2.4 TWO-WORD INSTRUCTIONS\nThe standard PIC18 instruction set has four two-word instructions: CALL , MOVFF , GOTO and LSFR . In  all cases, the second word of the instructions always has ' 1111 ' as its four Most Significant bits; the other 12 bits are literal data, usually a data memory address.\nsome reason and the second word is executed by itself, a NOP is executed instead. This is necessary for cases when the two-word instruction is preceded by a conditional  instruction  that  changes  the  PC.  Example 5-4 shows how this works.\nThe use of ' 1111 ' in the 4 MSbs of an instruction specifies a special form of NOP . If the instruction is executed in proper sequence - immediately after the first word the data in the second word is accessed and used by the instruction sequence. If the first word is skipped for\nNote:, 1 = See Section 5.6 'PIC18 Instruction Execution and the Extended Instruc- tion Set' for information on two-word instructions in the extended instruction set.",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:.Source Code = ; is RAM location. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010. 1100, CASE 1:.Source Code = 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1, REG2. 1100, CASE 1:.Source Code = ; No, skip this word. 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = ; Execute this word as a NOP. 0010, CASE",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000. 0010, CASE 1:.Source Code = 0000 ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = . 0010, CASE 1:.Source Code = ; continue code. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. 0110,",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\nCASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1. 0110, CASE 1:.Source Code = . 0110, CASE 1:.Source Code = ; is RAM location. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1,. 1100, CASE 1:.Source Code = REG2. 1100, CASE 1:.Source Code = ; Yes, execute this word. 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = ; 2nd word of instruction. 0010, CASE 1:.Object Code =",
    "EXAMPLE 5-4: TWO-WORD INSTRUCTIONS\n0100. 0010, CASE 1:.Object Code = 0000 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3. 0010, CASE 1:.Source Code = . 0010, CASE 1:.Source Code = ; continue code",
    "5.3 Data Memory Organization\nNote:\nThe  operation  of  some  aspects  of  data memory  are  changed  when  the  PIC18 extended instruction  set  is  enabled.  See Section 5.5 'Data Memory and the Extended Instruction Set' for more information.\nThe data memory in PIC18 devices is implemented as static  RAM. Figures  5-5,  5-6 and  5-7 show the data memory organization for the PIC18F2X1X/4X1X devices.\nThe data memory contains Special Function Registers (SFRs) and General Purpose Registers (GPRs). The SFRs are used for control and status of the controller and peripheral functions, while GPRs are used for data storage and scratchpad operations in the user's application. Any read of an unimplemented location will read as ' 0 's.\nThe instruction  set  and  architecture  allow  operations across  all  banks.  The  entire  data  memory  may  be accessed  by  Direct,  Indirect  or  Indexed  Addressing modes. Addressing modes are discussed later in this subsection.",
    "5.3 Data Memory Organization\nTo  ensure  that  commonly  used  registers  (SFRs  and select GPRs) can be accessed in a single cycle, PIC18 devices implement an Access Bank. This is a 256-byte memory space that provides fast access to SFRs and the  lower  portion  of  GPR  Bank  0  without  using  the BSR. Section 5.3.2 'Access Bank' provides a detailed description of the Access RAM.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nLarge  areas  of  data  memory  require  an  efficient addressing  scheme  to  make  rapid  access  to  any address  possible.  Ideally,  this  means  that  an  entire address does not need to be provided for each read or write  operation.  For  PIC18  devices,  this  is  accomplished with a RAM banking scheme. This divides the memory space into 16 contiguous banks of 256 bytes. Depending  on  the  instruction,  each  location  can  be addressed directly by its full 12-bit address, or an 8-bit low-order address and a 4-bit Bank Pointer.\nMost instructions in the PIC18 instruction set make use of the Bank Pointer, known as the Bank Select Register (BSR). This SFR holds the 4 Most Significant bits of a location's  address;  the  instruction  itself  includes  the 8 Least Significant bits. Only the four lower bits of the BSR are implemented (BSR3:BSR0). The upper four bits are unused; they will always read ' 0 ' and cannot be written to. The BSR can be loaded directly by using the MOVLB instruction.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nThe  value  of  the  BSR  indicates  the  bank  in  data memory; the 8 bits in the instruction show the location in the bank and can be thought of as an offset from the bank's lower boundary. The relationship between the BSR's value and the bank division in data memory is shown in Figure 5-8.\nSince up to 16 registers may share the same low-order address, the user must always be careful to ensure that the proper bank is selected before performing a data read  or  write.  For  example,  writing  what  should  be program data to an 8-bit address of F9h, while the BSR is 0Fh, will end up resetting the program counter.\nWhile any bank can be selected, only those banks that are  actually  implemented  can  be  read  or  written  to. Writes  to  unimplemented  banks  are  ignored,  while reads from unimplemented banks will return ' 0 's. Even so, the STATUS register will still be affected as if the operation  was  successful.  The  data  memory  map  in Figure 5-5 indicates which banks are implemented.",
    "5.3.1 BANK SELECT REGISTER (BSR)\nIn  the  core  PIC18  instruction  set,  only  the MOVFF instruction  fully  specifies  the  12-bit  address  of  the source and target registers. This instruction ignores the BSR completely when it executes. All other instructions include only the low-order address as an operand and must use either the BSR or the Access Bank to locate their target registers.",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2410/4410 DEVICES\n= 0000,  = . = 0000,  = 00h. = 0000, Data Memory = Access RAM. = 0000, When 'a' = The BSR is ignored and the Access Bank is used. The first 128 bytes are 000h. = 0000, Map = 0 : = . = 0001,  = Bank 0. = 0001,  = FFh 00h. = 0001, Data Memory = GPR. = 0001, When 'a' = 080h 07Fh general (from 100h 0FFh. = 0001, Map = 0 : = purpose RAM Bank 0).. = 0010,  = Bank 1 00h. = 0010,  = FFh. = 0010, Data Memory = GPR. = 0010, When 'a' = The Special (from 1FFh 200h. = 0010, Map = 0 : = second 128 bytes are Function Registers Bank 15).. ,  = Bank 2 FFh 00h. ,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2410/4410 DEVICES\n= . , Data Memory = GPR. , When 'a' = When 'a' 2FFh 300h. , Map = 0 : = = 1 :. = 0100,  = Bank 3 Bank 4 FFh 00h. = 0100,  = . = 0100, Data Memory = . = 0100, When 'a' = The used 3FFh 400h. = 0100, Map = 0 : = BSR specifies the Bank by the instruction. = 0011. 0101,  = . 0101,  = FFh 00h. 0101, Data Memory = . 0101, When 'a' = 4FFh. 0101, Map = 0 : = 500h =. = 0110,  = Bank 5. = 0110,  = FFh 00h. = 0110, Data Memory = . = 0110, When 'a' = 5FFh 600h. = 0110, Map = 0 : = . = 0111,  = Bank 6 Bank 7. = 0111,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2410/4410 DEVICES\n= FFh 00h. = 0111, Data Memory = . = 0111, When 'a' = 6FFh 700h. = 0111, Map = 0 : = 00h 7Fh 80h Access Bank Access RAM Low. = 1000,  = 8. = 1000,  = FFh 00h. = 1000, Data Memory = . = 1000, When 'a' = 7FFh 800h. = 1000, Map = 0 : = FFh Access RAM High (SFRs) Bank. = 1001,  = Bank 9. = 1001,  = FFh 00h. = 1001, Data Memory = Unused Read 00h. = 1001, When 'a' = 8FFh 900h. = 1001, Map = 0 : = . 1010,  = . 1010,  = FFh 00h. 1010, Data Memory = . 1010, When 'a' = 9FFh A00h. 1010, Map = 0 : = . =,  = Bank 10. =,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2410/4410 DEVICES\n= FFh. =, Data Memory = . =, When 'a' = AFFh B00h. =, Map = 0 : = = 1011. ,  = Bank 11 Bank 12. ,  = FFh 00h 00h. , Data Memory = . , When 'a' = BFFh C00h. , Map = 0 : = = 1100. ,  = Bank 13. ,  = FFh 00h. , Data Memory = . , When 'a' = CFFh D00h. , Map = 0 : = = 1101. ,  = Bank 14. ,  = FFh 00h. , Data Memory = . , When 'a' = DFFh E00h. , Map = 0 : = = 1110. = 1111,  = . = 1111,  = 00h FFh. = 1111, Data Memory = Unused. = 1111, When 'a' = F7Fh F00h EFFh. = 1111, Map = 0 : = . ,  = Bank 15. ,",
    "FIGURE 5-5: DATA MEMORY MAP FOR PIC18F2410/4410 DEVICES\n= FFh. , Data Memory = SFR. , When 'a' = F80h. , Map = 0 : = FFFh",
    "FIGURE 5-6: DATA MEMORY MAP FOR PIC18F2510/4510 DEVICES\n= 0000,  = Bank 0. = 0000,  = 00h. = 0000, Data Memory Map = Access RAM. = 0000,  = The BSR is ignored and Access Bank is used.. = 0000, When 'a' = 0 : = the 000h. = 0001,  = Bank 1. = 0001,  = FFh 00h. = 0001, Data Memory Map = GPR. = 0001,  = 080h 07Fh 100h 0FFh. = 0001, When 'a' = 0 : = The first 128 bytes are general purpose RAM (from Bank 0).. = 0010,  = Bank 2. = 0010,  = FFh 00h. = 0010, Data Memory Map = GPR. = 0010,  = 1FFh 200h. = 0010, When 'a' = 0 : = The second 128 bytes are Special Function Registers (from Bank 15).. = 0011,  = Bank 3. = 0011,  = FFh 00h. = 0011, Data Memory Map = GPR GPR. = 0011,",
    "FIGURE 5-6: DATA MEMORY MAP FOR PIC18F2510/4510 DEVICES\n= 2FFh 300h. = 0011, When 'a' = 0 : = When 'a' = 1 : The BSR specifies the Bank. = 0100,  = Bank 4. = 0100,  = FFh 00h. = 0100, Data Memory Map = . = 0100,  = used 3FFh 400h. = 0100, When 'a' = 0 : = by the instruction.. = 0101,  = Bank 5. = 0101,  = FFh 00h. = 0101, Data Memory Map = GPR. = 0101,  = 4FFh 500h. = 0101, When 'a' = 0 : = . = 0110,  = . = 0110,  = FFh 00h. = 0110, Data Memory Map = GPR. = 0110,  = 5FFh 600h. = 0110, When 'a' = 0 : = . = 0111,  = Bank 6. = 0111,  = FFh 00h. = 0111, Data Memory Map = . = 0111,",
    "FIGURE 5-6: DATA MEMORY MAP FOR PIC18F2510/4510 DEVICES\n= 6FFh 700h. = 0111, When 'a' = 0 : = 00h Access Bank. = 1000,  = Bank. = 1000,  = FFh 00h. = 1000, Data Memory Map = . = 1000,  = 7FFh 800h. = 1000, When 'a' = 0 : = 7Fh 80h FFh Access RAM High Access RAM Low (SFRs) 7. = 1001,  = Bank 8. = 1001,  = FFh 00h. = 1001, Data Memory Map = . = 1001,  = 8FFh 900h. = 1001, When 'a' = 0 : = . = 1010,  = Bank 9. = 1010,  = FFh 00h. = 1010, Data Memory Map = Unused Read 00h. = 1010,  = 9FFh A00h. = 1010, When 'a' = 0 : = Bank 10. ,  = Bank. ,  = FFh 00h. , Data Memory Map = . ,",
    "FIGURE 5-6: DATA MEMORY MAP FOR PIC18F2510/4510 DEVICES\n= AFFh B00h. , When 'a' = 0 : = 11 = 1011. = 1100,  = Bank 12. = 1100,  = FFh 00h. = 1100, Data Memory Map = . = 1100,  = BFFh C00h. = 1100, When 'a' = 0 : = . = 1101,  = . = 1101,  = FFh 00h. = 1101, Data Memory Map = . = 1101,  = CFFh D00h. = 1101, When 'a' = 0 : = . ,  = Bank 13. ,  = . , Data Memory Map = . ,  = . , When 'a' = 0 : = . = 1110,  = Bank 14. = 1110,  = FFh 00h. = 1110, Data Memory Map = . = 1110,  = DFFh E00h. = 1110, When 'a' = 0 : = . = 1111,  = Bank. = 1111,  = 00h FFh. = 1111, Data Memory Map = Unused. = 1111,",
    "FIGURE 5-6: DATA MEMORY MAP FOR PIC18F2510/4510 DEVICES\n= F00h EFFh. = 1111, When 'a' = 0 : = 15 F80h F7Fh",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n=,  = Bank 0. =, BSR<3:0> = 00h. =, BSR<3:0> = Access RAM. =, BSR<3:0> = The BSR is ignored and the Access Bank is used.. =, BSR<3:0> = 000h. = 0001,  = . = 0001, BSR<3:0> = FFh 00h. = 0001, BSR<3:0> = GPR. = 0001, BSR<3:0> = 080h 07Fh The first 128 general purpose (from Bank 100h 0FFh. = 0001, BSR<3:0> = 0000 bytes are RAM 0).. = 0010,",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n= Bank 1. = 0010, BSR<3:0> = FFh 00h. = 0010, BSR<3:0> = GPR. = 0010, BSR<3:0> = 1FFh. = 0010, BSR<3:0> = The second 128 bytes are Special Function Registers (from Bank 15). 200h. = 0011,  = Bank 2 Bank. = 0011, BSR<3:0> = 3 FFh 00h. = 0011, BSR<3:0> = GPR. = 0011, BSR<3:0> = When a = 1 : The BSR specifies the Bank. = 0011, BSR<3:0> = 2FFh 300h. = 0100,  = Bank 4. = 0100, BSR<3:0> = 00h. = 0100, BSR<3:0> = GPR. = 0100, BSR<3:0> = . = 0100, BSR<3:0> = 400h. ,",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n= Bank 5. , BSR<3:0> = FFh 00h. , BSR<3:0> = GPR. , BSR<3:0> = 4FFh 500h. , BSR<3:0> = = 0101. = 0110,  = . = 0110, BSR<3:0> = FFh 00h. = 0110, BSR<3:0> = GPR. = 0110, BSR<3:0> = 5FFh 600h. = 0110, BSR<3:0> = Access. = 0111,  = Bank 6 Bank. = 0111, BSR<3:0> = 7 FFh 00h. = 0111, BSR<3:0> = . = 0111, BSR<3:0> = Access 6FFh 700h. = 0111, BSR<3:0> = 00h 7Fh Bank RAM Low. = 1000,",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n= Bank 8. = 1000, BSR<3:0> = FFh 00h. = 1000, BSR<3:0> = . = 1000, BSR<3:0> = Access RAM High (SFRs). = 1000, BSR<3:0> = 80h. = 1001,  = Bank 9. = 1001, BSR<3:0> = FFh 00h. = 1001, BSR<3:0> = GPR GPR. = 1001, BSR<3:0> = 7FFh 800h. = 1001, BSR<3:0> = FFh 8FFh 900h. = 1010,  = . = 1010, BSR<3:0> = FFh. = 1010, BSR<3:0> = . = 1010, BSR<3:0> = 9FFh. = 1010, BSR<3:0> = A00h. ,",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n= Bank 10. , BSR<3:0> = FFh 00h. , BSR<3:0> = GPR. , BSR<3:0> = AFFh B00h. , BSR<3:0> = . =,  = Bank. =, BSR<3:0> = 12 FFh 00h. =, BSR<3:0> = GPR. =, BSR<3:0> = BFFh C00h. =, BSR<3:0> = 1100. = 1101,  = Bank 13. = 1101, BSR<3:0> = FFh 00h. = 1101, BSR<3:0> = GPR. = 1101, BSR<3:0> = CFFh D00h. = 1101, BSR<3:0> = . =,",
    "FIGURE 5-7: DATA MEMORY MAP FOR PIC18F2515/2610/4515/4610 DEVICES\n= . =, BSR<3:0> = . =, BSR<3:0> = FFh 00h. =, BSR<3:0> = . =, BSR<3:0> = DFFh E00h GPR. 1110,  = Bank 14. 1110, BSR<3:0> = . 1110, BSR<3:0> = . 1110, BSR<3:0> = . 1110, BSR<3:0> = F00h EFFh 00h GPR FFh. = 1111,  = Bank. = 1111, BSR<3:0> = 15. = 1111, BSR<3:0> = FFh SFR. = 1111, BSR<3:0> = F80h F7Fh. = 1111, BSR<3:0> = FFFh",
    "FIGURE 5-8: USE OF THE BANK SELECT REGISTER (DIRECT ADDRESSING)\nNote 1: The Access RAM bit of the instruction can be used to force an override of the selected bank (BSR<3:0>) to the registers of the Access Bank.\n2: The MOVFF instruction embeds the entire 12-bit address in the instruction.",
    "5.3.2 ACCESS BANK\nWhile  the  use  of  the  BSR  with  an  embedded  8-bit address  allows  users  to  address  the  entire  range  of data memory, it also means that the user must always ensure  that  the  correct  bank  is  selected.  Otherwise, data may be read from or written to the wrong location. This can be disastrous if a GPR is the intended target of  an  operation,  but  an  SFR  is  written  to  instead. Verifying  and/or  changing  the  BSR  for  each  read  or write to data memory can become very inefficient.\nUsing this 'forced' addressing allows the instruction to operate on a data address in a single cycle, without updating the BSR first. For 8-bit addresses of 80h and above, this means that users can evaluate and operate on SFRs more efficiently. The Access RAM below 80h is a good place for data values that the user might need to  access  rapidly,  such  as  immediate  computational results  or  common  program  variables.  Access  RAM also allows for faster and more code efficient context saving and switching of variables.",
    "5.3.2 ACCESS BANK\nTo streamline access for the most commonly used data memory locations, the data memory is configured with an  Access  Bank,  which  allows  users  to  access  a mapped block of memory without specifying  a  BSR. The  Access  Bank  consists  of  the  first  128  bytes  of memory (00h-7Fh) in Bank 0 and the last 128 bytes of memory (80h-FFh) in Block 15. The lower half is known as the 'Access RAM' and is composed of GPRs. This upper  half  is also where  the  device's  SFRs  are mapped. These two areas are mapped contiguously in the  Access  Bank  and  can  be  addressed  in  a  linear fashion by an 8-bit address (Figure 5-5).\nThe Access Bank is used by core PIC18 instructions that include the Access RAM bit (the 'a' parameter in the instruction). When 'a' is equal to ' 1 ', the instruction uses  the  BSR  and  the  8-bit  address  included  in  the opcode for the data memory address. When 'a' is ' 0 ', however,  the  instruction  is  forced  to  use  the  Access Bank  address  map;  the  current  value  of  the  BSR  is ignored entirely.",
    "5.3.2 ACCESS BANK\nThe mapping of the Access Bank is slightly different when the extended instruction set is enabled (XINST Configuration bit = 1 ). This is discussed in more detail in Section 5.5.3  'Mapping  the  Access  Bank  in Indexed Literal Offset Addressing Mode' .",
    "5.3.3 GENERAL PURPOSE REGISTER FILE\nPIC18 devices may have banked memory in the GPR area. This is data RAM, which is available for use by all instructions. GPRs  start  at  the  bottom  of  Bank  0 (address 000h) and grow upwards towards the bottom of the SFR area. GPRs are not initialized by a Power-on Reset and are unchanged on all other Resets.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nThe Special Function  Registers (SFRs) are registers used by the CPU and peripheral modules for controlling the desired operation of the device. These registers are implemented as static RAM. SFRs start at the top of data memory (FFFh) and extend downward to occupy the top half of Bank 15 (F80h to FFFh). A list of these registers is given in Table 5-1 and Table 5-2.\nThe SFRs can be classified into two sets: those associated with the 'core' device functionality (ALU, Resets and interrupts) and those related to the peripheral functions. The reset and interrupt registers are described in their respective chapters, while the ALU's STATUS register is described later in this section. Registers related to the operation of a peripheral feature are described in the chapter for that peripheral.\nThe SFRs are typically distributed among the peripherals whose functions they control. Unused SFR locations are unimplemented and read as ' 0 's.\n\nTABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X1X/4X1X DEVICES",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFFFh, Name = TOSU. FFFh, Address = FDFh. FFFh, Name = INDF2 (1). FFEh, Name = TOSH. FFEh, Address = FDEh. FFEh, Name = POSTINC2 (1). FFDh, Name = TOSL. FFDh, Address = FDDh. FFDh, Name = POSTDEC2 (1). FFCh, Name = STKPTR. FFCh, Address = FDCh. FFCh, Name = PREINC2 (1). FFBh, Name = PCLATU. FFBh, Address = FDBh. FFBh, Name = PLUSW2 (1). FFAh, Name = PCLATH. FFAh, Address = FDAh. FFAh, Name = FSR2H. FF9h, Name = PCL. FF9h, Address = FD9h. FF9h, Name = FSR2L. FF8h, Name = TBLPTRU. FF8h, Address = FD8h. FF8h, Name = STATUS. FF7h, Name =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nTBLPTRH. FF7h, Address = FD7h. FF7h, Name = TMR0H. FF6h, Name = TBLPTRL. FF6h, Address = FD6h. FF6h, Name = TMR0L. FF5h, Name = TABLAT. FF5h, Address = FD5h. FF5h, Name = T0CON. FF4h, Name = PRODH. FF4h, Address = FD4h. FF4h, Name = - (2). FF3h, Name = PRODL. FF3h, Address = FD3h. FF3h, Name = OSCCON. FF2h, Name = INTCON. FF2h, Address = FD2h. FF2h, Name = HLVDCON. FF1h, Name = INTCON2. FF1h, Address = FD1h. FF1h, Name = WDTCON. FF0h, Name = INTCON3. FF0h, Address = FD0h. FF0h, Name = RCON.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFEFh, Name = INDF0 (1). FEFh, Address = FCFh. FEFh, Name = TMR1H. FEEh, Name = POSTINC0 (1). FEEh, Address = FCEh. FEEh, Name = TMR1L. FEDh, Name = POSTDEC0 (1). FEDh, Address = FCDh. FEDh, Name = T1CON. FECh, Name = PREINC0 (1). FECh, Address = FCCh. FECh, Name = TMR2. FEBh, Name = PLUSW0 (1). FEBh, Address = FCBh. FEBh, Name = PR2. FEAh, Name = FSR0H. FEAh, Address = FCAh. FEAh, Name = T2CON. FE9h, Name = FSR0L. FE9h, Address = FC9h. FE9h, Name = SSPBUF. FE8h, Name = WREG. FE8h, Address = FC8h. FE8h, Name = SSPADD. FE7h,",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nName = INDF1 (1). FE7h, Address = FC7h. FE7h, Name = SSPSTAT. FE6h, Name = POSTINC1 (1). FE6h, Address = FC6h. FE6h, Name = SSPCON1. FE5h, Name = POSTDEC1 (1). FE5h, Address = FC5h. FE5h, Name = SSPCON2. FE4h, Name = PREINC1 (1). FE4h, Address = FC4h. FE4h, Name = ADRESH. FE3h, Name = PLUSW1 (1). FE3h, Address = FC3h. FE3h, Name = ADRESL. FE2h, Name = FSR1H. FE2h, Address = FC2h. FE2h, Name = ADCON0. FE1h, Name = FSR1L. FE1h, Address = FC1h. FE1h, Name = ADCON1. FE0h, Name = BSR. FE0h, Address = FC0h.",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFE0h, Name = ADCON2\nAddress\nName",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nF9Fh, Name = IPR1. F9Eh, Name = PIR1. F9Dh, Name = PIE1. F9Ch, Name = - (2). F9Bh, Name = OSCTUNE. F9Ah, Name = - (2). F99h, Name = - (2). F98h, Name = - (2). F97h, Name = - (2). F96h, Name = TRISE (3). F95h, Name = TRISD (3). F94h, Name = TRISC. F93h, Name = TRISB. F92h, Name = TRISA. F91h, Name = - (2). F90h, Name = - (2). F8Fh, Name = - (2). F8Eh, Name = - (2). F8Dh, Name = LATE (3). F8Ch, Name = LATD (3). F8Bh, Name = LATC. F8Ah, Name = LATB. F89h,",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nName = LATA. F88h, Name = - (2). F87h, Name = - (2). F86h, Name = - (2). F85h, Name = - (2). F84h, Name = PORTE (3). F83h, Name = PORTD (3). F82h, Name = PORTC. F81h, Name = PORTB. F80h, Name = PORTA",
    "5.3.4 SPECIAL FUNCTION REGISTERS\nFBFh, 1 = CCPR1H. FBEh, 1 = CCPR1L. FBDh, 1 = CCP1CON. FBCh, 1 = CCPR2H. FBBh, 1 = CCPR2L. FBAh, 1 = CCP2CON. FB9h, 1 = - (2). FB8h, 1 = BAUDCON. FB7h, 1 = PWM1CON (3). FB6h, 1 = ECCP1AS (3). FB5h, 1 = CVRCON. FB4h, 1 = CMCON. FB3h, 1 = TMR3H. FB2h, 1 = TMR3L. FB1h, 1 = T3CON. FB0h, 1 = SPBRGH. FAFh, 1 = SPBRG. FAEh, 1 = RCREG. FADh, 1 = TXREG. FACh, 1 = TXSTA. FABh, 1 = RCSTA. FAAh, 1 = - (2). FA9h, 1 =",
    "5.3.4 SPECIAL FUNCTION REGISTERS\n- (2). FA8h, 1 = - (2). FA7h, 1 = - (2). FA6h, 1 = - (2). FA5h, 1 = - (2). FA4h, 1 = - (2). FA3h, 1 = - (2). FA2h, 1 = IPR2. FA1h, 1 = PIR2. FA0h, 1 = PIE2\nNote 1: This is not a physical register.\n2: Unimplemented registers are read as ' 0 '.\n3: This register is not available on 28-pin devices.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nTOSU, Bit 7 = -. TOSU, Bit 6 = -. TOSU, Bit 5 = -. TOSU, Bit 4 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 3 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 2 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 1 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 0 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Value on POR, BOR = ---0 0000. TOSU, Details on page: = 51, 56. TOSH, Bit 7 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 6 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 5 = Top-of-Stack High Byte (TOS<15:8>).",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nTOSH, Bit 4 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 3 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 2 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 1 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 0 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Value on POR, BOR = 0000 0000. TOSH, Details on page: = 51, 56. TOSL, Bit 7 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 6 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 5 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 4 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 3",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n= Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 2 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 1 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 0 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Value on POR, BOR = 0000 0000. TOSL, Details on page: = 51, 56. STKPTR, Bit 7 = STKFUL (6). STKPTR, Bit 6 = STKUNF (6). STKPTR, Bit 5 = -. STKPTR, Bit 4 = SP4. STKPTR, Bit 3 = SP3. STKPTR, Bit 2 = SP2. STKPTR, Bit 1 = SP1. STKPTR, Bit 0 = SP0. STKPTR, Value on POR, BOR = 00-0 0000. STKPTR, Details on page: =",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n51, 57. PCLATU, Bit 7 = -. PCLATU, Bit 6 = -. PCLATU, Bit 5 = -. PCLATU, Bit 4 = Holding Register for PC<20:16>. PCLATU, Bit 3 = Holding Register for PC<20:16>. PCLATU, Bit 2 = Holding Register for PC<20:16>. PCLATU, Bit 1 = Holding Register for PC<20:16>. PCLATU, Bit 0 = Holding Register for PC<20:16>. PCLATU, Value on POR, BOR = ---0 0000. PCLATU, Details on page: = 51, 56. PCLATH, Bit 7 = Holding Register for PC<15:8>. PCLATH, Bit 6 = Holding Register for PC<15:8>. PCLATH, Bit 5 = Holding Register for PC<15:8>. PCLATH, Bit 4 = Holding Register for PC<15:8>. PCLATH, Bit 3 = Holding Register for PC<15:8>. PCLATH, Bit 2 =",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nHolding Register for PC<15:8>. PCLATH, Bit 1 = Holding Register for PC<15:8>. PCLATH, Bit 0 = Holding Register for PC<15:8>. PCLATH, Value on POR, BOR = 0000 0000. PCLATH, Details on page: = 51, 56. PCL, Bit 7 = PC Low Byte (PC<7:0>). PCL, Bit 6 = PC Low Byte (PC<7:0>). PCL, Bit 5 = PC Low Byte (PC<7:0>). PCL, Bit 4 = PC Low Byte (PC<7:0>). PCL, Bit 3 = PC Low Byte (PC<7:0>). PCL, Bit 2 = PC Low Byte (PC<7:0>). PCL, Bit 1 = PC Low Byte (PC<7:0>). PCL, Bit 0 = PC Low Byte (PC<7:0>). PCL, Value on POR, BOR = 0000 0000. PCL, Details on page:",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n= 51, 56. TBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Value on POR, BOR = --00 0000. TBLPTRU, Details on page: = 51, 79. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n(TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Value on POR, BOR = 0000 0000. TBLPTRH, Details on page: = 51, 79. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n(TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Value on POR, BOR = 0000 0000. TBLPTRL, Details on page: = 51, 79. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT,",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nBit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on POR, BOR = 0000 0000. TABLAT, Details on page: = 51, 79. PRODH, Bit 7 = Product Register High Byte. PRODH, Bit 6 = Product Register High Byte. PRODH, Bit 5 = Product Register High Byte. PRODH, Bit 4 = Product Register High Byte. PRODH, Bit 3 = Product Register High Byte. PRODH, Bit 2 = Product Register High Byte. PRODH, Bit 1 = Product Register High Byte. PRODH, Bit 0 = Product Register High Byte. PRODH, Value on POR, BOR = xxxx xxxx. PRODH, Details on page: = 51, 81. PRODL, Bit 7 = Product Register Low Byte. PRODL, Bit 6 = Product Register Low Byte. PRODL, Bit 5 = Product Register Low Byte. PRODL, Bit 4 = Product Register Low Byte. PRODL, Bit 3 = Product Register Low Byte.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nPRODL, Bit 2 = Product Register Low Byte. PRODL, Bit 1 = Product Register Low Byte. PRODL, Bit 0 = Product Register Low Byte. PRODL, Value on POR, BOR = xxxx xxxx. PRODL, Details on page: = 51, 81. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000 000x. INTCON, Details on page: = 51, 85. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 =",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nTMR0IP. INTCON2, Bit 1 = -. INTCON2, Bit 0 = RBIP. INTCON2, Value on POR, BOR = 1111 -1-1. INTCON2, Details on page: = 51, 86. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 11-0 0-00. INTCON3, Details on page: = 51, 87. INDF0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0,",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nBit 5 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Value on POR, BOR = N/A. INDF0, Details on page: = 51, 72. POSTINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nFSR0 post-incremented (not a physical register). POSTINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 0 =",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nUses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Value on POR, BOR = N/A. POSTINC0, Details on page: = 51, 72. POSTDEC0, Bit 7 = . POSTDEC0, Bit 6 = . POSTDEC0, Bit 5 = . POSTDEC0, Bit 4 = . POSTDEC0, Bit 3 = . POSTDEC0, Bit 2 = . POSTDEC0, Bit 1 = . POSTDEC0, Bit 0 = . POSTDEC0, Value on POR, BOR = N/A. POSTDEC0, Details on page: = 51, 72. PREINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 5",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n= Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). PREINC0, Value on POR, BOR = N/A. PREINC0, Details on page: = 51, 72.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nPLUSW0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 6 = offset by W. PLUSW0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\npre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) - value of FSR0. PLUSW0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register) Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nphysical register) - value of FSR0. PLUSW0, Value on POR, BOR = N/A. PLUSW0, Details on page: = 51, 72. FSR0H, Bit 7 = -. FSR0H, Bit 6 = -. FSR0H, Bit 5 = -. FSR0H, Bit 4 = -. FSR0H, Bit 3 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 2 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 1 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 0 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Value on POR, BOR = ---- 0000. FSR0H, Details on page: = 51, 72. FSR0L, Bit 7 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 6 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 5 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 4 = Indirect",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nData Memory Address Pointer 0 Low Byte. FSR0L, Bit 3 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 2 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 1 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 0 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Value on POR, BOR = xxxx xxxx. FSR0L, Details on page: = 51, 72. WREG, Bit 7 = Working Register. WREG, Bit 6 = Working Register. WREG, Bit 5 = Working Register. WREG, Bit 4 = Working Register. WREG, Bit 3 = Working Register. WREG, Bit 2 = Working Register. WREG, Bit 1 = Working Register. WREG, Bit 0 = Working Register. WREG, Value on POR, BOR = xxxx xxxx. WREG, Details on page: = 51. INDF1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register).",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nINDF1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Value on POR, BOR = N/A.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nINDF1, Details on page: = 51, 72. POSTINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 1 = Uses contents",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nof FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Value on POR, BOR = N/A. POSTINC1, Details on page: = 51, 72. POSTDEC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register).",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nPOSTDEC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Value on POR, BOR = N/A. POSTDEC1, Details on page: = 51, 72. PREINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n(not a physical register). PREINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Value on POR, BOR = N/A.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nPREINC1, Details on page: = 51, 72. PLUSW1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register) - value of FSR1 offset by W. PLUSW1, Value on POR, BOR = N/A. PLUSW1, Details on page: = 51, 72. FSR1H, Bit 7 = -. FSR1H, Bit 6 = -. FSR1H, Bit 5 = -. FSR1H, Bit 4 = -. FSR1H, Bit 3 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 2 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 1 = Indirect Data",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nMemory Address Pointer 1 High Byte. FSR1H, Bit 0 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Value on POR, BOR = ---- 0000. FSR1H, Details on page: = 52, 72. FSR1L, Bit 7 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 6 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 5 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 4 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 3 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 2 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 1 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 0 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Value on POR, BOR = xxxx xxxx. FSR1L, Details on page: = 52, 72. BSR, Bit 7 = -. BSR, Bit 6 =",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n-. BSR, Bit 5 = -. BSR, Bit 4 = -. BSR, Bit 3 = Bank Select Register. BSR, Bit 2 = Bank Select Register. BSR, Bit 1 = Bank Select Register. BSR, Bit 0 = Bank Select Register. BSR, Value on POR, BOR = ---- 0000. BSR, Details on page: = 52, 61. INDF2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 not",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nchanged (not a physical register). INDF2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Value on POR, BOR = N/A. INDF2, Details on page: = 52, 72. POSTDEC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nregister). POSTDEC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Value on POR, BOR = N/A. POSTDEC2, Details on page: = 52,. , Bit 7 = . , Bit 6 = . , Bit 5 = . , Bit 4 = . , Bit 3 = . , Bit",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n2 = . , Bit 1 = . , Bit 0 = . , Value on POR, BOR = . , Details on page: = 72. PREINC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n(not a physical register). PREINC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Value on POR, BOR = N/A. PREINC2, Details on page: = 52, 72. PLUSW2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nW. PLUSW2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register) - value of FSR2 offset by W. PLUSW2, Value on POR, BOR = N/A.",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\nPLUSW2, Details on page: = 52, 72. FSR2H, Bit 7 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 6 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 5 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 4 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 3 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 2 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 1 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 0 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Value on POR, BOR = ---- 0000. FSR2H, Details on page: = 52, 72. FSR2L STATUS, Bit 7 = Indirect Data -. FSR2L STATUS, Bit 6 = Memory Address",
    "REGISTER FILE SUMMARY (PIC18F2X1X/4X1X)\n-. FSR2L STATUS, Bit 5 = Pointer 2 -. FSR2L STATUS, Bit 4 = Low Byte N. FSR2L STATUS, Bit 3 = OV. FSR2L STATUS, Bit 2 = Z. FSR2L STATUS, Bit 1 = DC. FSR2L STATUS, Bit 0 = C. FSR2L STATUS, Value on POR, BOR = xxxx xxxx ---x xxxx. FSR2L STATUS, Details on page: = 52, 72 52, 70",
    "Legend:\n- x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "Legend:\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configuration; otherwise it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ). Otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nTMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0 = Timer0 Register High Byte. TMR0H, Value on POR, BOR = 0000 0000. TMR0H, Details on page: = 52, 117. TMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nTMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Value on POR, BOR = xxxx xxxx. TMR0L, Details on page: = 52, 117. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Value on POR, BOR = 1111 1111. T0CON, Details on page: = 52, 115. OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nIRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0100 q000. OSCCON, Details on page: = 32, 52. HLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Value on POR, BOR = 0-00 0101. HLVDCON, Details on page: = 52, 233. WDTCON, Bit 7",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n= -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Value on POR, BOR = --- ---0. WDTCON, Details on page: = 52, 249. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Value on POR, BOR = 0q-1 11q0. RCON, Details on page: = 44, 50, 94. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nByte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Value on POR, BOR = xxxx xxxx. TMR1H, Details on page: = 52, 123. TMR1L, Bit 7 = Timer1 Register Low Bytes. TMR1L, Bit 6 = Timer1 Register Low Bytes. TMR1L, Bit 5 = Timer1 Register Low Bytes. TMR1L, Bit 4 = Timer1 Register Low Bytes. TMR1L, Bit 3 = Timer1 Register Low Bytes. TMR1L, Bit 2 = Timer1 Register Low Bytes. TMR1L, Bit 1 = Timer1 Register Low Bytes.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nTMR1L, Bit 0 = Timer1 Register Low Bytes. TMR1L, Value on POR, BOR = xxxx xxxx. TMR1L, Details on page: = 52, 123. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR = 0000 0000. T1CON, Details on page: = 52, 119. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nTimer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Value on POR, BOR = 0000 0000. TMR2, Details on page: = 52, 126. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Value on POR, BOR = 1111 1111. PR2, Details on page: = 52, 126. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nT2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000 0000. T2CON, Details on page: = 52, 125. SSPBUF, Bit 7 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = SSP Receive Buffer/Transmit Register. SSPBUF, Value on POR, BOR = xxxx",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nxxxx. SSPBUF, Details on page: = 52, 161, 162. SSPADD, Bit 7 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 6 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 5 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 4 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 3 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 2 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 1 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nSSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Bit 0 = SSP Address Register in I 2 C Slave mode. SSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD, Value on POR, BOR = 0000 0000. SSPADD, Details on page: = 52, 162. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Value on POR, BOR = 0000 0000. SSPSTAT, Details on page: = 52, 154, 163. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nSSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Value on POR, BOR = 0000 0000. SSPCON1, Details on page: = 52, 155, 164. SSPCON2, Bit 7 = GCEN. SSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN. SSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN. SSPCON2, Bit 0 = SEN. SSPCON2, Value on POR, BOR = 0000 0000. SSPCON2, Details on page: = 52, 165. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Value on POR, BOR = xxxx xxxx. ADRESH, Details on page: = 53, 222. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBit 0 = A/D Result Register Low Byte. ADRESL, Value on POR, BOR = xxxx xxxx. ADRESL, Details on page: = 53, 222. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Value on POR, BOR = --00 0000. ADCON0, Details on page: = 53, 213. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00 0qqq. ADCON1, Details on page: = 53, 214. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Value on POR, BOR = 0-00 0000. ADCON2, Details on page: = 53, 215. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Value on POR, BOR = xxxx xxxx. CCPR1H, Details on page: = 53, 132. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nCapture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Value on POR, BOR = xxxx xxxx. CCPR1L, Details on page: = 53, 132. CCP1CON, Bit 7 = P1M1 (2). CCP1CON, Bit 6 = P1M0 (2). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = 0000 0000. CCP1CON, Details on page: = 53, 131, 139.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nCCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Value on POR, BOR = xxxx xxxx. CCPR2H, Details on page: = 53, 132. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nCCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Value on POR, BOR = xxxx xxxx. CCPR2L, Details on page: = 53, 132. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Value on POR, BOR = --00 0000. CCP2CON, Details on page: = 53, 131. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Value on POR, BOR = 01-0 0-00. BAUDCON, Details on page: = 53, 196. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (2). PWM1CON, Bit 5 = PDC5 (2). PWM1CON, Bit 4 = PDC4 (2).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nPWM1CON, Bit 3 = PDC3 (2). PWM1CON, Bit 2 = PDC2 (2). PWM1CON, Bit 1 = PDC1 (2). PWM1CON, Bit 0 = PDC0 (2). PWM1CON, Value on POR, BOR = 0000 0000. PWM1CON, Details on page: = 53, 148. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (2). ECCP1AS, Bit 0 = PSSBD0 (2). ECCP1AS, Value on POR, BOR = 0000 0000. ECCP1AS, Details on",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\npage: = 53, 149. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR, BOR = 0000 0000. CVRCON, Details on page: = 53, 229. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Value on POR, BOR = 0000 0111. CMCON, Details on page: = 53, 223. TMR3H, Bit 7 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nTimer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Value on POR, BOR = xxxx xxxx. TMR3H, Details on page: = 53, 129. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nLow Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Value on POR, BOR = xxxx xxxx. TMR3L, Details on page: = 53, 129. T3CON, Bit 7 = RD16 T3CCP2. T3CON, Bit 6 = RD16 T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Value on POR, BOR = 0000 0000. T3CON, Details on page: = 53, 127\nLegend: x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configuration; otherwise it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ). Otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nSPBRGH, Bit 7 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register High Byte. SPBRGH, Value on POR, BOR = 0000 0000. SPBRGH, Details on page: = 53, 197. SPBRG, Bit 7 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register Low Byte. SPBRG,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBit 4 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register Low Byte. SPBRG, Value on POR, BOR = 0000 0000. SPBRG, Details on page: = 53, 197. RCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Value on POR, BOR =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n0000 0000. RCREG, Details on page: = 53, 204. TXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Value on POR, BOR = 0000 0000. TXREG, Details on page: = 53, 202. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBOR = 0000 0010. TXSTA, Details on page: = 53, 194. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000 000x. RCSTA, Details on page: = 53, 195. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR = 11-- 1111. IPR2,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nDetails on page: = 54, 93. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR = 00-- 0000. PIR2, Details on page: = 54, 89. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR = 00-- 0000. PIE2, Details on page: =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n54, 91. IPR1, Bit 7 = PSPIP (2). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111 1111. IPR1, Details on page: = 54, 92. PIR1, Bit 7 = PSPIF (2). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n0000 0000. PIR1, Details on page: = 54, 88. PIE1, Bit 7 = PSPIE (2). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000 0000. PIE1, Details on page: = 54, 90. OSCTUNE, Bit 7 = INTSRC. OSCTUNE, Bit 6 = PLLEN (3). OSCTUNE, Bit 5 = -. OSCTUNE, Bit 4 = TUN4. OSCTUNE, Bit 3 = TUN3. OSCTUNE, Bit 2 = TUN2. OSCTUNE, Bit 1 = TUN1. OSCTUNE, Bit 0 = TUN0. OSCTUNE, Value on POR, BOR = 0q-0 0000.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nOSCTUNE, Details on page: = 29, 54. TRISE (2), Bit 7 = IBF. TRISE (2), Bit 6 = OBF. TRISE (2), Bit 5 = IBOV. TRISE (2), Bit 4 = PSPMODE. TRISE (2), Bit 3 = -. TRISE (2), Bit 2 = TRISE2. TRISE (2), Bit 1 = TRISE1. TRISE (2), Bit 0 = TRISE0. TRISE (2), Value on POR, BOR = 0000 -111. TRISE (2), Details on page: = 54, 110. TRISD (2), Bit 7 = PORTD Data Direction Control Register. TRISD (2), Bit 6 = PORTD Data Direction Control Register. TRISD (2), Bit 5 = PORTD Data Direction Control Register. TRISD (2), Bit 4 = PORTD Data Direction Control Register. TRISD (2), Bit 3 = PORTD Data Direction Control Register. TRISD (2),",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBit 2 = PORTD Data Direction Control Register. TRISD (2), Bit 1 = PORTD Data Direction Control Register. TRISD (2), Bit 0 = PORTD Data Direction Control Register. TRISD (2), Value on POR, BOR = 1111 1111. TRISD (2), Details on page: = 54, 106. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Value on POR, BOR = 1111 1111. TRISC, Details on page: = 54, 103. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nRegister. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Value on POR, BOR = 1111 1111. TRISB, Details on page: = 54, 100. TRISA, Bit 7 = TRISA7 (5). TRISA, Bit 6 = TRISA6 (5). TRISA, Bit 5 = Data Direction Control Register for PORTA. TRISA, Bit 4 = Data Direction Control Register for PORTA. TRISA, Bit 3 = Data Direction Control Register for PORTA. TRISA, Bit 2 = Data Direction Control Register for PORTA. TRISA, Bit 1 = Data Direction Control Register for PORTA. TRISA, Bit 0 = Data Direction Control Register for PORTA. TRISA, Value on POR, BOR = 1111",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n1111. TRISA, Details on page: = 54, 97. LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = PORTE Data Latch Register. LATE (2), Bit 1 = PORTE Data Latch Register. LATE (2), Bit 0 = PORTE Data Latch Register. LATE (2), Value on POR, BOR = ---- -xxx. LATE (2), Details on page: = 54, 109. LATD (2), Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 4 = PORTD Data Latch Register (Read and Write to Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nLatch). LATD (2), Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Bit 0 = PORTD Data Latch Register (Read and Write to Data Latch). LATD (2), Value on POR, BOR = xxxx xxxx. LATD (2), Details on page: = 54, 106. LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nLatch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Value on POR, BOR = xxxx xxxx. LATC, Details on page: = 54, 103. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nWrite to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Value on POR, BOR = xxxx xxxx. LATB, Details on page: = 54, 100. LATA, Bit 7 = LATA7 (6). LATA, Bit 6 = LATA6 (6). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Value on POR, BOR = xxxx xxxx. LATA, Details on page: = 54, 97. PORTE,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\nBit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (4). PORTE, Bit 2 = RE2 (2). PORTE, Bit 1 = RE1 (2). PORTE, Bit 0 = RE0 (2). PORTE, Value on POR, BOR = ---- xxxx. PORTE, Details on page: = 54, 109. PORTD (2), Bit 7 = RD7. PORTD (2), Bit 6 = RD6. PORTD (2), Bit 5 = RD5. PORTD (2), Bit 4 = RD4. PORTD (2), Bit 3 = RD3. PORTD (2), Bit 2 = RD2. PORTD (2), Bit 1 = RD1. PORTD (2), Bit 0 = RD0. PORTD (2), Value on POR, BOR = xxxx xxxx. PORTD (2), Details on page: = 54, 106. PORTC, Bit 7",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n= RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Value on POR, BOR = xxxx xxxx. PORTC, Details on page: = 54, 103. PORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Value on POR, BOR = xxxx xxxx. PORTB, Details on page: = 54, 100. PORTA, Bit 7 = RA7 (5). PORTA, Bit 6 = RA6 (5). PORTA, Bit 5 = RA5. PORTA, Bit 4",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n= RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR, BOR = xx0x 0000. PORTA, Details on page: = 54, 97\nLegend: x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 28-pin devices and are read as ' 0 '. Reset values are shown for 40/44-pin devices; individual unimplemented bits should be interpreted as ' -'.\n3: The PLLEN bit is only available in specific oscillator configuration; otherwise it is disabled and reads as ' 0 '. See Section 2.6.4 'PLL in INTOSC Modes' .\n4: The RE3 bit is only available when Master Clear Reset is disabled (MCLRE Configuration bit = 0 ). Otherwise, RE3 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2X1X/4X1X) (CONTINUED)\n6: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "5.3.5 STATUS REGISTER\nThe STATUS register, shown in Register 5-2, contains the arithmetic status of the ALU. As with any other SFR, it can be the operand for any instruction.\nIf the STATUS register is the destination for an instruction that affects the Z, DC, C, OV or N bits, the results of the instruction are not written; instead, the status is updated according to the instruction performed. Therefore,  the  result  of  an  instruction  with  the  STATUS register as its destination may  be  different than intended. As an example, CLRF STATUS will set the Z bit  and  leave  the  remaining  Status  bits  unchanged (' 000u u1uu ').\nIt is recommended that only BCF BSF SWAPF MOVFF , , , and MOVWF instructions are used to alter the STATUS register, because these instructions do not affect the Z, C, DC, OV or N bits in the STATUS register.\nFor other instructions that do not affect Status bits, see the instruction set summaries  in Table 23-2 and Table 23-3.\nNote: The C and DC bits operate as the borrow and digit borrow bits, respectively, in subtraction.",
    "REGISTER 5-2: STATUS REGISTER\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = R/W-x. U-0, 4 = R/W-x. U-0, 5 = R/W-x. U-0, 6 = R/W-x. U-0, 7 = R/W-x. -, 1 = -. -, 2 = -. -, 3 = N. -, 4 = OV. -, 5 = Z. -, 6 = DC. -, 7 = C\nbit 7\nbit 0",
    "bit 4 N: Negative bit\nThis bit is used for signed arithmetic (2's complement). It indicates whether the result was negative (ALU MSB = 1 ).\n1 = Result was negative\n0 = Result was positive",
    "bit 3 OV: Overflow bit\nThis bit is used for signed arithmetic (2's complement). It indicates an overflow of the 7-bit magnitude which causes the sign bit (bit 7 of the result) to change state.\n1 = Overflow occurred for signed arithmetic (in this arithmetic operation)\n0 = No overflow occurred",
    "bit 2 Z: Zero bit\n1 = The result of an arithmetic or logic operation is zero\n0 = The result of an arithmetic or logic operation is not zero",
    "bit 1 DC: Digit carry/borrow bit\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:\n1 = A carry-out from the 4th low-order bit of the result occurred\n0 = No carry-out from the 4th low-order bit of the result\nNote:\nFor borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either bit 4 or bit 3 of the source register.",
    "bit 0 C: Carry/borrow bit\nFor ADDWF, ADDLW, SUBLW and SUBWF instructions:\n1 = A carry-out from the Most Significant bit of the result occurred\n0 = No carry-out from the Most Significant bit of the result occurred\nNote:\nFor borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either the high or low-order bit of the source register.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "5.4 Data Addressing Modes\nNote:\nThe execution of some instructions in the core  PIC18  instruction  set  are  changed when the PIC18 extended instruction set is enabled. See Section 5.5 'Data Memory and  the  Extended  Instruction  Set' for more information.\nThe data memory space can be addressed in several ways. For most instructions, the addressing mode is fixed. Other instructions may use up to three modes, depending on which operands are used and whether or not the extended instruction set is enabled.\nThe addressing modes are:\n\u00b7 Inherent\n\u00b7 Literal\n\u00b7 Direct\n\u00b7 Indirect\nAn additional addressing mode, Indexed Literal Offset, is available  when  the  extended  instruction  set  is enabled (XINST Configuration bit = 1 ). Its operation is discussed in greater detail in Section 5.5.1 'Indexed Addressing with Literal Offset' .",
    "5.4.1 INHERENT AND LITERAL ADDRESSING\nMany  PIC18  control  instructions  do  not  need  any argument at all; they either perform an operation that globally affects the device or they operate implicitly on one  register. This  addressing  mode  is  known  as Inherent Addressing. Examples include SLEEP RESET , and DAW .\nOther instructions work in a similar way but require an additional  explicit  argument  in  the  opcode.  This  is known  as  Literal  Addressing  mode  because  they require some literal value as an argument. Examples include ADDLW and MOVLW which, respectively, add or move a literal value to the W register. Other examples include CALL and GOTO , which include a 20-bit program memory address.",
    "5.4.2 DIRECT ADDRESSING\nDirect  addressing  specifies  all  or  part  of  the  source and/or destination address of the operation within the opcode itself. The options are specified by the arguments accompanying the instruction.\nIn the core PIC18 instruction set, bit-oriented and byteoriented instructions use some  version of direct addressing by default. All of these instructions include some  8-bit  literal  address  as  their  Least  Significant Byte. This address specifies either a register address in one of the banks of data RAM ( Section 5.3.3 'General Purpose Register File' )  or  a  location  in the Access Bank  ( Section 5.3.2  'Access  Bank' ) as  the  data source for the instruction.\nThe Access RAM bit 'a' determines how the address is interpreted.  When  'a'  is  ' 1 ',  the  contents  of  the  BSR ( Section 5.3.1  'Bank  Select  Register  (BSR)' )  are used with the address to determine the complete 12-bit address of the register. When 'a' is ' 0 ', the address is interpreted  as  being  a  register  in  the  Access  Bank. Addressing that uses the Access RAM is sometimes also known as Direct Forced Addressing mode.",
    "5.4.2 DIRECT ADDRESSING\nA few instructions, such as MOVFF ,  include the entire 12-bit  address  (either  source  or  destination)  in  their opcodes. In these cases, the BSR is ignored entirely.\nThe destination of the operation's results is determined by the destination bit 'd'. When 'd' is ' 1 ', the results are stored back in the source register, overwriting its original contents. When 'd' is ' 0 ',  the results are stored in the  W  register.  Instructions  without  the  'd'  argument have a destination that is implicit in the instruction; their destination is either the target register being operated on or the W register.",
    "5.4.3 INDIRECT ADDRESSING\nIndirect addressing allows the user to access a location in  data memory without giving a fixed address in the instruction. This is done by using File Select Registers (FSRs) as pointers to the locations to be read or written to. Since the FSRs are themselves located in RAM as Special File Registers, they can also be directly manipulated under program control. This makes FSRs very useful in implementing data structures, such as tables and arrays in data memory.\nThe registers for indirect addressing are also implemented with Indirect File Operands (INDFs) that permit automatic manipulation of the pointer value with auto-incrementing, auto-decrementing or offsetting with another value. This allows for efficient code, using loops, such as the example of clearing an entire RAM bank in Example 5-5.",
    "EXAMPLE 5-5:\nHOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nNEXT, 1 = LFSR CLRF. NEXT, 2 = FSR0, 100h POSTINC0. NEXT, 3 = ; ; Clear INDF ; register then ; inc pointer. , 1 = BTFSS. , 2 = FSR0H, 1. , 3 = ; All done with ; Bank1?. , 1 = BRA. , 2 = NEXT. , 3 = ; NO, clear next. CONTINUE, 1 = CONTINUE. CONTINUE, 2 = CONTINUE. CONTINUE, 3 = ; YES, continue",
    "5.4.3.1 FSR Registers and the INDF Operand\nAt  the  core  of  indirect  addressing  are  three  sets  of registers: FSR0, FSR1 and FSR2. Each represents a pair  of  8-bit  registers,  FSRnH  and  FSRnL.  The  four upper bits of the FSRnH register are not used so each FSR pair holds a 12-bit value. This represents a value that can address the entire range of the data memory in a linear fashion. The FSR register pairs, then, serve as pointers to data memory locations.\nIndirect  addressing  is  accomplished  with  a  set  of Indirect File Operands, INDF0 through INDF2. These can  be  thought  of  as  'virtual'  registers:  they  are mapped in the SFR space but are not physically implemented. Reading or writing to a particular INDF register actually accesses its corresponding FSR register pair. A read from INDF1, for example, reads the data at the address indicated by FSR1H:FSR1L. Instructions that use the INDF registers as operands actually use the contents of their corresponding FSR as a pointer to the instruction's target. The  INDF  operand  is just a convenient way of using the pointer.",
    "5.4.3.1 FSR Registers and the INDF Operand\nBecause indirect addressing uses a full 12-bit address, data RAM banking is not necessary. Thus, the current contents of the BSR and the Access RAM bit have no effect on determining the target address.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn addition to the INDF operand, each FSR register pair also has four additional indirect operands. Like INDF, these  are  'virtual'  registers  that  cannot  be  indirectly read or written to. Accessing these registers actually accesses  the  associated  FSR  register  pair,  but  also performs a specific action on its stored value. They are:\n\u00b7 POSTDEC: accesses the FSR value, then automatically decrements it by 1 afterwards\n\u00b7 POSTINC: accesses the FSR value, then automatically increments it by 1 afterwards\n\u00b7 PREINC: increments the FSR value by 1, then uses it in the operation\n\u00b7 PLUSW: adds the signed value of the W register (range of -127 to 128) to that of the FSR and uses the new value in the operation.",
    "5.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn  this  context,  accessing  an  INDF  register  uses  the value in the FSR registers without changing them. Similarly, accessing a PLUSW register gives the FSR value offset by that in the W register; neither value is actually changed in the operation. Accessing the other virtual registers changes the value of the FSR registers.\nOperations  on  the  FSRs  with  POSTDEC,  POSTINC and PREINC affect the entire register pair; that is, rollovers of the FSRnL register from FFh to 00h carry over to  the  FSRnH register. On the other hand, results of these operations do not change the value of any flags in the STATUS register (e.g., Z, N, OV, etc.).",
    "FIGURE 5-9: INDIRECT ADDRESSING\nThe PLUSW register can be used to implement a form of indexed addressing in the data memory space. By manipulating  the  value  in  the  W  register,  users  can reach  addresses  that  are  fixed  offsets  from  pointer addresses. In some applications, this can be used to implement  some  powerful  program  control  structure, such as software stacks, inside of data memory.",
    "5.4.3.3 Operations by FSRs on FSRs\nIndirect addressing operations that target other FSRs or virtual registers represent special cases. For example, using an FSR to point to one of the virtual registers will  not  result  in  successful  operations.  As  a  specific case, assume that FSR0H:FSR0L contains FE7h, the address of INDF1. Attempts to read the value of the INDF1  using  INDF0  as  an  operand  will  return  00h. Attempts to write to INDF1 using INDF0 as the operand will result in a NOP .\nOn the other hand, using the virtual registers to write to an FSR pair may not occur as planned. In these cases, the value will be written to the FSR pair but without any incrementing or decrementing. Thus, writing to INDF2 or POSTDEC2  will  write  the  same  value  to  the FSR2H:FSR2L.\nSince the FSRs are physical registers mapped in the SFR space, they can be manipulated through all direct operations.  Users  should  proceed  cautiously  when working  on  these  registers,  particularly  if  their  code uses indirect addressing.",
    "5.4.3.3 Operations by FSRs on FSRs\nSimilarly, operations by indirect addressing are generally permitted on all other SFRs. Users should exercise the appropriate caution that they do not inadvertently change settings that might affect the operation of the device.",
    "5.5 Data Memory and the Extended Instruction Set\nEnabling  the  PIC18  extended  instruction  set  (XINST Configuration  bit  = 1 ) significantly  changes  certain aspects  of  data  memory  and  its  addressing.  Specifically, the use of the Access Bank for many of the core PIC18  instructions  is  different;  this  is due  to  the introduction  of  a  new  addressing  mode  for  the  data memory space.\nWhat does not change is just as important. The size of the data memory space is unchanged, as well as its linear  addressing.  The  SFR  map  remains  the  same. Core PIC18 instructions can still operate in both Direct and  Indirect  Addressing  mode;  inherent  and  literal instructions  do  not  change at all.  Indirect  addressing with FSR0 and FSR1 also remain unchanged.",
    "5.5.1 INDEXED ADDRESSING WITH LITERAL OFFSET\nEnabling the PIC18 extended instruction set changes the  behavior  of  indirect  addressing  using  the  FSR2 register  pair  within  access  RAM.  Under  the  proper conditions, instructions that use the Access Bank - that is,  most  bit-oriented  and  byte-oriented  instructions  can  invoke  a  form  of  indexed  addressing  using  an offset specified in the instruction. This special addressing mode is known as Indexed Addressing with Literal Offset, or Indexed Literal Offset mode.\nWhen using the extended instruction set, this addressing mode requires the following:\n\u00b7 The use of the Access Bank is forced ('a' = 0 ); and\n\u00b7 The file address argument is less than or equal to 5Fh.\nUnder these conditions, the file address of the instruction is not interpreted as the lower byte of an address (used with the BSR in direct addressing), or as an 8-bit address  in  the  Access  Bank.  Instead,  the  value  is interpreted as an offset value to an Address Pointer, specified  by  FSR2.  The  offset  and  the  contents  of FSR2 are added to obtain the  target  address  of  the operation.",
    "5.5.2 INSTRUCTIONS AFFECTED BY INDEXED LITERAL OFFSET MODE\nAny of the core PIC18 instructions that can use direct addressing are potentially affected by the Indexed Literal Offset Addressing mode. This includes all byte-oriented and bit-oriented instructions, or almost one-half of the standard PIC18 instruction set. Instructions that only use Inherent or Literal Addressing modes are unaffected.\nAdditionally, byte-oriented and bit-oriented instructions are  not  affected  if  they  do  not  use  the  Access  Bank (Access RAM bit is ' 1 '), or include a file address of 60h or above. Instructions meeting these criteria will continue  to  execute  as  before.  A  comparison  of  the different possible addressing modes when the extended  instruction set is enabled is shown  in Figure 5-10.\nThose who desire to use bit-oriented or byte-oriented instructions in the Indexed Literal Offset mode should note the changes to assembler syntax for this mode. This  is  described  in  more  detail  in Section 23.2.1 'Extended Instruction Syntax' .",
    "COMPARING ADDRESSING OPTIONS FOR BIT-ORIENTED AND BYTE-ORIENTED INSTRUCTIONS (EXTENDED INSTRUCTION SET ENABLED)\nEXAMPLE INSTRUCTION: ADDWF, f, d, a (Opcode: 0010 01da ffff ffff )",
    "When 'a' = 0 and f \u2265 60h:\nThe  instruction executes  in Direct Forced mode. 'f' is interpreted  as  a  location  in  the Access  RAM  between  060h and 0FFh. This is the same as locations 060h to 07Fh (Bank 0)  and  F80h  to  FFFh (Bank 15) of data memory.\nLocations  below  60h  are  not available in this addressing mode.",
    "When 'a' = 0 and f \u2264 5Fh:\nThe instruction executes in Indexed Literal Offset mode. 'f' is interpreted as an offset to the address  value  in  FSR2.  The two are added together to obtain the address of the target register for the instruction. The address  can  be  anywhere  in the data memory space.\nNote  that  in  this mode,  the correct syntax is now:\nADDWF [k], d where 'k' is the same as 'f'.",
    "When 'a' = 1 (all values of f):\nThe  instruction executes  in Direct  mode  (also  known  as Direct Long mode). 'f' is interpreted as a location in one of the 16 banks of the data memory  space.  The  bank  is designated by the Bank Select Register  (BSR).  The  address can  be  in  any  implemented bank in the data memory space.",
    "5.5.3 MAPPING THE ACCESS BANK IN INDEXED LITERAL OFFSET ADDRESSING MODE\nThe  use  of  Indexed  Literal  Offset  Addressing  mode effectively changes how the first 96 locations of access RAM (00h to 5Fh) are mapped. Rather than containing just the contents of the bottom half of Bank 0, this mode maps the  contents  from  Bank  0  and  a  user  defined 'window'  that  can  be  located  anywhere  in  the  data memory  space.  The  value  of  FSR2  establishes  the lower  boundary  of  the  addresses  mapped  into  the window, while the upper boundary is defined by FSR2 plus  95  (5Fh).  Addresses  in  the  Access  RAM  above 5Fh are mapped as previously described (see Section 5.3.2 'Access Bank' ). An example of Access Bank remapping in this addressing mode is shown in Figure 5-11.\nRemapping of the Access Bank applies only to operations using  the  Indexed  Literal  Offset  Addressing mode. Operations that use the BSR (Access RAM bit is ' 1 ') will continue to use direct addressing as before.",
    "5.6 PIC18 Instruction Execution and the Extended Instruction Set\nEnabling the extended instruction set adds eight additional commands to the existing PIC18 instruction set.  These  instructions  are  executed  as  described  in Section 23.2 'Extended Instruction Set' .",
    "Example Situation:\nADDWF f, d, a\nFSR2H:FSR2L = 120h\nLocations in the region from the FSR2 Pointer (120h)  to  the  pointer  plus 05Fh  (17Fh)  are  mapped to the bottom of the Access RAM (000h-05Fh).\nLocations  in  Bank  0  from 060h to 07Fh are mapped, as usual, to the middle of the Access Bank.\nSpecial  File  Registers  at F80h  through  FFFh  are mapped  to  80h  through FFh, as usual.\nBank  0  addresses  below 5Fh can still be addressed by using the BSR.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "6.0 FLASH PROGRAM MEMORY\nIn PIC18F2X1X/4X1X devices, the program memory is implemented as read-only Flash memory. It is readable over the entire VDD range during normal operation. A read from program memory is executed on one byte at a time.",
    "6.1 Table Reads\nFor PIC18 devices, there are two operations that allow the  processor  to  move  bytes  between  the  program memory space and the data RAM: table read ( TBLRD ) and table write ( TBLWT ).\nTable  read  operations  retrieve  data  from  program memory  and  place  it  into  the  data  RAM  space. Figure 6-1  shows  the  operation  of  a  table  read  with program memory and data RAM.\nThe program memory space is 16 bits wide, while the data RAM space is 8 bits wide. Table reads and table writes move data between these two memory spaces through an 8-bit register, TABLAT.",
    "FIGURE 6-1: TABLE READ OPERATION\nTable  reads  work  with  byte  entities.  A  table  block containing data, rather than program instructions, is not required to be word-aligned. Therefore, a table block can start and end at any byte address.\nBecause the program memory cannot be written to or erased under normal operation, the TBLWT operation is not discussed here.\nNote 1: Although it cannot be used in PIC18F2X1X/4X1X  devices  in normal operation,  the TBLWT instruction  is  still implemented in the instruction set. Executing the instruction takes two instruction  cycles,  but  effectively  results in a NOP .\n2: The TBLWT instruction is available only in programming modes  and is  used  during In-Circuit Serial Programming\u2122 (ICSP\u2122).",
    "6.2 Control Registers\nTwo control registers are used in conjunction with the TBLRD instruction: the TABLAT  register and the TBLPTR register set.",
    "6.2.1 TABLAT - TABLE LATCH REGISTER\nThe Table Latch (TABLAT) is an 8-bit register mapped into the SFR space. The Table Latch register is used to hold 8-bit data during data transfers between program memory and data RAM.",
    "6.2.2 TBLPTR - TABLE POINTER REGISTER\nThe Table Pointer register (TBLPTR) addresses a byte within  the  program  memory.  It  is  comprised  of  three SFR registers: Table Pointer Upper Byte, Table Pointer High Byte and Table Pointer Low Byte (TBLPTRU:TBLPTRH:TBLPTRL).  Only  the  lower  six bits of TBLPTRU  are  used  with TBLPTRH  and TBLPTRL, to form a 22-bit wide pointer.\nThe contents of TBLPTR indicate a location in program memory space. The low-order 21 bits allow the device to address the full 2 Mbytes of program memory space. The 22nd bit allows access to the configuration space, including  the  Device  ID,  user  ID  locations  and  the Configuration bits.\nThe TBLPTR register set is updated when executing a TBLRD in one of four ways, based on the instruction's arguments.  These  are  detailed  in  Table 6-1.  These operations  on  the  TBLPTR  only  affect  the  low-order 21 bits.\nTABLE 6-1: OPERATIONS WITH TBLRD",
    "TABLE POINTER INSTRUCTIONS\nTBLRD*, Operation on Table Pointer = TBLPTR is not modified. TBLRD*+, Operation on Table Pointer = TBLPTR is incremented after the read. TBLRD*-, Operation on Table Pointer = TBLPTR is decremented after the read. TBLRD+*, Operation on Table Pointer = TBLPTR is incremented before the read",
    "6.3 Reading the Flash Program Memory\nThe TBLRD instruction  is  used  to  retrieve  data  from program  memory  and  place  it  into  data  RAM.  Table reads from program memory are performed one byte at a time.\nTBLPTR points to a byte address in program space. Executing TBLRD places  the  byte  pointed  to  into TABLAT. In addition, TBLPTR can be modified automatically for the next table read operation.\nThe internal program memory is typically organized by words. The Least Significant bit of the address selects between the high and low bytes of the word. Figure 6-2 shows  the  interface  between  the  internal  program memory and the TABLAT.\nA typical method for reading data from program memory is shown in Example 6-1.\nWhen a TBLRD is executed, all 22 bits of the TBLPTR determine  which  byte  is  read  from  program  memory into TABLAT.",
    "READING A FLASH PROGRAM MEMORY WORD\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. , 3 = ; ;. READ_WORD, 1 = . READ_WORD, 2 = . READ_WORD, 3 = . , 1 = TBLRD*+ MOVF MOVWF TBLRD*+ MOVF MOVF. , 2 = . , 3 = ; read into TABLAT and increment. , 1 = . , 2 = TABLAT, W. , 3 = ; get data. , 1 = . , 2 = . , 3 = ; read into TABLAT and increment. , 1 = . , 2 = TABLAT, W. , 3 = ; get data. , 1 = . , 2 = WORD_ODD. , 3 = ",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH READING PROGRAM FLASH MEMORY\nTBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte. TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte. TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte. TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte. TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte. TBLPTRU, Reset Valueson Page = 51. TBPLTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>).",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH READING PROGRAM FLASH MEMORY\nTBPLTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Reset Valueson Page = 51. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH READING PROGRAM FLASH MEMORY\n= Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Reset Valueson Page = 51. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Reset Valueson Page = 51\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used during Flash access.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "7.1 Introduction\nAll PIC18 devices include an 8 x 8 hardware multiplier as part of the ALU. The multiplier performs an unsigned operation and yields a 16-bit result that is stored in the product register pair, PRODH:PRODL. The multiplier's operation  does  not  affect  any  flags  in  the  STATUS register.\nMaking multiplication a hardware operation allows it to be completed in a single instruction cycle. This has the advantages  of  higher  computational  throughput  and reduced  code  size  for  multiplication  algorithms  and allows the PIC18 devices to be used in many applications previously reserved for digital signal processors. A comparison  of various hardware  and  software multiply operations, along with the savings in memory and execution time, is shown in Table 7-1.",
    "7.2 Operation\nExample 7-1 shows the instruction sequence for an 8 x 8 unsigned multiplication. Only one instruction is required when  one  of  the  arguments  is  already  loaded  in  the WREG register.\nExample 7-2 shows the sequence to do an 8 x 8 signed multiplication. To account for the sign bits of the arguments, each argument's Most Significant bit (MSb) is tested and the appropriate subtractions are done.",
    "TABLE 7-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n8 x 8 unsigned, Multiply Method = Without hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 13. 8 x 8 unsigned, Cycles (Max). = 69. 8 x 8 unsigned, Time.@40 MHz = 6.9 \u03bc s. 8 x 8 unsigned, Time.@10 MHz = 27.6 \u03bc s. 8 x 8 unsigned, Time.@4MHz = 69 \u03bc s. 8 x 8 unsigned, Multiply Method = Hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 1. 8 x 8 unsigned, Cycles (Max). = 1. 8 x 8 unsigned, Time.@40 MHz = 100 ns. 8 x 8 unsigned, Time.@10 MHz = 400 ns. 8 x 8 unsigned, Time.@4MHz = 1 \u03bc s. 8 x 8 signed, Multiply Method = Without hardware multiply. 8 x 8 signed, Program Memory (Words). = 33. 8 x 8 signed, Cycles (Max). = 91. 8 x 8 signed, Time.@40 MHz = 9.1 \u03bc s. 8 x 8 signed, Time.@10",
    "TABLE 7-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\nMHz = 36.4 \u03bc s. 8 x 8 signed, Time.@4MHz = 91 \u03bc s. 8 x 8 signed, Multiply Method = Hardware multiply. 8 x 8 signed, Program Memory (Words). = 6. 8 x 8 signed, Cycles (Max). = 6. 8 x 8 signed, Time.@40 MHz = 600 ns. 8 x 8 signed, Time.@10 MHz = 2.4 \u03bc s. 8 x 8 signed, Time.@4MHz = 6 \u03bc s. 16 x 16 unsigned, Multiply Method = Without hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 21. 16 x 16 unsigned, Cycles (Max). = 242. 16 x 16 unsigned, Time.@40 MHz = 24.2 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 96.8 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 242 \u03bc s. 16 x 16 unsigned, Multiply Method = Hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 28. 16 x 16 unsigned, Cycles (Max). =",
    "TABLE 7-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS\n28. 16 x 16 unsigned, Time.@40 MHz = 2.8 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 11.2 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 28 \u03bc s. 16 x 16 signed, Multiply Method = Without hardware multiply. 16 x 16 signed, Program Memory (Words). = 52. 16 x 16 signed, Cycles (Max). = 254. 16 x 16 signed, Time.@40 MHz = 25.4 \u03bc s. 16 x 16 signed, Time.@10 MHz = 102.6 \u03bc s. 16 x 16 signed, Time.@4MHz = 254 \u03bc s. 16 x 16 signed, Multiply Method = Hardware multiply. 16 x 16 signed, Program Memory (Words). = 35. 16 x 16 signed, Cycles (Max). = 40. 16 x 16 signed, Time.@40 MHz = 4.0 \u03bc s. 16 x 16 signed, Time.@10 MHz = 16.0 \u03bc s. 16 x 16 signed, Time.@4MHz = 40 \u03bc s",
    "EXAMPLE 7-1:\n8 x 8 UNSIGNED MULTIPLY ROUTINE\nMOVF\nARG1, W\n;\nMULWF\nARG2\n; ARG1 * ARG2 ->\n; PRODH:PRODL",
    "EXAMPLE 7-2: 8 x 8 SIGNED MULTIPLY\nROUTINE\nMOVF MULWF, 1 = ARG1, W ARG2. MOVF MULWF, 2 = ; ARG1 * ARG2 ->. BTFSC SUBWF, 1 = ARG2, SB PRODH, F. BTFSC SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH. MOVF BTFSC SUBWF, 1 = ARG2, W. MOVF BTFSC SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH ; - ARG2. , 1 = ARG1, SB PRODH, F. , 2 = ",
    "PIC18F2X1X/4X1X\nExample 7-3  shows  the  sequence  to  do  a  16  x  16 unsigned multiplication. Equation 7-1 shows the algorithm that is used. The 32-bit result is stored in four registers (RES3:RES0).",
    "EQUATION 7-1:\n16 x 16 UNSIGNED MULTIPLICATION ALGORITHM\nRES3:RES0, 1 = =. RES3:RES0, 2 = ARG1H:ARG1L \u2022 ARG2H:ARG2L \u2022 \u2022 16",
    "EXAMPLE 7-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L, ARG2L. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = PRODH,. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2L-> PRODH:PRODL. MOVFF MOVFF, 1 = PRODL,. MOVFF MOVFF, 2 = RES1 RES0. MOVFF MOVFF, 3 = ; ;. MOVFF MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = . MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = W. MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2H-> PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 =",
    "EXAMPLE 7-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nRES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2H-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products.",
    "EXAMPLE 7-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2L-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = F. ADDWF, 3 = ;.",
    "EXAMPLE 7-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = \nExample 7-4  shows  the  sequence  to  do  a  16  x  16 signed  multiply.  Equation 7-2  shows  the  algorithm used.  The  32-bit  result  is  stored  in  four  registers (RES3:RES0).  To  account  for  the  sign  bits  of  the arguments, the MSb for each argument pair is tested and the appropriate subtractions are done.\nEQUATION 7-2:\n16 x 16 SIGNED MULTIPLICATION ALGORITHM\nRES3:RES0\n= ARG1H:ARG1L   ARG2H:ARG2L\n\u2022",
    "EXAMPLE 7-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\n= (ARG1H   ARG2H   2 16 ) + \u2022 \u2022\n(ARG1H   ARG2L   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2H   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2L) + \u2022\n(-1 \u2022 ARG2H<7>   ARG1H:ARG1L   2 16 ) + \u2022 \u2022\n(-1 \u2022 ARG1H<7>   ARG2H:ARG2L   2 16 ) \u2022 \u2022",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1L * ARG2L ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES1. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES0. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 =",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nARG1H * ARG2H ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ;. MULWF, 4 = ARG1L * ARG2H ->. , 1 = . , 2 = . , 3 = ;. , 4 = PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF MULWF, 1 = ARG1H, ARG2L. MOVF MULWF, 2 = W. MOVF MULWF, 3 = ; ;. MOVF MULWF, 4 = ARG1H * ARG2L ->. , 1 = . , 2 = . , 3 = ;. , 4 =",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nPRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1, F. ADDWF, 2 = . ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2, F. ADDWFC, 2 = . ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . BTFSS, 1 = ARG2H,. BTFSS, 2 = 7. BTFSS, 3 = ;. BTFSS, 4 = ARG2H:ARG2L",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nneg?. BRA, 1 = SIGN_ARG1. BRA, 2 = . BRA, 3 = ;. BRA, 4 = no, check ARG1. MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWF, 1 = RES2. SUBWF, 2 = . SUBWF, 3 = ;. SUBWF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWFB, 1 = RES3. SUBWFB, 2 = . SUBWFB, 3 = . SUBWFB, 4 = . SIGN_ARG1 BTFSS, 1 = ARG1H,. SIGN_ARG1 BTFSS, 2 = 7. SIGN_ARG1 BTFSS, 3 = ;. SIGN_ARG1 BTFSS, 4 = ARG1H:ARG1L neg?. BRA, 1 = CONT_CODE.",
    "EXAMPLE 7-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nBRA, 2 = . BRA, 3 = ;. BRA, 4 = no, done. MOVF, 1 = ARG2L,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . SUBWF, 1 = RES2. SUBWF, 2 = . SUBWF, 3 = ;. SUBWF, 4 = . MOVF, 1 = ARG2H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ; CONT_CODE, 1 = . ; CONT_CODE, 2 = . ; CONT_CODE, 3 = . ; CONT_CODE, 4 = . :, 1 = . :, 2 = . :, 3 = . :, 4 = ",
    "8.0 INTERRUPTS\nThe PIC18F2X1X/4X1X devices have multiple interrupt sources  and  an  interrupt  priority  feature  that  allows most interrupt sources to be assigned a high priority level or a low priority level. The high priority interrupt vector is at 0008h and the low priority interrupt vector is at 0018h. High priority interrupt events will interrupt any low priority interrupts that may be in progress.\nThere  are  ten  registers  which  are  used  to  control interrupt operation. These registers are:\n\u00b7 RCON\n\u00b7 INTCON\n\u00b7 INTCON2\n\u00b7 INTCON3\n\u00b7 PIR1, PIR2\n\u00b7 PIE1, PIE2\n\u00b7 IPR1, IPR2\nIt is  recommended  that  the  Microchip  header  files supplied with MPLAB \u00ae  IDE be used for the symbolic bit names in these registers. This allows the assembler/ compiler to automatically take care of the placement of these bits within the specified register.\nIn general, interrupt sources have three bits to control their operation. They are:\n\u00b7 Flag bit to indicate that an interrupt event occurred\n\u00b7 Enable bit that allows program execution to branch to the interrupt vector address when the flag bit is set\n\u00b7 Priority bit to select high priority or low priority",
    "8.0 INTERRUPTS\nThe interrupt priority feature is enabled by setting the IPEN bit (RCON<7>). When  interrupt priority is enabled,  there  are  two  bits  which  enable  interrupts globally. Setting the GIEH bit (INTCON<7>) enables all interrupts  that  have  the  priority  bit  set  (high  priority). Setting the GIEL bit (INTCON<6>) enables all interrupts that have the priority bit cleared (low priority). When  the  interrupt  flag,  enable  bit  and  appropriate global interrupt enable bit are set, the interrupt will vector immediately to address 0008h or 0018h, depending on the priority bit setting. Individual interrupts can be disabled through their corresponding enable bits.",
    "PIC18F2X1X/4X1X\nWhen  the  IPEN  bit  is  cleared  (default  state),  the interrupt priority feature is disabled and interrupts are compatible with PIC \u00ae mid-range devices. In Compatibility mode, the interrupt priority bits for each source  have  no  effect.  INTCON<6>  is  the  PEIE  bit, which enables/disables all peripheral interrupt sources. INTCON<7> is the GIE bit, which enables/disables all interrupt  sources.  All  interrupts  branch  to  address 0008h in Compatibility mode.\nWhen an interrupt is responded to, the global interrupt enable bit is cleared to disable further interrupts. If the IPEN bit is cleared, this is the GIE bit. If interrupt priority levels are used, this will be either the GIEH or GIEL bit. High  priority  interrupt  sources  can  interrupt  a  low priority interrupt. Low priority interrupts are not processed while high priority interrupts are in progress.",
    "PIC18F2X1X/4X1X\nThe return address is pushed onto the stack and the PC is loaded with the interrupt vector address (0008h or 0018h). Once in the Interrupt Service Routine, the source(s) of the interrupt can be determined by polling the interrupt flag  bits.  The  interrupt  flag  bits  must  be cleared  in  software  before  re-enabling  interrupts  to avoid recursive interrupts.\nThe 'return  from  interrupt'  instruction, RETFIE ,  exits the interrupt routine and sets the GIE bit (GIEH or GIEL if priority levels are used), which re-enables interrupts.\nFor external interrupt events, such as the INT pins or the PORTB input change interrupt, the interrupt latency will be  three  to  four  instruction  cycles.  The  exact latency is the same for one or two-cycle instructions. Individual interrupt flag bits are set, regardless of the status of their corresponding enable bit or the GIE bit.\nNote:\nDo not use the MOVFF instruction to modify any of the interrupt control registers while any interrupt  is  enabled.  Doing  so  may cause erratic microcontroller behavior.",
    "8.1 INTCON Registers\nThe  INTCON  registers  are  readable  and  writable registers,  which  contain  various  enable,  priority  and flag bits.",
    "PIC18F2X1X/4X1X\nNote:\nInterrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure  the  appropriate  interrupt  flag  bits are  clear  prior  to  enabling  an  interrupt. This feature allows for software polling.",
    "REGISTER 8-1: INTCON REGISTER\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-x. GIE/GIEH, 1 = PEIE/GIEL. GIE/GIEH, 2 = TMR0IE. GIE/GIEH, 3 = INT0IE. GIE/GIEH, 4 = RBIE. GIE/GIEH, 5 = TMR0IF. GIE/GIEH, 6 = INT0IF. GIE/GIEH, 7 = RBIF\nbit 7\nbit 0",
    "bit 7 GIE/GIEH: Global Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked interrupts\n0 = Disables all interrupts",
    "When IPEN = 1 :\n1 = Enables all high priority interrupts\n0 = Disables all interrupts\nPEIE/GIEL:\nPeripheral Interrupt Enable bit",
    "When IPEN = 0 :\n1 = Enables all unmasked peripheral interrupts\n0 = Disables all peripheral interrupts",
    "When IPEN = 1 :\n1 = Enables all low priority peripheral interrupts\n0 = Disables all low priority peripheral interrupts",
    "bit 5 TMR0IE: TMR0 Overflow Interrupt Enable bit\n1 = Enables the TMR0 overflow interrupt\n0 = Disables the TMR0 overflow interrupt",
    "bit 4 INT0IE: INT0 External Interrupt Enable bit\n1 = Enables the INT0 external interrupt\n0 = Disables the INT0 external interrupt\nRBIE:\nRB Port Change Interrupt Enable bit\n1 = Enables the RB port change interrupt\n0 = Disables the RB port change interrupt\nTMR0IF: TMR0 Overflow Interrupt Flag bit\n1 = TMR0 register has overflowed (must be cleared in software)\n0 = TMR0 register did not overflow",
    "bit 1 INT0IF: INT0 External Interrupt Flag bit\n1 = The INT0 external interrupt occurred (must be cleared in software)\n0 = The INT0 external interrupt did not occur",
    "bit 0 RBIF: RB Port Change Interrupt Flag bit\n1 = At least one of the RB7:RB4 pins changed state (must be cleared in software)\n0 = None of the RB7:RB4 pins have changed state\nNote:\nA mismatch condition will continue to set this bit. Reading PORTB will end the mismatch condition and allow the bit to be cleared.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 6\nbit 3\nbit 2",
    "PIC18F2X1X/4X1X\nREGISTER 8-2:",
    "INTCON2 REGISTER\nR/W-1, 1 = R/W-1. R/W-1, 2 = R/W-1. R/W-1, 3 = R/W-1. R/W-1, 4 = U-0. R/W-1, 5 = R/W-1. R/W-1, 6 = U-0. R/W-1, 7 = R/W-1. RBPU, 1 = INTEDG0. RBPU, 2 = INTEDG1. RBPU, 3 = INTEDG2. RBPU, 4 = -. RBPU, 5 = TMR0IP. RBPU, 6 = -. RBPU, 7 = RBIP\nbit 7\nbit 0\nbit 7 RBPU: PORTB Pull-up Enable bit\n1 = All PORTB pull-ups are disabled\n0 = PORTB pull-ups are enabled by individual port latch values\nbit 6 INTEDG0: External Interrupt 0 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 5 INTEDG1: External Interrupt 1 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "INTCON2 REGISTER\nbit 4 INTEDG2: External Interrupt 2 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 3 Unimplemented: Read as ' 0 '\nbit 2 TMR0IP: TMR0 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1 Unimplemented: Read as ' 0 '\nbit 0 RBIP: RB Port Change Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nNote:\nInterrupt flag bits are set when an interrupt condition occurs regardless of the state of  its  corresponding  enable  bit  or  the  global  interrupt  enable  bit.  User  software should  ensure  the  appropriate  interrupt  flag  bits  are  clear  prior  to  enabling  an interrupt. This feature allows for software polling.",
    "INTCON3 REGISTER\nR/W-1, 1 = R/W-1. R/W-1, 2 = U-0. R/W-1, 3 = R/W-0. R/W-1, 4 = R/W-0. R/W-1, 5 = U-0. R/W-1, 6 = R/W-0. R/W-1, 7 = R/W-0. INT2IP, 1 = INT1IP. INT2IP, 2 = -. INT2IP, 3 = INT2IE. INT2IP, 4 = INT1IE. INT2IP, 5 = -. INT2IP, 6 = INT2IF. INT2IP, 7 = INT1IF\nbit 7\nbit 0\nbit 7 INT2IP: INT2 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6 INT1IP: INT1 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5 Unimplemented: Read as ' 0 '\nbit 4 INT2IE: INT2 External Interrupt Enable bit\n1 = Enables the INT2 external interrupt\n0 = Disables the INT2 external interrupt",
    "bit 3 INT1IE: INT1 External Interrupt Enable bit\n1 = Enables the INT1 external interrupt\n0 = Disables the INT1 external interrupt\nbit 2 Unimplemented: Read as ' 0 '\nbit 1 INT2IF: INT2 External Interrupt Flag bit\n1 = The INT2 external interrupt occurred (must be cleared in software)\n0 = The INT2 external interrupt did not occur",
    "bit 0 INT1IF: INT1 External Interrupt Flag bit\n1 = The INT1 external interrupt occurred (must be cleared in software)\n0 = The INT1 external interrupt did not occur",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nNote:, 1 = Interrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "8.2 PIR Registers\nThe PIR registers contain the individual flag bits for the peripheral interrupts. Due to the number of peripheral interrupt  sources,  there  are  two  Peripheral  Interrupt Request (Flag) registers (PIR1 and PIR2).\nNote 1: Interrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the Global Interrupt Enable bit, GIE (INTCON<7>).\n2: User software should ensure the appropriate interrupt flag bits are cleared prior to enabling  an  interrupt  and  after  servicing that interrupt.",
    "REGISTER 8-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PSPIF (1), 1 = ADIF. PSPIF (1), 2 = RCIF. PSPIF (1), 3 = TXIF. PSPIF (1), 4 = SSPIF. PSPIF (1), 5 = CCP1IF. PSPIF (1), 6 = TMR2IF. PSPIF (1), 7 = TMR1IF\nbit 7\nbit 0",
    "REGISTER 8-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nbit 7 PSPIF: Parallel Slave Port Read/Write Interrupt Flag bit\n(1)\n1 = A read or a write operation has taken place (must be cleared in software)\n0 = No read or write has occurred\nNote 1: This bit is unimplemented on 28-pin devices and is read as ' 0 '.\nbit 6 ADIF: A/D Converter Interrupt Flag bit\n1 = An A/D conversion completed (must be cleared in software)\n0 = The A/D conversion is not complete\nbit 5 RCIF: EUSART Receive Interrupt Flag bit\n1 = The EUSART receive buffer, RCREG, is full (cleared when RCREG is read)\n0 = The EUSART receive buffer is empty\nbit 4 TXIF: EUSART Transmit Interrupt Flag bit\n1 = The EUSART transmit buffer, TXREG, is empty (cleared when TXREG is written)\n0 = The EUSART transmit buffer is full\nbit 3 SSPIF: Master Synchronous Serial Port Interrupt Flag bit\n1 = The transmission/reception is complete (must be cleared in software)\n0 = Waiting to transmit/receive",
    "bit 2 CCP1IF: CCP1 Interrupt Flag bit\nCapture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred",
    "PWM mode:\nUnused in this mode.\nbit 1 TMR2IF: TMR2 to PR2 Match Interrupt Flag bit\n1 = TMR2 to PR2 match occurred (must be cleared in software)\n0 = No TMR2 to PR2 match occurred",
    "bit 0 TMR1IF: TMR1 Overflow Interrupt Flag bit\n1 = TMR1 register overflowed (must be cleared in software)\n0 = TMR1 register did not overflow",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "REGISTER 8-5:\nbit 0",
    "PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nR/W-0, 1 = R/W-0. R/W-0, 2 = U-0. R/W-0, 3 = U-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. OSCFIF, 1 = CMIF. OSCFIF, 2 = -. OSCFIF, 3 = -. OSCFIF, 4 = BCLIF. OSCFIF, 5 = HLVDIF. OSCFIF, 6 = TMR3IF. OSCFIF, 7 = CCP2IF\nbit 7\nbit 0",
    "PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nbit 7 OSCFIF: Oscillator Fail Interrupt Flag bit\n1 = Device oscillator failed, clock input has changed to INTOSC (must be cleared in software)\n0 = Device clock operating\nbit 6 CMIF: Comparator Interrupt Flag bit\n1 = Comparator input has changed (must be cleared in software)\n0 = Comparator input has not changed",
    "bit 5-4 Unimplemented: Read as ' 0 '\nbit 3 BCLIF: Bus Collision Interrupt Flag bit\n1 = A bus collision occurred (must be cleared in software)\n0 = No bus collision occurred\nbit 2 HLVDIF: High/Low-Voltage Detect Interrupt Flag bit\n1 = A low-voltage condition occurred (must be cleared in software)\n0 = The device voltage is above the High/Low-Voltage Detect trip point\nbit 1 TMR3IF: TMR3 Overflow Interrupt Flag bit\n1 = TMR3 register overflowed (must be cleared in software)\n0 = TMR3 register did not overflow\nCCP2IF:\nCCPx Interrupt Flag bit",
    "Capture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "8.3 PIE Registers\nThe PIE registers contain the individual enable bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Enable registers (PIE1 and PIE2). When IPEN = 0 , the PEIE bit must be set to enable any of these peripheral interrupts.",
    "REGISTER 8-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PSPIE (1), 1 = ADIE. PSPIE (1), 2 = RCIE. PSPIE (1), 3 = TXIE. PSPIE (1), 4 = SSPIE. PSPIE (1), 5 = CCP1IE. PSPIE (1), 6 = TMR2IE. PSPIE (1), 7 = TMR1IE\nbit 7\nbit 0",
    "bit 7\nPSPIE: Parallel Slave Port Read/Write Interrupt Enable bit (1)\n1 = Enables the PSP read/write interrupt\n0 = Disables the PSP read/write interrupt\nNote 1: This bit is unimplemented on 28-pin devices and is read as ' 0 '.",
    "bit 6 ADIE: A/D Converter Interrupt Enable bit\n1 = Enables the A/D interrupt\n0 = Disables the A/D interrupt\nbit 5\nRCIE: EUSART Receive Interrupt Enable bit\n1 = Enables the EUSART receive interrupt\n0 = Disables the EUSART receive interrupt\nbit 4 TXIE: EUSART Transmit Interrupt Enable bit\n1 = Enables the EUSART transmit interrupt\n0 = Disables the EUSART transmit interrupt",
    "bit 3\nSSPIE: Master Synchronous Serial Port Interrupt Enable bit\n1 = Enables the MSSP interrupt\n0 = Disables the MSSP interrupt",
    "bit 2 CCP1IE: CCP1 Interrupt Enable bit\n1 = Enables the CCP1 interrupt\n0 = Disables the CCP1 interrupt",
    "bit 1 TMR2IE: TMR2 to PR2 Match Interrupt Enable bit\n1 = Enables the TMR2 to PR2 match interrupt\n0 = Disables the TMR2 to PR2 match interrupt",
    "bit 0 TMR1IE:\nTMR1 Overflow Interrupt Enable bit\n1 = Enables the TMR1 overflow interrupt\n0 = Disables the TMR1 overflow interrupt",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nR/W-0, 1 = R/W-0. R/W-0, 2 = U-0. R/W-0, 3 = U-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. OSCFIE, 1 = CMIE. OSCFIE, 2 = -. OSCFIE, 3 = -. OSCFIE, 4 = BCLIE. OSCFIE, 5 = HLVDIE. OSCFIE, 6 = TMR3IE. OSCFIE, 7 = CCP2IE\nbit 7\nbit 0\nbit 7\nOSCFIE: Oscillator Fail Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 6\nCMIE: Comparator Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 5-4 Unimplemented: Read as ' 0 '\nbit 3\nBCLIE: Bus Collision Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 2\nHLVDIE: High/Low-Voltage Detect Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 1\nTMR3IE: TMR3 Overflow Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 0\nCCP2IE: CCP2 Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "8.4 IPR Registers\nThe IPR registers contain the individual priority bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Priority registers (IPR1 and IPR2). Using the priority bits requires that the Interrupt Priority Enable (IPEN) bit be set.",
    "REGISTER 8-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nR/W-1, 1 = R/W-1. R/W-1, 2 = R/W-1. R/W-1, 3 = R/W-1. R/W-1, 4 = R/W-1. R/W-1, 5 = R/W-1. R/W-1, 6 = R/W-1. R/W-1, 7 = R/W-1. PSPIP (1), 1 = ADIP. PSPIP (1), 2 = RCIP. PSPIP (1), 3 = TXIP. PSPIP (1), 4 = SSPIP. PSPIP (1), 5 = CCP1IP. PSPIP (1), 6 = TMR2IP. PSPIP (1), 7 = TMR1IP\nbit 7\nbit 7\nbit 6\nbit 5\nbit 4\nbit 3\nbit 2\nbit 1\nbit 0\nbit 0\nPSPIP: Parallel Slave Port Read/Write Interrupt Priority bit (1)\n1 = High priority\n0 = Low priority",
    "REGISTER 8-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nNote 1: This bit is unimplemented on 28-pin devices and is read as ' 0 '.\nADIP:\nA/D Converter Interrupt Priority bit\n1 = High priority\n0 = Low priority\nRCIP: EUSART Receive Interrupt Priority bit\n1 = High priority\n0 = Low priority\nTXIP: EUSART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nSSPIP: Master Synchronous Serial Port Interrupt Priority bit\n1 = High priority\n0 = Low priority\nCCP1IP: CCP1 Interrupt Priority bit\n1 = High priority\n0 = Low priority\nTMR2IP: TMR2 to PR2 Match Interrupt Priority bit\n1 = High priority\n0 = Low priority\nTMR1IP: TMR1 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "Legend:\nR = Readable bit\n-n = Value at POR\nW = Writable bit\n'1' = Bit is set\nU = Unimplemented bit, read as '0'\n'0' = Bit is cleared x = Bit is unknown\nREGISTER 8-9:\nbit 7",
    "bit 6\nbit 2\nbit 1\nbit 0",
    "IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nR/W-1, 1 = R/W-1. R/W-1, 2 = U-0. R/W-1, 3 = U-0. R/W-1, 4 = R/W-1. R/W-1, 5 = R/W-1. R/W-1, 6 = R/W-1. R/W-1, 7 = R/W-1. OSCFIP, 1 = CMIP. OSCFIP, 2 = -. OSCFIP, 3 = -. OSCFIP, 4 = BCLIP. OSCFIP, 5 = HLVDIP. OSCFIP, 6 = TMR3IP. OSCFIP, 7 = CCP2IP\nbit 7\nbit 0\nOSCFIP: Oscillator Fail Interrupt Priority bit\n1 = High priority\n0 = Low priority\nCMIP: Comparator Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 5-4 Unimplemented: Read as ' 0 '\nbit 3\nBCLIP: Bus Collision Interrupt Priority bit\n1 = High priority\n0 = Low priority\nHLVDIP: High/Low-Voltage Detect Interrupt Priority bit\n1 = High priority\n0 = Low priority\nTMR3IP: TMR3 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nCCP2IP: CCP2 Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "8.5 RCON Register\nThe RCON register contains flag bits which are used to determine the cause of the last Reset or wake-up from Idle or Sleep modes. RCON also contains the IPEN bit which enables interrupt priorities.\nThe operation of the SBOREN bit and the Reset flag bits is discussed in more detail in Section 4.1 'RCON Register' .",
    "REGISTER 8-10: RCON REGISTER\nR/W-0, 1 = R/W-1 (1). R/W-0, 2 = U-0. R/W-0, 3 = R/W-1. R/W-0, 4 = R-1. R/W-0, 5 = R-1. R/W-0, 6 = R/W-0 (1). R/W-0, 7 = R/W-0. IPEN, 1 = SBOREN. IPEN, 2 = -. IPEN, 3 = RI. IPEN, 4 = TO. IPEN, 5 = PD. IPEN, 6 = POR. IPEN, 7 = BOR\nbit 7\nbit 0\n- bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16XXX Compatibility mode)\nSBOREN:\nSoftware BOR Enable bit (1)\nFor details of bit operation, see Register 4-1.\nNote 1: Actual Reset values are determined by device configuration and the nature of the device Reset. See Register 4-1 for additional information.",
    "REGISTER 8-10: RCON REGISTER\nbit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI:\nRESET Instruction Flag bit\nFor details of bit operation, see Register 4-1.\nTO:\nWatchdog Time-out Flag bit\nFor details of bit operation, see Register 4-1.\nPD: Power-down Detection Flag bit\nFor details of bit operation, see Register 4-1.\nPOR: Power-on Reset Status bit\nFor details of bit operation, see Register 4-1.\nBOR:\nBrown-out Reset Status bit\nFor details of bit operation, see Register 4-1.",
    "Legend:\nR = Readable bit\n-n = Value at POR\nW = Writable bit\n'1' = Bit is set bit 6\nbit 3\nbit 2\nbit 1\nbit 0\nU = Unimplemented bit, read as '0'\n'0' = Bit is cleared x = Bit is unknown",
    "8.6 INTn Pin Interrupts\nExternal  interrupts  on  the  RB0/INT0,  RB1/INT1  and RB2/INT2 pins are edge-triggered. If the corresponding INTEDGx bit in the INTCON2 register is set (= 1 ), the interrupt is triggered by a rising edge; if the bit is clear, the trigger is  on the falling edge. When a valid edge appears on the RBx/INTx pin, the corresponding flag bit INTxF is set. This interrupt can be disabled by clearing the corresponding enable bit INTxE. Flag bit INTxF must  be  cleared  in  software  in  the  Interrupt  Service Routine before re-enabling the interrupt.\nAll external interrupts (INT0, INT1 and INT2) can wakeup the processor from Idle or Sleep modes if bit INTxE was set prior to going into those modes. If the Global Interrupt  Enable  bit,  GIE,  is  set,  the  processor  will branch to the interrupt vector following wake-up.",
    "8.6 INTn Pin Interrupts\nInterrupt priority for INT1 and INT2 is determined by the value  contained  in  the  interrupt  priority  bits,  INT1IP (INTCON3<6>) and INT2IP (INTCON3<7>). There is no priority bit associated with INT0. It is always a high priority interrupt source.",
    "8.7 TMR0 Interrupt\nIn 8-bit mode (which is the default), an overflow in the TMR0 register (FFh \u2192 00h) will set flag bit TMR0IF. In 16-bit mode, an overflow in the TMR0H:TMR0L register pair (FFFFh \u2192 0000h) will set TMR0IF. The interrupt can be enabled/disabled by setting/clearing enable bit, TMR0IE (INTCON<5>). Interrupt priority for Timer0 is determined  by  the  value  contained  in  the  interrupt priority bit, TMR0IP (INTCON2<2>). See Section 10.0 'Timer0  Module' for  further  details  on  the  Timer0 module.",
    "8.8 PORTB Interrupt-on-Change\nAn input change on PORTB<7:4> sets flag bit, RBIF (INTCON<0>). The interrupt can be enabled/disabled by  setting/clearing  enable  bit,  RBIE  (INTCON<3>). Interrupt  priority  for  PORTB  interrupt-on-change  is determined  by  the  value  contained  in  the  interrupt priority bit, RBIP (INTCON2<0>).",
    "8.9 Context Saving During Interrupts\nDuring interrupts, the return PC address is saved on the stack. Additionally, the WREG, STATUS and BSR registers are saved on the fast return stack. If a fast return  from  interrupt  is  not  used  (see Section 5.3 'Data Memory Organization' ), the user may need to save the WREG, STATUS and BSR registers on entry to  the  Interrupt  Service  Routine.  Depending  on  the user's application, other registers may also need to be saved.  Example 8-1  saves  and  restores  the  WREG, STATUS and BSR registers during an Interrupt Service Routine.",
    "SAVING STATUS, WREG AND BSR REGISTERS IN RAM\nMOVWF MOVFF MOVFF ; ;, 1 = W_TEMP STATUS, STATUS_TEMP BSR, BSR_TEMP. MOVWF MOVFF MOVFF ; ;, 2 = ; W_TEMP is in virtual bank ; STATUS_TEMP located anywhere ; BSR_TMEP located anywhere. USER ;, 1 = ISR CODE. USER ;, 2 = . MOVFF, 1 = BSR_TEMP, BSR. MOVFF, 2 = ; Restore BSR. MOVF, 1 = W_TEMP, W. MOVF, 2 = ; Restore WREG. MOVFF, 1 = STATUS_TEMP, STATUS. MOVFF, 2 = ; Restore STATUS",
    "PIC18F2X1X/4X1X\nNOTES:",
    "9.0 I/O PORTS\nDepending on the device selected and features enabled, there are up to five ports available. Some pins of  the  I/O  ports  are  multiplexed  with  an  alternate function from the peripheral features on the device. In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin.\nEach port has three registers for its operation. These registers are:\n\u00b7 TRIS register (data direction register)\n\u00b7 PORT register (reads the levels on the pins of the device)\n\u00b7 LAT register (output latch)\nThe Data Latch (LAT register) is useful for read-modifywrite  operations  on  the  value  that  the  I/O  pins  are driving.\nA simplified  model  of  a  generic  I/O  port,  without  the interfaces to other peripherals, is shown in Figure 9-1.",
    "9.1 PORTA, TRISA and LATA Registers\nPORTA is a 8-bit  wide,  bidirectional  port.  The  corresponding  data  direction  register  is  TRISA.  Setting  a TRISA bit (= 1 ) will make the corresponding PORTA pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISA bit (= 0 ) will make the corresponding PORTA pin an output (i.e., put the contents of the output latch on the selected pin).\nReading the  PORTA register reads the  status of  the pins, whereas writing to it will write to the port latch.\nThe Data Latch (LATA) register is also memory mapped. Read-modify-write operations on the LATA register read and write the latched output value for PORTA.",
    "9.1 PORTA, TRISA and LATA Registers\nThe  RA4  pin  is  multiplexed  with  the  Timer0  module clock  input  and  one  of  the  comparator  outputs  to become  the  RA4/T0CKI/C1OUT  pin.  Pins  RA6  and RA7 are multiplexed with the main oscillator pins; they are enabled as oscillator or I/O pins by the selection of the  main  oscillator  in  the  Configuration  register  (see Section 22.1 'Configuration Bits' for details). When they are not used as port pins, RA6 and RA7 and their associated TRIS and LAT bits are read as ' 0 '.\nThe  other  PORTA  pins  are  multiplexed  with  analog inputs, the analog VREF+ and VREF- inputs and the comparator voltage reference output. The operation of pins RA3:RA0 and RA5 as A/D converter inputs is selected by clearing or setting the control bits in the ADCON1 register (A/D Control Register 1).",
    "9.1 PORTA, TRISA and LATA Registers\nPins RA0 through RA5 may also be used as comparator inputs or outputs by setting the appropriate bits in the CMCON register. To use RA3:RA0 as digital inputs, it is also necessary to turn off the comparators.\nNote:, 1 = On a Power-on Reset, RA5 and RA3:RA0 are configured as analog inputs and read as ' 0 '. RA4 is configured as a digital input.\nThe RA4/T0CKI/C1OUT pin is a Schmitt Trigger input. All  other  PORTA  pins  have  TTL  input  levels  and  full CMOS output drivers.\nThe TRISA register controls the direction of the PORTA pins, even when they are being used as analog inputs. The user must ensure the bits in the TRISA register are maintained set when using them as analog inputs.",
    "EXAMPLE 9-1: INITIALIZING PORTA\nCLRF, 1 = PORTA. CLRF, 2 = ; Initialize PORTA by ; clearing output ; data latches. CLRF, 1 = LATA. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVWF MOVWF, 1 = 07h ADCON1 07h. MOVLW MOVWF MOVWF MOVWF, 2 = ; Configure A/D ; for digital inputs. , 1 = . , 2 = ; Configure comparators. , 1 = CMCON. , 2 = ; for digital input. MOVWF, 1 = TRISA. MOVWF, 2 = ; direction ; Set RA<3:0> as inputs ; RA<5:4> as outputs",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 0. RA0/AN0, I/O = O. RA0/AN0, I/O Type = DIG. RA0/AN0, Description = LATA<0> data output; not affected by analog input.. RA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = TTL. RA0/AN0, Description = PORTA<0> data input; disabled when analog input enabled.. RA0/AN0, Function = AN0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = ANA. RA0/AN0, Description = A/D input channel 0 and Comparator C1- input. Default input configuration on POR; does not affect digital output.. RA1/AN1, Function = RA1. RA1/AN1, TRIS",
    "TABLE 9-1: PORTA I/O SUMMARY\nSetting = 0. RA1/AN1, I/O = O. RA1/AN1, I/O Type = DIG. RA1/AN1, Description = LATA<1> data output; not affected by analog input.. RA1/AN1, Function = RA1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = TTL. RA1/AN1, Description = PORTA<1> data input; disabled when analog input enabled.. RA1/AN1, Function = AN1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = ANA. RA1/AN1, Description = A/D input channel 1 and comparator C2- input. Default input configuration on POR; does not affect digital output.. RA2/AN2/ VREF-/CVREF, Function = RA2. RA2/AN2/ VREF-/CVREF, TRIS Setting =",
    "TABLE 9-1: PORTA I/O SUMMARY\n0. RA2/AN2/ VREF-/CVREF, I/O = O. RA2/AN2/ VREF-/CVREF, I/O Type = DIG. RA2/AN2/ VREF-/CVREF, Description = LATA<2> data output; not affected by analog input. Disabled when CVREF output enabled.. RA2/AN2/ VREF-/CVREF, Function = RA2. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1. RA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = TTL. RA2/AN2/ VREF-/CVREF, Description = PORTA<2> data input. Disabled when analog functions enabled; disabled when CVREF output enabled.. RA2/AN2/ VREF-/CVREF, Function = AN2. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = A/D input channel 2 and comparator C2+ input. Default input configuration on POR; not affected by analog output.. RA2/AN2/ VREF-/CVREF, Function = VREF-. RA2/AN2/ VREF-/CVREF, TRIS Setting = 1. RA2/AN2/ VREF-/CVREF, I/O = I. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = A/D and comparator voltage reference low input.. RA2/AN2/ VREF-/CVREF, Function = CVREF. RA2/AN2/ VREF-/CVREF, TRIS Setting = x. RA2/AN2/",
    "TABLE 9-1: PORTA I/O SUMMARY\nVREF-/CVREF, I/O = O. RA2/AN2/ VREF-/CVREF, I/O Type = ANA. RA2/AN2/ VREF-/CVREF, Description = Comparator voltage reference output. Enabling this feature disables digital I/O.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 0. RA3/AN3/VREF+, I/O = O. RA3/AN3/VREF+, I/O Type = DIG. RA3/AN3/VREF+, Description = LATA<3> data output; not affected by analog input.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = TTL. RA3/AN3/VREF+, Description = PORTA<3> data",
    "TABLE 9-1: PORTA I/O SUMMARY\ninput; disabled when analog input enabled.. RA3/AN3/VREF+, Function = AN3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D input channel 3 and comparator C1+ input. Default input configuration on POR.. RA3/AN3/VREF+, Function = VREF+. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D and comparator voltage reference high input.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 0. RA4/T0CKI/C1OUT, I/O = O.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA4/T0CKI/C1OUT, I/O Type = DIG. RA4/T0CKI/C1OUT, Description = LATA<4> data output.. RA4/T0CKI/C1OUT, Function = RA4. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = PORTA<4> data input; default configuration on POR.. RA4/T0CKI/C1OUT, Function = T0CKI. RA4/T0CKI/C1OUT, TRIS Setting = 1. RA4/T0CKI/C1OUT, I/O = I. RA4/T0CKI/C1OUT, I/O Type = ST. RA4/T0CKI/C1OUT, Description = Timer0 clock input.. RA4/T0CKI/C1OUT, Function = C1OUT. RA4/T0CKI/C1OUT, TRIS Setting = 0.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA4/T0CKI/C1OUT, I/O = O. RA4/T0CKI/C1OUT, I/O Type = DIG. RA4/T0CKI/C1OUT, Description = Comparator 1 output; takes priority over port data.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description = LATA<5> data output; not affected by analog input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = RA5. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/ HLVDIN/C2OUT, Description = PORTA<5> data input; disabled when analog input enabled.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = AN4. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = A/D input channel 4. Default configuration on POR.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = SS. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = TTL. RA5/AN4/SS/ HLVDIN/C2OUT, Description = Slave select input for SSP (MSSP module).. RA5/AN4/SS/ HLVDIN/C2OUT, Function = HLVDIN. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 1. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = I. RA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = ANA. RA5/AN4/SS/ HLVDIN/C2OUT, Description = High/Low-Voltage Detect external trip point input.. RA5/AN4/SS/ HLVDIN/C2OUT, Function = C2OUT. RA5/AN4/SS/ HLVDIN/C2OUT, TRIS Setting = 0. RA5/AN4/SS/ HLVDIN/C2OUT, I/O = O.",
    "TABLE 9-1: PORTA I/O SUMMARY\nRA5/AN4/SS/ HLVDIN/C2OUT, I/O Type = DIG. RA5/AN4/SS/ HLVDIN/C2OUT, Description = Comparator 2 output; takes priority over port data.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 0. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = LATA<6> data output. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 1. OSC2/CLKO/RA6, I/O = I. OSC2/CLKO/RA6, I/O Type = TTL. OSC2/CLKO/RA6, Description = PORTA<6> data input. Enabled in RCIO,",
    "TABLE 9-1: PORTA I/O SUMMARY\nINTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = OSC2. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = ANA. OSC2/CLKO/RA6, Description = Main oscillator feedback output connection (XT, HS and LP modes).. OSC2/CLKO/RA6, Function = CLKO. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = System cycle clock output (FOSC/4) in RC, INTIO1 and EC Oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 0.",
    "TABLE 9-1: PORTA I/O SUMMARY\nOSC1/CLKI/RA7, I/O = O. OSC1/CLKI/RA7, I/O Type = DIG. OSC1/CLKI/RA7, Description = LATA<7> data output. Disabled in External Oscillator modes.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 1. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = TTL. OSC1/CLKI/RA7, Description = PORTA<7> data input. Disabled in External Oscillator modes.. OSC1/CLKI/RA7, Function = OSC1. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main oscillator input connection..",
    "TABLE 9-1: PORTA I/O SUMMARY\nOSC1/CLKI/RA7, Function = CLKI. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main clock input connection.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 54. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 54.",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nTRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 5 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 4 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 3 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 2 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 1 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 0 = TRISA6 (1) PORTA Data Direction Control Register. TRISA, Reset Values on page = 54. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 =",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPCFG0. ADCON1, Reset Values on page = 53. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 53. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTA.",
    "TABLE 9-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nNote 1: RA7:RA6 and their associated latch and data direction bits are enabled as I/O pins based on oscillator configuration; otherwise, they are read as ' 0 '.",
    "9.2 PORTB, TRISB and LATB Registers\nPORTB  is  an  8-bit wide, bidirectional port. The corresponding data direction register is TRISB. Setting a TRISB bit (= 1 ) will make the corresponding PORTB pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISB bit (= 0 ) will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATB)  is also memory mapped.  Read-modify-write  operations  on  the  LATB register  read  and  write  the  latched  output  value  for PORTB.",
    "EXAMPLE 9-2: INITIALIZING PORTB\nCLRF, 1 = PORTB. CLRF, 2 = ; Initialize PORTB by ; clearing output ; data latches. CLRF, 1 = LATB. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0Fh. MOVLW, 2 = ; Set RB<4:0> as. MOVLW, 1 = 0CFh. MOVLW, 2 = ; (required if config bit ; PBADEN is set) ;. MOVWF, 1 = TRISB. MOVWF, 2 = ; Set RB<3:0> as inputs ; RB<5:4> as outputs ; RB<7:6> as inputs\nEach of the PORTB pins has a weak internal pull-up. A single  control  bit  can  turn  on  all  the  pull-ups.  This  is performed by clearing bit, RBPU (INTCON2<7>). The weak pull-up is automatically turned off when the port pin  is configured  as  an  output.  The  pull-ups  are disabled on a Power-on Reset.\nNote:",
    "EXAMPLE 9-2: INITIALIZING PORTB\nOn  a  Power-on  Reset,  RB4:RB0  are configured as analog inputs by default and read  as  ' 0 ';  RB7:RB5  are  configured  as digital inputs.\nBy  programming  the  Configuration  bit, PBADEN,  RB4:RB0  will  alternatively  be configured as digital inputs on POR.\nFour of the PORTB pins (RB7:RB4) have an interrupton-change feature. Only pins configured as inputs can cause  this  interrupt  to  occur  (i.e.,  any  RB7:RB4  pin configured as an output is excluded from the interrupton-change comparison). The input pins (of RB7:RB4) are  compared  with  the  old  value  latched  on  the  last read of PORTB. The 'mismatch' outputs of RB7:RB4 are  ORed together to generate the RB Port Change Interrupt with Flag bit, RBIF (INTCON<0>).\nThis  interrupt  can  wake  the  device  from  the  Sleep mode,  or  any  of  the  Idle  modes.  The  user,  in  the Interrupt Service Routine, can clear the interrupt in the following manner:",
    "EXAMPLE 9-2: INITIALIZING PORTB\na) Any  read  or  write  of  PORTB  (except  with  the MOVFF (ANY), PORTB instruction).\nb) Clear flag bit RBIF.\nA mismatch condition will continue to set flag bit RBIF. Reading PORTB will end the mismatch condition and allow flag bit RBIF to be cleared.\nThe interrupt-on-change  feature  is  recommended  for wake-up on key depression operation and operations where PORTB is only used for the interrupt-on-change feature. Polling of PORTB is not recommended while using the interrupt-on-change feature.\nRB3  can  be  configured  by  the  Configuration  bit, CCP2MX, as the alternate peripheral pin for the CCP2 module (CCP2MX = 0 ).",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 0. RB0/INT0/FLT0/ AN12, I/O = O. RB0/INT0/FLT0/ AN12, I/O Type = DIG. RB0/INT0/FLT0/ AN12, Description = LATB<0> data output; not affected by analog input.. RB0/INT0/FLT0/ AN12, Function = RB0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = TTL. RB0/INT0/FLT0/ AN12, Description = PORTB<0> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB0/INT0/FLT0/ AN12, Function =",
    "TABLE 9-3: PORTB I/O SUMMARY\nINT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = External interrupt 0 input.. RB0/INT0/FLT0/ AN12, Function = FLT0. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O = I. RB0/INT0/FLT0/ AN12, I/O Type = ST. RB0/INT0/FLT0/ AN12, Description = Enhanced PWM Fault input (ECCP1 module); enabled in software.. RB0/INT0/FLT0/ AN12, Function = AN12. RB0/INT0/FLT0/ AN12, TRIS Setting = 1. RB0/INT0/FLT0/ AN12, I/O",
    "TABLE 9-3: PORTB I/O SUMMARY\n= I. RB0/INT0/FLT0/ AN12, I/O Type = ANA. RB0/INT0/FLT0/ AN12, Description = A/D input channel 12. (1). RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 0. RB1/INT1/AN10, I/O = O. RB1/INT1/AN10, I/O Type = DIG. RB1/INT1/AN10, Description = LATB<1> data output; not affected by analog input.. RB1/INT1/AN10, Function = RB1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = TTL. RB1/INT1/AN10, Description = PORTB<1> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1).",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB1/INT1/AN10, Function = INT1. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ST. RB1/INT1/AN10, Description = External interrupt 1 input.. RB1/INT1/AN10, Function = AN10. RB1/INT1/AN10, TRIS Setting = 1. RB1/INT1/AN10, I/O = I. RB1/INT1/AN10, I/O Type = ANA. RB1/INT1/AN10, Description = A/D input channel 10. (1). RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 0. RB2/INT2/AN8, I/O = O. RB2/INT2/AN8, I/O Type = DIG. RB2/INT2/AN8, Description = LATB<2> data output; not affected by analog",
    "TABLE 9-3: PORTB I/O SUMMARY\ninput.. RB2/INT2/AN8, Function = RB2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = TTL. RB2/INT2/AN8, Description = PORTB<2> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB2/INT2/AN8, Function = INT2. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ST. RB2/INT2/AN8, Description = External interrupt 2 input.. RB2/INT2/AN8, Function = AN8. RB2/INT2/AN8, TRIS Setting = 1. RB2/INT2/AN8, I/O = I. RB2/INT2/AN8, I/O Type = ANA.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB2/INT2/AN8, Description = A/D input channel 8. (1). RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = LATB<3> data output; not affected by analog input.. RB3/AN9/CCP2, Function = RB3. RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = TTL. RB3/AN9/CCP2, Description = PORTB<3> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB3/AN9/CCP2, Function = AN9. RB3/AN9/CCP2,",
    "TABLE 9-3: PORTB I/O SUMMARY\nTRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ANA. RB3/AN9/CCP2, Description = A/D input channel 9. (1). RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 0. RB3/AN9/CCP2, I/O = O. RB3/AN9/CCP2, I/O Type = DIG. RB3/AN9/CCP2, Description = CCP2 compare and PWM output.. RB3/AN9/CCP2, Function = CCP2 (2). RB3/AN9/CCP2, TRIS Setting = 1. RB3/AN9/CCP2, I/O = I. RB3/AN9/CCP2, I/O Type = ST. RB3/AN9/CCP2, Description = CCP2 capture input.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 0. RB4/KBI0/AN11, I/O = O. RB4/KBI0/AN11, I/O Type = DIG. RB4/KBI0/AN11, Description = LATB<4> data output; not affected by analog input.. RB4/KBI0/AN11, Function = RB4. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = PORTB<4> data input; weak pull-up when RBPU bit is cleared. Disabled when analog input enabled. (1). RB4/KBI0/AN11, Function = KBI0. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O =",
    "TABLE 9-3: PORTB I/O SUMMARY\nI. RB4/KBI0/AN11, I/O Type = TTL. RB4/KBI0/AN11, Description = Interrupt on pin change.. RB4/KBI0/AN11, Function = AN11. RB4/KBI0/AN11, TRIS Setting = 1. RB4/KBI0/AN11, I/O = I. RB4/KBI0/AN11, I/O Type = ANA. RB4/KBI0/AN11, Description = A/D input channel 11. (1). RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 0. RB5/KBI1/PGM, I/O = O. RB5/KBI1/PGM, I/O Type = DIG. RB5/KBI1/PGM, Description = LATB<5> data output.. RB5/KBI1/PGM, Function = RB5. RB5/KBI1/PGM, TRIS Setting = 1.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = PORTB<5> data input; weak pull-up when RBPU bit is cleared.. RB5/KBI1/PGM, Function = KBI1. RB5/KBI1/PGM, TRIS Setting = 1. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = TTL. RB5/KBI1/PGM, Description = Interrupt on pin change.. RB5/KBI1/PGM, Function = PGM. RB5/KBI1/PGM, TRIS Setting = x. RB5/KBI1/PGM, I/O = I. RB5/KBI1/PGM, I/O Type = ST. RB5/KBI1/PGM, Description = Single-Supply Programming mode entry (ICSP\u2122). Enabled by LVP Configuration",
    "TABLE 9-3: PORTB I/O SUMMARY\nbit; all other pin functions disabled.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 0. RB6/KBI2/PGC, I/O = O. RB6/KBI2/PGC, I/O Type = DIG. RB6/KBI2/PGC, Description = LATB<6> data output.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = PORTB<6> data input; weak pull-up when RBPU bit is cleared.. RB6/KBI2/PGC, Function = KBI2. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I.",
    "TABLE 9-3: PORTB I/O SUMMARY\nRB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = Interrupt on pin change.. RB6/KBI2/PGC, Function = PGC. RB6/KBI2/PGC, TRIS Setting = x. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = ST. RB6/KBI2/PGC, Description = Serial execution (ICSP) clock input for ICSP and ICD operation. (3). RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS Setting = 0. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = LATB<7> data output.. RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS",
    "TABLE 9-3: PORTB I/O SUMMARY\nSetting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = PORTB<7> data input; weak pull-up when RBPU bit is cleared.. RB7/KBI3/PGD, Function = KBI3. RB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = Interrupt on pin change.. RB7/KBI3/PGD, Function = PGD. RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = Serial execution data output for ICSP and ICD operation.",
    "TABLE 9-3: PORTB I/O SUMMARY\n(3). RB7/KBI3/PGD, Function = . RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = ST. RB7/KBI3/PGD, Description = Serial execution data input for ICSP and ICD operation. (3)\nLegend: DIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: Configuration on POR is determined by the PBADEN Configuration bit. Pins are configured as analog inputs by default when PBADEN is set and digital inputs when PBADEN is cleared.\n2: Alternate assignment for CCP2 when the CCP2MX Configuration bit is ' 0 '. Default assignment is RC1.\n3: All other pin functions are disabled when ICSP or ICD are enabled.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 54. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nLatch). LATB, Reset Values on page = 54. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 54. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nINTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = -. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = -. INTCON2, Bit 0 = RBIP. INTCON2, Reset Values on page = 51. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = -. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = -. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Reset Values on page = 51. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTB.",
    "9.3 PORTC, TRISC and LATC Registers\nPORTC is an 8-bit wide, bidirectional port. The corresponding  data  direction  register  is  TRISC.  Setting  a TRISC bit (= 1 )  will  make the corresponding PORTC pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISC bit (= 0 ) will make the corresponding PORTC pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATC)  is  also memory mapped.  Read-modify-write  operations  on  the  LATC register  read  and  write  the  latched  output  value  for PORTC.\nPORTC is multiplexed with several peripheral functions (Table 9-5). The  pins have Schmitt Trigger input buffers.  RC1  is  normally  configured  by  Configuration bit, CCP2MX, as the default peripheral pin of the CCP2 module (default/erased state, CCP2MX = 1 ).",
    "9.3 PORTC, TRISC and LATC Registers\nWhen  enabling  peripheral  functions,  care  should  be taken in defining TRIS bits for each PORTC pin. Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. The user should refer to the corresponding peripheral section for additional information.\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nThe  contents  of  the  TRISC  register  are  affected  by peripheral  overrides.  Reading  TRISC  always  returns the current contents, even though a peripheral device may be overriding one or more of the pins.",
    "EXAMPLE 9-3: INITIALIZING PORTC\nCLRF, 1 = PORTC. CLRF, 2 = ; Initialize PORTC by ; clearing output ; data latches. CLRF, 1 = LATC. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RC<3:0> as inputs ; RC<5:4> as outputs ; RC<7:6> as inputs",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC0/T1OSO/ T13CKI, Function = RC0. RC0/T1OSO/ T13CKI, TRIS Setting = 0. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O Type = DIG. RC0/T1OSO/ T13CKI, Description = LATC<0> data output.. RC0/T1OSO/ T13CKI, Function = . RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = PORTC<0> data input.. RC0/T1OSO/ T13CKI, Function = T1OSO. RC0/T1OSO/ T13CKI, TRIS Setting = x. RC0/T1OSO/ T13CKI, I/O = O. RC0/T1OSO/ T13CKI, I/O Type =",
    "TABLE 9-5: PORTC I/O SUMMARY\nANA. RC0/T1OSO/ T13CKI, Description = Timer1 oscillator output; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC0/T1OSO/ T13CKI, Function = T13CKI. RC0/T1OSO/ T13CKI, TRIS Setting = 1. RC0/T1OSO/ T13CKI, I/O = I. RC0/T1OSO/ T13CKI, I/O Type = ST. RC0/T1OSO/ T13CKI, Description = Timer1/Timer3 counter input.. RC1/T1OSI/CCP2, Function = RC1. RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O. RC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = LATC<1> data output.. RC1/T1OSI/CCP2, Function = .",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = PORTC<1> data input.. RC1/T1OSI/CCP2, Function = T1OSI. RC1/T1OSI/CCP2, TRIS Setting = x. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ANA. RC1/T1OSI/CCP2, Description = Timer1 oscillator input; enabled when Timer1 oscillator enabled. Disables digital I/O.. RC1/T1OSI/CCP2, Function = CCP2 (1). RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = CCP2 compare and PWM output; takes priority over port data.. RC1/T1OSI/CCP2, Function = . RC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = CCP2 capture input.. RC2/CCP1/P1A, Function = RC2. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = LATC<2> data output.. RC2/CCP1/P1A, Function = .",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST. RC2/CCP1/P1A, Description = PORTC<2> data input.. RC2/CCP1/P1A, Function = CCP1. RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 compare or PWM output; takes priority over port data.. RC2/CCP1/P1A, Function = . RC2/CCP1/P1A, TRIS Setting = 1. RC2/CCP1/P1A, I/O = I. RC2/CCP1/P1A, I/O Type = ST.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC2/CCP1/P1A, Description = ECCP1 capture input.. RC2/CCP1/P1A, Function = P1A (2). RC2/CCP1/P1A, TRIS Setting = 0. RC2/CCP1/P1A, I/O = O. RC2/CCP1/P1A, I/O Type = DIG. RC2/CCP1/P1A, Description = ECCP1 Enhanced PWM output, channel A. May be configured for tri-state during Enhanced PWM shutdown events. Takes priority over port data.. RC3/SCK/SCL, Function = RC3. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = LATC<3> data output.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting =",
    "TABLE 9-5: PORTC I/O SUMMARY\n1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = PORTC<3> data input.. RC3/SCK/SCL, Function = SCK. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = SPI clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = SPI clock input (MSSP module).. RC3/SCK/SCL, Function = SCL. RC3/SCK/SCL,",
    "TABLE 9-5: PORTC I/O SUMMARY\nTRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = I 2 C\u2122 clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = I 2 C/SMB. RC3/SCK/SCL, Description = I 2 C clock input (MSSP module); input type depends on module setting.. RC4/SDI/SDA, Function = RC4. RC4/SDI/SDA, TRIS Setting = 0. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = LATC<4> data output..",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = PORTC<4> data input.. RC4/SDI/SDA, Function = SDI. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = SPI data input (MSSP module).. RC4/SDI/SDA, Function = SDA. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = I 2 C data output (MSSP module); takes priority over",
    "TABLE 9-5: PORTC I/O SUMMARY\nport data.. RC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = I 2 C/SMB. RC4/SDI/SDA, Description = I 2 C data input (MSSP module); input type depends on module setting.. RC5/SDO, Function = RC5. RC5/SDO, TRIS Setting = 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = LATC<5> data output.. RC5/SDO, Function = . RC5/SDO, TRIS Setting = 1. RC5/SDO, I/O = I. RC5/SDO, I/O Type = ST. RC5/SDO, Description = PORTC<5> data input.. RC5/SDO, Function = SDO. RC5/SDO, TRIS Setting",
    "TABLE 9-5: PORTC I/O SUMMARY\n= 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = SPI data output (MSSP module); takes priority over port data.. RC6/TX/CK, Function = RC6. RC6/TX/CK, TRIS Setting = 0. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = LATC<6> data output.. RC6/TX/CK, Function = . RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = PORTC<6> data input.. RC6/TX/CK, Function = TX. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG.",
    "TABLE 9-5: PORTC I/O SUMMARY\nRC6/TX/CK, Description = Asynchronous serial transmit data output (USART module); takes priority over port data. User must configure as output.. RC6/TX/CK, Function = CK. RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = O. RC6/TX/CK, I/O Type = DIG. RC6/TX/CK, Description = Synchronous serial clock output (USART module); takes priority over port data.. RC6/TX/CK, Function = . RC6/TX/CK, TRIS Setting = 1. RC6/TX/CK, I/O = I. RC6/TX/CK, I/O Type = ST. RC6/TX/CK, Description = Synchronous serial clock input (USART module).. RC7/RX/DT, Function = RC7. RC7/RX/DT, TRIS Setting = 0. RC7/RX/DT, I/O = O. RC7/RX/DT, I/O",
    "TABLE 9-5: PORTC I/O SUMMARY\nType = DIG. RC7/RX/DT, Description = LATC<7> data output.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = PORTC<7> data input.. RC7/RX/DT, Function = RX. RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Asynchronous serial receive data input (USART module).. RC7/RX/DT, Function = DT. RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = O. RC7/RX/DT, I/O Type = DIG. RC7/RX/DT, Description =",
    "TABLE 9-5: PORTC I/O SUMMARY\nSynchronous serial data output (USART module); takes priority over port data.. RC7/RX/DT, Function = . RC7/RX/DT, TRIS Setting = 1. RC7/RX/DT, I/O = I. RC7/RX/DT, I/O Type = ST. RC7/RX/DT, Description = Synchronous serial data input (USART module). User must configure as an input.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; I 2 C/SMB = I 2 C/SMBus input buffer; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote\n1: Default assignment for CCP2 when the CCP2MX Configuration bit is set. Alternate assignment is RB3.\n2: Enhanced PWM output is available only on PIC18F4410/4415/4510/4515/4610 devices.",
    "TABLE 9-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nPORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Reset Values on page = 54. LATC, Bit 7 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 6 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 5 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 4 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 3 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 2 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 1 = PORTC Data Latch Register (Read and Write to Data Latch). LATC, Bit 0 = PORTC Data Latch Register (Read and Write to Data Latch).",
    "TABLE 9-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nLATC, Reset Values on page = 54. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 54",
    "9.4 PORTD, TRISD and LATD Registers\nNote:\nPORTD  is  only  available  on  40/44-pin devices.\nPORTD is an 8-bit wide, bidirectional port. The corresponding  data  direction  register  is  TRISD.  Setting  a TRISD bit (= 1 )  will  make the corresponding PORTD pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISD bit (= 0 ) will make the corresponding PORTD pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATD)  is  also memory mapped.  Read-modify-write  operations  on  the  LATD register  read  and  write  the  latched  output  value  for PORTD.\nAll  pins  on  PORTD  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.",
    "9.4 PORTD, TRISD and LATD Registers\nThree of the PORTD pins are multiplexed with outputs P1B, P1C and P1D of the enhanced CCP module. The operation  of  these  additional  PWM  output  pins  is covered in greater detail in Section 15.0 'Enhanced Capture/Compare/PWM (ECCP) Module' .\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nPORTD can also be configured as an 8-bit wide microprocessor port (Parallel Slave Port) by setting control bit,  PSPMODE  (TRISE<4>).  In  this  mode,  the  input buffers  are  TTL.  See Section 9.6  'Parallel  Slave Port' for  additional  information on the Parallel Slave Port (PSP).\nNote:\nWhen the enhanced PWM mode is used with either dual or quad outputs, the PSP functions of PORTD  are  automatically disabled.",
    "EXAMPLE 9-4: INITIALIZING PORTD\nCLRF, 1 = PORTD. CLRF, 2 = ; Initialize PORTD by ; clearing output ; data latches. CLRF, 1 = LATD. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISD. MOVWF, 2 = ; Set RD<3:0> as inputs ; RD<5:4> as outputs ; RD<7:6> as inputs",
    "TABLE 9-7: PORTD I/O SUMMARY\n\nLegend:",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD0/PSP0, Function = RD0. RD0/PSP0, TRIS Setting = 0. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = LATD<0> data output.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = 1. RD0/PSP0, I/O = I. RD0/PSP0, I/O Type = ST. RD0/PSP0, Description = PORTD<0> data input.. RD0/PSP0, Function = PSP0. RD0/PSP0, TRIS Setting = x. RD0/PSP0, I/O = O. RD0/PSP0, I/O Type = DIG. RD0/PSP0, Description = PSP read data output (LATD<0>); takes priority over port data.. RD0/PSP0, Function = . RD0/PSP0, TRIS Setting = x.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD0/PSP0, I/O = I. RD0/PSP0, I/O Type = TTL. RD0/PSP0, Description = PSP write data input.. RD1/PSP1, Function = RD1. RD1/PSP1, TRIS Setting = 0. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description = LATD<1> data output.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = 1. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = ST. RD1/PSP1, Description = PORTD<1> data input.. RD1/PSP1, Function = PSP1. RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = O. RD1/PSP1, I/O Type = DIG. RD1/PSP1, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<1>); takes priority over port data.. RD1/PSP1, Function = . RD1/PSP1, TRIS Setting = x. RD1/PSP1, I/O = I. RD1/PSP1, I/O Type = TTL. RD1/PSP1, Description = PSP write data input.. RD2/PSP2, Function = RD2. RD2/PSP2, TRIS Setting = 0. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = LATD<2> data output.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = 1. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = ST. RD2/PSP2, Description = PORTD<2> data input.. RD2/PSP2, Function = PSP2.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = O. RD2/PSP2, I/O Type = DIG. RD2/PSP2, Description = PSP read data output (LATD<2>); takes priority over port data.. RD2/PSP2, Function = . RD2/PSP2, TRIS Setting = x. RD2/PSP2, I/O = I. RD2/PSP2, I/O Type = TTL. RD2/PSP2, Description = PSP write data input.. RD3/PSP3, Function = RD3. RD3/PSP3, TRIS Setting = 0. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = LATD<3> data output.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = 1. RD3/PSP3, I/O = I.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD3/PSP3, I/O Type = ST. RD3/PSP3, Description = PORTD<3> data input.. RD3/PSP3, Function = PSP3. RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = O. RD3/PSP3, I/O Type = DIG. RD3/PSP3, Description = PSP read data output (LATD<3>); takes priority over port data.. RD3/PSP3, Function = . RD3/PSP3, TRIS Setting = x. RD3/PSP3, I/O = I. RD3/PSP3, I/O Type = TTL. RD3/PSP3, Description = PSP write data input.. RD4/PSP4, Function = RD4. RD4/PSP4, TRIS Setting = 0. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nLATD<4> data output.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = 1. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = ST. RD4/PSP4, Description = PORTD<4> data input.. RD4/PSP4, Function = PSP4. RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = O. RD4/PSP4, I/O Type = DIG. RD4/PSP4, Description = PSP read data output (LATD<4>); takes priority over port data.. RD4/PSP4, Function = . RD4/PSP4, TRIS Setting = x. RD4/PSP4, I/O = I. RD4/PSP4, I/O Type = TTL. RD4/PSP4, Description = PSP write data input.. RD5/PSP5/P1B, Function = RD5.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = LATD<5> data output.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = 1. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = ST. RD5/PSP5/P1B, Description = PORTD<5> data input.. RD5/PSP5/P1B, Function = PSP5. RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<5>); takes priority over port data.. RD5/PSP5/P1B, Function = . RD5/PSP5/P1B, TRIS Setting = x. RD5/PSP5/P1B, I/O = I. RD5/PSP5/P1B, I/O Type = TTL. RD5/PSP5/P1B, Description = PSP write data input.. RD5/PSP5/P1B, Function = P1B. RD5/PSP5/P1B, TRIS Setting = 0. RD5/PSP5/P1B, I/O = O. RD5/PSP5/P1B, I/O Type = DIG. RD5/PSP5/P1B, Description = ECCP1 Enhanced PWMoutput, channel B; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD6/PSP6/P1C, Function = RD6.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = LATD<6> data output.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = 1. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = ST. RD6/PSP6/P1C, Description = PORTD<6> data input.. RD6/PSP6/P1C, Function = PSP6. RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<6>); takes priority over port data.. RD6/PSP6/P1C, Function = . RD6/PSP6/P1C, TRIS Setting = x. RD6/PSP6/P1C, I/O = I. RD6/PSP6/P1C, I/O Type = TTL. RD6/PSP6/P1C, Description = PSP write data input.. RD6/PSP6/P1C, Function = P1C. RD6/PSP6/P1C, TRIS Setting = 0. RD6/PSP6/P1C, I/O = O. RD6/PSP6/P1C, I/O Type = DIG. RD6/PSP6/P1C, Description = ECCP1 Enhanced PWMoutput, channel C; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.. RD7/PSP7/P1D, Function = RD7.",
    "TABLE 9-7: PORTD I/O SUMMARY\nRD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = LATD<7> data output.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = 1. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = ST. RD7/PSP7/P1D, Description = PORTD<7> data input.. RD7/PSP7/P1D, Function = PSP7. RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description =",
    "TABLE 9-7: PORTD I/O SUMMARY\nPSP read data output (LATD<7>); takes priority over port data.. RD7/PSP7/P1D, Function = . RD7/PSP7/P1D, TRIS Setting = x. RD7/PSP7/P1D, I/O = I. RD7/PSP7/P1D, I/O Type = TTL. RD7/PSP7/P1D, Description = PSP write data input.. RD7/PSP7/P1D, Function = P1D. RD7/PSP7/P1D, TRIS Setting = 0. RD7/PSP7/P1D, I/O = O. RD7/PSP7/P1D, I/O Type = DIG. RD7/PSP7/P1D, Description = ECCP1 Enhanced PWMoutput, channel D; takes priority over port and PSP data. May be configured for tri-state during Enhanced PWM shutdown events.\n= Don't care",
    "TABLE 9-7: PORTD I/O SUMMARY\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; x (TRIS bit does not affect port direction or is overridden for this option).",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 54. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and Write to Data",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nLatch). LATD, Reset Values on page = 54. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 54. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0 = TRISE0. TRISE, Reset Values on page = 54. CCP1CON, Bit 7 = P1M1. CCP1CON, Bit 6 = P1M0. CCP1CON, Bit 5 =",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nDC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTD.",
    "9.5 PORTE, TRISE and LATE Registers\nDepending on the particular PIC18F2X1X/4X1X device selected, PORTE is implemented in two different ways.\nFor  40/44-pin  devices,  PORTE  is  a  4-bit  wide  port. Three pins (RE0/RD/AN5, RE1/WR/AN6 and RE2/CS/ AN7) are individually configurable as inputs or outputs. These pins have Schmitt Trigger input buffers. When selected as an analog input, these pins will read as ' 0 's.\nThe  corresponding  data  direction  register  is  TRISE. Setting a TRISE bit (= 1 ) will make the corresponding PORTE pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISE bit (= 0 ) will make the corresponding PORTE pin an output (i.e., put the contents of the output latch on the selected pin).\nTRISE controls the direction of the RE pins, even when they are being used as analog inputs. The user must make sure to keep the pins configured as inputs when using them as analog inputs.",
    "Note:\nOn  a  Power-on  Reset,  RE2:RE0  are configured as analog inputs.\nThe upper four bits of the TRISE register also control the operation of the Parallel Slave Port. Their operation is explained in Register 9-1.\nThe  Data  Latch  register (LATE)  is also memory mapped.  Read-modify-write  operations  on  the  LATE register,  read  and  write  the  latched  output  value  for PORTE.\nThe fourth pin of PORTE (MCLR/VPP/RE3) is an input only pin. Its operation is controlled by the MCLRE Configuration bit. When selected as a port pin (MCLRE = 0 ), it functions as a digital input only pin; as such, it does not have  TRIS  or  LAT  bits  associated  with  its  operation. Otherwise,  it  functions  as  the  device's  Master  Clear input. In either configuration, RE3 also functions as the programming voltage input during programming.\nOn a Power-on Reset, RE3 is enabled as a digital input only if Master Clear functionality is disabled.",
    "EXAMPLE 9-5: INITIALIZING PORTE\nCLRF, 1 = PORTE. CLRF, 2 = ; Initialize PORTE by ; clearing output ; data latches. CLRF, 1 = LATE. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVLW, 1 = 0Ah ADCON1 03h. MOVLW MOVWF MOVLW, 2 = ; Configure A/D ; for digital inputs ; Value used to. MOVWF, 1 = TRISE. MOVWF, 2 = ; Set RE<0> as inputs ; RE<1> as outputs ; RE<2> as inputs",
    "9.5.1 PORTE IN 28-PIN DEVICES\nFor  28-pin  devices,  PORTE  is  only  available  when Master Clear functionality is disabled (MCLRE = 0 ). In these  cases,  PORTE  is  a  single  bit,  input  only  port comprised of RE3 only. The pin operates as previously described.",
    "REGISTER 9-1: TRISE REGISTER (40/44-PIN DEVICES ONLY)\nR-0, 1 = R-0. R-0, 2 = R/W-0. R-0, 3 = R/W-0. R-0, 4 = U-0. R-0, 5 = R/W-1. R-0, 6 = R/W-1. R-0, 7 = R/W-1. IBF, 1 = OBF. IBF, 2 = IBOV. IBF, 3 = PSPMODE. IBF, 4 = -. IBF, 5 = TRISE2. IBF, 6 = TRISE1. IBF, 7 = TRISE0\nbit 7\nbit 0\nIBF: Input Buffer Full Status bit\n1 = A word has been received and waiting to be read by the CPU\n0 = No word has been received\nOBF: Output Buffer Full Status bit\n1 = The output buffer still holds a previously written word\n0 = The output buffer has been read\nIBOV: Input Buffer Overflow Detect bit (in Microprocessor mode)",
    "REGISTER 9-1: TRISE REGISTER (40/44-PIN DEVICES ONLY)\n1 = A write occurred when a previously input word has not been read (must be cleared in software)\n0 = No overflow occurred\nPSPMODE: Parallel Slave Port Mode Select bit\n1 = Parallel Slave Port mode\n0 = General purpose I/O mode\nbit 3 Unimplemented: Read as ' 0 '\nbit 2 TRISE2: RE2 Direction Control bit\n1 = Input\n0 = Output\nTRISE1: RE1 Direction Control bit\n1 = Input\n0 = Output",
    "bit 0 TRISE0: RE0 Direction Control bit\n1 = Input\n0 = Output\nbit 7",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 6\n- bit 5\nbit 4\nbit 1",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 0. RE0/RD/AN5, I/O = O. RE0/RD/AN5, I/O Type = DIG. RE0/RD/AN5, Description = LATE<0> data output; not affected by analog input.. RE0/RD/AN5, Function = RE0. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ST. RE0/RD/AN5, Description = PORTE<0> data input; disabled when analog input enabled.. RE0/RD/AN5, Function = RD. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = TTL. RE0/RD/AN5, Description = PSP read enable input (PSP enabled).. RE0/RD/AN5,",
    "TABLE 9-9: PORTE I/O SUMMARY\nFunction = AN5. RE0/RD/AN5, TRIS Setting = 1. RE0/RD/AN5, I/O = I. RE0/RD/AN5, I/O Type = ANA. RE0/RD/AN5, Description = A/D input channel 5; default input configuration on POR.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 0. RE1/WR/AN6, I/O = O. RE1/WR/AN6, I/O Type = DIG. RE1/WR/AN6, Description = LATE<1> data output; not affected by analog input.. RE1/WR/AN6, Function = RE1. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ST. RE1/WR/AN6, Description = PORTE<1> data input; disabled when analog input enabled.. RE1/WR/AN6, Function = WR.",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = TTL. RE1/WR/AN6, Description = PSP write enable input (PSP enabled).. RE1/WR/AN6, Function = AN6. RE1/WR/AN6, TRIS Setting = 1. RE1/WR/AN6, I/O = I. RE1/WR/AN6, I/O Type = ANA. RE1/WR/AN6, Description = A/D input channel 6; default input configuration on POR.. RE2/CS/AN7, Function = RE2. RE2/CS/AN7, TRIS Setting = 0. RE2/CS/AN7, I/O = O. RE2/CS/AN7, I/O Type = DIG. RE2/CS/AN7, Description = LATE<2> data output; not affected by analog input.. RE2/CS/AN7, Function = RE2.",
    "TABLE 9-9: PORTE I/O SUMMARY\nRE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ST. RE2/CS/AN7, Description = PORTE<2> data input; disabled when analog input enabled.. RE2/CS/AN7, Function = CS. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = TTL. RE2/CS/AN7, Description = PSP write enable input (PSP enabled).. RE2/CS/AN7, Function = AN7. RE2/CS/AN7, TRIS Setting = 1. RE2/CS/AN7, I/O = I. RE2/CS/AN7, I/O Type = ANA. RE2/CS/AN7, Description = A/D input channel 7; default input configuration on POR.. MCLR/VPP/RE3 (1), Function = MCLR.",
    "TABLE 9-9: PORTE I/O SUMMARY\nMCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = External Master Clear input; enabled when MCLRE Configuration bit is set.. MCLR/VPP/RE3 (1), Function = VPP. MCLR/VPP/RE3 (1), TRIS Setting = -. MCLR/VPP/RE3 (1), I/O = I. MCLR/VPP/RE3 (1), I/O Type = ANA. MCLR/VPP/RE3 (1), Description = High-voltage detection; used for ICSP\u2122 mode entry detection. Always available, regardless of pin mode.. MCLR/VPP/RE3 (1), Function = RE3. MCLR/VPP/RE3 (1), TRIS Setting = - (2). MCLR/VPP/RE3 (1),",
    "TABLE 9-9: PORTE I/O SUMMARY\nI/O = I. MCLR/VPP/RE3 (1), I/O Type = ST. MCLR/VPP/RE3 (1), Description = PORTE<3> data input; enabled when MCLRE Configuration bit is clear.\nLegend:\nDIG = Digital level output; TTL = TTL input buffer; ST = Schmitt Trigger input buffer; ANA = Analog level input/output; x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: RE3 is available on both 28-pin and 40/44-pin devices. All other PORTE pins are only implemented on 40/44-pin devices.\n2: RE3 does not have a corresponding TRIS bit to control data direction.",
    "TABLE 9-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3 (1,2). PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 54. LATE (2), Bit 7 = -. LATE (2), Bit 6 = -. LATE (2), Bit 5 = -. LATE (2), Bit 4 = -. LATE (2), Bit 3 = -. LATE (2), Bit 2 = LATE Data Output Register. LATE (2), Bit 1 = LATE Data Output Register. LATE (2), Bit 0 = LATE Data Output Register. LATE (2), Reset Values on page = 54. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0",
    "TABLE 9-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\n= TRISE0. TRISE, Reset Values on page = 54. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 53\n- Legend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTE.\nNote\n1: Implemented only when Master Clear functionality is disabled (MCLRE Configuration bit = 0 ).\n2: RE3 is the only PORTE bit implemented on both 28-pin and 40/44-pin devices. All other bits are implemented only when PORTE is implemented (i.e., 40/44-pin devices).",
    "9.6 Parallel Slave Port\nNote:\nThe Parallel Slave Port is only available on 40/44-pin devices.\nIn addition to its function as a general I/O port, PORTD can also operate as an 8-bit wide Parallel Slave Port (PSP) or microprocessor port. PSP operation is controlled  by  the  4  upper  bits  of  the  TRISE  register (Register 9-1). Setting control bit, PSPMODE (TRISE<4>),  enables  PSP  operation  as  long  as  the enhanced CCP module is not operating in dual output or quad output PWM mode. In Slave mode, the port is asynchronously readable and writable by the external world.",
    "9.6 Parallel Slave Port\nThe  PSP  can  directly  interface  to  an  8-bit  microprocessor data bus. The external microprocessor can read or write the PORTD latch as an 8-bit latch. Setting the control bit PSPMODE enables the PORTE I/O pins to become control inputs for the microprocessor port. When set, port pin RE0 is the RD input, RE1 is the WR input and RE2 is the CS (Chip Select) input. For this functionality,  the  corresponding  data  direction  bits  of the TRISE register (TRISE<2:0>) must be configured as inputs (set). The A/D port control bits, PFCG3:PFCG0 (ADCON1<3:0>), must also be set to a value in the range of ' 1010 ' through ' 1111 '.\nA write to the PSP occurs when both the CS and WR lines are first detected low and ends when either are detected high. The PSPIF and IBF flag bits are both set when the write ends.",
    "9.6 Parallel Slave Port\nA read from the PSP occurs when both the CS and RD lines are first detected low. The data in PORTD is read out and the OBF bit is clear. If the user writes new data to PORTD to set OBF, the data is immediately read out; however, the OBF bit is not set.\nWhen either the CS or RD lines are detected high, the PORTD pins return to the input state and the PSPIF bit is set. User applications should wait for PSPIF to be set before servicing the PSP; when this happens, the IBF and OBF bits can be polled and the appropriate action taken.\nThe timing for  the control  signals  in  Write  and  Read modes is shown in Figure 9-3 and Figure 9-4, respectively.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on page = 54. LATD, Bit 7 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 6 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 5 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 4 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 3 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 2 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 1 = PORTD Data Latch Register (Read and Write to Data Latch). LATD, Bit 0 = PORTD Data Latch Register (Read and Write",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nto Data Latch). LATD, Reset Values on page = 54. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 54. PORTE, Bit 7 = -. PORTE, Bit 6 = -. PORTE, Bit 5 = -. PORTE, Bit 4 = -. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on page = 54. LATE, Bit 7 = -. LATE, Bit 6 = -. LATE, Bit 5 = -. LATE, Bit 4 = -. LATE, Bit 3 = -. LATE, Bit 2 = LATE Data Output bits.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nLATE, Bit 1 = LATE Data Output bits. LATE, Bit 0 = LATE Data Output bits. LATE, Reset Values on page = 54. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = -. TRISE, Bit 2 = TRISE2. TRISE, Bit 1 = TRISE1. TRISE, Bit 0 = TRISE0. TRISE, Reset Values on page = 54. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IF. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP.",
    "TABLE 9-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nIPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 53\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the Parallel Slave Port.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "10.0 TIMER0 MODULE\nThe Timer0 module incorporates the following features:\n\u00b7 Software selectable operation as a timer or counter in both 8-Bit or 16-Bit modes\n\u00b7 Readable and writable registers\n\u00b7 Dedicated 8-bit, software programmable prescaler\n\u00b7 Selectable clock source (internal or external)\n\u00b7 Edge select for external clock\n\u00b7 Interrupt-on-overflow",
    "REGISTER 10-1: T0CON: TIMER0 CONTROL REGISTER\nR/W-1, 1 = R/W-1. R/W-1, 2 = R/W-1. R/W-1, 3 = R/W-1. R/W-1, 4 = R/W-1. R/W-1, 5 = R/W-1. R/W-1, 6 = R/W-1. R/W-1, 7 = R/W-1. TMR0ON, 1 = T08BIT. TMR0ON, 2 = T0CS. TMR0ON, 3 = T0SE. TMR0ON, 4 = PSA. TMR0ON, 5 = T0PS2. TMR0ON, 6 = T0PS1. TMR0ON, 7 = T0PS0\nbit 7\nbit 0\nbit 7\nTMR0ON: Timer0 On/Off Control bit\n1 = Enables Timer0\n0 = Stops Timer0",
    "bit 6\nT08BIT : Timer0 8-bit/16-bit Control bit\n1 = Timer0 is configured as an 8-bit timer/counter\n0 = Timer0 is configured as a 16-bit timer/counter",
    "bit 5\nT0CS : Timer0 Clock Source Select bit\n1 = Transition on T0CKI pin\n0 = Internal instruction cycle clock (CLKO)",
    "bit 4 T0SE : Timer0 Source Edge Select bit\n1 = Increment on high-to-low transition on T0CKI pin\n0 = Increment on low-to-high transition on T0CKI pin\nbit 3 PSA\n: Timer0 Prescaler Assignment bit\n1 = TImer0 prescaler is NOT assigned. Timer0 clock input bypasses prescaler.\n0 = Timer0 prescaler is assigned. Timer0 clock input comes from prescaler output.\nbit 2-0\nT0PS2:T0PS0\n: Timer0 Prescaler Select bits\n111 = 1:256 Prescale value\n110 = 1:128 Prescale value\n101 = 1:64   Prescale value\n100 = 1:32   Prescale value\n011 = 1:16   Prescale value\n010 = 1:8     Prescale value\n001\n= 1:4     Prescale value\n000 = 1:2     Prescale value",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "PIC18F2X1X/4X1X\nThe T0CON  register (Register 10-1) controls all aspects of the module's operation, including the prescale selection. It is both readable and writable.\nA simplified block diagram of the Timer0 module in 8-Bit mode  is  shown  in  Figure 10-1.  Figure 10-2  shows  a simplified block diagram of the Timer0 module in 16-Bit mode.",
    "10.1 Timer0 Operation\nTimer0 can operate as either a timer or a counter; the mode is selected with the T0CS bit (T0CON<5>). In Timer  mode  (T0CS  = 0 ),  the  module  increments  on every clock by default unless a different prescaler value is selected  (see Section 10.3  'Prescaler' ). If the TMR0 register is written to, the increment is inhibited for  the following two instruction cycles. The user can work around this by writing an adjusted value to the TMR0 register.\nThe Counter mode is selected by setting the T0CS bit (= 1 ). In this mode, Timer0 increments either on every rising or falling edge of pin RA4/T0CKI. The incrementing  edge  is  determined  by  the  Timer0  Source  Edge Select bit, T0SE (T0CON<4>); clearing this bit selects the rising edge. Restrictions on the external clock input are discussed below.\ninternal phase clock (TOSC). There is a delay between synchronization  and  the  onset  of  incrementing  the timer/counter.",
    "10.2 Timer0 Reads and Writes in 16-Bit Mode\nTMR0H is not the actual high byte of Timer0 in 16-Bit mode; it is actually a buffered version of the real high byte  of  Timer0  which  is  not  directly  readable  nor writable (refer to Figure 10-2). TMR0H is updated with the contents of the high byte of Timer0 during a read of TMR0L. This provides the ability to read all 16 bits of Timer0 without having to verify that the read of the high and  low  byte  were  valid,  due  to  a  rollover  between successive reads of the high and low byte.\nAn external clock source can be used to drive Timer0; however, it must meet certain requirements to ensure that  the  external  clock  can  be  synchronized  with  the\nSimilarly, a write to the high byte of Timer0 must also take place through the TMR0H Buffer register. The high byte is updated with the contents of TMR0H when a write occurs to TMR0L. This allows all 16 bits of Timer0 to be updated at once.",
    "10.3 Prescaler\nAn 8-bit counter is available as a prescaler for the Timer0 module. The prescaler is not directly readable or writable; its  value  is  set  by  the  PSA  and  T0PS2:T0PS0  bits (T0CON<3:0>), which determine the prescaler assignment and prescale ratio.\nClearing  the  PSA  bit  assigns  the  prescaler  to  the Timer0 module. When it is assigned, prescale values from 1:2 through 1:256 in power-of-2 increments are selectable.\nWhen assigned to the Timer0 module, all instructions writing to the TMR0 register (e.g., CLRF TMR0 MOVWF , TMR0 BSF TMR0 , , etc.) clear the prescaler count.\nNote:, 1 = Writing to TMR0 when the prescaler is assigned to Timer0 will clear the prescaler count but will not change the prescaler assignment.",
    "10.3.1 SWITCHING PRESCALER ASSIGNMENT\nThe  prescaler  assignment  is  fully  under  software control and can be changed 'on-the-fly' during program execution.",
    "10.4 Timer0 Interrupt\nThe  TMR0  interrupt  is  generated  when  the  TMR0 register overflows from FFh to 00h in 8-Bit mode, or from FFFFh to 0000h in 16-Bit mode. This overflow sets the TMR0IF flag bit. The interrupt can be masked by clearing  the  TMR0IE  bit  (INTCON<5>).  Before  re-enabling the interrupt, the TMR0IF bit must be cleared in software by the Interrupt Service Routine.\nSince Timer0 is shut down in Sleep mode, the TMR0 interrupt cannot awaken the processor from Sleep.",
    "TABLE 10-1: REGISTERS ASSOCIATED WITH TIMER0\nTMR0L, Bit 7 = Timer0 Register, Low Byte. TMR0L, Bit 6 = Timer0 Register, Low Byte. TMR0L, Bit 5 = Timer0 Register, Low Byte. TMR0L, Bit 4 = Timer0 Register, Low Byte. TMR0L, Bit 3 = Timer0 Register, Low Byte. TMR0L, Bit 2 = Timer0 Register, Low Byte. TMR0L, Bit 1 = Timer0 Register, Low Byte. TMR0L, Bit 0 = Timer0 Register, Low Byte. TMR0L, Reset Values on page = 52. TMR0H, Bit 7 = Timer0 Register, High Byte. TMR0H, Bit 6 = Timer0 Register, High Byte. TMR0H, Bit 5 = Timer0 Register, High Byte. TMR0H, Bit 4 = Timer0 Register, High Byte. TMR0H, Bit 3 = Timer0 Register, High Byte. TMR0H, Bit 2 = Timer0 Register, High Byte. TMR0H, Bit 1 =",
    "TABLE 10-1: REGISTERS ASSOCIATED WITH TIMER0\nTimer0 Register, High Byte. TMR0H, Bit 0 = Timer0 Register, High Byte. TMR0H, Reset Values on page = 52. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Reset Values on page = 52. TRISA, Bit 7 = RA7",
    "TABLE 10-1: REGISTERS ASSOCIATED WITH TIMER0\n(1). TRISA, Bit 6 = RA6 (1). TRISA, Bit 5 = RA5. TRISA, Bit 4 = RA4. TRISA, Bit 3 = RA3. TRISA, Bit 2 = RA2. TRISA, Bit 1 = RA1. TRISA, Bit 0 = RA0. TRISA, Reset Values on page = 54\nLegend:\nShaded cells are not used by Timer0.\n- Note 1: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "11.0 TIMER1 MODULE\nThe Timer1 timer/counter  module  incorporates  these features:\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR1H and TMR1L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Reset on CCP special event trigger\n\u00b7 Device clock status flag (T1RUN)",
    "PIC18F2X1X/4X1X\nA  simplified  block  diagram  of  the  Timer1  module  is shown in Figure 11-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 11-2.\nThe module incorporates its own low-power oscillator to  provide  an  additional  clocking  option.  The  Timer1 oscillator can also be used as a low-power clock source for the microcontroller in power-managed operation.\nTimer1 can also be used to provide Real-Time Clock (RTC) functionality to applications with only a minimal addition of external components and code overhead.\nTimer1  is controlled through the T1CON  Control register  (Register 11-1).  It  also  contains  the  Timer1 Oscillator Enable  bit (T1OSCEN).  Timer1  can  be enabled or disabled by setting or clearing control bit, TMR1ON (T1CON<0>).",
    "REGISTER 11-1: T1CON: TIMER1 CONTROL REGISTER\nR/W-0, 1 = R-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. RD16, 1 = T1RUN. RD16, 2 = T1CKPS1. RD16, 3 = T1CKPS0. RD16, 4 = T1OSCEN. RD16, 5 = T1SYNC. RD16, 6 = TMR1CS. RD16, 7 = TMR1ON\nbit 7\nbit 0\nbit 7 RD16: 16-bit Read/Write Mode Enable bit\n1 = Enables register read/write of TImer1 in one 16-bit operation\n0 = Enables register read/write of Timer1 in two 8-bit operations",
    "bit 6 T1RUN: Timer1 System Clock Status bit\n1 = Device clock is derived from Timer1 oscillator\n0 = Device clock is derived from another source\nT1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits\n- 11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n- 00 = 1:1 Prescale value\nT1OSCEN: Timer1 Oscillator Enable bit\n1 = Timer1 oscillator is enabled\n0 = Timer1 oscillator is shut off\nThe oscillator inverter and feedback resistor are turned off to eliminate power drain.",
    "bit 2 T1SYNC: Timer1 External Clock Input Synchronization Select bit\nWhen TMR1CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR1CS = 0 :\nThis bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 .",
    "bit 1 TMR1CS: Timer1 Clock Source Select bit\n1 = External clock from pin RC0/T1OSO/T13CKI (on the rising edge)\n0 = Internal clock (FOSC/4)",
    "bit 0 TMR1ON: Timer1 On bit\n1 = Enables Timer1\n0 = Stops Timer1",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "11.1 Timer1 Operation\nTimer1 can operate in one of these modes:\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR1CS (T1CON<1>). When TMR3CS is cleared (= 0 ), Timer1 increments on every internal instruction cycle (Fosc/4). When the bit is set, Timer1 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\nWhen  Timer1  is  enabled,  the  RC1/T1OSI  and  RC0/ T1OSO/T13CKI pins become inputs. This means the values  of  TRISC<1:0>  are  ignored  and  the  pins  are read as ' 0 '.",
    "FIGURE 11-2: TIMER1 BLOCK DIAGRAM (16-BIT READ/WRITE MODE)\nNote 1: When enable bit, T1OSCEN, is cleared, the inverter and feedback resistor are turned off to eliminate power drain.",
    "11.2 Timer1 16-Bit Read/Write Mode\nTimer1 can be configured for 16-bit reads and writes (see Figure 11-2). When the RD16 control bit (T1CON<7>) is set, the address for TMR1H is mapped to a buffer register for the high byte of Timer1. A read from TMR1L will load the contents of the high byte of Timer1 into the Timer1 high byte buffer. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte, has become invalid due to a rollover between reads.\nA write to the high byte of Timer1 must also take place through the TMR1H Buffer register. The Timer1 high byte is updated with the contents of TMR1H when a write occurs to TMR1L. This allows a user to write all 16 bits to both the high and low bytes of Timer1 at once.",
    "11.2 Timer1 16-Bit Read/Write Mode\nThe  high  byte  of  Timer1  is  not  directly  readable  or writable in this mode. All reads and writes must take place  through  the  Timer1  High  Byte  Buffer  register. Writes  to  TMR1H  do  not  clear  the  Timer1  prescaler. The prescaler is only cleared on writes to TMR1L.",
    "11.3 Timer1 Oscillator\nAn  on-chip  crystal oscillator circuit is incorporated between  pins  T1OSI  (input)  and  T1OSO  (amplifier output).  It  is  enabled  by  setting  the  Timer1  Oscillator Enable bit, T1OSCEN (T1CON<3>). The oscillator is a low-power  circuit rated for 32 kHz  crystals. It will continue to run during all power-managed modes. The circuit for a typical LP oscillator is shown in Figure 11-3. Table 11-1 shows the capacitor selection for the Timer1 oscillator.\nThe user must provide a software time delay to ensure proper start-up of the Timer1 oscillator.",
    "TABLE 11-1: CAPACITOR SELECTION FOR THE TIMER OSCILLATOR\nOsc Type, 1 = Freq. Osc Type, 2 = C1. Osc Type, 3 = C2. LP, 1 = 32 kHz. LP, 2 = 27 pF (1). LP, 3 = 27 pF (1)\nNote 1: Microchip  suggests  these  values  as  a starting  point  in  validating  the  oscillator circuit.\n2: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Capacitor values are for design guidance only.",
    "11.3.1 USING TIMER1 AS A CLOCK SOURCE\nThe Timer1 oscillator is also available as a clock source in power-managed modes. By setting the clock select bits, SCS1:SCS0 (OSCCON<1:0>), to ' 01 ', the device switches  to  SEC_RUN  mode;  both  the  CPU  and peripherals are clocked from the Timer1 oscillator. If the IDLEN  bit  (OSCCON<7>)  is  cleared  and  a SLEEP instruction  is  executed,  the  device  enter  SEC_IDLE mode. Additional details are available  in Section 3.0 'Power-Managed Modes' .\nWhenever the Timer1 oscillator is providing the clock source,  the  Timer1  system  clock status  flag, T1RUN (T1CON<6>), is set. This can be used to determine the controller's current clocking mode. It can also indicate the clock source being currently used by the Fail-Safe Clock Monitor. If the Clock Monitor is enabled and the Timer1 oscillator fails while providing the clock, polling the T1RUN bit will indicate whether the clock is being provided by the Timer1 oscillator or another source.",
    "11.3.2 LOW-POWER TIMER1 OPTION\nThe Timer1 oscillator can operate at two distinct levels of power consumption based on device configuration. When the LPT1OSC Configuration bit is set, the Timer1 oscillator operates in a low-power mode. When LPT1OSC is not set, Timer1 operates at a higher power level. Power consumption for a particular mode is relatively  constant,  regardless  of  the  device's  operating mode. The default Timer1 configuration is the higher power mode.\nAs the low-power Timer1 mode tends to be more sensitive  to  interference,  high  noise  environments  may cause some oscillator instability. The low-power option is,  therefore,  best  suited  for  low  noise  applications where  power  conservation  is  an  important  design consideration.",
    "11.3.3 TIMER1 OSCILLATOR LAYOUT CONSIDERATIONS\nThe  Timer1  oscillator  circuit  draws  very  little  power during operation. Due to the low-power nature of the oscillator, it may also be sensitive to rapidly changing signals in close proximity.\nThe oscillator circuit, shown in Figure 11-3, should be located  as  close  as  possible  to  the  microcontroller. There should be no circuits passing within the oscillator circuit boundaries other than VSS or VDD.\nIf a high-speed circuit must be located near the oscillator (such as the CCP1 pin in Output Compare or PWM mode, or the primary oscillator using the OSC2 pin), a grounded  guard  ring  around  the  oscillator  circuit,  as shown in Figure 11-4, may be helpful when used on a single-sided PCB or in addition to a ground plane.",
    "11.4 Timer1 Interrupt\nThe TMR1 register pair (TMR1H:TMR1L) increments from  0000h  to  FFFFh  and  rolls  over  to  0000h.  The Timer1 interrupt, if enabled, is generated on overflow, which is latched in interrupt flag bit, TMR1IF (PIR1<0>). This interrupt can be enabled or disabled by setting or clearing the Timer1 Interrupt Enable bit, TMR1IE (PIE1<0>).",
    "11.5 Resetting Timer1 Using the CCP Special Event Trigger\nIf either of the CCP modules is configured to use Timer1 and generate a Special Event Trigger in Compare mode (CCP1M3:CCP1M0 or CCP2M3:CCP2M0 = 1011 ), this signal will reset Timer1. The trigger from CCP2 will also start  an  A/D  conversion  if  the  A/D  module  is  enabled (see Section 14.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or a synchronous counter to take advantage of this feature. When used this way, the CCPRH:CCPRL register pair effectively becomes a period register for Timer1.\nIf  Timer1  is  running  in  Asynchronous  Counter mode, this Reset operation may not work.\nIn  the  event  that  a  write  to  Timer1  coincides  with  a special  event  trigger,  the  write  operation  will  take precedence.\nNote:, 1 = The special event triggers from the CCP2 module will not set the TMR1IF interrupt flag bit (PIR1<0>).",
    "11.6 Using Timer1 as a Real-Time Clock\nAdding an external LP oscillator to Timer1 (such as the one  described  in Section 11.3  'Timer1  Oscillator' above) gives users the option to include RTC functionality to their applications. This is accomplished with an inexpensive watch crystal to provide an accurate time base and several lines of application code to calculate the time. When operating in Sleep mode and using a battery  or  supercapacitor  as  a  power  source,  it  can completely  eliminate  the  need  for  a  separate  RTC device and battery backup.\nThe  application code  routine, RTCisr , shown  in Example 11-1, demonstrates a simple method  to increment a counter at one-second intervals using an Interrupt  Service  Routine.  Incrementing  the  TMR1 register pair to overflow triggers the interrupt and calls the routine, which increments the seconds counter by one;  additional  counters  for  minutes  and  hours  are incremented as the previous counter overflow.",
    "11.6 Using Timer1 as a Real-Time Clock\nSince the register pair is 16 bits wide, counting up to overflow the register directly from a 32.768 kHz clock would  take  2  seconds.  To  force  the  overflow  at  the required one-second  intervals, it is necessary  to preload it. The simplest method is to set the MSb of TMR1H with a BSF instruction.  Note that the TMR1L register is never preloaded or altered. Doing so may introduce cumulative errors over many cycles.\nFor this method to be accurate, Timer1 must operate in Asynchronous mode and the Timer1 overflow interrupt must  be  enabled  (PIE1<0>  = 1 ), as  shown  in  the routine, RTCinit . The Timer1 oscillator must also be enabled and running at all times.",
    "EXAMPLE 11-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nRTCinit, 1 = . RTCinit, 2 = . RTCinit, 3 = . RTCinit, 4 = . , 1 = MOVLW MOVWF CLRF. , 2 = 80h TMR1H. , 3 = ;. , 4 = Preload TMR1 register pair. , 1 = . , 2 = TMR1L. , 3 = ;. , 4 = for 1 second overflow. , 1 = MOVLW MOVWF. , 2 = b'00001111' T1CON. , 3 = ; ;. , 4 = Configure for external clock, Asynchronous operation, external oscillator. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Initialize timekeeping registers. , 1 = CLRF. , 2 = mins. , 3 = ;. , 4 = . , 1 = MOVWF. , 2 = . , 3 = . , 4 = . , 1 = . , 2 = hours. , 3 = . , 4 = . , 1",
    "EXAMPLE 11-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n= BSF. , 2 = PIE1, TMR1IE. , 3 = ;. , 4 = Enable Timer1 interrupt. RTCisr, 1 = . RTCisr, 2 = . RTCisr, 3 = . RTCisr, 4 = . , 1 = BSF. , 2 = TMR1H, 7. , 3 = ;. , 4 = Preload for 1 sec overflow. , 1 = BCF. , 2 = PIR1, TMR1IF. , 3 = ;. , 4 = Clear interrupt flag. , 1 = INCF. , 2 = secs, F. , 3 = ;. , 4 = Increment seconds. , 1 = MOVLW CPFSGT. , 2 = .59. , 3 = ;. , 4 = 60 seconds elapsed?. , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No, done. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Clear seconds. , 1 = INCF. , 2 = mins, F. ,",
    "EXAMPLE 11-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n3 = ;. , 4 = Increment minutes. , 1 = MOVLW. , 2 = .59. , 3 = ;. , 4 = 60 minutes elapsed?. , 1 = CPFSGT RETURN. , 2 = mins. , 3 = ;. , 4 = No, done. , 1 = CLRF INCF. , 2 = mins. , 3 = ;. , 4 = clear minutes. , 1 = MOVLW. , 2 = hours, F .23. , 3 = ; ;. , 4 = Increment hours 24 hours elapsed?. , 1 = CPFSGT RETURN. , 2 = hours. , 3 = ;. , 4 = No, done. , 1 = CLRF RETURN. , 2 = hours. , 3 = ; ;. , 4 = Reset hours Done",
    "TABLE 11-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 11-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. TMR1L, Bit 7 = Timer1 Register, Low Byte. TMR1L, Bit 6 = Timer1 Register, Low Byte. TMR1L, Bit 5 = Timer1 Register, Low Byte. TMR1L, Bit 4 = Timer1 Register, Low Byte. TMR1L, Bit 3 = Timer1 Register, Low Byte.",
    "TABLE 11-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nTMR1L, Bit 2 = Timer1 Register, Low Byte. TMR1L, Bit 1 = Timer1 Register, Low Byte. TMR1L, Bit 0 = Timer1 Register, Low Byte. TMR1L, Reset Values on page = 52. TMR1H, Bit 7 = Timer1 Register, High Byte. TMR1H, Bit 6 = Timer1 Register, High Byte. TMR1H, Bit 5 = Timer1 Register, High Byte. TMR1H, Bit 4 = Timer1 Register, High Byte. TMR1H, Bit 3 = Timer1 Register, High Byte. TMR1H, Bit 2 = Timer1 Register, High Byte. TMR1H, Bit 1 = Timer1 Register, High Byte. TMR1H, Bit 0 = Timer1 Register, High Byte. TMR1H, Reset Values on page = 52. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit",
    "TABLE 11-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 52\nLegend: Shaded cells are not used by the Timer1 module.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "12.0 TIMER2 MODULE\nThe  Timer2  module  timer  incorporates  the  following features:\n\u00b7 8-bit timer and period registers (TMR2 and PR2, respectively)\n\u00b7 Readable and writable (both registers)\n\u00b7 Software programmable prescaler (1:1, 1:4 and 1:16)\n\u00b7 Software programmable postscaler (1:1 through 1:16)\n\u00b7 Interrupt on TMR2-to-PR2 match\n\u00b7 Optional use as the shift clock for the MSSP module\nThe module is controlled through the T2CON register (Register 12-1),  which  enables  or  disables  the  timer and  configures  the  prescaler  and  postscaler.  Timer2 can  be  shut  off  by  clearing  control  bit,  TMR2ON (T2CON<2>), to minimize power consumption.\nA simplified block diagram of the module is shown in Figure 12-1.",
    "12.1 Timer2 Operation\nIn normal operation, TMR2 is incremented from 00h on each  clock  (FOSC/4).  A  4-bit  counter/prescaler  on  the clock input gives direct input, divide-by-4 and divide-by16 prescale options; these are selected by the prescaler control  bits,  T2CKPS1:T2CKPS0  (T2CON<1:0>).  The value of TMR2 is compared to that of the period register, PR2, on each clock cycle. When the two values match, the comparator generates a match signal as the timer output. This signal also resets the value of TMR2 to 00h on  the next cycle  and  drives the output counter/ postscaler (see Section 12.2 'Timer2 Interrupt' ).\nThe TMR2 and PR2 registers are both directly readable and  writable.  The  TMR2  register  is  cleared  on  any device Reset, while the PR2 register initializes at FFh. Both the prescaler and postscaler counters are cleared on the following events:",
    "12.1 Timer2 Operation\n\u00b7 a write to the TMR2 register\n\u00b7 a write to the T2CON register\n\u00b7 any device Reset (Power-on Reset, MCLR Reset, Watchdog Timer Reset or Brown-out Reset)\nTMR2 is not cleared when T2CON is written.",
    "REGISTER 12-1: T2CON: TIMER2 CONTROL REGISTER\nU-0, 1 = R/W-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = T2OUTPS3. -, 2 = T2OUTPS2. -, 3 = T2OUTPS1. -, 4 = T2OUTPS0. -, 5 = TMR2ON. -, 6 = T2CKPS1. -, 7 = T2CKPS0. bit 7, 1 = . bit 7, 2 = . bit 7, 3 = . bit 7, 4 = . bit 7, 5 = . bit 7, 6 = . bit 7, 7 = bit 0\nbit 7 Unimplemented: Read as ' 0 '\nbit 6-3 T2OUTPS3:T2OUTPS0 : Timer2 Output Postscale Select bits\n0000 = 1:1 Postscale",
    "REGISTER 12-1: T2CON: TIMER2 CONTROL REGISTER\n0001 = 1:2 Postscale\n\u2022\n\u2022\n\u2022\n1111 = 1:16 Postscale",
    "bit 2 TMR2ON : Timer2 On bit\n1 = Timer2 is on\n0 = Timer2 is off",
    "bit 1-0 T2CKPS1:T2CKPS0 : Timer2 Clock Prescale Select bits\n00 = Prescaler is 1\n01 = Prescaler is 4\n1x = Prescaler is 16",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "12.2 Timer2 Interrupt\nTimer2 also can generate an optional device interrupt. The Timer2 output signal (TMR2-to-PR2 match) provides the input for the 4-bit output counter/ postscaler.  This  counter  generates  the  TMR2  match interrupt  flag  which  is  latched  in  TMR2IF  (PIR1<1>). The interrupt  is  enabled  by  setting  the  TMR2  Match Interrupt Enable bit, TMR2IE (PIE1<1>).\nA range of 16 postscale options (from 1:1 through 1:16 inclusive) can be selected with the postscaler control bits, T2OUTPS3:T2OUTPS0 (T2CON<6:3>).",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE.",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nPIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nRegister. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 52. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 52. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 52",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer2 module.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "12.3 Timer2 Output\nThe unscaled output of TMR2 is available primarily to the CCP modules, where it is used as a time base for operations in PWM mode.\nTimer2 can be optionally used as the shift clock source for  the  MSSP  module  operating  in  SPI  mode.  Additional information is provided in Section 16.0 'Master Synchronous Serial Port (MSSP) Module' .",
    "13.0 TIMER3 MODULE\nThe Timer3 module timer/counter  incorporates  these features:\n\u00b7 Software selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR3H and TMR3L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Module Reset on CCP special event trigger",
    "T3CON: TIMER3 CONTROL REGISTER\nRD16, R/W-0 = T3CCP2. RD16, R/W-0 = T3CKPS1. RD16, R/W-0 = T3CKPS0. RD16, R/W-0 = T3CCP1. RD16, R/W-0 = T3SYNC. RD16, R/W-0 = TMR3CS. RD16, R/W-0 = TMR3ON\nbit 7\nbit 0\nRD16: 16-bit Read/Write Mode Enable bit\n1 = Enables register read/write of Timer3 in one 16-bit operation\n0 = Enables register read/write of Timer3 in two 8-bit operations\nT3CCP2:T3CCP1: Timer3 and Timer1 to CCPx Enable bits\n1x = Timer3 is the capture/compare clock source for the CCP modules\n01 = Timer3 is the capture/compare clock source for CCP2;\nTimer1 is the capture/compare clock source for CCP1\n00 = Timer1 is the capture/compare clock source for the CCP modules",
    "bit 5-4 T3CKPS1:T3CKPS0\n: Timer3 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value",
    "bit 2 T3SYNC:\nTimer3 External Clock Input Synchronization Control bit\n(Not usable if the device clock comes from Timer1/Timer3.)\nWhen TMR3CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR3CS = 0 :\nThis bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 .",
    "bit 1 TMR3CS: Timer3 Clock Source Select bit\n1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the first falling edge)\n0 = Internal clock (FOSC/4)",
    "bit 0 TMR3ON: Timer3 On bit\n- 1 = Enables Timer3\n0 = Stops Timer3",
    "Legend:\nR = Readable bit\n-n = Value at POR\nbit 7\nbit 6,3\nW = Writable bit\n'1' = Bit is set",
    "PIC18F2X1X/4X1X\nA  simplified  block  diagram  of  the  Timer3  module  is shown in Figure 13-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 13-2.\nThe Timer3 module is controlled through the T3CON register (Register 13-1). It also selects the clock source options  for  the  CCP  modules  (see Section 14.1.1 'CCP  Modules  and  Timer  Resources' for  more information).\nU = Unimplemented bit, read as '0'\n'0' = Bit is cleared x = Bit is unknown",
    "13.1 Timer3 Operation\nTimer3 can operate in one of three modes:\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR3CS (T3CON<1>). When TMR3CS is cleared (= 0 ), Timer3 increments on every internal instruction cycle (FOSC/4). When the bit is set, Timer3 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\nAs  with  Timer1,  the  RC1/T1OSI  and  RC0/T1OSO/ T13CKI pins become inputs when the Timer1 oscillator is enabled. This means the values of TRISC<1:0> are ignored and the pins are read as ' 0 '.",
    "13.2 Timer3 16-Bit Read/Write Mode\nTimer3 can be configured for 16-bit reads and writes (see Figure 13-2). When the RD16 control bit (T3CON<7>) is set, the address for TMR3H is mapped to a buffer register for the high byte of Timer3. A read from TMR3L will load the contents of the high byte of Timer3 into the Timer3 High Byte Buffer register. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte,  has  become  invalid  due  to  a  rollover  between reads.\nA write to the high byte of Timer3 must also take place through the TMR3H Buffer register. The Timer3 high byte is updated with the contents of TMR3H when a write occurs to TMR3L. This allows a user to write all 16 bits to both the high and low bytes of Timer3 at once.\nThe  high  byte  of  Timer3  is  not  directly  readable  or writable in this mode. All reads and writes must take place through the Timer3 High Byte Buffer register.",
    "13.2 Timer3 16-Bit Read/Write Mode\nWrites  to  TMR3H  do  not  clear  the  Timer3  prescaler. The prescaler is only cleared on writes to TMR3L.",
    "13.3 Using the Timer1 Oscillator as the Timer3 Clock Source\nThe Timer1 internal oscillator may be used as the clock source for Timer3. The Timer1 oscillator is enabled by setting the T1OSCEN (T1CON<3>) bit. To use it as the Timer3 clock source, the TMR3CS bit must also be set. As  previously  noted,  this  also  configures  Timer3  to increment on every rising edge of the oscillator source.",
    "13.4 Timer3 Interrupt\nThe TMR3 register pair (TMR3H:TMR3L) increments from  0000h  to  FFFFh  and  overflows  to  0000h.  The Timer3 interrupt, if enabled, is generated on overflow and is latched in interrupt flag bit, TMR3IF (PIR2<1>). This interrupt can be enabled or disabled by setting or clearing the Timer3  Interrupt  Enable  bit, TMR3IE (PIE2<1>).",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nIf either of the CCP modules is configured to use Timer3 and to generate a special event trigger in Compare mode (CCP1M3:CCP1M0 or CCP2M3:CCP2M0 = 1011 ), this signal will reset Timer3. It will also start an A/D conversion if the  A/D  module  is  enabled  (see Section 14.3.4 'Special Event Trigger' for more information).\nThe module must be configured as either a timer or synchronous counter to take advantage of this feature. When used this way,  the  CCPR2H:CCPR2L register pair effectively becomes a period register for Timer3.\nIf  Timer3  is  running  in  Asynchronous  Counter mode, the Reset operation may not work.\nIn  the  event  that  a  write  to  Timer3  coincides  with  a special event trigger from a CCP module, the write will take precedence.\nNote:\nThe special event triggers from the CCP2 module will not set the TMR3IF interrupt flag bit (PIR1<0>).",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nThe  Timer1  oscillator  is  described  in Section 11.0 'Timer1 Module' .\n\nTABLE 13-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 54. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE.",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nPIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 54. TMR3L, Bit 7 = Timer3 Register, Low Byte. TMR3L, Bit 6 = Timer3 Register, Low Byte. TMR3L, Bit 5 = Timer3 Register, Low Byte. TMR3L, Bit 4 = Timer3 Register, Low Byte. TMR3L, Bit 3 = Timer3 Register, Low Byte. TMR3L, Bit 2 = Timer3 Register, Low Byte.",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nTMR3L, Bit 1 = Timer3 Register, Low Byte. TMR3L, Bit 0 = Timer3 Register, Low Byte. TMR3L, Reset Values on page = 53. TMR3H, Bit 7 = Timer3 Register, High Byte. TMR3H, Bit 6 = Timer3 Register, High Byte. TMR3H, Bit 5 = Timer3 Register, High Byte. TMR3H, Bit 4 = Timer3 Register, High Byte. TMR3H, Bit 3 = Timer3 Register, High Byte. TMR3H, Bit 2 = Timer3 Register, High Byte. TMR3H, Bit 1 = Timer3 Register, High Byte. TMR3H, Bit 0 = Timer3 Register, High Byte. TMR3H, Reset Values on page = 53. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 =",
    "13.5 Resetting Timer3 Using the CCP Special Event Trigger\nT1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 52. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer3 module.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "14.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nPIC18F2X1X/4X1X devices all have two CCP (Capture/Compare/PWM) modules. Each module contains  a  16-bit  register  which  can  operate  as  a  16-bit Capture register, a 16-bit Compare register or a PWM Master/Slave Duty Cycle register.\nIn  28-pin  devices,  the  two  standard  CCP  modules (CCP1 and CCP2) operate as described in this chapter. In  40/44-pin  devices,  CCP1  is  implemented  as  an Enhanced  CCP  module  with  standard  Capture  and Compare  modes  and  Enhanced  PWM  modes.  The ECCP  implementation  is  discussed  in Section 15.0\n'Enhanced Module' .\nCapture/Compare/PWM (ECCP)\nThe Capture and Compare operations described in this chapter  apply  to  all  standard  and  Enhanced  CCP modules.\nNote:",
    "14.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nThroughout  this section and Section 15.0 'Enhanced Capture/Compare/PWM (ECCP) Module' ,  references  to  the  register  and  bit names for CCP modules are referred to generically  by  the  use  of  'x'  or  'y'  in  place  of  the specific  module  number.  Thus,  'CCPxCON' might  refer  to  the  control  register  for  CCP1, CCP2 or ECCP1. 'CCPxCON' is used throughout  these  sections  to  refer  to  the module control register, regardless of whether the CCP module is a standard or Enhanced implementation.",
    "CCPXCON REGISTER (CCP2 MODULE, CCP1 MODULE IN 28-PIN DEVICES)\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = DCxB1. -, 3 = DCxB0. -, 4 = CCPxM3. -, 5 = CCPxM2. -, 6 = CCPxM1. -, 7 = CCPxM0\nbit 7\nbit 0\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5-4 DCxB1:DCxB0 : PWM Duty Cycle bit 1 and bit 0 for CCP Module x\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:",
    "CCPXCON REGISTER (CCP2 MODULE, CCP1 MODULE IN 28-PIN DEVICES)\nThese bits are the two LSbs (bit 1 and bit 0) of the 10-bit PWM duty cycle. The eight MSbs (DCx9:DCx2) of the duty cycle are found in CCPRxL.",
    "bit 3-0 CCPxM3:CCPxM0 : CCP Module x Mode Select bits\n0000 = Capture/Compare/PWM disabled (resets CCP module)\n0001 = Reserved\n0010 = Compare mode, toggle output on match (CCPIF bit is set)\n0011 = Reserved\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode: initialize CCP pin low; on compare match, force CCP pin high (CCPIF bit is set)\n1001 = Compare mode: initialize CCP pin high; on compare match, force CCP pin low (CCPIF bit is set)\n1010 = Compare mode: generate software interrupt on compare match (CCPIF bit is set, CCP pin reflects I/O state)\n- 1011 = Compare mode: trigger special event, reset timer, start A/D conversion on\nCCP2 match (CCPxIF bit is set)\n11xx = PWM mode",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "14.1 CCP Module Configuration\nEach  Capture/Compare/PWM  module  is  associated with a control register (generically, CCPxCON) and a data  register  (CCPRx).  The  data  register,  in  turn,  is comprised  of  two  8-bit  registers:  CCPRxL  (low  byte) and  CCPRxH  (high  byte).  All registers are both readable and writable.",
    "14.1.1 CCP MODULES AND TIMER RESOURCES\nThe CCP modules utilize Timers 1, 2 or 3, depending on the mode selected. Timer1 and Timer3 are available to modules  in  Capture  or  Compare  modes,  while Timer2 is available for modules in PWM mode.\nTABLE 14-1: CCP MODE - TIMER RESOURCE\nThe  assignment  of  a  particular  timer  to  a  module  is determined  by  the  Timer-to-CCP  enable  bits  in  the T3CON register (Register 13-1). Both modules may be active at any given time and may share the same timer resource if they are configured to operate in the same mode (Capture/Compare or PWM) at the same time. The interactions between the two modules are summarized in Figure 14-1 and Figure 14-2. In Timer1 in Asynchronous Counter mode, the capture operation will not work.",
    "14.1.2 CCP2 PIN ASSIGNMENT\nThe pin assignment for CCP2 (Capture input, Compare and PWM output) can change, based on device configuration.  The  CCP2MX  Configuration  bit  determines which  pin  CCP2  is  multiplexed  to.  By  default,  it  is assigned to RC1 (CCP2MX = 1 ). If the Configuration bit is cleared, CCP2 is multiplexed with RB3.\nCapture Compare PWM, Timer Resource = Timer1 or Timer3 Timer1 or Timer3 Timer2\nChanging the pin assignment of CCP2 does not automatically change any requirements for configuring the port pin. Users must always verify that the appropriate TRIS register is configured correctly for CCP2 operation, regardless of where it is located.",
    "TABLE 14-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\n\nNote 1: Includes standard and Enhanced PWM operation.",
    "TABLE 14-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nCapture, CCP2 Mode = Capture. Capture, Interaction = Each module can use TMR1 or TMR3 as the time base. The time base can be different for each CCP.. Capture, CCP2 Mode = Compare. Capture, Interaction = CCP2 can be configured for the special event trigger to reset TMR1 or TMR3 (depending upon which time base is used). Automatic A/D conversions on trigger event can also be done. Operation of CCP1 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Capture. Compare, Interaction = CCP1 can be configured for the special event trigger to reset TMR1 or TMR3 (depending upon which time base is used). Operation of CCP2 could be affected if it is using the same timer as a time base.. Compare, CCP2 Mode = Compare. Compare, Interaction = Either module can be configured for the Special Event Trigger to reset the time base. Automatic A/D conversions on CCP2 trigger event can be done. Conflicts may occur if both modules are",
    "TABLE 14-2: INTERACTIONS BETWEEN CCP1 AND CCP2 FOR TIMER RESOURCES\nusing the same time base.. Capture, CCP2 Mode = PWM (1). Capture, Interaction = None. Compare, CCP2 Mode = PWM (1). Compare, Interaction = None. PWM (1), CCP2 Mode = Capture. PWM (1), Interaction = None. PWM (1), CCP2 Mode = Compare. PWM (1), Interaction = None. PWM (1), CCP2 Mode = PWM. PWM (1), Interaction = Both PWMs will have the same frequency and update rate (TMR2 interrupt).",
    "14.2 Capture Mode\nIn Capture mode, the CCPRxH:CCPRxL register pair captures  the  16-bit  value  of  the  TMR1  or  TMR3 registers when an event occurs on the corresponding CCPx pin. An event is defined as one of the following:\n\u00b7 every falling edge\n\u00b7 every rising edge\n\u00b7 every 4th rising edge\n\u00b7 every 16th rising edge\nThe event is selected by the mode  select bits, CCPxM3:CCPxM0 (CCPxCON<3:0>). When a capture is made, the interrupt request flag bit, CCPxIF, is set; it must be cleared in software. If another capture occurs before  the  value  in  register  CCPRx  is  read,  the  old captured value is overwritten by the new captured value.",
    "14.2.1 CCP PIN CONFIGURATION\nIn Capture mode, the appropriate CCPx pin should be configured  as  an  input  by  setting  the  corresponding TRIS direction bit.\nNote:, 1 = If RB3/CCP2 or RC1/CCP2 is configured as an output, a write to the port can cause a capture condition.",
    "14.2.2 TIMER1/TIMER3 MODE SELECTION\nThe timers that are to be used with the capture feature (Timer1 and/or Timer3) must be running in Timer mode or Synchronized Counter mode. In Asynchronous Counter mode, the capture operation will not work. The timer to be used with each CCP module is selected in the T3CON register (see Section 14.1.1 'CCP Modules and Timer Resources' ).",
    "14.2.3 SOFTWARE INTERRUPT\nWhen the Capture mode is changed, a false capture interrupt may be generated. The user should keep the CCPxIE interrupt enable bit clear to avoid false interrupts.  The  interrupt  flag  bit,  CCPxIF,  should  also  be cleared following any such change in operating mode.",
    "14.2.4 CCP PRESCALER\nThere are four prescaler settings in Capture mode; they are specified as part of the operating mode selected by the  mode  select  bits  (CCPxM3:CCPxM0).  Whenever the CCP module is turned off or Capture mode is disabled,  the  prescaler  counter  is  cleared.  This  means that any Reset will clear the prescaler counter.\nSwitching from one capture prescaler to another may generate an interrupt. Also, the prescaler counter will not be cleared; therefore, the first capture may be from a non-zero prescaler. Example 14-1 shows the recommended method for switching between capture prescalers.  This  example  also  clears  the  prescaler counter and will not generate the 'false' interrupt.",
    "CHANGING BETWEEN (CCP2 SHOWN)\nCLRF\nCCP2CON\n; Turn CCP module off\nMOVLW\nNEW_CAPT_PS ; Load WREG with the\n; new prescaler mode\n; value and CCP ON\nMOVWF CCP2CON\n; Load CCP2CON with\n; this value",
    "14.3 Compare Mode\nIn Compare mode, the 16-bit CCPRx register value is constantly compared against either the TMR1 or TMR3 register pair value. When a match occurs, the CCPx pin can be:\n\u00b7 driven high\n\u00b7 driven low\n\u00b7 toggled (high-to-low or low-to-high)\n\u00b7 remain unchanged (that is, reflects the state of the I/O latch)\nThe action on the pin is based on the value of the mode select bits (CCPxM3:CCPxM0). At the same time, the interrupt flag bit CCPxIF is set.",
    "14.3.1 CCP PIN CONFIGURATION\nThe user must configure the CCPx pin as an output by clearing the appropriate TRIS bit.",
    "14.3.2 TIMER1/TIMER3 MODE SELECTION\nTimer1 and/or Timer3 must be running in Timer mode or Synchronized Counter mode if the CCP module is using the compare feature. In Asynchronous Counter mode, the compare operation may not work.",
    "14.3.3 SOFTWARE INTERRUPT MODE\nWhen the Generate Software Interrupt mode is chosen (CCPxM3:CCPxM0 = 1010 ), the corresponding CCPx pin is not affected. Only a CCP interrupt is generated, if enabled and the CCPxIE bit is set.",
    "14.3.4 SPECIAL EVENT TRIGGER\nBoth CCP modules are equipped with a special event trigger. This is an internal hardware signal generated in Compare mode to trigger actions by other modules. The special event trigger is enabled by selecting the Compare Special Event Trigger mode (CCPxM3:CCPxM0 = 1011 ).\nFor either CCP module, the special event trigger resets the timer register pair for whichever timer resource is currently  assigned  as  the  module's  time  base.  This allows the CCPRx registers to serve as a programmable period register for either timer.\nClearing the CCP2CON register will force the  RB3  or  RC1  compare  output  latch (depending on device configuration) to the default low level. This is not the PORTB or PORTC I/O data latch.\nThe special event trigger for CCP2 can also start an A/D conversion. In order to do this, the A/D converter must already be enabled.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (2). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 50. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nPIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 54. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nIPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 54. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 54. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nRegister. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 54. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 52. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n= Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 52. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 52. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H,",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 53. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 53. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nT3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 53. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCPR1L, Reset Values on page = 53. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 53. CCP1CON, Bit 7 = P1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 =",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nDC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 53. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nValues on page = 53. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 53. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3.",
    "TABLE 14-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0\n'. Shaded cells are not used by Capture/Compare, Timer1 or Timer3.\nNote 1:\nThese bits are unimplemented on 28-pin devices and read as ' 0 '.\n2: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .",
    "14.4 PWM Mode\nIn Pulse-Width Modulation (PWM) mode, the CCPx pin produces up to a 10-bit resolution PWM output. Since the CCP2 pin is multiplexed with a PORTB or PORTC data latch, the appropriate TRIS bit must be cleared to make the CCP2 pin an output.\nNote:\nClearing the CCP2CON register will force the RB3 or RC1 output latch (depending on  device  configuration)  to  the  default low  level. This  is not the PORTB  or PORTC I/O data latch.\nFigure 14-3  shows  a  simplified  block  diagram  of  the CCP module in PWM mode.\nFor a step-by-step procedure on how to set up the CCP module for PWM  operation, see Section 14.4.4 'Setup for PWM Operation' .",
    "FIGURE 14-3: SIMPLIFIED PWM BLOCK DIAGRAM\nA PWM output (Figure 14-4) has a time base (period) and  a  time  that  the  output  stays  high  (duty  cycle). The  frequency  of  the  PWM  is  the  inverse  of  the period (1/period).",
    "14.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following formula:",
    "EQUATION 14-1:\nPWM Period = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period].\nWhen TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCPx pin is set (exception: if PWM duty cycle = 0%, the CCPx pin will not be set)\n\u00b7 The PWM duty cycle is latched from CCPRxL into CCPRxH\nNote:\nThe Timer2 postscalers (see Section 12.0 'Timer2  Module' )  are  not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "14.4.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPRxL register and to the CCPxCON<5:4> bits. Up to 10-bit resolution is available. The CCPRxL contains the eight MSbs and the CCPxCON<5:4> contains the two LSbs. This 10-bit value is represented by CCPRxL:CCPxCON<5:4>.  The  following  equation  is used to calculate the PWM duty cycle in time:",
    "EQUATION 14-2:\nPWM Duty Cycle = (CCPRXL:CCPXCON<5:4>) \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nCCPRxL and CCPxCON<5:4> can be written to at any time  but  the  duty  cycle  value  is  not  latched  into CCPR2H until after a match between PR2 and TMR2 occurs  (i.e.,  the  period  is  complete).  In  PWM  mode, CCPRxH is a read-only register.\nThe  CCPRxH  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.\nWhen  the  CCPRxH  and  2-bit  latch  match  TMR2, concatenated with an internal 2-bit Q clock or 2 bits of the TMR2 prescaler, the CCPx pin is cleared.\nThe maximum PWM resolution (bits) for a given PWM frequency is given by the equation:",
    "EQUATION 14-3:\n<!-- formula-not-decoded -->\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP2 pin will not be cleared.",
    "TABLE 14-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 14-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "14.4.4 SETUP FOR PWM OPERATION\nThe  PWM  auto-shutdown  features  of  the  Enhanced CCP  module  are  also  available  to  CCP1  in  28-pin devices. The operation of this feature is discussed in detail in Section 15.4.7 'Enhanced PWM Auto-Shutdown' .\nAuto-shutdown features are not available for CCP2.\nThe following steps should be taken when configuring the CCP module for PWM operation:\n1. Set  the  PWM  period  by  writing  to  the  PR2 register.\n2. Set  the  PWM  duty  cycle  by  writing  to  the CCPRxL register and CCPxCON<5:4> bits.\n3. Make the CCPx pin an output by clearing the appropriate TRIS bit.\n4. Set  the  TMR2  prescale  value,  then  enable Timer2 by writing to T2CON.\n5. Configure the CCPx module for PWM operation.",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (2). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 50. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. TRISB,",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nBit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 54. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 54. TMR2, Bit 7 = Timer2 Register. TMR2,",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nBit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 52. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 52. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 52. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 53. CCPR1H, Bit 7 =",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 53. CCP1CON, Bit 7 = P1M1 (1). CCP1CON, Bit 6 = P1M0 (1). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 53. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Reset Values on page = 53. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 High Byte.",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Reset Values on page = 53. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1.",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on page = 53. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (1). ECCP1AS, Bit 0 = PSSBD0 (1). ECCP1AS, Reset Values on page = 53. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (1). PWM1CON, Bit 5 = PDC5 (1). PWM1CON, Bit 4 = PDC4 (1). PWM1CON, Bit 3 = PDC3 (1). PWM1CON, Bit 2 = PDC2 (1).",
    "TABLE 14-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nPWM1CON, Bit 1 = PDC1 (1). PWM1CON, Bit 0 = PDC0 (1). PWM1CON, Reset Values on page = 53\n- Legend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PWM or Timer2.\nNote\n1: These bits are unimplemented on 28-pin devices and read as ' 0 '.\n2: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .",
    "15.0 ENHANCED CAPTURE/ COMPARE/PWM (ECCP) MODULE\nNote:\nThe ECCP module is implemented only in 40/44-pin devices.\nand restart. The Enhanced features are discussed in detail in Section 15.4 'Enhanced  PWM  Mode' . Capture, Compare and single-output PWM functions of the ECCP module are the same as described for the standard CCP module.\nIn  PIC18F4410/4415/4510/4515/4610 devices, CCP1 is implemented  as  a  standard  CCP  module  with enhanced PWM  capabilities. These include the provision  for  2  or  4  output  channels,  user  selectable polarity,  dead-band  control  and  automatic  shutdown\nThe control register for the Enhanced CCP module is shown in Register 15-1. It differs from the CCPxCON registers in PIC18F2410/2415/2510/2515/2610 devices  in  that  the  two  Most  Significant  bits  are implemented to control PWM functionality.",
    "REGISTER 15-1: CCP1CON REGISTER (ECCP1 MODULE, 40/44-PIN DEVICES)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. P1M1, 1 = P1M0. P1M1, 2 = DC1B1. P1M1, 3 = DC1B0. P1M1, 4 = CCP1M3. P1M1, 5 = CCP1M2. P1M1, 6 = CCP1M1. P1M1, 7 = CCP1M0\nbit 7\nbit 0",
    "bit 7-6 P1M1:P1M0: Enhanced PWM Output Configuration bits\nIf CCP1M3:CCP1M2 = 00 01 10 , , :\nxx = P1A assigned as Capture/Compare input/output; P1B, P1C, P1D assigned as port pins\nIf CCP1M3:CCP1M2 = 11 :\n00 = Single output: P1A modulated; P1B, P1C, P1D assigned as port pins\n01 = Full-bridge output forward: P1D modulated; P1A active; P1B, P1C inactive\n- 10 = Half-bridge output: P1A, P1B modulated with dead-band control; P1C, P1D assigned as port pins\n11 = Full-bridge output reverse: P1B modulated; P1C active; P1A, P1D inactive",
    "bit 5-4 DC1B1:DC1B0 : PWM Duty Cycle bit 1 and bit 0\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:\nThese bits are the two LSbs of the 10-bit PWM duty cycle. The eight MSbs of the duty cycle are found in CCPR1L.",
    "bit 3-0 CCP1M3:CCP1M0 : Enhanced CCP Mode Select bits\n0000 = Capture/Compare/PWM off (resets ECCP module)\n0001 = Reserved\n0010 = Compare mode, toggle output on match\n0011 = Capture mode\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode, initialize CCP1 pin low, set output on compare match (set CCP1IF)\n1001 = Compare mode, initialize CCP1 pin high, clear output on compare match (set CCP1IF)\n1010 = Compare mode, generate software interrupt only, CCP1 pin reverts to I/O state\n1011 = Compare mode, trigger special event (ECCP resets TMR1 or TMR3, sets CC1IF bit)\n1100 = PWM mode; P1A, P1C active-high; P1B, P1D active-high",
    "bit 3-0 CCP1M3:CCP1M0 : Enhanced CCP Mode Select bits\n1101 = PWM mode; P1A, P1C active-high; P1B, P1D active-low\n1110 = PWM mode; P1A, P1C active-low; P1B, P1D active-high\n1111 = PWM mode; P1A, P1C active-low; P1B, P1D active-low",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "PIC18F2X1X/4X1X\nIn addition to the expanded range of modes available through the CCP1CON and ECCP1AS registers, the ECCP  module  has  an  additional  register  associated with  Enhanced  PWM  operation  and  auto-shutdown features. This register is:\n- \u00b7 PWM1CON (PWM Configuration register)",
    "15.1 ECCP Outputs and Configuration\nThe Enhanced CCP module may have up to four PWM outputs,  depending  on  the  selected  operating  mode. These  outputs,  designated  P1A  through  P1D,  are multiplexed with I/O pins on PORTC and PORTD. The outputs that are active depend on the CCP operating mode selected. The pin assignments are summarized in Table 15-1.\nTo configure the I/O pins as PWM outputs, the proper PWM  mode must be selected by setting the P1M1:P1M0 and CCP1M3:CCP1M0 bits. The appropriate TRISC and TRISD direction bits for the port pins must also be set as outputs.",
    "15.2 Capture and Compare Modes\nExcept  for  the  operation  of  the  special  event  trigger discussed below, the Capture and Compare modes of the ECCP module are identical in operation to that of CCP2. These are discussed in detail in Section 14.2 'Capture Mode' and Section 14.3 'Compare Mode' . No changes are required when moving between 28-pin and 40/44-pin devices.",
    "15.2.1 SPECIAL EVENT TRIGGER\nThe special event trigger output of ECCP1 resets the TMR1 or TMR3 register pair, depending on which timer resource is currently selected. This allows the CCPR1 register to effectively be a 16-bit programmable period register for Timer1 or Timer3.",
    "15.3 Standard PWM Mode\nWhen configured  in  Single  Output  mode,  the  ECCP module  functions  identically  to  the  standard  CCP module in PWM mode, as described in Section 14.4 'PWM Mode' .  This is also sometimes referred to as 'Compatible CCP' mode, as in Table 15-1.\nLike the standard CCP modules, the ECCP module can utilize  Timers  1,  2  or  3,  depending  on  the  mode selected. Timer1 and Timer3 are available for modules in Capture or Compare  modes,  while  Timer2 is available  for  modules  in  PWM  mode.  Interactions between the standard and Enhanced CCP modules are identical to those described for standard CCP modules. Additional  details  on  timer  resources  are  provided  in Section 14.1.1 'CCP Modules and Timer Resources' .\nNote:\nWhen setting up single output PWM operations, users are free to use either of the processes described in Section 14.4.4 'Setup for PWM Operation' or Section 15.4.9 'Setup for PWM Operation' .  The latter is more generic and will work for either single or multi-output PWM.",
    "TABLE 15-1: PIN ASSIGNMENTS FOR VARIOUS ECCP1 MODES\nAll 40/44-pin devices:, CCP1CON Configuration = All 40/44-pin devices:. All 40/44-pin devices:, RC2 = All 40/44-pin devices:. All 40/44-pin devices:, RD5 = All 40/44-pin devices:. All 40/44-pin devices:, RD6 = All 40/44-pin devices:. All 40/44-pin devices:, RD7 = All 40/44-pin devices:. Compatible CCP, CCP1CON Configuration = 00xx 11xx. Compatible CCP, RC2 = CCP1. Compatible CCP, RD5 = RD5/PSP5. Compatible CCP, RD6 = RD6/PSP6. Compatible CCP, RD7 = RD7/PSP7. Dual PWM, CCP1CON Configuration = 10xx 11xx. Dual PWM, RC2 = P1A. Dual PWM, RD5 = P1B. Dual PWM, RD6 = RD6/PSP6. Dual PWM, RD7 =",
    "TABLE 15-1: PIN ASSIGNMENTS FOR VARIOUS ECCP1 MODES\nRD7/PSP7. Quad PWM, CCP1CON Configuration = x1xx 11xx. Quad PWM, RC2 = P1A. Quad PWM, RD5 = P1B. Quad PWM, RD6 = P1C. Quad PWM, RD7 = P1D\nLegend: x = Don't care. Shaded cells indicate pin assignments not used by ECCP1 in a given mode.",
    "15.4 Enhanced PWM Mode\nThe Enhanced PWM mode provides additional PWM output options for a broader range of control applications. The module is a backward compatible version of the standard CCP module and offers up to four outputs, designated P1A through P1D. Users are also able to select  the  polarity  of  the  signal  (either  active-high  or active-low). The module's output mode and polarity are configured by setting the P1M1:P1M0 and CCP1M3:CCP1M0 bits of the CCP1CON register.",
    "15.4 Enhanced PWM Mode\nFigure 15-1 shows a simplified block diagram of PWM operation. All control registers are double-buffered and are loaded at the beginning of a new PWM cycle (the period  boundary  when  Timer2  resets)  in  order  to prevent glitches on any of the outputs. The exception is the PWM Delay register, PWM1CON, which is loaded at either the duty cycle boundary or the period boundary (whichever comes first). Because of the buffering, the module waits until the assigned timer resets instead of  starting  immediately.  This  means  that  Enhanced PWM waveforms do not exactly  match  the  standard PWM waveforms,  but  are  instead  offset  by  one  full instruction cycle (4 TOSC).",
    "15.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following equation.",
    "EQUATION 15-1:\nPWM Period   = [(PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period]. When TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCP1 pin is set (if PWM duty cycle = 0%, the CCP1 pin will not be set)\n\u00b7 The PWM duty cycle is copied from CCPR1L into CCPR1H\nNote:\nAs  before,  the  user  must  manually  configure  the appropriate TRIS bits for output.\nThe Timer2 postscaler (see Section 12.0 'Timer2  Module' ) is not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "15.4.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPR1L register and to the CCP1CON<5:4> bits. Up to 10-bit resolution is available. The CCPR1L contains the eight MSbs and the CCP1CON<5:4> contains the two LSbs. This 10-bit value is represented by CCPR1L:CCP1CON<5:4>.  The  PWM  duty  cycle  is calculated by the following equation.",
    "EQUATION 15-2:\nPWM Duty Cycle =\n(CCPR1L:CCP1CON<5:4>) \u2022 TOSC \u2022 (TMR2 Prescale Value)\nCCPR1L and CCP1CON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  copied  into CCPR1H until a match between PR2 and TMR2 occurs (i.e., the period is complete). In PWM mode, CCPR1H is a read-only register.",
    "EQUATION 15-3:\n<!-- formula-not-decoded -->\nNote:, 1 = If the PWMduty cycle value is longer than the PWM period, the CCP1 pin will not be cleared.",
    "15.4.3 PWM OUTPUT CONFIGURATIONS\nThe P1M1:P1M0 bits in the CCP1CON register allow one of four configurations:\n\u00b7 Single Output\n\u00b7 Half-Bridge Output\n\u00b7 Full-Bridge Output, Forward mode\n\u00b7 Full-Bridge Output, Reverse mode\nThe  CCPR1H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.  When the  CCPR1H and 2-bit latch match TMR2, concatenated with an internal 2-bit Q clock or two  bits  of  the  TMR2  prescaler,  the  CCP1  pin  is cleared.  The  maximum  PWM  resolution  (bits)  for  a given PWM  frequency  is  given by the following equation.\nThe Single Output mode is the standard PWM mode discussed in Section 15.4 'Enhanced PWM Mode' . The  Half-Bridge  and  Full-Bridge  Output  modes  are covered in detail in the sections that follow.\nThe general relationship of the outputs in all configurations is summarized in Figure 15-2.",
    "TABLE 15-2: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 15-2: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "FIGURE 15-2: PWM OUTPUT RELATIONSHIPS (ACTIVE-HIGH STATE)\n00, CCP1CON <7:6> = (Single Output). 00, SIGNAL = P1A Modulated. 00, 0.Duty Cycle = (1). 00,  = Period Delay (1). 10, CCP1CON <7:6> = (Half-Bridge). 10, SIGNAL = . 10, 0.Duty Cycle = . 10,  = . , CCP1CON <7:6> = (Full-Bridge, Forward). , SIGNAL = P1B Modulated. , 0.Duty Cycle = . ,  = . 01, CCP1CON <7:6> = . 01, SIGNAL = P1A Active P1B Inactive P1C Inactive. 01, 0.Duty Cycle = . 01,  = . 11, CCP1CON <7:6> = P1D Modulated Reverse). 11, SIGNAL = . 11, 0.Duty Cycle = . 11,  = . , CCP1CON <7:6> = . , SIGNAL = P1A Inactive. , 0.Duty Cycle = . ,",
    "FIGURE 15-2: PWM OUTPUT RELATIONSHIPS (ACTIVE-HIGH STATE)\n= . , CCP1CON <7:6> = P1B (Full-Bridge,. , SIGNAL = Modulated P1C Active. , 0.Duty Cycle = . ,  = . , CCP1CON <7:6> = P1D Inactive. , SIGNAL = . , 0.Duty Cycle = . ,  = ",
    "FIGURE 15-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n, SIGNAL. = . , 0.Duty Cycle. = . ,  = Period. , PR2 + 1.. = . 00 (Single Output), SIGNAL. = P1A Modulated. 00 (Single Output), 0.Duty Cycle. = . 00 (Single Output),  = . 00 (Single Output), PR2 + 1.. = . , SIGNAL. = P1A Modulated. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = . , SIGNAL. = . , 0.Duty Cycle. = (1). ,  = (1). , PR2 + 1.. = . , SIGNAL. = . , 0.Duty Cycle. = Delay. ,  = Delay. , PR2 + 1.. = . 10 (Half-Bridge), SIGNAL. = P1B Modulated. 10 (Half-Bridge), 0.Duty Cycle. = . 10 (Half-Bridge),  = . 10 (Half-Bridge), PR2 + 1.. = . , SIGNAL. = P1A Active. , 0.Duty Cycle. = . ,",
    "FIGURE 15-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n= . , PR2 + 1.. = . , SIGNAL. = P1B Inactive. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = . (Full-Bridge,, SIGNAL. = . (Full-Bridge,, 0.Duty Cycle. = . (Full-Bridge,,  = . (Full-Bridge,, PR2 + 1.. = . 01 Forward), SIGNAL. = . 01 Forward), 0.Duty Cycle. = . 01 Forward),  = . 01 Forward), PR2 + 1.. = . , SIGNAL. = P1C Inactive. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = . , SIGNAL. = P1D Modulated. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = . , SIGNAL. = P1A Inactive. , 0.Duty Cycle. = . ,",
    "FIGURE 15-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n= . , PR2 + 1.. = . (Full-Bridge,, SIGNAL. = P1B Modulated. (Full-Bridge,, 0.Duty Cycle. = . (Full-Bridge,,  = . (Full-Bridge,, PR2 + 1.. = . 11, SIGNAL. = . 11, 0.Duty Cycle. = . 11,  = . 11, PR2 + 1.. = . Reverse), SIGNAL. = . Reverse), 0.Duty Cycle. = . Reverse),  = . Reverse), PR2 + 1.. = . , SIGNAL. = P1C Active. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = . , SIGNAL. = P1D Inactive. , 0.Duty Cycle. = . ,  = . , PR2 + 1.. = ",
    "Relationships:\n\u00b7 Period = 4 * TOSC * (PR2 + 1) * (TMR2 Prescale Value)\n\u00b7 Duty Cycle = TOSC * (CCPR1L<7:0>:CCP1CON<5:4>) * (TMR2 Prescale Value)\n\u00b7 Delay = 4 * TOSC * (ECCPDEL<6:0>)\nNote 1: Dead-band delay is programmed using the PWM1CON register ( Section 15.4.6 'Programmable Dead-Band Delay' ).",
    "15.4.4 HALF-BRIDGE MODE\nIn the Half-Bridge Output mode, two pins are used as outputs  to  drive  push-pull  loads.  The  PWM  output signal is output on the P1A pin, while the complementary  PWM  output  signal  is  output  on  the  P1B  pin (Figure 15-4). This mode can be used for half-bridge applications, as shown in Figure 15-5, or for full-bridge applications  where  four  power  switches  are  being modulated with two PWM signals.\nIn Half-Bridge Output mode, the programmable deadband  delay  can  be  used  to  prevent  shoot-through current in half-bridge power devices. The value of bits PDC6:PDC0  sets  the  number  of  instruction  cycles before the output is driven active. If the value is greater than the duty cycle, the corresponding output remains inactive  during  the  entire  cycle.  See Section 15.4.6 'Programmable Dead-Band Delay' for more details of the dead-band delay operations.",
    "HALF-BRIDGE PWM OUTPUT\nSince the P1A and P1B outputs are multiplexed with the  PORTC<2>  and  PORTD<5>  data  latches,  the TRISC<2>  and  TRISD<5>  bits  must  be  cleared  to configure P1A and P1B as outputs.",
    "15.4.5 FULL-BRIDGE MODE\nIn  Full-Bridge  Output  mode,  four  pins  are  used  as outputs; however, only two outputs are active at a time. In  the  Forward mode, pin P1A is continuously active and pin P1D is modulated. In the Reverse mode, pin P1C is continuously active and pin P1B is modulated. These are illustrated in Figure 15-6.\nP1A, P1B, P1C and P1D outputs are multiplexed with the  PORTC<2> and PORTD<7:5> data latches. The TRISC<2> and TRISD<7:5> bits  must  be  cleared  to make the P1A, P1B, P1C and P1D pins outputs.\nFIGURE 15-6: FULL-BRIDGE PWM OUTPUT",
    "15.4.5 FULL-BRIDGE MODE\nP1A (2), Forward Mode. = . P1A (2), Forward Mode.Period = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . , Forward Mode. = Duty Cycle. , Forward Mode.Period = . , Forward Mode. = . , Forward Mode. = . P1B (2), Forward Mode. = . P1B (2), Forward Mode.Period = . P1B (2), Forward Mode. = . P1B (2), Forward Mode. = . P1C (2), Forward Mode. = . P1C (2), Forward Mode.Period = . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = . P1D (2), Forward Mode. = . P1D (2), Forward Mode.Period = . P1D (2), Forward Mode. = . P1D (2), Forward Mode. = . , Forward Mode. = . , Forward Mode.Period = . , Forward Mode. = (1). , Forward",
    "15.4.5 FULL-BRIDGE MODE\nMode. = . , Forward Mode. = (1). , Forward Mode.Period = . , Forward Mode. = . , Forward Mode. = . Reverse Mode, Forward Mode. = Reverse Mode. Reverse Mode, Forward Mode.Period = Reverse Mode. Reverse Mode, Forward Mode. = Reverse Mode. Reverse Mode, Forward Mode. = Reverse Mode. , Forward Mode. = . , Forward Mode.Period = Period. , Forward Mode. = . , Forward Mode. = . , Forward Mode. = Duty Cycle. , Forward Mode.Period = . , Forward Mode. = . , Forward Mode. = . P1A (2), Forward Mode. = . P1A (2), Forward Mode.Period = . P1A (2), Forward Mode. = . P1A (2), Forward Mode. = . P1B (2), Forward Mode. = . P1B (2), Forward Mode.Period = . P1B (2), Forward Mode. = . P1B (2), Forward Mode. = . P1C (2), Forward Mode. = . P1C (2), Forward Mode.Period",
    "15.4.5 FULL-BRIDGE MODE\n= . P1C (2), Forward Mode. = . P1C (2), Forward Mode. = . P1D (2), Forward Mode. = . P1D (2), Forward Mode.Period = . P1D (2), Forward Mode. = . P1D (2), Forward Mode. = . , Forward Mode. = (1). , Forward Mode.Period = . , Forward Mode. = (1). , Forward Mode. = . Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode.Period = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the",
    "15.4.5 FULL-BRIDGE MODE\nPR2 register.. Note 1: At this time, the TMR2 register is equal to the PR2 register., Forward Mode. = Note 1: At this time, the TMR2 register is equal to the PR2 register.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode.Period = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.. Note 2: Output signal is shown as active-high., Forward Mode. = Note 2: Output signal is shown as active-high.",
    "15.4.5.1 Direction Change in Full-Bridge Mode\nIn  the  Full-Bridge  Output  mode,  the  P1M1  bit  in  the CCP1CON register allows user to control the forward/ reverse direction. When  the application firmware changes  this  direction  control  bit,  the  module  will assume the new direction on the next PWM cycle.\nJust  before  the  end  of  the  current  PWM  period,  the modulated outputs (P1B and P1D) are placed in their inactive state, while the unmodulated outputs (P1A and P1C) are switched to drive in the opposite direction. This  occurs  in  a  time  interval  of  4 TOSC  *  (Timer2 Prescale Value) before the next PWM period begins. The Timer2 prescaler will be either 1, 4 or 16, depending  on  the  value  of  the  T2CKPS  bit  (T2CON<1:0>). During the interval from the switch of the unmodulated outputs  to the beginning  of  the  next  period,  the modulated  outputs  (P1B  and  P1D)  remain  inactive. This relationship is shown in Figure 15-8.",
    "15.4.5.1 Direction Change in Full-Bridge Mode\nNote that  in  the  Full-Bridge  Output  mode,  the  CCP1 module  does  not  provide  any  dead-band  delay.  In general, since only one output is modulated at all times, dead-band delay is not required. However, there is a situation where a dead-band delay might be required. This situation occurs  when  both  of  the  following conditions are true:\n1. The direction of the PWM output changes when the duty cycle of the output is at or near 100%.\n2. The turn-off time of the power switch, including the  power  device  and  driver  circuit,  is  greater than the turn-on time.",
    "15.4.5.1 Direction Change in Full-Bridge Mode\nFigure 15-9 shows  an  example  where  the PWM direction  changes  from  forward  to  reverse  at  a  near 100% duty cycle. At time t1, the outputs P1A and P1D become inactive, while output P1C becomes active. In this  example,  since  the  turn-off  time  of  the  power devices is longer than the turn-on time, a shoot-through current may flow through power devices, QC and QD (see  Figure 15-7),  for  the  duration  of  't'.  The  same phenomenon will occur to power devices, QA and QB, for PWM direction change from reverse to forward.\nIf changing PWM direction at high duty cycle is required for  an  application,  one  of  the  following  requirements must be met:\n1. Reduce PWM  for a PWM  period before changing directions.\n2. Use switch drivers that can drive the switches off faster than they can drive them on.\nOther  options  to  prevent  shoot-through  current  may exist.",
    "15.4.6 PROGRAMMABLE DEAD-BAND DELAY\nNote:\nProgrammable  dead-band  delay  is  not implemented in 28-pin devices with standard CCP modules.\nIn half-bridge applications where all power switches are modulated  at  the  PWM  frequency  at  all  times,  the power switches normally require more time to turn off than  to  turn  on.  If  both  the  upper  and  lower  power switches are switched at the same time (one turned on and the other turned off), both switches may be on for a short period of time until one switch completely turns off. During this brief interval, a very high current ( shootthrough current ) may flow through both power switches,  shorting  the  bridge  supply.  To  avoid  this potentially destructive shoot-through current from flowing during switching, turning on either of the power switches is normally delayed to allow the other switch to completely turn off.",
    "15.4.6 PROGRAMMABLE DEAD-BAND DELAY\nIn  the  Half-Bridge  Output  mode,  a  digitally  programmable  dead-band  delay  is  available  to  avoid  shootthrough  current  from  destroying  the  bridge  power switches. The delay occurs at the signal transition from the non-active state to the active state. See Figure 15-4 for  illustration.  Bits  PDC6:PDC0  of  the  PWM1CON register (Register 15-2) set the delay period in terms of microcontroller  instruction  cycles  (TCY  or  4  TOSC). These bits are not available on 28-pin devices as the standard  CCP  module  does  not  support  half-bridge operation.",
    "15.4.7 ENHANCED PWM AUTO-SHUTDOWN\nA  shutdown  event  can  be  caused  by  either  of  the comparator modules, a low level on the Fault input pin (FLT0) or any combination of these three sources. The comparators  may  be  used  to  monitor  a  voltage  input proportional to a current being monitored in the bridge circuit. If the voltage exceeds a threshold, the comparator  switches  state  and  triggers  a  shutdown. Alternatively, a low digital signal on FLT0 can also trigger a shutdown. The auto-shutdown feature can be disabled by not selecting any auto-shutdown sources. The autoshutdown  sources  to  be  used  are  selected  using  the ECCPAS2:ECCPAS0 bits (bits<6:4> of the ECCP1AS register).",
    "15.4.7 ENHANCED PWM AUTO-SHUTDOWN\nWhen  a shutdown occurs, the output pins are asynchronously placed in their shutdown states, specified by the PSSAC1:PSSAC0 and PSSBD1:PSSBD0  bits  (ECCPAS3:ECCPAS0).  Each pin pair (P1A/P1C and P1B/P1D) may be set to drive high,  drive  low  or  be  tri-stated  (not  driving).  The ECCPASE bit  (ECCPAS<7>)  is  also  set  to  hold  the Enhanced PWM outputs in their shutdown states.\nThe ECCPASE bit is set by hardware when a shutdown event occurs. If automatic restarts are not enabled, the ECCPASE bit is cleared by firmware when the cause of the shutdown clears. If automatic restarts are enabled, the  ECCPASE  bit  is  automatically  cleared  when  the cause of the auto-shutdown has cleared.",
    "15.4.7 ENHANCED PWM AUTO-SHUTDOWN\nIf the ECCPASE bit is set when a PWM period begins, the PWM outputs remain in their shutdown state for that entire PWM period. When the ECCPASE bit is cleared, the PWM outputs will return to normal operation at the beginning of the next PWM period.\nWhen the CCP1 is programmed for any of the Enhanced PWM modes, the active output pins may be configured for  auto-shutdown. Auto-shutdown immediately places the Enhanced PWM output pins into a defined shutdown state when a shutdown event occurs.\nNote: Writing  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.",
    "REGISTER 15-2: PWM1CON: PWM CONFIGURATION REGISTER\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PRSEN, 1 = PDC6 (1). PRSEN, 2 = PDC5 (1). PRSEN, 3 = PDC4 (1). PRSEN, 4 = PDC3 (1). PRSEN, 5 = PDC2 (1). PRSEN, 6 = PDC1 (1). PRSEN, 7 = PDC0 (1)\nbit 7\nbit 0",
    "bit 7 PRSEN: PWM Restart Enable bit\n1 = Upon auto-shutdown, the ECCPASE bit clears automatically once the shutdown event goes away; the PWM restarts automatically\n0 = Upon auto-shutdown, ECCPASE must be cleared in software to restart the PWM",
    "bit 6-0 PDC6:PDC0: PWM Delay Count bits\n(1)\nDelay time, in number of FOSC/4 (4 * TOSC) cycles, between the scheduled and actual time for a PWM signal to transition to active.\nNote 1: Unimplemented on 28-pin devices and read as ' 0 '.\n\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "REGISTER 15-3: ECCP1AS: ENHANCED CAPTURE/COMPARE/PWM AUTO-SHUTDOWN CONTROL REGISTER\nR/W-0\nR/W-0\nR/W-0\nR/W-0\nR/W-0\nR/W-0\nR/W-0\nR/W-0\nECCPASE\nECCPAS2\nECCPAS1\nECCPAS0\nPSSAC1\nPSSAC0\nPSSBD1\n(1)\nPSSBD0\n(1)\nbit 7\nbit 0\nbit 7\nECCPASE:\nECCP Auto-Shutdown Event Status bit\n1 = A shutdown event has occurred; ECCP outputs are in shutdown state\n0 = ECCP outputs are operating",
    "bit 6-4 ECCPAS2:ECCPAS0: ECCP Auto-Shutdown Source Select bits\n111 = FLT0 or Comparator 1 or Comparator 2\n110 = FLT0 or Comparator 2\n101 = FLT0 or Comparator 1\n100 = FLT0\n011 = Either Comparator 1 or 2\n010 = Comparator 2 output\n001 = Comparator 1 output\n000 = Auto-shutdown is disabled",
    "bit 3-2 PSSAC1:PSSAC0: Pins A and C Shutdown State Control bits\n1x = Pins A and C are tri-state (40/44-pin devices);\nPWM output is tri-state (28-pin devices)\n01 = Drive Pins A and C to ' 1 '\n00 = Drive Pins A and C to ' 0 '\nbit 1-0 PSSBD1:PSSBD0: Pins B and D Shutdown State Control bits (1)\n1x = Pins B and D tri-state\n01 = Drive Pins B and D to ' 1 '\n00 = Drive Pins B and D to ' 0 '\nNote 1: Unimplemented on 28-pin devices and read as ' 0 '.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "15.4.7.1 Auto-Shutdown and Automatic Restart\nThe auto-shutdown feature can be configured to allow automatic restarts of the module following a shutdown event. This is enabled by setting the PRSEN bit of the PWM1CON register (PWM1CON<7>).\nIn Shutdown mode with PRSEN = 1 (Figure 15-10), the ECCPASE bit will remain set for as long as the cause of the shutdown continues. When the shutdown condition clears, the ECCP1ASE bit is cleared. If PRSEN = 0 (Figure 15-11), once a shutdown condition occurs, the ECCPASE bit will remain set until it is cleared by firmware. Once ECCPASE is cleared, the Enhanced PWM will resume at the beginning of the next PWM period.\nNote:, 1 = Writing to the ECCPASE bit is disabled while a shutdown condition is active.\nIndependent  of  the  PRSEN  bit  setting,  if  the  autoshutdown  source  is  one  of  the  comparators,  the shutdown  condition  is  a  level.  The  ECCPASE  bit cannot be cleared as long as the cause of the shutdown persists.",
    "15.4.8 START-UP CONSIDERATIONS\nWhen the ECCP module is used in the PWM mode, the application hardware must use the proper external pullup and/or pull-down resistors on the PWM output pins. When the microcontroller is released from Reset, all of the I/O pins are in the high-impedance state. The external circuits  must  keep  the  power  switch  devices  in  the  off state until the microcontroller drives the I/O pins with the proper signal levels, or activates the PWM output(s).\nThe  CCP1M1:CCP1M0  bits  (CCP1CON<1:0>)  allow the user to choose whether the PWM output signals are active-high or active-low for each pair of PWM output pins (P1A/P1C  and  P1B/P1D).  The  PWM  output polarities must be selected before the PWM pins are configured as outputs. Changing the polarity configuration while the PWM pins are configured as outputs is not recommended, since it may result in damage to the application circuits.",
    "15.4.8 START-UP CONSIDERATIONS\nThe Auto-Shutdown mode can be forced by writing a ' 1 ' to the ECCPASE bit.\nThe P1A, P1B, P1C and P1D output latches may not be in the proper states when the PWM module is initialized. Enabling the PWM pins for output at the same time as the ECCP module may cause damage to the application circuit. The ECCP module must be enabled in the proper  output  mode  and  complete  a  full  PWM  cycle before configuring the PWM pins as outputs. The completion of a full PWM cycle is indicated by the TMR2IF bit being set as the second PWM period begins.",
    "FIGURE 15-10: PWM AUTO-SHUTDOWN (PRSEN =  , AUTO-RESTART ENABLED) 1\nFIGURE 15-11: PWM AUTO-SHUTDOWN (PRSEN =  , AUTO-RESTART DISABLED) 0",
    "15.4.9 SETUP FOR PWM OPERATION\nThe following steps should be taken when configuring the ECCP module for PWM operation:\n1. Configure  the  PWM  pins,  P1A  and  P1B  (and P1C and P1D, if used), as inputs by setting the corresponding TRIS bits.\n2. Set the PWM period by loading the PR2 register.\n3. If auto-shutdown is required:\n\u00b7 Disable auto-shutdown (ECCP1AS = 0 )\n\u00b7 Configure source (FLT0, Comparator 1 or Comparator 2)\n\u00b7 Wait for non-shutdown condition\n4. Configure  the  ECCP  module  for  the  desired PWM  mode  and  configuration  by  loading  the CCP1CON register with the appropriate values:\n\u00b7 Select one of the available output configurations and direction with the P1M1:P1M0 bits.\n\u00b7 Select the polarities of the PWM output signals with the CCP1M3:CCP1M0 bits.\n5. Set the PWM duty cycle by loading the CCPR1L register and CCP1CON<5:4> bits.",
    "15.4.9 SETUP FOR PWM OPERATION\n6. For  Half-Bridge  Output  mode,  set  the  deadband delay by loading ECCPDEL<6:0> with the appropriate value.\n7. If auto-shutdown operation is required, load the ECCP1AS register:\n\u00b7 Select the auto-shutdown sources using the ECCPAS2:ECCPAS0 bits.\n\u00b7 Select the shutdown states of the PWM output pins using the PSSAC1:PSSAC0 and PSSBD1:PSSBD0 bits.\n\u00b7 Set the ECCPASE bit (ECCPAS<7>).\n\u00b7 Configure the comparators using the CMCON register.\n\u00b7 Configure the comparator inputs as analog inputs.\n8. If auto-restart  operation  is  required,  set  the PRSEN bit (ECCPDEL<7>).\n9. Configure and start TMR2:\n\u00b7 Clear the TMR2 interrupt flag bit by clearing the TMR2IF bit (PIR1<1>).\n\u00b7 Set the TMR2 prescale value by loading the T2CKPS bits (T2CON<1:0>).",
    "15.4.9 SETUP FOR PWM OPERATION\n\u00b7 Enable Timer2 by setting the TMR2ON bit (T2CON<2>).\n10. Enable  PWM outputs after  a  new  PWM  cycle has started:\n\u00b7 Wait until TMRn overflows (TMRnIF bit is set).\n\u00b7 Enable the CCP1/P1A, P1B, P1C and/or P1D pin outputs by clearing the respective TRIS bits.\n\u00b7 Clear the ECCPASE bit (ECCPAS<7>).",
    "15.4.10 OPERATION IN POWER-MANAGED MODES\nIn Sleep mode, all clock sources are disabled. Timer2 will not increment and the state of the module will not change.  If  the  ECCP  pin  is  driving  a  value,  it  will continue to drive that value. When the device wakes up, it will continue from this state. If Two-Speed Startups  are  enabled,  the  initial  start-up  frequency  from INTOSC  and  the postscaler may  not be stable immediately.\nIn PRI_IDLE mode, the primary clock will continue to clock  the  ECCP  module without  change.  In  all  other power-managed modes, the selected power-managed mode clock will clock Timer2. Other power-managed mode  clocks  will  most  likely  be  different  than  the primary clock frequency.",
    "15.4.10.1 Operation with Fail-Safe Clock Monitor\nIf the Fail-Safe Clock Monitor is enabled, a clock failure will force the device into the power-managed RC_RUN mode and the OSCFIF bit (PIR2<7>) will be set. The ECCP will then be clocked from the internal oscillator clock source, which may  have  a different clock frequency than the primary clock.\nSee the previous section for additional details.",
    "15.4.11 EFFECTS OF A RESET\nBoth Power-on Reset and subsequent Resets will force all ports to Input mode and the CCP registers to their Reset states.\nThis forces the Enhanced CCP module to reset to a state compatible with the standard CCP module.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (2). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 50. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n= CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n54. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 54. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nBCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 54. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 54. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nData Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 54. TRISD, Bit 7 = PORTD Data Direction Control Register. TRISD, Bit 6 = PORTD Data Direction Control Register. TRISD, Bit 5 = PORTD Data Direction Control Register. TRISD, Bit 4 = PORTD Data Direction Control Register. TRISD, Bit 3 = PORTD Data Direction Control Register. TRISD, Bit 2 = PORTD Data Direction Control Register. TRISD, Bit 1 = PORTD Data Direction Control Register. TRISD, Bit 0 = PORTD Data Direction Control Register. TRISD, Reset Values on page = 54. TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n= Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte. TMR1L, Reset Values on page = 52. TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte. TMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Reset Values on page = 52. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nT1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on page = 52. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on page = 52. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nT2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on page = 52. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on page = 52. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nByte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on page = 53. TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on page = 53. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nT3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on page = 53. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Reset Values on page = 53. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Reset Values on page = 53. CCP1CON, Bit 7 = P1M1. CCP1CON, Bit 6 = P1M0. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\nCCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on page = 53. ECCP1AS, Bit 7 = ECCPASE. ECCP1AS, Bit 6 = ECCPAS2. ECCP1AS, Bit 5 = ECCPAS1. ECCP1AS, Bit 4 = ECCPAS0. ECCP1AS, Bit 3 = PSSAC1. ECCP1AS, Bit 2 = PSSAC0. ECCP1AS, Bit 1 = PSSBD1 (1). ECCP1AS, Bit 0 = PSSBD0 (1). ECCP1AS, Reset Values on page = 53. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6 (1). PWM1CON, Bit 5 = PDC5 (1). PWM1CON, Bit 4 = PDC4 (1). PWM1CON, Bit 3 = PDC3 (1). PWM1CON, Bit 2 = PDC2",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH ECCP1 MODULE AND TIMER1 TO TIMER3\n(1). PWM1CON, Bit 1 = PDC1 (1). PWM1CON, Bit 0 = PDC0 (1). PWM1CON, Reset Values on page = 53\nLegend:\n- - = unimplemented, read as ' 0 '. Shaded cells are not used during ECCP operation.\nNote\n1: These bits are unimplemented on 28-pin devices and read as ' 0 '.\n2: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .",
    "16.1 MSSP Module Overview\nThe Master Synchronous Serial Port (MSSP) module is a serial interface, useful for communicating with other peripheral or microcontroller devices. These peripheral devices  may  be  serial  EEPROMs,  shift  registers, display drivers, A/D converters, etc. The MSSP module can operate in one of two modes:\n\u00b7 Serial Peripheral Interface (SPI)\n\u00b7 Inter-Integrated Circuit (I 2 C)\n-Full Master mode\n-Slave mode (with general address call)\nThe  I 2 C  interface  supports  the  following  modes  in hardware:\n\u00b7 Master mode\n\u00b7 Multi-Master mode\n\u00b7 Slave mode",
    "16.2 Control Registers\nThe  MSSP  module  has  three  associated  registers. These  include  a  status  register  (SSPSTAT)  and  two control registers (SSPCON1 and SSPCON2). The use of these registers and their individual Configuration bits differ  significantly  depending  on  whether  the  MSSP module is operated in SPI or I 2 C mode.\nAdditional  details  are  provided  under  the  individual sections.",
    "16.3 SPI Mode\nThe SPI mode allows 8 bits of data to be synchronously transmitted and received simultaneously. All four SPI modes are supported. To accomplish communication, typically three pins are used:\n\u00b7 Serial Data Out (SDO) - RC5/SDO\n\u00b7 Serial Data In (SDI) - RC4/SDI/SDA\n\u00b7 Serial Clock (SCK) - RC3/SCK/SCL\nAdditionally, a fourth pin may be used when in a Slave mode of operation:\n- \u00b7 Slave Select (SS) - RA5/SS\nFigure 16-1  shows  the  block  diagram  of  the  MSSP module when operating in SPI mode.",
    "16.3.1 REGISTERS\nThe  MSSP  module  has  four  registers  for  SPI  mode operation. These are:\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.\nSSPCON1 and SSPSTAT are the control and status registers in SPI  mode  operation.  The  SSPCON1 register  is  readable  and  writable. The  lower 6 bits of the SSPSTAT are read-only. The upper two bits of the SSPSTAT are read/write.",
    "REGISTER 16-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-0. SMP, 1 = CKE. SMP, 2 = D/A. SMP, 3 = P. SMP, 4 = S. SMP, 5 = R/W. SMP, 6 = UA. SMP, 7 = BF\nbit 7\nbit 0",
    "bit 7 SMP: Sample bit\nSPI Master mode:\n1 = Input data sampled at end of data output time\n0 = Input data sampled at middle of data output time\nSPI Slave mode:\nSMP must be cleared when SPI operation is used in Slave mode.",
    "bit 6 CKE: SPI Clock Select bit\n1 = Transmit occurs on transition from active to Idle clock state\n0 = Transmit occurs on transition from Idle to active clock state\nNote:\nPolarity of clock state is set by the CKP bit (SSPCON1<4>).",
    "bit 5 D/A: Data/Address bit\nUsed in I 2 C mode only.",
    "bit 4 P:\nStop bit\nUsed in I 2 C mode only. This bit is cleared when the MSSP module is disabled; SSPEN is cleared.",
    "bit 3\nS: Start bit\nUsed in I 2 C mode only.",
    "bit 2 R/W: Read/Write bit Information\nUsed in I 2 C mode only.",
    "bit 1 UA: Update Address bit\nUsed in I 2 C mode only.\nbit 0 BF: Buffer Full Status bit (Receive mode only)\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "REGISTER 16-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. WCOL, 1 = SSPOV. WCOL, 2 = SSPEN. WCOL, 3 = CKP. WCOL, 4 = SSPM3. WCOL, 5 = SSPM2. WCOL, 6 = SSPM1. WCOL, 7 = SSPM0\nbit 7\nbit 0\nbit 7 WCOL: Write Collision Detect bit (Transmit mode only)\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nSPI Slave mode:\n1 = A new byte is received while the SSPBUF register is still holding the previous data. In case of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user must read the SSPBUF, even if only transmitting data, to avoid setting overflow (must be cleared in software).\n0 = No overflow\nNote:\nIn  Master  mode,  the  overflow  bit  is  not  set  since  each  new  reception  (and transmission) is initiated by writing to the SSPBUF register.",
    "bit 5 SSPEN: Synchronous Serial Port Enable bit\n- 1 = Enables serial port and configures SCK, SDO, SDI and SS as serial port pins\n0 = Disables serial port and configures these pins as I/O port pins\nNote:\nWhen enabled, these pins must be properly configured as input or output.",
    "bit 4 CKP: Clock Polarity Select bit\n1 = Idle state for clock is a high level\n0 = Idle state for clock is a low level",
    "bit 3-0 SSPM3:SSPM0: Synchronous Serial Port Mode Select bits\n0101 = SPI Slave mode, clock = SCK pin, SS pin control disabled, SS can be used as I/O pin\n0100 = SPI Slave mode, clock = SCK pin, SS pin control enabled\n0011 = SPI Master mode, clock = TMR2 output/2\n0010 = SPI Master mode, clock = FOSC/64\n0001 = SPI Master mode, clock = FOSC/16\n0000 = SPI Master mode, clock = FOSC/4\nNote:\nBit combinations not specifically listed here are either reserved or implemented in I 2 C mode only.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "16.3.2 OPERATION\nWhen initializing SPI operation, several options need to be specified. This is done by programming  the appropriate control bits (SSPCON1<5:0> and SSPSTAT<7:6>). These control bits allow the following to be specified:\n\u00b7 Master mode (SCK is the clock output)\n\u00b7 Slave mode (SCK is the clock input)\n\u00b7 Clock Polarity (Idle state of SCK)\n\u00b7 Data Input Sample Phase (middle or end of data output time)\n\u00b7 Clock Edge (output data on rising/falling edge of SCK)\n\u00b7 Clock Rate (Master mode only)\n\u00b7 Slave Select mode (Slave mode only)",
    "16.3.2 OPERATION\nThe MSSP consists of a Transmit/Receive Shift register  (SSPSR)  and  a  Buffer  register  (SSPBUF).  The SSPSR shifts the data in and out of the device, MSb first. The SSPBUF holds the data that was written to the SSPSR until the received data is ready. Once the 8 bits of data have been received, that byte is moved to the SSPBUF register. Then, the Buffer Full detect bit, BF (SSPSTAT<0>) and the interrupt  flag  bit,  SSPIF,  are set. This double-buffering of the received data (SSPBUF) allows the next byte to start reception before reading the data that was just received. Any write to the SSPBUF register during transmission/reception of data will be ignored and the write collision detect bit, WCOL (SSPCON1<7>), will be set. User software must clear the WCOL bit so that it can be determined if the following write(s) to the SSPBUF  register completed successfully.",
    "16.3.2 OPERATION\nWhen the application software is expecting to receive valid data, the SSPBUF should be read before the next byte of data to transfer is written to the SSPBUF. The Buffer  Full  bit,  BF  (SSPSTAT<0>),  indicates  when SSPBUF  has  been  loaded  with  the  received  data (transmission is complete). When the SSPBUF is read, the BF bit is cleared. This data may be irrelevant if the SPI interface is only a transmitter. Generally, the MSSP interrupt is used to determine when the transmission/ reception has completed. The SSPBUF must be read and/or written. If the interrupt method is not going to be used, then software polling can be done to ensure that a write collision does not occur. Example 16-1 shows the loading of the SSPBUF  (SSPSR)  for data transmission.\nThe SSPSR is not directly readable or writable and can only be accessed by addressing the SSPBUF register. Additionally,  the  MSSP  Status  register  (SSPSTAT) indicates the various status conditions.",
    "EXAMPLE 16-1: LOADING THE SSPBUF (SSPSR) REGISTER\nLOOP, 1 = BTFSS. LOOP, 2 = SSPSTAT, BF. LOOP, 3 = ;Has data been received (transmit complete)?. , 1 = BRA. , 2 = LOOP. , 3 = ;No. , 1 = MOVF. , 2 = SSPBUF, W. , 3 = ;WREG reg = contents of SSPBUF. , 1 = MOVWF. , 2 = RXDATA. , 3 = ;Save in user RAM, if data is meaningful. , 1 = MOVF. , 2 = TXDATA, W. , 3 = ;W reg = contents of TXDATA. , 1 = MOVWF. , 2 = SSPBUF. , 3 = ;New data to xmit",
    "16.3.3 ENABLING SPI I/O\nTo  enable  the  serial  port,  SSP  Enable  bit,  SSPEN (SSPCON1<5>), must be set. To reset or reconfigure SPI mode, clear the SSPEN  bit, reinitialize the SSPCON registers and then set the SSPEN bit. This configures the SDI, SDO, SCK and SS pins as serial port pins. For the pins to behave as the serial port function,  some must have their data direction bits (in the TRIS register) appropriately programmed as follows:\n\u00b7 SDI is automatically controlled by the SPI module\n\u00b7 SDO must have TRISC<5> bit cleared\n\u00b7 SCK (Master mode) must have TRISC<3> bit cleared\n\u00b7 SCK (Slave mode) must have TRISC<3> bit set\n\u00b7 SS must have TRISA<5> bit set",
    "16.3.4 TYPICAL CONNECTION\nFigure 16-2 shows a typical connection between two microcontrollers. The  master controller (Processor 1) initiates the data transfer by sending the SCK signal. Data is shifted out of both shift registers on their programmed clock edge and latched on the opposite edge of the clock. Both processors should be programmed to the same Clock Polarity (CKP), then both controllers would  send  and  receive  data  at  the  same  time. Whether  the  data  is  meaningful  (or  dummy  data) depends  on  the  application  software.  This  leads  to three scenarios for data transmission:\n\u00b7 Master sends data - Slave sends dummy data\n\u00b7 Master sends data - Slave sends data\n\u00b7 Master sends dummy data - Slave sends data\nAny  serial  port  function  that  is  not  desired  may  be overridden  by  programming  the  corresponding  Data Direction (TRIS) register to the opposite value.",
    "16.3.5 MASTER MODE\nThe master can initiate the data transfer at any time because it controls the SCK. The master determines when  the  slave (Processor 2, Figure 16-2) is to broadcast data by the software protocol.\nIn  Master  mode,  the  data  is  transmitted/received  as soon as the SSPBUF register is written to. If the SPI interface is only going to receive, the SDO output could be  disabled  (programmed  as  an  input).  The  SSPSR register will continue to shift in the signal present on the SDI pin at the programmed clock rate. As each byte is received, it will be loaded into the SSPBUF register as if  a  normal  received  byte  (interrupts  and  status  bits appropriately  set).  This  could  be  useful  in  receiver applications as a 'Line Activity Monitor' mode.\nThe clock polarity is selected by appropriately programming the CKP bit (SSPCON1<4>). This then, would  give  waveforms  for  SPI  communication  as shown  in  Figure 16-3,  Figure 16-5  and  Figure 16-6, where the MSB is transmitted first. In Master mode, the SPI clock rate (bit rate) is user programmable to be one of the following:",
    "16.3.5 MASTER MODE\n\u00b7 FOSC/4 (or TCY)\n\u00b7 FOSC/16 (or 4 \u00b7 TCY)\n\u00b7 FOSC/64 (or 16 \u00b7 TCY)\n\u00b7 Timer2 output/2\nThis  allows  a  maximum  data  rate  (at  40  MHz)  of 10.00 Mbps.\nFigure 16-3  shows  the  waveforms  for  Master  mode. When the CKE bit is set, the SDO data is valid before there is a clock edge on SCK. The change of the input sample is shown based on the state of the SMP bit. The time  when  the  SSPBUF  is  loaded  with  the  received data is shown.\nFIGURE 16-3:\nSPI MODE WAVEFORM (MASTER MODE)",
    "16.3.6 SLAVE MODE\nIn Slave mode, the data is transmitted and received as the external clock pulses appear on SCK. When the last bit is latched, the SSPIF interrupt flag bit is set.\nBefore  enabling  the  module  in  SPI  Slave  mode,  the clock line must match the proper Idle state. The clock line can be observed by reading the SCK pin. The Idle state is determined by the CKP bit (SSPCON1<4>).\nWhile in Slave mode, the external clock is supplied by the external clock source on the SCK pin. This external clock must meet the minimum high and low times as specified in the electrical specifications.\nWhile in  Sleep  mode,  the  slave  can  transmit/receive data. When a byte is received, the device will wake-up from Sleep.",
    "16.3.7 SLAVE SELECT SYNCHRONIZATION\nThe SS pin allows  a  Synchronous Slave mode.  The SPI  operation  must  be  in  Slave  mode  with  SS  pin control enabled (SSPCON1<3:0> = 04h). When the SS pin is low, transmission and reception are enabled and the SDO pin is driven. When the SS pin goes high, the SDO pin is no longer driven, even if in the middle of a transmitted byte and  becomes  a  floating output. External pull-up/pull-down resistors may be desirable depending on the application.\nNote 1: When the SPI operation is in Slave mode with SS pin control enabled (SSPCON<3:0> = 0100 ), the SPI module will reset if the SS pin is set to VDD.\n2: If the SPI operation is used in Slave mode with  CKE  set,  then  the  SS  pin  control must be enabled.\nWhen the SPI module resets, the bit counter is forced to ' 0 '. This can be done by either forcing the SS pin to a high level or clearing the SSPEN bit.",
    "16.3.7 SLAVE SELECT SYNCHRONIZATION\nTo emulate two-wire communication, the SDO pin can be  connected  to  the  SDI  pin.  When  the  SPI  module needs to operate as a receiver, the SDO pin can be configured  as  an  input.  This  disables  transmissions from the SDO. The SDI can always be left as an input (SDI function) since it cannot create a bus conflict.\nFIGURE 16-4: SLAVE SYNCHRONIZATION WAVEFORM",
    "PIC18F2X1X/4X1X\nFIGURE 16-5:",
    "SPI MODE WAVEFORM (SLAVE MODE WITH CKE =  ) 0\nFIGURE 16-6:\nSPI MODE WAVEFORM (SLAVE MODE WITH CKE =\n1\n)",
    "16.3.8 OPERATION IN POWER-MANAGED MODES\nIn SPI Master mode, module clocks may be operating at a different speed than when in full power mode. In the case of the Sleep mode, all clocks are halted.\nIn Idle modes, a clock is provided to the peripherals. That clock should be from the primary clock source, the secondary clock (Timer1 oscillator  at  32.768  kHz) or the INTOSC source. See Section 2.7 'Clock Sources and Oscillator Switching' for additional information.\nIn  most cases, the speed that the master clocks SPI data is not important; however, this should be evaluated for each system.\nIf  MSSP  interrupts  are  enabled,  they  can  wake  the controller from Sleep mode, or one of the Idle modes, when the  master  completes  sending  data.  If  an  exit from  Sleep or Idle mode  is  not desired, MSSP interrupts should be disabled.\nIf  the  Sleep  mode  is  selected,  all  module  clocks  are halted  and  the  transmission/reception  will  remain  in that  state  until  the  devices  wakes.  After  the  device returns to Run mode, the module will resume transmitting and receiving data.",
    "16.3.9 EFFECTS OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "16.3.10 BUS MODE COMPATIBILITY\nTable 16-1 shows the compatibility between the standard  SPI  modes  and  the  states  of  the  CKP  and CKE control bits.",
    "TABLE 16-1: SPI BUS MODES\n0, 0, Control Bits State.CKP = 0. 0, 0, Control Bits State.CKE = 1. 0, 1, Control Bits State.CKP = 0. 0, 1, Control Bits State.CKE = 0. 1, 0, Control Bits State.CKP = 1. 1, 0, Control Bits State.CKE = 1. 1, 1, Control Bits State.CKP = 1. 1, 1, Control Bits State.CKE = 0\nThere is also an SMP bit which controls when the data is sampled.\nIn  SPI  Slave  mode,  the  SPI  Transmit/Receive  Shift register  operates  asynchronously  to  the  device.  This allows the device to be placed in any power-managed mode  and  data  to  be  shifted  into  the  SPI  Transmit/ Receive  Shift  register.  When  all  8  bits  have  been received, the MSSP interrupt flag bit will be set and if enabled, will wake the device.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nTRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 54. TRISC, Bit 7 = PORTC Data Direction Control Register. TRISC, Bit 6 = PORTC Data Direction Control Register. TRISC, Bit 5 = PORTC Data Direction Control Register. TRISC, Bit 4 = PORTC Data Direction Control Register. TRISC, Bit 3 = PORTC Data Direction Control Register. TRISC, Bit 2 = PORTC Data Direction Control Register. TRISC, Bit 1 = PORTC Data Direction Control Register. TRISC, Bit 0 = PORTC Data Direction Control Register. TRISC, Reset Values on page = 54. SSPBUF, Bit 7 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = SSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = SSP Receive",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nBuffer/Transmit Register. SSPBUF, Bit 0 = SSP Receive Buffer/Transmit Register. SSPBUF, Reset Values on page = 52. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Reset Values on page = 52. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Reset Values on page = 52\nLegend: Shaded cells are not used by the MSSP in SPI mode.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nNote 1:\nThese bits are unimplemented on 28-pin devices and read as ' 0 '.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "16.4 I 2 C Mode\nThe MSSP module in I 2 C  mode  fully  implements  all master  and  slave  functions  (including  general  call support) and provides interrupts on Start and Stop bits in  hardware  to  determine  a  free  bus  (multi-master function). The MSSP module implements the standard mode  specifications, as well as 7-bit and  10-bit addressing.\nTwo pins are used for data transfer:\n\u00b7 Serial clock (SCL) - RC3/SCK/SCL\n\u00b7 Serial data (SDA) - RC4/SDI/SDA\nThe user must configure these pins as inputs or outputs through the TRISC<4:3> bits.",
    "16.4.1 REGISTERS\nThe MSSP module has six registers for I 2 C operation. These are:\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Control Register 2 (SSPCON2)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\n\u00b7 MSSP Address Register (SSPADD)\nSSPCON1, SSPCON2  and  SSPSTAT  are  the  control and status registers in I 2 C mode  operation. The SSPCON1 and SSPCON2 registers are readable and writable. The lower 6 bits of the SSPSTAT are read-only. The upper two bits of the SSPSTAT are read/write.\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\nSSPADD register holds the slave device address when the  SSP  is  configured  in  I 2 C  Slave  mode.  When  the SSP is configured in Master mode, the lower seven bits of  SSPADD  act  as  the  Baud  Rate  Generator  reload value.",
    "16.4.1 REGISTERS\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 16-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-0. SMP, 1 = CKE. SMP, 2 = D/A. SMP, 3 = P. SMP, 4 = S. SMP, 5 = R/W. SMP, 6 = UA. SMP, 7 = BF\nbit 7\nbit 0",
    "bit 7 SMP: Slew Rate Control bit\nIn Master or Slave mode:\n1 = Slew rate control disabled for Standard Speed mode (100 kHz and 1 MHz)\n0 = Slew rate control enabled for High-Speed mode (400 kHz)",
    "bit 6 CKE: SMBus Select bit\nIn Master or Slave mode:\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "In Slave mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address",
    "bit 4 P: Stop bit\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last\nNote: This bit is cleared on Reset and when SSPEN is cleared.",
    "bit 3 S: Start bit\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last\nNote:\nThis bit is cleared on Reset and when SSPEN is cleared.",
    "bit 2 R/W: Read/Write bit Information (I 2 C mode only)\nIn Slave mode:\n1 = Read\n0 = Write\nNote: This bit holds the R/W bit information following the last address match. This bit is only valid from the address match to the next Start bit, Stop bit or not ACK bit.",
    "In Master mode:\n1 = Transmit is in progress\n0 = Transmit is not in progress\nNote:\nORing this bit with SEN, RSEN, PEN, RCEN or ACKEN will indicate if the MSSP is in Active mode.",
    "bit 1 UA: Update Address bit (10-Bit Slave mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated",
    "In Transmit mode:\n1 = SSPBUF is full\n0 = SSPBUF is empty",
    "In Receive mode:\n1 = SSPBUF is full (does not include the ACK and Stop bits)\n0 = SSPBUF is empty (does not include the ACK and Stop bits)",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "REGISTER 16-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. WCOL, 1 = SSPOV. WCOL, 2 = SSPEN. WCOL, 3 = CKP. WCOL, 4 = SSPM3. WCOL, 5 = SSPM2. WCOL, 6 = SSPM1. WCOL, 7 = SSPM0\nbit 7\nbit 0",
    "bit 7 WCOL: Write Collision Detect bit\nIn Master Transmit mode:\n1 = A write to the SSPBUF register was attempted while the I 2 C conditions were not valid for a transmission to be started (must be cleared in software)\n0 = No collision",
    "In Slave Transmit mode:\n1 = The  SSPBUF register  is  written  while  it  is  still  transmitting  the  previous  word  (must  be cleared in software)\n0 = No collision\nIn Receive mode (Master or Slave modes):\nThis is a 'don't care' bit.",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nIn Receive mode:\n1 = A byte is received while the SSPBUF register is still holding the previous byte (must be cleared in software)\n0 = No overflow",
    "In Transmit mode:\nThis is a 'don't care' bit in Transmit mode.",
    "bit 5 SSPEN: Synchronous Serial Port Enable bit\n1 = Enables the serial port and configures the SDA and SCL pins as the serial port pins\n0 = Disables serial port and configures these pins as I/O port pins\nNote:\nWhen enabled,  the  SDA  and  SCL  pins  must  be  properly  configured  as  input  or output.",
    "In Slave mode:\n1 = Release clock\n0 = Holds clock low (clock stretch), used to ensure data setup time",
    "In Master mode:\nUnused in this mode.",
    "bit 3-0 SSPM3:SSPM0: Synchronous Serial Port Mode Select bits\n1111 = I 2 C Slave mode, 10-bit address with Start and Stop bit interrupts enabled\n1110 = I 2 C Slave mode, 7-bit address with Start and Stop bit interrupts enabled\n1011 = I 2 C Firmware Controlled Master mode (Slave Idle)\n1000 = I 2 C Master mode, clock = FOSC/(4 * (SSPADD + 1))\n0111 = I 2 C Slave mode, 10-bit address\n0110 = I 2 C Slave mode, 7-bit address\nBit combinations not specifically listed here are either reserved or implemented in SPI mode only.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "REGISTER 16-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. GCEN, 1 = ACKSTAT. GCEN, 2 = ACKDT. GCEN, 3 = ACKEN (1). GCEN, 4 = RCEN (1). GCEN, 5 = PEN (1). GCEN, 6 = RSEN (1). GCEN, 7 = SEN (1)\nbit 7\nbit 0\nbit 7 GCEN: General Call Enable bit (Slave mode only)\n1 = Enable interrupt when a general call address (0000h) is received in the SSPSR\n0 = General call address disabled",
    "bit 6 ACKSTAT: Acknowledge Status bit (Master Transmit mode only)\n1 = Acknowledge was not received from slave\n0 = Acknowledge was received from slave\nbit 5 ACKDT: Acknowledge Data bit (Master Receive mode only)\n1 = Not Acknowledge\n0 = Acknowledge\nNote:\nValue that will be transmitted when the user initiates an Acknowledge sequence at the end of a receive.\nbit 4 ACKEN: Acknowledge Sequence Enable bit (Master Receive mode only) (1)\n1 = Initiate  Acknowledge  sequence  on  SDA  and  SCL  pins  and  transmit  ACKDT  data  bit. Automatically cleared by hardware.\n0 = Acknowledge sequence Idle\nbit 3 RCEN: Receive Enable bit (Master mode only)\n1 = Enables Receive mode for I 2 C operation\n0 = Receive Idle\nbit 2 PEN: Stop Condition Enable bit (Master mode only) (1)\n1 = Initiate Stop condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Stop condition Idle\nbit 1 RSEN: Repeated Start Condition Enable bit (Master mode only) (1)\n1 = Initiate Repeated Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Repeated Start condition Idle\nbit 0 SEN: Start Condition Enable/Stretch Enable bit (1)",
    "In Master mode:\n1 = Initiate Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Start condition Idle",
    "In Slave mode:\n1 = Clock stretching is enabled for both slave transmit and slave receive (stretch enabled)\n0 = Clock stretching is disabled\nNote 1:\nFor bits ACKEN, RCEN, PEN, RSEN, SEN: If the I 2 C module is not in the Idle mode, these bits may not be set (no spooling) and the SSPBUF may not be written (or writes to the SSPBUF are disabled).",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\n- (1)",
    "16.4.2 OPERATION\nThe  MSSP  module  functions  are  enabled  by  setting MSSP Enable bit, SSPEN (SSPCON<5>).\nThe  SSPCON1  register  allows  control  of  the  I 2 C operation. Four  mode selection bits (SSPCON<3:0>) allow one of the following I 2 C modes to be selected:\n\u00b7 I 2 C Master mode clock\n\u00b7 I 2 C Slave mode (7-bit address)\n\u00b7 I 2 C Slave mode (10-bit address)\n\u00b7 I 2 C Slave mode (7-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Slave mode (10-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Firmware Controlled Master mode, slave is Idle\nSelection  of  any  I 2 C  mode  with  the  SSPEN  bit  set, forces  the  SCL  and  SDA  pins  to  be  open-drain, provided  these  pins  are  programmed  to  inputs  by setting  the appropriate TRISC bits. To ensure proper operation  of  the  module,  pull-up  resistors  must  be provided externally to the SCL and SDA pins.",
    "16.4.3 SLAVE MODE\nIn Slave mode, the SCL and SDA pins must be configured as inputs (TRISC<4:3> set). The MSSP module will override the input state with the output data when required (slave-transmitter).\nThe I 2 C Slave mode hardware will always generate an interrupt  on  an  address  match.  Through  the  mode select  bits,  the  user  can  also  choose  to  interrupt  on Start and Stop bits\nWhen an address is matched, or the data transfer after an address match is received, the hardware automatically will generate the Acknowledge (ACK) pulse and load  the  SSPBUF  register  with  the  received  value currently in the SSPSR register.\nAny combination of the following conditions will cause the MSSP module not to give this ACK pulse:\n\u00b7 The Buffer Full bit, BF (SSPSTAT<0>), was set before the transfer was received.\n\u00b7 The overflow bit, SSPOV (SSPCON<6>), was set before the transfer was received.",
    "16.4.3 SLAVE MODE\nIn  this  case,  the  SSPSR register value is not loaded into the SSPBUF, but bit SSPIF (PIR1<3>) is set. The BF bit is cleared by reading the SSPBUF register, while bit SSPOV is cleared through software.\nThe SCL clock input must have a minimum high and low for proper operation. The high and low times of the I 2 C  specification,  as  well  as  the  requirement  of  the MSSP module, are shown in timing parameter 100 and parameter 101.",
    "16.4.3.1 Addressing\nOnce the MSSP module has been enabled, it waits for a Start condition to occur. Following the Start condition, the  8-bits  are  shifted  into  the  SSPSR  register.  All incoming bits are sampled with the rising edge of the clock (SCL) line. The value of register SSPSR<7:1> is compared to the value of the  SSPADD register. The address is compared on the falling edge of the eighth clock (SCL) pulse. If the addresses match and the BF and SSPOV bits are clear, the following events occur:\n1. The  SSPSR  register  value  is  loaded  into  the SSPBUF register.\n2. The Buffer Full bit, BF, is set.\n3. An ACK pulse is generated.\n4. MSSP Interrupt  Flag  bit,  SSPIF  (PIR1<3>),  is set  (interrupt  is  generated,  if  enabled)  on  the falling edge of the ninth SCL pulse.",
    "16.4.3.1 Addressing\nIn 10-Bit Address mode, two address bytes need to be received  by  the  slave.  The  five  Most  Significant  bits (MSbs) of the first address byte specify if this is a 10-bit address. Bit R/W (SSPSTAT<2>) must specify a write so the slave device will receive the second address byte. For a 10-bit address, the first byte would equal ' 11110 A9 A8 0 ', where ' A9 ' and ' A8 ' are the two MSbs of the address. The sequence of events for 10-bit address is as follows, with steps 7 through 9 for the slave-transmitter:",
    "16.4.3.1 Addressing\n1. Receive first (high) byte of address (bits SSPIF, BF and UA (SSPSTAT<1>) are set).\n2. Update the SSPADD register with second (low) byte of address (clears bit UA and releases the SCL line).\n3. Read the SSPBUF register (clears bit BF) and clear flag bit SSPIF.\n4. Receive  second  (low)  byte  of  address  (bits SSPIF, BF and UA are set).\n5. Update the SSPADD register with the first (high) byte of address. If match releases SCL line, this will clear bit UA.\n6. Read the SSPBUF register (clears bit BF) and clear flag bit SSPIF.\n7. Receive Repeated Start condition.\n8. Receive first (high) byte of address (bits SSPIF and BF are set).\n9. Read the SSPBUF register (clears bit BF) and clear flag bit SSPIF.",
    "16.4.3.2 Reception\nWhen the R/W bit of the address byte is clear and an address  match  occurs,  the  R/W  bit  of  the  SSPSTAT register is cleared. The received address is loaded into the  SSPBUF  register  and  the  SDA  line  is  held  low (ACK).\nWhen the address byte overflow condition exists, then the no Acknowledge (ACK) pulse is given. An overflow condition is defined as either bit BF (SSPSTAT<0>) is set, or bit SSPOV (SSPCON1<6>) is set.\nAn MSSP interrupt is generated for each data transfer byte.  Flag  bit,  SSPIF  (PIR1<3>),  must  be  cleared  in software. The SSPSTAT register is used to determine the status of the byte.\nIf  SEN is enabled (SSPCON2<0> = 1 ),  RC3/SCK/SCL will be  held  low  (clock  stretch)  following  each  data transfer. The clock must be released by setting bit CKP (SSPCON<4>). See Section 16.4.4 'Clock Stretching' for more detail.",
    "16.4.3.3 Transmission\nWhen the R/W bit of the incoming address byte is set and  an  address  match  occurs,  the  R/W  bit  of  the SSPSTAT  register  is  set.  The  received  address  is loaded into the SSPBUF register. The ACK pulse will be sent on the ninth bit and pin RC3/SCK/SCL is held low  regardless  of  SEN  (see Section 16.4.4  'Clock Stretching' for  more detail). By stretching the clock, the master will be unable to assert another clock pulse until the slave is done preparing the transmit data. The transmit data must be loaded into the SSPBUF register which also loads the SSPSR register. Then pin RC3/ SCK/SCL  should  be  enabled  by  setting  bit  CKP (SSPCON1<4>). The eight data bits are shifted out on the falling edge of the SCL input. This ensures that the SDA  signal is valid during the SCL  high time (Figure 16-9).",
    "16.4.3.3 Transmission\nThe ACK pulse from the master-receiver is latched on the rising edge of the ninth SCL input pulse. If the SDA line is  high (not ACK), then the data transfer is complete.  In  this  case,  when  the  ACK  is  latched  by  the slave, the slave logic is reset (resets SSPSTAT register) and the slave monitors for another occurrence of the Start bit. If the SDA line was low (ACK), the next transmit data must be loaded into the SSPBUF register. Again, pin RC3/SCK/SCL must be enabled by setting bit CKP.\nAn MSSP interrupt is generated for each data transfer byte. The SSPIF bit must be cleared in software and the SSPSTAT register is used to determine the status of the byte. The SSPIF bit is set on the falling edge of the ninth clock pulse.",
    "16.4.4 CLOCK STRETCHING\nBoth 7-bit and 10-Bit Slave modes implement automatic clock stretching during a transmit sequence.\nThe SEN bit (SSPCON2<0>) allows clock stretching to be  enabled  during  receives.  Setting  SEN  will  cause the  SCL  pin  to  be  held  low  at  the  end  of  each  data receive sequence.",
    "16.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nIn 7-Bit Slave Receive mode, on the falling edge of the ninth clock at the end of the ACK sequence if the BF bit  is  set,  the  CKP  bit  in  the  SSPCON1  register  is automatically  cleared,  forcing  the  SCL  output  to  be held low. The CKP being cleared to ' 0 '  will assert the SCL line low. The CKP bit must be set in the user's ISR before reception is allowed to continue. By holding the SCL line low, the user has time to service the ISR and  read  the  contents  of  the  SSPBUF  before  the master device can initiate another receive sequence. This  will  prevent  buffer  overruns  from  occurring  (see Figure 16-13).",
    "16.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nNote 1: If the  user  reads  the  contents  of  the SSPBUF  before  the  falling  edge  of  the ninth clock, thus clearing the BF bit, the CKP  bit  will  not  be  cleared  and  clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit. The user should be careful to clear the BF bit in the ISR before the next receive sequence in order to prevent an overflow condition.",
    "16.4.4.2 Clock Stretching for 10-Bit Slave Receive Mode (SEN = 1 )\nIn  10-Bit  Slave  Receive  mode  during  the  address sequence,  clock  stretching  automatically  takes  place but CKP is not cleared. During this time, if the UA bit is set  after  the  ninth  clock,  clock  stretching  is  initiated. The UA bit is set after receiving the upper byte of the 10-bit address and following the receive of the second byte of the 10-bit address with the R/W bit cleared to ' 0 '. The release of the clock line occurs upon updating SSPADD.  Clock  stretching  will  occur  on  each  data receive sequence as described in 7-Bit Slave mode.",
    "Note:\nIf the user polls the UA bit and clears it by updating the SSPADD register before the falling edge of the ninth clock occurs and if the user hasn't cleared the BF bit by reading the SSPBUF register before that time, then the CKP bit will still NOT be asserted low.  Clock  stretching  on  the  basis  of  the state  of  the  BF  bit  only  occurs  during  a data sequence, not an address sequence.",
    "16.4.4.3 Clock Stretching for 7-Bit Slave Transmit Mode\n7-Bit Slave Transmit mode implements clock stretching by clearing the CKP bit after the falling edge of the ninth clock if the BF bit is clear. This occurs regardless of the state of the SEN bit.\nThe user's ISR must set the CKP bit before transmission  is  allowed  to  continue.  By  holding  the  SCL  line low, the user has time to service the ISR and load the contents of the SSPBUF before the master device can initiate another transmit sequence (see Figure 16-9).\nNote 1: If the user loads the contents of SSPBUF, setting the BF bit before the falling edge of the  ninth  clock,  the  CKP  bit  will  not  be cleared and clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit.",
    "16.4.4.4 Clock Stretching for 10-Bit Slave Transmit Mode\nIn  10-Bit  Slave  Transmit  mode,  clock  stretching  is controlled during the first two address sequences by the  state  of  the  UA  bit,  just  as  it  is  in  10-Bit  Slave Receive  mode. The  first  two  addresses  are  followed by a third address sequence which contains the highorder bits of the 10-bit address and the R/W bit set to ' 1 '. After the third address sequence is performed, the UA  bit  is  not  set,  the  module  is  now  configured  in Transmit  mode  and  clock  stretching  is  controlled  by the  BF  flag  as  in  7-Bit  Slave  Transmit  mode  (see Figure 16-11).",
    "16.4.4.5 Clock Synchronization and the CKP bit\nWhen the CKP bit is cleared, the SCL output is forced to ' 0 '. However, clearing the CKP bit will not assert the SCL  output  low  until the SCL  output  is already sampled low. Therefore, the CKP bit will not assert the SCL  line  until  an  external  I 2 C  master  device  has already  asserted  the  SCL  line.  The  SCL  output  will remain  low  until  the  CKP  bit  is  set  and  all  other devices  on  the  I 2 C  bus  have  deasserted  SCL.  This ensures that a write to the CKP bit will not violate the minimum high time requirement for SCL (see Figure 16-12).",
    "16.4.5 GENERAL CALL ADDRESS SUPPORT\nThe addressing procedure for the I 2 C bus is such that the  first  byte  after  the  Start  condition  usually  determines which device will be the slave addressed by the master. The exception is the general call address which can address all devices. When this address is used, all devices should, in theory, respond with an Acknowledge.\nThe  general  call  address  is  one  of  eight  addresses reserved for specific purposes by the I 2 C protocol. It consists of all ' 0 's with R/W = 0 .\nThe  general  call  address  is  recognized  when  the General Call Enable bit (GCEN) is enabled (SSPCON2<7> set). Following a Start bit detect, 8 bits are shifted into the SSPSR  and  the  address  is compared against the SSPADD. It is also compared to the general call address and fixed in hardware.\nIf  the  general  call  address  matches,  the  SSPSR  is transferred to the SSPBUF, the BF flag bit is set (eighth bit) and on the falling edge of the ninth bit (ACK bit), the SSPIF interrupt flag bit is set.",
    "16.4.5 GENERAL CALL ADDRESS SUPPORT\nWhen  the  interrupt  is  serviced,  the  source  for  the interrupt can be checked by reading the contents of the SSPBUF. The value can be used to determine if the address was device specific or a general call address.\nIn 10-Bit Address mode, the SSPADD is required to be updated for the second half of the address to match and the UA bit is set (SSPSTAT<1>). If the general call address is sampled when the GCEN bit is set, while the slave is configured in 10-Bit Address mode, then the second half of the address is not necessary, the UA bit will not be set and the slave will begin receiving data after the Acknowledge (Figure 16-15).",
    "16.4.6 MASTER MODE\nMaster  mode  is  enabled  by  setting  and  clearing  the appropriate SSPM bits in SSPCON1 and by setting the SSPEN bit. In Master mode, the SCL and SDA lines are manipulated by the MSSP hardware.\nMaster  mode  of  operation  is  supported  by  interrupt generation  on  the  detection  of  the  Start  and  Stop conditions. The Stop (P) and Start (S) bits are cleared from a Reset or when the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit is set, or the bus is Idle, with both the S and P bits clear.\nIn Firmware  Controlled Master mode,  user  code conducts  all  I 2 C  bus  operations  based  on  Start  and Stop bit conditions.\nOnce  Master  mode  is  enabled,  the  user  has  six options.\n1. Assert a Start condition on SDA and SCL.\n2. Assert a Repeated Start condition on SDA and SCL.\n3. Write to the SSPBUF register initiating transmission of data/address.\n4. Configure the I 2 C port to receive data.\n5. Generate an Acknowledge condition at the end of a received byte of data.\n6. Generate a Stop condition on SDA and SCL.",
    "Note:\nThe  MSSP  module,  when  configured  in I 2 C Master mode, does not allow queueing of  events.  For  instance,  the  user  is  not allowed  to  initiate  a  Start  condition  and immediately write the SSPBUF register to initiate transmission before the Start condition is complete. In this case, the SSPBUF will not be written to and the WCOL bit will be  set, indicating that a write to the SSPBUF did not occur.\nThe following events will cause the SSP Interrupt Flag bit, SSPIF, to be set (SSP interrupt, if enabled):\n\u00b7 Start condition\n\u00b7 Stop condition\n\u00b7 Data transfer byte transmitted/received\n\u00b7 Acknowledge transmit\n\u00b7 Repeated Start",
    "16.4.6.1 I 2 C Master Mode Operation\nThe  master  device  generates  all  of  the  serial  clock pulses and the Start and Stop conditions.   A transfer is ended with a Stop condition or with a Repeated Start condition.  Since the Repeated Start condition is also the beginning of the next serial transfer, the I 2 C bus will not be released.\nIn Master  Transmitter  mode,  serial  data  is  output through SDA, while SCL outputs the serial clock. The first byte transmitted contains the slave address of the receiving device (7 bits) and the Read/Write (R/W) bit. In this case, the R/W bit will be logic ' 0 '. Serial data is transmitted 8 bits at a time. After each byte is transmitted,  an  Acknowledge  bit  is  received.  Start  and  Stop conditions are output to indicate the beginning and the end of a serial transfer.",
    "16.4.6.1 I 2 C Master Mode Operation\nIn  Master  Receive  mode,  the  first  byte  transmitted contains the slave address of the transmitting device (7 bits) and the R/W bit. In this case, the R/W bit will be logic ' 1 '. Thus, the first byte transmitted is a 7-bit slave address  followed  by  a  ' 1 '  to  indicate  the  receive  bit. Serial data is received via SDA, while SCL outputs the serial clock. Serial data is received 8 bits at a time. After each byte is received, an Acknowledge bit is transmitted.  Start  and  Stop  conditions  indicate  the  beginning and end of transmission.\nThe Baud Rate Generator used for the SPI mode operation is used to set the SCL clock frequency for either 100  kHz,  400  kHz  or  1  MHz  I 2 C  operation.  See Section 16.4.7 'Baud Rate' for more detail.\nA typical transmit sequence would go as follows:",
    "16.4.6.1 I 2 C Master Mode Operation\n1. The user generates a Start condition by setting the Start Enable bit, SEN (SSPCON2<0>).\n2. SSPIF is set. The MSSP module will wait the required  start  time  before  any  other  operation takes place.\n3. The  user  loads  the  SSPBUF  with  the  slave address to transmit.\n4. Address is shifted out the SDA pin until all 8 bits are transmitted.\n5. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n6. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.\n7. The user loads the SSPBUF with eight bits of data.\n8. Data is shifted out the SDA pin until all 8 bits are transmitted.\n9. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n10. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.",
    "16.4.6.1 I 2 C Master Mode Operation\n11. The user generates a Stop condition by setting the Stop Enable bit, PEN (SSPCON2<2>).\n12. Interrupt is generated once the Stop condition is complete.",
    "16.4.7 BAUD RATE\nIn I 2 C Master mode, the Baud Rate Generator (BRG) reload  value  is  placed  in  the  lower  7  bits  of  the SSPADD register (Figure 16-17). When a write occurs to SSPBUF, the Baud Rate Generator will automatically begin counting. The BRG counts down to ' 0 ' and stops until another reload has taken place. The BRG count is decremented twice per instruction cycle (TCY) on the Q2 and Q4 clocks. In I 2 C  Master  mode,  the  BRG  is reloaded automatically.\nOnce the given operation is complete (i.e., transmission of the last data bit is followed by ACK), the internal clock will automatically stop counting and the SCL pin will remain in its last state.\nTable 16-3 demonstrates clock rates based on instruction  cycles  and  the  BRG  value  loaded  into SSPADD.",
    "TABLE 16-3: I 2 C\u2122 CLOCK RATE W/BRG\n40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 18h. 40 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 1Fh. 40 MHz, FSCL (2 Rollovers of BRG) = 312.5 kHz. 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, BRG Value = 63h. 40 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 09h. 16 MHz, FSCL (2 Rollovers of BRG) = 400 kHz (1). 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 0Ch. 16 MHz, FSCL (2 Rollovers",
    "TABLE 16-3: I 2 C\u2122 CLOCK RATE W/BRG\nof BRG) = 308 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, BRG Value = 27h. 16 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 02h. 4 MHz, FSCL (2 Rollovers of BRG) = 333 kHz (1). 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 09h. 4 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, BRG Value = 00h. 4 MHz, FSCL (2 Rollovers of BRG) = 1 MHz (1)",
    "TABLE 16-3: I 2 C\u2122 CLOCK RATE W/BRG\nNote 1: The I 2 C interface does not conform to the 400 kHz I 2 C specification (which applies to rates greater than 100 kHz) in all details, but may be used with care where higher rates are required by the application.",
    "16.4.7.1 Clock Arbitration\nClock arbitration occurs when the master, during any receive,  transmit  or  Repeated  Start/Stop  condition, deasserts  the  SCL  pin  (SCL  allowed  to  float  high). When the SCL pin is allowed to float high, the Baud Rate  Generator  (BRG)  is  suspended  from  counting until the SCL pin is actually sampled high. When the\nSCL pin is sampled high, the Baud Rate Generator is reloaded  with  the  contents  of  SSPADD<6:0>  and begins counting. This ensures that the SCL high time will always be at least one BRG rollover count in the event that the clock is held low by an external device (Figure 16-18).\nFIGURE 16-18: BAUD RATE GENERATOR TIMING WITH CLOCK ARBITRATION",
    "16.4.8 I 2 C MASTER MODE START CONDITION TIMING\nTo  initiate  a  Start  condition,  the  user  sets  the  Start Enable bit, SEN (SSPCON2<0>). If the SDA and SCL pins  are  sampled  high,  the  Baud  Rate  Generator  is reloaded with the contents of SSPADD<6:0> and starts its count. If SCL and SDA are both sampled high when the Baud Rate Generator times out (TBRG), the SDA pin is driven low. The action of the SDA being driven low while SCL is high is the Start condition and causes the S bit (SSPSTAT<3>) to be set. Following this, the Baud Rate Generator is reloaded with the contents of SSPADD<6:0> and resumes its count. When the Baud Rate Generator times out (TBRG), the SEN  bit (SSPCON2<0>)  will be automatically cleared by hardware;  the  Baud  Rate  Generator  is  suspended, leaving the SDA line held low and the Start condition is complete.\nNote:",
    "16.4.8 I 2 C MASTER MODE START CONDITION TIMING\nIf  at  the  beginning  of  the  Start  condition, the SDA and SCL pins are already sampled low, or if during the Start condition, the SCL line is sampled low before the SDA line  is  driven  low,  a  bus  collision  occurs, the Bus Collision Interrupt Flag, BCLIF, is set, the Start condition is aborted and the I 2 C module is reset into its Idle state.",
    "16.4.8.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Start sequence is in progress, the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nNote:\nBecause queueing of events is not allowed,  writing  to  the  lower  5  bits  of SSPCON2  is  disabled until the Start condition is complete.",
    "16.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nA Repeated Start condition occurs when the RSEN bit (SSPCON2<1>) is programmed high and the I 2 C logic module is in the Idle state. When the RSEN bit is set, the SCL pin is asserted low. When the SCL pin is sampled low, the Baud Rate Generator is loaded with the contents of SSPADD<5:0> and begins counting. The SDA pin is released (brought high) for one Baud Rate Generator count (TBRG). When the Baud Rate Generator times out, if SDA is sampled high, the SCL pin will be deasserted (brought high). When SCL is sampled high,  the  Baud  Rate  Generator  is  reloaded  with  the contents of SSPADD<6:0> and begins counting. SDA and  SCL  must  be  sampled  high  for  one  TBRG.  This action  is  then  followed  by  assertion  of  the  SDA  pin (SDA = 0 ) for one TBRG while SCL is high. Following this, the RSEN bit (SSPCON2<1>) will be automatically cleared  and  the  Baud  Rate  Generator  will  not",
    "16.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nbe reloaded, leaving the SDA pin held low. As soon as a Start condition is detected on the SDA and SCL pins, the S bit (SSPSTAT<3>) will be set. The SSPIF bit will not be set until the Baud Rate Generator has timed out.\nNote 1: If  RSEN is programmed while any other event is in progress, it will not take effect.\n2: A bus collision during the Repeated Start condition occurs if:\n\u00b7 SDA is sampled low when SCL goes from low-to-high.\n\u00b7 SCL goes low before SDA is asserted low. This may indicate that another master is attempting to transmit a data ' 1 '.\nImmediately following the SSPIF bit getting set, the user may write the SSPBUF with the 7-bit address in 7-Bit Address  mode  or  the  default  first  address  in  10-Bit Address mode. After the first eight bits are transmitted and an ACK is received, the user may then transmit an additional eight bits of address (10-Bit Address mode) or eight bits of data (7-Bit Address mode).",
    "16.4.9.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Repeated Start sequence  is  in  progress,  the  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "Note:\nBecause queueing of events is not allowed,  writing  of  the  lower  5  bits  of SSPCON2 is disabled until the Repeated Start condition is complete.",
    "16.4.10 I 2 C MASTER MODE TRANSMISSION\nTransmission  of  a  data  byte,  a  7-bit  address  or  the other half of a 10-bit address is accomplished by simply writing a value to the SSPBUF register. This action will set the Buffer Full flag bit, BF and allow the Baud Rate Generator to begin counting and start the next transmission.  Each  bit  of  address/data  will  be  shifted  out onto  the  SDA  pin  after  the  falling  edge  of  SCL  is asserted (see data hold time specification parameter 106).  SCL  is  held  low  for  one  Baud  Rate Generator rollover count (TBRG). Data should be valid before SCL is released high (see data setup time specification parameter 107). When the SCL pin is released high, it is held that way for TBRG. The data on the SDA pin must remain stable for that duration and some hold time after the next falling edge of SCL. After the eighth bit is shifted out (the falling edge of the eighth clock), the BF flag is cleared and the master releases SDA. This  allows  the  slave  device  being  addressed  to respond with an ACK bit during the ninth bit time if an address  match  occurred,  or  if  data  was",
    "16.4.10 I 2 C MASTER MODE TRANSMISSION\nreceived properly. The status of ACK is written into the ACKDT bit on the falling edge of the ninth clock. If the master receives an Acknowledge, the Acknowledge Status bit, ACKSTAT, is cleared. If not, the bit is set. After the ninth clock, the SSPIF bit is set and the master clock (Baud Rate Generator) is suspended until the next data byte is loaded into the SSPBUF, leaving SCL low and SDA unchanged (Figure 16-21).",
    "16.4.10 I 2 C MASTER MODE TRANSMISSION\nAfter the write to the SSPBUF, each bit of the address will be shifted out on the falling edge of SCL until all seven address bits and the R/W bit are completed. On the  falling  edge  of  the  eighth  clock,  the  master  will deassert the SDA pin, allowing the slave to respond with an Acknowledge. On the falling edge of the ninth clock, the master will sample the SDA pin to see if the address was recognized by a slave. The status of the ACK  bit is loaded into the ACKSTAT  status  bit (SSPCON2<6>). Following the falling edge of the ninth clock transmission of the address, the SSPIF is set, the BF  flag  is  cleared  and  the  Baud  Rate  Generator  is turned  off  until  another  write  to  the  SSPBUF  takes place, holding SCL low and allowing SDA to float.",
    "16.4.10.1 BF Status Flag\nIn  Transmit  mode,  the  BF  bit  (SSPSTAT<0>)  is  set when the CPU writes to SSPBUF and is cleared when all 8 bits are shifted out.",
    "16.4.10.2 WCOL Status Flag\nIf  the  user  writes  the  SSPBUF  when  a  transmit  is already in progress (i.e., SSPSR is still shifting out a data byte), the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nWCOL must be cleared in software.",
    "16.4.10.3 ACKSTAT Status Flag\nIn Transmit mode, the ACKSTAT bit (SSPCON2<6>) is cleared  when  the  slave  has  sent  an  Acknowledge (ACK = 0 ) and is set when the slave does not Acknowledge (ACK = 1 ). A slave sends an Acknowledge when it has recognized its address (including a general call), or when the slave has properly received its data.",
    "16.4.11 I 2 C MASTER MODE RECEPTION\nMaster mode reception is enabled by programming the Receive Enable bit, RCEN (SSPCON2<3>).\nNote:\nThe MSSP module must be in an Idle state before the RCEN bit is set or the RCEN bit will be disregarded.\nThe Baud Rate Generator begins counting and on each rollover, the state of the SCL pin changes (high-to-low/ low-to-high) and data is shifted into the SSPSR. After the falling edge of the eighth clock, the receive enable flag is automatically  cleared,  the  contents  of  the SSPSR are loaded into the SSPBUF, the BF flag bit is set, the SSPIF flag bit is set and the Baud Rate Generator is suspended from counting, holding SCL low. The MSSP is now in Idle state awaiting the next command. When the buffer is read by the CPU, the BF flag bit is automatically  cleared.  The  user  can  then  send  an Acknowledge bit at the end of reception by setting the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>).",
    "16.4.11.1 BF Status Flag\nIn receive operation, the BF bit is set when an address or data byte is loaded into SSPBUF from SSPSR. It is cleared when the SSPBUF register is read.",
    "16.4.11.2 SSPOV Status Flag\nIn receive operation, the SSPOV bit is set when 8 bits are  received  into  the  SSPSR  and  the  BF  flag  bit  is already set from a previous reception.",
    "16.4.11.3 WCOL Status Flag\nIf the  user  writes  the  SSPBUF  when  a  receive  is already in progress (i.e., SSPSR is still shifting in a data byte), the WCOL bit is set and the contents of the buffer are unchanged (the write doesn't occur).",
    "16.4.12 ACKNOWLEDGE SEQUENCE TIMING\nAn  Acknowledge  sequence  is  enabled  by  setting  the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>). When this  bit  is  set,  the  SCL  pin  is pulled low and the contents of the Acknowledge data bit are presented on the SDA pin. If the user wishes to generate an Acknowledge, then the ACKDT bit should be cleared. If not, the user should set the ACKDT bit before starting  an  Acknowledge  sequence.  The  Baud  Rate Generator  then  counts  for  one  rollover  period  (TBRG) and the SCL pin is deasserted (pulled high). When the SCL pin is  sampled high (clock  arbitration),  the  Baud Rate Generator counts for TBRG. The SCL pin is then pulled low. Following this, the ACKEN bit is automatically cleared, the Baud Rate Generator is turned off and the MSSP module then goes into Idle mode (Figure 16-23).",
    "16.4.12.1 WCOL Status Flag\nIf the user writes the SSPBUF when an Acknowledge sequence is  in  progress,  then  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "16.4.13 STOP CONDITION TIMING\nA Stop bit is asserted on the SDA pin at the end of a receive/transmit by setting the Stop Sequence Enable bit,  PEN  (SSPCON2<2>).  At  the  end  of  a  receive/ transmit, the SCL line is held low after the falling edge of the ninth clock. When the PEN bit is set, the master will assert the SDA line low. When the SDA line is sampled  low,  the  Baud  Rate  Generator  is  reloaded  and counts  down  to  ' 0 '.  When  the  Baud  Rate  Generator times out, the SCL pin will  be brought  high  and one TBRG (Baud Rate Generator rollover count) later, the SDA pin will be deasserted. When the SDA pin is sampled high while SCL is high, the P bit (SSPSTAT<4>) is set. A TBRG later, the PEN bit is cleared and the SSPIF bit is set (Figure 16-24).",
    "16.4.13.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Stop sequence is  in  progress,  then  the  WCOL  bit  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "16.4.14 SLEEP OPERATION\nWhile  in  Sleep  mode,  the  I 2 C  module  can  receive addresses  or  data  and  when  an  address  match  or complete  byte  transfer  occurs,  wake  the  processor from Sleep (if the MSSP interrupt is enabled).",
    "16.4.15 EFFECTS OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "16.4.16 MULTI-MASTER MODE\nIn Multi-Master mode, the interrupt generation on the detection of the  Start  and  Stop  conditions  allows  the determination of when the bus is free. The Stop (P) and Start  (S)  bits  are  cleared  from  a  Reset  or  when  the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit (SSPSTAT<4>) is set, or the bus is Idle, with both the S and P bits clear. When the bus is busy, enabling the SSP interrupt will generate the interrupt when the Stop condition occurs.\nIn multi-master  operation,  the  SDA  line  must  be monitored for arbitration to see if the signal level is the expected  output  level.  This  check  is  performed  in hardware with the result placed in the BCLIF bit.\nThe states where arbitration can be lost are:\n\u00b7 Address Transfer\n\u00b7 Data Transfer\n\u00b7 A Start Condition\n\u00b7 A Repeated Start Condition\n\u00b7 An Acknowledge Condition",
    "16.4.17 MULTI -MASTER COMMUNICATION, BUS COLLISION AND BUS ARBITRATION\nMulti-Master mode support is achieved by bus arbitration. When the master outputs address/data bits onto the SDA pin, arbitration takes place when the master outputs  a  ' 1 '  on  SDA,  by  letting  SDA  float  high  and another master asserts a ' 0 '. When the SCL pin floats high,  data  should  be  stable.  If  the  expected  data  on SDA is a ' 1 ' and the data sampled on the SDA pin = 0 , then a bus collision has taken place. The master will set the Bus Collision Interrupt Flag, BCLIF and reset the I 2 C port to its Idle state (Figure 16-25).\nIf  a  transmit  was  in  progress  when  the  bus  collision occurred,  the  transmission  is  halted,  the  BF  flag  is cleared, the SDA and SCL lines are deasserted and the SSPBUF can be written to. When the user services the bus collision  Interrupt  Service  Routine  and  if  the  I 2 C bus  is  free,  the  user  can  resume  communication  by asserting a Start condition.",
    "16.4.17 MULTI -MASTER COMMUNICATION, BUS COLLISION AND BUS ARBITRATION\nIf a Start, Repeated  Start, Stop or Acknowledge condition was  in progress  when  the  bus  collision occurred,  the  condition  is  aborted,  the  SDA  and  SCL lines are deasserted and the respective control bits in the SSPCON2 register are cleared. When the user services the bus collision Interrupt Service Routine and if the I 2 C bus is free, the user can resume communication by asserting a Start condition.\nThe master will continue to monitor the SDA and SCL pins. If a Stop condition occurs, the SSPIF bit will be set.\nA write  to  the  SSPBUF  will  start  the  transmission  of data  at  the  first  data  bit  regardless  of  where  the transmitter left off when the bus collision occurred.\nIn Multi-Master mode, the interrupt generation on the detection of Start and Stop conditions allows the determination of when the bus is free. Control of the I 2 C bus can be taken when the P bit is  set  in  the  SSPSTAT register,  or  the  bus  is  Idle  and  the  S  and  P  bits  are cleared.",
    "16.4.17.1 Bus Collision During a Start Condition\nDuring a Start condition, a bus collision occurs if:\na) SDA or SCL are sampled low at the beginning of the Start condition (Figure 16-26).\nb) SCL is sampled low before SDA is asserted low (Figure 16-27).\nDuring a Start  condition,  both the  SDA  and the  SCL pins are monitored.\nIf the SDA pin is already low, or the SCL pin is already low, then all of the following occur:\n\u00b7 the Start condition is aborted,\n\u00b7 the BCLIF flag is set and\n\u00b7 the MSSP module is reset to its Idle state (Figure 16-26).\nThe Start condition begins with the SDA and SCL pins deasserted. When the SDA pin is sampled high, the Baud  Rate  Generator  is  loaded  from  SSPADD<6:0> and counts down to 0. If the SCL pin is sampled low while SDA is high, a bus collision occurs because it is assumed that another master is attempting to drive a data ' 1 ' during the Start condition.",
    "16.4.17.1 Bus Collision During a Start Condition\nIf  the  SDA  pin  is  sampled  low  during  this  count,  the BRG  is  reset  and  the  SDA  line  is  asserted  early (Figure 16-28). If, however, a ' 1 ' is sampled on the SDA pin, the SDA pin is asserted low at the end of the BRG count. The Baud Rate Generator is then reloaded and counts  down  to  0;  if  the  SCL  pin  is  sampled  as  ' 0 ' during this time, a bus collision does not occur. At the end of the BRG count, the SCL pin is asserted low.",
    "Note:\nThe reason that bus collision is not a factor during a Start condition is that no two bus masters can assert a Start condition at the exact  same  time.  Therefore,  one  master will  always  assert  SDA  before  the  other. This  condition  does  not  cause  a  bus collision because the two masters must be allowed to arbitrate the first address following the Start condition. If the address is the same, arbitration must be allowed to continue  into  the  data  portion,  Repeated Start or Stop conditions.",
    "16.4.17.2 Bus Collision During a Repeated Start Condition\nDuring  a  Repeated  Start  condition,  a  bus  collision occurs if:\na) A low level is sampled on SDA when SCL goes from low level to high level.\nb) SCL  goes  low  before  SDA  is  asserted  low, indicating  that  another master is attempting to transmit a data ' 1 '.\nWhen the user deasserts SDA and the pin is allowed to float high, the BRG is loaded with SSPADD<6:0> and counts down to 0. The SCL pin is then deasserted and when sampled high, the SDA pin is sampled.\nIf SDA is low, a bus collision has occurred (i.e., another master is attempting to transmit a data ' 0 ', Figure 16-29). If SDA is sampled high, the BRG is reloaded and begins counting. If SDA goes from high-to-low before the BRG times  out,  no  bus  collision  occurs  because  no  two masters can assert SDA at exactly the same time.",
    "16.4.17.2 Bus Collision During a Repeated Start Condition\nIf SCL goes from high-to-low before the BRG times out and SDA has not already been asserted, a bus collision occurs.  In  this  case,  another  master  is  attempting  to transmit a data ' 1 ' during the Repeated Start condition, see Figure 16-30.\nIf, at the end of the BRG time-out, both SCL and SDA are still high, the SDA pin is driven low and the BRG is reloaded and begins counting. At the end of the count, regardless of the status of the SCL pin, the SCL pin is driven low and the Repeated Start condition is complete.",
    "FIGURE 16-29: BUS COLLISION DURING A REPEATED START CONDITION (CASE 1)\nFIGURE 16-30:\nBUS COLLISION DURING REPEATED START CONDITION (CASE 2)",
    "16.4.17.3 Bus Collision During a Stop Condition\nBus collision occurs during a Stop condition if:\na) After  the  SDA  pin  has  been  deasserted  and allowed to float high, SDA is sampled low after the BRG has timed out.\nb) After the SCL pin is deasserted, SCL is sampled low before SDA goes high.",
    "PIC18F2X1X/4X1X\nThe  Stop  condition  begins  with  SDA  asserted  low. When SDA is sampled low, the SCL pin is allowed to float. When the pin is sampled high (clock arbitration), the Baud Rate Generator is loaded with SSPADD<6:0> and counts down to 0. After the BRG times out, SDA is sampled. If  SDA is  sampled low, a bus collision has occurred. This is due to another master attempting to drive  a  data  ' 0 ' (Figure 16-31).  If  the  SCL  pin  is sampled low before SDA is allowed to float high, a bus collision occurs. This is another case of another master attempting to drive a data ' 0 ' (Figure 16-32).",
    "FIGURE 16-31: BUS COLLISION DURING A STOP CONDITION (CASE 1)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nSDA asserted low\nSDA sampled low after TBRG, set BCLIF\n' 0 '\n'\n0\n'",
    "FIGURE 16-32: BUS COLLISION DURING A STOP CONDITION (CASE 2)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nAssert SDA\nSCL goes low before SDA goes high, set BCLIF\n'\n0\n'\n' 0 '",
    "PIC18F2X1X/4X1X\nNOTES:",
    "17.0 ENHANCED UNIVERSAL SYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThe Enhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART) module is one of the two serial I/O modules. (Generically, the USART is also known as a Serial Communications Interface or SCI.) The  EUSART  can  be  configured  as  a  full-duplex asynchronous  system  that  can  communicate  with peripheral devices, such as CRT  terminals and personal computers. It can also be configured as a halfduplex  synchronous  system  that  can  communicate with peripheral devices, such as A/D or D/A integrated circuits, serial EEPROMs, etc.\nThe Enhanced USART module implements additional features, including automatic baud rate detection and calibration, automatic wake-up on Sync Break reception and 12-bit Break character transmit. These make it ideally suited for use in Local Interconnect Network bus (LIN bus) systems.\nThe  EUSART  can  be  configured  in  the  following modes:",
    "17.0 ENHANCED UNIVERSAL SYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\n\u00b7 Asynchronous (full duplex) with:\n-Auto-wake-up on character reception\n-Auto-baud calibration\n-12-bit Break character transmission\n\u00b7 Synchronous - Master (half duplex) with selectable clock polarity\n\u00b7 Synchronous - Slave (half duplex) with selectable clock polarity",
    "PIC18F2X1X/4X1X\nThe pins of the Enhanced USART are multiplexed with PORTC.  In  order  to  configure  RC6/TX/CK  and RC7/RX/DT as a USART:\n\u00b7 bit SPEN (RCSTA<7>) must be set (= 1 )\n\u00b7 bit TRISC<7> must be set (= 1 )\n\u00b7 bit TRISC<6> must be set (= 1 )\nNote:\nThe  EUSART  control  will  automatically reconfigure the pin from input to output as needed.\nThe  operation  of  the  Enhanced  USART  module  is controlled through three registers:\n\u00b7 Transmit Status and Control (TXSTA)\n\u00b7 Receive Status and Control (RCSTA)\n\u00b7 Baud Rate Control (BAUDCON)\nThese are detailed on the following pages in Register 17-1, Register 17-2 and Register 17-3, respectively.",
    "TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R-1. R/W-0, 7 = R/W-0. CSRC, 1 = TX9. CSRC, 2 = TXEN. CSRC, 3 = SYNC. CSRC, 4 = SENDB. CSRC, 5 = BRGH. CSRC, 6 = TRMT. CSRC, 7 = TX9D\nbit 7\nbit 0",
    "bit 7 CSRC: Clock Source Select bit\nAsynchronous mode:\nDon't care.\nSynchronous mode:\n1 = Master mode (clock generated internally from BRG)\n0 = Slave mode (clock from external source)",
    "bit 6 TX9: 9-bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission",
    "bit 5 TXEN: Transmit Enable bit\n1 = Transmit enabled\n0 = Transmit disabled\nNote:\nSREN/CREN overrides TXEN in Sync mode.",
    "bit 4 SYNC: EUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode\nSENDB: Send Break Character bit\nAsynchronous mode:\n1 = Send Sync Break on next transmission (cleared by hardware upon completion)\n0 = Sync Break transmission completed\nSynchronous mode:\nDon't care.",
    "bit 2 BRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.\nTRMT:\nTransmit Shift Register Status bit\n1 = TSR empty\n0 = TSR full",
    "bit 0 TX9D: 9th bit of Transmit Data\nCan be address/data bit or a parity bit.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 3\nbit 1",
    "REGISTER 17-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-x. SPEN, 1 = RX9. SPEN, 2 = SREN. SPEN, 3 = CREN. SPEN, 4 = ADDEN. SPEN, 5 = FERR. SPEN, 6 = OERR. SPEN, 7 = RX9D\nbit 7\nbit 0",
    "bit 7 SPEN: Serial Port Enable bit\n1 = Serial port enabled (configures RX/DT and TX/CK pins as serial port pins)\n0 = Serial port disabled (held in Reset)",
    "bit 6 RX9: 9-bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN: Single Receive Enable bit\nAsynchronous mode:\nDon't care.",
    "Synchronous mode - Master:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode - Slave:\nDon't care.",
    "bit 4 CREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver",
    "Synchronous mode:\n1 = Enables continuous receive until enable bit CREN is cleared (CREN overrides SREN)\n0 = Disables continuous receive",
    "bit 3 ADDEN: Address Detect Enable bit\nAsynchronous mode 9-bit (RX9 = 1 ):\n1 = Enables address detection, enables interrupt and loads the receive buffer when RSR<8> is set\n0 = Disables address detection, all bytes are received and ninth bit can be used as parity bit",
    "Asynchronous mode 9-bit (RX9 = 0 ):\nDon't care.",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be updated by reading RCREG register and receiving next valid byte)\n0 = No framing error",
    "bit 1 OERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit CREN)\n0 = No overrun error",
    "bit 0 RX9D:\n9th bit of Received Data\nThis can be address/data bit or a parity bit and must be calculated by user firmware.\n-n = Value at POR, W=Writable bit = '1' = Bit is set. -n = Value at POR, U = Unimplemented bit, read = '0' = Bit is cleared. -n = Value at POR, as '0' = x = Bit is unknown",
    "BAUDCON: BAUD RATE CONTROL REGISTER\nR/W-0, 1 = R-1. R/W-0, 2 = U-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = U-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. ABDOVF, 1 = RCIDL. ABDOVF, 2 = -. ABDOVF, 3 = SCKP. ABDOVF, 4 = BRG16. ABDOVF, 5 = -. ABDOVF, 6 = WUE. ABDOVF, 7 = ABDEN\nbit 7\nbit 0",
    "bit 7 ABDOVF : Auto-Baud Acquisition Rollover Status bit\n1 A BRG rollover has occurred during Auto-Baud Rate Detect mode\n= (must be cleared in software)\n0 = No BRG rollover has occurred\nRCIDL : Receive Operation Idle Status bit\n1 = Receive operation is Idle\n0 = Receive operation is active",
    "bit 4 SCKP : Synchronous Clock Polarity Select bit\nAsynchronous mode:\nUnused in this mode.",
    "Synchronous mode:\n1 = Idle state for clock (CK) is a high level\n0 = Idle state for clock (CK) is a low level\nbit 3 BRG16: 16-bit Baud Rate Register Enable bit\n1 = 16-bit Baud Rate Generator - SPBRGH and SPBRG\n0 = 8-bit Baud Rate Generator - SPBRG only (Compatible mode), SPBRGH value ignored",
    "Asynchronous mode:\n1 = EUSART will continue to sample the RX pin -  interrupt generated on falling edge; bit cleared in hardware on following rising edge\n0 = RX pin not monitored or rising edge detected\nSynchronous mode:\nUnused in this mode.",
    "bit 0 ABDEN : Auto-Baud Detect Enable bit\nAsynchronous mode:\n1 = Enable baud rate measurement on the next character. Requires reception of a Sync field (55h); cleared in hardware upon completion\n0 = Baud rate measurement disabled or completed\nSynchronous mode:\nUnused in this mode.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 6",
    "17.1 Baud Rate Generator (BRG)\nThe BRG is a dedicated 8-bit or 16-bit generator that supports  both  the  Asynchronous  and  Synchronous modes of the EUSART. By default, the BRG operates in 8-Bit mode; setting the BRG16 bit (BAUDCON<3>) selects 16-Bit mode.\nThe SPBRGH:SPBRG register pair controls the period of  a  free  running  timer.  In  Asynchronous  mode,  bits BRGH (TXSTA<2>) and BRG16 (BAUDCON<3>) also control the baud rate. In Synchronous mode, BRGH is ignored. Table 17-1 shows the formula for computation of  the  baud  rate  for  different  EUSART  modes  which only apply in Master mode (internally generated clock).",
    "17.1 Baud Rate Generator (BRG)\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRGH:SPBRG registers can be calculated using the formulas in Table 17-1. From this, the error in baud rate can be determined. An example calculation  is  shown  in  Example 17-1.  Typical  baud rates  and  error  values  for  the  various  Asynchronous modes are shown in Table 17-2. It may be advantageous to use the high baud rate (BRGH = 1 ) or the  16-bit  BRG  to  reduce  the  baud  rate  error,  or achieve a slow baud rate for a fast oscillator frequency.\nWriting a new value to the SPBRGH:SPBRG registers causes  the  BRG timer to be reset (or  cleared).  This ensures  the  BRG does not wait  for  a  timer  overflow before outputting the new baud rate.",
    "17.1.1 OPERATION IN POWER-MANAGED MODES\nThe device clock is used to generate the desired baud rate.  When  one  of  the  power-managed  modes  is entered, the new clock source may be operating at a different frequency. This may require an adjustment to the value in the SPBRG register pair.",
    "17.1.2 SAMPLING\nThe data on the RX pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RX pin.",
    "TABLE 17-1: BAUD RATE FORMULAS\n0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[64 (n + 1)]. 0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 1. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 1. 0,",
    "TABLE 17-1: BAUD RATE FORMULAS\nBRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 0. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 1. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]\nLegend: x = Don't care, n = value of SPBRGH:SPBRG register pair",
    "EXAMPLE 17-1: CALCULATING BAUD RATE ERROR\nFor a device with FOSC of 16 MHz, desired baud rate of 9600, Asynchronous mode, 8-bit BRG:\nDesired Baud Rate = FOSC/(64 ([SPBRGH:SPBRG] + 1))\nSolving for SPBRGH:SPBRG:\nX\n= ((FOSC/Desired Baud Rate)/64) - 1\n= ((16000000/9600)/64) - 1\n= [25.042] = 25\nCalculated Baud Rate\n= 16000000/(64 (25 + 1))\n= 9615\nError\n= (Calculated Baud Rate - Desired Baud Rate)/Desired Baud Rate\n= (9615 - 9600)/9600 = 0.16%",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nTXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP. BAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON,",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nBit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the BRG.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 1.221. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n64. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 , BRG16",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 31. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 15. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K)",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 9615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 15. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n-. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 52.083. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -9.58. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 104.167. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -9.58. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 115.2, SYNC = 0 , BRGH = 0",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 78.125. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -32.18. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 0.3, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 1.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1201.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 2.4, SYNC",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 8.929. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -6.99. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 6. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 20.833. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 2. 19.2, SYNC = 0 , BRGH",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -45.75. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n8.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.615.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 19230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 21. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 55555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 1",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nRate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 1041. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200. 1.2,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nSYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 520. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 40.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.399. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 259. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 259. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 129.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19230. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nRate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 21. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 55555. 57.6,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nSYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 415. 0.3, SYNC = 0 , BRGH = 0 , BRG16",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 1.FOSC = 1.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K)",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 1201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n4.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 33332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.00.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 16665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 300.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 6665. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 8332.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 2.400.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 4165. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 2082.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 832. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.606. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.596. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal)",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 259. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.193. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -0.03.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 520. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 259. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 19.231.",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 103. 57.6,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nSYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 57.803. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.35. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 172. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 57.471. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.22. 57.6, SYNC",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 86. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 57142. 57.6, SYNC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 0.79. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 34. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 114.943. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -0.22. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 86. 115.2, SYNC = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 116.279. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.94. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 42. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 117647. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -2.12. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 16",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.04. 0.3,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nSYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 1665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 415. 1.2, SYNC = 0 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 1",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n, BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2403. 2.4, SYNC = 0 , BRGH = 1 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 103. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 9.6, SYNC = 0 , BRGH = 1 ,",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 9615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 19230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nSYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 19230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 12. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n, BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 58.824. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 2.12. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 16. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 55555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 8. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 111.111. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 4.000 MHz.% Error = -3.55. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC =",
    "TABLE 17-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "17.1.3 AUTO-BAUD RATE DETECT\nThe Enhanced USART module supports the automatic detection and calibration of baud rate. This feature is active only in Asynchronous mode and while the WUE bit is clear.\nThe  automatic  baud  rate  measurement  sequence (Figure 17-1) begins whenever a Start bit is received and the ABDEN  bit is set. The calculation is self-averaging.\nIn the Auto-Baud Rate Detect (ABD) mode, the clock to the BRG is reversed. Rather than the BRG clocking the incoming RX signal, the RX signal is timing the BRG. In ABD mode, the internal Baud Rate Generator is used as a counter to time the bit period of the incoming serial byte stream.",
    "17.1.3 AUTO-BAUD RATE DETECT\nOnce the ABDEN bit is set, the state machine will clear the BRG and look for a Start bit. The Auto-Baud Rate Detect must receive a byte with the value 55h (ASCII 'U', which is also the LIN bus Sync character) in order to calculate the proper bit rate. The measurement is taken over both a low and a high bit time in order to minimize any effects caused by asymmetry of the incoming signal. After a Start bit, the SPBRG begins counting up, using the preselected clock source on the first rising edge of RX. After eight bits on the RX pin or the fifth rising edge, an accumulated value totalling the proper BRG period is left in the SPBRGH:SPBRG register pair. Once the 5th edge is seen (this should correspond to the Stop bit), the ABDEN bit is automatically cleared.",
    "17.1.3 AUTO-BAUD RATE DETECT\nIf a rollover of the BRG occurs (an overflow from FFFFh to 0000h), the event is trapped by the ABDOVF status bit (BAUDCON<7>). It is set in hardware by BRG rollovers and can be set or cleared by the user in software. ABD mode remains active after rollover events and the ABDEN bit remains set (Figure 17-2).\nWhile  calibrating the baud  rate  period, the BRG registers are clocked at 1/8th the preconfigured clock rate. Note that the BRG clock will be configured by the BRG16 and BRGH bits. Independent of the BRG16 bit setting, both the SPBRG and SPBRGH will be used as a 16-bit counter. This allows the user to verify that no carry occurred for 8-Bit modes by checking for 00h in the SPBRGH register. Refer to Table 17-4 for counter clock rates to the BRG.",
    "17.1.3 AUTO-BAUD RATE DETECT\nWhile  the  ABD  sequence  takes  place,  the  EUSART state machine is held in Idle. The RCIF interrupt is set once the fifth rising edge on RX is detected. The value in  the  RCREG  needs  to  be  read  to  clear  the  RCIF interrupt. The contents of RCREG should be discarded.\nNote 1: If the WUE bit is set with the ABDEN bit, Auto-Baud Rate Detection will occur  on the byte following the Break character.\n2: It  is  up  to  the  user  to  determine  that  the incoming character baud rate is within the range of the selected BRG clock source. Some combinations of oscillator frequency and EUSART baud rates are not possible due  to  bit  error  rates.  Overall  system timing and  communication  baud  rates must  be  taken  into  consideration  when using the Auto-Baud Rate Detection feature.",
    "TABLE 17-4: BRG COUNTER CLOCK RATES\n0, BRGH = 0. 0, BRG Counter Clock = FOSC/512. 0, BRGH = 1. 0, BRG Counter Clock = FOSC/128. 1, BRGH = 0. 1, BRG Counter Clock = FOSC/128. 1, BRGH = 1. 1, BRG Counter Clock = FOSC/32\nNote:\nDuring  the  ABD  sequence,  SPBRG  and SPBRGH  are  both  used  as  a  16-bit counter, independent of BRG16 setting.",
    "17.1.3.1 ABD and EUSART Transmission\nSince the BRG clock is reversed during ABD acquisition,  the  EUSART transmitter cannot be used during ABD. This means that whenever the ABDEN bit is set, TXREG cannot be written to. Users should also ensure that  ABDEN  does  not  become  set  during  a  transmit sequence. Failing to do this may result in unpredictable EUSART operation.",
    "FIGURE 17-1: AUTOMATIC BAUD RATE CALCULATION\nBRG Value, 1 = XXXXh. BRG Value, 2 = 0000h. BRG Value, 3 = 001Ch. RX pin, 1 = . RX pin, 2 = Bit 0 Bit 1 Start Bit 2 Bit 3 Bit 4 Bit 5 Bit 6. RX pin, 3 = Stop Bit. BRG Clock, 1 = by User. BRG Clock, 2 = . BRG Clock, 3 = Auto-Cleared. ABDEN bit, 1 = . ABDEN bit, 2 = . ABDEN bit, 3 = . RCIF bit (Interrupt), 1 = . RCIF bit (Interrupt), 2 = . RCIF bit (Interrupt), 3 = . Read RCREG, 1 = . Read RCREG, 2 = . Read RCREG, 3 = . SPBRG SPBRGH, 1 = . SPBRG SPBRGH, 2 = XXXXh XXXXh. SPBRG SPBRGH, 3 = 1Ch 00h",
    "FIGURE 17-2: BRG OVERFLOW SEQUENCE\nStart\nBit 0\nXXXXh\n0000h\n0000h\nFFFFh\nBRG Clock\nABDEN bit\nRX pin\nABDOVF bit\nBRG Value",
    "17.2 EUSART Asynchronous Mode\nThe  Asynchronous  mode  of  operation  is  selected  by clearing  the  SYNC  bit  (TXSTA<4>).  In  this  mode,  the EUSART  uses  standard Non-Return-to-Zero (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip dedicated 8-bit/16-bit Baud Rate Generator can be used to derive  standard  baud  rate  frequencies  from  the oscillator.\nThe EUSART transmits and receives the LSb first. The EUSART's  transmitter  and  receiver  are  functionally independent but use the same data format and baud rate. The Baud Rate Generator produces a clock, either x16 or x64 of the bit shift rate depending on the BRGH and BRG16 bits (TXSTA<2> and BAUDCON<3>). Parity is not supported by the hardware but can be implemented in software and stored as the 9th data bit.\nWhen operating in Asynchronous mode, the EUSART module consists of the following important elements:",
    "17.2 EUSART Asynchronous Mode\n\u00b7 Baud Rate Generator\n\u00b7 Sampling Circuit\n\u00b7 Asynchronous Transmitter\n\u00b7 Asynchronous Receiver\n\u00b7 Auto-Wake-up on Sync Break Character\n\u00b7 12-bit Break Character Transmit\n\u00b7 Auto-Baud Rate Detection",
    "17.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nOnce the TXREG register transfers the data to the TSR register (occurs in one T CY), the TXREG register is empty and the TXIF flag bit (PIR1<4>) is set. This interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TXIE (PIE1<4>). TXIF will be set regardless of the state of TXIE; it cannot be cleared in software. TXIF is also not cleared immediately upon loading TXREG, but becomes valid in the second instruction cycle following the load instruction. Polling TXIF immediately following a load of TXREG will return invalid results.\nWhile TXIF indicates the status of the TXREG register, another bit,  TRMT (TXSTA<1>), shows the  status of the TSR register. TRMT is a read-only bit which is set when the TSR register is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine if the TSR register is empty.",
    "17.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag bit TXIF is set when enable bit TXEN is set.\nTo set up an Asynchronous Transmission:\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit SYNC and setting bit SPEN.\n3. If interrupts are desired, set enable bit TXIE.\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 17-3. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG.  The  TXREG  register  is  loaded  with  data  in software. The TSR register is not loaded until the Stop bit  has  been  transmitted  from  the  previous  load.  As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG register (if available).",
    "17.2.1 EUSART ASYNCHRONOUS TRANSMITTER\n4. If  9-bit  transmission is desired, set transmit bit TX9. Can be used as address/data bit.\n5. Enable  the  transmission  by  setting  bit  TXEN which will also set bit TXIF.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit TX9D.\n7. Load data to the TXREG  register (starts transmission).\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 17-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend: - = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous transmission.\n- Note 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "17.2.2 EUSART ASYNCHRONOUS RECEIVER\nThe receiver block diagram is  shown in Figure 17-6. The data is received on the RX pin and drives the data recovery block. The data recovery block is actually a high-speed shifter operating at x16 times the baud rate, whereas the main receive serial shifter operates at the bit rate or at FOSC. This mode would typically be used in RS-232 systems.\nTo set up an Asynchronous Reception:",
    "17.2.2 EUSART ASYNCHRONOUS RECEIVER\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit SYNC and setting bit SPEN.\n3. If interrupts are desired, set enable bit RCIE.\n4. If 9-bit reception is desired, set bit RX9.\n5. Enable the reception by setting bit CREN.\n6. Flag  bit  RCIF  will  be  set  when  reception  is complete and an interrupt will  be  generated  if enable bit RCIE was set.\n7. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG register.\n9. If any error occurred, clear the error by clearing enable bit CREN.",
    "17.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThis mode would typically be used in RS-485 systems. To  set  up  an  Asynchronous  Reception  with  Address Detect Enable:",
    "17.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If interrupts are required, set the RCEN bit and select the desired priority level with the RCIP bit.\n4. Set the RX9 bit to enable 9-bit reception.\n5. Set the ADDEN bit to enable address detect.\n6. Enable reception by setting the CREN bit.\n7. The  RCIF  bit  will  be  set  when  reception  is complete. The interrupt will be Acknowledged if the RCIE and GIE bits are set.\n8. Read the  RCSTA  register  to  determine  if  any error occurred during reception, as well as read bit 9 of data (if applicable).\n9. Read RCREG to determine if the device is being addressed.\n10. If any error occurred, clear the CREN bit.",
    "17.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n11. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "ASYNCHRONOUS RECEPTION\nRX (pin), 1 = Start bit bit 1 bit 0 bit 7/8. RX (pin), 2 = bit 0 Stop bit Start bit bit 7/8. Rcv Buffer Reg Rcv Shift Reg, 1 = . Rcv Buffer Reg Rcv Shift Reg, 2 = Word 1 Word 2 RCREG. Read Rcv Buffer Reg RCREG, 1 = RCREG. Read Rcv Buffer Reg RCREG, 2 = . RCIF (Interrupt Flag), 1 = . RCIF (Interrupt Flag), 2 = . OERR bit CREN, 1 = . OERR bit CREN, 2 = . Note: the, 1 = This timing diagram shows three words appearing on the RXinput. The OERR (overrun) bit to be set.. Note: the, 2 = RCREG(receive buffer) is read after the third word causing",
    "TABLE 17-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous reception.\n- Note 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "17.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nDuring  Sleep  mode,  all  clocks  to  the  EUSART  are suspended. Because of this, the Baud Rate Generator is inactive and a proper byte reception cannot be performed. The auto-wake-up feature allows the controller to wake-up due to activity on the RX/DT line while the EUSART is operating in Asynchronous mode.\nThe  auto-wake-up  feature  is  enabled  by  setting  the WUE bit (BAUDCON<1>). Once set, the typical receive sequence  on  RX/DT  is  disabled  and  the  EUSART remains in an Idle state, monitoring for a wake-up event independent of the CPU mode. A wake-up event consists of a high-to-low transition on the RX/DT line. (This coincides with the start of a Sync Break or a Wake-up Signal character for the LIN protocol.)",
    "17.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nFollowing a wake-up event, the module generates an RCIF  interrupt.  The  interrupt  is  generated  synchronously  to  the  Q  clocks  in  normal  operating  modes (Figure 17-8)  and  asynchronously,  if  the  device  is  in Sleep  mode  (Figure 17-9).  The  interrupt  condition  is cleared by reading the RCREG register.\nThe WUE bit is automatically cleared once a low-to-high transition is observed on the RX line following the wakeup event. At this point, the EUSART module is in Idle mode and returns to normal operation. This signals to the user that the Sync Break event is over.",
    "17.2.4.1 Special Considerations Using Auto-Wake-up\ncharacter and cause data or framing errors. To work properly, therefore, the initial character in the transmission  must  be  all  ' 0 's.  This  can  be  00h  (8  bytes)  for standard RS-232 devices or 000h (12 bits) for LIN bus.\nOscillator start-up time must  also  be  considered, especially in applications using oscillators with longer start-up  intervals  (i.e.,  XT  or  HS  mode).  The  Sync Break  (or  Wake-up  Signal)  character  must  be  of sufficient length and be followed by a sufficient interval to allow enough time for the selected oscillator to start and provide proper initialization of the EUSART.",
    "17.2.4.2 Special Considerations Using the WUE Bit\nThe timing of WUE and RCIF events may cause some confusion when it comes to determining the validity of received data. As noted, setting the WUE bit places the EUSART in an Idle mode. The wake-up event causes a receive interrupt by setting the RCIF bit. The WUE bit is  cleared  after  this  when  a  rising edge  is seen  on RX/DT.  The  interrupt  condition  is  then  cleared  by reading the RCREG register. Ordinarily, the data in RCREG  will be dummy data and should be discarded.\nThe fact that the WUE bit has been cleared (or is still set) and the RCIF flag is set should not be used as an indicator of the integrity of the data in RCREG. Users should  consider  implementing  a  parallel  method  in firmware to verify received data integrity.\nSince auto-wake-up functions by sensing rising edge transitions on RX/DT, information with any state changes before the Stop bit may signal a false end-of-",
    "17.2.4.2 Special Considerations Using the WUE Bit\nTo assure that no actual data is lost, check the RCIDL bit to verify that a receive operation is not in process. If a receive operation is not occurring, the WUE bit may then be set just prior to entering the Sleep mode.",
    "FIGURE 17-9: AUTO-WAKE-UP BIT (WUE) TIMINGS DURING SLEEP\nNote 1: If the wake-up event requires long oscillator warm-up time, the auto-clear of the WUE bit can occur before the oscillator is ready. This sequence should not depend on the presence of Q clocks.\n- 2: The EUSART remains in Idle while the WUE bit is set.",
    "17.2.5 BREAK CHARACTER SEQUENCE\nThe EUSART module has the capability of sending the special Break character sequences that are required by the  LIN  bus  standard.  The  Break  character  transmit consists of a Start bit, followed by twelve ' 0 ' bits and a Stop bit. The frame Break character is sent whenever the SENDB and TXEN bits (TXSTA<3> and TXSTA<5>) are set while the Transmit Shift register is loaded with data. Note that the value of data written to TXREG will be ignored and all ' 0 's will be transmitted.\nThe SENDB bit is automatically reset by hardware after the corresponding Stop bit is sent. This allows the user to preload the transmit FIFO with the next transmit byte following the Break  character  (typically, the Sync character in the LIN specification).\nNote that the data value written to the TXREG for the Break character is ignored. The write simply serves the purpose of initiating the proper sequence.\nThe TRMT bit indicates when the transmit operation is active or Idle, just as it does during normal transmission.  See  Figure 17-10  for  the  timing  of  the  Break character sequence.",
    "17.2.5.1 Break and Sync Transmit Sequence\nThe  following  sequence  will  send  a  message  frame header made up of a Break, followed by an Auto-Baud Sync  byte.  This  sequence  is  typical  of  a  LIN  bus master.\n1. Configure the EUSART for the desired mode.\n2. Set  the  TXEN  and  SENDB  bits  to  set  up  the Break character.\n3. Load  the  TXREG  with  a  dummy  character  to initiate transmission (the value is ignored).\n4. Write '55h' to TXREG to load the Sync character into the transmit FIFO buffer.\n5. After the Break has been sent, the SENDB bit is reset  by  hardware.  The  Sync  character  now transmits in the preconfigured mode.\nWhen the TXREG becomes empty, as indicated by the TXIF, the next data byte can be written to TXREG.",
    "17.2.6 RECEIVING A BREAK CHARACTER\nThe  Enhanced  USART  module can  receive  a  Break character in two ways.\nThe first method forces configuration of the baud rate at a frequency of 9/13 the typical speed. This allows for the  Stop  bit  transition  to  be  at  the  correct  sampling location (13 bits for Break versus Start bit and 8 data bits for typical data).\nThe  second  method  uses  the  auto-wake-up  feature described in Section 17.2.4 'Auto-Wake-up on Sync Break  Character' . By enabling this feature, the EUSART will sample the next two transitions on RX/DT, cause an RCIF interrupt and receive the next data byte followed by another interrupt.\nNote  that  following  a  Break  character,  the  user  will typically  want  to  enable  the  Auto-Baud  Rate  Detect feature. For both methods, the user can set the ABD bit once the TXIF interrupt is observed.",
    "17.3 EUSART Synchronous Master Mode\nThe Synchronous Master mode is entered by setting the CSRC bit (TXSTA<7>). In this mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting  data,  the  reception  is  inhibited  and  vice versa.  Synchronous  mode  is  entered  by  setting  bit SYNC  (TXSTA<4>).  In  addition,  enable  bit  SPEN (RCSTA<7>) is set in order to configure the TX and RX pins to CK (clock) and DT (data) lines, respectively.\nThe Master mode indicates that the processor transmits the master clock on the CK line. Clock polarity is selected  with  the  SCKP  bit  (BAUDCON<4>);  setting SCKP sets the Idle state on CK as high, while clearing the bit sets the Idle state as low. This option is provided to support Microwire devices with this module.",
    "17.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\nOnce the TXREG register transfers the data to the TSR register (occurs in one TCY), the TXREG is empty and the TXIF flag bit (PIR1<4>) is set. The interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TXIE (PIE1<4>). TXIF is set regardless of the  state  of  enable  bit  TXIE;  it  cannot  be  cleared  in software. It will reset only when new data is loaded into the TXREG register.\nWhile flag bit TXIF indicates the status of the TXREG register,  another  bit,  TRMT  (TXSTA<1>),  shows  the status of the TSR register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TSR  is  not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Master Transmission:",
    "17.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\n- 1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit, as required, to achieve the desired baud rate.\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 17-3. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG.  The  TXREG  register  is  loaded  with  data  in software. The TSR register is not loaded until the last bit  has  been  transmitted  from  the  previous  load.  As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG (if available).",
    "17.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\n2. Enable  the  synchronous  master  serial  port  by setting bits SYNC, SPEN and CSRC.\n3. If interrupts are desired, set enable bit TXIE.\n4. If 9-bit transmission is desired, set bit TX9.\n5. Enable the transmission by setting bit TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 17-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend: - = unimplemented, read as ' 0\n'. Shaded cells are not used for synchronous master transmission.\n- Note 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "17.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either the Single Receive Enable bit, SREN  (RCSTA<5>), or the Continuous Receive Enable bit, CREN (RCSTA<4>). Data is sampled on the RX pin on the falling edge of the clock.\nIf enable bit SREN is set, only a single word is received. If enable bit CREN is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Master Reception:",
    "17.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n1. Initialize  the  SPBRGH:SPBRG registers for the appropriate baud rate. Set or  clear the BRG16 bit, as required, to achieve the desired baud rate.\n3. Ensure bits CREN and SREN are clear.\n4. If interrupts are desired, set enable bit RCIE.\n5. If 9-bit reception is desired, set bit RX9.\n6. If  a  single reception is required, set bit SREN. For continuous reception, set bit CREN.\n7. Interrupt flag bit RCIF will be set when reception is complete and an interrupt will be generated if the enable bit RCIE was set.\n8. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG register.\n10. If any error occurred, clear the error by clearing bit CREN.\n2. Enable  the  synchronous  master  serial  port  by setting bits SYNC, SPEN and CSRC.",
    "17.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n11. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 17-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master reception.\nNote 1: These bits are unimplemented on 28-pin devices and read as '\n- 0 '.",
    "17.4 EUSART Synchronous Slave Mode\nSynchronous  Slave  mode  is  entered  by  clearing  bit, CSRC  (TXSTA<7>).  This mode  differs from the Synchronous Master mode in that the shift clock is supplied externally at the CK pin (instead of being supplied internally  in  Master mode). This allows the device to transfer or receive data while in any low-power mode.",
    "17.4.1 EUSART SYNCHRONOUS SLAVE TRANSMIT\nThe operation of the Synchronous Master and Slave modes are identical, except in the case of the Sleep mode.\nIf  two  words  are  written  to  the  TXREG  and  then  the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The  second  word  will  remain  in  the  TXREG register.\nc) Flag bit TXIF will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG  register  will  transfer  the  second word to the TSR and flag bit TXIF will now be set.\ne) If enable bit TXIE is set, the interrupt will wake the chip from Sleep. If the global interrupt is enabled, the program will branch to the interrupt vector.",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nTXREG, Bit 7 = EUSART Transmit Register. TXREG, Bit 6 = EUSART Transmit Register. TXREG, Bit 5 = EUSART Transmit Register. TXREG, Bit 4 = EUSART Transmit Register. TXREG, Bit 3 = EUSART Transmit Register. TXREG, Bit 2 = EUSART Transmit Register. TXREG, Bit 1 = EUSART Transmit Register. TXREG, Bit 0 = EUSART Transmit Register. TXREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave transmission.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.\nTo set up a Synchronous Slave Transmission:",
    "TABLE 17-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n1. Enable  the  synchronous  slave  serial  port  by setting  bits  SYNC  and  SPEN  and  clearing  bit CSRC.\n2. Clear bits CREN and SREN.\n3. If interrupts are desired, set enable bit TXIE.\n4. If 9-bit transmission is desired, set bit TX9.\n5. Enable  the  transmission  by  setting  enable  bit TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit TX9D.\n7. Start transmission by loading data to the TXREGx register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "17.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\nThe operation of the Synchronous Master and Slave modes is identical, except in the case of Sleep, or any Idle  mode  and  bit  SREN,  which  is  a  'don't  care'  in Slave mode.\nIf  receive is enabled by setting the CREN bit prior to entering Sleep or any Idle mode, then a word may be received while in this low-power mode. Once the word is received, the RSR register will transfer the data to the RCREG register; if the RCIE enable bit is set, the interrupt generated will wake the chip from the low-power mode. If the global interrupt is enabled, the program will branch to the interrupt vector.\nTo set up a Synchronous Slave Reception:",
    "17.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\n1. Enable  the  synchronous  master  serial  port  by setting  bits  SYNC  and  SPEN  and  clearing  bit CSRC.\n2. If interrupts are desired, set enable bit RCIE.\n3. If 9-bit reception is desired, set bit RX9.\n4. To enable reception, set enable bit CREN.\n5. Flag  bit  RCIF  will  be  set  when  reception  is complete.  An  interrupt will be  generated  if enable bit RCIE was set.\n6. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n7. Read  the  8-bit  received  data  by  reading  the RCREG register.\n8. If any error occurred, clear the error by clearing bit CREN.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 17-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1,",
    "TABLE 17-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Reset Values on page = 53.",
    "TABLE 17-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nRCREG, Bit 7 = EUSART Receive Register. RCREG, Bit 6 = EUSART Receive Register. RCREG, Bit 5 = EUSART Receive Register. RCREG, Bit 4 = EUSART Receive Register. RCREG, Bit 3 = EUSART Receive Register. RCREG, Bit 2 = EUSART Receive Register. RCREG, Bit 1 = EUSART Receive Register. RCREG, Bit 0 = EUSART Receive Register. RCREG, Reset Values on page = 53. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = SENDB. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Reset Values on page = 53. BAUDCON, Bit 7 = ABDOVF. BAUDCON, Bit 6 = RCIDL. BAUDCON, Bit 5 = -. BAUDCON, Bit 4 = SCKP.",
    "TABLE 17-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBAUDCON, Bit 3 = BRG16. BAUDCON, Bit 2 = -. BAUDCON, Bit 1 = WUE. BAUDCON, Bit 0 = ABDEN. BAUDCON, Reset Values on page = 53. SPBRGH, Bit 7 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 6 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 5 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 4 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 3 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 2 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 1 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Bit 0 = EUSART Baud Rate Generator Register, High Byte. SPBRGH, Reset Values on page = 53. SPBRG, Bit 7 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 6 =",
    "TABLE 17-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nEUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 5 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 4 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 3 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 2 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 1 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Bit 0 = EUSART Baud Rate Generator Register, Low Byte. SPBRG, Reset Values on page = 53\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave reception.\nNote 1: These bits are unimplemented on 28-pin devices and read as ' 0 '.",
    "18.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nThe Analog-to-Digital (A/D) converter module has 10 inputs for the 28-pin devices and 13 for the 40/44-pin devices.  This  module  allows  conversion  of  an  analog input signal to a corresponding 10-bit digital number.\nThe module has five registers:\n\u00b7 A/D Result High Register (ADRESH)\n\u00b7 A/D Result Low Register (ADRESL)\n\u00b7 A/D Control Register 0 (ADCON0)\n\u00b7 A/D Control Register 1 (ADCON1)\n\u00b7 A/D Control Register 2 (ADCON2)",
    "REGISTER 18-1: ADCON0: A/D CONTROL REGISTER 0\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = CHS3. -, 3 = CHS2. -, 4 = CHS1. -, 5 = CHS0. -, 6 = GO/DONE. -, 7 = ADON\nbit 7\nbit 0\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5-2 CHS3:CHS0: Analog Channel Select bits\n0000 = Channel 0 (AN0)\n0001 = Channel 1 (AN1)\n0010 = Channel 2 (AN2)\n0011 = Channel 3 (AN3)\n0100 = Channel 4 (AN4)\n0101 = Channel 5 (AN5) (1,2)",
    "REGISTER 18-1: ADCON0: A/D CONTROL REGISTER 0\n0110 = Channel 6 (AN6) (1,2)\n0111 = Channel 7 (AN7) (1,2)\n1000 = Channel 8 (AN8)\n1001 = Channel 9 (AN9)\n1010 = Channel 10 (AN10)\n1011 = Channel 11 (AN11)\n1100 = Channel 12 (AN12\n1101 = Unimplemented (2)\n1110 = Unimplemented (2)\n1111 = Unimplemented (2)\nNote 1: These channels are not implemented on 28-pin devices.\n- 2: Performing a conversion on unimplemented channels will return a floating input measurement.",
    "bit 1 GO/DONE: A/D Conversion Status bit\nWhen ADON = 1 :\n1 = A/D conversion in progress\n0 = A/D Idle",
    "bit 0 ADON: A/D On bit\n1 = A/D converter module is enabled\n0 = A/D converter module is disabled",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nThe ADCON0 register, shown in Register 18-1, controls the operation of the A/D module. The ADCON1 register, shown in Register 18-2, configures the functions of the port pins. The ADCON2 register, shown  in  Register 18-3,  configures  the  A/D  clock source, programmed acquisition time and justification.",
    "ADCON1: A/D CONTROL REGISTER 1\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0 (1). U-0, 5 = R/W (1). U-0, 6 = R/W (1). U-0, 7 = R/W (1). -, 1 = -. -, 2 = VCFG1. -, 3 = VCFG0. -, 4 = PCFG3. -, 5 = PCFG2. -, 6 = PCFG1. -, 7 = PCFG0\nbit 7\nbit 0\nbit 7-6\nUnimplemented: Read as ' 0 '\nbit 5\nVCFG1: Voltage Reference Configuration bit (VREF- source)\n1 = VREF- (AN2)\n0 = VSS\nbit 4\nVCFG0: Voltage Reference Configuration bit (VREF+ source)\n1 = VREF+ (AN3)\n0 = VDD\nbit 3-0",
    "ADCON1: A/D CONTROL REGISTER 1\nPCFG3:PCFG0: A/D Port Configuration Control bits:",
    "ADCON1: A/D CONTROL REGISTER 1\n0000 (1), AN12 = A. 0000 (1), AN11 = A. 0000 (1), AN10 = A. 0000 (1), AN9 = A. 0000 (1), AN8 = A. 0000 (1), AN7 (2) = A. 0000 (1), AN6 (2) = A. 0000 (1), AN5 (2) = A. 0000 (1), AN4 = A. 0000 (1), AN3 = A. 0000 (1), AN2 = A. 0000 (1), AN1 = A. 0000 (1), AN0 = A. 0001, AN12 = A. 0001, AN11 = A. 0001, AN10 = A. 0001, AN9 = A. 0001, AN8 = A. 0001, AN7 (2) = A. 0001, AN6 (2) = A. 0001, AN5 (2) = A. 0001, AN4 = A. 0001, AN3 = A. 0001, AN2",
    "ADCON1: A/D CONTROL REGISTER 1\n= A. 0001, AN1 = A. 0001, AN0 = A. 0010, AN12 = A. 0010, AN11 = A. 0010, AN10 = A. 0010, AN9 = A. 0010, AN8 = A. 0010, AN7 (2) = A. 0010, AN6 (2) = A. 0010, AN5 (2) = A. 0010, AN4 = A. 0010, AN3 = A. 0010, AN2 = A. 0010, AN1 = A. 0010, AN0 = A. 0011, AN12 = D. 0011, AN11 = A. 0011, AN10 = A. 0011, AN9 = A. 0011, AN8 = A. 0011, AN7 (2) = A. 0011, AN6 (2) = A. 0011, AN5 (2) = A. 0011, AN4 = A. 0011, AN3 = A. 0011, AN2 = A. 0011, AN1 = A. 0011, AN0 = A.",
    "ADCON1: A/D CONTROL REGISTER 1\n0100, AN12 = D. 0100, AN11 = D. 0100, AN10 = A. 0100, AN9 = A. 0100, AN8 = A. 0100, AN7 (2) = A. 0100, AN6 (2) = A. 0100, AN5 (2) = A. 0100, AN4 = A. 0100, AN3 = A. 0100, AN2 = A. 0100, AN1 = A. 0100, AN0 = A. 0101, AN12 = D. 0101, AN11 = D. 0101, AN10 = D. 0101, AN9 = A. 0101, AN8 = A. 0101, AN7 (2) = A. 0101, AN6 (2) = A. 0101, AN5 (2) = A. 0101, AN4 = A. 0101, AN3 = A. 0101, AN2 = A. 0101, AN1 = A. 0101, AN0 = A. 0110, AN12 = D. 0110, AN11 = D. 0110,",
    "ADCON1: A/D CONTROL REGISTER 1\nAN10 = D. 0110, AN9 = D. 0110, AN8 = A. 0110, AN7 (2) = A. 0110, AN6 (2) = A. 0110, AN5 (2) = A. 0110, AN4 = A. 0110, AN3 = A. 0110, AN2 = A. 0110, AN1 = A. 0110, AN0 = A. 0111 (1), AN12 = D. 0111 (1), AN11 = D. 0111 (1), AN10 = D. 0111 (1), AN9 = D. 0111 (1), AN8 = D. 0111 (1), AN7 (2) = A. 0111 (1), AN6 (2) = A. 0111 (1), AN5 (2) = A. 0111 (1), AN4 = A. 0111 (1), AN3 = A. 0111 (1), AN2 = A. 0111 (1), AN1 = A. 0111 (1), AN0 = A.",
    "ADCON1: A/D CONTROL REGISTER 1\n1000, AN12 = D. 1000, AN11 = D. 1000, AN10 = D. 1000, AN9 = D. 1000, AN8 = D. 1000, AN7 (2) = D. 1000, AN6 (2) = A. 1000, AN5 (2) = A. 1000, AN4 = A. 1000, AN3 = A. 1000, AN2 = A. 1000, AN1 = A. 1000, AN0 = A. 1001, AN12 = D. 1001, AN11 = D. 1001, AN10 = D. 1001, AN9 = D. 1001, AN8 = D. 1001, AN7 (2) = D. 1001, AN6 (2) = D. 1001, AN5 (2) = A. 1001, AN4 = A. 1001, AN3 = A. 1001, AN2 = A. 1001, AN1 = A. 1001, AN0 = A. 1010, AN12 = D. 1010, AN11 = D. 1010, AN10 = D. 1010, AN9 = D.",
    "ADCON1: A/D CONTROL REGISTER 1\n1010, AN8 = D. 1010, AN7 (2) = D. 1010, AN6 (2) = D. 1010, AN5 (2) = D. 1010, AN4 = A. 1010, AN3 = A. 1010, AN2 = A. 1010, AN1 = A. 1010, AN0 = A. 1011, AN12 = D. 1011, AN11 = D. 1011, AN10 = D. 1011, AN9 = D. 1011, AN8 = D. 1011, AN7 (2) = D. 1011, AN6 (2) = D. 1011, AN5 (2) = D. 1011, AN4 = D. 1011, AN3 = A. 1011, AN2 = A. 1011, AN1 = A. 1011, AN0 = A. 1100, AN12 = D. 1100, AN11 = D. 1100, AN10 = D. 1100, AN9 = D. 1100, AN8 = D. 1100, AN7 (2) = D. 1100, AN6 (2)",
    "ADCON1: A/D CONTROL REGISTER 1\n= D. 1100, AN5 (2) = D. 1100, AN4 = D. 1100, AN3 = D. 1100, AN2 = A. 1100, AN1 = A. 1100, AN0 = A. 1101, AN12 = D. 1101, AN11 = D. 1101, AN10 = D. 1101, AN9 = D. 1101, AN8 = D. 1101, AN7 (2) = D. 1101, AN6 (2) = D. 1101, AN5 (2) = D. 1101, AN4 = D. 1101, AN3 = D. 1101, AN2 = D. 1101, AN1 = A. 1101, AN0 = A. 1110, AN12 = D. 1110, AN11 = D. 1110, AN10 = D. 1110, AN9 = D. 1110, AN8 = D. 1110, AN7 (2) = D. 1110, AN6 (2) = D. 1110, AN5 (2) = D. 1110, AN4 = D. 1110,",
    "ADCON1: A/D CONTROL REGISTER 1\nAN3 = D. 1110, AN2 = D. 1110, AN1 = D. 1110, AN0 = A. 1111, AN12 = D. 1111, AN11 = D. 1111, AN10 = D. 1111, AN9 = D. 1111, AN8 = D. 1111, AN7 (2) = D. 1111, AN6 (2) = D. 1111, AN5 (2) = D. 1111, AN4 = D. 1111, AN3 = D. 1111, AN2 = D. 1111, AN1 = D. 1111, AN0 = D\nA = Analog input\nD = Digital I/O\nNote 1: The POR value of the PCFG bits depends on the value of the PBADEN Configuration bit. When PBADEN = 1 , PCFG<3:0> = 0000 ; when PBADEN = 0 , PCFG<3:0> = 0111 .\n2: AN5 through AN7 are available only on 40/44-pin devices.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "ADCON2: A/D CONTROL REGISTER 2\nR/W-0, 1 = U-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. ADFM, 1 = -. ADFM, 2 = ACQT2. ADFM, 3 = ACQT1. ADFM, 4 = ACQT0. ADFM, 5 = ADCS2. ADFM, 6 = ADCS1. ADFM, 7 = ADCS0\nbit 7\nbit 0\nbit 7\nADFM: A/D Result Format Select bit\n1 = Right justified\n0 = Left justified\nbit 6 Unimplemented: Read as ' 0 '\nbit 5-3\nACQT2:ACQT0: A/D Acquisition Time Select bits\n111 = 20 TAD\n110 = 16 TAD\n101 = 12 TAD\n100 = 8 TAD\n011 = 6 TAD\n010 = 4 TAD",
    "ADCON2: A/D CONTROL REGISTER 2\n001 = 2 TAD\n000 = 0 TAD (1)",
    "bit 2-0 ADCS2:ADCS0: A/D Conversion Clock Select bits\n111 = FRC (clock derived from A/D RC oscillator) (1)\n110 = FOSC/64\n101 = FOSC/16\n100 = FOSC/4\n011 = FRC (clock derived from A/D RC oscillator) (1)\n010 = FOSC/32\n001 = FOSC/8\n000 = FOSC/2\nNote 1: If the A/D FRC clock source is selected, a delay of one TCY (instruction cycle) is added before the A/D clock starts. This allows the SLEEP instruction to be executed before starting a conversion.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "PIC18F2X1X/4X1X\nThe analog reference voltage is software selectable to  either  the  device's  positive  and  negative  supply voltage (VDD and VSS), or the voltage level on the RA3/AN3/VREF+ and RA2/AN2/VREF-/CVREF pins.\nThe A/D converter has a unique feature of being able to operate while the device is in Sleep mode. To operate in Sleep, the A/D conversion clock must be derived from the A/D's internal RC oscillator.\nThe output of the sample and hold is the input into the converter,  which  generates  the  result  via  successive approximation.\nA device Reset forces all registers to their Reset state. This forces the A/D module to be turned off and any conversion in progress is aborted.",
    "PIC18F2X1X/4X1X\nEach port pin associated with the A/D converter can be configured as an analog input, or as a digital I/O. The  ADRESH  and  ADRESL  registers  contain  the result of the A/D conversion. When the A/D conversion  is  complete,  the  result  is  loaded  into  the ADRESH:ADRESL  register  pair,  the  GO/DONE  bit (ADCON0 register) is cleared and A/D Interrupt Flag bit ADIF is set. The block diagram of the A/D module is shown in Figure 18-1.",
    "FIGURE 18-1: A/D BLOCK DIAGRAM\nThe  value  in  the  ADRESH:ADRESL  registers  is  not modified for a Power-on Reset. The ADRESH:ADRESL registers  will  contain  unknown  data  after  a  Power-on Reset.\nAfter the A/D module has been configured as desired, the selected channel must be acquired before the conversion  is  started.  The  analog  input  channels  must have  their  corresponding  TRIS  bits  selected  as  an input. To determine acquisition time, see Section 18.1 'A/D Acquisition Requirements' .  After this acquisition  time  has  elapsed,  the  A/D  conversion  can  be started.  An  acquisition  time  can  be  programmed  to occur between setting the GO/DONE bit and the actual start of the conversion.\nTo perform an A/D conversion, do the following steps:",
    "FIGURE 18-1: A/D BLOCK DIAGRAM\n1. Configure the A/D module:\n\u00b7 Configure analog pins, voltage reference and digital I/O (ADCON1)\n\u00b7 Select A/D input channel (ADCON0)\n\u00b7 Select A/D acquisition time (ADCON2)\n\u00b7 Select A/D conversion clock (ADCON2)\n\u00b7 Turn on A/D module (ADCON0)\n2. Configure A/D interrupt (if desired):\n\u00b7 Clear ADIF bit\n\u00b7 Set ADIE bit\n\u00b7 Set GIE bit\n3. Wait the required acquisition time (if required).\n4. Start conversion:\n\u00b7 Set GO/DONE bit (ADCON0 register)",
    "PIC18F2X1X/4X1X\n5. Wait for A/D conversion to complete, by either:\n\u00b7 Polling for the GO/DONE bit to be cleared\nOR\n\u00b7 Waiting for the A/D interrupt\n6. Read A/D Result registers (ADRESH:ADRESL); clear bit ADIF, if required.\n7. For next conversion, go to step 1 or step 2, as required.  The  A/D  conversion  time  per  bit  is defined  as  TAD.  A  minimum  wait  of  2  TAD  is required before the next acquisition starts.",
    "18.1 A/D Acquisition Requirements\nFor the A/D converter to meet its specified accuracy, the charge holding capacitor (CHOLD) must be allowed to fully charge to the input channel voltage level. The analog  input  model  is  shown  in  Figure 18-3.  The source  impedance  (RS)  and  the  internal  sampling switch (RSS) impedance directly affect the time required to charge the capacitor CHOLD. The sampling switch (RSS) impedance varies over the device voltage (VDD). The source impedance affects the offset voltage at the analog input (due to pin leakage current). The maximum  recommended  impedance  for  analog sources is 2.5 k \u03a9 .  After the analog input channel is selected (changed), the channel must be sampled for at least the minimum acquisition time before starting a conversion.\nNote:, 1 = When the conversion is started, the holding capacitor is disconnected from the input pin.",
    "EQUATION 18-1: ACQUISITION TIME\nTACQ, 1 = = Amplifier Settling Time + Holding Capacitor Charging Time + Temperature Coefficient. , 1 = = TAMP + TC + TCOFF",
    "EQUATION 18-2: A/D MINIMUM CHARGING TIME\nVHOLD or, 1 = =. VHOLD or, 2 = (VREF - (VREF/2048)) \u2022 (1 - e (-T C/CHOLD(RIC + RSS + RS)) ). TC, 1 = =. TC, 2 = -(CHOLD)(RIC + RSS + RS) ln(1/2048)",
    "EQUATION 18-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nTACQ = TAMP + TC + TCOFF\nTAMP = 0.2 \u03bc s\nTCOFF\n= (Temp - 25 C)(0.02 \u00b0 \u03bc s/ \u00b0 C)\n(85 C - 25 C)(0.02 \u00b0 \u00b0 \u03bc s/ \u00b0 C)\n1.2 \u03bc s\nTemperature coefficient is only required for temperatures > 25 C. Below 25 C, TCOFF = 0 ms. \u00b0 \u00b0\nTC =\n-(CHOLD)(RIC + RSS + RS) ln(1/2047)\n-(25 pF) (1 k \u03a9 + 2 k \u03a9 + 2.5 k \u03a9 ) ln(0.0004883)\n1.05 s\n\u03bc\nTACQ =\n0.2 \u03bc s + 1 \u03bc s + 1.2 \u03bc s\n2.4 \u03bc s\nTo calculate the minimum acquisition time, Equation 18-1  may be  used.  This  equation  assumes that 1/2 LSb error is used (1024 steps for the A/D). The 1/2 LSb error is the maximum error allowed for the A/D to meet its specified resolution.",
    "EQUATION 18-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nExample 18-3 shows the calculation  of  the  minimum required  acquisition  time  TACQ.  This  calculation  is based on the following application system assumptions:\nCHOLD\n= 25 pF\nRs\n= 2.5 k \u03a9\nConversion Error\n\u2264 1/2 LSb\nVDD\n= 5V \u2192 Rss = 2 k \u03a9\nTemperature\n= 85 C (system max.) \u00b0",
    "18.2 Selecting and Configuring Acquisition Time\nThe  ADCON2  register  allows  the  user  to  select  an acquisition time that occurs each time the GO/DONE bit  is  set.  It  also  gives  users  the  option  to  use  an automatically determined acquisition time.\nAcquisition time may be set with the ACQT2:ACQT0 bits  (ADCON2<5:3>), which provides a range of 2 to 20 TAD. When the GO/DONE bit is set, the A/D module continues to sample the input for the selected acquisition  time,  then  automatically  begins  a  conversion. Since the acquisition time is programmed, there may be  no  need  to  wait  for  an  acquisition  time  between selecting a channel and setting the GO/DONE bit.\nManual acquisition is selected when ACQT2:ACQT0 = 000 . When the GO/DONE bit is set, sampling is stopped and a conversion begins. The user is responsible for ensuring the required acquisition time has passed between selecting the desired input channel and setting  the  GO/DONE bit.  This  option  is  also  the default  Reset  state  of  the  ACQT2:ACQT0  bits  and  is compatible with devices that do not offer programmable acquisition times.",
    "18.3 Selecting the A/D Conversion Clock\nThe A/D conversion time per bit is defined as TAD. The A/D conversion requires 11 TAD per 10-bit conversion. The  source  of  the  A/D  conversion  clock  is  software selectable. There are seven possible options for TAD:\n\u00b7 2 TOSC\n\u00b7 4 TOSC\n\u00b7 8 TOSC\n\u00b7 16 TOSC\n\u00b7 32 TOSC\n\u00b7 64 TOSC\n\u00b7 Internal RC Oscillator\nFor correct A/D conversions, the A/D conversion clock (TAD) must be as short as possible, but greater than the minimum TAD (see parameter 130 for more information).\nTable 18-1 shows the resultant TAD times derived from the  device  operating  frequencies  and  the  A/D  clock source selected.\nIn either case, when the conversion is completed, the GO/DONE bit is cleared, the ADIF flag is set and the A/D  begins  sampling  the  currently  selected  channel again. If  an  acquisition  time  is  programmed,  there  is nothing to indicate if the acquisition time has ended or if the conversion has begun.",
    "TABLE 18-1: TAD vs. DEVICE OPERATING FREQUENCIES\n2 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 000. 2 TOSC, Maximum Device Frequency.PIC18FXXXX = 2.86 MHz. 2 TOSC, Maximum Device Frequency.PIC18LFXXXX (4) = 1.43 kHz. 4 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 100. 4 TOSC, Maximum Device Frequency.PIC18FXXXX = 5.71 MHz. 4 TOSC, Maximum Device Frequency.PIC18LFXXXX (4) = 2.86 MHz. 8 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 001. 8 TOSC, Maximum Device Frequency.PIC18FXXXX = 11.43 MHz. 8 TOSC, Maximum Device Frequency.PIC18LFXXXX (4) = 5.72 MHz. 16 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 101. 16 TOSC, Maximum Device Frequency.PIC18FXXXX = 22.86 MHz. 16 TOSC, Maximum Device Frequency.PIC18LFXXXX",
    "TABLE 18-1: TAD vs. DEVICE OPERATING FREQUENCIES\n(4) = 11.43 MHz. 32 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 010. 32 TOSC, Maximum Device Frequency.PIC18FXXXX = 40.0 MHz. 32 TOSC, Maximum Device Frequency.PIC18LFXXXX (4) = 22.86 MHz. 64 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 110. 64 TOSC, Maximum Device Frequency.PIC18FXXXX = 40.0 MHz. 64 TOSC, Maximum Device Frequency.PIC18LFXXXX (4) = 22.86 MHz. RC (3), AD Clock Source (T AD).ADCS2:ADCS0 = x11. RC (3), Maximum Device Frequency.PIC18FXXXX = 1.00 MHz (1). RC (3), Maximum Device Frequency.PIC18LFXXXX (4) = 1.00 MHz (2)\nNote",
    "TABLE 18-1: TAD vs. DEVICE OPERATING FREQUENCIES\n1: The RC source has a typical TAD time of 0.9 \u03bc s.\n2: The RC source has a typical TAD time of 1.2 \u03bc s.\n3: For device frequencies above 1 MHz, the device must be in Sleep for the entire conversion or the A/D accuracy may be out of specification.\n4: Low-power (PIC18LFXXXX) devices only.",
    "18.4 Operation in Power-Managed Modes\nThe selection of the automatic acquisition time and A/ D conversion clock is determined in part by the clock source and frequency while in a power-managed mode.\nIf the A/D is expected to operate while the device is in a power-managed  mode,  the  ACQT2:ACQT0  and ADCS2:ADCS0 bits in ADCON2 should be updated in accordance with the  clock  source  to  be  used  in  that mode. After entering the mode, an A/D acquisition or conversion may be started. Once started, the device should  continue  to  be  clocked  by  the  same  clock source until the conversion has been completed.\n- If desired, the device may be placed into the corresponding Idle mode during the conversion. If the device clock frequency is less than 1 MHz, the A/D RC clock source should be selected.",
    "18.4 Operation in Power-Managed Modes\nOperation  in  the  Sleep  mode  requires  the  A/D  FRC clock to be selected. If bits ACQT2:ACQT0 are set to ' 000 ' and a conversion is started, the conversion will be delayed one instruction cycle to allow execution of the SLEEP instruction and entry to Sleep mode. The IDLEN bit  (OSCCON<7>)  must  have  already  been  cleared prior to starting the conversion.",
    "18.5 Configuring Analog Port Pins\nThe ADCON1, TRISA, TRISB and TRISE registers all configure the A/D port pins. The port pins needed as analog inputs must have their corresponding TRIS bits set (input). If the TRIS bit is cleared (output), the digital output level (VOH or VOL) will be converted.\nThe A/D operation is independent of the state of the CHS3:CHS0 bits and the TRIS bits.\nNote 1: When reading the Port register, all  pins configured as analog input channels will read as cleared (a low level). Pins configured  as  digital inputs  will convert  as analog inputs. Analog levels on a digitally configured input will be accurately converted.\n2: Analog  levels  on  any  pin  defined  as  a digital  input  may  cause  the  digital  input buffer  to  consume  current  out  of  the device's specification limits.\n3: The PBADEN bit in Configuration Register  3H  configures  PORTB  pins  to reset as analog or digital pins by controlling how the PCFG0 bits in ADCON1 are reset.",
    "18.6 A/D Conversions\nFigure 18-4 shows the operation of the A/D converter after the GO bit has been set and the ACQT2:ACQT0 bits are cleared. A conversion is started after the following instruction to allow entry into Sleep mode before the conversion begins.\nFigure 18-5 shows the operation of the A/D converter after the GO bit has been set and the ACQT2:ACQT0 bits are set to ' 010 ' and selecting a 4 TAD acquisition time before the conversion starts.\nAfter  the  A/D  conversion  is  completed  or  aborted,  a 2 TAD wait is required before the next acquisition can be started.  After  this  wait,  acquisition  on  the  selected channel is automatically started.\nNote:, 1 = The GO/DONE bit should NOT be set in the same instruction that turns on the A/D.",
    "18.7 Discharge\nClearing  the  GO/DONE  bit  during  a  conversion  will abort the current conversion. The A/D Result register pair will NOT be updated with the partially completed A/D conversion sample. This means the ADRESH:ADRESL  registers  will  continue  to  contain the value of the last completed conversion (or the last value written to the ADRESH:ADRESL registers).\nThe discharge phase is used to initialize the value of the  capacitor  array.  The  array  is  discharged  before every sample. This feature helps to optimize the unitygain amplifier, as the circuit always needs to charge the capacitor array, rather than charge/discharge based on previous measure values.\nFIGURE 18-4: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 000 , TACQ = 0 )",
    "18.8 Use of the CCP2 Trigger\nAn A/D conversion can be started by the special event trigger  of  the  CCP2  module.  This  requires  that  the CCP2M3:CCP2M0  bits  (CCP2CON<3:0>)  be  programmed as ' 1011 ' and that the A/D module is enabled (ADON bit is set).  When the trigger  occurs,  the GO/ DONE bit will be set, starting the A/D acquisition and conversion and the Timer1 (or Timer3) counter will be reset to zero. Timer1 (or Timer3) is reset to automatically  repeat  the  A/D  acquisition  period  with  minimal software overhead (moving ADRESH:ADRESL to the desired location). The appropriate analog input channel must be selected and the minimum acquisition period  is  either  timed  by  the  user,  or  an  appropriate TACQ time selected before the special event trigger sets the GO/DONE bit (starts a conversion).\nIf the A/D module is not enabled (ADON is cleared), the special event trigger will be ignored by the A/D module but will still reset the Timer1 (or Timer3) counter.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 51. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on page = 54. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on page = 54. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on page = 54. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nPIR2, Reset Values on page = 54. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 54. ADRESH, Bit 7 = A/D Result Register, High Byte. ADRESH, Bit 6 = A/D Result Register, High Byte. ADRESH, Bit 5 = A/D Result Register, High Byte.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADRESH, Bit 4 = A/D Result Register, High Byte. ADRESH, Bit 3 = A/D Result Register, High Byte. ADRESH, Bit 2 = A/D Result Register, High Byte. ADRESH, Bit 1 = A/D Result Register, High Byte. ADRESH, Bit 0 = A/D Result Register, High Byte. ADRESH, Reset Values on page = 53. ADRESL, Bit 7 = A/D Result Register, Low Byte. ADRESL, Bit 6 = A/D Result Register, Low Byte. ADRESL, Bit 5 = A/D Result Register, Low Byte. ADRESL, Bit 4 = A/D Result Register, Low Byte. ADRESL, Bit 3 = A/D Result Register, Low Byte. ADRESL, Bit 2 = A/D Result Register, Low Byte. ADRESL, Bit 1 = A/D Result Register, Low Byte. ADRESL, Bit 0 = A/D Result Register, Low Byte. ADRESL, Reset Values on page = 53. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Reset Values on page = 53. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on page = 53. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Reset Values on page = 53. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 54. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (2). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register. TRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 54. PORTB, Bit 7 = RB7.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nPORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on page = 54. TRISB, Bit 7 = PORTB Data Direction Control Register. TRISB, Bit 6 = PORTB Data Direction Control Register. TRISB, Bit 5 = PORTB Data Direction Control Register. TRISB, Bit 4 = PORTB Data Direction Control Register. TRISB, Bit 3 = PORTB Data Direction Control Register. TRISB, Bit 2 = PORTB Data Direction Control Register. TRISB, Bit 1 = PORTB Data Direction Control Register. TRISB, Bit 0 = PORTB Data Direction Control Register. TRISB, Reset Values on page = 54. LATB, Bit 7 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 6 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 5 = PORTB Data Latch Register (Read and",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nWrite to Data Latch). LATB, Bit 4 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 3 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 2 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 1 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Bit 0 = PORTB Data Latch Register (Read and Write to Data Latch). LATB, Reset Values on page = 54. PORTE (4), Bit 7 = -. PORTE (4), Bit 6 = -. PORTE (4), Bit 5 = -. PORTE (4), Bit 4 = -. PORTE (4), Bit 3 = RE3 (3). PORTE (4), Bit 2 = RE2. PORTE (4), Bit 1 = RE1. PORTE (4), Bit 0 = RE0. PORTE (4), Reset Values on page = 54. TRISE (4), Bit 7 = IBF. TRISE (4), Bit 6 =",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nOBF. TRISE (4), Bit 5 = IBOV. TRISE (4), Bit 4 = PSPMODE. TRISE (4), Bit 3 = -. TRISE (4), Bit 2 = TRISE2. TRISE (4), Bit 1 = TRISE1. TRISE (4), Bit 0 = TRISE0. TRISE (4), Reset Values on page = 54. LATE (4), Bit 7 = -. LATE (4), Bit 6 = -. LATE (4), Bit 5 = -. LATE (4), Bit 4 = -. LATE (4), Bit 3 = -. LATE (4), Bit 2 = PORTE Data Latch Register. LATE (4), Bit 1 = PORTE Data Latch Register. LATE (4), Bit 0 = PORTE Data Latch Register. LATE (4), Reset Values on page = 54\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for A/D conversion.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nNote 1: These bits are unimplemented on 28-pin devices; always maintain these bits clear.\n2: PORTA<7:6> and their direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n3: RE3 port bit is available only as an input pin when the MCLRE Configuration bit is ' 0 '.\n4: These registers are not implemented on 28-pin devices.",
    "19.0 COMPARATOR MODULE\nThe analog comparator module contains two comparators  that  can  be  configured  in  a  variety  of  ways.  The inputs can be selected from the analog inputs multiplexed with pins RA0 through RA5, as well as the on-chip voltage reference (see Section 20.0 'Comparator Voltage Reference  Module' ).  The  digital  outputs  (normal  or inverted) are available at the pin level and can also be read through the control register.",
    "PIC18F2X1X/4X1X\nThe CMCON  register (Register 19-1) selects the comparator input and output configuration. Block diagrams of the various comparator configurations are shown in Figure 19-1.",
    "REGISTER 19-1: CMCON: COMPARATOR CONTROL REGISTER\nR-0, 1 = R-0. R-0, 2 = R/W-0. R-0, 3 = R/W-0. R-0, 4 = R/W-0. R-0, 5 = R/W-1. R-0, 6 = R/W-1. R-0, 7 = R/W-1. C2OUT, 1 = C1OUT. C2OUT, 2 = C2INV. C2OUT, 3 = C1INV. C2OUT, 4 = CIS. C2OUT, 5 = CM2. C2OUT, 6 = CM1. C2OUT, 7 = CM0\nbit 7\nbit 0",
    "bit 7 C2OUT : Comparator 2 Output bit\nWhen C2INV = 0 :\n1 = C2 VIN+ > C2 VIN-\n0 = C2 VIN+ < C2 VIN-\nWhen C2INV = 1 :\n1 = C2 VIN+ < C2 VIN-\n0 = C2 VIN+ > C2 VIN-",
    "bit 6 C1OUT : Comparator 1 Output bit\nWhen C1INV = 0 :\n1 = C1 VIN+ > C1 VIN-\n0 = C1 VIN+ < C1 VIN-\nWhen C1INV = 1 :\n1 = C1 VIN+ < C1 VIN-\n0 = C1 VIN+ > C1 VIN-",
    "bit 5 C2INV : Comparator 2 Output Inversion bit\n1 = C2 output inverted\n0 = C2 output not inverted",
    "bit 4 C1INV : Comparator 1 Output Inversion bit\n1 = C1 output inverted\n0 = C1 output not inverted",
    "bit 3 CIS : Comparator Input Switch bit\nWhen CM2:CM0 = 110 :\n1 = C1 VIN+ connects to RA3/AN3/VREF+\nC2 VIN+ connects to RA2/AN2/VREF-/CVREF\n0 = C1 VIN- connects to RA0/AN0\nC2 VIN- connects to RA1/AN1",
    "bit 2-0 CM2:CM0 : Comparator Mode bits\nFigure 19-1 shows the Comparator modes and the CM2:CM0 bit settings.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "19.1 Comparator Configuration\nThere are eight modes of operation for the comparators, shown  in  Figure 19-1.  Bits  CM2:CM0  of  the CMCON register are used to select these modes. The TRISA register controls the data direction of the comparator pins for each mode. If the Comparator mode is changed, the comparator output level may not be valid for the specified mode  change delay shown in Section 25.0 'Electrical Characteristics' .\nNote:, 1 = Comparator interrupts should be disabled during a Comparator mode change; otherwise, a false interrupt may occur.\nFIGURE 19-1:",
    "19.2 Comparator Operation\nA single comparator is shown in Figure 19-2, along with the  relationship  between  the  analog  input  levels  and the digital output. When the analog input at VIN+ is less than the analog input VIN-, the output of the comparator is a digital low level. When the analog input at VIN+ is greater  than  the  analog  input  VIN-,  the  output  of  the comparator is a digital high level. The shaded areas of the output of the comparator in Figure 19-2 represent the uncertainty, due to input offsets and response time.",
    "19.3 Comparator Reference\nDepending on the comparator operating mode, either an external or internal voltage reference may be used. The analog signal present at VIN- is compared to the signal at VIN+ and the digital output of the comparator is adjusted accordingly (Figure 19-2).\nFIGURE 19-2: SINGLE COMPARATOR\n19.3.1 EXTERNAL REFERENCE SIGNAL\nWhen  external voltage references are used, the comparator module can be configured to have the comparators operate from the same or different reference sources. However, threshold detector applications may require the same reference. The reference signal must be between VSS and VDD and can be applied to either pin of the comparator(s).",
    "19.3.2 INTERNAL REFERENCE SIGNAL\nThe comparator module also allows the selection of an internally generated voltage reference from the comparator voltage reference module. This module is described in more detail in Section 20.0 'Comparator Voltage Reference Module' .\nThe  internal  reference  is  only  available  in  the  mode where four inputs are multiplexed to two comparators (CM2:CM0 = 110 ).  In  this  mode,  the  internal  voltage reference is applied to the VIN+ pin of both comparators.",
    "19.4 Comparator Response Time\nResponse time is the minimum time, after selecting a new  reference  voltage  or  input  source,  before  the comparator  output  has  a  valid  level.  If  the  internal reference  is  changed,  the  maximum  delay  of  the internal  voltage  reference  must  be  considered  when using the comparator outputs. Otherwise, the maximum  delay  of  the  comparators  should  be  used (see Section 25.0 'Electrical Characteristics' ).",
    "19.5 Comparator Outputs\nThe comparator outputs are read through the CMCON register.  These  bits  are  read-only.  The  comparator outputs may also be directly output to the RA4 and RA5 I/O pins. When enabled, multiplexors in the output path of the RA4 and RA5 pins will switch and the output of each  pin  will  be  the  unsynchronized  output  of  the comparator. The uncertainty of each of the comparators is related to the input offset voltage and the response time given in the specifications. Figure 19-3 shows the comparator output block diagram.\nThe TRISA bits will still function as an output enable/ disable for the RA4 and RA5 pins while in this mode.\nThe polarity of the comparator outputs can be changed using the C2INV and C1INV bits (CMCON<4:5>).\nNote 1: When reading the Port register, all  pins configured as analog inputs will read as a ' 0 '.  Pins  configured  as  digital  inputs  will convert an analog input according to the Schmitt Trigger input specification.\n2: Analog  levels  on  any  pin  defined  as  a digital input may cause the input buffer to consume more current than is specified.",
    "19.6 Comparator Interrupts\nThe comparator interrupt flag is set whenever there is a  change  in  the  output  value  of  either  comparator. Software  will  need  to  maintain  information  about  the status of the output bits, as read from CMCON<7:6>, to determine the actual change that occurred. The CMIF bit  (PIR2<6>)  is  the  Comparator  Interrupt  Flag.  The CMIF bit must be reset by clearing it. Since it is also possible  to  write  a  ' 1 ' to  this  register,  a  simulated interrupt may be initiated.",
    "19.7 Comparator Operation During Sleep\nBoth the CMIE  bit (PIE2<6>)  and  the PEIE  bit (INTCON<6>) must be set to enable the interrupt. In addition, the GIE bit (INTCON<7>) must also be set. If any of these bits are clear, the interrupt is not enabled, though  the  CMIF  bit  will  still  be  set  if  an  interrupt condition occurs.\nNote:\nIf a change in the CMCON  register (C1OUT or C2OUT) should occur when a read operation is being executed (start of the Q2 cycle), then the CMIF (PIR registers) interrupt flag may not get set.\nThe user, in the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  CMCON  will  end  the mismatch condition.\nb) Clear flag bit CMIF.\nA mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared.",
    "19.7 Comparator Operation During Sleep\nWhen a comparator is active and the device is placed in Sleep mode, the comparator remains active and the interrupt  is  functional  if  enabled.  This  interrupt  will wake-up the device from Sleep mode, when enabled. Each operational comparator will consume additional current, as shown in the comparator specifications. To minimize power consumption while in Sleep mode, turn off the comparators (CM2:CM0 = 111 ) before entering Sleep. If the device wakes up from Sleep, the contents of the CMCON register are not affected.",
    "19.8 Effects of a Reset\nA device Reset forces the CMCON register to its Reset state, causing the comparator modules to be turned off (CM2:CM0 = 111) . However,  the  input  pins  (RA0 through  RA3)  are  configured  as  analog  inputs  by default on device Reset. The I/O configuration for these pins is determined by the setting of the PCFG3:PCFG0 bits (ADCON1<3:0>).  Therefore,  device  current  is minimized  when  analog  inputs  are  present  at  Reset time.",
    "19.9 Analog Input Connection Considerations\nA  simplified  circuit  for  an  analog  input  is  shown  in Figure 19-4. Since the analog pins are connected to a digital output, they have reverse biased diodes to VDD and VSS. The analog input, therefore, must be between VSS and VDD. If the  input  voltage  deviates  from  this range by more than 0.6V in either direction, one of the diodes is forward biased and a latch-up condition may occur.  A  maximum  source  impedance  of  10 k \u03a9 is recommended  for  the  analog  sources.  Any  external component connected to an analog input pin, such as a  capacitor  or  a  Zener  diode,  should  have  very  little leakage current.",
    "TABLE 19-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 53. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 53. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 =",
    "TABLE 19-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nTMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on page = 54. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on page = 54. PIE2, Bit 7 = OCSFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 =",
    "TABLE 19-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on page = 54. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on page = 54. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 4 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 3 = PORTA Data Latch Register",
    "TABLE 19-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\n(Read and Write to Data Latch). LATA, Bit 2 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 1 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Bit 0 = PORTA Data Latch Register (Read and Write to Data Latch). LATA, Reset Values on page = 54. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Control Register. TRISA, Bit 4 = PORTA Data Direction Control Register. TRISA, Bit 3 = PORTA Data Direction Control Register. TRISA, Bit 2 = PORTA Data Direction Control Register. TRISA, Bit 1 = PORTA Data Direction Control Register. TRISA, Bit 0 = PORTA Data Direction Control Register. TRISA, Reset Values on page = 54\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are unused by the comparator module.",
    "TABLE 19-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nNote 1: PORTA<7:6> and their direction and latch bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "20.0 COMPARATOR VOLTAGE REFERENCE MODULE\nThe comparator voltage reference is a 16-tap resistor ladder  network  that  provides  a  selectable  reference voltage. Although its primary purpose is to provide a reference for the analog comparators, it may also be used independently of them.\nA block diagram of the module is shown in Figure 20-1. The resistor ladder is segmented to provide two ranges of  CVREF  values  and  has  a  power-down  function  to conserve power when the reference is not being used. The module's supply reference can be provided from either device VDD/VSS or an external voltage reference.",
    "20.1 Configuring the Comparator Voltage Reference\nused is selected by the CVRR bit (CVRCON<5>). The primary difference between the ranges is the size of the steps selected by the CVREF selection bits (CVR3:CVR0), with one range offering finer resolution. The  equations  used  to  calculate  the  output  of  the comparator voltage reference are as follows:\nIf CVRR = 1 : CVREF = ((CVR3:CVR0)/24) x CVRSRC If CVRR = 0 :\nCVREF = (CVRSRC x 1/4) + (((CVR3:CVR0)/32) x CVRSRC)\nThe  comparator  reference  supply  voltage  can  come from either VDD and VSS, or the external VREF+ and VREF-  that  are  multiplexed  with  RA2  and  RA3.  The voltage source is selected by the CVRSS bit (CVRCON<4>).\nThe voltage reference module is controlled through the CVRCON  register  (Register 20-1).  The  comparator voltage reference provides two ranges of output voltage, each with 16 distinct levels. The range to be",
    "20.1 Configuring the Comparator Voltage Reference\nThe settling time of the comparator voltage reference must  be  considered  when  changing  the  CVREF output (see Table 25-3 in Section 25.0 'Electrical Characteristics' ).",
    "REGISTER 20-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. CVREN, 1 = CVROE (1). CVREN, 2 = CVRR. CVREN, 3 = CVRSS. CVREN, 4 = CVR3. CVREN, 5 = CVR2. CVREN, 6 = CVR1. CVREN, 7 = CVR0\nbit 7\nbit 0\nbit 7\nCVREN : Comparator Voltage Reference Enable bit\n1 = CVREF circuit powered on\n0 = CVREF circuit powered down\nbit 6\nCVROE : Comparator VREF Output Enable bit (1)\n1 = CVREF voltage level is also output on the RA2/AN2/VREF-/CVREF pin",
    "REGISTER 20-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\n0 = CVREF voltage is disconnected from the RA2/AN2/VREF-/CVREF pin\nNote 1: CVROE overrides the TRISA<2> bit setting.\nbit 5 CVRR : Comparator VREF Range Selection bit\n1 = 0 to 0.667 CVRSRC, with CVRSRC/24 step size (low range)\n0 = 0.25 CVRSRC to 0.75 CVRSRC, with CVRSRC/32 step size (high range)",
    "bit 4 CVRSS : Comparator VREF Source Selection bit\n1 = Comparator reference source, CVRSRC = (VREF+) - (VREF-)\n0 = Comparator reference source, CVRSRC = VDD - VSS\nbit 3-0\nCVR3:CVR0: Comparator VREF Value Selection bits (0 \u2264 (CVR3:CVR0) \u2264 15)\nWhen CVRR = 1 :\nCVREF = ((CVR3:CVR0)/24)   (CVRSRC) \u2022\nWhen CVRR = 0 :\nCVREF = (CVRSRC/4) + ((CVR3:CVR0)/32)   (CVRSRC) \u2022",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "20.4 Effects of a Reset\nThe full range of voltage reference cannot be realized due to the construction of the module. The transistors on the top and bottom of the resistor ladder network (Figure 20-1) keep CVREF from approaching the reference  source  rails.  The  voltage  reference  is  derived from the reference source; therefore, the CVREF output changes  with  fluctuations  in  that  source.  The  tested absolute  accuracy  of  the  voltage  reference  can  be found in Section 25.0 'Electrical Characteristics' .",
    "20.3 Operation During Sleep\nWhen  the  device  wakes  up  from  Sleep  through  an interrupt or a Watchdog Timer time-out, the contents of the  CVRCON  register  are  not  affected.  To  minimize current consumption  in Sleep mode,  the  voltage reference should be disabled.\nA  device  Reset  disables  the  voltage  reference  by clearing  bit  CVREN  (CVRCON<7>).  This  Reset  also disconnects the reference from the RA2 pin by clearing bit CVROE (CVRCON<6>) and selects the high-voltage range by clearing bit CVRR (CVRCON<5>). The CVR value select bits are also cleared.",
    "20.5 Connection Considerations\nThe voltage reference module operates independently of the comparator module. The output of the reference generator  may  be  connected  to  the  RA2  pin  if  the CVROE bit is set. Enabling the voltage reference output onto RA2 when it is configured as a digital input will increase  current  consumption.  Connecting  RA2  as  a digital  output  with  CVRSS enabled will also increase current consumption.\nThe RA2 pin can be used as a simple D/A output with limited drive capability. Due to the limited current drive capability, a  buffer  must  be  used  on  the  voltage reference  output  for  external  connections  to  VREF. Figure 20-2 shows an example buffering technique.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nCVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on page = 53. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on page = 53. TRISA, Bit 7 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 6 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 5 = TRISA7 (1)",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nTRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 4 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 3 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 2 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 1 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Bit 0 = TRISA7 (1) TRISA6 (1) PORTA Data Direction Control Register. TRISA, Reset Values on page = 54\nLegend: Shaded cells are not used with the comparator voltage reference.\nNote 1: PORTA pins are enabled based on oscillator configuration.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "21.0 HIGH/LOW-VOLTAGE DETECT (HLVD)\nPIC18F2X1X/4X1X devices have a High/Low-Voltage Detect module (HLVD). This is a programmable circuit that allows the user to specify both a device voltage trip point and the direction of change from that point. If the device experiences an excursion past the trip point in that direction, an interrupt flag is set. If the interrupt is enabled, the program execution will branch to the interrupt vector address and the software can then respond to the interrupt.",
    "PIC18F2X1X/4X1X\nThe High/Low-Voltage Detect Control register (Register 21-1) completely controls the operation of the HLVD module. This allows the circuitry to be 'turned off' by the user under software control, which minimizes the current consumption for the device.\nThe block diagram for the HLVD module is shown in Figure 21-1.",
    "REGISTER 21-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nVDIRMAG, U-0 = -. VDIRMAG, R-0 = IRVST. VDIRMAG, R/W-0 = HLVDEN. VDIRMAG, R/W-0 = HLVDL3. VDIRMAG, R/W-1 = HLVDL2. VDIRMAG, R/W-0 = HLVDL1. VDIRMAG, R/W-1 = HLVDL0. bit 7, U-0 = . bit 7, R-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-1 = . bit 7, R/W-0 = . bit 7, R/W-1 = bit 0\nbit 7 VDIRMAG: Voltage Direction Magnitude Select bit\n1 = Event occurs when voltage equals or exceeds trip point (HLVDL3:HLDVL0)\n0 = Event occurs when voltage equals or falls below trip point (HLVDL3:HLVDL0)",
    "REGISTER 21-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nbit 6 Unimplemented: Read as ' 0 '\nbit 5 IRVST: Internal Reference Voltage Stable Flag bit\n1 = Indicates that the voltage detect logic will generate the interrupt flag at the specified voltage range\n0 = Indicates that the voltage detect logic will not generate the interrupt flag at the specified voltage range and the HLVD interrupt should not be enabled",
    "bit 4 HLVDEN: High/Low-Voltage Detect Power Enable bit\n- 1 = HLVD enabled\n0 = HLVD disabled bit 3-0 HLVDL3:HLVDL0: Voltage Detection Limit bits\n1111 = External analog input is used (input comes from the HLVDIN pin)\n= Maximum setting\n1110\n.\n.\n.\n0000 = Minimum setting\nNote: See Table 25-4 in Section 25.0 'Electrical Characteristics' for the specifications.",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "PIC18F2X1X/4X1X\nThe  module  is  enabled  by  setting  the  HLVDEN  bit. Each  time  that  the  HLVD  module  is  enabled,  the circuitry requires some time to stabilize. The IRVST bit is a read-only bit and is used to indicate when the circuit is  stable.  The module can only generate an interrupt after the circuit is stable and IRVST is set.\nThe VDIRMAG bit determines the overall operation of the module. When VDIRMAG is cleared, the module monitors for drops in VDD below a predetermined set point. When the bit is set, the module monitors for rises in VDD above the set point.",
    "21.1 Operation\nWhen the HLVD module is enabled, a comparator uses an  internally  generated  reference  voltage  as  the  set point.  The  set  point  is  compared  with  the  trip  point, where each node in the resistor divider represents a trip point voltage. The 'trip point' voltage is the voltage level at which the device detects a high or low-voltage event, depending on the configuration of the module. When the supply voltage is equal to the trip point, the voltage tapped off of the resistor array is equal to the internal  reference  voltage  generated  by  the  voltage reference module. The comparator then generates an interrupt signal by setting the HLVDIF bit.\nThe trip point voltage is software programmable to any one  of 16  values. The  trip point is selected  by programming the HLVDL3:HLVDL0 bits (HLVDCON<3:0>).",
    "21.1 Operation\nThe HLVD module has an additional feature that allows the user to supply the trip voltage to the module from an external  source.  This  mode  is  enabled  when  bits HLVDL3:HLVDL0 are set to ' 1111 '.  In  this  state,  the comparator input is multiplexed from the external input pin,  HLVDIN.  This  gives  users  flexibility  because  it allows them to configure the High/Low-Voltage Detect interrupt to occur at any voltage in the valid operating range.\nFIGURE 21-1: HLVD MODULE BLOCK DIAGRAM (WITH EXTERNAL INPUT)",
    "21.2 HLVD Setup\nThe following  steps  are  needed  to  set  up  the  HLVD module:\n1. Disable the module by clearing the HLVDEN bit (HLVDCON<4>).\n2. Write the value to the HLVDL3:HLVDL0 bits that selects the desired HLVD trip point.\n3. Set  the  VDIRMAG  bit  to  detect  high  voltage (VDIRMAG = 1 ) or low voltage (VDIRMAG = 0 ).\n4. Enable the HLVD module by setting the HLVDEN bit.\n5. Clear the HLVD interrupt flag (PIR2<2>), which may have been set from a previous interrupt.\n6. Enable  the  HLVD  interrupt  if  interrupts  are desired  by  setting  the  HLVDIE  and  GIE  bits (PIE<2> and INTCON<7>). An interrupt will not be generated until the IRVST bit is set.",
    "21.3 Current Consumption\nWhen the  module  is  enabled,  the  HLVD  comparator and voltage divider are enabled and will consume static current. The total current consumption, when enabled, is specified in electrical specification parameter D022B.\nDepending on the application, the HLVD module does not need to be operating constantly. To decrease the current  requirements,  the  HLVD  circuitry  may  only need to be enabled for short periods where the voltage is  checked. After doing the check, the HLVD module may be disabled.",
    "21.4 HLVD Start-up Time\nThe  internal  reference  voltage  of  the  HLVD  module, specified  in  electrical  specification  parameter  D420, may be  used  by  other  internal  circuitry,  such  as  the Programmable Brown-out Reset. If the HLVD or other circuits  using  the  voltage  reference  are  disabled  to lower the device's current consumption, the reference voltage circuit will require time to become stable before a low or high-voltage condition can be reliably detected. This start-up time, TIRVST, is an interval that is independent of device clock speed. It is specified in electrical specification parameter 36.\nThe HLVD interrupt flag is not enabled until TIRVST has expired and a stable reference voltage is reached. For this reason, brief excursions beyond the set point may not be detected during this interval. Refer to Figure 21-2 or Figure 21-3.",
    "21.5 Applications\nFIGURE 21-4:\nIn many applications, the ability to detect a drop below or  rise  above  a  particular  threshold  is  desirable.  For example,  the  HLVD  module  could  be  periodically enabled to detect a Universal Serial Bus (USB) attach or detach. This assumes the device is powered by a lower voltage source than the USB when detached. An attach  would  indicate  a  high-voltage  detect  from,  for example,  3.3V  to  5V  (the  voltage  on  USB)  and  vice versa for a detach. This feature could save a design a few extra components and an attach signal (input pin).\nTYPICAL HIGH/LOW-VOLTAGE DETECT APPLICATION\nFor general battery applications, Figure 21-4 shows a possible voltage curve. Over time, the device voltage decreases. When the device voltage reaches voltage VA, the HLVD logic generates an interrupt at time TA. The  interrupt  could  cause  the  execution  of  an  ISR, which would allow the application to perform 'housekeeping  tasks'  and  perform  a  controlled  shutdown before  the  device  voltage  exits  the  valid  operating range at TB. The HLVD thus would give the application a time window, represented by the difference between TA and TB, to safely exit.",
    "21.7 Effects of a Reset\nWhen enabled, the HLVD circuitry continues to operate during  Sleep.  If  the  device  voltage  crosses  the  trip point,  the  HLVDIF  bit  will  be  set  and  the  device  will wake-up  from  Sleep.  Device  execution  will  continue from  the  interrupt  vector  address  if  interrupts  have been globally enabled.\nA device Reset forces all registers to their Reset state. This forces the HLVD module to be turned off.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nHLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Reset Values on Page = 52. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 51. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 =",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\n-. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 54. PIE2, Bit 7 = OCSFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 54. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 =",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nCCP2IP. IPR2, Reset Values on Page = 54\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are unused by the HLVD module.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "22.0 SPECIAL FEATURES OF THE CPU\nPIC18F2X1X/4X1X  devices  include  several  features intended  to  maximize  reliability  and  minimize  cost through elimination of external components. These are:\n\u00b7 Oscillator Selection\n\u00b7 Resets:\n-Power-on Reset (POR)\n-Power-up Timer (PWRT)\n-Oscillator Start-up Timer (OST)\n-Brown-out Reset (BOR)\n\u00b7 Interrupts\n\u00b7 Watchdog Timer (WDT)\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Two-Speed Start-up\n\u00b7 Code Protection\n\u00b7 ID Locations\n\u00b7 In-Circuit Serial Programming\nThe  oscillator  can  be  configured  for  the  application depending on frequency, power, accuracy and cost. All of  the  options  are  discussed  in  detail  in Section 2.0 'Oscillator Configurations' .\nA complete discussion of device Resets and interrupts is available in previous sections of this data sheet.\nIn  addition  to  their  Power-up  and  Oscillator  Start-up Timers provided for Resets, PIC18F2X1X/4X1X devices  have  a  Watchdog  Timer,  which  is  either permanently  enabled  via  the  Configuration  bits  or software controlled (if configured as disabled).",
    "22.0 SPECIAL FEATURES OF THE CPU\nThe inclusion of an internal RC oscillator also provides the  additional  benefits  of  a  Fail-Safe  Clock  Monitor (FSCM) and Two-Speed Start-up. FSCM provides for background  monitoring  of  the  peripheral  clock  and automatic switchover in the event of its failure.  TwoSpeed Start-up  enables  code  to  be  executed  almost immediately on start-up, while the primary clock source completes its start-up delays.\nAll  of  these  features  are  enabled  and  configured  by setting the appropriate Configuration register bits.",
    "22.1 Configuration Bits\nThe Configuration bits  can  be  programmed  (read  as ' 0 ') or left unprogrammed (read as ' 1 ') to select various device configurations. These bits are mapped starting at program memory location 300000h.\nThe user will note that address 300000h is beyond the user program memory space. In fact, it  belongs  to the configuration memory space (300000h-3FFFFFh), which can only be accessed using table reads.",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n300001h, File Name = CONFIG1H. 300001h, Bit 7 = IESO. 300001h, Bit 6 = FCMEN. 300001h, Bit 5 = -. 300001h, Bit 4 = -. 300001h, Bit 3 = FOSC3. 300001h, Bit 2 = FOSC2. 300001h, Bit 1 = FOSC1. 300001h, Bit 0 = FOSC0. 300001h, Default/ Unprogrammed Value = 00-- 0111. 300002h, File Name = CONFIG2L. 300002h, Bit 7 = -. 300002h, Bit 6 = -. 300002h, Bit 5 = -. 300002h, Bit 4 = BORV1. 300002h, Bit 3 = BORV0. 300002h, Bit 2 = BOREN1. 300002h, Bit 1 = BOREN0. 300002h, Bit 0 = PWRTEN. 300002h, Default/ Unprogrammed Value = ---1 1111.",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n300003h, File Name = CONFIG2H. 300003h, Bit 7 = -. 300003h, Bit 6 = -. 300003h, Bit 5 = -. 300003h, Bit 4 = WDTPS3. 300003h, Bit 3 = WDTPS2. 300003h, Bit 2 = WDTPS1. 300003h, Bit 1 = WDTPS0. 300003h, Bit 0 = WDTEN. 300003h, Default/ Unprogrammed Value = ---1 1111. 300005h, File Name = CONFIG3H. 300005h, Bit 7 = MCLRE. 300005h, Bit 6 = -. 300005h, Bit 5 = -. 300005h, Bit 4 = -. 300005h, Bit 3 = -. 300005h, Bit 2 = LPT1OSC. 300005h, Bit 1 = PBADEN. 300005h, Bit 0 = CCP2MX. 300005h, Default/ Unprogrammed Value =",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n1--- -011. 300006h, File Name = CONFIG4L. 300006h, Bit 7 = DEBUG. 300006h, Bit 6 = XINST. 300006h, Bit 5 = -. 300006h, Bit 4 = -. 300006h, Bit 3 = -. 300006h, Bit 2 = LVP. 300006h, Bit 1 = -. 300006h, Bit 0 = STVREN. 300006h, Default/ Unprogrammed Value = 10-- -1-1. 300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1,2). 300008h, Bit 2 = CP2 (1). 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300008h, Default/",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\nUnprogrammed Value = ---- 1111. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = -. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 300009h, Default/ Unprogrammed Value = -1-- ----. 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit 6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit 4 = -. 30000Ah, Bit 3 = WRT3 (1,2). 30000Ah, Bit 2 = WRT2 (1). 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Ah, Default/ Unprogrammed Value =",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n---- 1111. 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = -. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Bh, Default/ Unprogrammed Value = -11- ----. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1,2). 30000Ch, Bit 2 = EBTR2 (1). 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Ch, Default/ Unprogrammed Value = ---- 1111. 30000Dh, File Name",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n= CONFIG7H. 30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -. 30000Dh, Default/ Unprogrammed Value = -1-- ----. 3FFFFEh, File Name = DEVID1 (3). 3FFFFEh, Bit 7 = DEV2. 3FFFFEh, Bit 6 = DEV1. 3FFFFEh, Bit 5 = DEV0. 3FFFFEh, Bit 4 = REV4. 3FFFFEh, Bit 3 = REV3. 3FFFFEh, Bit 2 = REV2. 3FFFFEh, Bit 1 = REV1. 3FFFFEh, Bit 0 = REV0. 3FFFFEh, Default/ Unprogrammed Value = xxxx xxxx (3). 3FFFFFh, File Name = DEVID2 (3).",
    "TABLE 22-1: CONFIGURATION BITS AND DEVICE IDs\n3FFFFFh, Bit 7 = DEV10. 3FFFFFh, Bit 6 = DEV9. 3FFFFFh, Bit 5 = DEV8. 3FFFFFh, Bit 4 = DEV7. 3FFFFFh, Bit 3 = DEV6. 3FFFFFh, Bit 2 = DEV5. 3FFFFFh, Bit 1 = DEV4. 3FFFFFh, Bit 0 = DEV3. 3FFFFFh, Default/ Unprogrammed Value = 0000 1100\nLegend:\n- x = unknown, u = unchanged, - = unimplemented, q = value depends on condition.\nShaded cells are unimplemented, read as ' 0 '.\nNote\n1: Unimplemented in PIC18F2410/4410 devices; maintain this bit set.\n2: Unimplemented in PIC18F2515/4515 devices, maintain this bit set.\n3: See Register 22-14 for DEVID1 values. DEVID registers are read-only and cannot be programmed by the user.",
    "CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nR/P-0, 1 = R/P-0. R/P-0, 2 = U-0. R/P-0, 3 = U-0. R/P-0, 4 = R/P-0. R/P-0, 5 = R/P-1. R/P-0, 6 = R/P-1. R/P-0, 7 = R/P-1. IESO, 1 = FCMEN. IESO, 2 = -. IESO, 3 = -. IESO, 4 = FOSC3. IESO, 5 = FOSC2. IESO, 6 = FOSC1. IESO, 7 = FOSC0\nbit 7\nbit 0\nbit 7 IESO: Internal/External Oscillator Switchover bit\n1 = Oscillator Switchover mode enabled\n0 = Oscillator Switchover mode disabled\nbit 6 FCMEN: Fail-Safe Clock Monitor Enable bit\n1 = Fail-Safe Clock Monitor enabled\n0 = Fail-Safe Clock Monitor disabled bit 5-4 Unimplemented: Read as ' 0 '",
    "bit 3-0 FOSC3:FOSC0: Oscillator Selection bits\n11xx = External RC oscillator, CLKO function on RA6\n101x = External RC oscillator, CLKO function on RA6\n1001 = Internal oscillator block, CLKO function on RA6, port function on RA7\n1000 = Internal oscillator block, port function on RA6 and RA7\n0111 = External RC oscillator, port function on RA6\n0110 = HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)\n0101 = EC oscillator, port function on RA6\n0100 = EC oscillator, CLKO function on RA6\n0011 = External RC oscillator, CLKO function on RA6\n0010 = HS oscillator\n0001 = XT oscillator\n0000 = LP oscillator",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = R/P-1. U-0, 4 = R/P-1. U-0, 5 = R/P-1. U-0, 6 = R/P-1. U-0, 7 = R/P-1. -, 1 = -. -, 2 = -. -, 3 = BORV1 (1). -, 4 = BORV0 (1). -, 5 = BOREN1 (2). -, 6 = BOREN0 (2). -, 7 = PWRTEN (2)\nbit 7\nbit 0\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-3 BORV1:BORV0: Brown-out Reset Voltage bits (1)\n11 = Minimum setting\n.\n.\n.\n00 = Maximum setting\nbit 2-1\nBOREN1:BOREN0:\nBrown-out Reset Enable bits\n(2)",
    "REGISTER 22-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\n11 = Brown-out Reset enabled in hardware only (SBOREN is disabled)\n10 = Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)\n01 = Brown-out Reset enabled and controlled by software (SBOREN is enabled)\n00 = Brown-out Reset disabled in hardware and software\nbit 0 PWRTEN: Power-up Timer Enable bit\n(2)\n1 = PWRT disabled\n0 = PWRT enabled\nNote 1: See Section  25.1 'DC Characteristics' for the specifications.\n2: The Power-up Timer is decoupled from Brown-out Reset, allowing these features to be independently controlled.",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "PIC18F2X1X/4X1X\nREGISTER 22-3:",
    "CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = R/P-1. U-0, 4 = R/P-1. U-0, 5 = R/P-1. U-0, 6 = R/P-1. U-0, 7 = R/P-1. -, 1 = -. -, 2 = -. -, 3 = WDTPS3. -, 4 = WDTPS2. -, 5 = WDTPS1. -, 6 = WDTPS0. -, 7 = WDTEN\nbit 7\nbit 0\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-1 WDTPS3:WDTPS0: Watchdog Timer Postscale Select bits\n1111 = 1:32,768\n1110 = 1:16,384\n1101 = 1:8,192\n1100 = 1:4,096\n1011 = 1:2,048\n1010 = 1:1,024\n1001 = 1:512",
    "CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\n1000 = 1:256\n0111 = 1:128\n0110 = 1:64\n0101 = 1:32\n0100 = 1:16\n0011 = 1:8\n0010 = 1:4\n0001 = 1:2\n0000 = 1:1\nbit 0 WDTEN: Watchdog Timer Enable bit\n1 = WDT enabled\n0 = WDT disabled (control is placed on the SWDTEN bit)",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nR/P-1, 1 = U-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = R/P-0. R/P-1, 6 = R/P-1. R/P-1, 7 = R/P-1. MCLRE, 1 = -. MCLRE, 2 = -. MCLRE, 3 = -. MCLRE, 4 = -. MCLRE, 5 = LPT1OSC. MCLRE, 6 = PBADEN. MCLRE, 7 = CCP2MX\nbit 7\nbit 0",
    "bit 7 MCLRE: MCLR Pin Enable bit\n1 = MCLR pin enabled; RE3 input pin disabled\n0 = RE3 input pin enabled; MCLR disabled",
    "bit 6-3 Unimplemented: Read as ' 0 '\nbit 2 LPT1OSC:\nLow-Power Timer1 Oscillator Enable bit\n- 1 = Timer1 configured for low-power operation\n0 = Timer1 configured for higher power operation",
    "bit 1 PBADEN: PORTB A/D Enable bit\n(Affects ADCON1 Reset state. ADCON1 controls PORTB<4:0> pin configuration.)\n1 = PORTB<4:0> pins are configured as analog input channels on Reset\n0 = PORTB<4:0> pins are configured as digital I/O on Reset",
    "bit 0 CCP2MX: CCP2 Mux bit\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RB3",
    "Legend:\nR = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = -n = Value when device is unprogrammed. -n = Value when device is unprogrammed, 2 = u = Unchanged from programmed state",
    "CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nR/P-1, 1 = R/P-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = R/P-1. R/P-1, 6 = U-0. R/P-1, 7 = R/P-1. DEBUG, 1 = XINST. DEBUG, 2 = -. DEBUG, 3 = -. DEBUG, 4 = -. DEBUG, 5 = LVP. DEBUG, 6 = -. DEBUG, 7 = STVREN\nbit 7\nbit 0\nbit 7 DEBUG: Background Debugger Enable bit\n1 = Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins\n0 = Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug\nXINST: Extended Instruction Set Enable bit",
    "CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\n1 = Instruction set extension and Indexed Addressing mode enabled\n0 = Instruction set extension and Indexed Addressing mode disabled (Legacy mode)",
    "bit 5-3 Unimplemented: Read as ' 0 '\n- bit 2\nLVP: Single-Supply ICSP Enable bit\n- 1 = Single-Supply ICSP enabled\n0 = Single-Supply ICSP disabled\nbit 1 Unimplemented: Read as ' 0 '\nbit 0 STVREN: Stack Full/Underflow Reset Enable bit\n1 = Stack full/underflow will cause Reset\n0 = Stack full/underflow will not cause Reset\nbit 6",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = CP3 (1,2). -, 5 = CP2 (1). -, 6 = CP1. -, 7 = CP0\nbit 7\nbit 0",
    "bit 3 CP3: Code Protection bit (1,2)\n1 = Block 3 (006000-007FFFh) not code-protected (3)\n0 = Block 3 (006000-007FFFh) code-protected (3)\n1 = Block 3 (00C000-00FFFFh) not code-protected (4)\n0 = Block 3 (00C000-00FFFFh) code-protected (4)",
    "bit 2 CP2: Code Protection bit (1)\n1 = Block 2 (004000-005FFFh) not code-protected (3)\n0 = Block 2 (004000-005FFFh) code-protected (3)\n1 = Block 2 (008000-00BFFFh) not code-protected (4)\n0 = Block 2 (008000-00BFFFh) code-protected (4)",
    "bit 1 CP1: Code Protection bit\n1 = Block 1 (002000-003FFFh) not code-protected (3)\n0 = Block 1 (002000-003FFFh) code-protected (3)\n1 = Block 1 (004000-007FFFh) not code-protected (4)\n0 = Block 1 (004000-007FFFh) code-protected (4)",
    "bit 0 CP0: Code Protection bit\n1 = Block 0 (000800-001FFFh) not code-protected (3)\n0 = Block 0 (000800-001FFFh) code-protected (3)\n1 = Block 0 (000800-003FFFh) not code-protected (4)\n0 = Block 0 (000800-003FFFh) code-protected (4)\nNote 1: Unimplemented in PIC18F2410/4410 devices; maintain this bit set.\n2: Unimplemented in PIC18F2515/4515 devices; maintain this bit set.\n3: Address range for 16K and 32K devices.\n4: Address range for 48K and 64K devices.",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n- -n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nU-0, 1 = R/C-1. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = U-0. -, 1 = CPB. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = -\nbit 7\nbit 0",
    "bit 7 Unimplemented: Read as ' 0 '\nbit 6 CPB: Boot Block Code Protection bit\n1 = Boot block (000000-0007FFh) not code-protected\n0 = Boot block (000000-0007FFh) code-protected",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-8:\nREGISTER 22-9:",
    "CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = WRT3 (1,2). -, 5 = WRT2 (1). -, 6 = WRT1. -, 7 = WRT0\nbit 7\nbit 0",
    "bit 7-4 Unimplemented: Read as ' 0 '\nbit 3 WRT3: Write Protection bit (1,2)\n1 = Block 3 (006000-007FFFh) not write-protected (3)\n0 = Block 3 (006000-007FFFh) write-protected (3)\n1 = Block 3 (00C000-00FFFFh) not write-protected (4)\n0 = Block 3 (00C000-00FFFFh) write-protected (4)",
    "bit 2 WRT2: Write Protection bit (1)\n1 = Block 2 (004000-005FFFh) not write-protected (3)\n0 = Block 2 (004000-005FFFh) write-protected (3)\n1 = Block 2 (008000-00BFFFh) not write-protected (4)\n0 = Block 2 (008000-00BFFFh) write-protected (4)",
    "bit 1 WRT1: Write Protection bit\n1 = Block 1 (002000-003FFFh) not write-protected (3)\n0 = Block 1 (002000-003FFFh) write-protected (3)\n1 = Block 1 (004000-007FFFh) not write-protected (4)\n0 = Block 1 (004000-007FFFh) write-protected (4)",
    "bit 0 WRT0: Write Protection bit\n1 = Block 0 (000800-001FFFh) not write-protected (3)\n0 = Block 0 (000800-001FFFh) write-protected (3)\n1 = Block 0 (000800-003FFFh) not write-protected (4)\n0 = Block 0 (000800-003FFFh) write-protected (4)\nNote 1:\nUnimplemented in PIC18F2410/4410 devices; maintain this bit set.\n2: Unimplemented in PIC18F2515/4515 devices; maintain this bit set.\n3: Address range for 16K and 32K devices.\n4: Address range for 48K and 64K devices.\nLegend:, 1 = Legend:. R = Readable bit C = Clearable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nU-0, 1 = R/C-1. U-0, 2 = R-1. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = U-0. -, 1 = WRTB. -, 2 = WRTC (1). -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = -\nbit 7\nbit 0\nbit 7 Unimplemented: Read as ' 0 '\nbit 6 WRTB: Boot Block Write Protection bit\n1 = Boot block (000000-0007FFh) not write-protected\n0 = Boot block (000000-0007FFh) write-protected\nbit 5 WRTC: Configuration Register Write Protection bit (1)\n1 = Configuration registers (300000-3000FFh) not write-protected\n0 = Configuration registers (300000-3000FFh) write-protected",
    "CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nNote 1: This bit is read-only in Normal Execution mode; it can be written only in Program mode.",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = R/C-1. U-0, 5 = R/C-1. U-0, 6 = R/C-1. U-0, 7 = R/C-1. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = EBTR3 (1,2). -, 5 = EBTR2 (1). -, 6 = EBTR1. -, 7 = EBTR0\nbit 7\nbit 0",
    "bit 7-4 Unimplemented: Read as ' 0\n'\nbit 3 EBTR3: Table Read Protection bit\n(1,2)\n1 = Block 3 (006000-007FFFh) not protected from table reads executed in other blocks (3)\n0 = Block 3 (006000-007FFFh) protected from table reads executed in other blocks (3)\n1 = Block 3 (00C000-00FFFFh) not protected from table reads executed in other blocks (4)\n0 = Block 3 (00C000-00FFFFh) protected from table reads executed in other blocks (4)",
    "bit 2 EBTR2 : Table Read Protection bit (1)\n1 = Block 2 (004000-005FFFh) not protected from table reads executed in other blocks (3)\n0 = Block 2 (004000-005FFFh) protected from table reads executed in other blocks (3)\n1 = Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks (4)\n0 = Block 2 (008000-00BFFFh) protected from table reads executed in other blocks (4)",
    "bit 1 EBTR1: Table Read Protection bit\n1 = Block 1 (002000-003FFFh) not protected from table reads executed in other blocks (3)\n0 = Block 1 (002000-003FFFh) protected from table reads executed in other blocks (3)\n1 = Block 1 (004000-007FFFh) not protected from table reads executed in other blocks (4)\n0 = Block 1 (004000-007FFFh) protected from table reads executed in other blocks (4)",
    "bit 0 EBTR0: Table Read Protection bit\n1 = Block 0 (000800-001FFFh) not protected from table reads executed in other blocks (3)\n0 = Block 0 (000800-001FFFh) protected from table reads executed in other blocks (3)\n1 = Block 0 (000800-003FFFh) not protected from table reads executed in other blocks (4)\n0 = Block 0 (000800-003FFFh) protected from table reads executed in other blocks (4)\nNote 1: Unimplemented in PIC18F2410/4410 devices; maintain this bit set.\n2: Unimplemented in PIC18F2515/4515 devices; maintain this bit set.\n3: Address range for 16K and 32K devices.\n4: Address range for 48K and 64K devices.",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nU-0, 1 = R/C-1. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = U-0. -, 1 = EBTRB. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = -\nbit 7\nbit 0",
    "bit 7 Unimplemented: Read as ' 0 '\nbit 6 EBTRB: Boot Block Table Read Protection bit\n1 = Boot block (000000-0007FFh) not protected from table reads executed in other blocks\n0 = Boot block (000000-0007FFh) protected from table reads executed in other blocks",
    "Legend:\nR = Readable bit\nC = Clearable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-12: DEVICE ID REGISTER 1 FOR PIC18F2X1X/4X1X DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV2, 1 = DEV1. DEV2, 2 = DEV0. DEV2, 3 = REV4. DEV2, 4 = REV3. DEV2, 5 = REV2. DEV2, 6 = REV1. DEV2, 7 = REV0\nbit 7\nbit 0",
    "bit 7-5 DEV2:DEV0: Device ID bits\n011 = PIC18F2410\n001 = PIC18F2510\n111 = PIC18F2515\n101 = PIC18F2610\n111 = PIC18F4410\n101 = PIC18F4510\n011 = PIC18F4515\n001 = PIC18F4610",
    "bit 4-0 REV4:REV0: Revision ID bits\nThese bits are used to indicate the device revision.",
    "Legend:\nR = Read-only bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "REGISTER 22-13: DEVICE ID REGISTER 2 FOR PIC18F2X1X/4X1X DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV10, 1 = DEV9. DEV10, 2 = DEV8. DEV10, 3 = DEV7. DEV10, 4 = DEV6. DEV10, 5 = DEV5. DEV10, 6 = DEV4. DEV10, 7 = DEV3\nbit 7\nbit 0",
    "bit 7-0 DEV10:DEV3: Device ID bits\nThese bits are used with the DEV2:DEV0 bits in the Device ID Register 1 to identify the part number.\n0000 1100 = PIC18F4610/2610/4515/2515 devices\n0001 0001\n= PIC18F2510/2410 devices\n0000 1100 = PIC18F4510/4410 devices\nNote:\nThese values for DEV10:DEV3 may be shared with other devices. The specific device is always identified by using the entire DEV10:DEV0 bit sequence.",
    "Legend:\nR = Read-only bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value when device is unprogrammed\nu = Unchanged from programmed state",
    "22.2 Watchdog Timer (WDT)\nFor PIC18F2X1X/4X1X devices, the WDT is driven by the  INTRC  source.  When  the  WDT  is  enabled,  the clock source is also enabled. The nominal WDT period is  4 ms  and  has  the  same  stability  as  the  INTRC oscillator.\nThe 4 ms period of the WDT is multiplied by a 16-bit postscaler. Any  output  of  the  WDT  postscaler  is selected by a multiplexer, controlled by bits in Configuration Register 2H. Available periods range from 4 ms to  131.072 seconds  (2.18  minutes).  The  WDT  and postscaler are cleared when any of the following events occur: a SLEEP or CLRWDT instruction is executed, the IRCF  bits  (OSCCON<6:4>)  are  changed  or  a  clock failure has occurred.",
    "22.2 Watchdog Timer (WDT)\nNote 1: The CLRWDT and SLEEP instructions clear  the  WDT  and  postscaler  counts when executed.\n2: Changing  the  setting  of  the  IRCF  bits (OSCCON<6:4>)  clears  the  WDT  and postscaler counts.\n3: When a CLRWDT instruction is executed, the postscaler count will be cleared.",
    "22.2.1 CONTROL REGISTER\nRegister 22-14 shows the WDTCON register. This is a readable and writable register which contains a control bit that allows software to override the WDT Configuration bit, but only if the Configuration bit has disabled the WDT.",
    "REGISTER 22-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nU-0, 1 = U-0. U-0, 2 = U-0. U-0, 3 = U-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = -. -, 3 = -. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = SWDTEN (1)\nbit 7\nbit 0\nbit 7-1 Unimplemented : Read as ' 0 '\nbit 0\nSWDTEN: Software Controlled Watchdog Timer Enable bit (1)\n1 = Watchdog Timer is on\n0 = Watchdog Timer is off\nNote 1: This bit has no effect if the Configuration bit, WDTEN, is enabled.\nLegend:, 1 = Legend:. R = Readable bit, 1 = W=Writable bit. U = Unimplemented bit, read as '0', 1 = -n = Value at POR",
    "TABLE 22-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nRCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on page = 50. WDTCON, Bit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN (2). WDTCON, Reset Values on page = 52",
    "TABLE 22-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Watchdog Timer.\nNote 1: The SBOREN bit is only available when the BOREN1:BOREN0 Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 4.4 'Brown-out Reset (BOR)' .\n2: This bit has no effect if the Configuration bit, WDTEN, is enabled.",
    "22.3 Two-Speed Start-up\nThe Two-Speed Start-up feature helps to minimize the latency period from oscillator start-up to code execution by  allowing  the  microcontroller  to  use  the  INTOSC oscillator  as  a  clock  source  until  the  primary  clock source is available. It is enabled by setting the IESO Configuration bit.\nTwo-Speed  Start-up  should  be  enabled  only  if  the Primary  Oscillator  mode  is  LP,  XT,  HS  or  HSPLL (Crystal-Based modes). Other sources do not require an OST start-up delay; for these, Two-Speed Start-up should be disabled.\nWhen enabled, Resets and wake-ups from Sleep mode cause  the  device  to  configure  itself  to  run  from  the internal oscillator block as the clock source, following the time-out of the Power-up Timer after a Power-on Reset is enabled. This allows almost immediate code execution  while  the  primary  oscillator  starts  and  the OST is running. Once the OST times out, the device automatically switches to PRI_RUN mode.",
    "22.3 Two-Speed Start-up\nIn all other power-managed modes, Two-Speed Startup  is  not  used.  The  device  will  be  clocked  by  the currently selected clock source until the primary clock source becomes available. The setting of the IESO bit is ignored.",
    "22.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nWhile using the INTOSC oscillator in Two-Speed Startup, the device still obeys the normal command sequences for entering power-managed modes, including multiple SLEEP instructions (refer to Section 3.1.4 'Multiple Sleep Commands' ). In practice,  this  means  that  user  code  can  change  the SCS1:SCS0  bit  settings  or  issue SLEEP instructions before the OST  times out. This would allow an application to briefly wake-up, perform routine 'housekeeping'  tasks  and  return  to  Sleep  before  the device starts to operate from the primary oscillator.\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits  IRCF2:IRCF0 immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF2:IRCF0 bits prior to entering Sleep mode.",
    "22.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nUser code can also check if the primary clock source is currently providing the device clocking by checking the status of the OSTS bit (OSCCON<3>). If the bit is set, the primary oscillator is providing the clock. Otherwise, the internal oscillator block is providing the clock during wake-up from Reset or Sleep mode.",
    "22.4 Fail-Safe Clock Monitor\nThe Fail-Safe Clock Monitor (FSCM) allows the microcontroller to continue operation in the event of an external oscillator failure by automatically switching the device clock to the internal oscillator block. The FSCM function is enabled by setting the FCMEN Configuration bit.\nWhen FSCM is enabled, the INTRC oscillator runs at all times to monitor clocks to peripherals and provide a backup  clock  in  the  event  of  a  clock  failure.  Clock monitoring (shown in Figure 22-3) is accomplished by creating a sample clock signal, which is the INTRC output  divided  by  64.  This  allows  ample  time  between FSCM sample  clocks  for  a  peripheral  clock  edge  to occur.  The  peripheral  device  clock  and  the  sample clock are presented as inputs to the Clock Monitor latch (CM). The CM is set on the falling edge of the device clock  source,  but  cleared  on  the  rising  edge  of  the sample clock.",
    "FIGURE 22-3: FSCM BLOCK DIAGRAM\nClock  failure  is  tested  for  on  the  falling  edge  of  the sample  clock.  If  a  sample  clock  falling  edge  occurs while CM is still set, a clock failure has been detected (Figure 22-4). This causes the following:\n\u00b7 the FSCM generates an oscillator fail interrupt by setting bit OSCFIF (PIR2<7>);\n\u00b7 the device clock source is switched to the internal oscillator block (OSCCON is not updated to show the current clock source - this is the fail-safe condition); and\n\u00b7 the WDT is reset.\nDuring switchover, the postscaler frequency from the internal oscillator block may not be sufficiently stable for timing sensitive applications. In these cases, it may be desirable to select another clock configuration and enter an alternate power-managed mode. This can be done  to  attempt  a  partial  recovery  or execute  a controlled shutdown.  See Section 3.1.4  'Multiple Sleep Commands' and Section 22.3.1 'Special Considerations for Using Two-Speed Start-up' for more details.",
    "FIGURE 22-3: FSCM BLOCK DIAGRAM\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits,  IRCF2:IRCF0, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF2:IRCF0 bits prior to entering Sleep mode.\nThe FSCM will detect failures of the primary or secondary clock sources only. If  the internal  oscillator  block fails, no failure would be detected, nor would any action be possible.",
    "22.4.1 FSCM AND THE WATCHDOG TIMER\nBoth  the  FSCM  and  the  WDT  are  clocked  by  the INTRC  oscillator.  Since  the  WDT  operates  with  a separate divider and counter, disabling the WDT has no effect on the operation of the INTRC oscillator when the FSCM is enabled.\nAs already noted, the clock source is switched to the INTOSC  clock  when  a  clock  failure is detected. Depending on the frequency selected by the IRCF2:IRCF0 bits, this may mean a substantial change in the speed of code execution. If the WDT is enabled with a small prescale value, a decrease in clock speed allows  a  WDT  time-out  to  occur  and  a  subsequent device  Reset.  For  this  reason,  fail-safe  clock  events also reset the WDT and postscaler, allowing it to start timing from when execution speed was changed and decreasing the likelihood of an erroneous time-out.",
    "22.4.2 EXITING FAIL-SAFE OPERATION\nThe fail-safe condition is terminated by either a device Reset  or  by  entering  a  power-managed  mode.  On Reset,  the  controller  starts  the  primary  clock  source specified in Configuration Register 1H  (with any required start-up delays that are required for the oscillator mode, such as OST or PLL timer). The INTOSC multiplexer provides the device clock until the primary clock source becomes ready (similar to a Two-Speed Start-up). The clock source is then switched to the primary clock (indicated by the OSTS bit in the OSCCON register  becoming  set).  The  Fail-Safe  Clock  Monitor then resumes monitoring the peripheral clock.\nThe  primary  clock  source  may  never  become  ready during start-up. In this case, operation is clocked by the INTOSC multiplexer. The OSCCON register will remain in  its  Reset  state  until  a  power-managed  mode  is entered.",
    "22.4.4 POR OR WAKE FROM SLEEP\nBy entering a power-managed mode, the clock multiplexer  selects  the  clock  source  selected  by  the OSCCON register. Fail-Safe Monitoring of the powermanaged clock source resumes in the power-managed mode.\nIf  an  oscillator  failure  occurs  during  power-managed operation, the subsequent events depend on whether or  not  the  oscillator  failure  interrupt  is  enabled.  If enabled (OSCFIF = 1 ), code execution will be clocked by  the  INTOSC  multiplexer.  An  automatic  transition back to the failed clock source will not occur.\nIf the interrupt is disabled, subsequent interrupts while in  Idle  mode  will  cause  the  CPU  to  begin  executing instructions while being clocked by the INTOSC source.\nThe FSCM is designed to detect oscillator failure at any point  after  the  device  has  exited  Power-on  Reset (POR) or low-power Sleep mode. When the primary device clock is EC, RC or INTRC modes, monitoring can begin immediately following these events.",
    "22.4.4 POR OR WAKE FROM SLEEP\nFor  oscillator  modes  involving  a  crystal  or  resonator (HS,  HSPLL,  LP  or  XT),  the  situation  is  somewhat different.  Since  the  oscillator  may  require  a  start-up time considerably longer than the FCSM sample clock time, a false clock failure may be detected. To prevent this, the internal oscillator block is automatically configured as the device clock and functions until the primary clock  is  stable  (the  OST  and  PLL  timers  have  timed out).  This  is  identical  to  Two-Speed  Start-up  mode. Once the primary clock is stable, the INTRC returns to its role as the FSCM source.",
    "Note:\nThe same logic that prevents false oscillator failure interrupts on POR or wake from Sleep,  will  also  prevent  the  detection  of the oscillator's failure to start at all following these events. This can be avoided by monitoring  the  OSTS  bit  and  using  a timing routine to determine if the oscillator is  taking  too  long  to  start.  Even  so,  no oscillator failure interrupt will be flagged.\nAs noted in Section 22.3.1 'Special Considerations for Using Two-Speed Start-up' , it is also possible to select another clock configuration and enter an alternate power-managed mode while waiting for the primary clock to become stable. When the new powermanaged  mode  is  selected,  the  primary  clock  is disabled.",
    "22.5 Program Verification and Code Protection\nThe  overall  structure  of  the  code  protection  on  the PIC18  Flash  devices  differs  significantly  from  other PIC \u00ae  devices.\nThe user program memory is divided into five blocks. One of these is a boot block of 2 Kbytes. The remainder of  the  memory  is  divided  into  four  blocks  on  binary boundaries.\n\u00b7 Code-Protect bit (CPn)\n\u00b7 Write-Protect bit (WRTn)\n\u00b7 External Block Table Read bit (EBTRn)\nFigure 22-5 shows the program memory organization for  16-  and  32-Kbyte  devices  and  the  specific  code protection bit associated with each block.\nEach of the five blocks has three code protection bits associated with them. They are:\nFigure 22-6 shows the program memory organization for  48  and  64-Kbyte  devices  and  the  specific  code protection bit  associated with each block. The actual locations of the bits are summarized in Table 22-3.",
    "MEMORY SIZE/DEVICE\nBoot Block, 32 Kbytes (PIC18F2510/4510) = Boot Block. Boot Block, Address Range = 000000h 0007FFh. Boot Block, Block Code Protection.Controlled By: = CPB, WRTB, EBTRB. Block 0, 32 Kbytes (PIC18F2510/4510) = Block 0. Block 0, Address Range = 000800h 001FFFh. Block 0, Block Code Protection.Controlled By: = CP0, WRT0, EBTR0. Block 1, 32 Kbytes (PIC18F2510/4510) = Block 1. Block 1, Address Range = 002000h 003FFFh. Block 1, Block Code Protection.Controlled By: = CP1, WRT1, EBTR1. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2510/4510) = Block 2. Unimplemented Read ' 0 's, Address Range = 004000h 005FFFh. Unimplemented Read ' 0 's, Block Code Protection.Controlled By: = CP2,",
    "MEMORY SIZE/DEVICE\nWRT2, EBTR2. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2510/4510) = Block 3. Unimplemented Read ' 0 's, Address Range = 006000h 007FFFh. Unimplemented Read ' 0 's, Block Code Protection.Controlled By: = CP3, WRT3, EBTR3. Unimplemented Read ' 0 's, 32 Kbytes (PIC18F2510/4510) = Unimplemented Read ' 0 's. Unimplemented Read ' 0 's, Address Range = (Unimplemented Memory Space). Unimplemented Read ' 0 's, Block Code Protection.Controlled By: = (Unimplemented Memory Space)",
    "FIGURE 22-6:\nCODE-PROTECTED PROGRAM MEMORY FOR PIC18F2515/2610/4515/4610",
    "MEMORY SIZE/DEVICE\nBoot Block, 64 Kbytes (PIC18F2610/4610) = Boot Block. Boot Block, Address = 000000h 0007FFh. Boot Block, Block Code Protection Controlled By:.Block Code Protection Controlled By: = CPB,. Block 0, 64 Kbytes (PIC18F2610/4610) = Block 0. Block 0, Address = 000800h 003FFFh. Block 0, Block Code Protection Controlled By:.Block Code Protection Controlled By: = CP0,. Block 1, 64 Kbytes (PIC18F2610/4610) = Block 1. Block 1, Address = 004000h 007FFFh. Block 1, Block Code Protection Controlled By:.Block Code Protection Controlled By: = CP1, WRT1, EBTR1. Block 2, 64 Kbytes (PIC18F2610/4610) = Block 2. Block 2, Address = 008000h 00BFFFh. Block 2, Block Code Protection Controlled By:.Block Code Protection Controlled By: = CP2,. Unimplemented Read ' 0 's, 64 Kbytes",
    "MEMORY SIZE/DEVICE\n(PIC18F2610/4610) = Block 3. Unimplemented Read ' 0 's, Address = 00C000h 00FFFFh. Unimplemented Read ' 0 's, Block Code Protection Controlled By:.Block Code Protection Controlled By: = CP3, WRT3, EBTR3",
    "TABLE 22-3: SUMMARY OF CODE PROTECTION REGISTERS\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = CP3 (1,2). 300008h, Bit 2 = CP2 (1). 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = -. 300009h, Bit 6 = CPB. 300009h, Bit 5 = -. 300009h, Bit 4 = -. 300009h, Bit 3 = -. 300009h, Bit 2 = -. 300009h, Bit 1 = -. 300009h, Bit 0 = -. 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = -. 30000Ah, Bit 6 = -. 30000Ah, Bit 5 = -. 30000Ah, Bit",
    "TABLE 22-3: SUMMARY OF CODE PROTECTION REGISTERS\n4 = -. 30000Ah, Bit 3 = WRT3 (1,2). 30000Ah, Bit 2 = WRT2 (1). 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = -. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = -. 30000Bh, Bit 3 = -. 30000Bh, Bit 2 = -. 30000Bh, Bit 1 = -. 30000Bh, Bit 0 = -. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = EBTR3 (1,2). 30000Ch, Bit 2 = EBTR2 (1). 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 =",
    "TABLE 22-3: SUMMARY OF CODE PROTECTION REGISTERS\nEBTR0. 30000Dh, File Name = CONFIG7H. 30000Dh, Bit 7 = -. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = -. 30000Dh, Bit 4 = -. 30000Dh, Bit 3 = -. 30000Dh, Bit 2 = -. 30000Dh, Bit 1 = -. 30000Dh, Bit 0 = -\n- Legend: Shaded cells are unimplemented.\nNote\n1: Unimplemented in PIC18F2410/4410 devices; maintain this bit set.\n2: Unimplemented in PIC18F2515/4515 devices; maintain this bit set.",
    "22.5.1 PROGRAM MEMORY CODE PROTECTION\nThe program memory may be read to or written from any  location  using  the  table  read  and  table  write instructions.  The  Device  ID  may  be  read  with  table reads.  The  Configuration  registers  may  be  read  and written with the table read and table write instructions.",
    "PIC18F2X1X/4X1X\nfrom a location outside of that block is not allowed to read  and  will result in reading  ' 0 's. Figures 22-7 through 22-10  illustrate  table  write  and  table  read protection.\nNote:\nIn Normal Execution mode, the CPn bits have no direct effect. CPn bits inhibit external reads and writes. The EBTRn bits  control  table  reads.  For  a  block  of  user memory  with  the  EBTRn  bit  set  to  ' 0 ',  a  table  read instruction  that  executes  from  within  that  block  is allowed to read. A table read instruction that executes\nCode protection bits may only be written to a ' 0 '  from a ' 1 '  state. It is not possible to write  a  ' 1 '  to  a  bit  in  the  ' 0 '  state.  Code protection bits are only set to ' 1 ' by a full chip erase or block erase function. The full chip erase and block erase functions can only  be  initiated  via  ICSP  or  an  external programmer.",
    "FIGURE 22-7: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED (16-KBYTE AND 32-KBYTE DEVICES)\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Program Memory = 000000h 0007FFh 000800h. TBLPTR = 0008FFh, Configuration Bit Settings = WRTB, EBTRB = 11. PC = 003FFEh, Program Memory = TBLRD*. PC = 003FFEh, Program Memory = 001FFFh 002000h 003FFFh 004000h 005FFFh 006000h. PC = 003FFEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11 WRT3, EBTR3 = 11. Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Program Memory = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.. Results: All table",
    "FIGURE 22-7: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED (16-KBYTE AND 32-KBYTE DEVICES)\nreads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Program Memory = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.. Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Configuration Bit Settings = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.",
    "FIGURE 22-8: EXTERNAL BLOCK TABLE READ (EBTRn) ALLOWED (16-KBYTE AND 32-KBYTE DEVICES)\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Configuration Bit Settings = WRT0, EBTR0 = 10. Results: Table reads permitted within Blockn, even when EBTRBn = TABLAT register returns the value of the data at the location, Program Memory = 0 . TBLPTR. 005FFFh 006000h 007FFFh. Results: Table reads permitted within Blockn, even when EBTRBn = TABLAT register returns the value of the data at the location, Configuration Bit Settings = WRT2, EBTR2 = 11 WRT3, EBTR3 = 11",
    "FIGURE 22-9: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED (48-KBYTE AND 64-KBYTE DEVICES)\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Program Memory = 000000h 0007FFh 000800h. TBLPTR = 0008FFh, Configuration Bit Settings = WRTB, EBTRB = 11. PC = 003FFEh, Program Memory = TBLRD*. PC = 003FFEh, Program Memory = 003FFFh 004000h 007FFFh 008000h. PC = 003FFEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11 WRT3, EBTR3 = 11. Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Program Memory = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.. Results: All table reads from external blocks to Blockn are",
    "FIGURE 22-9: EXTERNAL BLOCK TABLE READ (EBTRn) DISALLOWED (48-KBYTE AND 64-KBYTE DEVICES)\ndisabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Program Memory = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.. Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '., Configuration Bit Settings = Results: All table reads from external blocks to Blockn are disabled whenever EBTRn = 0 . TABLAT register returns a value of ' 0 '.",
    "FIGURE 22-10: EXTERNAL BLOCK TABLE READ (EBTRn) ALLOWED (48-KBYTE AND 64-KBYTE DEVICES)\nTBLPTR = 0008FFh, Program Memory = . TBLPTR = 0008FFh, Configuration Bit Settings = WRT0, EBTR0 = 10. Results: Table reads permitted within Blockn, even when TABLAT register returns the value of the data at the, Program Memory = EBTRBn = 0 . location TBLPTR. 00BFFFh 00C000h 00FFFFh. Results: Table reads permitted within Blockn, even when TABLAT register returns the value of the data at the, Configuration Bit Settings = WRT2, EBTR2 = 11 WRT3, EBTR3 = 11",
    "22.8 In-Circuit Debugger\nThe  Configuration  registers  can  be  write-protected. The WRTC bit controls protection of the Configuration registers. In Normal Execution mode, the WRTC bit is readable only. WRTC can only be written via ICSP or an external programmer.",
    "22.6 ID Locations\nEight memory locations (200000h-200007h) are designated as ID locations, where the user can store checksum or other code identification numbers. These locations are both readable and writable during normal execution through the TBLRD instruction; during program/verify these locations are readable and writable. The ID locations can be read when the device is code-protected.",
    "22.7 In-Circuit Serial Programming\nPIC18F2X1X/4X1X  microcontrollers  can  be  serially programmed while in the end application circuit. This is simply done with two lines for clock and data and three other  lines  for  power,  ground  and  the  programming voltage. This allows customers to manufacture boards with  unprogrammed  devices  and  then  program  the microcontroller just before shipping the product. This also  allows  the  most  recent  firmware  or  a  custom firmware to be programmed.\nWhen the DEBUG Configuration bit is programmed to a ' 0 ', the In-Circuit Debugger functionality is enabled. This function allows simple debugging functions when used with MPLAB \u00ae  IDE. When the microcontroller has this feature enabled, some resources are not available for general use. Table 22-4 shows which resources are required by the background debugger.\nTABLE 22-4: DEBUGGER RESOURCES\n\nI/O pins:, 1 = RB6, RB7. Stack:, 1 = 2 levels. Program Memory:, 1 = 512 bytes. Data Memory:, 1 = 10 bytes",
    "22.7 In-Circuit Serial Programming\nTo use the In-Circuit Debugger function of the microcontroller, the design must implement In-Circuit Serial Programming  connections  to  MCLR/VPP/RE3,  VDD, VSS, RB7 and RB6. This will interface to the In-Circuit Debugger module available from Microchip or one of the third party development tool companies.",
    "22.9 Single-Supply ICSP Programming\nThe LVP Configuration bit enables Single-Supply ICSP Programming  (formerly  known  as  Low-Voltage  ICSP Programming or LVP).  When Single-Supply  Programming is enabled, the microcontroller can be programmed without  requiring  high  voltage  being  applied  to  the MCLR/VPP/RE3 pin, but the RB5/KBI1/PGM pin is then dedicated to controlling Program mode entry and is not available as a general purpose I/O pin.\nWhile  programming,  using  Single-Supply  Programming mode, VDD is applied to the MCLR/VPP/RE3 pin as in Normal Execution mode. To enter Programming mode, VDD is applied to the PGM pin.",
    "22.9 Single-Supply ICSP Programming\nNote 1: High-voltage programming is always available,  regardless  of  the  state  of  the LVP bit or the PGM pin, by applying VIHH to the MCLR pin.\n2: By default, Single-Supply ICSP is enabled  in  unprogrammed  devices  (as supplied from Microchip) and erased devices.\n3: When Single-Supply Programming is enabled,  the  RB5  pin  can  no  longer  be used as a general purpose I/O pin.\n4: When LVP is enabled, externally pull the PGM pin to VSS to allow normal program execution.\nIf Single-Supply ICSP Programming mode will not be used, the LVP bit can be cleared. RB5/KBI1/PGM then becomes available as the digital I/O pin, RB5. The LVP bit  may  be  set  or  cleared  only  when  using  standard high-voltage programming (VIHH applied to the MCLR/ VPP/RE3 pin). Once LVP has been disabled, only the standard  high-voltage  programming  is  available  and must be used to program the device.",
    "22.9 Single-Supply ICSP Programming\nMemory that is not code-protected can be erased using either a block erase, or erased row by row, then written at any specified VDD. If code-protected memory is to be erased, a block erase is required. If a block erase is to be performed when using Low-Voltage Programming, the device must be supplied with VDD   of 4.5V to 5.5V.",
    "23.0 INSTRUCTION SET SUMMARY\nPIC18F2X1X/4X1X devices  incorporate  the  standard set  of  75  PIC18  core  instructions,  as  well  as  an extended set of 8 new instructions for the optimization of  code  that  is  recursive  or  that  utilizes  a  software stack.  The  extended  set  is  discussed  later  in  this section.",
    "23.1 Standard Instruction Set\nThe standard PIC18 instruction set adds many enhancements to the previous PIC \u00ae  MCU instruction sets, while maintaining an easy migration from these PIC  MCU  instruction  sets.  Most  instructions  are  a single program memory word (16 bits), but there are four  instructions  that  require  two  program  memory locations.\nEach single-word instruction  is  a 16-bit word  divided into an opcode, which specifies the instruction type and one  or  more  operands,  which  further  specify  the operation of the instruction.\nThe instruction set is highly orthogonal and is grouped into four basic categories:\n\u00b7 Byte-oriented operations\n\u00b7 Bit-oriented operations\n\u00b7 Literal operations\n\u00b7 Control operations\nThe PIC18 instruction set summary in Table 23-2 lists byte-oriented , bit-oriented , literal and control operations. Table 23-1 shows the opcode field descriptions.\nMost byte-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The destination of the result (specified by 'd')\n3. The accessed memory (specified by 'a')",
    "23.1 Standard Instruction Set\nThe file register designator 'f' specifies which file register  is  to  be  used  by  the  instruction.  The  destination designator 'd' specifies where the result of the operation is to be placed. If 'd' is zero, the result is placed in the WREG register. If 'd' is one, the result is placed in the file register specified in the instruction.\nAll bit-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The bit in the file register (specified by 'b')\n3. The accessed memory (specified by 'a')\nThe bit field designator 'b' selects the number of the bit affected by the operation, while the file register designator 'f' represents the number of the file in which the bit is located.",
    "PIC18F2X1X/4X1X\nThe literal instructions may use some of the following operands:\n\u00b7 A literal value to be loaded into a file register (specified by 'k')\n\u00b7 The desired FSR register to load the literal value into (specified by 'f')\n\u00b7 No operand required (specified by '-')\nThe control instructions may use some of the following operands:\n\u00b7 A program memory address (specified by 'n')\n\u00b7 The mode of the CALL or RETURN instructions (specified by 's')\n\u00b7 The mode of the table read and table write instructions (specified by 'm')\n\u00b7 No operand required (specified by '-')\nAll instructions  are  a  single  word,  except  for  four double-word instructions. These instructions were made double-word to contain the required information in 32 bits. In the second word, the 4 MSbs are ' 1 's. If this  second  word  is  executed  as  an  instruction  (by itself), it will execute as a NOP .",
    "PIC18F2X1X/4X1X\nAll  single-word  instructions  are  executed  in  a  single instruction cycle, unless a conditional test is true or the program counter is changed as a result of the instruction. In these cases, the execution takes two instruction cycles, with the additional instruction cycle(s) executed as a NOP .\nThe double-word instructions execute in two instruction cycles.\nOne instruction cycle consists of four oscillator periods. Thus, for an oscillator frequency of 4 MHz, the normal instruction execution time is 1 \u03bc s. If a conditional test is true, or the program counter is changed as a result of an instruction, the instruction  execution  time is  2 \u03bc s. Two-word branch instructions (if true) would take 3 \u03bc s.\nFigure 23-1 shows the general formats that the instructions can have. All examples use the convention 'nnh' to represent a hexadecimal number.\nThe  Instruction  Set  Summary,  shown  in  Table 23-2, lists the standard instructions recognized by the Microchip MPASM\u2122 Assembler.\nSection 23.1.1 'Standard Instruction Set' provides a description of each instruction.",
    "TABLE 23-1: OPCODE FIELD DESCRIPTIONS\na, Description = RAM access bit a = 0 : RAM location in Access RAM (BSR register is ignored) a = 1 : RAM bank is specified by BSR register. bbb, Description = Bit address within an 8-bit file register (0 to 7).. BSR, Description = Bank Select Register. Used to select the current RAM bank.. C, DC, Z, OV,, Description = ALU Status bits: C arry, D igit C arry, Z ero, Ov erflow, N egative.. d, Description = Destination select bit d = 0 : store result in WREG d = 1 : store result in file register f. dest, Description = Destination: either the WREG register or the specified register file location.. f, Description = 8-bit Register file address (00h to FFh) or 2-bit FSR designator (0h to 3h).. f s, Description = 12-bit Register file address (000h to FFFh). This is the source address.. f d, Description = 12-bit Register file address (000h to FFFh). This is",
    "TABLE 23-1: OPCODE FIELD DESCRIPTIONS\nthe destination address.. GIE, Description = Global Interrupt Enable bit.. k, Description = Literal field, constant data or label (may be either an 8-bit, 12-bit or a 20-bit value).. label, Description = Label name.. mm, Description = The mode of the TBLPTR register for the table read and table write instructions.. *, Description = Only used with table read and table write instructions: No change to register (such as TBLPTR with table reads and writes). *+, Description = Post-Increment register (such as TBLPTR with table reads and writes). *-, Description = Post-Decrement register (such as TBLPTR with table reads and writes). +*, Description = Pre-Increment register (such as TBLPTR with table reads and writes). n, Description = The relative address (2's complement number) for relative branch instructions or the direct address for call/branch and return instructions.. PC, Description = Program Counter.. PCL, Description = Program Counter Low Byte.. PCH, Description = Program Counter High Byte.. PCLATH, Description",
    "TABLE 23-1: OPCODE FIELD DESCRIPTIONS\n= Program Counter High Byte Latch.. PCLATU, Description = Program Counter Upper Byte Latch.. PD, Description = Power-down bit.. PRODH, Description = Product of Multiply High Byte.. PRODL s, Description = Product of Multiply Low Byte. Fast Call/Return mode select bit s = 0 : do not update into/from shadow registers s = 1 : certain registers loaded into/from shadow registers (Fast mode). TBLPTR, Description = 21-bit Table Pointer (points to a Program Memory location).. TABLAT, Description = 8-bit Table Latch.. TO, Description = Time-out bit. Top-of-Stack.. TOS, Description = . u, Description = Unused or unchanged.. WDT, Description = Watchdog Timer.. WREG, Description = Working register (accumulator).. x, Description = Don't care (' 0 ' or ' 1 '). The assembler will generate code with x = 0 . It is the recommended form of use for compatibility with all Microchip software tools.. z s, Description = 7-bit offset value for indirect addressing of register files",
    "TABLE 23-1: OPCODE FIELD DESCRIPTIONS\n(source).. z d, Description = 7-bit offset value for indirect addressing of register files (destination).. (text), Description = The contents of text. [expr]<n>, Description = . Specifies bit of the register indicated by the pointer expr .. , Description = n. , Description = field.. \u2192, Description = Assigned to.. < >, Description = Register bit. italics, Description = User defined term (font is Courier).",
    "GENERAL FORMAT FOR INSTRUCTIONS\n, 8 7....(Source.f.....8....................... = n<7:0>. , (FILE...#).#)............................ = (literal)",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nBYTE-ORIENTED OPERATIONS, Mnemonic,.Operands = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Description.Description = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Cycles.Cycles = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Status Affected.Status Affected = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Notes.Notes = BYTE-ORIENTED OPERATIONS. ADDWF, Mnemonic,.Operands = f, d, a. ADDWF, Description.Description = Add WREG and f. ADDWF, Cycles.Cycles = 1. ADDWF, 16-Bit Instruction Word.MSb = 0010. ADDWF, 16-Bit Instruction Word.MSb = 01da. ADDWF, 16-Bit Instruction Word. = ffff. ADDWF,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.LSb = ffff. ADDWF, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWF, Notes.Notes = 1, 2. ADDWFC, Mnemonic,.Operands = f, d, a. ADDWFC, Description.Description = Add WREG and Carry bit to f. ADDWFC, Cycles.Cycles = 1. ADDWFC, 16-Bit Instruction Word.MSb = 0010. ADDWFC, 16-Bit Instruction Word.MSb = 00da. ADDWFC, 16-Bit Instruction Word. = ffff. ADDWFC, 16-Bit Instruction Word.LSb = ffff. ADDWFC, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWFC, Notes.Notes = 1, 2. ANDWF, Mnemonic,.Operands = f, d, a. ANDWF, Description.Description = AND WREG with f. ANDWF, Cycles.Cycles = 1. ANDWF, 16-Bit Instruction Word.MSb = 0001.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nANDWF, 16-Bit Instruction Word.MSb = 01da. ANDWF, 16-Bit Instruction Word. = ffff. ANDWF, 16-Bit Instruction Word.LSb = ffff. ANDWF, Status Affected.Status Affected = Z, N. ANDWF, Notes.Notes = 1,2. CLRF, Mnemonic,.Operands = f, a. CLRF, Description.Description = Clear f. CLRF, Cycles.Cycles = 1. CLRF, 16-Bit Instruction Word.MSb = 0110. CLRF, 16-Bit Instruction Word.MSb = 101a. CLRF, 16-Bit Instruction Word. = ffff. CLRF, 16-Bit Instruction Word.LSb = ffff. CLRF, Status Affected.Status Affected = Z. CLRF, Notes.Notes = 2. COMF, Mnemonic,.Operands = f, d, a. COMF, Description.Description = Complement f. COMF, Cycles.Cycles = 1. COMF, 16-Bit Instruction Word.MSb = 0001. COMF, 16-Bit Instruction",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 11da. COMF, 16-Bit Instruction Word. = ffff. COMF, 16-Bit Instruction Word.LSb = ffff. COMF, Status Affected.Status Affected = Z, N. COMF, Notes.Notes = 1, 2. CPFSEQ, Mnemonic,.Operands = f, a. CPFSEQ, Description.Description = Compare f with WREG, skip =. CPFSEQ, Cycles.Cycles = 1 (2 or 3). CPFSEQ, 16-Bit Instruction Word.MSb = 0110. CPFSEQ, 16-Bit Instruction Word.MSb = 001a. CPFSEQ, 16-Bit Instruction Word. = ffff. CPFSEQ, 16-Bit Instruction Word.LSb = ffff. CPFSEQ, Status Affected.Status Affected = None. CPFSEQ, Notes.Notes = 4. CPFSGT, Mnemonic,.Operands = f, a. CPFSGT, Description.Description = Compare f with WREG, skip >. CPFSGT, Cycles.Cycles = 1",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n(2 or 3). CPFSGT, 16-Bit Instruction Word.MSb = 0110. CPFSGT, 16-Bit Instruction Word.MSb = 010a. CPFSGT, 16-Bit Instruction Word. = ffff. CPFSGT, 16-Bit Instruction Word.LSb = ffff. CPFSGT, Status Affected.Status Affected = None. CPFSGT, Notes.Notes = 4. CPFSLT, Mnemonic,.Operands = f, a. CPFSLT, Description.Description = Compare f with WREG, skip <. CPFSLT, Cycles.Cycles = 1 (2 or 3). CPFSLT, 16-Bit Instruction Word.MSb = 0110. CPFSLT, 16-Bit Instruction Word.MSb = 000a. CPFSLT, 16-Bit Instruction Word. = ffff. CPFSLT, 16-Bit Instruction Word.LSb = ffff. CPFSLT, Status Affected.Status Affected = None. CPFSLT, Notes.Notes = 1, 2. DECF, Mnemonic,.Operands = f, d, a.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nDECF, Description.Description = Decrement f. DECF, Cycles.Cycles = 1. DECF, 16-Bit Instruction Word.MSb = 0000. DECF, 16-Bit Instruction Word.MSb = 01da. DECF, 16-Bit Instruction Word. = ffff. DECF, 16-Bit Instruction Word.LSb = ffff. DECF, Status Affected.Status Affected = C, DC, Z, OV, N. DECF, Notes.Notes = 1, 2, 3, 4. DECFSZ, Mnemonic,.Operands = f, d, a. DECFSZ, Description.Description = Decrement f, Skip if 0. DECFSZ, Cycles.Cycles = 1 (2 or 3). DECFSZ, 16-Bit Instruction Word.MSb = 0010. DECFSZ, 16-Bit Instruction Word.MSb = 11da. DECFSZ, 16-Bit Instruction Word. = ffff. DECFSZ, 16-Bit Instruction Word.LSb = ffff. DECFSZ, Status Affected.Status Affected = None. DECFSZ,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nNotes.Notes = 1, 2, 3, 4. DCFSNZ, Mnemonic,.Operands = f, d, a. DCFSNZ, Description.Description = Decrement f, Skip if Not 0. DCFSNZ, Cycles.Cycles = 1 (2 or 3). DCFSNZ, 16-Bit Instruction Word.MSb = 0100. DCFSNZ, 16-Bit Instruction Word.MSb = 11da. DCFSNZ, 16-Bit Instruction Word. = ffff. DCFSNZ, 16-Bit Instruction Word.LSb = ffff. DCFSNZ, Status Affected.Status Affected = None. DCFSNZ, Notes.Notes = 1, 2. INCF, Mnemonic,.Operands = f, d, a. INCF, Description.Description = Increment f. INCF, Cycles.Cycles = 1. INCF, 16-Bit Instruction Word.MSb = 0010. INCF, 16-Bit Instruction Word.MSb = 10da. INCF, 16-Bit Instruction Word. = ffff. INCF, 16-Bit Instruction Word.LSb =",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nffff. INCF, Status Affected.Status Affected = C, DC, Z, OV, N. INCF, Notes.Notes = 1, 2, 3, 4. INCFSZ, Mnemonic,.Operands = f, d, a. INCFSZ, Description.Description = Increment f, Skip if 0. INCFSZ, Cycles.Cycles = 1 (2 or 3). INCFSZ, 16-Bit Instruction Word.MSb = 0011. INCFSZ, 16-Bit Instruction Word.MSb = 11da. INCFSZ, 16-Bit Instruction Word. = ffff. INCFSZ, 16-Bit Instruction Word.LSb = ffff. INCFSZ, Status Affected.Status Affected = None. INCFSZ, Notes.Notes = 4. INFSNZ, Mnemonic,.Operands = f, d, a. INFSNZ, Description.Description = Increment f, Skip if Not 0. INFSNZ, Cycles.Cycles = 1 (2 or 3). INFSNZ, 16-Bit Instruction Word.MSb = 0100. INFSNZ,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.MSb = 10da. INFSNZ, 16-Bit Instruction Word. = ffff. INFSNZ, 16-Bit Instruction Word.LSb = ffff. INFSNZ, Status Affected.Status Affected = None. INFSNZ, Notes.Notes = 1, 2. IORWF, Mnemonic,.Operands = f, d, a. IORWF, Description.Description = Inclusive OR WREG with f. IORWF, Cycles.Cycles = 1. IORWF, 16-Bit Instruction Word.MSb = 0001. IORWF, 16-Bit Instruction Word.MSb = 00da. IORWF, 16-Bit Instruction Word. = ffff. IORWF, 16-Bit Instruction Word.LSb = ffff. IORWF, Status Affected.Status Affected = Z, N. IORWF, Notes.Notes = 1, 2. MOVF, Mnemonic,.Operands = f, d, a. MOVF, Description.Description = Move f. MOVF, Cycles.Cycles =",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n1. MOVF, 16-Bit Instruction Word.MSb = 0101. MOVF, 16-Bit Instruction Word.MSb = 00da. MOVF, 16-Bit Instruction Word. = ffff. MOVF, 16-Bit Instruction Word.LSb = ffff. MOVF, Status Affected.Status Affected = Z, N. MOVF, Notes.Notes = 1. MOVFF, Mnemonic,.Operands = f s , f d. MOVFF, Description.Description = Move f s (source) to 1st word f d (destination) 2nd word 2. MOVFF, Cycles.Cycles = . MOVFF, 16-Bit Instruction Word.MSb = 1100. MOVFF, 16-Bit Instruction Word.MSb = ffff. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word.LSb = ffff. MOVFF, Status Affected.Status Affected = None. MOVFF, Notes.Notes = . MOVWF, Mnemonic,.Operands = f, a.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nMOVWF, Description.Description = Move WREG to f. MOVWF, Cycles.Cycles = 1. MOVWF, 16-Bit Instruction Word.MSb = 1111 0110. MOVWF, 16-Bit Instruction Word.MSb = ffff 111a. MOVWF, 16-Bit Instruction Word. = ffff ffff. MOVWF, 16-Bit Instruction Word.LSb = ffff ffff. MOVWF, Status Affected.Status Affected = None. MOVWF, Notes.Notes = . MULWF, Mnemonic,.Operands = f, a. MULWF, Description.Description = Multiply WREG with f. MULWF, Cycles.Cycles = 1. MULWF, 16-Bit Instruction Word.MSb = 0000. MULWF, 16-Bit Instruction Word.MSb = 001a. MULWF, 16-Bit Instruction Word. = ffff. MULWF, 16-Bit Instruction Word.LSb = ffff. MULWF, Status Affected.Status Affected =",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n. MULWF, Notes.Notes = . NEGF, Mnemonic,.Operands = f, a. NEGF, Description.Description = Negate f. NEGF, Cycles.Cycles = 1. NEGF, 16-Bit Instruction Word.MSb = 0110. NEGF, 16-Bit Instruction Word.MSb = 110a. NEGF, 16-Bit Instruction Word. = ffff. NEGF, 16-Bit Instruction Word.LSb = ffff. NEGF, Status Affected.Status Affected = None C, DC, Z, OV, N. NEGF, Notes.Notes = 1, 2. RLCF, Mnemonic,.Operands = f, d, a. RLCF, Description.Description = Rotate Left f through Carry. RLCF, Cycles.Cycles = 1. RLCF, 16-Bit Instruction Word.MSb = 0011. RLCF, 16-Bit Instruction Word.MSb = 01da. RLCF, 16-Bit Instruction Word. = ffff. RLCF, 16-Bit Instruction Word.LSb = ffff. RLCF,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nStatus Affected.Status Affected = C, Z, N. RLCF, Notes.Notes = . RLNCF, Mnemonic,.Operands = f, d, a. RLNCF, Description.Description = Rotate Left f (No Carry). RLNCF, Cycles.Cycles = 1. RLNCF, 16-Bit Instruction Word.MSb = 0100. RLNCF, 16-Bit Instruction Word.MSb = 01da. RLNCF, 16-Bit Instruction Word. = ffff. RLNCF, 16-Bit Instruction Word.LSb = ffff. RLNCF, Status Affected.Status Affected = Z, N. RLNCF, Notes.Notes = 1, 2. RRCF, Mnemonic,.Operands = f, d, a. RRCF, Description.Description = Rotate Right f through Carry. RRCF, Cycles.Cycles = 1. RRCF, 16-Bit Instruction Word.MSb = 0011. RRCF, 16-Bit Instruction Word.MSb = 00da. RRCF, 16-Bit Instruction",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nWord. = ffff. RRCF, 16-Bit Instruction Word.LSb = . RRCF, Status Affected.Status Affected = . RRCF, Notes.Notes = . RRNCF, Mnemonic,.Operands = f, d, a. RRNCF, Description.Description = Rotate Right f (No Carry). RRNCF, Cycles.Cycles = 1. RRNCF, 16-Bit Instruction Word.MSb = 0100. RRNCF, 16-Bit Instruction Word.MSb = 00da. RRNCF, 16-Bit Instruction Word. = ffff. RRNCF, 16-Bit Instruction Word.LSb = ffff. RRNCF, Status Affected.Status Affected = C, Z, N. RRNCF, Notes.Notes = . SETF, Mnemonic,.Operands = a. SETF, Description.Description = Set f. SETF, Cycles.Cycles = 1. SETF, 16-Bit Instruction Word.MSb = 0110. SETF, 16-Bit Instruction Word.MSb = 100a. SETF, 16-Bit Instruction Word. =",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nffff. SETF, 16-Bit Instruction Word.LSb = ffff ffff. SETF, Status Affected.Status Affected = Z, N. SETF, Notes.Notes = . , Mnemonic,.Operands = f, f, d, a. , Description.Description = f from WREG. , Cycles.Cycles = 1. , 16-Bit Instruction Word.MSb = 0101. , 16-Bit Instruction Word.MSb = 01da. , 16-Bit Instruction Word. = . , 16-Bit Instruction Word.LSb = ffff. , Status Affected.Status Affected = None. , Notes.Notes = 1, 2. SUBFWB, Mnemonic,.Operands = . SUBFWB, Description.Description = Subtract with borrow. SUBFWB, Cycles.Cycles = . SUBFWB, 16-Bit Instruction Word.MSb = . SUBFWB, 16-Bit Instruction Word.MSb = . SUBFWB, 16-Bit Instruction Word. = ffff. SUBFWB, 16-Bit Instruction Word.LSb = .",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nSUBFWB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBFWB, Notes.Notes = . SUBWF, Mnemonic,.Operands = f, d, a. SUBWF, Description.Description = Subtract WREG from f. SUBWF, Cycles.Cycles = 1. SUBWF, 16-Bit Instruction Word.MSb = 0101. SUBWF, 16-Bit Instruction Word.MSb = 11da. SUBWF, 16-Bit Instruction Word. = ffff. SUBWF, 16-Bit Instruction Word.LSb = ffff. SUBWF, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWF, Notes.Notes = 1, 2. SUBWFB, Mnemonic,.Operands = f, d, a. SUBWFB, Description.Description = Subtract WREG from f with borrow. SUBWFB, Cycles.Cycles = 1. SUBWFB, 16-Bit Instruction Word.MSb = 0101. SUBWFB, 16-Bit Instruction",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 10da. SUBWFB, 16-Bit Instruction Word. = ffff. SUBWFB, 16-Bit Instruction Word.LSb = ffff. SUBWFB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWFB, Notes.Notes = . SWAPF, Mnemonic,.Operands = f, d, a. SWAPF, Description.Description = Swap nibbles in f. SWAPF, Cycles.Cycles = 1. SWAPF, 16-Bit Instruction Word.MSb = 0011. SWAPF, 16-Bit Instruction Word.MSb = 10da. SWAPF, 16-Bit Instruction Word. = ffff. SWAPF, 16-Bit Instruction Word.LSb = ffff. SWAPF, Status Affected.Status Affected = None. SWAPF, Notes.Notes = 4. TSTFSZ, Mnemonic,.Operands = f, a. TSTFSZ, Description.Description = Test f, skip if 0. TSTFSZ, Cycles.Cycles = 1 (2 or 3). TSTFSZ, 16-Bit Instruction Word.MSb",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\n= 0110. TSTFSZ, 16-Bit Instruction Word.MSb = 011a. TSTFSZ, 16-Bit Instruction Word. = ffff. TSTFSZ, 16-Bit Instruction Word.LSb = ffff. TSTFSZ, Status Affected.Status Affected = None. TSTFSZ, Notes.Notes = 1, 2. XORWF, Mnemonic,.Operands = f, d, a. XORWF, Description.Description = Exclusive OR WREG with f. XORWF, Cycles.Cycles = 1. XORWF, 16-Bit Instruction Word.MSb = 0001. XORWF, 16-Bit Instruction Word.MSb = 10da. XORWF, 16-Bit Instruction Word. = ffff. XORWF, 16-Bit Instruction Word.LSb = ffff. XORWF, Status Affected.Status Affected = Z, N. XORWF, Notes.Notes = ",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET\nNote 1: When a Port register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBIT-ORIENTED OPERATIONS, Mnemonic,.Operands = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Description.Description = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Cycles.Cycles = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Status Affected.Status Affected = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Notes.Notes = BIT-ORIENTED OPERATIONS. BCF, Mnemonic,.Operands = f, b, a. BCF, Description.Description = Bit Clear f. BCF, Cycles.Cycles = 1. BCF, 16-Bit Instruction Word.MSb = 1001. BCF, 16-Bit Instruction Word.MSb = bbba. BCF, 16-Bit Instruction Word. = ffff. BCF, 16-Bit Instruction Word.LSb",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= ffff. BCF, Status Affected.Status Affected = None. BCF, Notes.Notes = 1, 2. BSF, Mnemonic,.Operands = f, b, a. BSF, Description.Description = Bit Set f. BSF, Cycles.Cycles = 1. BSF, 16-Bit Instruction Word.MSb = 1000. BSF, 16-Bit Instruction Word.MSb = bbba. BSF, 16-Bit Instruction Word. = ffff. BSF, 16-Bit Instruction Word.LSb = ffff. BSF, Status Affected.Status Affected = None. BSF, Notes.Notes = 1, 2. BTFSC, Mnemonic,.Operands = f, b, a. BTFSC, Description.Description = Bit Test f, Skip if Clear. BTFSC, Cycles.Cycles = 1 (2 or 3). BTFSC, 16-Bit Instruction Word.MSb = 1011. BTFSC, 16-Bit Instruction Word.MSb = bbba. BTFSC, 16-Bit Instruction Word. = ffff. BTFSC,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n16-Bit Instruction Word.LSb = ffff. BTFSC, Status Affected.Status Affected = None. BTFSC, Notes.Notes = 3, 4. BTFSS, Mnemonic,.Operands = f, b, a. BTFSS, Description.Description = Bit Test f, Skip if Set. BTFSS, Cycles.Cycles = 1 (2 or 3). BTFSS, 16-Bit Instruction Word.MSb = 1010. BTFSS, 16-Bit Instruction Word.MSb = bbba. BTFSS, 16-Bit Instruction Word. = ffff. BTFSS, 16-Bit Instruction Word.LSb = ffff. BTFSS, Status Affected.Status Affected = None. BTFSS, Notes.Notes = 3, 4. BTG, Mnemonic,.Operands = f, d, a. BTG, Description.Description = Bit Toggle f. BTG, Cycles.Cycles = 1. BTG, 16-Bit Instruction Word.MSb = 0111. BTG, 16-Bit Instruction Word.MSb = bbba.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBTG, 16-Bit Instruction Word. = ffff. BTG, 16-Bit Instruction Word.LSb = ffff. BTG, Status Affected.Status Affected = None. BTG, Notes.Notes = 1, 2. CONTROL OPERATIONS, Mnemonic,.Operands = CONTROL OPERATIONS. CONTROL OPERATIONS, Description.Description = CONTROL OPERATIONS. CONTROL OPERATIONS, Cycles.Cycles = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word. = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.LSb = CONTROL OPERATIONS. CONTROL OPERATIONS, Status Affected.Status Affected = CONTROL OPERATIONS. CONTROL OPERATIONS, Notes.Notes = CONTROL OPERATIONS. BC, Mnemonic,.Operands = n. BC, Description.Description = Branch if Carry. BC, Cycles.Cycles = 1 (2). BC, 16-Bit Instruction Word.MSb = 1110. BC, 16-Bit Instruction Word.MSb = 0010. BC, 16-Bit Instruction Word. = nnnn. BC,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n16-Bit Instruction Word.LSb = nnnn. BC, Status Affected.Status Affected = None. BC, Notes.Notes = . BN, Mnemonic,.Operands = n. BN, Description.Description = Branch if Negative. BN, Cycles.Cycles = 1 (2). BN, 16-Bit Instruction Word.MSb = 1110. BN, 16-Bit Instruction Word.MSb = 0110. BN, 16-Bit Instruction Word. = nnnn. BN, 16-Bit Instruction Word.LSb = nnnn. BN, Status Affected.Status Affected = None. BN, Notes.Notes = . BNC, Mnemonic,.Operands = n. BNC, Description.Description = Branch if Not Carry. BNC, Cycles.Cycles = 1 (2). BNC, 16-Bit Instruction Word.MSb = 1110. BNC, 16-Bit Instruction Word.MSb = 0011. BNC, 16-Bit Instruction Word. = nnnn. BNC, 16-Bit Instruction Word.LSb = nnnn. BNC, Status Affected.Status Affected",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= None. BNC, Notes.Notes = . BNN, Mnemonic,.Operands = n. BNN, Description.Description = Branch if Not Negative. BNN, Cycles.Cycles = 1 (2). BNN, 16-Bit Instruction Word.MSb = 1110. BNN, 16-Bit Instruction Word.MSb = 0111. BNN, 16-Bit Instruction Word. = nnnn. BNN, 16-Bit Instruction Word.LSb = nnnn. BNN, Status Affected.Status Affected = None. BNN, Notes.Notes = . BNOV, Mnemonic,.Operands = n. BNOV, Description.Description = Branch if Not Overflow. BNOV, Cycles.Cycles = 1 (2). BNOV, 16-Bit Instruction Word.MSb = 1110. BNOV, 16-Bit Instruction Word.MSb = 0101. BNOV, 16-Bit Instruction Word. = nnnn. BNOV, 16-Bit Instruction Word.LSb = nnnn. BNOV, Status Affected.Status Affected = None. BNOV,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNotes.Notes = . BNZ, Mnemonic,.Operands = n. BNZ, Description.Description = Branch if Not Zero. BNZ, Cycles.Cycles = 1 (2). BNZ, 16-Bit Instruction Word.MSb = 1110. BNZ, 16-Bit Instruction Word.MSb = 0001. BNZ, 16-Bit Instruction Word. = nnnn. BNZ, 16-Bit Instruction Word.LSb = nnnn. BNZ, Status Affected.Status Affected = None. BNZ, Notes.Notes = . BOV, Mnemonic,.Operands = n. BOV, Description.Description = Branch if Overflow. BOV, Cycles.Cycles = 1 (2). BOV, 16-Bit Instruction Word.MSb = 1110. BOV, 16-Bit Instruction Word.MSb = 0100. BOV, 16-Bit Instruction Word. = nnnn. BOV, 16-Bit Instruction Word.LSb = nnnn. BOV, Status Affected.Status Affected = None. BOV, Notes.Notes = . BRA,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nMnemonic,.Operands = n. BRA, Description.Description = Branch Unconditionally. BRA, Cycles.Cycles = 2. BRA, 16-Bit Instruction Word.MSb = 1101. BRA, 16-Bit Instruction Word.MSb = 0nnn. BRA, 16-Bit Instruction Word. = nnnn. BRA, 16-Bit Instruction Word.LSb = nnnn. BRA, Status Affected.Status Affected = None. BRA, Notes.Notes = . BZ, Mnemonic,.Operands = n. BZ, Description.Description = Branch if Zero. BZ, Cycles.Cycles = 1 (2). BZ, 16-Bit Instruction Word.MSb = 1110. BZ, 16-Bit Instruction Word.MSb = 0000. BZ, 16-Bit Instruction Word. = nnnn. BZ, 16-Bit Instruction Word.LSb = nnnn. BZ, Status Affected.Status Affected = None. BZ, Notes.Notes = . CALL, Mnemonic,.Operands = n, s. CALL, Description.Description = Call",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nsubroutine 1st word. CALL, Cycles.Cycles = 2. CALL, 16-Bit Instruction Word.MSb = 1110. CALL, 16-Bit Instruction Word.MSb = 110s. CALL, 16-Bit Instruction Word. = kkkk. CALL, 16-Bit Instruction Word.LSb = kkkk. CALL, Status Affected.Status Affected = None. CALL, Notes.Notes = . CLRWDT, Mnemonic,.Operands = -. CLRWDT, Description.Description = Clear Watchdog Timer. CLRWDT, Cycles.Cycles = 1. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word. = 0000. CLRWDT, 16-Bit Instruction Word.LSb = 0100. CLRWDT, Status Affected.Status Affected = TO, PD. CLRWDT, Notes.Notes = . DAW, Mnemonic,.Operands = -. DAW, Description.Description = Decimal Adjust",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWREG. DAW, Cycles.Cycles = 1. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word. = 0000. DAW, 16-Bit Instruction Word.LSb = 0111. DAW, Status Affected.Status Affected = C. DAW, Notes.Notes = . GOTO, Mnemonic,.Operands = n. GOTO, Description.Description = Go to address 1st word 2nd word. GOTO, Cycles.Cycles = 2. GOTO, 16-Bit Instruction Word.MSb = 1110 1111. GOTO, 16-Bit Instruction Word.MSb = 1111 kkkk. GOTO, 16-Bit Instruction Word. = kkkk kkkk. GOTO, 16-Bit Instruction Word.LSb = kkkk kkkk. GOTO, Status Affected.Status Affected = None. GOTO, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNOP, Cycles.Cycles = 1. NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word. = 0000. NOP, 16-Bit Instruction Word.LSb = 0000. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = . NOP, Mnemonic,.Operands = -. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = 1. NOP, 16-Bit Instruction Word.MSb = 1111. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word. = xxxx. NOP, 16-Bit Instruction Word.LSb = xxxx. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = 4. POP, Mnemonic,.Operands = -. POP, Description.Description = Pop top of return stack (TOS). POP, Cycles.Cycles = 1. POP, 16-Bit Instruction",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = 0000. POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word. = 0000. POP, 16-Bit Instruction Word.LSb = 0110. POP, Status Affected.Status Affected = None. POP, Notes.Notes = . PUSH, Mnemonic,.Operands = -. PUSH, Description.Description = Push top of return stack (TOS) 1. PUSH, Cycles.Cycles = . PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word. = 0000. PUSH, 16-Bit Instruction Word.LSb = 0101. PUSH, Status Affected.Status Affected = None. PUSH, Notes.Notes = . RCALL, Mnemonic,.Operands = n. RCALL, Description.Description = Relative Call. RCALL, Cycles.Cycles = 2. RCALL, 16-Bit Instruction Word.MSb = 1101. RCALL, 16-Bit Instruction Word.MSb = 1nnn. RCALL, 16-Bit",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nInstruction Word. = nnnn. RCALL, 16-Bit Instruction Word.LSb = nnnn. RCALL, Status Affected.Status Affected = None. RCALL, Notes.Notes = . RESET, Mnemonic,.Operands = . RESET, Description.Description = Software device Reset. RESET, Cycles.Cycles = 1. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word. = 1111. RESET, 16-Bit Instruction Word.LSb = 1111. RESET, Status Affected.Status Affected = All. RESET, Notes.Notes = . RETFIE, Mnemonic,.Operands = s. RETFIE, Description.Description = Return from interrupt enable. RETFIE, Cycles.Cycles = 2. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word. = 0001. RETFIE, 16-Bit Instruction Word.LSb =",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n000s. RETFIE, Status Affected.Status Affected = GIE/GIEH,. RETFIE, Notes.Notes = . RETLW, Mnemonic,.Operands = k. RETLW, Description.Description = Return with literal in WREG. RETLW, Cycles.Cycles = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW, Notes.Notes = . RETURN, Mnemonic,.Operands = s. RETURN, Description.Description = Return from Subroutine. RETURN, Cycles.Cycles = 2. RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word. = . RETURN, 16-Bit Instruction Word.LSb = . RETURN, Status Affected.Status Affected",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= None. RETURN, Notes.Notes = . SLEEP, Mnemonic,.Operands = . SLEEP, Description.Description = . SLEEP, Cycles.Cycles = . SLEEP, 16-Bit Instruction Word.MSb = . SLEEP, 16-Bit Instruction Word.MSb = . SLEEP, 16-Bit Instruction Word. = 0001. SLEEP, 16-Bit Instruction Word.LSb = 001s. SLEEP, Status Affected.Status Affected = . SLEEP, Notes.Notes = . , Mnemonic,.Operands = -. , Description.Description = Go into Standby mode. , Cycles.Cycles = 1. , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word. = 0000. , 16-Bit Instruction Word.LSb = 0011. , Status Affected.Status Affected = TO, PD. , Notes.Notes = ",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a Port register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nLITERAL OPERATIONS,  = LITERAL OPERATIONS. LITERAL OPERATIONS, Description. = LITERAL OPERATIONS. LITERAL OPERATIONS, Cycles. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.LSb = LITERAL OPERATIONS. LITERAL OPERATIONS, Status Affected. = LITERAL OPERATIONS. LITERAL OPERATIONS,  = LITERAL OPERATIONS. ADDLW,  = k. ADDLW, Description. = Add literal and WREG. ADDLW, Cycles. = 1. ADDLW, 16-Bit Instruction Word.MSb = 0000. ADDLW, 16-Bit Instruction Word.MSb = 1111. ADDLW, 16-Bit Instruction Word. = kkkk. ADDLW, 16-Bit Instruction Word.LSb = kkkk. ADDLW, Status Affected. = C, DC, Z, OV, N. ADDLW,  = . ANDLW,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= k. ANDLW, Description. = AND literal with WREG. ANDLW, Cycles. = 1. ANDLW, 16-Bit Instruction Word.MSb = 0000. ANDLW, 16-Bit Instruction Word.MSb = 1011. ANDLW, 16-Bit Instruction Word. = kkkk. ANDLW, 16-Bit Instruction Word.LSb = kkkk. ANDLW, Status Affected. = Z, N. ANDLW,  = . IORLW,  = k. IORLW, Description. = Inclusive OR literal with WREG. IORLW, Cycles. = 1. IORLW, 16-Bit Instruction Word.MSb = 0000. IORLW, 16-Bit Instruction Word.MSb = 1001. IORLW, 16-Bit Instruction Word. = kkkk. IORLW, 16-Bit Instruction Word.LSb = kkkk. IORLW, Status Affected. = Z, N. IORLW,  = . LFSR,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= f, k. LFSR, Description. = Move literal (12-bit) 2nd word to FSR(f) 1st word. LFSR, Cycles. = 2. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word. = 00ff. LFSR, 16-Bit Instruction Word.LSb = kkkk. LFSR, Status Affected. = None. LFSR,  = . MOVLB,  = k. MOVLB, Description. = Move literal to BSR<3:0>. MOVLB, Cycles. = 1. MOVLB, 16-Bit Instruction Word.MSb = 0000. MOVLB, 16-Bit Instruction Word.MSb = 0001. MOVLB, 16-Bit Instruction Word. = 0000. MOVLB, 16-Bit Instruction Word.LSb = kkkk. MOVLB, Status Affected. = None. MOVLB,  = . MOVLW,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= k. MOVLW, Description. = Move literal to WREG. MOVLW, Cycles. = 1. MOVLW, 16-Bit Instruction Word.MSb = 0000. MOVLW, 16-Bit Instruction Word.MSb = 1110. MOVLW, 16-Bit Instruction Word. = kkkk. MOVLW, 16-Bit Instruction Word.LSb = kkkk. MOVLW, Status Affected. = None. MOVLW,  = . MULLW,  = k. MULLW, Description. = Multiply literal with WREG. MULLW, Cycles. = 1. MULLW, 16-Bit Instruction Word.MSb = 0000. MULLW, 16-Bit Instruction Word.MSb = 1101. MULLW, 16-Bit Instruction Word. = kkkk. MULLW, 16-Bit Instruction Word.LSb = kkkk. MULLW, Status Affected. = None. MULLW,  = . RETLW,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= k. RETLW, Description. = Return with literal in WREG. RETLW, Cycles. = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected. = None. RETLW,  = . SUBLW,  = k. SUBLW, Description. = Subtract WREG from literal. SUBLW, Cycles. = 1. SUBLW, 16-Bit Instruction Word.MSb = 0000. SUBLW, 16-Bit Instruction Word.MSb = 1000. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, 16-Bit Instruction Word.LSb = kkkk. SUBLW, Status Affected. = C, DC, Z, OV, N. SUBLW,  = . XORLW,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= k. XORLW, Description. = Exclusive OR literal with WREG. XORLW, Cycles. = 1. XORLW, 16-Bit Instruction Word.MSb = 0000. XORLW, 16-Bit Instruction Word.MSb = 1010. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, 16-Bit Instruction Word.LSb = kkkk. XORLW, Status Affected. = Z, N. XORLW,  = . DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Description. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Cycles. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.LSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Status Affected. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS,  = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. TBLRD*,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= TBLRD*. TBLRD*, Description. = Table Read. TBLRD*, Cycles. = 2. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word. = 0000. TBLRD*, 16-Bit Instruction Word.LSb = 1000. TBLRD*, Status Affected. = None. TBLRD*,  = . TBLRD*+,  = TBLRD*+. TBLRD*+, Description. = Table Read with post-increment. TBLRD*+, Cycles. = . TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word. = 0000. TBLRD*+, 16-Bit Instruction Word.LSb = 1001. TBLRD*+, Status Affected. = None. TBLRD*+,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= . TBLRD*-,  = TBLRD*-. TBLRD*-, Description. = Table Read with post-decrement. TBLRD*-, Cycles. = . TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word. = 0000. TBLRD*-, 16-Bit Instruction Word.LSb = 1010. TBLRD*-, Status Affected. = None. TBLRD*-,  = . TBLRD+*,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= TBLRD+*. TBLRD+*, Description. = Table Read with pre-increment. TBLRD+*, Cycles. = . TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word. = 0000. TBLRD+*, 16-Bit Instruction Word.LSb = 1011. TBLRD+*, Status Affected. = None. TBLRD+*,  = . TBLWT*,  = TBLWT*. TBLWT*, Description. = Table Write. TBLWT*, Cycles. = 2. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word. = 0000. TBLWT*, 16-Bit Instruction Word.LSb = 1100. TBLWT*, Status Affected. = None. TBLWT*,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= . TBLWT*+,  = TBLWT*+. TBLWT*+, Description. = Table Write with post-increment. TBLWT*+, Cycles. = . TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word. = 0000. TBLWT*+, 16-Bit Instruction Word.LSb = 1101. TBLWT*+, Status Affected. = None. TBLWT*+,  = . TBLWT*-,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= TBLWT*-. TBLWT*-, Description. = Table Write with post-decrement. TBLWT*-, Cycles. = . TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word. = 0000. TBLWT*-, 16-Bit Instruction Word.LSb = 1110. TBLWT*-, Status Affected. = None. TBLWT*-,  = . TBLWT+*,",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= TBLWT+*. TBLWT+*, Description. = Table Write with pre-increment. TBLWT+*, Cycles. = . TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word. = 0000. TBLWT+*, 16-Bit Instruction Word.LSb = 1111. TBLWT+*, Status Affected. = None. TBLWT+*,  = ",
    "TABLE 23-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a Port register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and where applicable, 'd' = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "23.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Literal to W = ADDLW. Syntax:, ADD Literal to W = k. Syntax:, ADD Literal to W = . Syntax:, ADD Literal to W = . Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = . Operands:, ADD Literal to W = . Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = . Operation:, ADD Literal to W = . Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = . Status Affected:, ADD Literal to W = . Encoding:, ADD Literal to W = 0000. Encoding:, ADD Literal to W = 1111. Encoding:, ADD Literal to W = kkkk. Encoding:, ADD Literal to W = kkkk.",
    "23.1.1 STANDARD INSTRUCTION SET\nDescription:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Words:, ADD Literal to W = 1. Words:, ADD Literal to W = . Words:, ADD Literal to W = . Words:, ADD Literal to W = . Cycles:, ADD Literal to W = 1. Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Q Cycle Activity: Q1, ADD Literal to W = Q2. Q Cycle Activity: Q1, ADD Literal to W = . Q Cycle Activity: Q1, ADD Literal to W = . Q Cycle Activity: Q1, ADD Literal",
    "23.1.1 STANDARD INSTRUCTION SET\nto W = . Decode, ADD Literal to W = Read. Decode, ADD Literal to W = Process Data. Decode, ADD Literal to W = Q3. Decode, ADD Literal to W = Q4 Write to W\nExample:\nADDLW 15h\nBefore Instruction\nW = 10h\nAfter Instruction\nW = 25h",
    "23.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Wto f = ADDWF. Syntax:, ADD Wto f = f {,d {,a}}. Syntax:, ADD Wto f = . Syntax:, ADD Wto f = . Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = . Operation:, ADD Wto f = . Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f",
    "23.1.1 STANDARD INSTRUCTION SET\n= N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Encoding:, ADD Wto f = 0010. Encoding:, ADD Wto f = 01da. Encoding:, ADD Wto f = ffff. Encoding:, ADD Wto f = ffff. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD",
    "23.1.1 STANDARD INSTRUCTION SET\nWto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the",
    "23.1.1 STANDARD INSTRUCTION SET\nextended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, ADD Wto f = 1. Words:, ADD Wto f = . Words:, ADD Wto f = . Words:, ADD Wto f = . Cycles:, ADD Wto f = 1. Cycles:, ADD Wto f = .",
    "23.1.1 STANDARD INSTRUCTION SET\nCycles:, ADD Wto f = . Cycles:, ADD Wto f = ",
    "Q Cycle Activity:\nExample:\n, Q2.Read register 'f' = ADDWF. , Q3.Process Data = REG, 0, 0. , Q4.Write to destination = . Before Instruction, Q2.Read register 'f' = Before Instruction. Before Instruction, Q3.Process Data = . Before Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 17h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = . After Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 0D9h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write to destination = ",
    "Q Cycle Activity:\nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction format then becomes: {label} instruction argument(s).",
    "PIC18F2X1X/4X1X\nADDWFC, 1 = ADD Wand Carry bit to f. ADDWFC, 2 = ADD Wand Carry bit to f. ADDWFC, 3 = ADD Wand Carry bit to f. ADDWFC, 4 = ADD Wand Carry bit to f. ADDWFC, 5 = . Syntax:, 1 = ADDWFC f {,d {,a}}. Syntax:, 2 = ADDWFC f {,d {,a}}. Syntax:, 3 = ADDWFC f {,d {,a}}. Syntax:, 4 = ADDWFC f {,d {,a}}. Syntax:, 5 = . Operands:, 1 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 2 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 4 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1].",
    "PIC18F2X1X/4X1X\nOperands:, 5 = . Operation:, 1 = (W) + (f) + (C) \u2192 dest. Operation:, 2 = (W) + (f) + (C) \u2192 dest. Operation:, 3 = (W) + (f) + (C) \u2192 dest. Operation:, 4 = (W) + (f) + (C) \u2192 dest. Operation:, 5 = . Status Affected:, 1 = N,OV, C, DC, Z. Status Affected:, 2 = N,OV, C, DC, Z. Status Affected:, 3 = N,OV, C, DC, Z. Status Affected:, 4 = N,OV, C, DC, Z. Status Affected:, 5 = . Encoding:, 1 = 0010. Encoding:, 2 = 00da. Encoding:, 3 = ffff. Encoding:, 4 = ffff. Encoding:, 5 = . Description:, 1 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If",
    "PIC18F2X1X/4X1X\n'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95",
    "PIC18F2X1X/4X1X\n(5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'.",
    "PIC18F2X1X/4X1X\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 5 = . Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = . Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Cycles:, 5 = . Q Cycle Activity: Q1 Decode, 1 = Q2. Q Cycle Activity: Q1 Decode, 2 = Q3. Q Cycle Activity: Q1 Decode, 3 = . Q Cycle Activity: Q1 Decode, 4 = Q4. Q Cycle Activity: Q1 Decode, 5 = . , 1 = Read",
    "PIC18F2X1X/4X1X\nregister 'f'. , 2 = Process Data. , 3 = . , 4 = Write to destination. , 5 = ",
    "Example:\nADDWFC\nREG, 0, 1\nBefore Instruction\nCarry bit\n=\n1\nREG\n=\n02h\nW\n=\n4Dh\nAfter Instruction\nCarry bit =\n0\nREG\n=\n02h\nW\n=\n50h",
    "Example:\nSyntax:, AND Literal with W = ANDLW. Syntax:, AND Literal with W = k. Syntax:, AND Literal with W = . Syntax:, AND Literal with W = . Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = . Operands:, AND Literal with W = . Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = . Operation:, AND Literal with W = . Status Affected:, AND Literal with W = N, Z. Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Encoding:, AND Literal with W = 0000. Encoding:, AND Literal with W = 1011. Encoding:, AND Literal with W = kkkk. Encoding:, AND Literal with W = kkkk. Description:, AND Literal with W = The contents of Ware AND'ed with the 8-bit literal",
    "Example:\n'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware AND'ed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware AND'ed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND Literal with W = The contents of Ware AND'ed with the 8-bit literal 'k'. The result is placed in W.. Words:, AND Literal with W = 1. Words:, AND Literal with W = . Words:, AND Literal with W = . Words:, AND Literal with W = . Cycles:, AND Literal with W = 1. Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q1, AND Literal with W = Q2. Q1, AND Literal with W = Q3. Q1,",
    "Example:\nAND Literal with W = . Q1, AND Literal with W = Q4. Decode, AND Literal with W = Read literal 'k'. Decode, AND Literal with W = Process Data. Decode, AND Literal with W = . Decode, AND Literal with W = Write to W. Example:, AND Literal with W = ANDLW. Example:, AND Literal with W = 05Fh. Example:, AND Literal with W = . Example:, AND Literal with W = . Before Instruction, AND Literal with W = Before Instruction. Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . W, AND Literal with W = = A3h. W, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = . After Instruction, AND Literal with W = After Instruction. After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . W, AND Literal with W = = 03h. W, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = ",
    "AND W with f\nSyntax:\nANDWF      f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(W) .AND. (f) \u2192 dest\nStatus Affected:\nN, Z\nEncoding:\n0001\n01da\nffff\nffff\nDescription:\nThe contents of W are AND'ed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed\nLiteral Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination\nExample:",
    "AND W with f\nANDWF\nREG, 0, 0\nBefore Instruction\nW\n=\n17h\nREG\n=\nC2h\nAfter Instruction\nW\n=\n02h\nREG\n=\nC2h",
    "PIC18F2X1X/4X1X\nBC Branch if Carry, 1 = BC Branch if Carry. BC Branch if Carry, 2 = BC Branch if Carry. BC Branch if Carry, 3 = BC Branch if Carry. BC Branch if Carry, 4 = BC Branch if Carry. BC Branch if Carry, 5 = BC Branch if Carry. BC Branch if Carry, 6 = BC Branch if Carry. BC Branch if Carry, 7 = BC Branch if Carry. Syntax:, 1 = Syntax:. Syntax:, 2 = BC n. Syntax:, 3 = BC n. Syntax:, 4 = BC n. Syntax:, 5 = BC n. Syntax:, 6 = BC n. Syntax:, 7 = BC n. Operands:, 1 = Operands:. Operands:, 2 = -128 \u2264 n \u2264 127. Operands:, 3 = -128 \u2264 n \u2264 127. Operands:, 4 = -128 \u2264 n \u2264 127. Operands:, 5 = -128 \u2264 n \u2264 127. Operands:, 6 = -128 \u2264 n \u2264 127. Operands:, 7 = -128 \u2264 n \u2264 127. Operation:, 1 = Operation:. Operation:, 2 = if Carry bit",
    "PIC18F2X1X/4X1X\nis ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 3 = if Carry bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 4 = if Carry bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 5 = if Carry bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 6 = if Carry bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 7 = if Carry bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Status Affected:, 6 = None. Status Affected:, 7 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0010. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Encoding:, 6 = nnnn. Encoding:, 7 =",
    "PIC18F2X1X/4X1X\n. Description: If, 1 = Description: If. Description: If, 2 = the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 3 = the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 4 = the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 5 = the Carry bit is ' 1 ',",
    "PIC18F2X1X/4X1X\nthen the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 6 = the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 7 = the Carry bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Words:,",
    "PIC18F2X1X/4X1X\n6 = 1. Words:, 7 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Cycles:, 6 = 1(2). Cycles:, 7 = 1(2). Q Cycle Activity: If, 1 = Q Cycle Activity: If. Q Cycle Activity: If, 2 = Q Cycle Activity: If. Q Cycle Activity: If, 3 = . Q Cycle Activity: If, 4 = . Q Cycle Activity: If, 5 = . Q Cycle Activity: If, 6 = . Q Cycle Activity: If, 7 = . Jump:, 1 = Jump:. Jump:, 2 = Jump:. Jump:, 3 = . Jump:, 4 = . Jump:, 5 = . Jump:, 6 = . Jump:, 7 = . , 1 = Q1. , 2 = Q2. , 3 = . , 4 = Q3. , 5 = Q4. , 6 = Q4. , 7 = . , 1 = Decode. , 2",
    "PIC18F2X1X/4X1X\n= Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. , 6 = Write to PC. , 7 = . , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. , 6 = No operation. , 7 = . If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = If No Jump:. If No Jump:, 4 = If No Jump:. If No Jump:, 5 = If No Jump:. If No Jump:, 6 = If No Jump:. If No Jump:, 7 = If No Jump:. , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 5 = . , 6 = . , 7 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = No operation. , 5 = No operation. , 6 = No operation. , 7 = . Example:, 1 =",
    "PIC18F2X1X/4X1X\n. Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . Example:, 6 = . Example:, 7 = . , 1 = . , 2 = HERE. , 3 = BC. , 4 = 5. , 5 = . , 6 = . , 7 = . Before Instruction, 1 = PC. Before Instruction, 2 = =. Before Instruction, 3 = address. Before Instruction, 4 = . Before Instruction, 5 = . Before Instruction, 6 = . Before Instruction, 7 = . After Instruction, 1 = If Carry. After Instruction, 2 = . After Instruction, 3 = . After Instruction, 4 = . After Instruction, 5 = . After Instruction, 6 = . After Instruction, 7 = . , 1 = . , 2 = =. , 3 = . , 4 = +. , 5 = . , 6 = . , 7 = . PC, 1 = . PC, 2 = . PC, 3 = . PC, 4 = . PC, 5 = . PC, 6 = . PC, 7 = . If Carry, 1 = . If Carry, 2 = . If Carry, 3 = . If Carry, 4",
    "PIC18F2X1X/4X1X\n= . If Carry, 5 = . If Carry, 6 = . If Carry, 7 = . PC, 1 = . PC, 2 = . PC, 3 = address. PC, 4 = . PC, 5 = . PC, 6 = . PC, 7 = . , 1 = . , 2 = . , 3 = . , 4 = . , 5 = 2). , 6 = 2). , 7 = . , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = . , 6 = . , 7 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 6 = . , 7 = . , 1 = . , 2 = 0;. , 3 = . , 4 = . , 5 = . , 6 = . , 7 = . , 1 = . , 2 = . , 3 = . , 4 = . , 5 = + 12). , 6 = + 12). , 7 = . , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = . , 6 = . , 7 = . , 1 =",
    "PIC18F2X1X/4X1X\n. , 2 = =. , 3 = . , 4 = . , 5 = . , 6 = . , 7 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 6 = . , 7 = . , 1 = . , 2 = . , 3 = 1;. , 4 = 1;. , 5 = 1;. , 6 = 1;. , 7 = 1;. , 1 = . , 2 = . , 3 = . , 4 = address. , 5 = address. , 6 = address. , 7 = ",
    "PIC18F2X1X/4X1X\nBCF, 1 = Bit Clear f. BCF, 2 = Bit Clear f. BCF, 3 = Bit Clear f. Syntax:, 1 = BCF f, b {,a}. Syntax:, 2 = BCF f, b {,a}. Syntax:, 3 = BCF f, b {,a}. Operands:, 1 = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, 2 = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operation:, 1 = 0 \u2192 f<b>. Operation:, 2 = 0 \u2192 f<b>. Operation:, 3 = 0 \u2192 f<b>. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Encoding:, 1 = 1001. Encoding:, 2 = bbba. Encoding:, 3 = ffff ffff. Description:, 1 = Bit 'b' in register 'f'",
    "PIC18F2X1X/4X1X\nis cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Bit 'b' in register 'f' is cleared. If 'a' is ' 0",
    "PIC18F2X1X/4X1X\n', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = Q4. Decode Example:, 1 = Read register 'f' BCF. Decode Example:, 2 = Process Data FLAG_REG,. Decode Example:, 3 = Write register 'f' 7, 0. Before Instruction FLAG_REG After Instruction, 1 = =. Before Instruction",
    "PIC18F2X1X/4X1X\nFLAG_REG After Instruction, 2 = C7h. Before Instruction FLAG_REG After Instruction, 3 = . FLAG_REG, 1 = =. FLAG_REG, 2 = 47h. FLAG_REG, 3 = \nSyntax:,  = Syntax:. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Syntax:, Branch if Negative = BN n. Operands:,  = Operands:. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operands:, Branch if Negative = -128 \u2264 n \u2264 127. Operation:,",
    "PIC18F2X1X/4X1X\n= Operation:. Operation:, Branch if Negative = if Negative bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Negative = if Negative bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Status Affected:,  = Status Affected:. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Status Affected:, Branch if Negative = None. Encoding:,",
    "PIC18F2X1X/4X1X\n= Encoding:. Encoding:, Branch if Negative = 1110. Encoding:, Branch if Negative = 0110. Encoding:, Branch if Negative = nnnn. Encoding:, Branch if Negative = nnnn. Encoding:, Branch if Negative = nnnn. Description:,",
    "PIC18F2X1X/4X1X\n= Description:. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1",
    "PIC18F2X1X/4X1X\n', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Negative = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:,",
    "PIC18F2X1X/4X1X\n= Words:. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Words:, Branch if Negative = 1. Cycles:,  = Cycles:. Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Cycles:, Branch if Negative = 1(2). Q Cycle Activity: If Jump:,  = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q Cycle Activity: If Jump:, Branch if Negative = . Q1,",
    "PIC18F2X1X/4X1X\n= . Q1, Branch if Negative = Q2. Q1, Branch if Negative = . Q1, Branch if Negative = Q3. Q1, Branch if Negative = . Q1, Branch if Negative = Q4. ,  = Decode. , Branch if Negative = Read literal 'n'. , Branch if Negative = Read literal 'n'. , Branch if Negative = Process Data. , Branch if Negative = Process Data. , Branch if Negative = Write to PC. ,  = No operation. , Branch if Negative = No operation. , Branch if Negative = No operation. , Branch if Negative = No operation. , Branch if Negative = No operation. , Branch if Negative = No operation. If No Jump:,  = If No Jump:. If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . If No Jump:, Branch if Negative = . ,",
    "PIC18F2X1X/4X1X\n= Q1. , Branch if Negative = Q2. , Branch if Negative = Q2. , Branch if Negative = Q3. , Branch if Negative = Q3. , Branch if Negative = Q4. ,  = Decode. , Branch if Negative = Read literal 'n'. , Branch if Negative = Read literal 'n'. , Branch if Negative = Process Data. , Branch if Negative = Process Data. , Branch if Negative = No operation. Example:,  = Example:. Example:, Branch if Negative = HERE. Example:, Branch if Negative = HERE. Example:, Branch if Negative = BN. Example:, Branch if Negative = Jump. Example:, Branch if Negative = . Before Instruction,  = PC. Before Instruction, Branch if Negative = =. Before Instruction, Branch if Negative = address. Before Instruction, Branch if Negative = . Before Instruction, Branch if Negative = (HERE). Before Instruction, Branch if Negative = . ,",
    "PIC18F2X1X/4X1X\n= If Negative PC. , Branch if Negative = If Negative PC. , Branch if Negative = = =. , Branch if Negative = 1; address 0;. , Branch if Negative = (Jump). , Branch if Negative = . ,  = If Negative = PC. , Branch if Negative = If Negative = PC. , Branch if Negative = =. , Branch if Negative = address. , Branch if Negative = (HERE. , Branch if Negative = + 2)",
    "PIC18F2X1X/4X1X\nBNC, 1 = BNC. BNC, 2 = Branch if Not Carry. BNC, 3 = Branch if Not Carry. BNC, 4 = Branch if Not Carry. BNC, 5 = Branch if Not Carry. Syntax:, 1 = Syntax:. Syntax:, 2 = BNC n. Syntax:, 3 = BNC n. Syntax:, 4 = BNC n. Syntax:, 5 = BNC n. Operands:, 1 = Operands:. Operands:, 2 = -128 \u2264 n \u2264 127. Operands:, 3 = -128 \u2264 n \u2264 127. Operands:, 4 = -128 \u2264 n \u2264 127. Operands:, 5 = -128 \u2264 n \u2264 127. Operation:, 1 = Operation:. Operation:, 2 = if Carry bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 3 = if Carry bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 4 = if Carry bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 5 = if Carry bit is ' 0 '",
    "PIC18F2X1X/4X1X\n(PC) + 2 + 2n \u2192 PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110 0011. Encoding:, 3 = 1110 0011. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description:, 1 = Description:. Description:, 2 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 3 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction",
    "PIC18F2X1X/4X1X\nis then a two-cycle instruction.. Description:, 4 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity:,",
    "PIC18F2X1X/4X1X\n1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:, 3 = . If Jump:, 4 = . If Jump:, 5 = . Q1, 1 = . Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. No operation, 1 = . No operation, 2 = No operation. No operation, 3 = No operation. No operation, 4 = No operation. No operation, 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . ,",
    "PIC18F2X1X/4X1X\n1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 5 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . , 1 = . , 2 = HERE. , 3 = BNC. , 4 = . , 5 = . , 1 = Before Instruction. , 2 = . , 3 = . , 4 = . , 5 = . PC, 1 = After Instruction. PC, 2 = =. PC, 3 = address. PC, 4 = . PC, 5 = . , 1 = PC. , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = If Carry. , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = 2). , 5 = 2). , 1 = . , 2 = . , 3 = address",
    "PIC18F2X1X/4X1X\n(HERE. , 4 = . , 5 = . , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = 1;. , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. If, 1 = . If, 2 = . If, 3 = . If, 4 = . If, 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = Carry. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = address. , 4 = address. , 5 = address. , 1 = . , 2 = =. , 3 = (Jump). , 4 = (Jump). , 5 = (Jump). , 1 = . , 2 = . , 3 = 0;. , 4 = 0;. , 5 = 0;",
    "Branch if Not Negative\nSyntax:, 1 = Syntax:. Syntax:, 2 = BNN n. Syntax:, 3 = BNN n. Syntax:, 4 = BNN n. Syntax:, 5 = BNN n. Operands:, 1 = Operands:. Operands:, 2 = -128 \u2264 n \u2264 127. Operands:, 3 = -128 \u2264 n \u2264 127. Operands:, 4 = -128 \u2264 n \u2264 127. Operands:, 5 = -128 \u2264 n \u2264 127. Operation:, 1 = Operation:. Operation:, 2 = if Negative bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 3 = if Negative bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 4 = if Negative bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, 5 = if Negative bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1",
    "Branch if Not Negative\n= Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0111. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description:, 1 = Description:. Description:, 2 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 3 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 4 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 +",
    "Branch if Not Negative\n2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity: If, 1 = Q Cycle Activity: If. Q Cycle Activity: If, 2 = . Q Cycle Activity: If, 3 = . Q Cycle Activity: If, 4 = . Q Cycle Activity: If, 5 = . Jump:, 1 = Jump:. Jump:, 2 = . Jump:, 3 = . Jump:, 4 = . Jump:, 5 =",
    "Branch if Not Negative\n. , 1 = Q1. , 2 = . , 3 = Q2. , 4 = Q3. , 5 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = Process Data. , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = . If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q2. , 4 = Q3. , 5 = Q3. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = Process Data. Example:, 1 = Example:. Example:, 2 = HERE. Example:, 3 = HERE. Example:, 4 = BNN. Example:, 5 = Jump. , 1 = Before Instruction. , 2 = Before Instruction.",
    "Branch if Not Negative\n, 3 = . , 4 = . , 5 = . , 1 = PC =. , 2 = PC =. , 3 = . , 4 = address. , 5 = (HERE). , 1 = PC = If Negative PC. , 2 = PC = If Negative PC. , 3 = = =. , 4 = address (Jump) 1; address. , 5 = (HERE",
    "PIC18F2X1X/4X1X\nSyntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operands:, Branch if Not Overflow = -128 \u2264 n \u2264 127. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if",
    "PIC18F2X1X/4X1X\nOverflow bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 0101. Encoding:, Branch if Not Overflow = nnnn. Encoding:, Branch if Not Overflow = nnnn. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle",
    "PIC18F2X1X/4X1X\ninstruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not",
    "PIC18F2X1X/4X1X\nOverflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle",
    "PIC18F2X1X/4X1X\nActivity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Write to PC. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. If No Jump:, Branch if Not Overflow = . If No Jump:, Branch if Not Overflow = . If No Jump:, Branch if Not",
    "PIC18F2X1X/4X1X\nOverflow = . If No Jump:, Branch if Not Overflow = . If No Jump:, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = No operation. Example: HERE, Branch if Not Overflow = Example: HERE. Example: HERE, Branch if Not Overflow = . Example: HERE, Branch if Not Overflow = BNOV Jump. Example: HERE, Branch if Not Overflow = BNOV Jump. Example: HERE, Branch if Not Overflow = . Before Instruction PC, Branch if Not Overflow = Before Instruction PC. Before Instruction PC, Branch if Not Overflow = =",
    "PIC18F2X1X/4X1X\naddress. Before Instruction PC, Branch if Not Overflow = . Before Instruction PC, Branch if Not Overflow = (HERE). Before Instruction PC, Branch if Not Overflow = . If Overflow = PC, Branch if Not Overflow = If Overflow = PC. If Overflow = PC, Branch if Not Overflow = =. If Overflow = PC, Branch if Not Overflow = 0; address (Jump). If Overflow = PC, Branch if Not Overflow = 0; address (Jump). If Overflow = PC, Branch if Not Overflow = . If Overflow = PC =, Branch if Not Overflow = If Overflow = PC =. If Overflow = PC =, Branch if Not Overflow = . If Overflow = PC =, Branch if Not Overflow = address (HERE. If Overflow = PC =, Branch if Not Overflow = address (HERE. If Overflow = PC =, Branch if Not Overflow = + 2)",
    "PIC18F2X1X/4X1X\nSyntax:, Branch if Not Zero = BNZ n. Syntax:, Branch if Not Zero = BNZ n. Syntax:, Branch if Not Zero = BNZ n. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operation:, Branch if Not Zero = if Zero bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is ' 0 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Encoding:, Branch if Not Zero = 1110. Encoding:, Branch if Not Zero = 0001. Encoding:, Branch if Not Zero = nnnn. Description:, Branch if Not Zero = If the Zero bit is ' 0",
    "PIC18F2X1X/4X1X\n', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1.",
    "PIC18F2X1X/4X1X\nCycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:, Branch if Not Zero = . Q1, Branch if Not Zero = Q2. Q1, Branch if Not Zero = Q3. Q1, Branch if Not Zero = . Decode, Branch if Not Zero = Read literal 'n' Process Data Write to PC No operation No operation No operation. Decode, Branch if Not Zero = Read literal 'n' Process Data Write to PC No operation No operation No operation. Decode, Branch if Not Zero = Read literal 'n' Process Data Write to PC No operation No operation No operation. Q1, Branch if Not Zero = Q2 Q3 Q4. Q1, Branch if Not Zero = Q2 Q3 Q4. Q1, Branch if Not Zero = Q2 Q3 Q4. Decode, Branch if Not Zero = Read literal",
    "PIC18F2X1X/4X1X\n'n' Process Data No. Decode, Branch if Not Zero = Read literal 'n' Process Data No. Decode, Branch if Not Zero = Read literal 'n' Process Data No. , Branch if Not Zero = HERE. , Branch if Not Zero = BNZ Jump. , Branch if Not Zero = operation. PC, Branch if Not Zero = Instruction =. PC, Branch if Not Zero = address (HERE). PC, Branch if Not Zero = . Example:, Branch if Not Zero = . Example:, Branch if Not Zero = . Example:, Branch if Not Zero = . Before, Branch if Not Zero = . Before, Branch if Not Zero = . Before, Branch if Not Zero = 2). After Instruction If Zero, Branch if Not Zero = =. After Instruction If Zero, Branch if Not Zero = . After Instruction If Zero, Branch if Not Zero = . If Zero, Branch if Not Zero = . If Zero, Branch if Not Zero = . If Zero, Branch if Not Zero = . , Branch if Not Zero = =. , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not",
    "PIC18F2X1X/4X1X\nZero = 1;. , Branch if Not Zero = (Jump). , Branch if Not Zero = =. , Branch if Not Zero = . , Branch if Not Zero = 0;. , Branch if Not Zero = =. , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = address. PC, Branch if Not Zero = . PC, Branch if Not Zero = . PC, Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = address. , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = +. , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = (HERE. PC, Branch if Not Zero = PC. PC, Branch if Not Zero = PC. PC, Branch if Not Zero = PC",
    "Unconditional Branch\nSyntax:\nBRA    n\nOperands:\n-1024 \u2264 n \u2264 1023\nOperation:\n(PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1101\n0nnn\nnnnn\nnnnn\nDescription:\nAdd the 2's complement number '2n' to the PC. Since the PC will have incre- mented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal 'n'\nProcess Data\nWrite to PC\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nBefore Instruction PC, HERE = =. Before Instruction PC, BRA = address. Before Instruction PC, Jump = (HERE). After Instruction PC, HERE = =. After Instruction PC, BRA = address. After Instruction PC, Jump = (Jump)",
    "PIC18F2X1X/4X1X\nSyntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Syntax:, Bit Set f = BSF f, b {,a}. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Encoding:, Bit",
    "PIC18F2X1X/4X1X\nSet f = 1000. Encoding:, Bit Set f = bbba. Encoding:, Bit Set f = ffff. Encoding:, Bit Set f = ffff. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95",
    "PIC18F2X1X/4X1X\n(5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Bit Set f = Bit 'b' in register 'f' is set. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh).",
    "PIC18F2X1X/4X1X\nSee Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q1, Bit Set f = Q2. Q1, Bit Set f = Q3. Q1, Bit Set f = Q3. Q1, Bit Set f = Q4 Write register 'f'. Decode Example:, Bit Set f = Read register 'f' BSF. Decode Example:, Bit Set f = Process Data FLAG_REG,. Decode Example:, Bit Set f = 7,. Decode Example:, Bit Set f = 1. Before Instruction FLAG_REG",
    "PIC18F2X1X/4X1X\nAfter Instruction FLAG_REG, Bit Set f = = =. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = 0Ah 8Ah. Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = . Before Instruction FLAG_REG After Instruction FLAG_REG, Bit Set f = ",
    "Bit Test File, Skip if Clear\nSyntax:\nBTFSC   f, b {,a}\nOperands:\n0 \u2264 f \u2264 255\n0 \u2264 b \u2264 7\na \u2208 [0,1]\nOperation:\nskip if (f<b>) = 0\nStatus Affected:\nNone\nEncoding:\n1011\nbbba\nffff\nffff\nDescription:\nIf bit 'b' in register 'f' is ' 0 ', then the next instruction is skipped. If bit 'b' is ' 0 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh).\nSee Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.\nQ Cycle Activity:",
    "Bit Test File, Skip if Clear\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation",
    "If skip:\nQ1\nNo\nQ2\nNo\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSC\n:\n:\nFLAG, 1, 0\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress\n(TRUE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress\n(FALSE)\nQ4\nNo operation",
    "If skip:\nSyntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1.",
    "If skip:\nOperation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Encoding:, Bit Test File, Skip if Set = 1010. Encoding:, Bit Test File, Skip if Set = bbba. Encoding:, Bit Test File, Skip if Set = ffff. Encoding:, Bit Test File, Skip if Set = ffff. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the",
    "If skip:\nBSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is",
    "If skip:\nskipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is",
    "If skip:\nenabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Words:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = 1. Cycles:, Bit Test File, Skip if Set = 1(2) Note: 3 cycles if skip and followed. Cycles:, Bit Test File, Skip if Set = 1(2) Note: 3 cycles if skip and followed. Cycles:, Bit Test File, Skip if Set = 1(2) Note: 3 cycles if skip and followed. Cycles:, Bit Test File, Skip if Set = 1(2) Note: 3 cycles if skip and followed\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation\nIf skip:\nQ1\nNo\nQ2\nNo\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSS FLAG, 1, 0\n:\n:\nAfter Instruction If FLAG<1>, = = = =. After Instruction If FLAG<1>, address = 0; address. After Instruction If FLAG<1>, (HERE) = (FALSE). If FLAG<1>, = = = =. If FLAG<1>, address = 1; address. If FLAG<1>, (HERE) = (TRUE)\nQ4\nNo operation",
    "Q Cycle Activity:\nBTG, 1 = Bit Toggle f. BTG, 2 = Bit Toggle f. BTG, 3 = Bit Toggle f. BTG, 4 = Bit Toggle f. Syntax:, 1 = BTG f, b {,a}. Syntax:, 2 = BTG f, b {,a}. Syntax:, 3 = BTG f, b {,a}. Syntax:, 4 = BTG f, b {,a}. Operands:, 1 = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, 2 = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, 4 = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operation:, 1 = (f<b>) \u2192 f<b>. Operation:, 2 = (f<b>) \u2192 f<b>. Operation:, 3 = (f<b>) \u2192 f<b>. Operation:, 4 =",
    "Q Cycle Activity:\n(f<b>) \u2192 f<b>. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 0111. Encoding:, 2 = bbba. Encoding:, 3 = ffff. Encoding:, 4 = ffff. Description:, 1 = Bit 'b' in data memory location 'f' is inverted. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Bit 'b' in data memory location 'f' is inverted. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank",
    "Q Cycle Activity:\n(default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Bit 'b' in data memory location 'f' is inverted. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = Bit 'b' in data memory location 'f' is inverted. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the",
    "Q Cycle Activity:\nextended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = . Q1, 4 = Q4. Decode, 1 = Read register 'f'. Decode, 2 = Process Data. Decode, 3 = . Decode, 4 = Write register 'f'. Example:, 1 = BTG. Example:, 2 = PORTC,. Example:, 3 = 4, 0. Example:, 4 = . Before Instruction: PORTC =, 1 = 0111. Before Instruction:",
    "Q Cycle Activity:\nPORTC =, 2 = 0101 [75h]. Before Instruction: PORTC =, 3 = . Before Instruction: PORTC =, 4 = . After Instruction: PORTC =, 1 = 0110. After Instruction: PORTC =, 2 = 0101 [65h]. After Instruction: PORTC =, 3 = . After Instruction: PORTC =, 4 = ",
    "PIC18F2X1X/4X1X\nBOV, 1 = BOV. BOV, 2 = Branch if Overflow. BOV, 3 = Branch if Overflow. BOV, 4 = Branch if Overflow. BOV, 5 = Branch if Overflow. BOV, 6 = Branch if Overflow. Syntax:, 1 = Syntax:. Syntax:, 2 = BOV n. Syntax:, 3 = BOV n. Syntax:, 4 = BOV n. Syntax:, 5 = BOV n. Syntax:, 6 = BOV n. Operands:, 1 = Operands:. Operands:, 2 = -128 \u2264 n \u2264 127. Operands:, 3 = -128 \u2264 n \u2264 127. Operands:, 4 = -128 \u2264 n \u2264 127. Operands:, 5 = -128 \u2264 n \u2264 127. Operands:, 6 = -128 \u2264 n \u2264 127. Operation:, 1 = Operation:. Operation:, 2 = if Overflow bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 3 = if Overflow bit is ' 1 ' (PC) + 2 + 2n \u2192 PC.",
    "PIC18F2X1X/4X1X\nOperation:, 4 = if Overflow bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 5 = if Overflow bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 6 = if Overflow bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Status Affected:, 6 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0100. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Encoding:, 6 = nnnn. Description:, 1 = Description:. Description:, 2 = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n.",
    "PIC18F2X1X/4X1X\nThis instruction is then a two-cycle instruction.. Description:, 3 = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 4 = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Overflow bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 6 = If the Overflow bit is",
    "PIC18F2X1X/4X1X\n' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Words:, 6 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Cycles:, 6 = 1(2). Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . Q Cycle Activity:, 6 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:,",
    "PIC18F2X1X/4X1X\n3 = . If Jump:, 4 = . If Jump:, 5 = . If Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = . , 4 = Q3. , 5 = . , 6 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Process Data. , 5 = Write to PC. , 6 = Write to PC. , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. , 6 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . If No Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q3. , 5 = Q4. , 6 = Q4. , 1 = Decode. , 2 = Read literal. , 3 = Process Data. ,",
    "PIC18F2X1X/4X1X\n4 = Process Data. , 5 = No operation. , 6 = No operation. Example: HERE, 1 = Example: HERE. Example: HERE, 2 = Example: HERE. Example: HERE, 3 = BOV. Example: HERE, 4 = Jump. Example: HERE, 5 = . Example: HERE, 6 = . , 1 = PC =. , 2 = PC =. , 3 = address. , 4 = (HERE). , 5 = . , 6 = . , 1 = If Overflow = PC. , 2 = =. , 3 = 1; address 0;. , 4 = (Jump). , 5 = . , 6 = . , 1 = If Overflow = PC. , 2 = =. , 3 = address. , 4 = (HERE. , 5 = + 2). , 6 = + 2)",
    "PIC18F2X1X/4X1X\nBZ Branch if Zero, 1 = BZ Branch if Zero. BZ Branch if Zero, 2 = BZ Branch if Zero. BZ Branch if Zero, 3 = BZ Branch if Zero. BZ Branch if Zero, 4 = BZ Branch if Zero. BZ Branch if Zero, 5 = BZ Branch if Zero. Syntax:, 1 = Syntax:. Syntax:, 2 = BZ n. Syntax:, 3 = BZ n. Syntax:, 4 = BZ n. Syntax:, 5 = BZ n. Operands:, 1 = Operands:. Operands:, 2 = -128 \u2264 n \u2264 127. Operands:, 3 = -128 \u2264 n \u2264 127. Operands:, 4 = -128 \u2264 n \u2264 127. Operands:, 5 = -128 \u2264 n \u2264 127. Operation:, 1 = Operation:. Operation:, 2 = if Zero bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 3 = if Zero bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Operation:, 4 = if Zero bit is ' 1 '",
    "PIC18F2X1X/4X1X\n(PC) + 2 + 2n \u2192 PC. Operation:, 5 = if Zero bit is ' 1 ' (PC) + 2 + 2n \u2192 PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0000. Encoding:, 4 = nnnn. Encoding:, 5 = . Description: If, 1 = Description: If. Description: If, 2 = the Zero bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 3 = the Zero bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch",
    "PIC18F2X1X/4X1X\nthe next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 4 = the Zero bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If, 5 = the Zero bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 =",
    "PIC18F2X1X/4X1X\n1(2). Cycles:, 5 = 1(2). Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:, 3 = . If Jump:, 4 = . If Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 5 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Data. , 4 = Process Write. , 5 = . , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = . , 5 = . If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 =",
    "PIC18F2X1X/4X1X\nQ2. , 3 = Q3. , 4 = . , 5 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = . , 5 = . , 1 = Example:. , 2 = HERE. , 3 = BZ. , 4 = Jump. , 5 = . , 1 = Before Instruction PC. , 2 = . , 3 = . , 4 = (HERE). , 5 = . , 1 = After Instruction. , 2 = =. , 3 = 1;. , 4 = . , 5 = . , 1 = PC. , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . , 1 = If Zero. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = . , 1 = PC. , 2 = . , 3 = . ,",
    "PIC18F2X1X/4X1X\n4 = . , 5 = . , 1 = . , 2 = . , 3 = 0;. , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = 2). , 5 = 2). , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = If Zero. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = (Jump). , 5 = (Jump). , 1 = . , 2 = . , 3 = . , 4 = address. , 5 = address",
    "PIC18F2X1X/4X1X\nSyntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Syntax:, Subroutine Call = CALL k {,s}. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>, if s = 1 (W) \u2192 WS, (STATUS) \u2192 STATUSS,. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>, if s = 1 (W) \u2192 WS, (STATUS) \u2192",
    "PIC18F2X1X/4X1X\nSTATUSS,. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>, if s = 1 (W) \u2192 WS, (STATUS) \u2192 STATUSS,. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>, if s = 1 (W) \u2192 WS, (STATUS) \u2192 STATUSS,. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 110s k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = k 7 kkk kkkk. Encoding:",
    "PIC18F2X1X/4X1X\n1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = . Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>.. Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>.. Description:, Subroutine Call",
    "PIC18F2X1X/4X1X\n= Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>.. Description:, Subroutine Call = Subroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs (default). Then, the 20-bit value 'k' is loaded into PC<20:1>.. Words:, Subroutine Call = 2. Words:, Subroutine Call = 2. Words:, Subroutine Call = 2. Words:, Subroutine Call = 2.",
    "PIC18F2X1X/4X1X\nCycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Cycles:, Subroutine Call = 2. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call = Q Cycle Activity:. Q1, Subroutine Call = Q2. Q1, Subroutine Call = Q2. Q1, Subroutine Call = Q3. Q1, Subroutine Call = Q4. Decode, Subroutine Call = Read literal 'k'<7:0>,. Decode, Subroutine Call = Read literal 'k'<7:0>,. Decode, Subroutine Call = Push PC to stack. Decode, Subroutine Call = Read literal 'k'<19:8>, Write to PC. No operation, Subroutine Call = No operation. No operation, Subroutine Call = No operation. No",
    "PIC18F2X1X/4X1X\noperation, Subroutine Call = No operation. No operation, Subroutine Call = No operation. Example:, Subroutine Call = HERE. Example:, Subroutine Call = HERE. Example:, Subroutine Call = CALL THERE,1. Example:, Subroutine Call = CALL THERE,1. Before Instruction, Subroutine Call = Before Instruction. Before Instruction, Subroutine Call = Before Instruction. Before Instruction, Subroutine Call = Before Instruction. Before Instruction, Subroutine Call = Before Instruction. PC, Subroutine Call = =. PC, Subroutine Call = address. PC, Subroutine Call = (HERE). PC, Subroutine Call = . After Instruction, Subroutine Call = After Instruction. After Instruction, Subroutine Call = After Instruction. After Instruction, Subroutine Call = After Instruction. After Instruction, Subroutine Call = After Instruction. PC, Subroutine Call = = =. PC, Subroutine Call = address address. PC, Subroutine Call = (THERE) (HERE +. PC, Subroutine Call = . TOS WS, Subroutine Call =",
    "PIC18F2X1X/4X1X\n=. TOS WS, Subroutine Call = W. TOS WS, Subroutine Call = . TOS WS, Subroutine Call = . BSRS, Subroutine Call = =. BSRS, Subroutine Call = BSR. BSRS, Subroutine Call = . BSRS, Subroutine Call = . STATUSS=, Subroutine Call = . STATUSS=, Subroutine Call = . STATUSS=, Subroutine Call = . STATUSS=, Subroutine Call = . , Subroutine Call = . , Subroutine Call = STATUS. , Subroutine Call = . , Subroutine Call = ",
    "PIC18F2X1X/4X1X\nSyntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Clear f = 000h \u2192 f 1 \u2192 Z. Operation:, Clear f = 000h \u2192 f 1 \u2192 Z. Operation:, Clear f = 000h \u2192 f 1 \u2192 Z. Operation:, Clear f = 000h \u2192 f 1 \u2192 Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Encoding:, Clear f = 0110. Encoding:, Clear f =",
    "PIC18F2X1X/4X1X\n101a. Encoding:, Clear f = ffff. Encoding:, Clear f = ffff. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset",
    "PIC18F2X1X/4X1X\nMode' for details.. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Clear f = 1.",
    "PIC18F2X1X/4X1X\nWords:, Clear f = 1. Words:, Clear f = 1. Words:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q1, Clear f = Q2. Q1, Clear f = Q2. Q1, Clear f = Q3. Q1, Clear f = Q4. Decode, Clear f = Read register 'f'. Decode, Clear f = Read register 'f'. Decode, Clear f = Process Data. Decode, Clear f = Write register 'f'. Example:, Clear f = CLRF. Example:, Clear f = CLRF. Example:, Clear f = FLAG_REG,1. Example:, Clear f = FLAG_REG,1. Before Instruction, Clear f = Before Instruction. Before Instruction, Clear f = 5Ah. Before Instruction, Clear f = 5Ah. Before",
    "PIC18F2X1X/4X1X\nInstruction, Clear f = 5Ah",
    "PIC18F2X1X/4X1X\nSyntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO, 1 \u2192 PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO,",
    "PIC18F2X1X/4X1X\nPD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0100. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Words:, Clear",
    "PIC18F2X1X/4X1X\nWatchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q3. Q1, Clear Watchdog Timer = . Q1, Clear Watchdog Timer = Q4. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = Process Data. Decode, Clear Watchdog Timer = . Decode, Clear Watchdog Timer = No operation",
    "Example:\nCLRWDT\nBefore Instruction\nWDT Counter\n=\n?\nAfter Instruction\nWDT Counter\n=\n00h\nWDT Postscaler\n=\n0\nTO\n=\n1\nPD\n=\n1",
    "Complement f\nSyntax:\nCOMF     f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd\n\u2208\n[0,1]\na\n\u2208\n[0,1]\nOperation:\n\u2192\ndest\nStatus Affected:\nN, Z\nEncoding:\n0001\n11da\nffff\nffff\nDescription:\nThe contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 If 'a' is ' 1 GPR bank (default).\n', the Access Bank is selected. ', the BSR is used to select the If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination",
    "Example:\nCOMF\nREG, 0, 0\nBefore Instruction\nREG\n=\n13h\nAfter Instruction\nREG\n=\n13h\nW\n=\nECh\n( f )",
    "Compare f with W, Skip if f = W\nSyntax:\nCPFSEQ    f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(f) - (W),\nskip if (f) = (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n001a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If 'f' = W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. If skip:, Q2 = . If skip:, Q3 = . If skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word, Q2 = skip and followed by 2-word. skip and followed by 2-word, Q3 = instruction:. skip and followed by 2-word, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. Example:, Q2 = HERE. Example:, Q3 = CPFSEQ",
    "Q Cycle Activity:\nREG, :. Example:, Q4 = 0. Before Instruction PC Address, Q2 = =. Before Instruction PC Address, Q3 = HERE. Before Instruction PC Address, Q4 = . W REG, Q2 = =. W REG, Q3 = ?. W REG, Q4 = . After, Q2 = =. After, Q3 = ?. After, Q4 = . Instruction, Q2 = Instruction. Instruction, Q3 = . Instruction, Q4 = . If REG, Q2 = =. If REG, Q3 = W;. If REG, Q4 = . PC, Q2 = =. PC, Q3 = Address (EQUAL). PC, Q4 = . If REG, Q2 = \u2260. If REG, Q3 = W;. If REG, Q4 = . PC, Q2 = =. PC, Q3 = Address (NEQUAL). PC, Q4 = ",
    "Compare f with W, Skip if f > W\nSyntax:\nCPFSGT    f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(f) - ( W),\nskip if (f) > (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n010a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of the W by performing an unsigned subtraction. If the contents of 'f' are greater than the contents of WREG  then the fetched , instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:",
    "Compare f with W, Skip if f > W\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE      CPFSGT REG, 0\nNGREATER  :\nGREATER   :\nBefore Instruction\nPC\n= Address (HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n> W;\nPC\n= Address (GREATER)\nIf REG\n\u2264 W;\nPC\n= Address (NGREATER)\nIf skip:",
    "Compare f with W, Skip if f < W\nSyntax:\nCPFSLT    f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(f) - ( W),\nskip if (f) < (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n000a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If the contents of 'f' are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1\nDecode\nQ1\nNo\nQ2\nRead register 'f'\nQ2\nNo\nQ3\nProcess\nData\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation\nNo\nNo operation\nNo\nNo operation\nNo\nQ4\nNo operation\nQ4\nNo operation\nQ4\nNo operation\nNo operation\noperation operation\noperation\nExample:\nHERE    CPFSLT REG, 1\nNLESS   :\nLESS    :\nBefore Instruction\nPC\n=\nAddress\n(HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n< W;\nPC\n= Address (LESS)\nIf REG\n\u2265 W;\nPC\n= Address (NLESS)",
    "PIC18F2X1X/4X1X\nSyntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then (W<3:0>) + 6 \u2192 W<3:0>; else ( W<3:0>) \u2192 W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then (W<3:0>) + 6 \u2192 W<3:0>; else ( W<3:0>) \u2192",
    "PIC18F2X1X/4X1X\nW<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then (W<3:0>) + 6 \u2192 W<3:0>; else ( W<3:0>) \u2192 W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then (W<3:0>) + 6 \u2192 W<3:0>; else ( W<3:0>) \u2192 W<3:0>;. Operation:, Decimal Adjust WRegister = If [W<3:0> > 9] or [DC = 1 ] then (W<3:0>) + 6 \u2192 W<3:0>; else ( W<3:0>) \u2192 W<3:0>;. If (, Decimal Adjust WRegister = [W<7:4> + DC > 9] or [C = 1 ] then W<7:4>) + 6 + DC \u2192 W<7:4> ;",
    "PIC18F2X1X/4X1X\nelse (W<7:4>) + DC \u2192 W<7:4>. If (, Decimal Adjust WRegister = [W<7:4> + DC > 9] or [C = 1 ] then W<7:4>) + 6 + DC \u2192 W<7:4> ; else (W<7:4>) + DC \u2192 W<7:4>. If (, Decimal Adjust WRegister = [W<7:4> + DC > 9] or [C = 1 ] then W<7:4>) + 6 + DC \u2192 W<7:4> ; else (W<7:4>) + DC \u2192 W<7:4>. If (, Decimal Adjust WRegister = [W<7:4> + DC > 9] or [C = 1 ] then W<7:4>) + 6 + DC \u2192 W<7:4> ; else (W<7:4>) + DC \u2192 W<7:4>. If (, Decimal Adjust WRegister = [W<7:4> + DC > 9] or [C = 1 ]",
    "PIC18F2X1X/4X1X\nthen W<7:4>) + 6 + DC \u2192 W<7:4> ; else (W<7:4>) + DC \u2192 W<7:4>. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0111. Encoding:, Decimal Adjust WRegister = 0111. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and",
    "PIC18F2X1X/4X1X\nproduces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust",
    "PIC18F2X1X/4X1X\nWRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . Q Cycle Activity:, Decimal Adjust WRegister = . Q1, Decimal Adjust WRegister = . Q1, Decimal Adjust WRegister = Q2. Q1, Decimal Adjust WRegister = Q3. Q1, Decimal Adjust WRegister = Q4. Q1, Decimal Adjust WRegister = Q4. Decode, Decimal Adjust WRegister = . Decode, Decimal Adjust WRegister = Read register W. Decode, Decimal Adjust WRegister = Process Data. Decode, Decimal Adjust WRegister = Write W. Decode, Decimal Adjust WRegister = Write W. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. Example 1:, Decimal Adjust",
    "PIC18F2X1X/4X1X\nWRegister = Example 1:. Example 1:, Decimal Adjust WRegister = Example 1:. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister = DAW. , Decimal Adjust WRegister = DAW. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. W, Decimal Adjust WRegister = =. W, Decimal Adjust WRegister = A5h. W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = =. C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = 0. C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = =. DC, Decimal Adjust",
    "PIC18F2X1X/4X1X\nWRegister = . DC, Decimal Adjust WRegister = 0. DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. W, Decimal Adjust WRegister = =. W, Decimal Adjust WRegister = 05h. W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = 1. C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . , Decimal Adjust WRegister = DC. , Decimal Adjust WRegister = = =. , Decimal Adjust WRegister = 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . Example 2:, Decimal Adjust WRegister = Example",
    "PIC18F2X1X/4X1X\n2:. Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Example 2:, Decimal Adjust WRegister = Example 2:. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. Before Instruction, Decimal Adjust WRegister = Before Instruction. W, Decimal Adjust WRegister = =. W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = CEh. W, Decimal Adjust WRegister = . W, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = =. C, Decimal Adjust WRegister = 0. C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . , Decimal Adjust WRegister = DC. , Decimal Adjust WRegister = =. , Decimal Adjust WRegister = 0. , Decimal Adjust",
    "PIC18F2X1X/4X1X\nWRegister = . , Decimal Adjust WRegister = . After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. After Instruction, Decimal Adjust WRegister = After Instruction. , Decimal Adjust WRegister = W =. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = 34h. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = 0. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = =. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = . DC, Decimal Adjust WRegister = .",
    "PIC18F2X1X/4X1X\nC, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . C, Decimal Adjust WRegister = . , Decimal Adjust WRegister = = 1. , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = . , Decimal Adjust WRegister = ",
    "PIC18F2X1X/4X1X\nSyntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Syntax:, Decrement f = DECF f {,d {,a}}. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208",
    "PIC18F2X1X/4X1X\n[0,1]. Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = (f) - 1 \u2192 dest. Operation:, Decrement f = (f) - 1 \u2192 dest. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Encoding:, Decrement f = 0000. Encoding:, Decrement f = 01da. Encoding:, Decrement f = ffff. Encoding:, Decrement f = ffff. Encoding:, Decrement f =",
    "PIC18F2X1X/4X1X\nffff. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank",
    "PIC18F2X1X/4X1X\n(default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is '",
    "PIC18F2X1X/4X1X\n1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Decrement f = Decrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "PIC18F2X1X/4X1X\n23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Decrement f = 1. Words:, Decrement f = 1. Words:, Decrement f = 1. Words:, Decrement f = 1. Words:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Cycles:, Decrement f = 1. Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q1, Decrement f = Q2. Q1, Decrement f = Q2. Q1, Decrement f = Q3. Q1, Decrement f = Q3. Q1, Decrement f = Q4. Decode, Decrement f = Read register 'f'. Decode,",
    "PIC18F2X1X/4X1X\nDecrement f = Read register 'f'. Decode, Decrement f = Process Data. Decode, Decrement f = Process Data. Decode, Decrement f = Write to destination. Example:, Decrement f = DECF. Example:, Decrement f = CNT,. Example:, Decrement f = 1,. Example:, Decrement f = 0. Example:, Decrement f = . Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. CNT Z, Decrement f = = 01h =. CNT Z, Decrement f = 0. CNT Z, Decrement f = . CNT Z, Decrement f = . CNT Z, Decrement f = . After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. After Instruction,",
    "PIC18F2X1X/4X1X\nDecrement f = After Instruction. After Instruction, Decrement f = After Instruction. CNT Z, Decrement f = = =. CNT Z, Decrement f = 00h 1. CNT Z, Decrement f = . CNT Z, Decrement f = . CNT Z, Decrement f = ",
    "Decrement f, Skip if 0\nSyntax:\nDECFSZ   f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) - 1 \u2192 dest,\nskip if result = 0\nStatus Affected:\nNone\nEncoding:\n0010\n11da\nffff\nffff\nDescription:\nThe contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).",
    "Decrement f, Skip if 0\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode If skip:, Q2 = Read register 'f'. Decode If skip:, Q3 = Process Data. Decode If skip:, Q4 = Write to destination. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = skip and followed by 2-word instruction:. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. Example:, Q2 = HERE. Example:, Q3 = DECFSZ GOTO. Example:, Q4 = CNT, 1, 1 LOOP. CONTINUE",
    "Q Cycle Activity:\nBefore Instruction, Q2 = CONTINUE Before Instruction. CONTINUE Before Instruction, Q3 = CONTINUE Before Instruction. CONTINUE Before Instruction, Q4 = CONTINUE Before Instruction. PC, Q2 = = Address. PC, Q3 = (HERE). PC, Q4 = . After Instruction, Q2 = After Instruction. After Instruction, Q3 = After Instruction. After Instruction, Q4 = After Instruction. CNT If CNT, Q2 = = CNT - 1 = 0; = Address \u2260 0;. CNT If CNT, Q3 = (CONTINUE). CNT If CNT, Q4 = . If CNT PC, Q2 = = Address. If CNT PC, Q3 = (HERE + 2). If CNT PC, Q4 = ",
    "PIC18F2X1X/4X1X\nSyntax:, DCFSNZ = Syntax:. Syntax:, Decrement f, Skip if not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if not 0 = DCFSNZ f {,d {,a}}. Syntax:, Decrement f, Skip if not 0 = DCFSNZ f {,d {,a}}. Operands:, DCFSNZ = Operands:. Operands:, Decrement f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f, Skip if not 0 = 0 \u2264",
    "PIC18F2X1X/4X1X\nf \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, DCFSNZ = Operation:. Operation:, Decrement f, Skip if not 0 = (f) - 1 \u2192 dest, skip if result \u2260 0. Operation:, Decrement f, Skip if not 0 = (f) - 1 \u2192 dest, skip if result \u2260 0. Operation:, Decrement f, Skip if not 0 = (f) - 1 \u2192 dest, skip if result \u2260 0. Operation:, Decrement f, Skip if not 0 = (f) - 1 \u2192 dest, skip if result \u2260 0. Status Affected:, DCFSNZ = Status Affected:. Status Affected:, Decrement f, Skip if not 0 = None. Status Affected:, Decrement f, Skip if not 0 = None. Status Affected:, Decrement f, Skip if not 0 = None. Status Affected:, Decrement f, Skip if not 0 = None. Encoding:, DCFSNZ = Encoding:. Encoding:, Decrement f, Skip if not 0 = 0100.",
    "PIC18F2X1X/4X1X\nEncoding:, Decrement f, Skip if not 0 = 0100. Encoding:, Decrement f, Skip if not 0 = 11da ffff. Encoding:, Decrement f, Skip if not 0 = 11da ffff. Description:, DCFSNZ = Description:. Description:, Decrement f, Skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3",
    "PIC18F2X1X/4X1X\n'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if not 0 = The contents of register 'f' are",
    "PIC18F2X1X/4X1X\ndecremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Decrement f, Skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default).",
    "PIC18F2X1X/4X1X\nIf the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, DCFSNZ = Words:. Words:, Decrement f, Skip if not 0 = 1. Words:, Decrement f, Skip if not 0 = 1. Words:, Decrement f, Skip if not 0 = 1. Words:, Decrement f, Skip if not 0 = 1. Cycles:, DCFSNZ = Cycles:. Cycles:, Decrement f, Skip if not 0 = 1(2) Note: 3 cycles if skip and followed by a",
    "PIC18F2X1X/4X1X\n2-word instruction.. Cycles:, Decrement f, Skip if not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. Cycles:, Decrement f, Skip if not 0 = 1(2) Note: 3 cycles if skip and followed by a 2-word instruction.. , DCFSNZ = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = . , DCFSNZ = Decode. , Decrement f, Skip if not 0 = Read register. , Decrement f, Skip if not 0 = 'f'. , Decrement f, Skip if not 0 = Process Data. , Decrement f, Skip if not 0 = . If skip:, DCFSNZ = If skip:. If skip:,",
    "PIC18F2X1X/4X1X\nDecrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. , DCFSNZ = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = . , DCFSNZ = No operation. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = . If skip and followed by 2-word instruction:, DCFSNZ = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = If skip and followed by 2-word",
    "PIC18F2X1X/4X1X\ninstruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = If skip and followed by 2-word instruction:. , DCFSNZ = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = . , DCFSNZ = No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = . , DCFSNZ = No operation. , Decrement f, Skip if not 0 = No operation. ,",
    "PIC18F2X1X/4X1X\nDecrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = . , DCFSNZ = . , Decrement f, Skip if not 0 = HERE ZERO. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = DCFSNZ :. , Decrement f, Skip if not 0 = . Example:, DCFSNZ = Example:. Example:, Decrement f, Skip if not 0 = NZERO. Example:, Decrement f, Skip if not 0 = . Example:, Decrement f, Skip if not 0 = :. Example:, Decrement f, Skip if not 0 = TEMP,. Before Instruction, DCFSNZ = TEMP. Before Instruction, Decrement f, Skip if not 0 = Before Instruction. Before Instruction, Decrement f, Skip if not 0 = =. Before Instruction, Decrement f, Skip if not 0 = ?. Before Instruction, Decrement f, Skip if not 0 = . , DCFSNZ =",
    "PIC18F2X1X/4X1X\nTEMP. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = = =. , Decrement f, Skip if not 0 = TEMP - 0; Address. , Decrement f, Skip if not 0 = 1, (ZERO)",
    "PIC18F2X1X/4X1X\nSyntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Encoding: 1st word (k<7:0>) 2nd",
    "PIC18F2X1X/4X1X\nword(k<19:8>), Unconditional Branch = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = 1111 k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = kkkk 0 kkkk 8. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional",
    "PIC18F2X1X/4X1X\nBranch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:.",
    "PIC18F2X1X/4X1X\nQ1, Unconditional Branch = Q2. Q1, Unconditional Branch = Q3. Q1, Unconditional Branch = Q4. Q1, Unconditional Branch = Q4. Decode, Unconditional Branch = Read literal 'k'<7:0>,. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. After Instruction PC = Address, Unconditional Branch = . After Instruction PC = Address, Unconditional Branch = . After Instruction PC = Address,",
    "PIC18F2X1X/4X1X\nUnconditional Branch = . After Instruction PC = Address, Unconditional Branch = ",
    "PIC18F2X1X/4X1X\nSyntax:, Increment f = INCF. Syntax:, Increment f = f {,d {,a}}. Syntax:, Increment f = . Syntax:, Increment f = . Operands:, Increment f = 0 \u2264 f \u2264 255. Operands:, Increment f = 0 \u2264 f \u2264 255. Operands:, Increment f = . Operands:, Increment f = . , Increment f = d \u2208 [0,1]. , Increment f = d \u2208 [0,1]. , Increment f = . , Increment f = . , Increment f = a \u2208 [0,1]. , Increment f = a \u2208 [0,1]. , Increment f = . , Increment f = . Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = . Operation:, Increment f = . Status Affected:, Increment f = C,",
    "PIC18F2X1X/4X1X\nDC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = . Status Affected:, Increment f = . Encoding:, Increment f = 0010. Encoding:, Increment f = 10da. Encoding:, Increment f = ffff. Encoding:, Increment f = ffff\nDescription:\nThe contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.",
    "PIC18F2X1X/4X1X\nWords:\nCycles:\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nINCF\nCNT, 1, 0\nBefore Instruction\nCNT\n=\nFFh\nZ\n=\n0\nC\n=\n?\nDC\n=\n?\nAfter Instruction\nCNT\n=\n00h\nZ\n=\n1\nC\n=\n1\nDC\n=\n1",
    "PIC18F2X1X/4X1X\nSyntax:, Increment f, Skip if 0 = INCFSZ. Syntax:, Increment f, Skip if 0 = f {,d {,a}}. Syntax:, Increment f, Skip if 0 = . Syntax:, Increment f, Skip if 0 = . Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest,",
    "PIC18F2X1X/4X1X\nskip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Operation:, Increment f, Skip if 0 = (f) + 1 \u2192 dest, skip if result = 0. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Status Affected:, Increment f, Skip if 0 = None. Encoding:, Increment f, Skip if 0 = 0011. Encoding:, Increment f, Skip if 0 = 11da. Encoding:, Increment f, Skip if 0 = ffff. Encoding:, Increment f, Skip if 0 = ffff. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. (default) If",
    "PIC18F2X1X/4X1X\nthe result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. (default) If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1",
    "PIC18F2X1X/4X1X\n', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. (default) If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "PIC18F2X1X/4X1X\n23.2.3 'Byte-Oriented and. Description:, Increment f, Skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. (default) If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Words:, Increment f, Skip if 0 = 1. Words:, Increment f, Skip if 0 = 1. Words:, Increment f, Skip if 0 = 1. Words:,",
    "PIC18F2X1X/4X1X\nIncrement f, Skip if 0 = 1. Cycles:, Increment f, Skip if 0 = 1(2). Cycles:, Increment f, Skip if 0 = 1(2). Cycles:, Increment f, Skip if 0 = 1(2). Cycles:, Increment f, Skip if 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:, Q2.Read register 'f' = . If skip:, Q3.Process Data = . If skip:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. skip and followed by 2-word, Q2.Read register 'f' = skip and followed by 2-word. skip and followed by 2-word, Q3.Process Data = instruction:. skip and followed by 2-word, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination =",
    "Q Cycle Activity:\nNo operation. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register 'f' = HERE NZERO ZERO. Example:, Q3.Process Data = INCFSZ :. Example:, Q4.Write to destination = CNT, 1, 0. Before Instruction PC, Q2.Read register 'f' = . Before Instruction PC, Q3.Process Data = . Before Instruction PC, Q4.Write to destination = . , Q2.Read register 'f' = = Address. , Q3.Process Data = (HERE). , Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = . After Instruction, Q4.Write to destination = . CNT, Q2.Read register 'f' = = CNT + 1. CNT, Q3.Process Data = . CNT, Q4.Write to destination = . If CNT, Q2.Read register 'f' = =",
    "Q Cycle Activity:\n0;. If CNT, Q3.Process Data = . If CNT, Q4.Write to destination = . PC, Q2.Read register 'f' = = Address \u2260. PC, Q3.Process Data = (ZERO). PC, Q4.Write to destination = . If CNT PC, Q2.Read register 'f' = 0; = Address. If CNT PC, Q3.Process Data = (NZERO). If CNT PC, Q4.Write to destination = ",
    "PIC18F2X1X/4X1X\nSyntax:, Increment f, Skip if not 0 = INFSNZ. Syntax:, Increment f, Skip if not 0 = f {,d {,a}}. Syntax:, Increment f, Skip if not 0 = . Syntax:, Increment f, Skip if not 0 = . Operands:, Increment f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Increment f, Skip if not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if not 0",
    "PIC18F2X1X/4X1X\n= (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Status Affected:, Increment f, Skip if not 0 = None. Status Affected:, Increment f, Skip if not 0 = None. Status Affected:, Increment f, Skip if not 0 = None. Status Affected:, Increment f, Skip if not 0 = None. Encoding:, Increment f, Skip if not 0 = 0100. Encoding:, Increment f, Skip if not 0 = 10da. Encoding:, Increment f, Skip if not 0 = ffff. Encoding:, Increment f, Skip if not 0 = ffff. Description:, Increment f, Skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If",
    "PIC18F2X1X/4X1X\n'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Description:, Increment f, Skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0",
    "PIC18F2X1X/4X1X\n', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Description:, Increment f, Skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh).",
    "PIC18F2X1X/4X1X\nSee. Description:, Increment f, Skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See. Words:, Increment f, Skip if not 0 = 1. Words:, Increment f, Skip if not 0 = 1. Words:, Increment f, Skip if not 0 = 1. Words:, Increment f, Skip if not 0 = 1. Cycles:,",
    "PIC18F2X1X/4X1X\nIncrement f, Skip if not 0 = 1(2). Cycles:, Increment f, Skip if not 0 = 1(2). Cycles:, Increment f, Skip if not 0 = 1(2). Cycles:, Increment f, Skip if not 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:, Q2.Read register 'f' = . If skip:, Q3.Process Data = . If skip:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. skip and followed by 2-word, Q2.Read register 'f' = skip and followed by 2-word. skip and followed by 2-word, Q3.Process Data = instruction:. skip and followed by 2-word, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination =",
    "Q Cycle Activity:\nNo operation. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register 'f' = HERE. Example:, Q3.Process Data = INFSNZ REG,. Example:, Q4.Write to destination = 1, 0\nZERO\nNZERO\nAfter Instruction, = = . After Instruction, Address = . After Instruction, (HERE) = . REG, = = =. REG, Address = REG + 1. REG, (HERE) = . If REG, = = \u2260. If REG, Address = 0;. If REG, (HERE) = . PC, = = =. PC, Address = Address. PC, (HERE) = (NZERO). If REG, = = =. If REG, Address = 0;. If REG, (HERE) = . PC, = = =. PC, Address = Address. PC, (HERE) = (ZERO)",
    "PIC18F2X1X/4X1X\nSyntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Syntax:, Inclusive OR Literal with W = IORLW k. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Inclusive OR Literal with W = 0 \u2264 k \u2264 255. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Operation:, Inclusive OR Literal with W = (W) .OR. k \u2192 W. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR Literal with W = N, Z. Status Affected:, Inclusive OR",
    "PIC18F2X1X/4X1X\nLiteral with W = N, Z. Encoding:, Inclusive OR Literal with W = 0000. Encoding:, Inclusive OR Literal with W = 1001. Encoding:, Inclusive OR Literal with W = kkkk. Encoding:, Inclusive OR Literal with W = kkkk. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR Literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Words:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W =",
    "PIC18F2X1X/4X1X\n1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Cycles:, Inclusive OR Literal with W = 1. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Literal with W = Q Cycle Activity:. Q1, Inclusive OR Literal with W = Q2. Q1, Inclusive OR Literal with W = Q3. Q1, Inclusive OR Literal with W = Q4. Q1, Inclusive OR Literal with W = Q4. Decode, Inclusive OR Literal with W = Read literal 'k'. Decode, Inclusive OR Literal with W = Process Data. Decode, Inclusive OR Literal with W = Write to W. Decode, Inclusive OR Literal with W = Write to W. Example:, Inclusive OR Literal with W = IORLW. Example:, Inclusive OR Literal with W = 35h. Example:, Inclusive OR Literal with W = . Example:, Inclusive OR Literal with W =",
    "PIC18F2X1X/4X1X\n. Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. Before Instruction, Inclusive OR Literal with W = Before Instruction. W, Inclusive OR Literal with W = 9Ah. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. After Instruction, Inclusive OR Literal with W = After Instruction. W, Inclusive OR Literal with W = BFh. W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = . W, Inclusive OR Literal with W = ",
    "PIC18F2X1X/4X1X\nIORWF, 1 = Inclusive OR Wwith f. IORWF, 2 = Inclusive OR Wwith f. IORWF, 3 = Inclusive OR Wwith f. IORWF, 4 = . Syntax:, 1 = IORWF. Syntax:, 2 = f {,d {,a}}. Syntax:, 3 = . Syntax:, 4 = . Operands:, 1 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 2 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 4 = . Operation:, 1 = (W) .OR. (f) \u2192 dest. Operation:, 2 = (W) .OR. (f) \u2192 dest. Operation:, 3 = (W) .OR. (f) \u2192 dest. Operation:, 4 = . Status Affected:, 1 = N, Z. Status Affected:, 2",
    "PIC18F2X1X/4X1X\n= N, Z. Status Affected:, 3 = N, Z. Status Affected:, 4 = . Encoding:, 1 = 0001. Encoding:, 2 = 00da ffff. Encoding:, 3 = ffff. Encoding:, 4 = . Description:, 1 = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 2 = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1",
    "PIC18F2X1X/4X1X\n', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 3 = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See",
    "PIC18F2X1X/4X1X\nSection 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, 4 = . Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = . Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = . Q Cycle Activity: Q1 Decode, 1 = . Q Cycle Activity: Q1 Decode, 2 = . Q Cycle Activity: Q1 Decode, 3 = . Q Cycle Activity: Q1 Decode, 4 = . , 1 = Q2. , 2 = Q3. , 3 = Q4. , 4 = . , 1 = Read register 'f'. , 2 = Process Data. , 3 = Write to destination. , 4 = \nExample:\nIORWF  RESULT, 0, 1\nBefore Instruction\nRESULT =\n13h\nW\n=\n91h\nAfter Instruction\nRESULT =\n13h\nW\n=\n93h",
    "PIC18F2X1X/4X1X\nSyntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operands:, Load FSR = 0 \u2264 f \u2264 2 0 \u2264 k \u2264 4095. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Operation:, Load FSR = k \u2192 FSRf. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Encoding:, Load FSR = 1110 1111.",
    "PIC18F2X1X/4X1X\nEncoding:, Load FSR = 1110 0000. Encoding:, Load FSR = 00ff k 7 kkk. Encoding:, Load FSR = k 11 kkk kkkk. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the File Select Register pointed to by 'f'.. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Q Cycle Activity:, Load FSR = Q Cycle",
    "PIC18F2X1X/4X1X\nActivity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q1, Load FSR = Q2. Q1, Load FSR = Q3. Q1, Load FSR = . Q1, Load FSR = Q4. Decode, Load FSR = Read literal 'k' MSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' MSB to FSRfH. Decode, Load FSR = Read literal 'k' LSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' to FSRfL\nExample:\nLFSR 2, 3ABh\nAfter Instruction\nFSR2H\n= 03h\nFSR2L\n=\nABh",
    "PIC18F2X1X/4X1X\nSyntax:, Move f = MOVF. Syntax:, Move f = f {,d {,a}}. Syntax:, Move f = . Syntax:, Move f = . Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = . Operands:, Move f = . Operands:, Move f = . , Move f = d \u2208 [0,1] \u2208. , Move f = . , Move f = . , Move f = . Operation:, Move f = f \u2192 dest. Operation:, Move f = . Operation:, Move f = . Operation:, Move f = . Status Affected:, Move f = N, Z. Status Affected:, Move f = . Status Affected:, Move f = . Status Affected:, Move f = . Encoding:, Move f = 0101. Encoding:, Move f = 00da. Encoding:, Move f = ffff. Encoding:, Move f = ffff. Description:, Move f = The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ',",
    "PIC18F2X1X/4X1X\nthe result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Move f = The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the",
    "PIC18F2X1X/4X1X\nGPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Move f = The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Description:, Move f = The contents of register 'f' are moved to a destination dependent upon the status",
    "PIC18F2X1X/4X1X\nof 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and. Words:, Move f = 1. Words:, Move f = . Words:, Move f = . Words:, Move f = . Cycles:, Move f = 1. Cycles:, Move f = . Cycles:, Move f = . Cycles:, Move f = \nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write W",
    "PIC18F2X1X/4X1X\nBefore Instruction, MOVF = . Before Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = FFh. After Instruction, MOVF = . After Instruction, REG, 0, 0 = . REG, MOVF = =. REG, REG, 0, 0 = 22h. W, MOVF = =. W, REG, 0, 0 = 22h",
    "MOVFF\nMove f to f\nSyntax:\nMOVFF   f s ,f d\nOperands:\n0\n\u2264\nf\ns\n\u2264\n4095\n0\n\u2264\nf\nd\n\u2264\n4095\nOperation:\n(f\ns )\n\u2192\nf\nd\nStatus Affected:\nNone\nEncoding:\n1st word (source) 2nd word (destin.)\n1100\n1111\nffff\nffff\nffff\nffff\nffff s\nffff d\nDescription:\nThe contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f s ' can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh.\nEither source or destination can be W (a useful special situation).\nMOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port).\nThe MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nWords:\n2\nCycles:\n2 (3)\nWords:\n2\nCycles:\n2 (3)\nQ Cycle Activity:",
    "MOVFF\nDecode, Q2 = Read register 'f' (src). Decode, Q3 = Process Data. Decode, Q4 = No operation. Decode, Q2 = No operation No dummy read. Decode, Q3 = No operation. Decode, Q4 = Write register 'f' (dest)\nExample:\nMOVFF   REG1, REG2\nBefore Instruction\nREG1\n=\n33h\nREG2\n=\n11h\nAfter Instruction\nREG1\n=\n33h\nREG2\n=\n33h",
    "MOVFF\nSyntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Syntax:, Move Literal to Low Nibble in BSR = MOVLW k. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = None. Encoding:, Move Literal to Low Nibble in BSR = 0000. Encoding:, Move Literal to Low Nibble in BSR = 0001.",
    "MOVFF\nEncoding:, Move Literal to Low Nibble in BSR = kkkk kkkk. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move Literal to Low Nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal",
    "MOVFF\nto Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = 1. Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q1, Move Literal to Low Nibble in BSR = Q2. Q1, Move Literal to Low Nibble in BSR = Q3. Q1, Move Literal to Low Nibble in BSR = Q4. Decode, Move Literal to Low Nibble in BSR = Read literal 'k'. Decode, Move Literal to Low Nibble in BSR = Process Data. Decode, Move Literal to Low Nibble in BSR = Write literal 'k' to BSR. Example:, Move Literal to Low Nibble in BSR = MOVLB. Example:, Move Literal to Low Nibble in BSR = 5. Example:, Move Literal to Low Nibble in BSR = . Before Instruction BSR Register After Instruction BSR Register, Move Literal to",
    "MOVFF\nLow Nibble in BSR = =. Before Instruction BSR Register After Instruction BSR Register, Move Literal to Low Nibble in BSR = 02h. Before Instruction BSR Register After Instruction BSR Register, Move Literal to Low Nibble in BSR = ",
    "MOVFF\nSyntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Syntax:, Move Literal to W = MOVLW k. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Encoding:, Move Literal to W = 0000. Encoding:, Move Literal to W = 1110. Encoding:, Move Literal to W = kkkk. Encoding:, Move Literal to W =",
    "MOVFF\nkkkk. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move Literal to W = The eight-bit literal 'k' is loaded into W.. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Words:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = 1. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q1, Move Literal to W = Q2. Q1, Move Literal to W =",
    "MOVFF\nQ3. Q1, Move Literal to W = Q4. Q1, Move Literal to W = Q4. Decode, Move Literal to W = Read literal 'k'. Decode, Move Literal to W = Process Data. Decode, Move Literal to W = Write to W. Decode, Move Literal to W = Write to W. Example:, Move Literal to W = MOVLW. Example:, Move Literal to W = 5Ah. Example:, Move Literal to W = . Example:, Move Literal to W = . After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = After Instruction",
    "PIC18F2X1X/4X1X\nSyntax:, Move Wto f = MOVWF. Syntax:, Move Wto f = f {,a}. Syntax:, Move Wto f = . Syntax:, Move Wto f = . Operands:, Move Wto f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Move Wto f = . Operands:, Move Wto f = . Operands:, Move Wto f = . Operation:, Move Wto f = (W) \u2192 f. Operation:, Move Wto f = . Operation:, Move Wto f = . Operation:, Move Wto f = . Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Status Affected:, Move Wto f = . Encoding:, Move Wto f = 0110. Encoding:, Move Wto f = 111a. Encoding:, Move Wto f = ffff. Encoding:, Move Wto f = ffff. Description:, Move Wto f = Move data from Wto register 'f'. Location",
    "PIC18F2X1X/4X1X\n'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for",
    "PIC18F2X1X/4X1X\ndetails.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "PIC18F2X1X/4X1X\n23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Move Wto f = 1. Words:, Move Wto f = . Words:, Move Wto f = . Words:, Move Wto f = . Cycles:, Move Wto f = 1. Cycles:, Move Wto f = . Cycles:, Move Wto f = . Cycles:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . Q1, Move Wto f = Q2. Q1, Move Wto f = Q3. Q1, Move Wto f = . Q1, Move Wto f = Q4. Decode, Move Wto f = Read register 'f'. Decode, Move Wto f = Process Data. Decode, Move Wto f = . Decode, Move Wto f = Write. Before Instruction, Move Wto f = . Before Instruction, Move Wto f",
    "PIC18F2X1X/4X1X\n= . Before Instruction, Move Wto f = . Before Instruction, Move Wto f = . W = 4Fh REG = FFh, Move Wto f = W = 4Fh REG = FFh. W = 4Fh REG = FFh, Move Wto f = . W = 4Fh REG = FFh, Move Wto f = . W = 4Fh REG = FFh, Move Wto f = . After Instruction, Move Wto f = After Instruction. After Instruction, Move Wto f = . After Instruction, Move Wto f = . After Instruction, Move Wto f = . W, Move Wto f = 4Fh. W, Move Wto f = . W, Move Wto f = . W, Move Wto f = . REG, Move Wto f = 4Fh. REG, Move Wto f = . REG, Move Wto f = . REG, Move Wto f = ",
    "PIC18F2X1X/4X1X\nSyntax:, Multiply Literal with W = MULLW. Syntax:, Multiply Literal with W = k. Syntax:, Multiply Literal with W = . Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operands:, Multiply Literal with W = 0 \u2264 k \u2264 255. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Operation:, Multiply Literal with W = (W) x k \u2192 PRODH:PRODL. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Status Affected:, Multiply Literal with W = None. Encoding:, Multiply Literal with W = 0000. Encoding:, Multiply Literal with W = 1101 kkkk. Encoding:, Multiply Literal with W = kkkk. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the",
    "PIC18F2X1X/4X1X\n8-bit literal 'k'. The 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the status flags are affected. Note that neither overflow nor carry is possible in this operation. A zero result is possible but not detected.. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the status flags are affected. Note that neither overflow nor carry is possible in this operation. A zero result is possible but not detected.. Description:, Multiply Literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the status flags are affected. Note that neither overflow nor carry is possible in this operation. A zero result is possible but not",
    "PIC18F2X1X/4X1X\ndetected.. Words:, Multiply Literal with W = 1. Words:, Multiply Literal with W = 1. Words:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Cycles:, Multiply Literal with W = 1. Q Cycle Activity:, Multiply Literal with W = . Q Cycle Activity:, Multiply Literal with W = . Q Cycle Activity:, Multiply Literal with W = . Q1, Multiply Literal with W = Q2. Q1, Multiply Literal with W = Q3. Q1, Multiply Literal with W = Q4. Decode, Multiply Literal with W = Read literal 'k'. Decode, Multiply Literal with W = Process Data. Decode, Multiply Literal with W = Write registers PRODH: PRODL",
    "Example:\nMULLW   0C4h\nBefore Instruction\nW\n=\nE2h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nE2h\nPRODH\n=\nADh\nPRODL\n=\n08h",
    "Multiply W with f\nSyntax:\nMULWF     f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(W) x (f) \u2192 PRODH:PRODL\nStatus Affected:\nNone\nEncoding:\n0000\n001a\nffff\nffff\nDescription:\nAn unsigned multiplication is carried out between the contents of W and the register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both W and 'f' are unchanged.\nNone of the status flags are affected. Note that neither overflow nor carry is possible in this operation. A zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1",
    "Multiply W with f\nQ2\nQ3\nQ4\nDecode\nRead register 'f'\nProcess Data\nWrite registers PRODH: PRODL\nExample:\nMULWF   REG, 1\nBefore Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nC4h\nREG\n=\nB5h\nPRODH\n=\n8Ah\nPRODL\n=\n94h",
    "Multiply W with f\nSyntax:, Negate f = NEGF. Syntax:, Negate f = f {,a}. Syntax:, Negate f = . Syntax:, Negate f = . Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Negate f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:, Negate f = ( f ) + 1 \u2192 f. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N,",
    "Multiply W with f\nOV, C, DC, Z. Encoding:, Negate f = 0110. Encoding:, Negate f = 110a. Encoding:, Negate f = ffff. Encoding:, Negate f = ffff. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a'",
    "Multiply W with f\nis ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If",
    "Multiply W with f\n'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed. Words:, Negate f = 1. Words:, Negate f = . Words:, Negate f = . Words:, Negate f = . Cycles:, Negate f = 1. Cycles:, Negate f = . Cycles:, Negate f = . Cycles:, Negate f = \nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write register 'f'",
    "Multiply W with f\nBefore Instruction, NEGF = Before Instruction. Before Instruction,  = Before Instruction. Before Instruction, REG, = Before Instruction. Before Instruction, 1 = Before Instruction. REG, NEGF = =. REG,  = 0011. REG, REG, = 1010. REG, 1 = [3Ah]. After Instruction, NEGF = After Instruction. After Instruction,  = After Instruction. After Instruction, REG, = After Instruction. After Instruction, 1 = After Instruction. REG, NEGF = =. REG,  = 1100. REG, REG, = 0110. REG, 1 = [C6h]",
    "No Operation\nSyntax:, 1 = NOP. Syntax:, 2 = NOP. Syntax:, 3 = NOP. Syntax:, 4 = NOP. Operands:, 1 = None. Operands:, 2 = None. Operands:, 3 = None. Operands:, 4 = None. Operation:, 1 = No operation. Operation:, 2 = No operation. Operation:, 3 = No operation. Operation:, 4 = No operation. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 0000 1111. Encoding:, 2 = 0000 xxxx. Encoding:, 3 = 0000 xxxx. Encoding:, 4 = 0000 xxxx. Description:, 1 = No operation.. Description:, 2 = No operation.. Description:, 3 = No operation.. Description:, 4 = No operation.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1.",
    "No Operation\nCycles:, 4 = 1. Q Cycle Activity: Q1, 1 = Q2. Q Cycle Activity: Q1, 2 = Q3. Q Cycle Activity: Q1, 3 = . Q Cycle Activity: Q1, 4 = Q4. Decode, 1 = No operation. Decode, 2 = No operation. Decode, 3 = . Decode, 4 = No operation\nExample:\nNone.",
    "Pop Top of Return Stack\nSyntax:\nPOP\nOperands:\nNone\nOperation:\n(TOS) \u2192 bit bucket\nStatus Affected:\nNone\nEncoding:\n0000\n0000\n0000\n0110\nDescription:\nThe TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nNo\noperation\nPOP TOS\nvalue\nNo\noperation\nExample:\nPOP GOTO\nNEW\nBefore Instruction\nTOS\n=\n0031A2h\nStack (1 level down)\n=\n014332h\nAfter Instruction\nTOS\n= 014332h\nPC\n= NEW",
    "Pop Top of Return Stack\nSyntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:,",
    "Pop Top of Return Stack\nPush Top of Return Stack = 0101. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return",
    "Pop Top of Return Stack\nStack = 1. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q Cycle Activity:, Push Top of Return Stack = Q Cycle Activity:. Q1, Push Top of Return Stack = Q2. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q4. Decode, Push Top of Return Stack = PUSH PC + 2 onto return stack. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Example: PUSH, Push Top of Return Stack = Example: PUSH. Example:",
    "Pop Top of Return Stack\nPUSH, Push Top of Return Stack = Example: PUSH. Example: PUSH, Push Top of Return Stack = Example: PUSH. Example: PUSH, Push Top of Return Stack = Example: PUSH. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack = =. TOS, Push Top of Return Stack = 345Ah. TOS, Push Top of Return Stack = . PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack = 0124h. PC, Push Top of Return Stack = . After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack =",
    "Pop Top of Return Stack\n0126h. PC, Push Top of Return Stack = . TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack = =. TOS, Push Top of Return Stack = 0126h. TOS, Push Top of Return Stack = . Stack (1 level down), Push Top of Return Stack = Stack (1 level down). Stack (1 level down), Push Top of Return Stack = =. Stack (1 level down), Push Top of Return Stack = 345Ah. Stack (1 level down), Push Top of Return Stack = ",
    "Pop Top of Return Stack\nSyntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Encoding:, Relative Call =",
    "Pop Top of Return Stack\n1101. Encoding:, Relative Call = 1nnn. Encoding:, Relative Call = nnnn. Encoding:, Relative Call = nnnn. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC+2+2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC+2+2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack.",
    "Pop Top of Return Stack\nThen, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC+2+2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC+2+2n. This instruction is a two-cycle instruction.. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call = . Q Cycle Activity:, Relative Call = . Q1, Relative Call =",
    "Pop Top of Return Stack\nQ2. Q1, Relative Call = Q3. Q1, Relative Call = . Q1, Relative Call = Q4. Decode, Relative Call = Read literal 'n' Push PC to stack. Decode, Relative Call = Process Data. Decode, Relative Call = Write. Decode, Relative Call = to PC. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = . No operation, Relative Call = No operation\nExample:\nHERE\nRCALL Jump\nBefore Instruction\nPC = Address (HERE)\nAfter Instruction\nPC =\nAddress\n(Jump)\nTOS =\nAddress\n(HERE + 2)",
    "PIC18F2X1X/4X1X\nSyntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Encoding:, Reset = 0000. Encoding:, Reset = 0000. Encoding:, Reset = 1111. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Cycles:, Reset = 1. Cycles:,",
    "PIC18F2X1X/4X1X\nReset = 1. Cycles:, Reset = 1. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q1, Reset = Q2. Q1, Reset = Q3. Q1, Reset = Q4. Decode, Reset = Start Reset. Decode, Reset = No operation. Decode, Reset = No operation. Example:, Reset = RESET. Example:, Reset = RESET. Example:, Reset = RESET. After Instruction Registers = Flags* =, Reset = . After Instruction Registers = Flags* =, Reset = . After Instruction Registers = Flags* =, Reset = ",
    "PIC18F2X1X/4X1X\nSyntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Operands:, Return from Interrupt = s \u2208 [0,1]. Operands:, Return from Interrupt = s \u2208 [0,1]. Operands:, Return from Interrupt = s \u2208 [0,1]. Operands:, Return from Interrupt = s \u2208 [0,1]. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL, if s = 1 (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL, if s = 1 (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Interrupt = (TOS) \u2192 PC,",
    "PIC18F2X1X/4X1X\n1 \u2192 GIE/GIEH or PEIE/GIEL, if s = 1 (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL, if s = 1 (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0001. Encoding:, Return from Interrupt = 000s. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS)",
    "PIC18F2X1X/4X1X\nis loaded into the PC. Interrupts are enabled by setting either the high or low priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers WS, STATUSS and BSRS",
    "PIC18F2X1X/4X1X\nare loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = .",
    "PIC18F2X1X/4X1X\nQ1, Return from Interrupt = Q2. Q1, Return from Interrupt = Q3. Q1, Return from Interrupt = Q4. Q1, Return from Interrupt = Q4. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = POP PC from stack Set GIEH or. Decode, Return from Interrupt = POP PC from stack Set GIEH or. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation",
    "RETFIE  1\nAfter Interrupt\nPC\n=\nTOS\nW\n= WS\nBSR\n=\nBSRS\nSTATUS\n= STATUSS\nGIE/GIEH, PEIE/GIEL\n=\n1",
    "RETFIE  1\nSyntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Syntax:, Return Literal to W = RETLW k. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Status",
    "RETFIE  1\nAffected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Encoding:, Return Literal to W = 0000. Encoding:, Return Literal to W = 1100. Encoding:, Return Literal to W = kkkk. Encoding:, Return Literal to W = kkkk. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack",
    "RETFIE  1\n(the return address). The high address latch (PCLATH) remains unchanged.. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q1, Return Literal to W = Q2. Q1, Return Literal to W = Q3. Q1, Return Literal to W = . Q1, Return Literal to W = Q4. Decode, Return Literal to W = Read literal 'k'. Decode, Return Literal to W = Process Data. Decode, Return Literal to W = . Decode, Return Literal to W = POP PC from stack, Write to W.",
    "RETFIE  1\nNo operation, Return Literal to W = No operation. No operation, Return Literal to W = No operation. No operation, Return Literal to W = . No operation, Return Literal to W = No operation",
    "Example:\nCALL TABLE\n; W contains table\n; offset value\n; W now has\n; table value\n:\nTABLE\nADDWF PCL\n; W = offset\nRETLW k0\n; Begin table\nRETLW k1\n;\n:\n:\nRETLW kn\n; End of table\nBefore Instruction\nW\n= 07h\nAfter Instruction\nW\n=\nvalue of kn",
    "Return from Subroutine\nSyntax:\nRETURN   {s}\nOperands:\ns \u2208 [0,1]\nOperation:\n(TOS) \u2192 PC,\nif s = 1\n(WS)\n\u2192\nW,\n(STATUSS)\n\u2192\nSTATUS,\n(BSRS)\n\u2192\nBSR,\nPCLATU, PCLATH are unchanged\nStatus Affected:\nNone\nEncoding:\n0000\n0000\n0001\n001s\nDescription:\nReturn from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs (default).\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nNo operation\nProcess\nData\nPOP PC from stack\nNo\noperation\nNo\noperation\nNo\noperation\nNo operation\nExample:\nRETURN\nAfter Instruction:\nPC = TOS",
    "PIC18F2X1X/4X1X\nSyntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Syntax:, Rotate Left f through Carry = RLCF f {,d {,a}}. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C)",
    "PIC18F2X1X/4X1X\n\u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Status Affected:, Rotate Left f through Carry = . Encoding:, Rotate Left f through Carry = 0011. Encoding:, Rotate Left f through Carry = 01da. Encoding:, Rotate Left f through Carry = ffff. Encoding:, Rotate Left f through Carry = ffff. Description:, Rotate Left f through Carry = The contents",
    "PIC18F2X1X/4X1X\nof register 'f' are rotated one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f through Carry = The contents of register 'f' are rotated one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is '",
    "PIC18F2X1X/4X1X\n1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f through Carry = The contents of register 'f' are rotated one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for",
    "PIC18F2X1X/4X1X\ndetails.. Description:, Rotate Left f through Carry = The contents of register 'f' are rotated one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = . Words:, Rotate Left f through Carry = . Words:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = . Cycles:, Rotate Left f through Carry = .",
    "PIC18F2X1X/4X1X\nCycles:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = Q2. Q Cycle Activity:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = . Q Cycle Activity:, Rotate Left f through Carry = . Q1 Decode, Rotate Left f through Carry = Read register 'f'. Q1 Decode, Rotate Left f through Carry = Q3. Q1 Decode, Rotate Left f through Carry = . Q1 Decode, Rotate Left f through Carry = Q4. , Rotate Left f through Carry = . , Rotate Left f through Carry = Process Data. , Rotate Left f through Carry = . , Rotate Left f through Carry = Write to destination. Example:, Rotate Left f through Carry = RLCF. Example:, Rotate Left f through Carry = REG,. Example:, Rotate Left f through Carry = 0,. Example:, Rotate Left f through Carry = 0. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110",
    "PIC18F2X1X/4X1X\nC = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. Before Instruction REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = Before Instruction REG = 1110 0110 C = 0 After Instruction. REG, Rotate Left f through Carry = 1110. REG, Rotate Left f through Carry = 0110. REG, Rotate Left f through Carry = . REG, Rotate Left f through Carry = . W, Rotate Left f through Carry = 1100. W, Rotate Left f through Carry = 1100. W, Rotate Left f through Carry = . W, Rotate Left f through Carry = . C, Rotate Left f through Carry = 1. C, Rotate Left f through Carry = . C, Rotate Left f through Carry = . C, Rotate Left f through Carry = ",
    "PIC18F2X1X/4X1X\nSyntax:, Rotate Left f (no carry) = RLNCF. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Operands:, Rotate Left f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Rotate Left f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Rotate Left f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Rotate Left f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Rotate Left f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operation:, Rotate Left f (no carry) =",
    "PIC18F2X1X/4X1X\n(f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \u2192 dest<n + 1>, (f<7>) \u2192 dest<0>. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) =",
    "PIC18F2X1X/4X1X\nN, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Encoding:, Rotate Left f (no carry) = 0100. Encoding:, Rotate Left f (no carry) = 01da. Encoding:, Rotate Left f (no carry) = ffff. Encoding:, Rotate Left f (no carry) = ffff. Encoding:, Rotate Left f (no carry) = ffff. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented",
    "PIC18F2X1X/4X1X\nInstructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If",
    "PIC18F2X1X/4X1X\n'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section",
    "PIC18F2X1X/4X1X\n23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Words:,",
    "PIC18F2X1X/4X1X\nRotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q1, Rotate Left f (no carry) = Q2. Q1, Rotate Left f (no carry) = . Q1, Rotate Left f (no carry) = Q3. Q1, Rotate Left f (no carry) = Q4. Q1, Rotate Left f (no carry) = Q4. Decode, Rotate Left f (no carry) = . Decode, Rotate Left f (no carry) = Read register 'f'.",
    "PIC18F2X1X/4X1X\nDecode, Rotate Left f (no carry) = Process Data. Decode, Rotate Left f (no carry) = Write to. Decode, Rotate Left f (no carry) = Write to. Example:, Rotate Left f (no carry) = RLNCF. Example:, Rotate Left f (no carry) = . Example:, Rotate Left f (no carry) = REG, 1,. Example:, Rotate Left f (no carry) = 0. Example:, Rotate Left f (no carry) = 0. Before Instruction REG = After Instruction REG, Rotate Left f (no carry) = 1010 0101. Before Instruction REG = After Instruction REG, Rotate Left f (no carry) = 1011 0111. Before Instruction REG = After Instruction REG, Rotate Left f (no carry) = . Before Instruction REG = After Instruction REG, Rotate Left f (no carry) = . Before Instruction REG = After Instruction REG, Rotate Left f (no carry) = ",
    "PIC18F2X1X/4X1X\nSyntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C)",
    "PIC18F2X1X/4X1X\n\u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = . Status Affected:, Rotate Right f through Carry = . Status Affected:, Rotate Right f through Carry = . Encoding:, Rotate Right f through Carry = 0011. Encoding:, Rotate Right f through Carry = 00da. Encoding:, Rotate Right f through Carry = ffff. Encoding:, Rotate Right f through Carry = ffff. Description:, Rotate Right f through Carry = The contents",
    "PIC18F2X1X/4X1X\nof register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is '",
    "PIC18F2X1X/4X1X\n1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for",
    "PIC18F2X1X/4X1X\ndetails.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = . Words:, Rotate Right f through Carry = . Words:, Rotate Right f through Carry = . Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = . Cycles:, Rotate Right f through Carry = .",
    "PIC18F2X1X/4X1X\nCycles:, Rotate Right f through Carry = . Q Cycle Activity:, Rotate Right f through Carry = . Q Cycle Activity:, Rotate Right f through Carry = . Q Cycle Activity:, Rotate Right f through Carry = . Q Cycle Activity:, Rotate Right f through Carry = . Q1, Rotate Right f through Carry = Q2. Q1, Rotate Right f through Carry = Q3. Q1, Rotate Right f through Carry = . Q1, Rotate Right f through Carry = Q4. Decode, Rotate Right f through Carry = Read register 'f'. Decode, Rotate Right f through Carry = Process Data. Decode, Rotate Right f through Carry = . Decode, Rotate Right f through Carry = Write to destination. Example:, Rotate Right f through Carry = RRCF. Example:, Rotate Right f through Carry = REG,. Example:, Rotate Right f through Carry = 0,. Example:, Rotate Right f through Carry = 0. Before Instruction, Rotate Right f through Carry = Before Instruction. Before Instruction, Rotate Right f through Carry = . Before Instruction, Rotate Right f through Carry = . Before Instruction, Rotate Right f through Carry = .",
    "PIC18F2X1X/4X1X\nREG C After Instruction, Rotate Right f through Carry = = 1110 = 0 = =. REG C After Instruction, Rotate Right f through Carry = 0110 0110. REG C After Instruction, Rotate Right f through Carry = . REG C After Instruction, Rotate Right f through Carry = . REG W, Rotate Right f through Carry = 1110 0111. REG W, Rotate Right f through Carry = 0011. REG W, Rotate Right f through Carry = . REG W, Rotate Right f through Carry = . C, Rotate Right f through Carry = = 0. C, Rotate Right f through Carry = . C, Rotate Right f through Carry = . C, Rotate Right f through Carry = ",
    "PIC18F2X1X/4X1X\nSyntax:, Rotate Right f (no carry) = RRNCF. Syntax:, Rotate Right f (no carry) = f {,d {,a}}. Syntax:, Rotate Right f (no carry) = . Syntax:, Rotate Right f (no carry) = . Operands:, Rotate Right f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f (no carry) = . Operands:, Rotate Right f (no carry) = . Operands:, Rotate Right f (no carry) = . Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192",
    "PIC18F2X1X/4X1X\ndest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n - 1>, (f<0>) \u2192 dest<7>. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = . Status Affected:, Rotate Right f (no carry) = . Status Affected:, Rotate Right f (no carry) = . Encoding:, Rotate Right f (no carry) = 0100. Encoding:, Rotate Right f (no carry) = 00da. Encoding:, Rotate Right f (no carry) = ffff. Encoding:, Rotate Right f (no carry) = ffff\nDescription:",
    "PIC18F2X1X/4X1X\nThe contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f' (default). If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination",
    "Example 1:\nRRNCF   REG, 1, 0\nBefore Instruction\nREG\n=\n1101 0111\nAfter Instruction\nREG\n=\n1110 1011",
    "Example 2:\nRRNCF   REG, 0, 0\nBefore Instruction\nW\n=\n?\nREG =\n1101 0111\nAfter Instruction\nW\n=\n1110 1011\nREG\n=\n1101 0111",
    "Set f\nSyntax:\nSETF    f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\nFFh \u2192 f\nStatus Affected:\nNone\nEncoding:\n0110\n100a\nffff\nffff\nDescription:\nThe contents of the specified register are set to FFh.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite\nregister 'f'\nExample:\nSETF\nREG,1\nBefore Instruction\nREG After Instruction\n=\n5Ah\nREG\n=\nFFh",
    "PIC18F2X1X/4X1X\nSyntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:,  = . Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:,  = . Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, 0 \u2192 PD. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, 0 \u2192 PD. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, 0 \u2192 PD. Operation:, Enter Sleep mode = 00h \u2192 WDT, 0 \u2192 WDT postscaler, 1 \u2192 TO, 0 \u2192 PD. Operation:,",
    "PIC18F2X1X/4X1X\n= . Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:,  = . Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0011. Encoding:,",
    "PIC18F2X1X/4X1X\n= . Description:, Enter Sleep mode = The Power-Down Status bit (PD) is cleared. The Time-out Status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down Status bit (PD) is cleared. The Time-out Status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down Status bit (PD) is cleared. The Time-out Status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down Status bit (PD) is cleared. The Time-out Status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:,",
    "PIC18F2X1X/4X1X\n= . Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:,  = . Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:,  = . Q Cycle Activity:, Enter Sleep mode = Q Cycle Activity:. Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:,  = . Q1, Enter Sleep mode = Q2. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q4. Q1,  = . Decode, Enter Sleep mode = No operation. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Process. Decode, Enter Sleep mode = Go to Sleep. Decode,  = \nExample:\nSLEEP\nBefore Instruction\nTO\n=\n?\nPD\n=\n?\nAfter Instruction\nTO\n=\n1 \u2020\nPD\n=\n0",
    "PIC18F2X1X/4X1X\n- \u2020   If WDT causes wake-up, this bit is cleared.",
    "PIC18F2X1X/4X1X\nSyntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith Borrow = SUBFWB f {,d {,a}}. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Subtract f from",
    "PIC18F2X1X/4X1X\nWwith Borrow = (W) - (f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) - (f) - (C) \u2192 dest. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith Borrow = N, OV, C, DC, Z. Encoding:, Subtract f from Wwith Borrow = 0101. Encoding:, Subtract f from Wwith Borrow = 01da. Encoding:, Subtract f from Wwith Borrow = ffff. Encoding:,",
    "PIC18F2X1X/4X1X\nSubtract f from Wwith Borrow = ffff. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from",
    "PIC18F2X1X/4X1X\nW(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith Borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from",
    "PIC18F2X1X/4X1X\nWwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Cycles:, Subtract f from Wwith Borrow = 1. Q1 Decode, Subtract f from Wwith Borrow = Q2 Read register 'f'. Q1 Decode, Subtract f from Wwith Borrow = Q3 Process Data. Q1 Decode, Subtract f from Wwith Borrow = . Q1 Decode, Subtract f from Wwith Borrow = Q4 Write to. Example 1:, Subtract f from Wwith Borrow = SUBFWB. Example 1:, Subtract f from Wwith Borrow = . Example 1:, Subtract f from Wwith Borrow = . Example 1:, Subtract f from Wwith Borrow = destination. , Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = REG, 1,. , Subtract f from Wwith Borrow = 0. , Subtract f from Wwith Borrow = . Before Instruction, Subtract f from Wwith Borrow",
    "PIC18F2X1X/4X1X\n= Before Instruction. Before Instruction, Subtract f from Wwith Borrow = Before Instruction. Before Instruction, Subtract f from Wwith Borrow = Before Instruction. Before Instruction, Subtract f from Wwith Borrow = Before Instruction. W = C, Subtract f from Wwith Borrow = 2 1. W = C, Subtract f from Wwith Borrow = . W = C, Subtract f from Wwith Borrow = . W = C, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = 2. W =, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = . C =, Subtract f from Wwith Borrow = 0. C =, Subtract f from Wwith Borrow = . C =, Subtract f from Wwith Borrow = . C =, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = 0. =, Subtract f from Wwith Borrow = . =, Subtract f",
    "PIC18F2X1X/4X1X\nfrom Wwith Borrow = . =, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . N =, Subtract f from Wwith Borrow = ;. N =, Subtract f from Wwith Borrow = result is. N =, Subtract f from Wwith Borrow = . N =, Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = 1. , Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = negative. , Subtract f from Wwith Borrow = . Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB",
    "PIC18F2X1X/4X1X\nREG, 0, 0, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0. Before Instruction REG =, Subtract f from Wwith Borrow = 2 5. Before Instruction REG =, Subtract f from Wwith Borrow = . Before Instruction REG =, Subtract f from Wwith Borrow = . Before Instruction REG =, Subtract f from Wwith Borrow = . W = C =, Subtract f from Wwith Borrow = 1. W = C =, Subtract f from Wwith Borrow = . W = C =, Subtract f from Wwith Borrow = . W = C =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = 2. After Instruction =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = . REG",
    "PIC18F2X1X/4X1X\nW =, Subtract f from Wwith Borrow = 3. REG W =, Subtract f from Wwith Borrow = . REG W =, Subtract f from Wwith Borrow = . REG W =, Subtract f from Wwith Borrow = . C = Z, Subtract f from Wwith Borrow = 1 0. C = Z, Subtract f from Wwith Borrow = . C = Z, Subtract f from Wwith Borrow = . C = Z, Subtract f from Wwith Borrow = . N =, Subtract f from Wwith Borrow = ;. N =, Subtract f from Wwith Borrow = . N =, Subtract f from Wwith Borrow = . N =, Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = 0. , Subtract f from Wwith Borrow = result is. , Subtract f from Wwith Borrow = positive. , Subtract f from Wwith Borrow = . Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3:",
    "PIC18F2X1X/4X1X\nSUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. REG =, Subtract f from Wwith Borrow = 1. REG =, Subtract f from Wwith Borrow = . REG =, Subtract f from Wwith Borrow = . REG =, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = 2. W =, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = . W =, Subtract f from Wwith Borrow = . C, Subtract f from Wwith",
    "PIC18F2X1X/4X1X\nBorrow = 0. C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = 0. =, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = 2. After Instruction =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = . After Instruction =, Subtract f from Wwith Borrow = . REG W = C =, Subtract f from Wwith Borrow = 1. REG W = C =, Subtract f from Wwith Borrow = . REG W = C =, Subtract f from Wwith Borrow = . REG W = C =, Subtract f from Wwith Borrow = . Z = N, Subtract f from Wwith Borrow = 1 ;. Z = N, Subtract f from Wwith Borrow = result is zero.",
    "PIC18F2X1X/4X1X\nZ = N, Subtract f from Wwith Borrow = . Z = N, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = 0. =, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = . =, Subtract f from Wwith Borrow = ",
    "PIC18F2X1X/4X1X\nSyntax:, Subtract Wfrom Literal = SUBLW k. Syntax:,  = . Syntax:,  = . Syntax:,  = . Syntax:,  = . Syntax:,  = . Operands:, Subtract Wfrom Literal = 0 \u2264 k \u2264 255. Operands:,  = . Operands:,  = . Operands:,  = . Operands:,  = . Operands:,  = . Operation:, Subtract Wfrom Literal = k - (W) \u2192 W. Operation:,  = . Operation:,  = . Operation:,  = . Operation:,  = . Operation:,  = . Status Affected:, Subtract Wfrom Literal = N, OV, C, DC, Z. Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Encoding:, Subtract Wfrom Literal = 0000. Encoding:,  = . Encoding:,  = 1000. Encoding:,  = kkkk. Encoding:,  = . Encoding:,",
    "PIC18F2X1X/4X1X\n= kkkk. Description, Subtract Wfrom Literal = Wis subtracted from the eight-bit literal 'k'. The result is placed in W.. Description,  = . Description,  = . Description,  = . Description,  = . Description,  = . Words:, Subtract Wfrom Literal = 1. Words:,  = . Words:,  = . Words:,  = . Words:,  = . Words:,  = . Cycles:, Subtract Wfrom Literal = 1. Cycles:,  = . Cycles:,  = . Cycles:,  = . Cycles:,  = . Cycles:,  = . Q Cycle Activity:, Subtract Wfrom Literal = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q1, Subtract Wfrom Literal = . Q1,  = Q2. Q1,  = Q3. Q1,  = . Q1,  = . Q1,",
    "PIC18F2X1X/4X1X\n= Q4. Decode, Subtract Wfrom Literal = Read literal 'k'. Decode,  = . Decode,  = Process Data. Decode,  = . Decode,  = Write to W. Decode,  = . Example 1: SUBLW, Subtract Wfrom Literal = . Example 1: SUBLW,  = . Example 1: SUBLW,  = 02h. Example 1: SUBLW,  = . Example 1: SUBLW,  = . Example 1: SUBLW,  = . Before Instruction =, Subtract Wfrom Literal = . Before Instruction =,  = . Before Instruction =,  = . Before Instruction =,  = . Before Instruction =,  = . Before Instruction =,  = . W C, Subtract Wfrom Literal = =. W C,  = 01h ?. W C,  = . W C,  = . W C,  = . W C,  = . After Instruction, Subtract Wfrom Literal = . After Instruction,  = . After Instruction,  = . After Instruction,  = . After Instruction,  = . After Instruction,",
    "PIC18F2X1X/4X1X\n= . , Subtract Wfrom Literal = W. ,  = 01h 1. ,  = . ,  = . ,  = . ,  = . = C = ; result is positive, Subtract Wfrom Literal = . = C = ; result is positive,  = . = C = ; result is positive,  = . = C = ; result is positive,  = . = C = ; result is positive,  = . = C = ; result is positive,  = . Example 2:, Subtract Wfrom Literal = Before Instruction W =. Example 2:,  = 02h. Example 2:,  = . Example 2:,  = . Example 2:,  = . Example 2:,  = . , Subtract Wfrom Literal = =. ,  = 00h. ,  = . ,  = . ,  = . ,  = . After Instruction =, Subtract Wfrom Literal = . After Instruction =,  = . After Instruction =,  = . After Instruction =,  = . After Instruction =,  = . After Instruction =,  = . , Subtract Wfrom Literal = W C. ,  = . ,  = result is zero. ,  = . ,",
    "PIC18F2X1X/4X1X\n= . ,  = . =, Subtract Wfrom Literal = . =,  = . =,  = . =,  = . =,  = . =,  = . Z, Subtract Wfrom Literal = ;. Z,  = 1 1. Z,  = . Z,  = . Z,  = . Z,  = . Example 3: SUBLW, Subtract Wfrom Literal = . Example 3: SUBLW,  = . Example 3: SUBLW,  = 02h. Example 3: SUBLW,  = . Example 3: SUBLW,  = . Example 3: SUBLW,  = . Before W, Subtract Wfrom Literal = Instruction = C. Before W,  = 03h. Before W,  = . Before W,  = . Before W,  = . Before W,  = . = ? After Instruction = ; (2's, Subtract Wfrom Literal = . = ? After Instruction = ; (2's,  = . = ? After Instruction = ; (2's,  = . = ? After Instruction = ; (2's,",
    "PIC18F2X1X/4X1X\n= . = ? After Instruction = ; (2's,  = . = ? After Instruction = ; (2's,  = . W C Z, Subtract Wfrom Literal = = ;. W C Z,  = FFh 0. W C Z,  = complement) result is negative. W C Z,  = . W C Z,  = . W C Z,  = . N, Subtract Wfrom Literal = =. N,  = 0. N,  = . N,  = . N,  = . N,  = . , Subtract Wfrom Literal = =. ,  = 1. ,  = . ,  = . ,  = . ,  = ",
    "PIC18F2X1X/4X1X\nSyntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:,  = . Syntax:,  = . Syntax:,  = . Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:,  = . Operands:,  = . Operands:,  = . Operation:, Subtract Wfrom f = (f) - (W) \u2192 dest. Operation:,  = . Operation:,  = . Operation:,  = . Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Encoding:, Subtract Wfrom f = 0101. Encoding:,  = 11da. Encoding:,  = ffff. Encoding:,",
    "PIC18F2X1X/4X1X\n= . Description:, Subtract Wfrom f = ffff Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Description:,  = . Description:,  = . Description:,  = . Words:, Subtract Wfrom f = 1. Words:,  = . Words:,  = . Words:,  = . Cycles:, Subtract Wfrom f = . Cycles:,  = 1. Cycles:,  = . Cycles:,  = . Q1 Decode, Subtract Wfrom f = Q2 Q4 Read register 'f'. Q1 Decode,  = Q3 Process Data. Q1 Decode,",
    "PIC18F2X1X/4X1X\n= . Q1 Decode,  = . , Subtract Wfrom f = SUBWF. ,  = 1,. ,  = 0. ,  = . Example 1:, Subtract Wfrom f = . Example 1:,  = REG,. Example 1:,  = . Example 1:,  = . W C Z, Subtract Wfrom f = is SUBWF. W C Z,  = 2 1 ; result 0 REG,. W C Z,  = 0. W C Z,  = positive. N = Example 2: Before Instruction, Subtract Wfrom f = = = =. N = Example 2: Before Instruction,  = 0 2. N = Example 2: Before Instruction,  = . N = Example 2: Before Instruction,  = 0,. REG W, Subtract Wfrom f = = =. REG W,  = 2 ?. REG W,  = . REG W,  = . C = =, Subtract Wfrom f = = = =. C = =,  = 2 1 1. C = =,  = result is zero. C = =,",
    "PIC18F2X1X/4X1X\n= . After Instruction REG W, Subtract Wfrom f = =. After Instruction REG W,  = 0 0. After Instruction REG W,  = . After Instruction REG W,  = . C Z N, Subtract Wfrom f = . C Z N,  = ;. C Z N,  = . C Z N,  = . , Subtract Wfrom f = . ,  = . ,  = 0. ,  = . Example 3: Before Instruction REG, Subtract Wfrom f = . Example 3: Before Instruction REG,  = SUBWF. Example 3: Before Instruction REG,  = 1,. Example 3: Before Instruction REG,  = . W C After, Subtract Wfrom f = = = =. W C After,  = 2 ?. W C After,  = REG,. W C After,  = . , Subtract Wfrom f = . ,  = 1. ,  = . ,  = . , Subtract Wfrom f = . ,  = 2 0. ,  = . ,  = . , Subtract Wfrom f = . ,  = 0. ,  = . ,",
    "PIC18F2X1X/4X1X\n= . REG, Subtract Wfrom f = . REG,  = . REG,  = . REG,  = . , Subtract Wfrom f = = =. ,  = . ,  = . ,  = . , Subtract Wfrom f = =. ,  = FFh. ,  = . ,  = . , Subtract Wfrom f = . ,  = ;(2's. ,  = . ,  = . , Subtract Wfrom f = . ,  = ;. ,  = is. ,  = . W, Subtract Wfrom f = =. W,  = . W,  = . W,  = . C, Subtract Wfrom f = . C,  = . C,  = . C,  = . Z, Subtract Wfrom f = . Z,  = . Z,  = . Z,  = . N, Subtract Wfrom f = . N,  = . N,  = . N,  = . , Subtract Wfrom f = =. ,  = 1. ,  = . ,  = . , Subtract Wfrom f = result. ,  = . ,",
    "PIC18F2X1X/4X1X\n= . ,  = . , Subtract Wfrom f = . ,  = . ,  = . ,  = negative. Instruction, Subtract Wfrom f = . Instruction,  = . Instruction,  = . Instruction,  = . , Subtract Wfrom f = . ,  = . ,  = . ,  = complement)",
    "Subtract W from f with Borrow\nSyntax:\nSUBWFB    f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) - (W) - (C) \u2192 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0101\n10da\nffff\nffff\nDescription:\nSubtract W and the Carry flag (borrow) from register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1",
    "Subtract W from f with Borrow\nQ Cycle Activity:\nExample 1: SUBWFB,  = Example 1: SUBWFB. Example 1: SUBWFB, Q2 Read register 'f' = Example 1: SUBWFB. Example 1: SUBWFB,  = REG, 1, 0. Before Instruction,  = Before Instruction. Before Instruction, Q2 Read register 'f' = . Before Instruction,  = . REG,  = =. REG, Q2 Read register 'f' = 19h. REG,  = (0001 1001). W,  = =. W, Q2 Read register 'f' = 0Dh. W,  = (0000 1101). C,  = =. C, Q2 Read register 'f' = 1. C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register 'f' = . After Instruction,  = . REG,  = =. REG, Q2 Read register 'f' = 0Ch. REG,  = (0000 1011). W,  = =. W, Q2 Read register 'f' = 0Dh. W,  = (0000 1101). C,",
    "Subtract W from f with Borrow\n= =. C, Q2 Read register 'f' = 1. C,  = . Z,  = =. Z, Q2 Read register 'f' = 0. Z,  = . N,  = =. N, Q2 Read register 'f' = 0. N,  = ; result is positive. Example 2: SUBWFB,  = Example 2: SUBWFB. Example 2: SUBWFB, Q2 Read register 'f' = Example 2: SUBWFB. Example 2: SUBWFB,  = REG, 0, 0. Before Instruction,  = Before Instruction. Before Instruction, Q2 Read register 'f' = Before Instruction. Before Instruction,  = . REG,  = =. REG, Q2 Read register 'f' = 1Bh. REG,  = (0001 1011). W,  = =. W, Q2 Read register 'f' = 1Ah. W,  = (0001 1010). C,  = =. C, Q2 Read register 'f' = 0. C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register 'f' = . After Instruction,  = . REG,",
    "Subtract W from f with Borrow\n= =. REG, Q2 Read register 'f' = 1Bh. REG,  = (0001 1011). W,  = =. W, Q2 Read register 'f' = 00h. W,  = . C,  = =. C, Q2 Read register 'f' = 1. C,  = . Z,  = =. Z, Q2 Read register 'f' = 1. Z,  = ; result is zero. N,  = =. N, Q2 Read register 'f' = 0. N,  = . Example 3: SUBWFB,  = Example 3: SUBWFB. Example 3: SUBWFB, Q2 Read register 'f' = Example 3: SUBWFB. Example 3: SUBWFB,  = REG, 1, 0. Before Instruction,  = Before Instruction. Before Instruction, Q2 Read register 'f' = Before Instruction. Before Instruction,  = . REG,  = =. REG, Q2 Read register 'f' = 03h. REG,  = (0000 0011). W,  = =. W, Q2 Read register 'f' = 0Eh. W,",
    "Subtract W from f with Borrow\n= (0000 1101). C,  = =. C, Q2 Read register 'f' = 1. C,  = . After Instruction,  = After Instruction. After Instruction, Q2 Read register 'f' = After Instruction. After Instruction,  = . REG,  = =. REG, Q2 Read register 'f' = F5h. REG,  = (1111 0100) ; [2's comp]. W,  = =. W, Q2 Read register 'f' = 0Eh. W,  = (0000 1101). C,  = =. C, Q2 Read register 'f' = 0. C,  = . Z,  = =. Z, Q2 Read register 'f' = 0. Z,  = . N,  = =. N, Q2 Read register 'f' = 1. N,  = ; result is negative",
    "Subtract W from f with Borrow\nSyntax:, Swap f = SWAPF. Syntax:, Swap f = f {,d {,a}}. Syntax:, Swap f = . Syntax:, Swap f = . Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192",
    "Subtract W from f with Borrow\ndest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Encoding:, Swap f = 0011. Encoding:, Swap f = 10da. Encoding:, Swap f = ffff. Encoding:, Swap f = ffff. Description:, Swap f = The upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set",
    "Subtract W from f with Borrow\nis enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Swap f = The upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Swap f = The upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd'",
    "Subtract W from f with Borrow\nis ' 1 ', the result is placed in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Description:, Swap f = The upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f' (default). If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95",
    "Subtract W from f with Borrow\n(5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.. Words:, Swap f = 1. Words:, Swap f = 1. Words:, Swap f = 1. Words:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nSWAPF\nREG, 1, 0\nBefore Instruction\nREG\n=\nAfter Instruction\nREG\n=\n53h\n35h",
    "Subtract W from f with Borrow\nSyntax:, TBLRD = Syntax:. Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Operands:, TBLRD = Operands:. Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operation:, TBLRD = Operation:. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT; TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) + 1 \u2192 TBLPTR;.",
    "Subtract W from f with Borrow\nOperation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT; TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) + 1 \u2192 TBLPTR;. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT; TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) + 1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT; (TBLPTR) - 1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) + 1 \u2192 TBLPTR;. Status Affected:,",
    "Subtract W from f with Borrow\nTBLRD = Status Affected:. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Encoding:, TBLRD = Encoding:. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Description:, TBLRD = Description:. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory Word. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program",
    "Subtract W from f with Borrow\nmemory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory Word. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory Word. Words:, TBLRD = Words:. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Cycles:, TBLRD = Cycles:. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Q Cycle Activity:, TBLRD = Q Cycle Activity:. Q Cycle Activity:, Table Read = Q Cycle Activity:. Q Cycle Activity:, Table Read = Q Cycle Activity:. Q Cycle Activity:,",
    "Subtract W from f with Borrow\nTable Read = Q Cycle Activity:. , TBLRD = Q1. , Table Read = Q2. , Table Read = Q3. , Table Read = Q3. , TBLRD = Decode. , Table Read = No operation. , Table Read = No operation. , Table Read = No operation. , TBLRD = No operation. , Table Read = No operation (Read Program Memory). , Table Read = No operation. , Table Read = No operation",
    "TBLRD Table Read (Continued)\nExample 1:, 1 = TBLRD *+. Example 1:, 2 = ;. Example 1:, 3 = . Before Instruction, 1 = . Before Instruction, 2 = . Before Instruction, 3 = . TABLAT, 1 = TABLAT. TABLAT, 2 = =. TABLAT, 3 = 55h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A356h. MEMORY (00A356h), 1 = MEMORY (00A356h). MEMORY (00A356h), 2 = =. MEMORY (00A356h), 3 = 34h. After Instruction, 1 = . After Instruction, 2 = . After Instruction, 3 = . TABLAT, 1 = TABLAT. TABLAT, 2 = =. TABLAT, 3 = 34h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A357h. Example 2:, 1 = TBLRD +*. Example 2:, 2 = ;. Example 2:, 3 = . Before Instruction, 1 =",
    "TBLRD Table Read (Continued)\n. Before Instruction, 2 = . Before Instruction, 3 = . TABLAT, 1 = TABLAT. TABLAT, 2 = =. TABLAT, 3 = AAh. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 01A357h. MEMORY (01A357h), 1 = MEMORY (01A357h). MEMORY (01A357h), 2 = =. MEMORY (01A357h), 3 = 12h. MEMORY (01A358h), 1 = MEMORY (01A358h). MEMORY (01A358h), 2 = =. MEMORY (01A358h), 3 = 34h. After Instruction, 1 = . After Instruction, 2 = . After Instruction, 3 = . TABLAT, 1 = TABLAT. TABLAT, 2 = =. TABLAT, 3 = 34h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 01A358h",
    "PIC18F2X1X/4X1X\nSyntax:, Table Write = TBLWT ( *; *+; *-; +*). Operands:, Table Write = None. Operation:, Table Write = if TBLWT*, (TABLAT) \u2192 Holding Register; TBLPTR - No Change; if TBLWT*+, (TABLAT) \u2192 Holding Register; (TBLPTR) + 1 \u2192 TBLPTR; if TBLWT*-, (TABLAT) \u2192 Holding Register; (TBLPTR) - 1 \u2192 TBLPTR; if TBLWT+*, (TBLPTR) + 1 \u2192 TBLPTR; (TABLAT) \u2192 Holding Register;\nStatus Affected:\nNone\nEncoding:\nDescription:\n0000, 1 = 0000. 0000, 2 = 0000. 0000, 3 = 11nn nn=0 * =1 *+ =2 *-",
    "PIC18F2X1X/4X1X\nThis instruction uses the 3 LSBs of TBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). (Refer to Section 6.0 'Flash Program Memory' for additional details on programming Flash memory.) The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-MByte address range. The LSb of the TBLPTR selects which byte of the program memory location to access.\nTBLPTR[0] = 0 :\nLeast Significant\nByte of Program\nMemory Word\nTBLPTR[0] = 1 :\nMost Significant\nByte of Program\nMemory Word\nThe TBLWT instruction can modify the value of TBLPTR as follows:\n\u00b7 no change\n\u00b7 post-increment\n\u00b7 post-decrement\n\u00b7 pre-increment\n2\nWords:\n1\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4",
    "PIC18F2X1X/4X1X\nDecode, 1 = No operation. Decode, 2 = No operation. Decode, 3 = No operation. No operation, 1 = No operation (Read TABLAT). No operation, 2 = No operation. No operation, 3 = No operation (Write to Holding Register )",
    "PIC18F2X1X/4X1X\nExample 1:, Table Write = TBLWT *+;. Example 1:, (Continued) = TBLWT *+;. Example 1:, (Continued) = TBLWT *+;. Before Instruction, Table Write = Before Instruction. Before Instruction, (Continued) = Before Instruction. Before Instruction, (Continued) = Before Instruction. TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A356h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = FFh. After Instructions (table write completion), Table Write = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After",
    "PIC18F2X1X/4X1X\nInstructions (table write completion). TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A357h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = 55h. Example 2: TBLWT +*;, Table Write = Example 2: TBLWT +*;. Example 2: TBLWT +*;, (Continued) = Example 2: TBLWT +*;. Example 2: TBLWT +*;, (Continued) = Example 2: TBLWT +*;. Before Instruction, Table Write = Before Instruction. Before Instruction, (Continued) = . Before Instruction, (Continued) = . TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT,",
    "PIC18F2X1X/4X1X\n(Continued) = 34h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Ah. HOLDING REGISTER (01389Ah), Table Write = HOLDING REGISTER (01389Ah). HOLDING REGISTER (01389Ah), (Continued) = =. HOLDING REGISTER (01389Ah), (Continued) = FFh. HOLDING REGISTER (01389Bh), Table Write = HOLDING REGISTER (01389Bh). HOLDING REGISTER (01389Bh), (Continued) = =. HOLDING REGISTER (01389Bh), (Continued) = FFh. After Instruction (table write completion), Table Write = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 34h. TBLPTR, Table Write = TBLPTR.",
    "PIC18F2X1X/4X1X\nTBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Bh. HOLDING REGISTER (01389Ah), Table Write = HOLDING REGISTER (01389Ah). HOLDING REGISTER (01389Ah), (Continued) = =. HOLDING REGISTER (01389Ah), (Continued) = FFh. HOLDING REGISTER (01389Bh), Table Write = HOLDING REGISTER (01389Bh). HOLDING REGISTER (01389Bh), (Continued) = =. HOLDING REGISTER (01389Bh), (Continued) = 34h",
    "Test f, Skip if 0\nSyntax:\nTSTFSZ  f {,a}\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\nskip if f = 0\nStatus Affected:\nNone\nEncoding:\n0110\n011a\nffff\nffff\nDescription:\nIf 'f' = 0 , the next instruction fetched during the current instruction execution is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default). If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nskip:, Q2.Read register 'f' = skip:. skip:, Q3.Process Data = skip:. skip:, Q4.No operation = skip:. Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.No operation = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.No operation = No operation. skip and followed by 2-word instruction:, Q2.Read register 'f' = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3.Process Data = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4.No operation = skip and followed by 2-word instruction:. Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.No operation = Q4. No operation, Q2.Read register 'f' = No operation.",
    "Q Cycle Activity:\nNo operation, Q3.Process Data = No operation. No operation, Q4.No operation = No operation. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.No operation = No operation. Example:, Q2.Read register 'f' = HERE NZERO ZERO. Example:, Q3.Process Data = TSTFSZ CNT, : :. Example:, Q4.No operation = 1. Before Instruction PC = Address (HERE), Q2.Read register 'f' = Before Instruction PC = Address (HERE). Before Instruction PC = Address (HERE), Q3.Process Data = Before Instruction PC = Address (HERE). Before Instruction PC = Address (HERE), Q4.No operation = Before Instruction PC = Address (HERE). If CNT PC, Q2.Read register 'f' = =. If CNT PC, Q3.Process Data = 00h, Address (ZERO). If CNT PC, Q4.No operation = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction,",
    "Q Cycle Activity:\nQ3.Process Data = After Instruction. After Instruction, Q4.No operation = After Instruction. , Q2.Read register 'f' = =. , Q3.Process Data = . , Q4.No operation = . If CNT, Q2.Read register 'f' = \u2260. If CNT, Q3.Process Data = 00h,. If CNT, Q4.No operation = . PC, Q2.Read register 'f' = =. PC, Q3.Process Data = Address (NZERO). PC, Q4.No operation = ",
    "Exclusive OR Literal with W\nSyntax:\nXORLW   k\nOperands:\n0 \u2264 k \u2264 255\nOperation:\n(W) .XOR. k \u2192 W\nStatus Affected:\nN, Z\nEncoding:\n0000\n1010\nkkkk\nkkkk\nDescription:\nThe contents of W are XORed with the 8-bit literal 'k'. The result is placed in W.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nliteral 'k'\nProcess Data\nWrite to W\nExample:\nXORLW\n0AFh\nBefore Instruction\nW\n=\nB5h\nAfter Instruction\nW\n=\n1Ah",
    "Exclusive OR W with f\nSyntax:\nXORWF     f {,d {,a}}\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(W) .XOR. (f) \u2192 dest\nStatus Affected:\nN, Z\nEncoding:\n0001\n10da\nffff\nffff\nDescription:\nExclusive OR the contents of W with\nregister 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f' (default).\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank (default).\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \u2264 95 (5Fh). See Section 23.2.3 'Byte-Oriented and Bit-Oriented Instructions in Indexed Literal Offset Mode' for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead register 'f'\nProcess Data\nWrite to destination",
    "Example:\nXORWF   REG, 1, 0\nBefore Instruction\nREG\n=\nAFh\nW\n=\nB5h\nAfter Instruction\nREG\n=\n1Ah\nW\n=\nB5h",
    "23.2 Extended Instruction Set\nIn addition to the standard 75 instructions of the PIC18 instruction set, PIC18F2X1X/4X1X devices also provide an optional extension to the core CPU functionality. The  added  features  include  eight  additional instructions that augment indirect and indexed addressing operations and  the implementation of Indexed Literal Offset Addressing mode for many of the standard PIC18 instructions.\nThe additional features of the extended instruction set are disabled by default. To enable them, users must set the XINST Configuration bit.\nThe instructions in the extended set (with the exception of CALLW MOVSF , and MOVSS ) can all be classified as literal operations,  which  either  manipulate  the  File Select Registers, or use them for indexed addressing. Two  of  the  instructions, ADDFSR and SUBFSR ,  each have an additional special instantiation for using FSR2. These  versions  ( ADDULNK and SUBULNK )  allow  for automatic return after execution.",
    "23.2 Extended Instruction Set\nThe extended instructions are specifically implemented to optimize re-entrant program code (that is, code that is  recursive  or  that  uses  a  software  stack)  written  in high-level languages,  particularly C. Among  other things, they allow users working in high-level languages  to perform  certain operations on  data structures more efficiently. These include:\n\u00b7 Dynamic allocation and deallocation of software stack space when entering and leaving subroutines\n\u00b7 Function Pointer invocation\n\u00b7 Software Stack Pointer manipulation\nA summary of the instructions in the extended instruction set is provided in Table 23-3. Detailed descriptions are provided in Section 23.2.2 'Extended Instruction Set' . The  opcode  field  descriptions  in  Table 23-1 (page 260) apply to both the standard and extended PIC18 instruction sets.\nNote:\nThe  instruction set extension  and  the Indexed  Literal  Offset  Addressing  mode were designed for optimizing applications written in C. The user may likely never use these  instructions  directly  in  assembler. The  syntax  for  these  commands  is  provided as a reference for users who may be reviewing  code that  has  been  generated by a compiler.",
    "23.2.1 EXTENDED INSTRUCTION SYNTAX\nMost of the extended instructions use indexed arguments, using one of the File Select Registers and some offset to specify a source or destination register. When an argument for an instruction serves as part of indexed addressing, it is enclosed in square brackets ('[ ]'). This is done to indicate that the argument is used as  an  index  or  offset.  The  MPASM\u2122  Assembler  will flag an error if it determines that an index or offset value is not bracketed.\nWhen the extended instruction set is enabled, brackets are  also  used  to  indicate  index  arguments  in  byteoriented and bit-oriented instructions. This is in addition to other changes in their syntax. For more details, see Section 23.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' .\nNote:\n- \u00b7 Manipulation of variables located in a software stack\nIn  the  past,  square  brackets  have  been used to denote optional arguments in the PIC18 and earlier instruction sets. In this text and going forward, optional arguments are denoted by braces ('{ }').",
    "TABLE 23-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nADDFSR, Mnemonic,.Operands = f, k. ADDFSR, Description. = Add literal to FSR. ADDFSR, Cycles. = 1. ADDFSR, 16-Bit Instruction Word.MSb = 1110. ADDFSR, 16-Bit Instruction Word.MSb = 1000. ADDFSR, 16-Bit Instruction Word.LSb = ffkk. ADDFSR, 16-Bit Instruction Word. = kkkk. ADDFSR, Status Affected. = None. ADDULNK, Mnemonic,.Operands = k. ADDULNK, Description. = Add literal to FSR2 and return. ADDULNK, Cycles. = 2. ADDULNK, 16-Bit Instruction Word.MSb = 1110. ADDULNK, 16-Bit Instruction Word.MSb = 1000. ADDULNK, 16-Bit Instruction Word.LSb = 11kk. ADDULNK, 16-Bit Instruction Word. = kkkk. ADDULNK, Status Affected. = None. CALLW, Mnemonic,.Operands = . CALLW, Description. = Call subroutine using",
    "TABLE 23-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nWREG. CALLW, Cycles. = 2. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.LSb = 0001. CALLW, 16-Bit Instruction Word. = 0100. CALLW, Status Affected. = None. MOVSF, Mnemonic,.Operands = z s , f d. MOVSF, Description. = Move z s (source) to 1st word. MOVSF, Cycles. = 2. MOVSF, 16-Bit Instruction Word.MSb = 1110. MOVSF, 16-Bit Instruction Word.MSb = 1011. MOVSF, 16-Bit Instruction Word.LSb = 0zzz. MOVSF, 16-Bit Instruction Word. = zzzz. MOVSF, Status Affected. = None. , Mnemonic,.Operands = . , Description. = f d (destination) 2nd word. , Cycles. = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction",
    "TABLE 23-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nWord.MSb = ffff. , 16-Bit Instruction Word.LSb = ffff. , 16-Bit Instruction Word. = ffff. , Status Affected. = . MOVSS, Mnemonic,.Operands = z s , z d. MOVSS, Description. = Move z s (source) to 1st word. MOVSS, Cycles. = 2. MOVSS, 16-Bit Instruction Word.MSb = 1110. MOVSS, 16-Bit Instruction Word.MSb = 1011. MOVSS, 16-Bit Instruction Word.LSb = 1zzz. MOVSS, 16-Bit Instruction Word. = zzzz. MOVSS, Status Affected. = None. , Mnemonic,.Operands = . , Description. = z d (destination) 2nd word. , Cycles. = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = xxxx. , 16-Bit Instruction Word.LSb = xzzz. , 16-Bit Instruction Word. = zzzz. , Status Affected. = . PUSHL,",
    "TABLE 23-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nMnemonic,.Operands = k. PUSHL, Description. = Store literal at FSR2, decrement FSR2. PUSHL, Cycles. = 1. PUSHL, 16-Bit Instruction Word.MSb = 1110. PUSHL, 16-Bit Instruction Word.MSb = 1010. PUSHL, 16-Bit Instruction Word.LSb = kkkk. PUSHL, 16-Bit Instruction Word. = kkkk. PUSHL, Status Affected. = None. SUBFSR, Mnemonic,.Operands = f, k. SUBFSR, Description. = Subtract literal from FSR. SUBFSR, Cycles. = 1. SUBFSR, 16-Bit Instruction Word.MSb = 1110. SUBFSR, 16-Bit Instruction Word.MSb = 1001. SUBFSR, 16-Bit Instruction Word.LSb = ffkk. SUBFSR, 16-Bit Instruction Word. = kkkk. SUBFSR, Status Affected. = None. SUBULNK, Mnemonic,.Operands = k. SUBULNK, Description. = Subtract",
    "TABLE 23-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nliteral from FSR2 and return. SUBULNK, Cycles. = 2. SUBULNK, 16-Bit Instruction Word.MSb = 1110. SUBULNK, 16-Bit Instruction Word.MSb = 1001. SUBULNK, 16-Bit Instruction Word.LSb = 11kk. SUBULNK, 16-Bit Instruction Word. = kkkk. SUBULNK, Status Affected. = None",
    "23.2.2 EXTENDED INSTRUCTION SET\nSyntax:, Add Literal to FSR = ADDFSR f, k. Syntax:, Add Literal to FSR = ADDFSR f, k. Syntax:, Add Literal to FSR = ADDFSR f, k. Syntax:, Add Literal to FSR = ADDFSR f, k. Operands:, Add Literal to FSR = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, Add Literal to FSR = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, Add Literal to FSR = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operands:, Add Literal to FSR = 0 \u2264 k \u2264 63 f \u2208 [ 0, 1, 2 ]. Operation:, Add Literal to FSR = FSR(f) + k \u2192 FSR(f). Operation:, Add Literal to FSR = FSR(f) + k \u2192 FSR(f). Operation:, Add Literal to FSR = FSR(f) + k \u2192 FSR(f). Operation:, Add Literal to FSR = FSR(f) +",
    "23.2.2 EXTENDED INSTRUCTION SET\nk \u2192 FSR(f). Status Affected:, Add Literal to FSR = None. Status Affected:, Add Literal to FSR = None. Status Affected:, Add Literal to FSR = None. Status Affected:, Add Literal to FSR = None. Encoding:, Add Literal to FSR = 1110. Encoding:, Add Literal to FSR = 1000. Encoding:, Add Literal to FSR = ffkk. Encoding:, Add Literal to FSR = kkkk. Description:, Add Literal to FSR = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, Add Literal to FSR = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, Add Literal to FSR = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Description:, Add Literal to FSR = The 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.. Words:, Add Literal to FSR = 1.",
    "23.2.2 EXTENDED INSTRUCTION SET\nWords:, Add Literal to FSR = . Words:, Add Literal to FSR = . Words:, Add Literal to FSR = . Cycles:, Add Literal to FSR = 1. Cycles:, Add Literal to FSR = . Cycles:, Add Literal to FSR = . Cycles:, Add Literal to FSR = . Q Cycle Activity:, Add Literal to FSR = . Q Cycle Activity:, Add Literal to FSR = . Q Cycle Activity:, Add Literal to FSR = . Q Cycle Activity:, Add Literal to FSR = . Q1, Add Literal to FSR = Q2. Q1, Add Literal to FSR = Q3. Q1, Add Literal to FSR = . Q1, Add Literal to FSR = Q4. Decode, Add Literal to FSR = Read literal 'k'. Decode, Add Literal to FSR = Process Data. Decode, Add Literal to FSR = . Decode, Add Literal to FSR = Write to FSR\nExample:\nADDFSR  2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n0422h",
    "23.2.2 EXTENDED INSTRUCTION SET\nSyntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operands:, Add Literal to FSR2 and Return = 0 \u2264 k \u2264 63. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \u2192 FSR2, (TOS) \u2192 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k",
    "23.2.2 EXTENDED INSTRUCTION SET\n\u2192 FSR2, (TOS) \u2192 PC. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Encoding:, Add Literal to FSR2 and Return = 1110. Encoding:, Add Literal to FSR2 and Return = 1000. Encoding:, Add Literal to FSR2 and Return = 11kk. Encoding:, Add Literal to FSR2 and Return = kkkk. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading",
    "23.2.2 EXTENDED INSTRUCTION SET\nthe PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the ADDFSR instruction,. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = . Words:, Add Literal to FSR2 and Return = . Words:, Add Literal to",
    "23.2.2 EXTENDED INSTRUCTION SET\nFSR2 and Return = . Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = . Cycles:, Add Literal to FSR2 and Return = . Cycles:, Add Literal to FSR2 and Return = ",
    "Q Cycle Activity:\nDecode, Q2 = Read literal 'k'. Decode, Q3 = Process Data. Decode, Q4 = Write to FSR. No Operation, Q2 = No Operation. No Operation, Q3 = No Operation. No Operation, Q4 = No Operation\nExample:\nADDULNK 23h\nBefore Instruction, 1 = Before Instruction. , 1 = FSR2. , 1 = PC. After Instruction, 1 = After Instruction. , 1 = FSR2. , 1 = PC\nNote:\nAll PIC18 instructions may take an optional label argument preceding the instruction mnemonic for use in symbolic addressing. If a label is used, the instruction syntax then becomes: {label}    instruction    argument(s).",
    "Q Cycle Activity:\nSyntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Syntax:, Subroutine Call Using WREG = CALLW. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operands:, Subroutine Call Using WREG = None. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Operation:, Subroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Operation:,",
    "Q Cycle Activity:\nSubroutine Call Using WREG = (PC + 2) \u2192 TOS, (W) \u2192 PCL, (PCLATH) \u2192 PCH, (PCLATU) \u2192 PCU. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Status Affected:, Subroutine Call Using WREG = None. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0000. Encoding:, Subroutine Call Using WREG = 0001. Encoding:, Subroutine Call Using WREG = 0100. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS",
    "Q Cycle Activity:\nor BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value is discarded. Then the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Description, Subroutine Call Using WREG = First, the return address (PC + 2) is pushed onto the return stack. Next, the contents of Ware written to PCL; the existing value",
    "Q Cycle Activity:\nis discarded. Then the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Words:, Subroutine Call Using WREG = 1. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Cycles:, Subroutine Call Using WREG = 2. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q Cycle Activity:, Subroutine Call Using WREG = Q Cycle Activity:. Q1, Subroutine Call Using WREG = Q2.",
    "Q Cycle Activity:\nQ1, Subroutine Call Using WREG = Q3. Q1, Subroutine Call Using WREG = . Q1, Subroutine Call Using WREG = Q4. Decode, Subroutine Call Using WREG = Read. Decode, Subroutine Call Using WREG = WREG. Decode, Subroutine Call Using WREG = Push PC to stack. Decode, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = . No operation, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation. No operation, Subroutine Call Using WREG = No operation\nExample:\nHERE\nCALLW\nBefore Instruction\nPC\n=\naddress (HERE)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nAfter Instruction\nPC\n=\n001006h\nTOS\n=\naddress (HERE + 2)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3",
    "Q Cycle Activity:\nDecode, 1 = Determine source addr. Decode, 2 = Determine source addr. Decode, 3 = Read source reg. Decode, 1 = No operation No dummy read. Decode, 2 = No operation. Decode, 3 = Write register 'f' (dest)\nExample:\nMOVSF   [05h], REG2\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nREG2\n= 11h\nAfter Instruction\nFSR2\n= 80h\nContents\nof 85h\n= 33h\nREG2\n=\n33h",
    "PIC18F2X1X/4X1X\nSyntax:, Move Indexed to f = MOVSF [z s ], f d. Syntax:, Move Indexed to f = MOVSF [z s ], f d. Syntax:, Move Indexed to f = MOVSF [z s ], f d. Syntax:, Move Indexed to f = MOVSF [z s ], f d. Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operands:, Move Indexed to f = 0 \u2264 z s \u2264 127 0 \u2264 f d \u2264 4095. Operation:, Move Indexed to f = ((FSR2) + z s ) \u2192 f d. Operation:, Move Indexed to f = ((FSR2) + z s ) \u2192 f d. Operation:, Move Indexed to f = ((FSR2) + z s ) \u2192 f d. Operation:, Move Indexed to",
    "PIC18F2X1X/4X1X\nf = ((FSR2) + z s ) \u2192 f d. Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = None. Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . 1st word (source), Move Indexed to f = 1110. 1st word (source), Move Indexed to f = 1011. 1st word (source), Move Indexed to f = 0zzz. 1st word (source), Move Indexed to f = zzzz s. 2nd word (destin.), Move Indexed to f = 1111. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff d\nDescription:",
    "PIC18F2X1X/4X1X\nThe contents of the source register are moved to destination register 'f d '. The actual address of the source register is determined by adding the 7-bit literal offset 'z s ' in the first word to the value of FSR2. The address of the destination register is specified by the 12-bit literal 'f d ' in the second word. Both addresses can be anywhere in the 4096-byte data space (000h to FFFh).\nThe MOVSF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h.\n2\n2\nQ4\nMOVSS",
    "Move Indexed to Indexed\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding: 1st word (source) 2nd word (dest.)\nDescription\nWords:\nCycles:\nMOVSS   [z s ], [z d ]\n0 \u2264 z s \u2264 127\n0 \u2264 z d \u2264 127\n((FSR2) + z s ) \u2192 ((FSR2) + z d )\nNone\n1110\n1011\n1zzz zzzz s\n1111\nxxxx xzzz\nzzzz d\nThe contents of the source register are moved to the destination register. The addresses of the source and destination registers are determined by adding the 7-bit literal offsets 'z s ' or 'z d ', respectively, to the value of FSR2. Both registers can be located anywhere in the 4096-byte data memory space (000h to FFFh).\nThe MOVSS instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h. If the resultant destination address points to an indirect addressing register, the instruction will execute as a NOP .\n2\n2\nQ Cycle Activity:",
    "Move Indexed to Indexed\nDecode, Q2 = Determine source addr. Decode, Q3 = Determine source addr. Decode, Q4 = Read source reg. Decode, Q2 = Determine dest addr. Decode, Q3 = Determine dest addr. Decode, Q4 = Write to dest reg\nExample:\nMOVSS  [05h], [06h]\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nContents\nof 86h\n= 11h\nAfter Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nContents\nof 86h\n= 33h",
    "Move Indexed to Indexed\nSyntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Syntax:, Store Literal at FSR2, Decrement FSR2 = PUSHL k. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operands:, Store Literal at FSR2, Decrement FSR2 = 0 \u2264 k \u2264 255. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2.",
    "Move Indexed to Indexed\nOperation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Operation:, Store Literal at FSR2, Decrement FSR2 = k \u2192 (FSR2), FSR2 - 1 \u2192 FSR2. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Status Affected:, Store Literal at FSR2, Decrement FSR2 = None. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1111. Encoding:, Store Literal at FSR2, Decrement FSR2 = 1010. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk. Encoding:, Store Literal at FSR2, Decrement FSR2 = kkkk\nDescription:",
    "Move Indexed to Indexed\nThe 8-bit literal 'k' is written to the data memory address specified by FSR2. FSR2 is decremented by 1 after the operation. This instruction allows users to push values onto a software stack.\nWords:\nCycles:\nQ Cycle Activity:\n1\n1\nDecode, Q2 = Read 'k'. Decode, Q3 = Process data. Decode, Q4 = Write to destination\nExample:\nPUSHL  08h\nBefore Instruction FSR2H:FSR2L Memory (01ECh)\n=\n01ECh\n= 00h\nAfter Instruction\nFSR2H:FSR2L\n=\n01EBh\nMemory (01ECh)\n= 08h",
    "Move Indexed to Indexed\nSyntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR = 0 \u2264 k \u2264 63. Operation:, Subtract Literal from FSR = FSR(f) - k \u2192 FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \u2192 FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \u2192 FSRf. Operation:, Subtract Literal from FSR = FSR(f) - k \u2192 FSRf. Status Affected:, Subtract Literal from FSR = None. Status",
    "Move Indexed to Indexed\nAffected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Encoding:, Subtract Literal from FSR = 1110. Encoding:, Subtract Literal from FSR = 1001. Encoding:, Subtract Literal from FSR = ffkk. Encoding:, Subtract Literal from FSR = kkkk. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Words:, Subtract Literal from FSR",
    "Move Indexed to Indexed\n= 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Q Cycle Activity: Q1, Subtract Literal from FSR = Q2. Q Cycle Activity: Q1, Subtract Literal from FSR = Q3. Q Cycle Activity: Q1, Subtract Literal from FSR = . Q Cycle Activity: Q1, Subtract Literal from FSR = Q4. Decode, Subtract Literal from FSR = Read register 'f'. Decode, Subtract Literal from FSR = Process Data. Decode, Subtract Literal from FSR = . Decode, Subtract Literal from FSR = Write to destination\nExample:\nSUBFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n03DCh",
    "PIC18F2X1X/4X1X\nSyntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Syntax:, Subtract Literal from FSR2and Return = SUBULNK k. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operands:, Subtract Literal from FSR2and Return = 0 \u2264 k \u2264 63. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2 (TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2 (TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2",
    "PIC18F2X1X/4X1X\n(TOS) \u2192 PC. Operation:, Subtract Literal from FSR2and Return = FSR2 - k \u2192 FSR2 (TOS) \u2192 PC. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Status Affected:, Subtract Literal from FSR2and Return = None. Encoding:, Subtract Literal from FSR2and Return = 1110. Encoding:, Subtract Literal from FSR2and Return = 1001. Encoding:, Subtract Literal from FSR2and Return = 11kk. Encoding:, Subtract Literal from FSR2and Return = kkkk. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought",
    "PIC18F2X1X/4X1X\nof as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from FSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Subtract Literal from",
    "PIC18F2X1X/4X1X\nFSR2and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be thought of as a special case of the SUBFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Words:, Subtract Literal from FSR2and Return = 1. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Cycles:, Subtract Literal from FSR2and Return = 2. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q",
    "PIC18F2X1X/4X1X\nCycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR2and Return = Q Cycle Activity:. Q1, Subtract Literal from FSR2and Return = Q2. Q1, Subtract Literal from FSR2and Return = . Q1, Subtract Literal from FSR2and Return = Q3. Q1, Subtract Literal from FSR2and Return = Q4. Decode, Subtract Literal from FSR2and Return = Decode. Decode, Subtract Literal from FSR2and Return = Read register 'f'. Decode, Subtract Literal from FSR2and Return = Process Data. Decode, Subtract Literal from FSR2and Return = Write to destination. No Operation, Subtract Literal from FSR2and Return = No Operation. No Operation, Subtract Literal from FSR2and Return = No Operation. No Operation, Subtract Literal from",
    "PIC18F2X1X/4X1X\nFSR2and Return = No Operation. No Operation, Subtract Literal from FSR2and Return = No Operation\nExample:\nSUBULNK 23h\nBefore Instruction\nFSR2\n=\n03FFh\nPC\n=\n0100h\nAfter Instruction\nFSR2\n=\n03DCh\nPC\n=\n(TOS)",
    "23.2.3 BYTE-ORIENTED AND BIT-ORIENTED INSTRUCTIONS IN INDEXED LITERAL OFFSET MODE\nNote:\nEnabling the PIC18 instruction set extension may cause legacy applications to behave erratically or fail entirely.\nIn addition to eight new commands in the extended set, enabling  the  extended  instruction  set  also  enables Indexed Literal Offset Addressing mode ( Section 5.5.1 'Indexed Addressing with Literal Offset' ). This has a significant impact on the way that many commands of the standard PIC18 instruction set are interpreted.\nWhen the extended set is disabled, addresses embedded in opcodes are treated as literal memory locations: either as a location in the Access Bank ('a' = 0 ) or in a GPR bank designated by the BSR ('a' = 1 ). When the extended  instruction  set  is enabled  and  'a'  = 0 , however,  a  file  register  argument  of  5Fh  or  less  is interpreted as an offset from the pointer value in FSR2 and not as a literal address. For practical purposes, this means that all instructions that use the Access RAM bit as  an  argument  -  that  is,  all  byte-oriented  and  bitoriented instructions, or almost half of the core PIC18 instructions -may behave differently when the extended instruction set is enabled.",
    "23.2.3 BYTE-ORIENTED AND BIT-ORIENTED INSTRUCTIONS IN INDEXED LITERAL OFFSET MODE\nWhen the content of FSR2 is 00h, the boundaries of the Access RAM are essentially remapped to their original values.  This  may  be  useful  in  creating  backward compatible code. If this technique is used, it may be necessary  to  save  the  value  of  FSR2  and  restore  it when moving back and forth between C and assembly routines in order to preserve the Stack Pointer. Users must also keep in mind the syntax requirements of the extended instruction set (see Section 23.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' ).\nAlthough the Indexed Literal Offset Addressing mode can  be  very  useful  for  dynamic  stack  and  pointer manipulation, it can also be very annoying if a simple arithmetic operation is carried out on  the wrong register.  Users  who  are  accustomed  to  the  PIC18 programming  must  keep  in mind that when  the extended instruction set is enabled, register addresses of  5Fh  or  less  are  used  for  Indexed  Literal  Offset Addressing.\nRepresentative examples of typical byte-oriented and bit-oriented  instructions  in  the  Indexed  Literal  Offset Addressing mode are provided on the following page to show how execution is affected. The operand conditions  shown  in  the  examples  are  applicable  to  all instructions of these types.",
    "23.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the extended instruction set is enabled, the file register argument, 'f', in the standard byte-oriented and bit-oriented commands is replaced with the literal offset value, 'k'. As already noted, this occurs only when 'f' is less than or equal to 5Fh. When an offset value is used, it must be indicated by square brackets ('[ ]'). As with the extended instructions, the use of brackets indicates to the compiler that the value is to be interpreted as an index  or  an  offset.  Omitting  the  brackets,  or  using  a value greater than 5Fh within brackets, will generate an error in the MPASM Assembler.\nIf the index argument is properly bracketed for Indexed Literal Offset Addressing, the Access RAM argument is never specified; it will automatically be assumed to be ' 0 '. This is in contrast to standard operation (extended instruction set disabled) when 'a' is set on the basis of the  target  address.  Declaring  the  Access  RAM  bit  in this  mode will  also  generate  an  error  in  the  MPASM Assembler.\nThe destination argument, 'd', functions as before.",
    "23.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nIn the latest versions  of the MPASM  Assembler, language support for the extended instruction set must be  explicitly  invoked.  This  is  done  with  either  the command line  option, /y ,  or  the  PE  directive  in  the source listing.",
    "23.2.4 CONSIDERATIONS WHEN ENABLING THE EXTENDED INSTRUCTION SET\nIt is important to note that the extensions to the instruction set may not be beneficial to all users. In particular, users who are not writing code that uses a software stack may not benefit from using the extensions to the instruction set.\nAdditionally, the  Indexed  Literal  Offset  Addressing mode  may  create  issues  with  legacy  applications written to the  PIC18  assembler.  This  is  because instructions in the legacy code may attempt to address registers in the Access Bank below 5Fh. Since these addresses  are  interpreted  as  literal  offsets  to  FSR2 when  the  instruction  set  extension  is  enabled,  the application  may  read  or  write  to  the  wrong  data addresses.\nWhen porting an application to the PIC18F2X1X/4X1X, it is very important to consider the type of code. A large, re-entrant application that  is  written  in  'C'  and  would benefit  from  efficient  compilation  will  do  well  when using  the  instruction  set  extensions.  Legacy  applications that heavily use the Access Bank will most likely not benefit from using the extended instruction set.\nAdd W to Indexed\nADDWF\n(Indexed Literal Offset mode)\nSyntax:\nADDWF      [k] {,d}\nOperands:\n0 \u2264 k \u2264 95",
    "23.2.4 CONSIDERATIONS WHEN ENABLING THE EXTENDED INSTRUCTION SET\nd \u2208 [0,1]\nOperation:\n(W) + ((FSR2) + k) \u2192 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0010\n01d0\nkkkk\nkkkk\nDescription:\nThe contents of W are added to the contents of the register indicated by FSR2, offset by the value 'k'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f' (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead 'k'\nProcess\nData\nWrite to\ndestination\nExample:\nADDWF\n[OFST] ,0\nBefore Instruction\nW\n=\n17h\nOFST\n=\n2Ch\nFSR2\n=\n0A00h\nContents\nof 0A2Ch\n= 20h\nAfter Instruction\nW\n= 37h\nContents\nof 0A2Ch\n=\n20h",
    "PIC18F2X1X/4X1X\nBit Set Indexed",
    "BSF\n(Indexed Literal Offset mode)\nSyntax:\nBSF   [k], b\nOperands:\n0 \u2264 f \u2264 95\n0 \u2264 b \u2264 7\nOperation:\n1 \u2192 ((FSR2) + k)<b>\nStatus Affected:\nNone\nEncoding:\n1000\nbbb0\nkkkk\nkkkk\nDescription:\nBit 'b' of the register indicated by FSR2, offset by the value 'k', is set.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination",
    "Example:\nBSF\n[FLAG_OFST], 7\nBefore Instruction\nFLAG_OFST\n= 0Ah\nFSR2\n=\n0A00h\nContents\nof 0A0Ah\n=\n55h\nAfter Instruction\nContents\nof 0A0Ah\n= D5h",
    "Example:\nSyntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Syntax:, Set Indexed (Indexed Literal Offset mode) = SETF [k]. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operands:, Set Indexed (Indexed Literal Offset mode) = 0 \u2264 k \u2264 95. Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Operation:, Set Indexed (Indexed Literal Offset mode) = FFh \u2192 ((FSR2) + k). Status Affected:, Set Indexed",
    "Example:\n(Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Status Affected:, Set Indexed (Indexed Literal Offset mode) = None. Encoding:, Set Indexed (Indexed Literal Offset mode) = 0110. Encoding:, Set Indexed (Indexed Literal Offset mode) = 1000. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Encoding:, Set Indexed (Indexed Literal Offset mode) = kkkk. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, Set Indexed (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set",
    "Example:\nto FFh.. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Words:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Cycles:, Set Indexed (Indexed Literal Offset mode) = 1. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q Cycle Activity:, Set Indexed (Indexed Literal Offset mode) = Q Cycle Activity:. Q1, Set Indexed (Indexed Literal Offset mode) = Q2. Q1, Set Indexed (Indexed Literal Offset mode) = Q3. Q1, Set Indexed (Indexed Literal Offset mode) = . Q1, Set Indexed (Indexed Literal Offset mode) = Q4. Decode,",
    "Example:\nSet Indexed (Indexed Literal Offset mode) = Read 'k'. Decode, Set Indexed (Indexed Literal Offset mode) = Process Data. Decode, Set Indexed (Indexed Literal Offset mode) = . Decode, Set Indexed (Indexed Literal Offset mode) = Write register\nExample:\nSETF\n[OFST]\nBefore Instruction\nOFST\n=\n2Ch\nFSR2\n= 0A00h\nContents\nof 0A2Ch\n= 00h\nAfter Instruction\nContents\nof 0A2Ch\n= FFh",
    "23.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThe latest versions of Microchip's software tools have been designed to fully support the extended instruction set  of  the  PIC18F2X1X/4X1X family of devices. This includes the MPLAB C18 C compiler, MPASM assembly language and MPLAB Integrated Development Environment (IDE).\nWhen selecting a target device for software development, MPLAB IDE will automatically set default Configuration bits for that device. The default setting for the XINST  Configuration bit is ' 0 ', disabling the extended  instruction  set  and  Indexed  Literal  Offset Addressing mode. For proper execution of applications developed to take advantage of the extended instruction set, XINST must be set during programming.\nTo develop software for the extended instruction set, the user must enable support for the instructions and the Indexed Addressing mode in their language tool(s). Depending on the environment being used, this may be done in several ways:\n\u00b7 A menu option, or dialog box within the environment, that allows the user to configure the language tool and its settings for the project\n\u00b7 A command line option\n\u00b7 A directive in the source code",
    "23.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB \u00ae  IDE TOOLS\nThese options vary between different compilers, assemblers and development environments. Users are encouraged to review the documentation accompanying  their  development  systems  for  the  appropriate information.",
    "24.0 DEVELOPMENT SUPPORT\nThe  PIC \u00ae   microcontrollers  and  dsPIC \u00ae   digital  signal controllers are supported with a full range of software and hardware development tools:\n\u00b7 Integrated Development Environment\n-MPLAB \u00ae  IDE Software\n\u00b7 Compilers/Assemblers/Linkers\n-MPLAB C Compiler for Various Device Families\n-HI-TECH C for Various Device Families\n-MPASM TM  Assembler\n-MPLINK TM  Object Linker/ MPLIB TM  Object Librarian\n-MPLAB Assembler/Linker/Librarian for Various Device Families\n\u00b7 Simulators\n-MPLAB SIM Software Simulator\n\u00b7 Emulators\n-MPLAB REAL ICE\u2122 In-Circuit Emulator\n\u00b7 In-Circuit Debuggers\n-MPLAB ICD 3\n-PICkit\u2122 3 Debug Express\n\u00b7 Device Programmers\n-PICkit\u2122 2 Programmer\n-MPLAB PM3 Device Programmer\n\u00b7 Low-Cost Demonstration/Development Boards, Evaluation Kits, and Starter Kits",
    "24.1 MPLAB Integrated Development Environment Software\nThe MPLAB IDE software brings an ease of software development  previously  unseen  in  the  8/16/32-bit microcontroller market. The MPLAB IDE is a Windows \u00ae operating system-based application that contains:\n\u00b7 A single graphical interface to all debugging tools\n-Simulator\n-Programmer (sold separately)\n-In-Circuit Emulator (sold separately)\n-In-Circuit Debugger (sold separately)\n\u00b7 A full-featured editor with color-coded context\n\u00b7 A multiple project manager\n\u00b7 Customizable data windows with direct edit of contents\n\u00b7 High-level source code debugging\n\u00b7 Mouse over variable inspection\n\u00b7 Drag and drop variables from source to watch windows\n\u00b7 Extensive on-line help\n\u00b7 Integration of select third party tools, such as IAR C Compilers\nThe MPLAB IDE allows you to:\n\u00b7 Edit your source files (either C or assembly)\n\u00b7 One-touch compile or assemble, and download to emulator and simulator tools (automatically updates all project information)\n\u00b7 Debug using:\n-Source files (C or assembly)\n-Mixed C and assembly\n-Machine code",
    "24.1 MPLAB Integrated Development Environment Software\nMPLAB  IDE  supports  multiple  debugging  tools  in  a single development paradigm, from the cost-effective simulators,  through  low-cost  in-circuit  debuggers,  to full-featured  emulators.  This  eliminates  the  learning curve when upgrading to tools with increased flexibility and power.",
    "24.2 MPLAB C Compilers for Various Device Families\nThe MPLAB C Compiler code development systems are complete ANSI C compilers for Microchip's PIC18, PIC24 and PIC32 families of microcontrollers and the dsPIC30 and dsPIC33 families of digital signal controllers. These  compilers  provide  powerful  integration capabilities,  superior  code  optimization  and  ease  of use.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.",
    "24.3 HI-TECH C for Various Device Families\nThe HI-TECH C Compiler code development systems are  complete  ANSI  C  compilers  for  Microchip's  PIC family of microcontrollers and the dsPIC family of digital signal  controllers.  These  compilers  provide  powerful integration  capabilities,  omniscient  code  generation and ease of use.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.\nThe compilers include a macro assembler, linker, preprocessor, and one-step driver, and can run on multiple platforms.",
    "24.4 MPASM Assembler\nThe  MPASM  Assembler  is  a  full-featured,  universal macro assembler for PIC10/12/16/18 MCUs.\nThe MPASM Assembler generates relocatable object files for the MPLINK Object Linker, Intel \u00ae  standard HEX files,  MAP  files  to  detail  memory  usage  and  symbol reference, absolute LST files that contain source lines and  generated  machine  code  and  COFF  files  for debugging.\nThe MPASM Assembler features include:\n\u00b7 Integration into MPLAB IDE projects\n\u00b7 User-defined macros to streamline assembly code\n\u00b7 Conditional assembly for multi-purpose source files\n\u00b7 Directives that allow complete control over the assembly process",
    "24.5 MPLINK Object Linker/ MPLIB Object Librarian\nThe  MPLINK  Object  Linker  combines relocatable objects  created  by  the  MPASM  Assembler  and  the MPLAB C18 C Compiler. It can link relocatable objects from  precompiled  libraries,  using  directives  from  a linker script.\nThe MPLIB Object Librarian manages the creation and modification of library files of precompiled code. When a routine from a library is called from a source file, only the modules that contain that routine will be linked in with  the  application.  This  allows  large  libraries  to  be used efficiently in many different applications.\nThe object linker/library features include:\n\u00b7 Efficient linking of single libraries instead of many smaller files\n\u00b7 Enhanced code maintainability by grouping related modules together\n\u00b7 Flexible creation of libraries with easy module listing, replacement, deletion and extraction",
    "24.6 MPLAB Assembler, Linker and Librarian for Various Device Families\nMPLAB  Assembler  produces  relocatable machine code  from  symbolic  assembly  language  for  PIC24, PIC32 and dsPIC devices. MPLAB C Compiler uses the assembler to produce its object file. The assembler generates  relocatable  object  files  that  can  then  be archived or linked with other relocatable object files and archives to create an executable file. Notable features of the assembler include:\n\u00b7 Support for the entire device instruction set\n\u00b7 Support for fixed-point and floating-point data\n\u00b7 Command line interface\n\u00b7 Rich directive set\n\u00b7 Flexible macro language\n\u00b7 MPLAB IDE compatibility",
    "24.7 MPLAB SIM Software Simulator\nThe  MPLAB  SIM  Software  Simulator  allows  code development in a PC-hosted environment by simulating the PIC MCUs and dsPIC \u00ae  DSCs on an instruction level. On any given instruction, the data areas can be examined or modified and stimuli can be applied from a comprehensive stimulus controller. Registers can be logged to files for further run-time analysis. The trace buffer and logic analyzer display extend the power of the simulator to record and track program execution, actions on I/O, most peripherals and internal registers.\nThe  MPLAB  SIM  Software  Simulator  fully  supports symbolic  debugging  using  the  MPLAB  C Compilers, and  the  MPASM  and  MPLAB  Assemblers.  The  software  simulator  offers  the  flexibility  to  develop  and debug code outside of the hardware laboratory environment, making it an excellent, economical software development tool.",
    "24.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB  REAL  ICE  In-Circuit Emulator System  is Microchip's  next  generation  high-speed  emulator  for Microchip Flash DSC and MCU devices. It debugs and programs PIC \u00ae  Flash MCUs and dsPIC \u00ae  Flash DSCs with the easy-to-use, powerful graphical user interface of the MPLAB Integrated Development Environment (IDE), included with each kit.\nThe emulator is connected to the design engineer's PC using a high-speed USB 2.0 interface and is connected to the target with either a connector compatible with incircuit debugger systems (RJ11) or with the new highspeed,  noise  tolerant,  Low-Voltage  Differential  Signal (LVDS) interconnection (CAT5).",
    "24.8 MPLAB REAL ICE In-Circuit Emulator System\nThe emulator is field upgradable through future firmware downloads  in  MPLAB  IDE.  In  upcoming  releases  of MPLAB IDE, new devices will be supported, and new features will be added. MPLAB REAL ICE offers significant  advantages  over  competitive  emulators  including low-cost, full-speed emulation, run-time variable watches, trace analysis, complex breakpoints, a ruggedized probe interface and long (up to three meters) interconnection cables.",
    "24.9 MPLAB ICD 3 In-Circuit Debugger System\nMPLAB ICD 3 In-Circuit  Debugger  System  is  Microchip's most cost effective high-speed hardware debugger/programmer for Microchip Flash Digital Signal Controller (DSC) and microcontroller (MCU) devices. It debugs and programs PIC \u00ae  Flash microcontrollers and dsPIC \u00ae DSCs with the powerful, yet easyto-use  graphical  user  interface  of  MPLAB  Integrated Development Environment (IDE).\nThe MPLAB ICD 3 In-Circuit Debugger probe is connected to the design engineer's PC using a high-speed USB 2.0 interface and is connected to the target with a connector compatible with the MPLAB ICD 2 or MPLAB REAL ICE systems (RJ-11). MPLAB ICD 3 supports all MPLAB ICD 2 headers.",
    "24.10 PICkit 3 In-Circuit Debugger/ Programmer and PICkit 3 Debug Express\nThe MPLAB PICkit 3 allows debugging and programming of PIC \u00ae  and dsPIC \u00ae  Flash microcontrollers at a most affordable price point using the powerful graphical user interface of the MPLAB Integrated Development Environment (IDE). The MPLAB PICkit 3 is connected to  the  design  engineer's  PC  using  a  full  speed  USB interface  and  can  be  connected  to  the  target  via  an Microchip  debug  (RJ-11)  connector  (compatible  with MPLAB ICD 3 and MPLAB REAL ICE). The connector uses two device I/O pins and the reset line to implement  in-circuit  debugging  and  In-Circuit  Serial  Programming\u2122.\nThe PICkit 3 Debug Express include the PICkit 3, demo board and microcontroller, hookup cables and CDROM with user's guide, lessons, tutorial, compiler and MPLAB IDE software.",
    "24.11 PICkit 2 Development Programmer/Debugger and PICkit 2 Debug Express\nThe PICkit\u2122 2 Development Programmer/Debugger is a low-cost development tool with an easy to use interface for programming and debugging Microchip's Flash families of microcontrollers. The full featured Windows \u00ae   programming  interface  supports  baseline (PIC10F, PIC12F5xx, PIC16F5xx), midrange (PIC12F6xx, PIC16F), PIC18F, PIC24, dsPIC30, dsPIC33, and PIC32 families of 8-bit, 16-bit, and 32-bit microcontrollers, and many Microchip Serial EEPROM products. With Microchip's powerful MPLAB Integrated Development Environment (IDE) the PICkit\u2122 2 enables in-circuit debugging on most PIC \u00ae  microcontrollers.  In-Circuit-Debugging  runs,  halts  and  single steps  the  program  while  the  PIC  microcontroller  is embedded in the application. When halted at a breakpoint, the file registers can be examined and modified.",
    "24.11 PICkit 2 Development Programmer/Debugger and PICkit 2 Debug Express\nThe PICkit 2 Debug Express include the PICkit 2, demo board and microcontroller, hookup cables and CDROM with user's guide, lessons, tutorial, compiler and MPLAB IDE software.",
    "24.12 MPLAB PM3 Device Programmer\nThe MPLAB PM3 Device Programmer is a universal, CE compliant device programmer with programmable voltage verification at VDDMIN and VDDMAX for maximum  reliability.  It  features  a  large  LCD  display (128 x 64) for menus and error messages and a modular,  detachable  socket  assembly  to  support  various package types. The ICSP\u2122 cable assembly is included as a standard item. In Stand-Alone mode, the MPLAB PM3 Device Programmer can read, verify and program PIC devices without a PC connection. It can also set code  protection in this mode.  The  MPLAB  PM3 connects to the host PC via an RS-232 or USB cable. The MPLAB PM3 has high-speed communications and optimized  algorithms  for  quick  programming  of  large memory devices and incorporates an MMC card for file storage and data applications.",
    "24.13 Demonstration/Development Boards, Evaluation Kits, and Starter Kits\nA  wide  variety  of demonstration,  development  and evaluation  boards  for  various  PIC  MCUs  and  dsPIC DSCs allows quick application development on fully functional systems. Most boards include prototyping areas for adding custom circuitry and provide application firmware and source code for examination and modification.\nThe boards support a variety of features, including LEDs, temperature sensors, switches, speakers, RS-232 interfaces, LCD displays, potentiometers and additional EEPROM memory.\nThe  demonstration  and  development  boards  can  be used in teaching environments, for prototyping custom circuits and for learning about various microcontroller applications.\nIn addition to the PICDEM\u2122 and dsPICDEM\u2122 demonstration/development board series of circuits, Microchip has a line of evaluation kits and demonstration software for  analog  filter  design,  KEELOQ \u00ae security  ICs,  CAN, IrDA \u00ae ,  PowerSmart  battery  management,  SEEVAL \u00ae evaluation system, Sigma-Delta ADC, flow rate sensing, plus many more.\nAlso available are starter kits that contain everything needed to experience the specified device. This usually includes a single application and debug capability, all on one board.",
    "24.13 Demonstration/Development Boards, Evaluation Kits, and Starter Kits\nCheck the Microchip web page (www.microchip.com) for  the  complete  list  of  demonstration,  development and evaluation kits.",
    "Absolute Maximum Ratings (\u2020)\nAmbient temperature under bias.............................................................................................................-40\u00b0C to +125\u00b0C",
    "Absolute Maximum Ratings (\u2020)\nStorage temperature .............................................................................................................................. -65\u00b0C to +150\u00b0C\nVoltage on any pin with respect to VSS (except VDD and MCLR) ................................................... -0.3V to (VDD + 0.3V)",
    "Absolute Maximum Ratings (\u2020)\nVoltage on VDD with respect to VSS  .........................................................................................................  -0.3V to +7.5V\nVoltage on MCLR with respect to VSS (Note 2)\n......................................................................................... 0V to +13.25V\nTotal power dissipation (Note 1)",
    "Absolute Maximum Ratings (\u2020)\n...............................................................................................................................1.0W",
    "Absolute Maximum Ratings (\u2020)\nMaximum current out of VSS pin ...........................................................................................................................300 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current into VDD pin ..............................................................................................................................250 mA\nInput clamp current, IIK (VI < 0 or VI > VDD)",
    "Absolute Maximum Ratings (\u2020)\n...................................................................................................................... \u00b1\n20 mA\nOutput clamp current, IOK (VO < 0 or VO > VDD)\n.............................................................................................................. \u00b1",
    "Absolute Maximum Ratings (\u2020)\n20 mA\nMaximum output current sunk by any I/O pin..........................................................................................................25 mA\nMaximum output current sourced by any I/O pin ....................................................................................................25 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current sunk by all ports .......................................................................................................................200 mA\nMaximum current sourced by all ports ..................................................................................................................200 mA",
    "Absolute Maximum Ratings (\u2020)\nNote 1: Power dissipation is calculated as follows:\nPdis = VDD x {IDD -\u2211 IOH} + \u2211 {(VDD - VOH) x IOH} + \u2211 (VOL x IOL)\n- 2: Voltage spikes below VSS at the MCLR/VPP/RE3 pin, inducing currents greater than 80 mA, may cause latch-up. Thus, a series resistor of 50-100 \u03a9 should be used when applying a 'low' level to the MCLR/VPP/ RE3 pin, rather than pulling this pin directly to VSS.\n\u2020 NOTICE: Stresses above those listed under 'Absolute Maximum Ratings' may cause permanent damage to the device. This is a stress rating only and functional operation of the device at those or any other conditions above those indicated in the operation listings of this specification is not implied. Exposure to maximum rating conditions for extended periods may affect device reliability.",
    "PIC18F2X1X/4X1X\nFIGURE 25-1: PIC18F2X1X/4X1X VOLTAGE-FREQUENCY GRAPH (INDUSTRIAL)\nFIGURE 25-2: PIC18F2X1X/4X1X VOLTAGE-FREQUENCY GRAPH (EXTENDED)",
    "25.1 DC Characteristics:\nSupply Voltage PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nPIC18LF2X1X/4X1X\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2X1X/4X1X\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "25.1 DC Characteristics:\nD001, Symbol = VDD. D001, Characteristic = Supply Voltage. D001, Min = Supply Voltage. D001, Typ = Supply Voltage. D001, Max = Supply Voltage. D001, Units = Supply Voltage. D001, Conditions = Supply Voltage. D001, Symbol = VDD. D001, Characteristic = PIC18LF2X1X/4X1X. D001, Min = 2.0. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = HS, XT, RC and LP Oscillator mode. D001, Symbol = VDD. D001, Characteristic = PIC18F2X1X/4X1X. D001, Min = 4.2. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = . D002, Symbol = VDR. D002, Characteristic = RAM Data Retention Voltage (1). D002, Min =",
    "25.1 DC Characteristics:\n1.5. D002, Typ = -. D002, Max = -. D002, Units = V. D002, Conditions = . D003, Symbol = VPOR. D003, Characteristic = VDD Start Voltage to ensure internal Power-on Reset signal. D003, Min = -. D003, Typ = -. D003, Max = 0.7. D003, Units = V. D003, Conditions = See section on Power-on Reset for details. D004, Symbol = SVDD. D004, Characteristic = VDD Rise Rate to ensure internal Power-on Reset signal. D004, Min = 0.05. D004, Typ = -. D004, Max = -. D004, Units = V/ms. D004, Conditions = See section on Power-on Reset for details. D005, Symbol = VBOR. D005, Characteristic = Brown-out Reset Voltage. D005, Min = Brown-out Reset Voltage. D005, Typ = Brown-out Reset Voltage. D005, Max =",
    "25.1 DC Characteristics:\nBrown-out Reset Voltage. D005, Units = Brown-out Reset Voltage. D005, Conditions = Brown-out Reset Voltage. D005, Symbol = VBOR. D005, Characteristic = PIC18LF2X1X/4X1X. D005, Min = . D005, Typ = . D005, Max = . D005, Units = . D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV1:BORV0 = 11. D005, Min = NA. D005, Typ = 2.05. D005, Max = 2.16. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV1:BORV0 = 10. D005, Min = 2.65. D005, Typ = 2.79. D005, Max = 2.93. D005, Units = V. D005, Conditions = . D005, Symbol = . D005, Characteristic",
    "25.1 DC Characteristics:\n= All devices. D005, Min = All devices. D005, Typ = All devices. D005, Max = All devices. D005, Units = All devices. D005, Conditions = All devices. D005, Symbol = . D005, Characteristic = BORV1:BORV0 = 01. D005, Min = 4.11. D005, Typ = 4.33. D005, Max = 4.55. D005, Units = V. D005, Conditions = . D005, Symbol = . D005, Characteristic = BORV1:BORV0 = 00. D005, Min = 4.36. D005, Typ = 4.59. D005, Max = 4.82. D005, Units = V. D005, Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote 1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n25.2 DC Characteristics:",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nPIC18LF2X1X/4X1X\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2X1X/4X1X\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nPower-down Current (I PD) (1), Typ = Power-down Current (I PD) (1). Power-down Current (I PD) (1), Max = Power-down Current (I PD) (1). Power-down Current (I PD) (1), Units = Power-down Current (I PD) (1). Power-down Current (I PD) (1), Conditions = Power-down Current (I PD) (1). Power-down Current (I PD) (1), Conditions = Power-down Current (I PD) (1). PIC18LF2X1X/4X1X, Typ = 0.1. PIC18LF2X1X/4X1X, Max = 950. PIC18LF2X1X/4X1X, Units = nA. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nVDD = 2.0V, ( Sleep mode). , Typ = 0.1. , Max = 1.0. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V, ( Sleep mode). , Typ = 0.2. , Max = 5. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V, ( Sleep mode). PIC18LF2X1X/4X1X, Typ = 0.1. PIC18LF2X1X/4X1X, Max = 1.4. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V, ( Sleep mode). , Typ = 0.1. , Max = 2. ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nUnits = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V, ( Sleep mode). , Typ = 0.3. , Max = 8. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V, ( Sleep mode). All devices, Typ = 0.1. All devices, Max = 1.9. All devices, Units = \u03bc A. All devices, Conditions = -40\u00b0C. All devices, Conditions = VDD = 5.0V, ( Sleep mode). , Typ = 0.1. , Max = 2.0. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V, ( Sleep mode). , Typ = 0.4. , Max = 15. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V, ( Sleep mode). Extended devices only,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nTyp = 10. Extended devices only, Max = 120. Extended devices only, Units = \u03bc A. Extended devices only, Conditions = +125\u00b0C. Extended devices only, Conditions = VDD = 5.0V, ( Sleep mode)\nLegend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial)\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 15. , Max = 31.5. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 15. , Max = 30. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 15. , Max = 28.5. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 40. , Max = 63. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 35. , Max = 60. , Units = \u03bc A.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 30. , Max = 57. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 105. , Max = 168. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 90. , Max = 160. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 80. , Max = 152. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 80. , Max = 250. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.32. , Max = 1. , Units = mA. ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nConditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 0.33. , Max = 1. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 0.33. , Max = 1. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.6. , Max = 1.3. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 0.55. , Max = 1.2. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 0.6. , Max = 1.1. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.1. , Max =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n2.3. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 1.1. , Max = 2.2. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 1.0. , Max = 2.1. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 1. , Max = 3.3. , Units = mA. , Conditions = +125\u00b0C. , Conditions = \nLegend: Shading of rows is to assist in readability of the table.\nNote",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n25.2 DC Characteristics:\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.8. , Max = 2.1. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.8. , Max = 2.0. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.8. , Max = 1.9. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nmA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 5.3. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 5.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 4.8. , Units = mA. , Conditions =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n+85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 2.5. , Max = 10. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 2.9. , Max = 8. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = . , Typ = 3.1. , Max = 8. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = . , Typ = 3.6. , Max = 11. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 4.5. , Max = 11. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 4.8. , Max = 11. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 5.8. , Max = 15. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.2. , Max = 16. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.8. , Max = 16. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 11.4. , Max = 36. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Device = Extended devices only. , Typ = 21. , Max",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= 180. , Units = \u03bc A. , Conditions = +125\u00b0C. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nMCLR = VDD; WDT enabled/disabled as specified.\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial -40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 165. , Max = 350. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 175. , Max = 350. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 190. , Max = 350. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 250. , Max = 500. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 270. , Max = 500. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 290. , Max = 500. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 500. , Max = 1. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nTyp = 520. , Max = 1. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 550. , Max = 1. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 0.6. , Max = 2.9. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 340. , Max = 500. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 350. , Max = 500. ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nUnits = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 360. , Max = 500. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 520. , Max = 900. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 540. , Max = 900. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 580. , Max = 900. , Units = \u03bc A. , Conditions",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +85\u00b0C. , Conditions = . , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.1. , Max = 1.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.1. , Max = 1.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 1.1. , Max = 5.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = ",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nLegend: Shading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n25.2 DC Characteristics:\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 250. , Max = 500. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 260. , Max = 500. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 250. , Max = 500. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 550. , Max = 650. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 480. , Max = 650. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 460. , Max = 650. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 1.2. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nAll devices. , Typ = 1.1. , Max = 1.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Conditions = . , Device = Extended devices only. , Typ = 1.0. , Max = 3.5. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.72. , Max = 2.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.74. , Max = 2.0. , Units =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nmA. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 0.74. , Max = 2.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 2.7. , Max = 6.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 2.6. , Max = 6.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 6.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n2.6. , Max = 7.0. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Conditions = . , Device = Extended devices only. , Typ = 8.4. , Max = 21. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = Extended devices only. , Typ = 11. , Max = 28. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 15. , Max = 35. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 16. , Max = 35. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = . ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nDevice = All devices. , Typ = 16. , Max = 35. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C TA +85\u00b0C for industrial\n\u2264 \u2264\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = All devices. , Typ = 7.5. , Max = 16. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.4. , Max = 15. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 7.3. , Max = 14. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ (",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 8.0. , Max = 25. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 21. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 10. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 9.7. , Max = 19. , Units = mA. ,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nConditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = Extended devices only. , Typ = 10. , Max = 35. , Units = mA. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 17. , Max = 35. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 17. , Max = 35. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n). , Device = All devices. , Typ = 17. , Max = 35. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL ). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= 5.0V. , Conditions = FOSC = 10 MHZ ( PRI_RUN HS+PLL )\nLegend:\nShading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n25.2 DC Characteristics:\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C\n\u2264\nTA\n\u2264",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n+85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nSupply Current (I DD) (2,3), Typ = . Supply Current (I DD) (2,3), Max = . Supply Current (I DD) (2,3), Units = . Supply Current (I DD) (2,3), Conditions = . Supply Current (I DD) (2,3), Conditions = . Supply Current (I DD) (2,3), Conditions = . PIC18LF2X1X/4X1X, Typ = 65. PIC18LF2X1X/4X1X, Max = 130. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nTyp = 65. PIC18LF2X1X/4X1X, Max = 120. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +25\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 70. PIC18LF2X1X/4X1X, Max = 115. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +85\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V. PIC18LF2X1X/4X1X, Conditions = .",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X, Typ = 120. PIC18LF2X1X/4X1X, Max = 270. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 120. PIC18LF2X1X/4X1X, Max = 250. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +25\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 130. PIC18LF2X1X/4X1X, Max = 240. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +85\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V. PIC18LF2X1X/4X1X, Conditions = . All devices, Typ = 300. All devices, Max = 480. All devices, Units = \u03bc A. All devices, Conditions = -40\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . All devices, Typ = 240. All devices, Max = 450. All devices, Units = \u03bc A. All devices, Conditions = +25\u00b0C. All devices, Conditions",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . All devices, Conditions = . All devices, Typ = 300. All devices, Max = 430. All devices, Units = \u03bc A. All devices, Conditions = +85\u00b0C. All devices, Conditions = . All devices, Conditions = . Extended devices only, Typ = 320. Extended devices only, Max = 900. Extended devices only, Units = \u03bc A. Extended devices only, Conditions = +125\u00b0C. Extended devices only, Conditions = . Extended devices only, Conditions = . PIC18LF2X1X/4X1X, Typ = 260. PIC18LF2X1X/4X1X, Max = 475. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V. PIC18LF2X1X/4X1X, Conditions = .",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X, Typ = 255. PIC18LF2X1X/4X1X, Max = 450. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +25\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 270. PIC18LF2X1X/4X1X, Max = 430. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +85\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 2.0V.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 420. PIC18LF2X1X/4X1X, Max = 900. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = -40\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 430. PIC18LF2X1X/4X1X, Max = 850. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +25\u00b0C. PIC18LF2X1X/4X1X, Conditions =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nVDD = 3.0V. PIC18LF2X1X/4X1X, Conditions = . PIC18LF2X1X/4X1X, Typ = 450. PIC18LF2X1X/4X1X, Max = 810. PIC18LF2X1X/4X1X, Units = \u03bc A. PIC18LF2X1X/4X1X, Conditions = +85\u00b0C. PIC18LF2X1X/4X1X, Conditions = VDD = 3.0V. PIC18LF2X1X/4X1X, Conditions = . All devices, Typ = 0.9. All devices, Max = 1.5. All devices, Units = mA. All devices, Conditions = -40\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . All devices, Typ = 0.9. All devices, Max = 1.4. All devices, Units =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nmA. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . All devices, Typ = 0.9. All devices, Max = 1.3. All devices, Units = mA. All devices, Conditions = +85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . Extended devices only, Typ = 1. Extended devices only, Max = 1.2. Extended devices only, Units = mA. Extended devices only, Conditions = +125\u00b0C. Extended devices only, Conditions = . Extended devices only, Conditions = . Extended devices only, Typ = 2.8. Extended devices only, Max = 7.0. Extended devices only, Units = mA. Extended devices only, Conditions = +125\u00b0C. Extended devices only, Conditions = VDD = 4.2V. Extended devices only, Conditions = . Extended devices only, Typ = 4.3. Extended devices only, Max =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n11. Extended devices only, Units = mA. Extended devices only, Conditions = +125\u00b0C. Extended devices only, Conditions = VDD = 5.0V. Extended devices only, Conditions = . All devices, Typ = 6.0. All devices, Max = 16. All devices, Units = mA. All devices, Conditions = -40\u00b0C. All devices, Conditions = VDD = 4.2V. All devices, Conditions = . All devices, Typ = 6.2. All devices, Max = 16. All devices, Units = mA. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 4.2V. All devices, Conditions = . All devices, Typ = 6.6. All devices, Max = 16. All devices, Units = mA. All devices, Conditions = +85\u00b0C. All devices, Conditions = . All devices, Conditions = . All devices, Typ = 8.1. All devices, Max = 18. All devices, Units =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nmA. All devices, Conditions = -40\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . All devices, Typ = 9.1. All devices, Max = 18. All devices, Units = mA. All devices, Conditions = +25\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = . All devices, Typ = 8.3. All devices, Max = 18. All devices, Units = mA. All devices, Conditions = +85\u00b0C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\nPIC18LF2X1X/4X1X\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\nPIC18F2X1X/4X1X\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X1X/4X1X. , Typ = 14. , Max = 40. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 15. , Max = 40. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 16. , Max =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n40. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 40. , Max = 74. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 35. , Max = 70. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 31. , Max = 67. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = All devices. , Typ = 99. , Max = 150. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = All devices. , Typ = 81. , Max = 150. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = All devices. , Typ = 75.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Max = 150. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_RUN mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 2.5. , Max = 12. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 3.7. , Max = 12. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nPIC18LF2X1X/4X1X. , Typ = 4.5. , Max = 12. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 5.0. , Max = 15. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = . , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = PIC18LF2X1X/4X1X. , Typ = 5.4. , Max = 15. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = . , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock).",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n, Device = PIC18LF2X1X/4X1X. , Typ = 6.3. , Max = 15. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = . , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = All devices. , Typ = 8.5. , Max = 25. , Units = \u03bc A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = All devices. , Typ = 9.0. , Max = 25. , Units = \u03bc A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock). , Device = All devices. , Typ =",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n10.5. , Max = 36. , Units = \u03bc A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 32 kHz (4) ( SEC_IDLE mode, Timer1 as clock)",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n25.2\nDC Characteristics:\nPIC18LF2X1X/4X1X\n(Industrial)\nPIC18F2X1X/4X1X",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial\n-40\u00b0C \u2264 TA \u2264 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nModule Differential, Device = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential, Typ = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential, Max = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential, Units = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential,  = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential, Conditions = Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). Module Differential,",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 1.3. D022 ( \u0394 I WDT), Max = 3.8. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 2.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 1.4. D022 ( \u0394 I WDT), Max = 3.8. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 2.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 2.0. D022 ( \u0394 I WDT), Max = 3.8. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = . D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 1.9. D022 ( \u0394 I WDT), Max = 4.6. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 2.0. D022 ( \u0394 I WDT), Max = 4.6. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 2.8. D022 ( \u0394 I WDT), Max = 4.6. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 3.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 4.0. D022 ( \u0394 I WDT), Max = 10. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= -40\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 5.5. D022 ( \u0394 I WDT), Max = 10. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = +25\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 5.6. D022 ( \u0394 I WDT), Max = 10. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),  = +85\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT),  = . D022 ( \u0394 I WDT), Device = Watchdog Timer. D022 ( \u0394 I WDT), Typ = 13. D022 ( \u0394 I WDT), Max = 13. D022 ( \u0394 I WDT), Units = \u03bc A. D022 ( \u0394 I WDT),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +125\u00b0C. D022 ( \u0394 I WDT), Conditions = VDD = 5.0V. D022 ( \u0394 I WDT),  = . D022A ( \u0394 I BOR), Device = Brown-out Reset (5). D022A ( \u0394 I BOR), Typ = 35. D022A ( \u0394 I BOR), Max = 40. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR),  = -40\u00b0C to +85\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 3.0V. D022A ( \u0394 I BOR),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D022A ( \u0394 I BOR), Device = Brown-out Reset (5). D022A ( \u0394 I BOR), Typ = 40. D022A ( \u0394 I BOR), Max = 45. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR),  = -40\u00b0C to +85\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR),  = . D022A ( \u0394 I BOR), Device = Brown-out Reset (5). D022A ( \u0394 I BOR), Typ = 55. D022A ( \u0394 I BOR), Max = 45. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= -40\u00b0C to +125\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR),  = . D022A ( \u0394 I BOR), Device = Brown-out Reset (5). D022A ( \u0394 I BOR), Typ = 0. D022A ( \u0394 I BOR), Max = 5. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR),  = -40\u00b0C to +125\u00b0C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= Sleep mode, BOREN1:BOREN0 = 10. D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (5). D022B ( \u0394 I LVD), Typ = 22. D022B ( \u0394 I LVD), Max = 38. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD),  = -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 2.0V. D022B ( \u0394 I LVD),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (5). D022B ( \u0394 I LVD), Typ = 25. D022B ( \u0394 I LVD), Max = 40. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD),  = -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 3.0V. D022B ( \u0394 I LVD),  = . D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (5). D022B ( \u0394 I LVD), Typ = 29. D022B ( \u0394 I LVD), Max = 45. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= -40\u00b0C to +85\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD),  = . D022B ( \u0394 I LVD), Device = High/Low-Voltage Detect (5). D022B ( \u0394 I LVD), Typ = 30. D022B ( \u0394 I LVD), Max = 45. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD),  = -40\u00b0C to +125\u00b0C. D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.1. D025 ( \u0394 I OSCB), Max = 4.5. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = -40\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB),  = . D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 1.8. D025 ( \u0394 I OSCB), Max = 4.5. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +25\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB),  = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.1. D025 ( \u0394 I OSCB), Max = 4.5. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = +85\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= . D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.2. D025 ( \u0394 I OSCB), Max = 6.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = -40\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025 ( \u0394 I OSCB),  = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.6. D025 ( \u0394 I OSCB), Max = 6.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +25\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025 ( \u0394 I OSCB),  = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.9. D025 ( \u0394 I OSCB), Max = 6.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = +85\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.0. D025 ( \u0394 I OSCB), Max = 8.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = -40\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB),  = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.2. D025 ( \u0394 I OSCB), Max = 8.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= +25\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB),  = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.4. D025 ( \u0394 I OSCB), Max = 8.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB),  = +85\u00b0C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= 32 kHz on Timer1 (4). D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD),  = -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 2.0V. D026 ( \u0394 I AD),  = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 3.0V. D026 ( \u0394 I AD),  = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD),  = -40\u00b0C to +85\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD),",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n= A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 2.0. D026 ( \u0394 I AD), Max = 8.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD),  = -40\u00b0C to +125\u00b0C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD),  = A/D on, not converting\nLegend:\nShading of rows is to assist in readability of the table.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Low-power Timer1 oscillator selected.\n5: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "25.3 DC Characteristics:\nPIC18F2X1X/4X1X (Industrial)\nPIC18LF2X1X/4X1X (Industrial)\nDC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial",
    "25.3 DC Characteristics:\nD030 D030A D031, Symbol = VIL. D030 D030A D031, Characteristic = Input Low Voltage I/O ports:. D030 D030A D031, Min = . D030 D030A D031, Max = . D030 D030A D031, Units = . D030 D030A D031, Conditions = . , Symbol = . , Characteristic = with TTL buffer. , Min = VSS. , Max = 0.15 VDD. , Units = V. , Conditions = VDD < 4.5V. , Symbol = . , Characteristic = with Schmitt Trigger buffer RC3 and RC4. , Min = - VSS. , Max = 0.8 0.2 VDD 0.3 VDD. , Units = V V V. , Conditions = 4.5V \u2264 VDD \u2264 5.5V. D032, Symbol = . D032, Characteristic = MCLR. D032, Min = VSS. D032, Max = 0.2 VDD. D032, Units = V.",
    "25.3 DC Characteristics:\nD032, Conditions = . , Symbol = . , Characteristic = . , Min = VSS. , Max = . , Units = . , Conditions = . D033, Symbol = . D033, Characteristic = OSC1. D033, Min = VSS. D033, Max = 0.3 VDD. D033, Units = V. D033, Conditions = HS, HSPLL modes. D033A D033B, Symbol = . D033A D033B, Characteristic = OSC1. D033A D033B, Min = VSS. D033A D033B, Max = 0.2 VDD. D033A D033B, Units = V. D033A D033B, Conditions = RC, EC modes (1). D034, Symbol = . D034, Characteristic = OSC1 T13CKI. D034, Min = VSS VSS. D034, Max = 0.3 VDD 0.3 VDD. D034, Units = V V. D034, Conditions = XT, LP",
    "25.3 DC Characteristics:\nmodes. , Symbol = VIH. , Characteristic = Input High Voltage. , Min = . , Max = . , Units = . , Conditions = . D040 D040A D041, Symbol = . D040 D040A D041, Characteristic = with TTL buffer. D040 D040A D041, Min = 0.25 VDD + 0.8V 2.0. D040 D040A D041, Max = VDD. D040 D040A D041, Units = V. D040 D040A D041, Conditions = VDD < 4.5V. D042, Symbol = . D042, Characteristic = . D042, Min = 0.8 VDD. D042, Max = VDD. D042, Units = V. D042, Conditions = . , Symbol = . , Characteristic = MCLR. , Min = . , Max = . , Units = . , Conditions = . D043, Symbol = . D043, Characteristic = OSC1. D043, Min = 0.7 VDD.",
    "25.3 DC Characteristics:\nD043, Max = VDD. D043, Units = V. D043, Conditions = HS, HSPLL modes. D043A D043B, Symbol = . D043A D043B, Characteristic = OSC1 OSC1. D043A D043B, Min = 0.8 VDD 0.9 VDD. D043A D043B, Max = VDD. D043A D043B, Units = V. D043A D043B, Conditions = EC mode RC mode (1). D043C D044, Symbol = . D043C D044, Characteristic = OSC1 T13CKI. D043C D044, Min = 1.6. D043C D044, Max = VDD VDD. D043C D044, Units = V V. D043C D044, Conditions = V XT, LP modes. D060, Symbol = I IL. D060, Characteristic = Input Leakage Current (2,3) I/O ports. D060, Min =",
    "25.3 DC Characteristics:\n-. D060, Max = \u00b1 1. D060, Units = \u03bc A. D060, Conditions = VSS \u2264 VPIN \u2264 VDD, Pin at high-impedance. D061, Symbol = . D061, Characteristic = MCLR. D061, Min = -. D061, Max = \u00b1 5. D061, Units = \u03bc A. D061, Conditions = Vss \u2264 VPIN \u2264 VDD. D063, Symbol = . D063, Characteristic = OSC1. D063, Min = -. D063, Max = \u00b1 5. D063, Units = \u03bc A. D063, Conditions = Vss \u2264 VPIN \u2264 VDD. D070, Symbol = I PU I PURB. D070, Characteristic = Weak Pull-up Current PORTB weak pull-up current. D070, Min = 50. D070, Max = 400. D070, Units = \u03bc A. D070, Conditions = VDD = 5V, VPIN = VSS",
    "25.3 DC Characteristics:\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.\n4: Parameter is characterized but not tested.",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nD080, DC CHARACTERISTICS.Symbol = VOL. D080, DC CHARACTERISTICS.Characteristic = Output Low Voltage I/O ports. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 0.6. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D080, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OL = 8.5 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D083, DC CHARACTERISTICS.Symbol = . D083, DC CHARACTERISTICS.Characteristic = OSC2/CLKO (RC, RCIO, EC,",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nECIO modes). D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 0.6. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D083, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OL = 1.6 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D090, DC CHARACTERISTICS.Symbol = VOH. D090, DC CHARACTERISTICS.Characteristic = Output High Voltage (3) I/O ports. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n+85\u00b0C for industrial.Min = VDD - 0.7. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = -. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D090, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OH = -3.0 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D092, DC CHARACTERISTICS.Symbol = . D092, DC CHARACTERISTICS.Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = VDD - 0.7.",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nD092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = -. D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = V. D092, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I OH = -1.3 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D100 (4), DC CHARACTERISTICS.Symbol = COSC2. D100 (4), DC CHARACTERISTICS.Characteristic = on Output Pins OSC2 pin. D100 (4), Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D100 (4), Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n+85\u00b0C for industrial.Max = 15. D100 (4), Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = pF. D100 (4), Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = In XT, HS and LP modes when external clock is used to drive OSC1. D101, DC CHARACTERISTICS.Symbol = CIO. D101, DC CHARACTERISTICS.Characteristic = All I/O pins and OSC2 (in RC mode). D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 50. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\n\u2264 +85\u00b0C for industrial.Units = pF. D101, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = To meet the AC Timing Specifications. D102, DC CHARACTERISTICS.Symbol = CB. D102, DC CHARACTERISTICS.Characteristic = SCL, SDA. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Min = -. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Max = 400. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Units = pF. D102, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial.Conditions = I 2 C\u2122Specification",
    "25.3 DC Characteristics: PIC18F2X1X/4X1X (Industrial) PIC18LF2X1X/4X1X (Industrial) (Continued)\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.\n4: Parameter is characterized but not tested.",
    "TABLE 25-1: MEMORY PROGRAMMING REQUIREMENTS\nDC Characteristics\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial",
    "TABLE 25-1: MEMORY PROGRAMMING REQUIREMENTS\nD110 D113, Sym = VPP. D110 D113, Characteristic = Internal Program Memory Programming Specifications (1) Voltage on MCLR/VPP/RE3 pin Supply Current during. D110 D113, Min = VDD + 4. D110 D113, Typ\u2020 = -. D110 D113, Max = 12.5. D110 D113, Units = V. D110 D113, Conditions = (Note 2). , Sym = I DDP. , Characteristic = Programming. , Min = -. , Typ\u2020 = 10. , Max = -. , Units = mA. , Conditions = . D130, Sym = EP. D130, Characteristic = Program Flash Memory Cell Endurance. D130, Min = 10K. D130, Typ\u2020 = 100K. D130, Max = -. D130, Units = E/W. D130, Conditions = -40 \u00b0 C to +85 \u00b0 C. D131, Sym = VPR. D131, Characteristic = VDD for Read.",
    "TABLE 25-1: MEMORY PROGRAMMING REQUIREMENTS\nD131, Min = VMIN. D131, Typ\u2020 = -. D131, Max = 5.5. D131, Units = V. D131, Conditions = VMIN = Minimum operating voltage. D132, Sym = VIE. D132, Characteristic = VDD for Block Erase. D132, Min = 4.5. D132, Typ\u2020 = -. D132, Max = 5.5. D132, Units = V. D132, Conditions = Using ICSP\u2122 port. D132A, Sym = VIW. D132A, Characteristic = VDD for Externally Timed Erase or Write. D132A, Min = 4.5. D132A, Typ\u2020 = -. D132A, Max = 5.5. D132A, Units = V. D132A, Conditions = Using ICSP port. D133, Sym = TIE. D133, Characteristic = ICSP Block Erase Cycle Time. D133, Min = -. D133, Typ\u2020 = 4. D133, Max =",
    "TABLE 25-1: MEMORY PROGRAMMING REQUIREMENTS\n-. D133, Units = ms. D133, Conditions = VDD > 4.5V. D133A, Sym = TIW. D133A, Characteristic = ICSP Erase or Write Cycle Time (externally timed). D133A, Min = 1. D133A, Typ\u2020 = -. D133A, Max = -. D133A, Units = ms. D133A, Conditions = VDD > 4.5V. D134, Sym = TRETD. D134, Characteristic = Characteristic Retention. D134, Min = 40. D134, Typ\u2020 = 100. D134, Max = -. D134, Units = Year. D134, Conditions = Provided no other specifications are violated\n\u2020 Data in 'Typ' column is at 5.0V, 25\u00b0C unless otherwise stated. These parameters are for design guidance only and are not tested.\nNote 1: These specifications are for programming the on-chip program memory through the use of table write instructions.\n2: Required only if Single-Supply programming is disabled.",
    "TABLE 25-2: COMPARATOR SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 25-2: COMPARATOR SPECIFICATIONS\nD300, Sym = VIOFF. D300, Characteristics = Input Offset Voltage. D300, Min = -. D300, Typ = \u00b1 5.0. D300, Max = \u00b1 10. D300, Units = mV. D300, Comments = . D301, Sym = VICM. D301, Characteristics = Input Common Mode Voltage*. D301, Min = 0. D301, Typ = -. D301, Max = VDD - 1.5. D301, Units = V. D301, Comments = . D302, Sym = CMRR. D302, Characteristics = Common Mode Rejection Ratio*. D302, Min = 55. D302, Typ = -. D302, Max = -. D302, Units = dB. D302, Comments = . 300, Sym = TRESP. 300, Characteristics = Response Time (1)*. 300, Min = -. 300, Typ = 150. 300, Max = 400. 300, Units = ns. 300, Comments = PIC18 F XXXX.",
    "TABLE 25-2: COMPARATOR SPECIFICATIONS\n300A, Sym = . 300A, Characteristics = . 300A, Min = -. 300A, Typ = 150. 300A, Max = 600. 300A, Units = ns. 300A, Comments = PIC18 LF XXXX, VDD = 2.0V. 301, Sym = TMC2OV. 301, Characteristics = Comparator Mode Change to Output Valid*. 301, Min = -. 301, Typ = -. 301, Max = 10. 301, Units = \u03bc s. 301, Comments = \n* These parameters are characterized but not tested.\nNote 1: Response time measured with one comparator input at (VDD - 1.5)/2, while the other input transitions from VSS to VDD.",
    "TABLE 25-3: VOLTAGE REFERENCE SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C (unless otherwise stated).",
    "TABLE 25-3: VOLTAGE REFERENCE SPECIFICATIONS\nD310, Sym = VRES. D310, Characteristics = Resolution. D310, Min = VDD/24. D310, Typ = -. D310, Max = VDD/32. D310, Units = LSb. D310, Comments = . D311, Sym = VRAA. D311, Characteristics = Absolute Accuracy. D311, Min = -. D311, Typ = -. D311, Max = 1/2. D311, Units = LSb. D311, Comments = . D312, Sym = VRUR. D312, Characteristics = Unit Resistor Value (R)*. D312, Min = -. D312, Typ = 2k. D312, Max = -. D312, Units = \u03a9. D312, Comments = . 310, Sym = TSET. 310, Characteristics = Settling Time (1) *. 310, Min = -. 310, Typ = -. 310, Max = 10. 310, Units = \u03bc s. 310, Comments = ",
    "TABLE 25-3: VOLTAGE REFERENCE SPECIFICATIONS\n* These parameters are characterized but not tested.\nNote 1: Settling time measured while CVRR = 1 and CVR3:CVR0 transitions from ' 0000 ' to ' 1111 '.",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nTABLE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \u2264 TA \u2264 +85\u00b0C for industrial",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0000. D420, Min = 2.06. D420, Typ\u2020 = 2.17. D420, Max = 2.28. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0001. D420, Min = 2.12. D420, Typ\u2020 = 2.23. D420, Max = 2.34. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0010. D420, Min = 2.24. D420, Typ\u2020 = 2.36. D420, Max = 2.48. D420,",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nUnits = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0011. D420, Min = 2.32. D420, Typ\u2020 = 2.44. D420, Max = 2.56. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0100. D420, Min = 2.47. D420, Typ\u2020 = 2.60. D420, Max = 2.73. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0101. D420, Min = 2.65. D420, Typ\u2020 = 2.79.",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Max = 2.93. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0110. D420, Min = 2.74. D420, Typ\u2020 = 2.89. D420, Max = 3.04. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 0111. D420, Min = 2.96. D420, Typ\u2020 = 3.12. D420, Max = 3.28. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 1000. D420, Min = 3.22.",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Typ\u2020 = 3.39. D420, Max = 3.56. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 1001. D420, Min = 3.37. D420, Typ\u2020 = 3.55. D420, Max = 3.73. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 1010. D420, Min = 3.52. D420, Typ\u2020 = 3.71. D420, Max = 3.90. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV =",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\n1011. D420, Min = 3.70. D420, Typ\u2020 = 3.90. D420, Max = 4.10. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 1100. D420, Min = 3.90. D420, Typ\u2020 = 4.11. D420, Max = 4.32. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low. D420, Characteristic = LVV = 1101. D420, Min = 4.11. D420, Typ\u2020 = 4.33. D420, Max = 4.55. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVD Voltage on VDD Transition High to Low.",
    "FIGURE 25-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Characteristic = LVV = 1110. D420, Min = 4.36. D420, Typ\u2020 = 4.59. D420, Max = 4.82. D420, Units = V. D420, Conditions = \n- \u2020 Production tested at TAMB = 25\u00b0C. Specifications over temperature limits ensured by characterization.",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\nThe  timing  parameter  symbols  have  been  created using one of the following formats:",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\n2. TppS, 1. TppS2ppS = 2. TppS. 2. TppS, 3. TCC:ST 4. Ts = . 2. TppS, (I 2 C specifications only) (I 2 C specifications only) = . T F, 1. TppS2ppS = Frequency. T F, 3. TCC:ST 4. Ts = T. T F, (I 2 C specifications only) (I 2 C specifications only) = Time. Lowercase letters (pp) and their meanings:, 1. TppS2ppS = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, 3. TCC:ST 4. Ts = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = Lowercase letters (pp) and their meanings:. pp, 1. TppS2ppS = pp. pp, 3. TCC:ST 4. Ts = . pp, (I 2 C specifications only) (I 2 C specifications only) = . cc, 1.",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\nTppS2ppS = CCP1. cc, 3. TCC:ST 4. Ts = osc. cc, (I 2 C specifications only) (I 2 C specifications only) = OSC1. ck, 1. TppS2ppS = CLKO. ck, 3. TCC:ST 4. Ts = rd. ck, (I 2 C specifications only) (I 2 C specifications only) = RD. cs, 1. TppS2ppS = CS. cs, 3. TCC:ST 4. Ts = rw. cs, (I 2 C specifications only) (I 2 C specifications only) = RD or WR. di, 1. TppS2ppS = SDI. di, 3. TCC:ST 4. Ts = sc. di, (I 2 C specifications only) (I 2 C specifications only) = SCK. do, 1. TppS2ppS = SDO. do, 3. TCC:ST 4. Ts = ss. do, (I 2 C specifications only) (I 2 C specifications only) = SS. dt, 1. TppS2ppS = Data in. dt, 3.",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\nTCC:ST 4. Ts = t0. dt, (I 2 C specifications only) (I 2 C specifications only) = T0CKI. io, 1. TppS2ppS = I/O port. io, 3. TCC:ST 4. Ts = t1. io, (I 2 C specifications only) (I 2 C specifications only) = T13CKI. mc, 1. TppS2ppS = MCLR. mc, 3. TCC:ST 4. Ts = wr. mc, (I 2 C specifications only) (I 2 C specifications only) = WR. Uppercase letters and their meanings:, 1. TppS2ppS = Uppercase letters and their meanings:. Uppercase letters and their meanings:, 3. TCC:ST 4. Ts = Uppercase letters and their meanings:. Uppercase letters and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = Uppercase letters and their meanings:. S, 1. TppS2ppS = S. S, 3. TCC:ST 4. Ts = . S, (I 2 C specifications only) (I 2 C specifications only)",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\n= . F, 1. TppS2ppS = Fall. F, 3. TCC:ST 4. Ts = P. F, (I 2 C specifications only) (I 2 C specifications only) = Period. H, 1. TppS2ppS = High. H, 3. TCC:ST 4. Ts = R. H, (I 2 C specifications only) (I 2 C specifications only) = Rise. I, 1. TppS2ppS = Invalid (High-impedance). I, 3. TCC:ST 4. Ts = V. I, (I 2 C specifications only) (I 2 C specifications only) = Valid. L, 1. TppS2ppS = Low. L, 3. TCC:ST 4. Ts = Z. L, (I 2 C specifications only) (I 2 C specifications only) = High-impedance. I 2 C only, 1. TppS2ppS = I 2 C only. I 2 C only, 3. TCC:ST 4. Ts = . I 2 C only, (I 2 C specifications only) (I 2 C specifications only) = . AA, 1.",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\nTppS2ppS = output access. AA, 3. TCC:ST 4. Ts = High. AA, (I 2 C specifications only) (I 2 C specifications only) = High. BUF, 1. TppS2ppS = Bus free. BUF, 3. TCC:ST 4. Ts = Low. BUF, (I 2 C specifications only) (I 2 C specifications only) = Low. TCC:ST (I 2 C specifications only), 1. TppS2ppS = TCC:ST (I 2 C specifications only). TCC:ST (I 2 C specifications only), 3. TCC:ST 4. Ts = . TCC:ST (I 2 C specifications only), (I 2 C specifications only) (I 2 C specifications only) = . CC, 1. TppS2ppS = CC. CC, 3. TCC:ST 4. Ts = . CC, (I 2 C specifications only) (I 2 C specifications only) = . HD, 1. TppS2ppS = Hold. HD, 3. TCC:ST 4. Ts = SU. HD, (I 2 C specifications only)",
    "25.4.1 TIMING PARAMETER SYMBOLOGY\n(I 2 C specifications only) = Setup. ST, 1. TppS2ppS = ST. ST, 3. TCC:ST 4. Ts = . ST, (I 2 C specifications only) (I 2 C specifications only) = . DAT, 1. TppS2ppS = DATA input hold. DAT, 3. TCC:ST 4. Ts = STO. DAT, (I 2 C specifications only) (I 2 C specifications only) = Stop condition. STA, 1. TppS2ppS = Start condition. STA, 3. TCC:ST 4. Ts = . STA, (I 2 C specifications only) (I 2 C specifications only) = ",
    "25.4.2 TIMING CONDITIONS\nThe temperature and voltages specified in Table 25-5 apply  to  all timing  specifications  unless  otherwise noted. Figure 25-5 specifies the load conditions for the timing specifications.\nNote:\nBecause  of  space  limitations,  the  generic terms 'PIC18FXXXX' and 'PIC18LFXXXX' are used throughout this section to refer to the PIC18F2X1X/4X1X and PIC18LF2X1X/ 4X1X  families  of  devices  specifically  and only those devices.",
    "TABLE 25-5: TEMPERATURE AND VOLTAGE SPECIFICATIONS - AC\nAC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \u2264 TA \u2264 +85\u00b0C   for industrial\nOperating voltage VDD range as described in DC spec Section 25.1 and\nSection 25.3\n.\nLF parts operate for industrial temperatures only.",
    "FIGURE 25-5: LOAD CONDITIONS FOR DEVICE TIMING SPECIFICATIONS\nVDD/2 CL RL VSS, Load Condition 2 = Pin VSS CL for all pins except OSC2/CLKO and including D and E outputs as ports",
    "TABLE 25-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n1A, Symbol = FOSC. 1A, Characteristic = External CLKI Frequency (1) Oscillator Frequency (1). 1A, Min = DC DC DC DC 0.1 4 5. 1A, Max = 1 20 31.25 4 4 20 200. 1A, Units = MHz MHz kHz MHz MHz MHz kHz. 1A, Conditions = XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode RC Oscillator mode XT Oscillator mode HS Oscillator mode LP Oscillator mode. 1, Symbol = TOSC. 1, Characteristic = External CLKI Period (1). 1, Min = 1000 50 32 250 250 100 50 5. 1, Max = - - - - 1 250 250. 1, Units = ns ns \u03bc s ns \u03bc s ns ns \u03bc s. 1, Conditions = XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode RC Oscillator mode XT Oscillator mode HS Oscillator mode HS Oscillator mode LP Oscillator mode. 2, Symbol = TCY. 2, Characteristic =",
    "TABLE 25-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nInstruction Cycle Time (1). 2, Min = 100 160. 2, Max = - -. 2, Units = ns ns. 2, Conditions = TCY = 4/FOSC, Industrial TCY = 4/FOSC, Extended. 3, Symbol = TOSL, TOSH. 3, Characteristic = External Clock in (OSC1) High or Low Time. 3, Min = 30 2.5 10. 3, Max = - - -. 3, Units = ns \u03bc s ns. 3, Conditions = XT Oscillator mode LP Oscillator mode HS Oscillator mode. 4, Symbol = TOSR, TOSF. 4, Characteristic = External Clock in (OSC1) Rise or Fall Time. 4, Min = - - -. 4, Max = 20 50. 4, Units = ns ns. 4, Conditions = XT Oscillator mode LP Oscillator mode HS Oscillator mode",
    "TABLE 25-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nNote 1: Instruction cycle period (TCY) equals four times the input oscillator time base period for all configurations except PLL. All specified values are based on characterization data for that particular oscillator type under standard operating conditions with the device executing code. Exceeding these specified limits may result in an unstable oscillator operation and/or higher than expected current consumption. All devices are tested to operate at 'min.' values with an external clock applied to the OSC1/CLKI pin. When an external clock input is used, the 'max.' cycle time limit is 'DC' (no clock) for all devices.",
    "TABLE 25-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF10, Sym = FOSC. F10, Characteristic = Oscillator Frequency Range. F10, Min = 4. F10, Typ\u2020 = -. F10, Max = 10. F10, Units = MHz. F10, Conditions = HS mode only. F11, Sym = FSYS. F11, Characteristic = On-Chip VCO System Frequency. F11, Min = 16. F11, Typ\u2020 = -. F11, Max = 40. F11, Units = MHz. F11, Conditions = HS mode only. F12, Sym = t rc. F12, Characteristic = PLL Start-up Time (Lock Time). F12, Min = -. F12, Typ\u2020 = -. F12, Max = 2. F12, Units = ms. F12, Conditions = . F13, Sym = \u0394 CLK. F13, Characteristic = CLKO Stability (Jitter). F13, Min = -2. F13, Typ\u2020 = -. F13, Max = +2.",
    "TABLE 25-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF13, Units = %. F13, Conditions = \n- \u2020 Data in 'Typ' column is at 5V, 25 C unless otherwise stated. These parameters are for design guidance \u00b0 only and are not tested.",
    "TABLE 25-8: AC CHARACTERISTICS: INTERNAL RC ACCURACY PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\nLegend: Shading of rows is to assist in readability of the table.\nNote\n1: Frequency calibrated at 25\u00b0C. OSCTUNE register can be used to compensate for temperature drift.\n2: INTRC frequency after calibration.\n3: Change of INTRC frequency as VDD changes.",
    "TABLE 25-9: CLKO AND I/O TIMING REQUIREMENTS\n10, Symbol = TosH2ckL. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Min = -. 10, Typ = 75. 10, Max = 200. 10, Units = ns. 10, Conditions = (Note 1). 11, Symbol = TosH2ckH. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Min = -. 11, Typ = 75. 11, Max = 200. 11, Units = ns. 11, Conditions = (Note 1). 12, Symbol = TckR. 12, Characteristic = CLKO Rise Time. 12, Characteristic = CLKO Rise Time. 12, Min = -. 12, Typ = 35. 12, Max = 100. 12, Units = ns. 12, Conditions = (Note 1). 13, Symbol = TckF. 13, Characteristic = CLKO Fall Time. 13, Characteristic = CLKO Fall Time. 13, Min = -. 13, Typ = 35. 13, Max =",
    "TABLE 25-9: CLKO AND I/O TIMING REQUIREMENTS\n100. 13, Units = ns. 13, Conditions = (Note 1). 14, Symbol = TckL2ioV. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Min = -. 14, Typ = -. 14, Max = 0.5 TCY + 20. 14, Units = ns. 14, Conditions = (Note 1). 15, Symbol = TioV2ckH. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Min = 0.25 TCY + 25. 15, Typ = -. 15, Max = -. 15, Units = ns. 15, Conditions = (Note 1). 16, Symbol = TckH2ioI. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Min = 0. 16, Typ = -. 16, Max = -. 16, Units = ns. 16, Conditions = (Note 1). 17, Symbol =",
    "TABLE 25-9: CLKO AND I/O TIMING REQUIREMENTS\nTosH2ioV. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Min = -. 17, Typ = 50. 17, Max = 150. 17, Units = ns. 17, Conditions = . 18, Symbol = TosH2ioI. 18, Characteristic = OSC1 \u2191 (Q2 cycle) to Port Input Invalid. 18, Characteristic = PIC18 F XXXX. 18, Min = 100. 18, Typ = -. 18, Max = -. 18, Units = ns. 18, Conditions = . 18A, Symbol = . 18A, Characteristic = (I/O in hold time). 18A, Characteristic = PIC18 LF XXXX. 18A, Min = 200. 18A, Typ = -. 18A, Max = -. 18A, Units = ns. 18A, Conditions = VDD = 2.0V. 19, Symbol = TioV2osH. 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup",
    "TABLE 25-9: CLKO AND I/O TIMING REQUIREMENTS\ntime). 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup time). 19, Min = 0. 19, Typ = -. 19, Max = -. 19, Units = ns. 19, Conditions = . 20, Symbol = TioR. 20, Characteristic = Port Output Rise Time. 20, Characteristic = PIC18 F XXXX. 20, Min = -. 20, Typ = 10. 20, Max = 25. 20, Units = ns. 20, Conditions = . 20A, Symbol = . 20A, Characteristic = . 20A, Characteristic = PIC18 LF XXXX. 20A, Min = -. 20A, Typ = -. 20A, Max = 60. 20A, Units = ns. 20A, Conditions = VDD = 2.0V. 21, Symbol = TioF. 21, Characteristic = Port Output Fall Time. 21, Characteristic = PIC18 F XXXX. 21, Min = -. 21, Typ = 10. 21, Max = 25. 21, Units = ns. 21, Conditions = . 21A, Symbol = . 21A, Characteristic =",
    "TABLE 25-9: CLKO AND I/O TIMING REQUIREMENTS\n. 21A, Characteristic = PIC18 LF XXXX. 21A, Min = -. 21A, Typ = -. 21A, Max = 60. 21A, Units = ns. 21A, Conditions = VDD = 2.0V. 22\u2020, Symbol = TINP. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Min = TCY. 22\u2020, Typ = -. 22\u2020, Max = -. 22\u2020, Units = ns. 22\u2020, Conditions = . 23\u2020, Symbol = TRBP. 23\u2020, Characteristic = RB7:RB4 Change INTx High or Low Time. 23\u2020, Characteristic = RB7:RB4 Change INTx High or Low Time. 23\u2020, Min = TCY. 23\u2020, Typ = -. 23\u2020, Max = -. 23\u2020, Units = ns. 23\u2020, Conditions = \n\u2020 These parameters are asynchronous events not related to any internal clock edges.\nNote 1: Measurements are taken in RC mode, where CLKO output is 4 x TOSC.",
    "FIGURE 25-9: BROWN-OUT RESET TIMING\nTABLE 25-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS",
    "FIGURE 25-9: BROWN-OUT RESET TIMING\n30, Symbol = TmcL. 30, Characteristic = MCLR Pulse Width (low). 30, Min = 2. 30, Typ = -. 30, Max = -. 30, Units = \u03bc s. 30, Conditions = . 31, Symbol = TWDT. 31, Characteristic = Watchdog Timer Time-out Period (no postscaler). 31, Min = 3.4. 31, Typ = 4.0. 31, Max = 4.6. 31, Units = ms. 31, Conditions = . 32, Symbol = TOST. 32, Characteristic = Oscillation Start-up Timer Period. 32, Min = 1024 TOSC. 32, Typ = -. 32, Max = 1024 TOSC. 32, Units = -. 32, Conditions = TOSC = OSC1 period. 33, Symbol = TPWRT. 33, Characteristic = Power-up Timer Period. 33, Min = 55.6. 33, Typ = 65.5. 33, Max = 75. 33, Units = ms. 33, Conditions = . 34, Symbol = TIOZ. 34, Characteristic = I/O High-Impedance",
    "FIGURE 25-9: BROWN-OUT RESET TIMING\nfrom MCLR Low or Watchdog Timer Reset. 34, Min = -. 34, Typ = 2. 34, Max = -. 34, Units = \u03bc s. 34, Conditions = . 35, Symbol = TBOR. 35, Characteristic = Brown-out Reset Pulse Width. 35, Min = 200. 35, Typ = -. 35, Max = -. 35, Units = \u03bc s. 35, Conditions = VDD \u2264 BVDD (see D005). 36, Symbol = TIVRST. 36, Characteristic = Time for Internal Reference Voltage to become Stable. 36, Min = -. 36, Typ = 20. 36, Max = 50. 36, Units = \u03bc s. 36, Conditions = . 37, Symbol = TLVD. 37, Characteristic = High/Low-Voltage Detect Pulse Width. 37, Min = 200. 37, Typ = -. 37, Max = -. 37, Units = \u03bc s. 37, Conditions = VDD \u2264 VLVD. 38, Symbol = TCSD. 38, Characteristic = CPU Start-up Time. 38, Min = -. 38, Typ = 10. 38, Max =",
    "FIGURE 25-9: BROWN-OUT RESET TIMING\n-. 38, Units = \u03bc s. 38, Conditions = . 39, Symbol = TIOBST. 39, Characteristic = Time for INTOSC to Stabilize. 39, Min = -. 39, Typ = 1. 39, Max = -. 39, Units = \u03bc s. 39, Conditions = ",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n40, Symbol = Tt0H. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = No prescaler. 40, Min = 0.5 TCY + 20. 40, Max = -. 40, Units = ns. 40, Conditions = . 40, Symbol = Tt0H. 40, Characteristic = . 40, Characteristic = . 40, Characteristic = With prescaler. 40, Min = 10. 40, Max = -. 40, Units = ns. 40, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = No prescaler. 41, Min = 0.5 TCY + 20. 41, Max = -. 41, Units = ns. 41, Conditions = . 41, Symbol = Tt0L. 41, Characteristic = . 41, Characteristic = . 41, Characteristic = With prescaler. 41, Min = 10. 41, Max = -. 41, Units = ns. 41, Conditions = . 42, Symbol =",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nTt0P. 42, Characteristic = T0CKI Period. 42, Characteristic = T0CKI Period. 42, Characteristic = No prescaler. 42, Min = TCY + 10. 42, Max = -. 42, Units = ns. 42, Conditions = . 42, Symbol = Tt0P. 42, Characteristic = . 42, Characteristic = . 42, Characteristic = With prescaler. 42, Min = Greater of: 20 ns or (T CY + 40)/N. 42, Max = -. 42, Units = ns. 42, Conditions = N = prescale value (1, 2, 4,..., 256). 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, no prescaler. 45, Characteristic = Synchronous, no prescaler. 45, Min = 0.5 TCY + 20. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic =",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nSynchronous, with prescaler. 45, Characteristic = PIC18 F XXXX. 45, Min = 10. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 LF XXXX. 45, Min = 25. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 F XXXX. 45, Min = 30. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = Tt1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 LF XXXX. 45, Min = 50. 45, Max = -. 45, Units = ns. 45, Conditions = VDD =",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, no prescaler. 46, Characteristic = Synchronous, no prescaler. 46, Min = 0.5 TCY + 5. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 F XXXX. 46, Min = 10. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 LF XXXX. 46, Min = 25. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic =",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nAsynchronous. 46, Characteristic = PIC18 F XXXX. 46, Min = 30. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = Tt1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 LF XXXX. 46, Min = 50. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Synchronous. 47, Characteristic = Synchronous. 47, Min = Greater of: 20 ns or (T CY + 40)/N. 47, Max = -. 47, Units = ns. 47, Conditions = N = prescale value (1, 2, 4, 8). 47, Symbol = Tt1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Asynchronous. 47, Characteristic = Asynchronous. 47, Min = 60. 47, Max =",
    "TABLE 25-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n-. 47, Units = ns. 47, Conditions = . , Symbol = Ft1. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Min = DC. , Max = 50. , Units = kHz. , Conditions = . 48, Symbol = Tcke2tmrI. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Min = 2 TOSC. 48, Max = 7 TOSC. 48, Units = -. 48, Conditions = ",
    "TABLE 25-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = No prescaler. 50, Characteristic = No prescaler. 50, Min = 0.5 TCY + 20. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 F XXXX. 50, Min = 10. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = TccL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 LF XXXX. 50, Min = 20. 50, Max = -. 50, Units = ns. 50, Conditions = VDD = 2.0V. 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = No prescaler. 51, Characteristic = No prescaler. 51, Min = 0.5",
    "TABLE 25-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nTCY + 20. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 F XXXX. 51, Min = 10. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = TccH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 LF XXXX. 51, Min = 20. 51, Max = -. 51, Units = ns. 51, Conditions = VDD = 2.0V. 52, Symbol = TccP. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Min = 3 TCY + 40 N. 52, Max = -. 52, Units = ns. 52, Conditions = N = prescale value (1, 4 or 16). 53, Symbol = TccR. 53,",
    "TABLE 25-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nCharacteristic = CCPx Output Fall Time. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = PIC18 F XXXX. 53, Min = -. 53, Max = 25. 53, Units = ns. 53, Conditions = . 53, Symbol = TccR. 53, Characteristic = . 53, Characteristic = . 53, Characteristic = PIC18 LF XXXX. 53, Min = -. 53, Max = 45. 53, Units = ns. 53, Conditions = VDD = 2.0V. 54, Symbol = TccF. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = PIC18 F XXXX. 54, Min = -. 54, Max = 25. 54, Units = ns. 54, Conditions = . 54, Symbol = TccF. 54, Characteristic = . 54, Characteristic = . 54, Characteristic = PIC18 LF XXXX. 54, Min = -. 54, Max = 45. 54, Units = ns. 54, Conditions = VDD = 2.0V",
    "TABLE 25-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4410/4415/4510/4515/4610)\n62, Symbol = TdtV2wrH. 62, Characteristic = Data In Valid before WR \u2191 or CS \u2191 (setup time). 62, Characteristic = Data In Valid before WR \u2191 or CS \u2191 (setup time). 62, Min = 20. 62, Max = -. 62, Units = ns. 62, Conditions = . 63, Symbol = TwrH2dtI. 63, Characteristic = WR \u2191 or CS \u2191 to Data-In Invalid (hold time). 63, Characteristic = PIC18 F XXXX. 63, Min = 20. 63, Max = -. 63, Units = ns. 63, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = 35. , Max = -. , Units = ns. , Conditions = VDD = 2.0V. 64, Symbol = TrdL2dtV. 64, Characteristic = RD \u2193 and CS \u2193 to Data-Out Valid. 64, Characteristic = RD \u2193 and CS \u2193 to Data-Out Valid. 64, Min = -. 64, Max = 80.",
    "TABLE 25-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4410/4415/4510/4515/4610)\n64, Units = ns. 64, Conditions = . 65, Symbol = TrdH2dtI. 65, Characteristic = RD \u2191 or CS \u2193 to Data-Out Invalid. 65, Characteristic = RD \u2191 or CS \u2193 to Data-Out Invalid. 65, Min = 10. 65, Max = 30. 65, Units = ns. 65, Conditions = . 66, Symbol = TibfINH. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Min = -. 66, Max = 3 TCY. 66, Units = . 66, Conditions = ",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n)\nTABLE 25-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71, Symbol = TscH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = -. 71, Units = ns. 71, Conditions = . 71A, Symbol = TscH. 71A, Characteristic = SCK Input High Time (Slave mode). 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = -. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TscL. 72, Characteristic = SCK Input Low Time (Slave mode). 72, Characteristic = Continuous. 72, Min = 1.25 TCY + 30. 72, Max = -. 72, Units = ns.",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n72, Conditions = . 72A, Symbol = TscL. 72A, Characteristic = SCK Input Low Time (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL.",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78,",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\nCharacteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid",
    "FIGURE 25-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\nafter SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V\nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 25-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n)\nTABLE 25-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1\n)",
    "FIGURE 25-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n71, Symbol = TscH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = -. 71, Units = ns. 71, Conditions = . 71A, Symbol = . 71A, Characteristic = . 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = -. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TscL. 72, Characteristic = SCK Input Low Time. 72, Characteristic = Continuous. 72, Min = 1.25 TCY + 30. 72, Max = -. 72, Units = ns. 72, Conditions = . 72A, Symbol = . 72A, Characteristic = (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input",
    "FIGURE 25-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\nto SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max =",
    "FIGURE 25-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n25. 75, Units = ns. 75, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = . , Max = 45. , Units = ns. , Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XXXX. , Min = . , Max = 45. , Units = ns. , Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master",
    "FIGURE 25-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\nmode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV,. 80, Characteristic = SDO Data Output Valid after. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . , Symbol = TscL2doV. , Characteristic = SCK Edge. , Characteristic = PIC18 LF XXXX. , Min = . , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 81, Symbol = TdoV2scH, TdoV2scL. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Min = TCY. 81, Max = -. 81, Units = ns. 81, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 25-15: EXAMPLE SPI SLAVE MODE TIMING (CKE = 0\n)",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\n72A, Characteristic = Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73, Symbol = TdiV2scH, TdiV2scL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\n= 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = . 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic =",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\nSDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = . 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\nOutput Fall Time (Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = . 80, Characteristic = PIC18 LF XXXX. 80, Min = . 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK edge. 83, Characteristic = SS \u2191 after SCK edge. 83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = ",
    "TABLE 25-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0 )\nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 25-16: EXAMPLE SPI SLAVE MODE TIMING (CKE = 1\n)",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n)",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n70, Symbol = TssL2scH, TssL2scL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TscH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n= Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TscL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = -. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73A, Symbol = Tb2b. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TscH2diL, TscL2diL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nSCK Edge. 74, Min = 100. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TdoR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = . 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TdoF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TssH2doZ. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50.",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n77, Units = ns. 77, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TscR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = TscF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80,",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nUnits = ns. 80, Conditions = . 80, Symbol = TscH2doV, TscL2doV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 F XXXX. 82, Min = -. 82, Max = 50. 82, Units = ns. 82, Conditions = . 82, Symbol = TssL2doV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 LF XXXX. 82, Min = -. 82, Max = 100. 82, Units = ns. 82, Conditions = VDD = 2.0V. 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK Edge. 83, Characteristic = SS \u2191 after SCK Edge.",
    "TABLE 25-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n83, Min = 1.5 TCY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "TABLE 25-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\n90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4700. 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. , Symbol = . , Characteristic = . , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 91, Symbol = THD:STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 4000. 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first. , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 4700. 92, Max = -. 92, Units = ns. 92, Conditions = . , Symbol = . ,",
    "TABLE 25-18: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\nCharacteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 4000. 93, Max = -. 93, Units = ns. 93, Conditions = . , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = ",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 4.0. 100, Max = -. 100, Units = \u03bc s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 0.6. 100, Max = -. 100, Units = \u03bc s. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = SSP module. 100, Min = 1.5 TCY. 100, Max = -. 100, Units = . 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 4.7. 101, Max = -. 101, Units = \u03bc s. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 1.3. 101, Max = -. 101, Units = \u03bc s. 101, Conditions",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n= . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = SSP module. 101, Min = 1.5 TCY. 101, Max = -. 101, Units = . 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = . 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nmode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4.7. 90, Max = -. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 0.6. 90, Max = -. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 4.0. 91, Max = -. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nTime. 91, Characteristic = 400 kHz mode. 91, Min = 0.6. 91, Max = -. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = \u03bc s. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107,",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nUnits = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 4.7. 92, Max = -. 92, Units = \u03bc s. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 0.6. 92, Max = -. 92, Units = \u03bc s. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = (Note 1). 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = (Note 1). 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n= 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 25-19: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nNote 1: As a transmitter, the device must provide this internal minimum delay time to bridge the undefined region (min. 300 ns) of the falling edge of SCL to avoid unintended generation of Start or Stop conditions.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but the requirement TSU:DAT \u2265 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, TR max. + TSU:DAT = 1000 + 250 = 1250 ns (according to the Standard mode I 2 C bus specification), before the SCL line is released.",
    "TABLE 25-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.",
    "TABLE 25-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = . 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = . 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 2(T OSC)(BRG + 1).",
    "TABLE 25-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = . 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU:STO. 92, Characteristic",
    "TABLE 25-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n= Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = TSU:STO. 92, Characteristic = . 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 93, Symbol = THD:STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Hold Time. 93, Characteristic = 400 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD:STO. 93, Characteristic =",
    "TABLE 25-20: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n. 93, Characteristic = 1 MHz mode (1). 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = ",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 1 MHz mode (1). 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nTime. 101, Characteristic = 400 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 1 MHz mode (1). 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nand SCL Rise Time. 102, Characteristic = 1 MHz mode (1). 102, Min = -. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 1 MHz mode (1). 103, Min = -. 103, Max = 100. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\npF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 2(T",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nOSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT.",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = ms. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min =",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = 1000. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 1 MHz mode (1). 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = . 110,",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nSymbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 25-21: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but parameter 107 \u2265 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, parameter 102 + parameter 107 = 1000 + 250 = 1250 ns (for 100 kHz mode), before the SCL line is released.",
    "TABLE 25-22: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n120, Symbol = TckH2dtV. 120, Characteristic = SYNC XMIT (MASTER & SLAVE) Clock High to Data Out Valid. 120, Characteristic = PIC18 F XXXX. 120, Min = -. 120, Max = 40. 120, Units = ns. 120, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 121, Symbol = Tckrf. 121, Characteristic = Clock Out Rise Time and Fall Time. 121, Characteristic = PIC18 F XXXX. 121, Min = -. 121, Max = 20. 121, Units = ns. 121, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V. 122, Symbol = Tdtrf. 122, Characteristic = Data Out Rise Time and Fall Time. 122, Characteristic = PIC18 F XXXX. 122, Min = -.",
    "TABLE 25-22: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n122, Max = 20. 122, Units = ns. 122, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V",
    "TABLE 25-23: USART SYNCHRONOUS RECEIVE REQUIREMENTS\n125, Symbol = TdtV2ckl. 125, Characteristic = SYNC RCV (MASTER & SLAVE) Data Hold before CK \u2193 (DT hold time). 125, Min = 10. 125, Max = -. 125, Units = ns. 125, Conditions = . 126, Symbol = TckL2dtl. 126, Characteristic = Data Hold after CK \u2193 (DT hold time). 126, Min = 15. 126, Max = -. 126, Units = ns. 126, Conditions = ",
    "TABLE 25-24: A/D CONVERTER CHARACTERISTICS: PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\nA01, Symbol = NR. A01, Characteristic = Resolution. A01, Min = -. A01, Typ = -. A01, Max = 10. A01, Units = bit. A01, Conditions = \u0394 VREF \u2265 3.0V. A03, Symbol = EIL. A03, Characteristic = Integral Linearity Error. A03, Min = -. A03, Typ = -. A03, Max = <\u00b11. A03, Units = LSb. A03, Conditions = \u0394 VREF \u2265 3.0V. A04, Symbol = EDL. A04, Characteristic = Differential Linearity Error. A04, Min = -. A04, Typ = -. A04, Max = <\u00b11. A04, Units = LSb. A04, Conditions = \u0394 VREF \u2265 3.0V. A06, Symbol = EOFF. A06, Characteristic =",
    "TABLE 25-24: A/D CONVERTER CHARACTERISTICS: PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\nOffset Error. A06, Min = -. A06, Typ = -. A06, Max = <\u00b11. A06, Units = LSb. A06, Conditions = \u0394 VREF \u2265 3.0V. A07, Symbol = EGN. A07, Characteristic = Gain Error. A07, Min = -. A07, Typ = -. A07, Max = <\u00b11. A07, Units = LSb. A07, Conditions = \u0394 VREF \u2265 3.0V. A10, Symbol = -. A10, Characteristic = Monotonicity. A10, Min = Guaranteed (1). A10, Typ = Guaranteed (1). A10, Max = Guaranteed (1). A10, Units = -. A10, Conditions = VSS \u2264 VAIN \u2264 VREF. A20, Symbol = \u0394 VREF. A20, Characteristic = Reference Voltage Range (VREFH -",
    "TABLE 25-24: A/D CONVERTER CHARACTERISTICS: PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\nVREFL). A20, Min = 1.8 3. A20, Typ = - -. A20, Max = - -. A20, Units = V V. A20, Conditions = VDD < 3.0V VDD \u2265 3.0V. A21, Symbol = VREFH. A21, Characteristic = Reference Voltage High. A21, Min = VSS. A21, Typ = -. A21, Max = VREFH. A21, Units = V. A21, Conditions = . A22, Symbol = VREFL. A22, Characteristic = Reference Voltage Low. A22, Min = VSS - 0.3V. A22, Typ = -. A22, Max = VDD - 3.0V. A22, Units = V. A22, Conditions = . A25, Symbol = VAIN. A25, Characteristic = Analog Input Voltage. A25, Min = VREFL. A25, Typ = -.",
    "TABLE 25-24: A/D CONVERTER CHARACTERISTICS: PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\nA25, Max = VREFH. A25, Units = V. A25, Conditions = . A30, Symbol = ZAIN. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Min = -. A30, Typ = -. A30, Max = 2.5. A30, Units = k. A30, Conditions = \u03a9. A50, Symbol = I REF. A50, Characteristic = VREF Input Current (2). A50, Min = - -. A50, Typ = - -. A50, Max = 5 150. A50, Units = \u03bc A \u03bc A. A50, Conditions = During VAIN acquisition. During A/D conversion cycle.\nNote",
    "TABLE 25-24: A/D CONVERTER CHARACTERISTICS: PIC18F2X1X/4X1X (INDUSTRIAL) PIC18LF2X1X/4X1X (INDUSTRIAL)\n1: The A/D conversion result never decreases with an increase in the input voltage and has no missing codes.\n2: VREFH current is from RA3/AN3/VREF+ pin or VDD, whichever is selected as the VREFH source.\nVREFL current is from RA2/AN2/VREF-/CVREF pin or VSS, whichever is selected as the VREFL source.",
    "FIGURE 25-23: A/D CONVERSION TIMING\nIf the A/D clock source is selected as RC, a time of TCY is added before the A/D clock starts.\nNote 1: This allows the SLEEP instruction to be executed.\n2: This is a minimal RC delay (typically 100 ns), which also disconnects the holding capacitor from the analog input.",
    "TABLE 25-25: A/D CONVERSION REQUIREMENTS\n130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = 0.7. 130, Max = 25.0 (1). 130, Units = \u03bc s. 130, Conditions = TOSC based, VREF \u2265 3.0V. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = 1.4. 130, Max = 25.0 (1). 130, Units = \u03bc s. 130, Conditions = VDD = 2.0V; TOSC based, VREF full range. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = TBD. 130, Max = 1. 130, Units = \u03bc s. 130, Conditions = A/D RC mode. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = TBD. 130, Max = 3. 130, Units = \u03bc s.",
    "TABLE 25-25: A/D CONVERSION REQUIREMENTS\n130, Conditions = VDD = 2.0V; A/D RC mode. 131, Symbol = TCNV. 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Min = 11. 131, Max = 12. 131, Units = TAD. 131, Conditions = . 132, Symbol = TACQ. 132, Characteristic = Acquisition Time (Note 3). 132, Characteristic = Acquisition Time (Note 3). 132, Min = 1.4 TBD. 132, Max = - -. 132, Units = \u03bc s \u03bc s. 132, Conditions = -40 \u00b0 C to +85 \u00b0 C 0 \u00b0 C \u2264 to \u2264 +85 \u00b0 C. 135, Symbol = TSWC. 135, Characteristic = Switching Time from Convert \u2192 Sample. 135, Characteristic = Switching Time from Convert \u2192 Sample. 135, Min = -. 135, Max = (Note 4). 135, Units = . 135, Conditions = . TBD, Symbol = TDIS. TBD, Characteristic = Discharge Time. TBD, Characteristic = Discharge Time. TBD, Min =",
    "TABLE 25-25: A/D CONVERSION REQUIREMENTS\n0.2. TBD, Max = -. TBD, Units = \u03bc s. TBD, Conditions = \nLegend: TBD = To Be Determined\nNote 1: The time of the A/D clock period is dependent on the device frequency and the TAD clock divider.\n2: ADRES register may be read on the following TCY cycle.\n3: The time for the holding capacitor to acquire the 'New' input voltage when the voltage changes full scale after the conversion (VDD to VSS or VSS to VDD). The source impedance ( RS ) on the input channels is 50 \u03a9 .\n4: On the following cycle of the device clock.",
    "26.0 DC AND AC CHARACTERISTICS GRAPHS AND TABLES\nGraphs and tables are not available at this time.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "Legend:\nXX...X\nCustomer-specific information\nY\nYear code (last digit of calendar year)\nYY\nYear code (last 2 digits of calendar year)\nWW\nWeek code (week of January 1 is week '01')\nNNN\nAlphanumeric traceability code\nPb-free JEDEC designator for Matte Tin (Sn)\n*\nThis package is Pb-free. The Pb-free JEDEC designator (     ) 3 e\ncan be found on the outer packaging for this package.\nNote :\nIn the event the full Microchip part number cannot be marked on one line, it will be  carried  over  to  the  next  line,  thus  limiting  the  number  of  available characters for customer-specific information.\n3\ne",
    "27.2 Package Details\nThe following sections give the technical details of the packages.",
    "28-Lead Skinny Plastic Dual In-Line (SP) - 300 mil Body [SPDIP]\nNote:, 1 = For the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging",
    "28-Lead Skinny Plastic Dual In-Line (SP) - 300 mil Body [SPDIP]\nNumber of Pins, Units.Limits = N. Number of Pins, INCHES.MIN = 28. Number of Pins, INCHES.NOM = 28. Number of Pins, INCHES.MAX = 28. Pitch, Units.Limits = e. Pitch, INCHES.MIN = .100 BSC. Pitch, INCHES.NOM = .100 BSC. Pitch, INCHES.MAX = .100 BSC. Top to Seating Plane, Units.Limits = A. Top to Seating Plane, INCHES.MIN = -. Top to Seating Plane, INCHES.NOM = -. Top to Seating Plane, INCHES.MAX = .200. Molded Package Thickness, Units.Limits = A2. Molded Package Thickness, INCHES.MIN = .120. Molded Package Thickness, INCHES.NOM = .135. Molded Package Thickness, INCHES.MAX = .150. Base to Seating Plane, Units.Limits = A1. Base to Seating Plane, INCHES.MIN = .015. Base to Seating Plane, INCHES.NOM = -. Base to Seating Plane, INCHES.MAX = -. Shoulder to Shoulder Width, Units.Limits = E. Shoulder to Shoulder Width, INCHES.MIN",
    "28-Lead Skinny Plastic Dual In-Line (SP) - 300 mil Body [SPDIP]\n= .290. Shoulder to Shoulder Width, INCHES.NOM = .310. Shoulder to Shoulder Width, INCHES.MAX = .335. Molded Package Width, Units.Limits = E1. Molded Package Width, INCHES.MIN = .240. Molded Package Width, INCHES.NOM = .285. Molded Package Width, INCHES.MAX = .295. Overall Length, Units.Limits = D. Overall Length, INCHES.MIN = 1.345. Overall Length, INCHES.NOM = 1.365. Overall Length, INCHES.MAX = 1.400. Tip to Seating Plane, Units.Limits = L. Tip to Seating Plane, INCHES.MIN = .110. Tip to Seating Plane, INCHES.NOM = .130. Tip to Seating Plane, INCHES.MAX = .150. Lead Thickness, Units.Limits = c. Lead Thickness, INCHES.MIN = .008. Lead Thickness, INCHES.NOM = .010. Lead Thickness, INCHES.MAX = .015. Upper Lead Width, Units.Limits = b1. Upper Lead Width, INCHES.MIN = .040. Upper Lead Width,",
    "28-Lead Skinny Plastic Dual In-Line (SP) - 300 mil Body [SPDIP]\nINCHES.NOM = .050. Upper Lead Width, INCHES.MAX = .070. Lower Lead Width, Units.Limits = b. Lower Lead Width, INCHES.MIN = .014. Lower Lead Width, INCHES.NOM = .018. Lower Lead Width, INCHES.MAX = .022. Overall Row Spacing, Units.Limits = eB. Overall Row Spacing, INCHES.MIN = -. Overall Row Spacing, INCHES.NOM = -. Overall Row Spacing, INCHES.MAX = .430",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. \u00a7 Significant Characteristic.\n3. Dimensions D and E1 do not include mold flash or protrusions. Mold flash or protrusions shall not exceed .010\" per side.\n4.\nDimensioning and tolerancing per ASME Y14.5M. BSC: Basic Dimension. Theoretically exact value shown without tolerances.\nMicrochip Technology Drawing C04-070B",
    "28-Lead Plastic Small Outline (SO) - Wide, 7.50 mm Body [SOIC]\nNote: For the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging",
    "28-Lead Plastic Small Outline (SO) - Wide, 7.50 mm Body [SOIC]\nNumber of Pins, Units.Dimension Limits = N. Number of Pins, MILLMETERS.MIN = 28. Number of Pins, MILLMETERS.NOM = 28. Number of Pins, MILLMETERS.MAX = 28. Pitch, Units.Dimension Limits = e. Pitch, MILLMETERS.MIN = 1.27 BSC. Pitch, MILLMETERS.NOM = 1.27 BSC. Pitch, MILLMETERS.MAX = 1.27 BSC. Overall Height, Units.Dimension Limits = A. Overall Height, MILLMETERS.MIN = -. Overall Height, MILLMETERS.NOM = -. Overall Height, MILLMETERS.MAX = 2.65. Molded Package Thickness, Units.Dimension Limits = A2. Molded Package Thickness, MILLMETERS.MIN = 2.05. Molded Package Thickness, MILLMETERS.NOM = -. Molded Package Thickness, MILLMETERS.MAX = -. Standoff \u00a7, Units.Dimension Limits = A1. Standoff \u00a7, MILLMETERS.MIN = 0.10. Standoff \u00a7, MILLMETERS.NOM = -. Standoff \u00a7,",
    "28-Lead Plastic Small Outline (SO) - Wide, 7.50 mm Body [SOIC]\nMILLMETERS.MAX = 0.30. Overall Width, Units.Dimension Limits = E. Overall Width, MILLMETERS.MIN = 10.30 BSC. Overall Width, MILLMETERS.NOM = 10.30 BSC. Overall Width, MILLMETERS.MAX = 10.30 BSC. Molded Package Width, Units.Dimension Limits = E1. Molded Package Width, MILLMETERS.MIN = 7.50 BSC. Molded Package Width, MILLMETERS.NOM = 7.50 BSC. Molded Package Width, MILLMETERS.MAX = 7.50 BSC. Overall Length, Units.Dimension Limits = D. Overall Length, MILLMETERS.MIN = 17.90 BSC. Overall Length, MILLMETERS.NOM = 17.90 BSC. Overall Length, MILLMETERS.MAX = 17.90 BSC. Chamfer (optional), Units.Dimension Limits = h. Chamfer (optional), MILLMETERS.MIN = 0.25. Chamfer (optional), MILLMETERS.NOM = -. Chamfer (optional), MILLMETERS.MAX =",
    "28-Lead Plastic Small Outline (SO) - Wide, 7.50 mm Body [SOIC]\n0.75. Foot Length, Units.Dimension Limits = L. Foot Length, MILLMETERS.MIN = 0.40. Foot Length, MILLMETERS.NOM = -. Foot Length, MILLMETERS.MAX = 1.27. Footprint, Units.Dimension Limits = L1. Footprint, MILLMETERS.MIN = 1.40 REF. Footprint, MILLMETERS.NOM = 1.40 REF. Footprint, MILLMETERS.MAX = 1.40 REF. Foot Angle Top, Units.Dimension Limits = \u03c6. Foot Angle Top, MILLMETERS.MIN = 0\u00b0. Foot Angle Top, MILLMETERS.NOM = -. Foot Angle Top, MILLMETERS.MAX = 8\u00b0. Lead Thickness, Units.Dimension Limits = c. Lead Thickness, MILLMETERS.MIN = 0.18. Lead Thickness, MILLMETERS.NOM = -. Lead Thickness, MILLMETERS.MAX = 0.33. Lead Width, Units.Dimension Limits = b. Lead Width, MILLMETERS.MIN = 0.31. Lead Width, MILLMETERS.NOM = -.",
    "28-Lead Plastic Small Outline (SO) - Wide, 7.50 mm Body [SOIC]\nLead Width, MILLMETERS.MAX = 0.51. Mold Draft Angle Top, Units.Dimension Limits = \u03b1. Mold Draft Angle Top, MILLMETERS.MIN = 5\u00b0. Mold Draft Angle Top, MILLMETERS.NOM = -. Mold Draft Angle Top, MILLMETERS.MAX = 15\u00b0. Mold Draft Angle Bottom, Units.Dimension Limits = \u03b2. Mold Draft Angle Bottom, MILLMETERS.MIN = 5\u00b0. Mold Draft Angle Bottom, MILLMETERS.NOM = -. Mold Draft Angle Bottom, MILLMETERS.MAX = 15\u00b0",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. \u00a7 Significant Characteristic.\n3. Dimensions D and E1 do not include mold flash or protrusions. Mold flash or protrusions shall not exceed 0.15 mm per side.\n4. Dimensioning and tolerancing per ASME Y14.5M.\nBSC: Basic Dimension. Theoretically exact value shown without tolerances.\nREF: Reference Dimension, usually without tolerance, for information purposes only.\nMicrochip Technology Drawing C04-052B",
    "28-Lead Plastic Quad Flat, No Lead Package (ML) - 6x6 mm Body [QFN] with 0.55 mm Contact Length\nNote: For the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging\nA3",
    "28-Lead Plastic Quad Flat, No Lead Package (ML) - 6x6 mm Body [QFN] with 0.55 mm Contact Length\nNumber of Pins, Units.Dimension Limits = N. Number of Pins, MILLIMETERS.MIN = 28. Number of Pins, MILLIMETERS.NOM = 28. Number of Pins, MILLIMETERS.MAX = 28. Pitch, Units.Dimension Limits = e. Pitch, MILLIMETERS.MIN = 0.65 BSC. Pitch, MILLIMETERS.NOM = 0.65 BSC. Pitch, MILLIMETERS.MAX = 0.65 BSC. Overall Height, Units.Dimension Limits = A. Overall Height, MILLIMETERS.MIN = 0.80. Overall Height, MILLIMETERS.NOM = 0.90. Overall Height, MILLIMETERS.MAX = 1.00. Standoff, Units.Dimension Limits = A1. Standoff, MILLIMETERS.MIN = 0.00. Standoff, MILLIMETERS.NOM = 0.02. Standoff, MILLIMETERS.MAX = 0.05. Contact Thickness, Units.Dimension Limits = A3. Contact Thickness, MILLIMETERS.MIN = 0.20 REF. Contact Thickness, MILLIMETERS.NOM = 0.20 REF. Contact",
    "28-Lead Plastic Quad Flat, No Lead Package (ML) - 6x6 mm Body [QFN] with 0.55 mm Contact Length\nThickness, MILLIMETERS.MAX = 0.20 REF. Overall Width, Units.Dimension Limits = E. Overall Width, MILLIMETERS.MIN = 6.00 BSC. Overall Width, MILLIMETERS.NOM = 6.00 BSC. Overall Width, MILLIMETERS.MAX = 6.00 BSC. Exposed Pad Width, Units.Dimension Limits = E2. Exposed Pad Width, MILLIMETERS.MIN = 3.65. Exposed Pad Width, MILLIMETERS.NOM = 3.70. Exposed Pad Width, MILLIMETERS.MAX = 4.20. Overall Length, Units.Dimension Limits = D. Overall Length, MILLIMETERS.MIN = 6.00 BSC. Overall Length, MILLIMETERS.NOM = 6.00 BSC. Overall Length, MILLIMETERS.MAX = 6.00 BSC. Exposed Pad Length, Units.Dimension Limits = D2. Exposed Pad Length, MILLIMETERS.MIN = 3.65. Exposed Pad Length, MILLIMETERS.NOM = 3.70. Exposed Pad Length, MILLIMETERS.MAX = 4.20. Contact Width, Units.Dimension Limits =",
    "28-Lead Plastic Quad Flat, No Lead Package (ML) - 6x6 mm Body [QFN] with 0.55 mm Contact Length\nb. Contact Width, MILLIMETERS.MIN = 0.23. Contact Width, MILLIMETERS.NOM = 0.30. Contact Width, MILLIMETERS.MAX = 0.35. Contact Length, Units.Dimension Limits = L. Contact Length, MILLIMETERS.MIN = 0.50. Contact Length, MILLIMETERS.NOM = 0.55. Contact Length, MILLIMETERS.MAX = 0.70. Contact-to-Exposed Pad, Units.Dimension Limits = K. Contact-to-Exposed Pad, MILLIMETERS.MIN = 0.20. Contact-to-Exposed Pad, MILLIMETERS.NOM = -. Contact-to-Exposed Pad, MILLIMETERS.MAX = -",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. Package is saw singulated.\n3. Dimensioning and tolerancing per ASME Y14.5M.\nBSC: Basic Dimension. Theoretically exact value shown without tolerances.\nREF: Reference Dimension, usually without tolerance, for information purposes only.\nMicrochip Technology Drawing C04-105B",
    "40-Lead Plastic Dual In-Line (P) - 600 mil Body [PDIP]\nNote: For the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging",
    "40-Lead Plastic Dual In-Line (P) - 600 mil Body [PDIP]\nNumber of Pins, Units.Dimension Limits = N. Number of Pins, INCHES.MIN = 40. Number of Pins, INCHES.NOM = 40. Number of Pins, INCHES.MAX = 40. Pitch, Units.Dimension Limits = e. Pitch, INCHES.MIN = .100 BSC. Pitch, INCHES.NOM = .100 BSC. Pitch, INCHES.MAX = .100 BSC. Top to Seating Plane, Units.Dimension Limits = A. Top to Seating Plane, INCHES.MIN = -. Top to Seating Plane, INCHES.NOM = -. Top to Seating Plane, INCHES.MAX = .250. Molded Package Thickness, Units.Dimension Limits = A2. Molded Package Thickness, INCHES.MIN = .125. Molded Package Thickness, INCHES.NOM = -. Molded Package Thickness, INCHES.MAX = .195. Base to Seating Plane, Units.Dimension Limits = A1. Base to Seating Plane, INCHES.MIN = .015. Base to Seating Plane, INCHES.NOM = -. Base to Seating Plane, INCHES.MAX = -. Shoulder to Shoulder Width, Units.Dimension Limits = E. Shoulder to Shoulder",
    "40-Lead Plastic Dual In-Line (P) - 600 mil Body [PDIP]\nWidth, INCHES.MIN = .590. Shoulder to Shoulder Width, INCHES.NOM = -. Shoulder to Shoulder Width, INCHES.MAX = .625. Molded Package Width, Units.Dimension Limits = E1. Molded Package Width, INCHES.MIN = .485. Molded Package Width, INCHES.NOM = -. Molded Package Width, INCHES.MAX = .580. Overall Length, Units.Dimension Limits = D. Overall Length, INCHES.MIN = 1.980. Overall Length, INCHES.NOM = -. Overall Length, INCHES.MAX = 2.095. Tip to Seating Plane, Units.Dimension Limits = L. Tip to Seating Plane, INCHES.MIN = .115. Tip to Seating Plane, INCHES.NOM = -. Tip to Seating Plane, INCHES.MAX = .200. Lead Thickness, Units.Dimension Limits = c. Lead Thickness, INCHES.MIN = .008. Lead Thickness, INCHES.NOM = -. Lead Thickness, INCHES.MAX = .015. Upper Lead Width, Units.Dimension Limits = b1. Upper Lead Width, INCHES.MIN = .030. Upper Lead",
    "40-Lead Plastic Dual In-Line (P) - 600 mil Body [PDIP]\nWidth, INCHES.NOM = -. Upper Lead Width, INCHES.MAX = .070. Lower Lead Width, Units.Dimension Limits = b. Lower Lead Width, INCHES.MIN = .014. Lower Lead Width, INCHES.NOM = -. Lower Lead Width, INCHES.MAX = .023. Overall Row Spacing, Units.Dimension Limits = eB. Overall Row Spacing, INCHES.MIN = -. Overall Row Spacing, INCHES.NOM = -. Overall Row Spacing, INCHES.MAX = .700",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. \u00a7 Significant Characteristic.\n3. Dimensions D and E1 do not include mold flash or protrusions. Mold flash or protrusions shall not exceed .010\" per side.\n4. Dimensioning and tolerancing per ASME Y14.5M.\nBSC: Basic Dimension. Theoretically exact value shown without tolerances.\nMicrochip Technology Drawing C04-016B",
    "44-Lead Plastic Quad Flat, No Lead Package (ML) - 8x8 mm Body [QFN]\nNote:\nFor the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging",
    "44-Lead Plastic Quad Flat, No Lead Package (ML) - 8x8 mm Body [QFN]\nNumber of Pins, Units.Dimension Limits = N. Number of Pins, MILLIMETERS.MIN = 44. Number of Pins, MILLIMETERS.NOM = 44. Number of Pins, MILLIMETERS.MAX = 44. Pitch, Units.Dimension Limits = e. Pitch, MILLIMETERS.MIN = 0.65 BSC. Pitch, MILLIMETERS.NOM = 0.65 BSC. Pitch, MILLIMETERS.MAX = 0.65 BSC. Overall Height, Units.Dimension Limits = A. Overall Height, MILLIMETERS.MIN = 0.80. Overall Height, MILLIMETERS.NOM = 0.90. Overall Height, MILLIMETERS.MAX = 1.00. Standoff, Units.Dimension Limits = A1. Standoff, MILLIMETERS.MIN = 0.00. Standoff, MILLIMETERS.NOM = 0.02. Standoff, MILLIMETERS.MAX = 0.05. Contact Thickness, Units.Dimension Limits = A3. Contact Thickness, MILLIMETERS.MIN = 0.20 REF. Contact Thickness, MILLIMETERS.NOM = 0.20 REF. Contact Thickness, MILLIMETERS.MAX =",
    "44-Lead Plastic Quad Flat, No Lead Package (ML) - 8x8 mm Body [QFN]\n0.20 REF. Overall Width, Units.Dimension Limits = E. Overall Width, MILLIMETERS.MIN = 8.00 BSC. Overall Width, MILLIMETERS.NOM = 8.00 BSC. Overall Width, MILLIMETERS.MAX = 8.00 BSC. Exposed Pad Width, Units.Dimension Limits = E2. Exposed Pad Width, MILLIMETERS.MIN = 6.30. Exposed Pad Width, MILLIMETERS.NOM = 6.45. Exposed Pad Width, MILLIMETERS.MAX = 6.80. Overall Length, Units.Dimension Limits = D. Overall Length, MILLIMETERS.MIN = 8.00 BSC. Overall Length, MILLIMETERS.NOM = 8.00 BSC. Overall Length, MILLIMETERS.MAX = 8.00 BSC. Exposed Pad Length, Units.Dimension Limits = D2. Exposed Pad Length, MILLIMETERS.MIN = 6.30. Exposed Pad Length, MILLIMETERS.NOM = 6.45. Exposed Pad Length, MILLIMETERS.MAX = 6.80. Contact Width, Units.Dimension Limits = b. Contact Width, MILLIMETERS.MIN = 0.25. Contact",
    "44-Lead Plastic Quad Flat, No Lead Package (ML) - 8x8 mm Body [QFN]\nWidth, MILLIMETERS.NOM = 0.30. Contact Width, MILLIMETERS.MAX = 0.38. Contact Length, Units.Dimension Limits = L. Contact Length, MILLIMETERS.MIN = 0.30. Contact Length, MILLIMETERS.NOM = 0.40. Contact Length, MILLIMETERS.MAX = 0.50. Contact-to-Exposed Pad, Units.Dimension Limits = K. Contact-to-Exposed Pad, MILLIMETERS.MIN = 0.20. Contact-to-Exposed Pad, MILLIMETERS.NOM = -. Contact-to-Exposed Pad, MILLIMETERS.MAX = -",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. Package is saw singulated.\n3. Dimensioning and tolerancing per ASME Y14.5M.\nBSC: Basic Dimension. Theoretically exact value shown without tolerances.\nREF: Reference Dimension, usually without tolerance, for information purposes only.\nMicrochip Technology Drawing C04-103B",
    "44-Lead Plastic Thin Quad Flatpack (PT) - 10x10x1 mm Body, 2.00 mm Footprint [TQFP]\nNote: For the most current package drawings, please see the Microchip Packaging Specification located at http://www.microchip.com/packaging\nc",
    "44-Lead Plastic Thin Quad Flatpack (PT) - 10x10x1 mm Body, 2.00 mm Footprint [TQFP]\nNumber of Leads, Units.Dimension Limits = N. Number of Leads, MILLIMETERS.MIN = 44. Number of Leads, MILLIMETERS.NOM = 44. Number of Leads, MILLIMETERS.MAX = 44. Lead Pitch, Units.Dimension Limits = e. Lead Pitch, MILLIMETERS.MIN = 0.80 BSC. Lead Pitch, MILLIMETERS.NOM = 0.80 BSC. Lead Pitch, MILLIMETERS.MAX = 0.80 BSC. Overall Height, Units.Dimension Limits = A. Overall Height, MILLIMETERS.MIN = -. Overall Height, MILLIMETERS.NOM = -. Overall Height, MILLIMETERS.MAX = 1.20. Molded Package Thickness, Units.Dimension Limits = A2. Molded Package Thickness, MILLIMETERS.MIN = 0.95. Molded Package Thickness, MILLIMETERS.NOM = 1.00. Molded Package Thickness, MILLIMETERS.MAX = 1.05. Standoff, Units.Dimension Limits = A1. Standoff, MILLIMETERS.MIN = 0.05. Standoff, MILLIMETERS.NOM = -. Standoff,",
    "44-Lead Plastic Thin Quad Flatpack (PT) - 10x10x1 mm Body, 2.00 mm Footprint [TQFP]\nMILLIMETERS.MAX = 0.15. Foot Length, Units.Dimension Limits = L. Foot Length, MILLIMETERS.MIN = 0.45. Foot Length, MILLIMETERS.NOM = 0.60. Foot Length, MILLIMETERS.MAX = 0.75. Footprint, Units.Dimension Limits = L1. Footprint, MILLIMETERS.MIN = 1.00 REF. Footprint, MILLIMETERS.NOM = 1.00 REF. Footprint, MILLIMETERS.MAX = 1.00 REF. Foot Angle, Units.Dimension Limits = \u03c6. Foot Angle, MILLIMETERS.MIN = 0\u00b0. Foot Angle, MILLIMETERS.NOM = 3.5\u00b0. Foot Angle, MILLIMETERS.MAX = 7\u00b0. Overall Width, Units.Dimension Limits = E. Overall Width, MILLIMETERS.MIN = 12.00 BSC. Overall Width, MILLIMETERS.NOM = 12.00 BSC. Overall Width, MILLIMETERS.MAX = 12.00 BSC. Overall Length, Units.Dimension Limits = D. Overall Length, MILLIMETERS.MIN = 12.00 BSC. Overall Length,",
    "44-Lead Plastic Thin Quad Flatpack (PT) - 10x10x1 mm Body, 2.00 mm Footprint [TQFP]\nMILLIMETERS.NOM = 12.00 BSC. Overall Length, MILLIMETERS.MAX = 12.00 BSC. Molded Package Width, Units.Dimension Limits = E1. Molded Package Width, MILLIMETERS.MIN = 10.00 BSC. Molded Package Width, MILLIMETERS.NOM = 10.00 BSC. Molded Package Width, MILLIMETERS.MAX = 10.00 BSC. Molded Package Length, Units.Dimension Limits = D1. Molded Package Length, MILLIMETERS.MIN = 10.00 BSC. Molded Package Length, MILLIMETERS.NOM = 10.00 BSC. Molded Package Length, MILLIMETERS.MAX = 10.00 BSC. Lead Thickness, Units.Dimension Limits = c. Lead Thickness, MILLIMETERS.MIN = 0.09. Lead Thickness, MILLIMETERS.NOM = -. Lead Thickness, MILLIMETERS.MAX = 0.20. Lead Width, Units.Dimension Limits = b. Lead Width, MILLIMETERS.MIN = 0.30. Lead Width, MILLIMETERS.NOM = 0.37. Lead Width, MILLIMETERS.MAX = 0.45. Mold",
    "44-Lead Plastic Thin Quad Flatpack (PT) - 10x10x1 mm Body, 2.00 mm Footprint [TQFP]\nDraft Angle Top, Units.Dimension Limits = \u03b1. Mold Draft Angle Top, MILLIMETERS.MIN = 11\u00b0. Mold Draft Angle Top, MILLIMETERS.NOM = 12\u00b0. Mold Draft Angle Top, MILLIMETERS.MAX = 13\u00b0. Mold Draft Angle Bottom, Units.Dimension Limits = \u03b2. Mold Draft Angle Bottom, MILLIMETERS.MIN = 11\u00b0. Mold Draft Angle Bottom, MILLIMETERS.NOM = 12\u00b0. Mold Draft Angle Bottom, MILLIMETERS.MAX = 13\u00b0",
    "Notes:\n1. Pin 1 visual index feature may vary, but must be located within the hatched area.\n2. Chamfers at corners are optional; size may vary.\n3. Dimensions D1 and E1 do not include mold flash or protrusions. Mold flash or protrusions shall not exceed 0.25 mm per side.\n4. Dimensioning and tolerancing per ASME Y14.5M.\nBSC: Basic Dimension. Theoretically exact value shown without tolerances.\nREF: Reference Dimension, usually without tolerance, for information purposes only.\nMicrochip Technology Drawing C04-076B",
    "APPENDIX A: REVISION HISTORY\nRevision A (June 2004)\nOriginal data sheet for PIC18F2X1X/4X1X devices.",
    "Revision B (October 2006)\nChanges to Register 22-13: Device ID Register 2 and packaging diagrams updated.",
    "Revision C (January 2007)\nPackaging diagrams updated.",
    "Revision D (October 2009)\nUpdated to remove Preliminary status.\nAPPENDIX B:\nDEVICE\nDIFFERENCES\nThe differences between the devices listed in this data sheet are shown in Table B-1 and Table B-2.",
    "TABLE B-1: DEVICE DIFFERENCES (PIC18F2410/2415/2510/2515/2610)\nProgram Memory (Bytes), PIC18F2410 = 16384. Program Memory (Bytes), PIC18F2510 = 32768. Program Memory (Bytes), PIC18F2515 = 49152. Program Memory (Bytes), PIC18F2610 = 65536. Program Memory (Instructions), PIC18F2410 = 8192. Program Memory (Instructions), PIC18F2510 = 16384. Program Memory (Instructions), PIC18F2515 = 24576. Program Memory (Instructions), PIC18F2610 = 32768. Interrupt Sources, PIC18F2410 = 18. Interrupt Sources, PIC18F2510 = 18. Interrupt Sources, PIC18F2515 = 18. Interrupt Sources, PIC18F2610 = 18. I/O Ports, PIC18F2410 = Ports A, B, C, (E). I/O Ports, PIC18F2510 = Ports A, B, C, (E). I/O Ports, PIC18F2515 = Ports A, B,",
    "TABLE B-1: DEVICE DIFFERENCES (PIC18F2410/2415/2510/2515/2610)\nC, (E). I/O Ports, PIC18F2610 = Ports A, B, C, (E). Capture/Compare/PWM Modules, PIC18F2410 = 2. Capture/Compare/PWM Modules, PIC18F2510 = 2. Capture/Compare/PWM Modules, PIC18F2515 = 2. Capture/Compare/PWM Modules, PIC18F2610 = 2. Enhanced Capture/Compare/PWM Modules, PIC18F2410 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2510 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2515 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F2610 = 0. Parallel Communications (PSP), PIC18F2410 = No. Parallel Communications (PSP), PIC18F2510 = No. Parallel Communications (PSP), PIC18F2515 = No. Parallel Communications (PSP), PIC18F2610 = No.",
    "TABLE B-1: DEVICE DIFFERENCES (PIC18F2410/2415/2510/2515/2610)\n10-bit Analog-to-Digital Module, PIC18F2410 = 10 input channels. 10-bit Analog-to-Digital Module, PIC18F2510 = 10 input channels. 10-bit Analog-to-Digital Module, PIC18F2515 = 10 input channels. 10-bit Analog-to-Digital Module, PIC18F2610 = 10 input channels. Packages, PIC18F2410 = 28-pin SPDIP 28-pin SOIC 28-pin QFN. Packages, PIC18F2510 = 28-pin SPDIP 28-pin SOIC 28-pin QFN. Packages, PIC18F2515 = 28-pin SPDIP 28-pin SOIC. Packages, PIC18F2610 = 28-pin SPDIP 28-pin SOIC",
    "TABLE B-2: DEVICE DIFFERENCES (PIC18F4410/4415/4510/4515/4610)\nProgram Memory (Bytes), PIC18F4410 = 16384. Program Memory (Bytes), PIC18F4510 = 32768. Program Memory (Bytes), PIC18F4515 = 49152. Program Memory (Bytes), PIC18F4610 = 65536. Program Memory (Instructions), PIC18F4410 = 8192. Program Memory (Instructions), PIC18F4510 = 16384. Program Memory (Instructions), PIC18F4515 = 24576. Program Memory (Instructions), PIC18F4610 = 32768. Interrupt Sources, PIC18F4410 = 19. Interrupt Sources, PIC18F4510 = 19. Interrupt Sources, PIC18F4515 = 19. Interrupt Sources, PIC18F4610 = 19. I/O Ports, PIC18F4410 = Ports A, B, C, D, E. I/O Ports, PIC18F4510 = Ports A, B, C, D, E. I/O Ports, PIC18F4515 = Ports A, B,",
    "TABLE B-2: DEVICE DIFFERENCES (PIC18F4410/4415/4510/4515/4610)\nC, D, E. I/O Ports, PIC18F4610 = Ports A, B, C, D, E. Capture/Compare/PWM Modules, PIC18F4410 = 2. Capture/Compare/PWM Modules, PIC18F4510 = 2. Capture/Compare/PWM Modules, PIC18F4515 = 2. Capture/Compare/PWM Modules, PIC18F4610 = 2. Enhanced Capture/Compare/PWM Modules, PIC18F4410 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F4510 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F4515 = 0. Enhanced Capture/Compare/PWM Modules, PIC18F4610 = 0. Parallel Communications (PSP), PIC18F4410 = Yes. Parallel Communications (PSP), PIC18F4510 = Yes. Parallel Communications (PSP), PIC18F4515 = Yes. Parallel Communications (PSP), PIC18F4610 = Yes.",
    "TABLE B-2: DEVICE DIFFERENCES (PIC18F4410/4415/4510/4515/4610)\n10-bit Analog-to-Digital Module, PIC18F4410 = 13 input channels. 10-bit Analog-to-Digital Module, PIC18F4510 = 13 input channels. 10-bit Analog-to-Digital Module, PIC18F4515 = 13 input channels. 10-bit Analog-to-Digital Module, PIC18F4610 = 13 input channels. Packages, PIC18F4410 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4510 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4515 = 40-pin PDIP 44-pin QFN 44-pin TQFP. Packages, PIC18F4610 = 40-pin PDIP 44-pin QFN 44-pin TQFP",
    "APPENDIX C: CONVERSION CONSIDERATIONS\nThis appendix discusses the considerations for converting  from  previous  versions  of  a  device  to  the ones listed in this data sheet. Typically, these changes are due to the differences in the process technology used. An example of this type of conversion is from a PIC16C74A to a PIC16C74B.\nNot Applicable\nAPPENDIX D:\nMIGRATION FROM BASELINE TO ENHANCED DEVICES\nThis section discusses how to migrate from a Baseline device (i.e., PIC16C5X) to an Enhanced MCU device (i.e., PIC18FXXX).\nThe  following  are  the  list  of  modifications  over  the PIC16C5X microcontroller family:\nNot Currently Available\nAPPENDIX E:",
    "MIGRATION FROM MID-RANGE TO ENHANCED DEVICES\nA detailed  discussion of the  differences between  the mid-range  MCU  devices  (i.e.,  PIC16CXXX)  and  the enhanced  devices  (i.e.,  PIC18FXXX)  is  provided  in AN716,  'Migrating  Designs  from  PIC16C74A/74B  to PIC18C442 .'  The  changes  discussed,  while  device specific,  are  generally  applicable  to  all  mid-range  to enhanced device migrations.\nThis Application Note is available as Literature Number DS00716.",
    "PIC18F2X1X/4X1X\nAPPENDIX F:",
    "MIGRATION FROM HIGH-END TO ENHANCED DEVICES\nA  detailed  discussion  of  the  migration  pathway  and differences between the high-end MCU devices (i.e., PIC17CXXX) and the enhanced devices (i.e., PIC18FXXX)  is  provided  in AN726,  'PIC17CXXX  to PIC18CXXX  Migration .' This Application Note is available as Literature Number DS00726.",
    "PIC18F2X1X/4X1X\nNOTES:",
    "A\nA/D, 1 = ................................................................................... 213. A/D Converter Interrupt, Configuring, 1 = ....................... 217. Acquisition Requirements ........................................, 1 = 218. ADCON0 Register, 1 = .................................................... 213. ADCON1 Register, 1 =",
    "A\n.................................................... 213. ADCON2 Register, 1 = .................................................... 213. ADRESH Register, 1 = ............................................ 213, 216. ADRESL Register, 1 = .................................................... 213. Analog Port Pins, Configuring, 1 =",
    "A\n.................................. 220. Associated Registers ..............................................., 1 = 222. Calculating the Minimum Required Acquisition Time ..... 218 Configuring the, 1 = Module ............................................ 217. Conversion Clock (TAD) ..........................................., 1 = 219. Conversion Status (GO/DONE Bit), 1 = .......................... 216. Conversions, 1 =",
    "A\n............................................................. 221. Converter Characteristics, 1 = ........................................ 349. Operation in Power Managed Modes, 1 = ...................... 220. Selecting and Configuring Acquisition Time, 1 = ............ 219. Special Event Trigger (CCP), 1 = .................................... 222. Special Event Trigger (ECCP), 1 =",
    "A\n................................. 140. Use of the CCP2 Trigger, 1 = .......................................... 222. Absolute Maximum Ratings, 1 = ............................................. 313. AC (Timing) Characteristics ............................................., 1 = 331. Load Conditions for Device Timing Specifications, 1 = ... 332. Parameter Symbology",
    "A\n............................................., 1 = 331 332. Temperature and Voltage Specifications, 1 = .................. Timing Conditions, 1 = .................................................... 332. AC Characteristics, 1 = ............................................... 334. Internal RC Accuracy, 1 = . ACKSTAT Status, 1 = Flag 183. Access Bank Mapping with 75 ACKSTAT, 1 = Indexed Literal Offset Addressing Mode ..",
    "A\n........................................................................ 183 ...................................................... GO/DONE Bit, 1 = ........................................................... 216. ADCON1 Register, 1 =",
    "A\n............................................................ 213. ADCON2 Register, 1 = ............................................................ 213. ADDFSR, 1 = .......................................................................... 302. ADDLW",
    "A\n............................................................................, 1 = 265. ADDULNK, 1 = ........................................................................ 302. ADDWF ............................................................................, 1 = 265 266. ADRESH Register, 1 =",
    "A\n............................................................ 213. ADRESL Register, 1 = .................................................... 213, 216. Analog-to-Digital Converter. See A/D., 1 = . ANDLW ............................................................................, 1 = 266. ANDWF",
    "A\n............................................................................, 1 = 267. Assembler MPASM Assembler, 1 = .................................................. 310 206. Auto-Wake-up on, 1 = Sync Break Character. , 1 = .........................",
    "B\nBank Select Register (BSR) ..............................................., 1 = Bank Select Register (BSR) ................................................ Bank Select Register (BSR) ..............................................., 2 = Bank Select Register (BSR) ................................................ Bank Select Register (BSR)",
    "B\n..............................................., 3 = 61. Baud Rate Generator ......................................................., 1 = Baud Rate Generator ........................................................ Baud Rate Generator ......................................................., 2 = Baud Rate Generator",
    "B\n........................................................ Baud Rate Generator ......................................................., 3 = 179. BC ...................................................................................., 1 = BC",
    "B\n..................................................................................... BC ...................................................................................., 2 = BC",
    "B\n..................................................................................... BC ...................................................................................., 3 = 267. BCF",
    "B\n.................................................................................., 1 = BCF ................................................................................... BCF ..................................................................................,",
    "B\n2 = BCF ................................................................................... BCF .................................................................................., 3 = 268. BF, 1 =",
    "B\n..................................................................................... BF, 2 = ..................................................................................... BF, 3 = 183. BF, 1 = Status Flag. BF, 2 =",
    "B\n.................................................................. BF, 3 = 183\nBlock Diagrams",
    "B\nA/D ..........................................................................., 1 = 216. Analog Input Model, 1 = .................................................. 217. Baud Rate Generator, 1 = .............................................. 179. Capture Mode Operation, 1 = ......................................... 133. Comparator Analog Input Model, 1 =",
    "B\n.............................. 227. Comparator I/O Operating Modes (Diagram), 1 = .......... 224. Comparator Output .................................................., 1 = 226. Comparator Voltage Reference ..............................., 1 = 230. Comparator Voltage Reference Output Buffer Example 231, 1 = . Compare Mode Operation, 1 = ....................................... 134. Device Clock",
    "B\n.............................................................., 1 = 30. Enhanced PWM, 1 = ....................................................... 141. EUSART Receive, 1 = .................................................... 204. EUSART Transmit, 1 = ................................................... 202. External",
    "B\nPower-on Reset Circuit (Slow VDD 45, 1 = Power-up). Fail-Safe Clock Monitor, 1 = ........................................... 251. Generic I/O Port ........................................................., 1 = 97. High/Low-Voltage Detect with External Input, 1 = .......... 234. Interrupt Logic ............................................................, 1 = 84. MSSP (I 2 C Master Mode), 1 =",
    "B\n........................................ 177. MSSP (I 2 C Mode), 1 = .................................................... 162. MSSP (SPI Mode) ..................................................., 1 = 153. On-Chip Reset Circuit ................................................, 1 = 43. PIC18F2410/2510/2515/2610, 1 =",
    "B\n................................... 13. PIC18F4410/4510/4515/4610, 1 = ................................... 14. PLL (HS Mode), 1 = .......................................................... 27. PORTD and PORTE (Parallel Slave PWM Operation (Simplified) ...................................., 1 = Port) ............... 112. Memory, 1 = 136. Reads from Flash Program, 1 =",
    "B\n......................... 78. Single Comparator ..................................................., 1 = 225. Table Read Operation, 1 = ............................................... 77 116. Timer0 in 16-Bit Mode Mode ..............................................., 1 = ............................................. 116. Timer0 in 8-Bit",
    "B\nTimer1, 1 = ..................................................................... 120. Timer1 (16-Bit Read/Write Mode), 1 = ............................ 120. Timer2 ....................................................................., 1 = 126. Timer3, 1 =",
    "B\n..................................................................... 128. Timer3 (16-Bit Read/Write Mode), 1 = ............................ 128. Watchdog Timer ......................................................, 1 = 248. BN",
    "B\n...................................................................................., 1 = 268. BNC BNN, 1 = ................................................................................. 269 269. BNOV, 1 =",
    "B\n.............................................................................. 270. BNZ ................................................................................., 1 = 270. BOR. See Brown-out Reset.",
    "B\n................................................................................., 1 = . BOV, 1 = 273. BRA ................................................................................., 1 = 271. Break Character (12-Bit) Transmit and Receive, 1 = .............. 207. BRG. See Baud Rate Generator., 1 = . Brown-out Reset (BOR)",
    "B\n....................................................., 1 = 46. Detecting, 1 = ................................................................... 46. Disabling in Sleep Mode, 1 = ............................................ 46. Software Enabled, 1 = ...................................................... 46. BSF",
    "B\n.................................................................................., 1 = 271. BTFSC, 1 = ............................................................................. 272. BTFSS, 1 = .............................................................................",
    "B\n272. BTG BZ ...................................................................................., 1 = ................................................................................. 273 274",
    "C\nCALL ................................................................................, 310 = 274. CALLW ............................................................................., 310 = 303. Capture (CCP Module) ....................................................., 310 = 133. Associated Registers",
    "C\n..............................................., 310 = 135. CCP Pin Configuration ............................................., 310 = 133. CCPRxH:CCPRxL Registers, 310 = ................................... 133. Prescaler .................................................................., 310 = 133. Software Interrupt",
    "C\n...................................................., 310 = 133. Timer1/Timer3 Mode Selection, 310 = ................................ 133. Capture (ECCP Module), 310 = .................................................. 140. Capture/Compare/PWM (CCP), 310 = ........................................ 131. Capture Mode. See Capture. CCP Mode and Timer Resources, 310 =",
    "C\n............................ 132. CCPRxH Register ...................................................., 310 = 132. CCPRxL Register, 310 = ..................................................... 132. Compare Mode. See Compare. Interaction of Two CCP Modules, 310 = ............................. 132. Module Configuration ..............................................., 310 = 132.",
    "C\nClock Sources ...................................................................., 310 = 30. Selecting the 31 kHz Source, 310 = ...................................... 31. Selection Using OSCCON Register, 310 = ........................... 31. CLRF ................................................................................, 310 = 275.",
    "C\n.........................................................................., 310 = 275. CLRWDT, 310 = . Code Examples, 310 = . 16 x 16 Signed Multiply Routine, 310 = ................................ 82. 16 x 16 Unsigned Multiply Routine, 310 = ............................ 82. 8 x 8 Signed Multiply Routine, 310 = .................................... 81. 8 x 8 Unsigned Multiply Routine, 310 =",
    "C\n................................ 81. Changing Between Capture Prescalers, 310 = ................... 133. Computed GOTO Using an Offset Value, 310 = ................... 58. Fast Register Stack ...................................................., 310 = 58. How to Clear RAM (Bank 1) Using Indirect Addressing, 310 = .. 71 Implementing a Real-Time Clock Using a Timer1 ......................................................, 310 = Inter-. rupt Service Initializing PORTA, 310 = 123",
    "C\n...................................................... 97. Initializing PORTB ...................................................., 310 = 100. Initializing PORTC ...................................................., 310 = 103. Initializing PORTD ...................................................., 310 = 106. Initializing PORTE",
    "C\n...................................................., 310 = 109. Loading the SSPBUF (SSPSR) Register, 310 = ................. 156. Reading a Flash Program Memory Word, 310 = .................. 79. Saving Status, WREG and BSR Registers in RAM, 310 = ... 95. Code Protection ..............................................................., 310 = 239. COMF",
    "C\n..............................................................................., 310 = 276. Comparator ......................................................................, 310 = 223. Analog Input Connection Considerations, 310 = ................. 227. Associated Registers ..............................................., 310 = 227 224. Configuration",
    "C\n............................................................, 310 = 226. Effects of a Reset ..................................................... .................................................................., 310 = 226. Interrupts Operation",
    "C\n................................................................., 310 = 225. Operation During Sleep, 310 = 226. ...................................................................., 310 = ........................................... 225. Outputs Reference, 310 =",
    "C\n................................................................ 225. External Signal, 310 = ................................................. 225. Internal Signal, 310 = .................................................. 225. Response Time ........................................................, 310 = 225. Comparator Specifications",
    "C\n..............................................., 310 = 329. Comparator Voltage Reference Accuracy and Error, 310 = ....................................... 229 .................................................. 230. Associated Registers, 310 = ............................................... 231",
    "C\nConfiguring, 1 = .............................................................. 229. Connection Considerations, 1 = ...................................... 230. Effects of a Reset, 1 = .................................................... 230. Operation During Sleep, 1 = ........................................... 230. Compare (CCP Module)",
    "C\n.................................................., 1 = 134. Associated Registers, 1 = ............................................... 135. CCPRx Register, 1 = ...................................................... 134. Pin Configuration, 1 = ..................................................... 134. Software Interrupt",
    "C\n...................................................., 1 = 134. Special Event Trigger, 1 = .............................. 129, 134, 222. Timer1/Timer3 Mode Selection, 1 = ................................ 134. Compare (ECCP Module), 1 = ................................................ 140. Special Event Trigger, 1 = ..............................................",
    "C\n140. Computed GOTO Configuration Bits, 1 = ............................................................... 58 239. ............................................................ Configuration Register Protection, 1 = .................................... 257. Context Saving During Interrupts, 1 = ....................................... 95. Conversion Considerations, 1 =",
    "C\n.............................................. 362. CPFSEQ .........................................................................., 1 = 276. CPFSGT .........................................................................., 1 = 277. CPFSLT",
    "C\n..........................................................................., 1 = 277. Crystal Oscillator/Ceramic Resonator, 1 = ................................ 25. Customer Change Notification Service, 1 = ............................ 375. Customer Notification Service ........................................., 1 = 375. Customer Support, 1 =",
    "C\n............................................................ 375. D, 1 = . Data Addressing, 1 = 71. Modes .................................................... Comparing Addressing Modes with the Extended struction Set Enabled ........................................, 1 = In-. Direct",
    "C\n........................................................................., 1 = 74 71. Indexed Literal Offset, 1 = ................................................ 73. Indirect ......................................................................., 1 = 71. Inherent and Literal, 1 = 71.",
    "C\n....................................................................., 1 = ..................................................... Data Memory, 1 = 61 65. Access Bank .............................................................. and the Extended Instruction, 1 = Set .............................. 73. Bank Select Register (BSR), 1 =",
    "C\n...................................... 61. General Purpose Registers, 1 = ....................................... 65. Map for PIC18F2410/4410, 1 = ........................................ 62. Map for PIC18F2510/4510 ........................................, 1 = 63. Map for PIC18F2515/2610/4515/4610, 1 = ...................... 64. Special Function Registers DAW",
    "C\n................................................................................, 1 = . DC and AC Characteristics, 1 = ........................................ 66. , 1 = 278. DC Characteristics ........................................................... Power-Down and Supply Current",
    "C\n........................................................, 1 = 326 317. Supply Voltage DCFSNZ .........................................................................., 1 = 316 279. , 1 = 278. DECF ..............................................................................., 1 = . DECFSZ, 1 = 279 309.",
    "C\n.......................................................................... Development Support, 1 = ...................................................... ........................................................... 361. Device Differences Device Overview, 1 = ........................",
    "C\n.................................................................. Details on Individual, 1 = 9 10. Family Members New Core Features ...................................................... Other Special Features .............................................., 1 = 9. Device Overview Features (table), 1 = 10. (PIC18F2410/2510/2515/2610)",
    "C\n........................................................., 1 = 11. Device Overview (PIC18F4410/4510/4515/4610) Features (table) ........................................................., 1 = . Device Reset Timers, 1 = 12 47. , 1 = .......................................................... Oscillator Start-up Timer (OST) PLL Lock Time-out",
    "C\n....................................................., 1 = ................................. 47 47. Power-up Timer (PWRT), 1 = . , 1 = ........................................... 47\nDirect Addressing, 1 = ............................................................... 72",
    "C\nE, 1 = . Effect, 1 = 73, 306. on Standard PIC Instructions ........................... Effects of Power Managed Modes on Various Clock Sources, 1 = on Standard PIC Instructions ........................... Effects of Power Managed Modes on Various Clock Sources. 33 Electrical Characteristics, 1 = 313. .................................................. Enhanced Capture/Compare/PWM (ECCP), 1 = .................... 139. Capture and Compare Modes .................................., 1 = 140. Capture Mode. See Capture (ECCP Module). Outputs and Configuration",
    "C\n......................................., 1 = 140. Pin Configurations for ECCP1 ................................. PWM Mode. See PWM (ECCP Module)., 1 = 140. Standard PWM Mode ..............................................., 1 = 140. Timer Resources, 1 = ...................................................... 140. Enhanced PWM Mode. See PWM (ECCP Module). Enhanced Universal Synchronous Asynchronous, 1 =",
    "C\n........ 141 Receiver. Transmitter (EUSART). See, 1 = EUSART.. Equations, 1 = . A/D Acquisition Time ................................................, 1 = 218. A/D Minimum Charging Time, 1 = ................................... 218. Errata, 1 = ................................................................................... 8. EUSART, 1 = . Asynchronous Mode, 1 =",
    "C\n................................................ 202. 12-Bit Break Transmit and Receive, 1 = ................. 207. Associated Registers, Receive, 1 = ........................ 205. Associated Registers, Transmit ........................., 1 = ....................... 203. Auto-Wake-up on Sync Break, 1 = 206. Receiver ..........................................................., 1 = 204. Setting up 9-bit Mode with Address",
    "C\nDetect, 1 = ...... 204 ....................................................... 202. Baud Rate Generator, 1 = . Operation in Power Managed Mode, 1 = ................ 197. Baud Rate Generator (BRG), 1 = .................................... 197. Associated Registers, 1 = ....................................... 197. Auto-Baud Rate Detect ...................................., 1 = 200. Baud Rate Error, Calculating",
    "C\n..........................., 1 = 197. Baud Rates, Asynchronous Modes ................., 1 = 198. Sampling .........................................................., 1 = . , 1 = 197. Synchronous Master Mode, 1 = ...................................... 208. Associated Registers, Receive, 1 = ........................ 210. Reception",
    "C\n........................................................., 1 = 210. Transmission, 1 = ................................................... 208. Synchronous Slave Mode, 1 = ........................................ 211. Associated Registers, Transmit, 1 = ....................... 211 212. Reception",
    "C\n........................................................., 1 = 211. Transmission, 1 = .................................................... Extended Instruction Set, 1 = .................................................. 301. ADDFSR, 1 = .................................................................. 302. ADDULNK",
    "C\n................................................................, 1 = 302. and Using MPLAB Tools, 1 = .......................................... 308. CALLW ....................................................................., 1 = 303. Considerations for Use, 1 = ............................................ 306 303. MOVSF",
    "C\n.................................................................... ...................................................................., 1 = 304. MOVSS PUSHL, 1 = ..................................................................... 304. SUBFSR, 1 =",
    "C\n................................................................... , 1 = 305. SUBULNK Syntax ......................................................................, 1 = ................................................................ 305 301. External Clock Input, 1 =",
    "C\n........................................................... 26",
    "F\nFail-Safe Clock Monitor ..........................................., 1 = 239, 251. Interrupts in Power Managed Modes ......................., 1 = 252. POR or Wake from Sleep ........................................, 1 = 252. WDT During Oscillator Failure, 1 = ................................. 251. Fast Register Stack, 1 = ........................................................... 58. Flash Program",
    "F\nMemory, 1 = ..................................................... 77. Associated Registers, 1 = ................................................. 79. Control Registers, 1 = ....................................................... 78. Reading, 1 = ..................................................................... 78. TABLAT",
    "F\n(Table Latch) Register, 1 = ................................ 78. Table Reads and Table Writes, 1 = .................................. 77. TBLPTR (Table Pointer) Register, 1 = .............................. 78. FSCM. See Fail-Safe Clock Monitor., 1 = . G, 1 = . General Call Address Support, 1 = ......................................... 176. GOTO",
    "F\n.............................................................................., 1 = 280. H, 1 = . Hardware Multiplier, 1 = ............................................................ 81. Introduction, 1 = ................................................................ 81. Operation, 1 =",
    "F\n................................................................... 81. Performance Comparison, 1 = .......................................... 81. High/Low-Voltage Detect, 1 = ................................................. 233. Applications ............................................................., 1 = 236. Associated Registers, 1 =",
    "F\n............................................... 237. Characteristics ........................................................., 1 = 330. Current Consumption .............................................., 1 = 235. Effects of a Reset, 1 = .................................................... 237. Operation",
    "F\n................................................................., 1 = 234. During Sleep, 1 = .................................................... 237. Setup ......................................................................., 1 = 235",
    "F\n............................................................ Start-up Time, 1 = 235. Typical Application ..................................................., 1 = 236. HLVD. See High/Low-Voltage Detect., 1 = ............................. 233. I/O Ports I 2 C Mode, 1 =",
    "F\n............................................................................ 97. (MSSP) Acknowledge Sequence Timing, 1 = .............................. 186. Baud Rate Generator .............................................., 1 = 179. Bus Collision During a Repeated Start, 1 = Condition .................. 190. During a Stop Condition, 1 = .................................. 191. Clock Arbitration, 1 =",
    "F\n...................................................... 180. Clock Stretching ......................................................, 1 = 172. 10-Bit Slave Receive Mode (SEN = 1), 1 = ............ 172. 10-Bit Slave Transmit Mode ............................, 1 = 172. 7-Bit Slave Receive Mode (SEN = 1), 1 = .............. 172. 7-Bit Slave Transmit Mode .............................. Clock Synchronization",
    "F\nand the CKP bit (SEN, 1 = 172 173. Effects of a Reset .................................................... ................................., 1 = 187. General Call Address Support, 1 = 176. I 2 C Clock Rate w/BRG ............................................, 1 = 179. Master Mode ............................................................, 1 = 177. Operation, 1 = 178.",
    "F\n......................................................... Reception, 1 = ........................................................ 183. Repeated Start Timing, 1 = ..................................... 182. Transmission ..................................................., 1 = 183. Multi-Master Communication, Bus Collision and, 1 = . Arbitration",
    "F\n........................................................, 1 = 187. Mode, 1 = ................................................... 187. Multi-Master Operation, 1 = ................................................................. 166",
    "PIC18F2X1X/4X1X\nRead/Write Bit Information (R/W Bit), 1 = ............... 166, 167. Registers .................................................................., 1 = 162. Serial Clock (RC3/SCK/SCL), 1 = ................................... 167. Slave Mode, 1 = .............................................................. 166. Addressing, 1 =",
    "PIC18F2X1X/4X1X\n....................................................... 166. Reception, 1 = ......................................................... 167. Transmission, 1 = .................................................... 167. Sleep Operation, 1 = ....................................................... 187. Stop Condition Timing",
    "PIC18F2X1X/4X1X\n............................................................., 1 = .............................................. 186. ID Locations, 1 = 239, 257. INCF INCFSZ, 1 = ................................................................................. 280 281.",
    "PIC18F2X1X/4X1X\n............................................................................ In-Circuit Debugger, 1 = .......................................................... 257. In-Circuit Serial, 1 = ...................... 239, 257. Programming (ICSP) Indexed Literal Offset Addressing and Standard PIC18 Instructions, 1 = ............................. 306. Indexed Literal Offset Mode",
    "PIC18F2X1X/4X1X\n....................................... ............................................................, 1 = 73, 306. Indirect Addressing, 1 = 72. INFSNZ ............................................................................, 1 = 281 51-54. Initialization Conditions for all Registers, 1 = ......................",
    "PIC18F2X1X/4X1X\n................................................................. 59. Instruction Cycle, 1 = . Clocking Scheme, 1 = ....................................................... 59. Instruction Flow/Pipelining, 1 = . , 1 = ................................................. 59. Instruction Set, 1 = 265",
    "PIC18F2X1X/4X1X\n.................................................................... 265. ADDLW .................................................................... ADDWF, 1 = .................... 307. ADDWF (Indexed Literal ADDWFC .................................................................,",
    "PIC18F2X1X/4X1X\n1 = Offset mode) 266. ANDLW, 1 = .................................................................... 266. ANDWF, 1 = .................................................................... 267 ............................................................................ 267. BC, 1 = . BCF,",
    "PIC18F2X1X/4X1X\n1 = .......................................................................... 268. BN, 1 = ............................................................................ 268. BNC, 1 = ......................................................................... 269. BNN, 1",
    "PIC18F2X1X/4X1X\n= ......................................................................... 269. BNOV, 1 = ....................................................................... 270. BNZ, 1 = .......................................................................... 270",
    "PIC18F2X1X/4X1X\n......................................................................... 273. BOV, 1 = 271. BRA, 1 = .......................................................................... 271. BSF .......................................................................... BSF (Indexed Literal Offset",
    "PIC18F2X1X/4X1X\nmode), 1 = .......................... 307. BTFSC, 1 = ..................................................................... 272. BTFSS, 1 = ..................................................................... 272. BTG",
    "PIC18F2X1X/4X1X\n.........................................................................., 1 = 273. BZ ............................................................................, 1 = 274. CALL, 1 = ........................................................................ 274. CLRF",
    "PIC18F2X1X/4X1X\n........................................................................, 1 = 275. CLRWDT COMF ......................................................................, 1 = .................................................................. 275. CPFSEQ, 1 = 276",
    "PIC18F2X1X/4X1X\n................................................................... , 1 = 276. CPFSGT, 1 = .................................................................. 277 277. CPFSLT, 1 = ................................................................... 278. DAW",
    "PIC18F2X1X/4X1X\n........................................................................., 1 = .................................................................. 279. DCFSNZ, 1 = 278. DECF ....................................................................... DECFSZ, 1 = 279.",
    "PIC18F2X1X/4X1X\n..................................................................., 1 = ............................................... 259. Firmware Instructions ........................................................, 1 = 261. General Format",
    "PIC18F2X1X/4X1X\n......................................................................, 1 = 280. GOTO ........................................................................., 1 = 280. INCF, 1 = . INCFSZ, 1 = .................................................................... 281 281. INFSNZ, 1 =",
    "PIC18F2X1X/4X1X\n.................................................................... 282. IORLW, 1 = ..................................................................... 282. IORWF ........................................................................, 1 =",
    "PIC18F2X1X/4X1X\n..................................................................... 283. LFSR, 1 = ",
    "PIC18F2X1X/4X1X\nMOVF, 1 = ...................................................................... 283. MOVFF, 1 = .................................................................... 284. MOVLB, 1 = .................................................................... 284. MOVLW, 1 =",
    "PIC18F2X1X/4X1X\n................................................................... 285. MOVWF, 1 = ................................................................... 285. MULLW, 1 = .................................................................... 286. MULWF, 1 =",
    "PIC18F2X1X/4X1X\n.................................................................... 286. NEGF, 1 = ....................................................................... 287. NOP, 1 = ......................................................................... 287. Opcode Field Descriptions, 1 =",
    "PIC18F2X1X/4X1X\n....................................... 260. POP, 1 = ......................................................................... 288. PUSH, 1 = ....................................................................... 288. RCALL, 1 =",
    "PIC18F2X1X/4X1X\n..................................................................... 289. RESET, 1 = ..................................................................... 289. RETFIE, 1 = .................................................................... 290. RETLW, 1 =",
    "PIC18F2X1X/4X1X\n.................................................................... 290. RETURN, 1 = .................................................................. 291. RLCF, 1 = ....................................................................... 291. RLNCF, 1 =",
    "PIC18F2X1X/4X1X\n..................................................................... 292. RRCF, 1 = ....................................................................... 292. RRNCF, 1 = .................................................................... 293. SETF",
    "PIC18F2X1X/4X1X\n......................................................................., 1 = 293. SETF (Indexed Literal Offset mode), 1 = ........................ 307. SLEEP ....................................................................., 1 = 294. Standard Instructions, 1 = ............................................... 259.",
    "PIC18F2X1X/4X1X\nSUBFWB, 1 = ................................................................. 294. SUBLW, 1 = .................................................................... 295. SUBWFB, 1 = ................................................................. 296. SWAPF, 1 =",
    "PIC18F2X1X/4X1X\n.................................................................... 296. TBLRD, 1 = ..................................................................... 297. TBLWT, 1 = .................................................................... 298. TSTFSZ, 1 =",
    "PIC18F2X1X/4X1X\n................................................................... 299. XORLW, 1 = ................................................................... 299. XORWF, 1 = 300. ................................................................... INTCON Registers, 1 = .",
    "PIC18F2X1X/4X1X\n....................................................... Inter-Integrated Circuit. See, 1 = 85-87. I 2 C. Internal Oscillator Block ....................................................., 1 = 28. Adjustment, 1 = ................................................................. 28. INTIO Modes, 1 =",
    "PIC18F2X1X/4X1X\n............................................................. 28. INTOSC Frequency Drift ............................................, 1 = 28. OSCTUNE Register ..................................................., 1 = 28. PLL in INTOSC Modes, 1 = 28. Internal RC Oscillator, 1 = ............................................... Use",
    "PIC18F2X1X/4X1X\nwith WDT, 1 = .......................................................... 248. Internet Address, 1 = .............................................................. 375. Interrupt Sources, 1 = ............................................................. 239 217. A/D Conversion Complete Capture Complete (CCP), 1 =",
    "PIC18F2X1X/4X1X\n....................................... ......................................... 133. Compare Complete (CCP) ......................................., 1 = 134. Interrupt-on-Change (RB7:RB4), 1 = .............................. 100. INTn Pin",
    "PIC18F2X1X/4X1X\n....................................................................., 1 = 95. PORTB, Interrupt-on-Change, 1 = .................................... 95. TMR0 ........................................................................., 1 = 95. TMR0 Overflow, 1 =",
    "PIC18F2X1X/4X1X\n........................................................ 117. TMR1 Overflow, 1 = 119. ........................................................ TMR2 to PR2 Match (PWM), 1 = ............................ 136, 141. TMR3 Overflow ................................................, 1 = 127, 129. Interrupts",
    "PIC18F2X1X/4X1X\n............................................................................, 1 = 83. Interrupts, Flag Bits, 1 = . Interrupt-on-Change (RB7:RB4) Flag (RBIF Bit), 1 = ..... 100. INTOSC, INTRC. See Internal Oscillator Block. IORLW ............................................................................., 1 = 282. IORWF, 1 =",
    "PIC18F2X1X/4X1X\n............................................................................. 282",
    "PIC18F2X1X/4X1X\nIPR Registers, 1 = ..................................................................... 92. L, 1 = . LFSR, 1 = 283. Low-Voltage ICSP Programming. See Single-Supply Programming, 1 = ................................................................................ ICSP. M, 1 = . Master Clear (MCLR), 1 =",
    "PIC18F2X1X/4X1X\n......................................................... 45. Master Synchronous Serial Port (MSSP). See MSSP. Memory Organization ........................................................., 1 = 55. Data Memory ............................................................., 1 = 61. Program Memory, 1 =",
    "PIC18F2X1X/4X1X\n....................................................... 55. Memory Programming Requirements, 1 = .............................. 328. Microchip Internet Web Site ............................................., 1 = 375. Migration from Baseline to Enhanced Devices ................, 1 = 362. Migration from High-End to Enhanced Devices, 1 = ............... 363. Migration from Mid-Range to Enhanced, 1 = Devices ............ 363. MOVF",
    "PIC18F2X1X/4X1X\n..............................................................................., 1 = 283. MOVFF, 1 = ............................................................................ 284. MOVLB, 1 =",
    "PIC18F2X1X/4X1X\n............................................................................ 284. MOVLW, 1 = ........................................................................... 285. MOVSF, 1 = ............................................................................",
    "PIC18F2X1X/4X1X\n303. MOVSS, 1 = ............................................................................ 304. MOVWF, 1 = ........................................................................... 285. MPLAB ASM30 Assembler, Linker, Librarian .................. MPLAB Integrated Development Environment Software, 1 = 310 .. MPLAB PM3 Device Programmer, 1 = 309",
    "PIC18F2X1X/4X1X\n................................... 312. MPLAB REAL ICE In-Circuit Emulator System, 1 = 311. MPLINK Object Linker/MPLIB Object Librarian ..............., 1 = ................ 310. MSSP, 1 = . ACK Pulse, 1 = 166, 167. ........................................................ Control Registers (general) ......................................, 1 = . Module Overview",
    "PIC18F2X1X/4X1X\n..................................................... SPI Master/Slave Connection, 1 = 153 .................................. 157. SPI Mode. See SPI Mode., 1 = . SSPBUF ..................................................................., 1 = 158",
    "PIC18F2X1X/4X1X\n..................................................................... 158. SSPSR MULLW, 1 = 286. MULWF, 1 = ............................................................................ ............................................................................ 286.",
    "PIC18F2X1X/4X1X\nN, 1 = . NEGF, 1 = 287. ............................................................................... NOP ................................................................................., 1 = 287. O, 1 = . OPTION_REG Register, 1 = . PSA Bit, 1 =",
    "PIC18F2X1X/4X1X\n..................................................................... 117. T0CS Bit, 1 = ................................................................... 116. T0PS2:T0PS0 Bits, 1 = ................................................... 117. T0SE Bit",
    "PIC18F2X1X/4X1X\n..................................................................., 1 = 116. Oscillator Configuration, 1 = ...................................................... 25. EC, 1 = .............................................................................. 25. ECIO, 1 =",
    "PIC18F2X1X/4X1X\n.......................................................................... 25 25. HS .............................................................................. HSPLL, 1 = 25. ........................................................................ Internal Oscillator Block, 1",
    "PIC18F2X1X/4X1X\n= ............................................. 28. ......................................................................., 1 = . INTIO1, 1 = 25. INTIO2, 1 = ....................................................................... 25. LP",
    "PIC18F2X1X/4X1X\n..............................................................................., 1 = 25. RC .............................................................................., 1 = 25. RCIO, 1 =",
    "PIC18F2X1X/4X1X\n.......................................................................... 25 .............................................................................. 25. Oscillator Selection .........................................................., 1 = 239. Oscillator Start-up Timer (OST), 1 =",
    "PIC18F2X1X/4X1X\n................................... 33, 47",
    "PIC18F2X1X/4X1X\nOscillator Switching ..........................................................., 1 = 30. Oscillator Transitions, 1 = ......................................................... 31. Oscillator, Timer1 ....................................................., 1 = 119, 129. Oscillator, Timer3",
    "PIC18F2X1X/4X1X\n............................................................., 1 = 127",
    "P\nPackaging Information ....................................................., 1 = 353. Details (Diagrams), 1 = ................................................... 355. Marking, 1 = .................................................................... 353. Parallel Slave Port (PSP) ........................................., 1 = 106, 112. Associated Registers, 1",
    "P\n= ............................................... 113. CS (Chip Select), 1 = ...................................................... 112. PORTD, 1 = .................................................................... 112. RD (Read Input), 1 = ...................................................... 112. Select",
    "P\n(PSPMODE Bit), 1 = .................................... 106, 112. WR (Write Input), 1 = ...................................................... 112. PIE Registers Pin Functions, 1 = ..................................................................... 90. MCLR/VPP/RE3, 1 = ................................................... 15,",
    "P\n19. OSC1/CLKI/RA7, 1 = .................................................. 15, 19. OSC2/CLKO/RA6, 1 = ................................................ 15, 19. RA0/AN0, 1 = .............................................................. 16, 20. RA1/AN1, 1 =",
    "P\n.............................................................. 16, 20. RA2/AN2/VREF-/CVREF, 1 = ....................................... 16, 20. RA3/AN3/VREF+, 1 = .................................................. 16, 20. RA4/T0CKI/C1OUT, 1 = ............................................. 16, 20.",
    "P\nRA5/AN4/SS/HLVDIN/C2OUT, 1 = ............................ 16, 20. RB0/INT0/FLT0/AN12, 1 = ......................................... 17, 21. RB1/INT1/AN10, 1 = ................................................... 17, 21. RB2/INT2/AN8 ....................................................., 1 = 17, 21. RB3/AN9/CCP2, 1",
    "P\n= ................................................... 17, 21 17, 21. RB4/KBI0/AN11, 1 = .................................................... RB5/KBI1/PGM RB6/KBI2/PGC, 1 = .................................................... 17, 21 .................................................... 17, 21.",
    "P\nRB7/KBI3/PGD ...................................................., 1 = 17, 21. RC0/T1OSO/T13CKI ..........................................., 1 = 18, 22. RC1/T1OSI/CCP2, 1 = ............................................... 18, 22. RC2/CCP1, 1 =",
    "P\n................................................................. 18. RC2/CCP1/P1A, 1 = ......................................................... 22. RC3/SCK/SCL, 1 = ..................................................... 18, 22 18, 22. RC4/SDI/SDA, 1 =",
    "P\n...................................................... 18, 22. RC5/SDO ............................................................. RC6/TX/CK, 1 = .......................................................... 18, 22. RC7/RX/DT, 1 =",
    "P\n.......................................................... 18, 22. RD1/PSP1, 1 = ................................................................. 23. RD2/PSP2, 1 = ................................................................. 23. RD3/PSP3, 1 =",
    "P\n................................................................. 23. RD4/PSP4, 1 = ................................................................. 23. RD5/PSP5/P1B, 1 = ......................................................... 23. RD6/PSP6/P1C, 1 =",
    "P\n......................................................... 23. RD7/PSP7/P1D, 1 = ......................................................... 23. RE0/RD/AN5 ............................................................., 1 = 24. RE1/WR/AN6, 1 =",
    "P\n............................................................. 24. RE2/CS/AN7, 1 = .............................................................. 24. VDD, 1 = ...................................................................... 18, 24. VSS, 1 =",
    "P\n...................................................................... 18, 24. Pinout I/O Descriptions, 1 = . PIC18F2410/2510/2515/2610, 1 = ................................... 15. PIC18F4410/4510/4515/4610, 1 = ................................... 19. PIR Registers",
    "P\n....................................................................., 1 = 88. PLL Frequency Multiplier ..................................................., 1 = 27. HSPLL Oscillator Mode Use with INTOSC ......................................................, 1 = ............................................. 27 27. POP",
    "P\n................................................................................. POR. See Power-on Reset., 1 = 288",
    "PIC18F2X1X/4X1X\nPORTA Associated Registers, 1 = ................................................. 99. LATA Register, 1 = ............................................................ 97. PORTA Register, 1 = ........................................................ 97. TRISA Register, 1 =",
    "PIC18F2X1X/4X1X\n.......................................................... 97. PORTB, 1 = . Associated Registers, 1 = ............................................... 102. LATB Register .........................................................., 1 = 100. PORTB Register, 1 =",
    "PIC18F2X1X/4X1X\n...................................................... 100. RB7:RB4 Interrupt-on-Change Flag (RBIF Bit), 1 = ........ 100. TRISB Register, 1 = ........................................................ 100. PORTC, 1 = . Associated Registers, 1 = ............................................... 105. LATC Register, 1 =",
    "PIC18F2X1X/4X1X\n......................................................... 103. PORTC Register, 1 = ...................................................... 103. RC3/SCK/SCL Pin, 1 = ................................................... 167. TRISC Register",
    "PIC18F2X1X/4X1X\n........................................................, 1 = 103. PORTD, 1 = . Associated Registers, 1 = ............................................... 108. LATD Register, 1 = ......................................................... 106. Parallel Slave Port (PSP) Function, 1 = .......................... 106. PORTD Register, 1 =",
    "PIC18F2X1X/4X1X\n...................................................... 106. TRISD Register, 1 = ........................................................ 106. PORTE, 1 = . Associated Registers, 1 = ............................................... 111. LATE Register .........................................................., 1 = 109.",
    "PIC18F2X1X/4X1X\nPORTE Register, 1 = ...................................................... 109. PSP Mode Select (PSPMODE Bit), 1 = .......................... 106. Postscaler, WDT, 1 = . Assignment (PSA Bit), 1 = .............................................. 117. Rate Select (T0PS2:T0PS0 Bits) ............................., 1 = 117. Switching Between Timer0 and WDT, 1 =",
    "PIC18F2X1X/4X1X\n...................... 117. Power Managed Modes, 1 = ..................................................... 35. and A/D Operation, 1 = ................................................... 220. and EUSART Operation ..........................................., 1 = 197. and Multiple Sleep Commands, 1 = .................................. 36. and",
    "PIC18F2X1X/4X1X\nPWM Operation, 1 = ................................................ 151. and SPI Operation, 1 = ................................................... 161. Clock Sources ............................................................, 1 = 35 36. Clock Transitions and Status Indicators Clock Sources ..........................................., 1 =",
    "PIC18F2X1X/4X1X\n..................... 33. Effects on, 1 = . Entering ...................................................................... Exiting Idle and Sleep Modes, 1 = 35 .................................... 41. by Interrupt ........................................................., 1 = 41. by Reset",
    "PIC18F2X1X/4X1X\n............................................................., 1 = 41. by WDT Time-out ..............................................., 1 = 41. Without a Start-up Delay, 1 = .................................... 42 39. Idle Modes ................................................................., 1 = .",
    "PIC18F2X1X/4X1X\nPRI_IDLE, 1 = ........................................................... 40. RC_IDLE, 1 = ............................................................ 41. SEC_IDLE, 1 = .......................................................... 40. Run Modes",
    "PIC18F2X1X/4X1X\n................................................................., 1 = 36. PRI_RUN, 1 = 36. RC_RUN ............................................................, 1 = ........................................................... 37. SEC_RUN, 1 =",
    "PIC18F2X1X/4X1X\n.......................................................... 36. Selecting ...................................................................., 1 = 35. Sleep Mode ................................................................ Summary (table), 1 = 39.",
    "PIC18F2X1X/4X1X\n........................................................ Power-on Reset (POR), 1 = 35 45. ...................................................... Power-up Timer (PWRT), 1 = ........................................... 47. Time-out Sequence ...................................................., 1 = 47. Power-up",
    "PIC18F2X1X/4X1X\nDelays ................................................................, 1 = 33. Power-up Timer (PWRT) Prescaler, 1 = .................................................... 33",
    "PIC18F2X1X/4X1X\nTimer2, 1 = ..................................................................... 142. Prescaler, Timer0, 1 = ............................................................ 117. Assignment (PSA Bit), 1 = .............................................. 117. Rate Select (T0PS2:T0PS0 Bits), 1 =",
    "PIC18F2X1X/4X1X\n............................. 117. Switching Between Timer0 and WDT, 1 = ...................... 117. Prescaler, Timer2, 1 = ............................................................ 137. PRI_IDLE Mode, 1 = ................................................................. 40. PRI_RUN Mode, 1 =",
    "PIC18F2X1X/4X1X\n................................................................. 36. Program Counter, 1 = ............................................................... 56. PCL, PCH and PCU Registers, 1 = .................................. 56. PCLATH and PCLATU Registers, 1 = .............................. 56. Program Memory, 1 = . and Extended Instruction Set, 1 =",
    "PIC18F2X1X/4X1X\n.................................... 75. Code Protection, 1 = ....................................................... 255. Instructions, 1 = ................................................................ 60. Two-Word, 1 = .......................................................... 60. Interrupt Vector, 1 =",
    "PIC18F2X1X/4X1X\n.......................................................... 55. Look-up Tables .........................................................., 1 = 58. Map and Stack (diagram), 1 = .......................................... 55. Reset Vector, 1 =",
    "PIC18F2X1X/4X1X\n.............................................................. 55. Program Verification and Code Protection, 1 = ...................... 253. Associated Registers ..............................................., 1 = 254. Programming, Device Instructions, 1 = ................................... 259. PSP. See Parallel Slave Port. See, 1 = . PWM (ECCP Module). PUSH",
    "PIC18F2X1X/4X1X\n............................................................................... .............................................., 1 = 288. PUSH and POP Instructions, 1 = 57. PUSHL, 1 = ............................................................................. 304. PWM (CCP Module), 1 = . Associated Registers, 1 =",
    "PIC18F2X1X/4X1X\n............................................... 138. Auto-Shutdown (CCP1 only) ...................................., 1 = 137. CCPR1H:CCPR1L Registers ..................................., 1 = 141. Duty Cycle ......................................................., 1 = 136, 142. Example Frequencies/Resolutions, 1 = .................. 137, 142. Period",
    "PIC18F2X1X/4X1X\n.............................................................., 1 = 136, 141. Setup for PWM Operation, 1 = ........................................ 137 136, 141. TMR2 to PR2 Match, 1 = ......................................... PWM (ECCP Module), 1 = ...................................................... 141. Associated",
    "PIC18F2X1X/4X1X\nRegisters, 1 = ............................................... 152. Direction Change in Full-Bridge Output Mode, 1 = ......... 146. Effects of a Reset ...................................................., 1 = 151. Enhanced PWM Auto-Shutdown, 1 = ............................. 148. Full-Bridge Application Example, 1 = .............................. 146. Full-Bridge Mode, 1 =",
    "PIC18F2X1X/4X1X\n..................................................... 145. Half-Bridge Mode, 1 = ..................................................... 144. Half-Bridge Output Mode Applications Example, 1 = ...... 144. Operation in Power Managed Modes, 1 = ...................... 151. Operation with Fail-Safe Clock Monitor, 1 = ................... 151. Output Configurations",
    "PIC18F2X1X/4X1X\n.............................................., 1 = 142. Output Relationships (Active-High), 1 = .......................... 143. Output Relationships (Active-Low), 1 = .......................... 143. Programmable Dead-Band Delay, 1 = ............................ 148. Setup for PWM Operation ........................................, 1 = 151. Start-up Considerations",
    "PIC18F2X1X/4X1X\n..........................................., 1 = 150. Q, 1 = . Q Clock, 1 = .................................................................... 137, 142",
    "R\nRAM. See Data Memory., 1 = . RBIF Bit ..........................................................................., 1 = 100. RC Oscillator, 1 = ...................................................................... 27. RCIO Oscillator Mode, 1 = ................................................ 27. RC_IDLE Mode, 1 =",
    "R\n.................................................................. 41. RC_RUN Mode, 1 = .................................................................. 37",
    "R\nRCALL, 1 = ............................................................................. 289. RCON Register Bit Status During Initialization, 1 = .................................... 50. Reader Response ............................................................, 1 = 376. Register File, 1 =",
    "R\n....................................................................... 65. Registers, 1 = . ADCON0 (A/D Control 0), 1 = ......................................... 213. ADCON1 (A/D Control 1), 1 = ......................................... 214. ADCON2 (A/D Control 2) ........................................., 1 = 215. BAUDCON (Baud Rate Control)",
    "R\n.............................., 1 = 196. CCP1CON (Enhanced Capture/Compare/PWM Control 1) ........................................................., 1 = 139. CCPxCON (Standard Capture/Compare/PWM, 1 = Control). CMCON (Comparator Control), 1 = ................................ 223. CONFIG1H (Configuration 1 High), 1 = .......................... 240. CONFIG2H (Configuration 2 High), 1 =",
    "R\n.......................... 242. CONFIG2L (Configuration 2 Low), 1 = ............................ 241. CONFIG3H (Configuration 3 High), 1 = .......................... 243. CONFIG4L (Configuration 4 Low), 1 = ............................ 243. CONFIG5H (Configuration 5 High), 1 = .......................... 244. CONFIG5L (Configuration 5 Low), 1 = ............................ 244. CONFIG6H (Configuration 6 High), 1 =",
    "R\n.......................... 245. CONFIG6L (Configuration 6 Low), 1 = ............................ 245. CONFIG7H (Configuration 7 High), 1 = .......................... 246. CONFIG7L (Configuration 7 Low), 1 = ............................ 246. CVRCON (Comparator Voltage Reference Control), 1 = 229. Device ID Register 1 ................................................ Device ID Register 2",
    "R\n................................................, 1 = 247 247. ECCP1AS (ECCP Auto-Shutdown Control), 1 = ............. 149. HLVDCON (HLVD Control), 1 = ...................................... 233. INTCON (Interrupt Control) ........................................, 1 = 85. INTCON2 (Interrupt Control 2), 1 = ................................... 86. INTCON3 (Interrupt Control 3), 1 = 87.",
    "R\n................................... IPR1 (Peripheral Interrupt Priority 1) 2), 1 = .......................... 92. IPR2 (Peripheral Interrupt Priority, 1 = .......................... 93. OSCCON (Oscillator Control) ...................................., 1 = 32. OSCTUNE (Oscillator Tuning), 1 = 29. ................................... PIE1 (Peripheral Interrupt Enable 1), 1 = .......................... 90.",
    "R\nPIE2 (Peripheral Interrupt Enable 2) .........................., 1 = 91. PIR1 (Peripheral Interrupt Request (Flag) 1) 2), 1 = ............. 88. PIR2 (Peripheral Interrupt Request (Flag) ............................, 1 = ............. 89. PWM1CON (PWM Configuration), 1 = 148 44, 94. RCON (Reset Control) ......................................... RCSTA (Receive Status and Control), 1 = 195. ...................... SSPCON1 (MSSP Control 1, I 2 C Mode), 1 =",
    "R\n................. 164. SSPCON1 (MSSP Control 1, SPI Mode) 2, 1 = ................. 155. SSPCON2 (MSSP Control 2, I C Mode) 2 ......................., 1 = ................. 165 163. SSPSTAT (MSSP Status, I C Mode) Mode), 1 = . SSPSTAT (MSSP Status, SPI ........................................................................., 1 = ...................... 154. Status STKPTR (Stack Pointer),",
    "R\n1 = 70 ............................................ 57. T0CON (Timer0 Control), 1 = .......................................... 115. T1CON (Timer1, 1 = .......................................... 119. Control) T2CON (Timer 2 Control), 1 = 125. T3CON (Timer3 Control), 1 = . .........................................",
    "R\n.......................................... TRISE (PORTE/PSP, 1 = 127 110. Control) .................................. TXSTA (Transmit Status and, 1 = 194. Control) Timer Control), 1 = ..................... 249. WDTCON (Watchdog RESET ............................................................................., 1 = ...................... 289. State of Registers, 1 = 50. Reset, 1",
    "R\n= .................................................... 43, 239. Resets ........................................................................, 1 = ........................................... 239 ................................ Brown-out Reset (BOR) Oscillator Start-up Timer (OST), 1 = 239.",
    "R\n............................................, 1 = . Reset (POR), 1 = . Power-on, 1 = 239",
    "PIC18F2X1X/4X1X\nPower-up Timer, 1 = (PWRT) ......................................... 239. RETFIE, 1 = ............................................................................ 290. RETLW, 1 = ............................................................................ 290. RETURN",
    "PIC18F2X1X/4X1X\n.........................................................................., 1 = 291. Return Address Stack, 1 = ........................................................ 56. Return Stack Pointer (STKPTR), 1 = ........................................ 57. Revision History, 1 =",
    "PIC18F2X1X/4X1X\n............................................................... 361. RLCF, 1 = ............................................................................... 291. RLNCF, 1 = ............................................................................. 292. RRCF",
    "PIC18F2X1X/4X1X\n..............................................................................., 1 = 292. RRNCF, 1 = ............................................................................ 293. S, 1 = . SCK, 1 =",
    "PIC18F2X1X/4X1X\n................................................................................. 153. SDI, 1 = ................................................................................... 153. SDO",
    "PIC18F2X1X/4X1X\n................................................................................., 1 = 153. SEC_IDLE Mode, 1 = ............................................................... 40. SEC_RUN Mode, 1 = ................................................................ 36. Serial Clock, SCK, 1 =",
    "PIC18F2X1X/4X1X\n............................................................ 153. Serial Data In (SDI), 1 = .......................................................... 153. Serial Data Out (SDO), 1 = ..................................................... 153. Serial Peripheral Interface. See SPI Mode., 1 = . SETF, 1 =",
    "PIC18F2X1X/4X1X\n............................................................................... 293. Single-Supply ICSP Programming., 1 = . Slave Select (SS), 1 = ............................................................. 153. SLEEP, 1 = 294. Sleep, 1 =",
    "PIC18F2X1X/4X1X\n.............................................................................. OSC1 and OSC2 Pin States, 1 = ...................................... 33. Software Simulator (MPLAB SIM) ................................... Mode)., 1 = 311. Special Event Trigger. See Compare (ECCP See Compare (ECCP, 1 = . Special Event Trigger. Special Features of the CPU, 1 = Module).",
    "PIC18F2X1X/4X1X\n........................................... 239. Special Function Registers ................................................, 1 = 66. Map ............................................................................, 1 = 66. SPI Mode (MSSP), 1 = . Associated Registers, 1 =",
    "PIC18F2X1X/4X1X\n............................................... 161. Bus Mode Compatibility, 1 = ........................................... 161. Effects of a Reset, 1 = .................................................... 161. Enabling SPI I/O, 1 = ...................................................... 157. Master Mode, 1 =",
    "PIC18F2X1X/4X1X\n............................................................ 158. Master/Slave Connection ........................................, 1 = 157. Operation, 1 = ................................................................. 156. Operation in Power Managed Modes, 1 = ...................... 161. Serial Clock, 1 =",
    "PIC18F2X1X/4X1X\n............................................................. 153. Serial Data In, 1 = ........................................................... 153. Serial Data Out, 1 = ........................................................ 153. Slave Mode, 1 =",
    "PIC18F2X1X/4X1X\n.............................................................. 159. Slave Select ............................................................., 1 = 153. Slave Select Synchronization, 1 = .................................. 159. SPI Clock",
    "PIC18F2X1X/4X1X\n................................................................., 1 = 158. Typical Connection, 1 = .................................................. 157. SS .................................................................................... SSPOV",
    "PIC18F2X1X/4X1X\n............................................................................, 1 = 153 183. SSPOV Status Flag SSPSTAT Register, 1 = ......................................................... 183. R/W Bit, 1 = ............................................................ 166, 167. Stack Full/Underflow Resets",
    "PIC18F2X1X/4X1X\n.............................................., 1 = 58. SUBFSR, 1 = .......................................................................... 305. SUBFWB, 1 = ......................................................................... 294. SUBLW",
    "PIC18F2X1X/4X1X\n............................................................................, 1 = 295. SUBULNK ............................................................................, 1 = ........................................................................ 305 295. SUBWF, 1 =",
    "PIC18F2X1X/4X1X\n296. SUBWFB, 1 = .........................................................................\nSWAPF ............................................................................ 296",
    "T\nTable Pointer Operations (table) ........................................, 1 = 78. Table Reads/Table Writes .................................................. ............................................................................., 1 = 58. TBLRD, 1 = 297. TBLWT",
    "T\n............................................................................., 1 = 298. Time-out in Various Situations (table), 1 = ................................ 47. Timer0 .............................................................................., 1 = 115. 16-Bit Mode Timer Reads and Writes, 1 = ...................... 116. Associated Registers",
    "T\n..............................................., 1 = 117. Clock Source Edge Select (T0SE Bit), 1 = ...................... 116. Clock Source Select (T0CS Bit) Operation ................................................................., 1 = ............................... 116 116. Overflow Interrupt",
    "T\n...................................................., 1 = 117. , 1 = 117. Prescaler .................................................................., 1 = . Prescaler. See Prescaler, Timer0., 1 = . Timer1 .............................................................................., 1 = 119. 16-Bit Read/Write Mode, 1 =",
    "T\n........................................... 121. Associated Registers ..............................................., 1 = 123. Interrupt ...................................................................., 1 = 122. Operation ................................................................., 1 = 120. Oscillator",
    "T\n.........................................................., 1 = 119, 121. Oscillator Layout Considerations, 1 = ............................. 122. Overflow Interrupt ...................................................., 1 = 119. Resetting, Using the CCP Special Event Trigger, 1 = ..... 122. Special Event Trigger (ECCP), 1 = ................................. 140. TMR1H Register",
    "T\n......................................................, 1 = 119. TMR1L Register ......................................................., 1 = 119. Timer2 .............................................................................., 1 = 125. Associated Registers",
    "T\n..............................................., 1 = 126. Interrupt ...................................................................., 1 = 126. Operation ................................................................., 1 = 125. Output, 1 =",
    "T\n...................................................................... 126. PR2 Register ...................................................., 1 = 136, 141. TMR2 to PR2 Match Interrupt .........................., 1 = 136, 141. Timer3",
    "T\n.............................................................................., 1 = 127. 16-Bit Read/Write Mode, 1 = ........................................... 129. Associated Registers ..............................................., 1 = 129 128. Operation",
    "T\n................................................................. Oscillator .........................................................., 1 = 127, 129. Overflow Interrupt ............................................, 1 = 127, 129. Special Event Trigger (CCP), 1 = .................................... 129. TMR3H Register",
    "T\n......................................................, 1 = 127. TMR3L Register ......................................................., 1 = 127. Timing Diagrams, 1 = . A/D Conversion ........................................................, 1 = 350. Acknowledge Sequence, 1 = .......................................... 186. Asynchronous Reception, 1 =",
    "T\n......................................... 205. Asynchronous Transmission, 1 = .................................... 203. Asynchronous Transmission (Back to Back), 1 = ........... 203. Automatic Baud Rate Calculation ............................, 1 = 201. Auto-Wake-up Bit (WUE) During Normal Operation, 1 = 206. Auto-Wake-up Bit (WUE) During Sleep, 1 = ................... 206. Baud Rate Generator with Clock Arbitration, 1 = ............ 180. BRG Overflow Sequence, 1 =",
    "T\n......................................... 201. BRG Reset Due to SDA Arbitration During Start, 1 = Condi-. tion, 1 = ................................................................... 189. Brown-out Reset (BOR), 1 = ........................................... 336. Bus Collision During a Repeated Start Condition, 1 = (Case. 1)",
    "T\n...................................................................... Bus Collision During a Repeated Start Condition, 1 = 190 (Case. 2) ......................................................................, 1 = 190. Bus Collision During a Start Condition (SCL = 0), 1 = .... 189. Bus Collision During a Start Condition (SDA only) Bus Collision During a Stop Condition (Case 1), 1 = .. 188 ...... 191",
    "T\nBus Collision During a Stop Condition (Case 2) .........., 1 = ...... 191. Bus Collision for Transmit and Acknowledge, 1 = 187. Capture/Compare/PWM (CCP) ..............................., 1 = 338. CLKO and I/O .........................................................., 1 = 335. Clock Synchronization ............................................., 1 = 173. Clock/Instruction Cycle, 1 =",
    "T\n.............................................. 59. Example SPI Master Mode (CKE = 0), 1 = ..................... 340. Example SPI Master Mode (CKE = 1), 1 = ..................... 341. Example SPI Slave Mode (CKE = 0), 1 = ....................... 342. Example SPI Slave Mode (CKE = 1), 1 = ....................... 343. External Clock (All Modes except PLL), 1 = ................... 333. Fail-Safe Clock Monitor",
    "T\n..........................................., 1 = 252. First Start Bit Timing ................................................, 1 = 181. Full-Bridge PWM Output .........................................., 1 = 145. Half-Bridge PWM Output ........................................., 1 = 144. High/Low-Voltage Detect Characteristics, 1 = ................ 330. High-Voltage Detect (VDIRMAG = 1), 1 =",
    "T\n...................... 236. I 2 C Bus Data ............................................................, 1 = 344. I 2 C Bus Start/Stop Bits ............................................, 1 = 344. I 2 C Master Mode (7 or 10-Bit Transmission), 1 = ........... 184. I 2 C Master Mode (7-Bit Reception), 1 = .......................... 185. I 2 C Slave Mode (10-Bit Reception, SEN = 0), 1 = .......... 170. I 2 C",
    "T\nSlave Mode (10-Bit Reception, SEN = 1) ...................., 1 = .......... 175. I 2 C Slave Mode (10-Bit Transmission), 1 = 171. 2 C Slave Mode (7-Bit Reception, SEN =, 1 = ............ 168. I 0) I 2 C Slave Mode (7-Bit Reception, SEN = 1), 1 = 174. I 2 C Slave Mode (7-Bit Transmission) ...................... 2, 1 = ............ 169. I C Slave Mode General Call Address Sequence ......................................, 1 = (7 or. 10-Bit Address Mode) 2, 1 = 176. I C Stop Condition Receive or Transmit Mode Low-Voltage Detect (VDIRMAG = 0)",
    "T\n......................., 1 = ........ 186 235. 2 ........................................, 1 = . Master SSP I C Bus Data 2, 1 = 346. Master SSP I C Bus Start/Stop Bits Parallel Slave Port (PIC18F4410/4510/4515/4610), 1 = ........................ 346 . 339. Parallel Slave Port (PSP) Read, 1 = ............................... 113. Parallel Slave Port (PSP) Write, 1 = ............................... 113. PWM Auto-Shutdown (PRSEN",
    "T\n= 0, Auto-Restart Disabled) .................................... PWM Auto-Shutdown (PRSEN = 1,, 1 = 150. Auto-Restart Enabled) ..................................... PWM Direction Change ..........................................., 1 = 150 147. PWM Direction Change at Near 100% Duty Cycle, 1 = .. 147. PWM Output ............................................................, 1 = 136. Repeat Start Condition",
    "T\n............................................, 1 = 182. Reset, Watchdog Timer (WDT), Oscillator Start-up (OST), Power-up Timer (PWRT) ....................., 1 = Timer. Send Break Character Sequence, 1 = 336. , 1 = 207. Slave Synchronization, 1 = ............................ 159. ............................................. Slow Rise Time (MCLR Tied to VDD, VDD Rise >, 1 = TPWRT).",
    "T\n............................................................................ SPI Mode (Master Mode) ......................................... ..........................., 1 = 49 158. SPI Mode (Slave Mode, CKE =, 1 = 160. 0) SPI Mode (Slave Mode, CKE = 1), 1 = ........................... 160. Synchronous Reception (Master Mode, SREN) Synchronous Transmission",
    "T\n....................................., 1 = ...... 210 208. Synchronous Transmission (Through TXEN) .......... Time-out Sequence on PORw/PLL Enabled, 1 = 209. (MCLRTied to VDD) ..............................................................., 1 = 49. Time-out Sequence on Power-up (MCLR Not Tied, 1 = 48. to VDD, Case 1) ................................................., 1 = . Time-out Sequence on Power-up (MCLR Not Tied to",
    "T\nVDD, Case 2) ................................................. to, 1 = 48. Time-out Sequence on Power-up (MCLR Tied VDD Rise < TPWRT) ............................................ .........................., 1 = VDD, 48. Timer0 and Timer1 External Clock, 1 = . , 1 = 337",
    "T\nTransition for Entry to Idle Mode, 1 = ................................ 40. Transition for Entry to SEC_RUN Mode ...................., 1 = 37. Transition for Entry to Sleep Mode ............................, 1 = 39. Transition for Two-Speed Start-up (INTOSC to HSPLL) 250 Transition for Wake from Idle to Run Mode ..............., 1 = 40. Transition for Wake from Sleep (HSPLL) ..................., 1 = 39. Transition from RC_RUN Mode to PRI_RUN Mode, 1 = .. 38. Transition from SEC_RUN Mode to PRI_RUN, 1 = Mode. (HSPLL)",
    "T\n............................................................., 1 = 37. Transition to RC_RUN Mode ....................................., 1 = 38. USART Synchronous Receive (Master/Slave) ........, 1 = 348. USART Synchronous Transmission (Master/Slave), 1 = 348. Timing Diagrams and Specifications ................................, 1 = 333. A/D Conversion Requirements ................................, 1 = 350. Capture/Compare/PWM (CCP) Requirements",
    "T\n........, 1 = 338. CLKO and I/O Requirements ................................... Example SPI Mode Requirements (Master, 1 = 335. Mode, CKE = 0) .......................................................... Example SPI Mode Requirements (Master Mode,, 1 = 340. CKE = 1) .......................................................... Example SPI Mode Requirements (Slave Mode, CKE = 0)",
    "T\n.........................................................., 1 = 341 342. Example SPI Mode Requirements (Slave Mode, CKE = 1) .........................................................., 1 = 343. External Clock Requirements .................................. 2 .............., 1 = 333 345. I C Bus Data Requirements (Slave Mode), 1 = . Master SSP I 2 C Bus Data Requirements ................, 1 = 347. Master SSP I 2 C Bus Start/Stop Bits",
    "T\n. Parallel Slave Port Requirements, 1 = 346. Requirements (PIC18F4410/4510/, 1 = . , 1 = 339. 4515/4610) ....................................................... PLL Clock ................................................................., 1 = 334. Reset, Watchdog Timer, Oscillator Start-up Timer, Pow- er-up Timer and Brown-out Reset Requirements, 1 = 337. USART Synchronous Transmission Requirements Top-of-Stack Access",
    "T\n.........................................................., 1 = 348 348. USART Synchronous Receive Requirements ......... ., 1 = . TRISE Register, 1 = . PSPMODE Bit TSTFSZ ..........................................................................., 1 = . Two-Speed ................................................., 1 = . Example TXSTA, 1 = . V Voltage Reference Specifications, 1 = 248. Control Register",
    "T\n....................................................... During Oscillator Failure, 1 = 248. .......................................... Programming .................................., 1 = 251. Considerations ......................................................, 1 = 248. 181, 182, 183,, 1 = 186. WCOL Status Flag 181, 182, 183,, 1 = . WWW, On-Line, 1 = . X, 1 = 8. XORLW, 1 =",
    "T\n. , 1 = 300. WWWAddress, 1 = . , 1 = 375. , 1 = 186. Support, 1 = . ................................................................., 1 = . ......................................................, 1 = . , 1 = 249. , 1 = 56. ..................................., 1 = .",
    "T\n.........................................................., 1 = . Two-Word Instructions Cases Register BRGH Bit ................................................................., 1 = . Start-up, 1 = . , 1 = 106. WCOL, 1 = . , 1 = 299. , 1 = 250. , 1 = 239,. , 1 = 329. , 1 = 197. , 1 = .......................................................... 60. , 1 =",
    "T\n..................................... , 1 = ................................................ , 1 = 299. , 1 = ............................................................................. , 1 = ............................................................................. , 1",
    "T\n= XORWF",
    "THE MICROCHIP WEB SITE\nMicrochip provides online support via our WWW site at www.microchip.com. This web site is used as a means to make  files and  information  easily available to customers. Accessible by using your favorite Internet browser, the web site contains the following information:\n\u00b7 Product Support - Data sheets and errata, application notes and sample programs, design resources, user's guides and hardware support documents, latest software releases and archived software\n\u00b7 General Technical Support - Frequently Asked Questions (FAQ), technical support requests, online discussion groups, Microchip consultant program member listing\n\u00b7 Business of Microchip - Product selector and ordering guides, latest Microchip press releases, listing of seminars and events, listings of Microchip sales offices, distributors and factory representatives",
    "CUSTOMER CHANGE NOTIFICATION SERVICE\nMicrochip's  customer  notification  service  helps  keep customers current on Microchip products. Subscribers will receive  e-mail  notification  whenever  there  are changes,  updates,  revisions  or  errata  related  to  a specified product family or development tool of interest.\nTo register, access the Microchip web site at www.microchip.com, click on Customer Change Notification and follow the registration instructions.",
    "CUSTOMER SUPPORT\nUsers  of  Microchip  products  can  receive  assistance through several channels:\n\u00b7 Distributor or Representative\n\u00b7 Local Sales Office\n\u00b7 Field Application Engineer (FAE)\n\u00b7 Technical Support\n\u00b7 Development Systems Information Line\nCustomers should contact their distributor, representative  or  field  application  engineer  (FAE)  for support. Local sales offices are also available to help customers.  A  listing  of  sales  offices  and  locations  is included in the back of this document.\nTechnical support is available through the web site at: http://support.microchip.com",
    "READER RESPONSE\nIt is our intention to provide you with the best documentation possible to ensure successful use of your Microchip product.  If you wish to provide your comments on organization, clarity, subject matter, and ways in which our documentation can better serve you, please FAX your comments to the Technical Publications Manager at (480) 792-4150.\nPlease list the following information, and use this outline to provide us with your comments about this document.\nTo:\nTechnical Publications Manager\nRE:\nReader Response\nTotal Pages Sent ________\nFrom:\nName\nCompany\nAddress\nCity / State / ZIP / Country\nTelephone: (_______) _________ - _________\nApplication (optional):\nWould you like a reply?       Y         N\nDevice:  PIC18F2X1X/4X1X\nLiterature Number:  DS39636D\nQuestions:\nFAX: (______) _________ - _________\n1. What are the best features of this document?\n2. How does this document meet your hardware and software development needs?",
    "READER RESPONSE\n3. Do you find the organization of this document easy to follow? If not, why?\n4. What additions to the document do you think would enhance the structure and subject?\n5. What deletions from the document could be made without affecting the overall usefulness?\n6. Is there any incorrect or misleading information (what and where)?\n7. How would you improve this document?",
    "PIC18F2X1X/4X1X PRODUCT IDENTIFICATION SYSTEM\nTo order or obtain information, e.g., on pricing or delivery, refer to the factory or the listed sales office.",
    "PIC18F2X1X/4X1X PRODUCT IDENTIFICATION SYSTEM\nDevice, X Temperature Range = PIC18F2410/2415/2510/2515/2610 (1) , PIC18F4410/4415/4510/4515/4610 (1) , PIC18F2410/2415/2510/2515/2610T (2) , PIC18F4410/4415/4510/4515/4610 T (2) ; VDD range 4.2V to 5.5V PIC18LF2410/2510/2515/2610 (1) , PIC18LF4410/4510/4515/4610 (1) , PIC18LF2410/2510/2515/2610T (2) , PIC18LF4410/4510/4515/4610T (2) ;. Device, /XX Package = PIC18F2410/2415/2510/2515/2610 (1) , PIC18F4410/4415/4510/4515/4610 (1) ,",
    "PIC18F2X1X/4X1X PRODUCT IDENTIFICATION SYSTEM\nPIC18F2410/2415/2510/2515/2610T (2) , PIC18F4410/4415/4510/4515/4610 T (2) ; VDD range 4.2V to 5.5V PIC18LF2410/2510/2515/2610 (1) , PIC18LF4410/4510/4515/4610 (1) , PIC18LF2410/2510/2515/2610T (2) , PIC18LF4410/4510/4515/4610T (2) ;. Device, XXX Pattern = PIC18F2410/2415/2510/2515/2610 (1) , PIC18F4410/4415/4510/4515/4610 (1) , PIC18F2410/2415/2510/2515/2610T (2) , PIC18F4410/4415/4510/4515/4610 T (2) ; VDD range 4.2V to 5.5V",
    "PIC18F2X1X/4X1X PRODUCT IDENTIFICATION SYSTEM\nPIC18LF2410/2510/2515/2610 (1) , PIC18LF4410/4510/4515/4610 (1) , PIC18LF2410/2510/2515/2610T (2) , PIC18LF4410/4510/4515/4610T (2) ;. Temperature Range, X Temperature Range = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Temperature Range, /XX Package = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Temperature Range, XXX Pattern = I = -40 \u00b0 C to +85 \u00b0 C (Industrial) E = -40 \u00b0 C to +125 \u00b0 C (Extended). Package, X Temperature Range = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Package, /XX Package = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny",
    "PIC18F2X1X/4X1X PRODUCT IDENTIFICATION SYSTEM\nPlastic DIP P = PDIP ML = QFN. Package, XXX Pattern = PT = TQFP (Thin Quad Flatpack) SO = SOIC SP = Skinny Plastic DIP P = PDIP ML = QFN. Pattern, X Temperature Range = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, /XX Package = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, XXX Pattern = QTP, SQTP, Code or Special Requirements (blank otherwise)",
    "Examples:\na) PIC18LF4510-I/P 301 = Industrial temp., PDIP package, Extended VDD limits, QTP pattern #301.\nb) PIC18LF2410-I/SO = Industrial temp., SOIC package, Extended VDD limits.\nc) PIC18F4410-I/P = Industrial temp., PDIP package, normal VDD limits.\nNote 1:\nF\n=\nStandard Voltage Range\nLF =\nWide Voltage Range\n2:\nT\n=\nin tape and reel TQFP packages only.",
    "AMERICAS\nCorporate Office 2355 West Chandler Blvd. Chandler, AZ  85224-6199 Tel:  480-792-7200 Fax:  480-792-7277 Technical Support: http://support.microchip.com Web Address: www.microchip.com\nAtlanta Duluth, GA Tel: 678-957-9614 Fax: 678-957-1455",
    "Boston\nWestborough, MA Tel: 774-760-0087 Fax: 774-760-0088",
    "Chicago\nItasca, IL\nTel: 630-285-0071\nFax: 630-285-0075\nCleveland Independence, OH Tel: 216-447-0464 Fax: 216-447-0643\nDallas Addison, TX Tel: 972-818-7423 Fax: 972-818-2924\nDetroit Farmington Hills, MI Tel: 248-538-2250 Fax: 248-538-2260\nKokomo Kokomo, IN Tel: 765-864-8360 Fax: 765-864-8387\nLos Angeles Mission Viejo, CA Tel: 949-462-9523 Fax: 949-462-9608\nSanta Clara Santa Clara, CA Tel: 408-961-6444 Fax: 408-961-6445\nToronto Mississauga, Ontario, Canada Tel: 905-673-0699 Fax:  905-673-6509",
    "ASIA/PACIFIC\nAsia Pacific Office Suites 3707-14, 37th Floor Tower 6, The Gateway Harbour City, Kowloon Hong Kong Tel: 852-2401-1200 Fax: 852-2401-3431\nAustralia - Sydney Tel: 61-2-9868-6733 Fax: 61-2-9868-6755\nChina - Beijing Tel: 86-10-8528-2100 Fax: 86-10-8528-2104\nChina - Chengdu Tel: 86-28-8665-5511 Fax: 86-28-8665-7889\nChina - Hong Kong SAR Tel: 852-2401-1200 Fax: 852-2401-3431\nChina - Nanjing Tel: 86-25-8473-2460 Fax: 86-25-8473-2470\nChina - Qingdao Tel: 86-532-8502-7355 Fax: 86-532-8502-7205\nChina - Shanghai Tel: 86-21-5407-5533 Fax: 86-21-5407-5066",
    "ASIA/PACIFIC\nChina - Shenyang Tel: 86-24-2334-2829 Fax: 86-24-2334-2393\nChina - Shenzhen Tel: 86-755-8203-2660 Fax: 86-755-8203-1760\nChina - Wuhan Tel: 86-27-5980-5300 Fax: 86-27-5980-5118\nChina - Xiamen Tel: 86-592-2388138 Fax: 86-592-2388130\nChina - Xian Tel: 86-29-8833-7252 Fax: 86-29-8833-7256\nChina - Zhuhai Tel: 86-756-3210040 Fax: 86-756-3210049\nIndia - Bangalore Tel: 91-80-3090-4444 Fax: 91-80-3090-4080\nIndia - New Delhi Tel: 91-11-4160-8631 Fax: 91-11-4160-8632",
    "India - Pune\nTel: 91-20-2566-1512 Fax: 91-20-2566-1513\nJapan - Yokohama Tel: 81-45-471- 6166 Fax: 81-45-471-6122",
    "Korea - Daegu\nTel: 82-53-744-4301\nFax: 82-53-744-4302\nKorea - Seoul Tel: 82-2-554-7200 Fax: 82-2-558-5932 or 82-2-558-5934",
    "Malaysia - Kuala Lumpur\nTel: 60-3-6201-9857\nFax: 60-3-6201-9859\nMalaysia - Penang Tel: 60-4-227-8870 Fax: 60-4-227-4068",
    "Philippines - Manila\nTel: 63-2-634-9065 Fax: 63-2-634-9069",
    "Singapore\nTel:  65-6334-8870 Fax: 65-6334-8850\nTaiwan - Hsin Chu Tel: 886-3-6578-300 Fax: 886-3-6578-370",
    "Taiwan - Kaohsiung\nTel: 886-7-536-4818\nFax: 886-7-536-4803\nTaiwan - Taipei Tel: 886-2-2500-6610 Fax: 886-2-2508-0102\nThailand - Bangkok Tel: 66-2-694-1351 Fax: 66-2-694-1350",
    "EUROPE\nAustria - Wels Tel: 43-7242-2244-39\nFax: 43-7242-2244-393 Denmark - Copenhagen Tel: 45-4450-2828 Fax: 45-4485-2829\nFrance - Paris Tel: 33-1-69-53-63-20 Fax: 33-1-69-30-90-79\nGermany - Munich Tel: 49-89-627-144-0 Fax: 49-89-627-144-44",
    "Italy - Milan\nTel: 39-0331-742611 Fax: 39-0331-466781",
    "Netherlands - Drunen\nTel: 31-416-690399 Fax: 31-416-690340\nSpain - Madrid Tel: 34-91-708-08-90 Fax: 34-91-708-08-91\nUK - Wokingham Tel: 44-118-921-5869 Fax: 44-118-921-5820",
    "Mouser Electronics\nAuthorized Distributor\nClick to View Pricing, Inventory, Delivery & Lifecycle Information:",
    "Microchip:\nPIC18F2410T-I/SO\u00a0 PIC18F4410-E/ML\u00a0 PIC18LF4610-I/P\u00a0 PIC18LF2515T-I/SO\u00a0 PIC18F2515-I/SO\u00a0 PIC18F2515-I/SP PIC18LF4510-I/PT\u00a0 PIC18F4410-I/P\u00a0 PIC18F4510-I/P\u00a0 PIC18F4610-I/P\u00a0 PIC18F4515-I/P\u00a0 PIC18F4510-E/P PIC18LF4510-I/ML\u00a0 PIC18LF2410T-I/ML\u00a0 PIC18LF2515-I/SO\u00a0 PIC18F4610-I/ML\u00a0 PIC18F4410-I/PT\u00a0 PIC18F4610-I/PT PIC18F4410-I/ML\u00a0 PIC18LF2515-I/SP\u00a0 PIC18F4510-I/PT\u00a0 PIC18LF4515-I/P\u00a0 PIC18LF4515-I/ML\u00a0 PIC18F2410-I/ML PIC18F2510-I/SO\u00a0 PIC18F2510-I/ML\u00a0 PIC18F2610-I/SO",
    "Microchip:\nPIC18F2610-I/SP\u00a0 PIC18F2410-I/SP\u00a0 PIC18F2410-I/SO PIC18LF4515-I/PT\u00a0 PIC18F2510-I/SP\u00a0 PIC18LF4410-I/P\u00a0 PIC18F4515-I/PT\u00a0 PIC18LF2510-I/ML\u00a0 PIC18LF2410-I/ML PIC18LF2510-I/SO\u00a0 PIC18LF2410-I/SO\u00a0 PIC18LF4510T-I/PT\u00a0 PIC18F4515-I/ML\u00a0 PIC18F4410T-I/PT\u00a0 PIC18LF4410-I/PT PIC18LF4610-I/PT"
]