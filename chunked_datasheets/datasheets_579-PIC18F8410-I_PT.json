[
    "PIC18F6310/6410/8310/8410 Data Sheet\n64/80-Pin Flash Microcontrollers with nanoWatt XLP Technology",
    "Note the following details of the code protection feature on Microchip devices:\n\u00b7 Microchip products meet the specification contained in their particular Microchip Data Sheet.\n\u00b7 Microchip believes that its family of products is one of the most secure families of its kind on the market today, when used in the intended manner and under normal conditions.\n\u00b7 There are dishonest and possibly illegal methods used to breach the code protection feature. All of these methods, to our knowledge, require using the Microchip products in a manner outside the operating specifications contained in Microchip's Data Sheets. Most likely, the person doing so is engaged in theft of intellectual property.\n\u00b7 Microchip is willing to work with the customer who is concerned about the integrity of their code.\n\u00b7 Neither Microchip nor any other semiconductor manufacturer can guarantee the security of their code. Code protection does not mean that we are guaranteeing the product as 'unbreakable.'",
    "Note the following details of the code protection feature on Microchip devices:\nCode protection is constantly evolving. We at Microchip are committed to continuously improving the code protection features of our products. Attempts to break Microchip's code protection feature may be a violation of the Digital Millennium Copyright Act. If such acts allow unauthorized access to your software or other copyrighted work, you may have a right to sue for relief under that Act.",
    "Note the following details of the code protection feature on Microchip devices:\nInformation  contained  in  this  publication  regarding  device applications and the like is provided only for your convenience and may be superseded by updates. It is your responsibility to ensure  that  your  application  meets  with  your  specifications. MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES  OF  ANY  KIND  WHETHER  EXPRESS  OR IMPLIED, WRITTEN OR ORAL, STATUTORY OR OTHERWISE, RELATED TO THE INFORMATION, INCLUDING  BUT  NOT  LIMITED  TO  ITS CONDITION, QUALITY, PERFORMANCE, MERCHANTABILITY OR FITNESS  FOR  PURPOSE . Microchip  disclaims  all  liability arising  from  this  information  and  its  use.  Use  of  Microchip devices in life support and/or safety applications is entirely at the buyer's risk, and the buyer agrees to defend, indemnify and hold  harmless  Microchip  from  any  and  all  damages,  claims, suits,  or  expenses  resulting  from  such  use.  No  licenses  are conveyed, implicitly or otherwise, under any Microchip intellectual property rights.",
    "Trademarks\nThe Microchip name and logo, the Microchip logo, dsPIC, KEELOQ, KEELOQ logo, MPLAB, PIC, PICmicro, PICSTART, PIC 32 logo, rfPIC and UNI/O are registered trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nFilterLab, Hampshire, HI-TECH C, Linear Active Thermistor, MXDEV, MXLAB, SEEVAL and The Embedded Control Solutions Company are registered trademarks of Microchip Technology Incorporated in the U.S.A.",
    "Trademarks\nAnalog-for-the-Digital Age, Application Maestro, CodeGuard, dsPICDEM, dsPICDEM.net, dsPICworks, dsSPEAK, ECAN, ECONOMONITOR, FanSense, HI-TIDE, In-Circuit Serial Programming, ICSP, Mindi, MiWi, MPASM, MPLAB Certified logo, MPLIB, MPLINK, mTouch, Omniscient Code Generation, PICC, PICC-18, PICDEM, PICDEM.net, PICkit, PICtail, REAL ICE, rfLAB, Select Mode, Total Endurance, TSHARC, UniWinDriver, WiperLock and ZENA are trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nSQTP is a service mark of Microchip Technology Incorporated in the U.S.A.\nAll other trademarks mentioned herein are property of their respective companies.\n\u00a9 2010, Microchip Technology Incorporated, Printed in the U.S.A., All Rights Reserved.\nPrinted on recycled paper.",
    "ISBN: 978-1-60932-582-4\nMicrochip received ISO/TS-16949:2002 certification for its worldwide headquarters, design and wafer fabrication facilities in Chandler and Tempe, Arizona; Gresham, Oregon and design centers in California and India. The Company's quality system processes and procedures are for its PIC \u00ae MCUs and dsPIC \u00ae  DSCs, KEELOQ \u00ae  code hopping devices, Serial EEPROMs, microperipherals, nonvolatile memory and analog products. In addition, Microchip's quality system for the design and manufacture of development systems is ISO 9001:2000 certified.\nQUALITY MANAGEMENT SYSTEM CERTIFIED BY DNV",
    "Peripheral Highlights (Continued):\n\u00b7 Run: CPU on, Peripherals on\n\u00b7 Idle: CPU off, Peripherals on\n\u00b7 Sleep: CPU off, Peripherals off\n\u00b7 Ultra Low 50 nA Input Leakage\n\u00b7 Idle mode Currents Down to 2.3 \uf06d A Typical\n\u00b7 Ultra Low 50 nA Input Leakage\n\u00b7 Sleep mode Currents Down to 0.1 \uf06d A Typical\n\u00b7 Timer1 Oscillator: 1.0 \uf06d A, 32 kHz, 2V Typical\n\u00b7 Watchdog Timer: 1.7 \uf06d A Typical\n\u00b7 Two-Speed Oscillator Start-up",
    "Flexible Oscillator Structure:\n\u00b7 Four Crystal modes up to 40 MHz\n\u00b7 4x Phase Lock Loop (available for crystal and internal oscillators)\n\u00b7 Two External RC modes, up to 4 MHz\n\u00b7 Two External Clock modes, up to 40 MHz\n\u00b7 Internal Oscillator Block:\n-Fast wake from Sleep and Idle, 1 \uf06d s typical\n-8 user-selectable frequencies, from 31 kHz to 8 MHz\n-Provides a complete range of clock speeds, from 31 kHz to 32 MHz, when used with PLL\n-User-tunable to compensate for frequency drift\n\u00b7 Secondary Oscillator using Timer1 @ 32 kHz\n\u00b7 Fail-Safe Clock Monitor:\n-Allows for safe shutdown if peripheral clock stops",
    "External Memory Interface (PIC18F8310/8410 Devices only):\n\u00b7 Address Capability of up to 2 Mbytes\n\u00b7 16-Bit/8-Bit Interface",
    "Peripheral Highlights:\n\u00b7 High-Current Sink/Source 25 mA/25 mA\n\u00b7 Four External Interrupts\n\u00b7 Four Input Change Interrupts\n\u00b7 Four 8-Bit/16-Bit Timer/Counter modules\n\u00b7 Up to 3 Capture/Compare/PWM (CCP) modules\n\u00b7 Master Synchronous Serial Port (MSSP) module Supporting 3-Wire SPI (all 4 modes) and I 2 C\u2122 Master and Slave modes\n\u00b7 Addressable USART module:\n-Supports RS-485 and RS-232\n\u00b7 Enhanced Addressable USART module:\n-Supports RS-485, RS-232 and LIN/J2602\n-Auto-Wake-up on Start bit\n-Auto-Baud Detect\n\u00b7 10-Bit, up to 12-Channel Analog-to-Digital (A/D) Converter module:\n-Auto-acquisition capability\n-Conversion available during Sleep\n\u00b7 Dual Analog Comparators with Input Multiplexing\n\u00b7 Programmable 16-Level High/Low-Voltage Detection (HLVD) module:\n-Supports interrupt on High/Low-Voltage Detection",
    "Peripheral Highlights:\nPIC18F6310, Program Memory (On-Board/External).Flash (bytes) = 8K/0. PIC18F6310, Program Memory (On-Board/External).# Single-Word Instructions = 4096/0. PIC18F6310, Data Memory SRAM.(bytes) = 768. PIC18F6310, I/O.I/O = 54. PIC18F6310, 10-Bit A/D (ch).10-Bit A/D (ch) = 12. PIC18F6310, CCP (PWM).CCP (PWM) = 3. PIC18F6310, MSSP.SPI = Y. PIC18F6310, MSSP.Master I 2 C\u2122 = Y. PIC18F6310, EUSART/ AUSART.EUSART/ AUSART = 1/1. PIC18F6310, Comparators.Comparators = 2. PIC18F6310, Timers 8/16-Bit.Timers 8/16-Bit = 1/3.",
    "Peripheral Highlights:\nPIC18F6310, Ext. Bus.Ext. Bus = N. PIC18F6410, Program Memory (On-Board/External).Flash (bytes) = 16K/0. PIC18F6410, Program Memory (On-Board/External).# Single-Word Instructions = 8192/0. PIC18F6410, Data Memory SRAM.(bytes) = 768. PIC18F6410, I/O.I/O = 54. PIC18F6410, 10-Bit A/D (ch).10-Bit A/D (ch) = 12. PIC18F6410, CCP (PWM).CCP (PWM) = 3. PIC18F6410, MSSP.SPI = Y. PIC18F6410, MSSP.Master I 2 C\u2122 = Y. PIC18F6410, EUSART/ AUSART.EUSART/ AUSART = 1/1. PIC18F6410, Comparators.Comparators = 2. PIC18F6410, Timers 8/16-Bit.Timers 8/16-Bit =",
    "Peripheral Highlights:\n1/3. PIC18F6410, Ext. Bus.Ext. Bus = N. PIC18F8310, Program Memory (On-Board/External).Flash (bytes) = 8K/2M. PIC18F8310, Program Memory (On-Board/External).# Single-Word Instructions = 4096/1M. PIC18F8310, Data Memory SRAM.(bytes) = 768. PIC18F8310, I/O.I/O = 70. PIC18F8310, 10-Bit A/D (ch).10-Bit A/D (ch) = 12. PIC18F8310, CCP (PWM).CCP (PWM) = 3. PIC18F8310, MSSP.SPI = Y. PIC18F8310, MSSP.Master I 2 C\u2122 = Y. PIC18F8310, EUSART/ AUSART.EUSART/ AUSART = 1/1. PIC18F8310, Comparators.Comparators = 2. PIC18F8310,",
    "Peripheral Highlights:\nTimers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F8310, Ext. Bus.Ext. Bus = Y. PIC18F8410, Program Memory (On-Board/External).Flash (bytes) = 16K/2M. PIC18F8410, Program Memory (On-Board/External).# Single-Word Instructions = 8192/1M. PIC18F8410, Data Memory SRAM.(bytes) = 768. PIC18F8410, I/O.I/O = 70. PIC18F8410, 10-Bit A/D (ch).10-Bit A/D (ch) = 12. PIC18F8410, CCP (PWM).CCP (PWM) = 3. PIC18F8410, MSSP.SPI = Y. PIC18F8410, MSSP.Master I 2 C\u2122 = Y. PIC18F8410, EUSART/ AUSART.EUSART/ AUSART = 1/1. PIC18F8410,",
    "Peripheral Highlights:\nComparators.Comparators = 2. PIC18F8410, Timers 8/16-Bit.Timers 8/16-Bit = 1/3. PIC18F8410, Ext. Bus.Ext. Bus = Y",
    "Special Microcontroller Features:\n\u00b7 C Compiler Optimized Architecture:\n-Optional extended instruction set designed to optimize re-entrant code\n\u00b7 1000 Erase/Write Cycle Flash Program Memory Typical\n\u00b7 Flash Retention: 100 Years Typical\n\u00b7 Priority Levels for Interrupts\n\u00b7 8 x 8 Single-Cycle Hardware Multiplier\n\u00b7 Extended Watchdog Timer (WDT):\n-Programmable period from 4 ms to 131s\n-2% stability over VDD and temperature\n\u00b7 In-Circuit Serial Programming\u2122 (ICSP\u2122) via Two Pins\n\u00b7 In-Circuit Debug (ICD) via Two Pins\n\u00b7 Wide Operating Voltage Range: 2.0V to 5.5V\n\u00b7 Programmable Brown-out Reset (BOR) with Software Enable Option",
    "Table of Contents\n1.0, 1 = Device Overview ........................................................................................................................................................................... 1.0, 2 = 9. 2.0, 1 = Guidelines for Getting Started with PIC18F Microcontrollers",
    "Table of Contents\n...................................................................................................... 2.0, 2 = 31. 3.0, 1 = Oscillator Configurations",
    "Table of Contents\n............................................................................................................................................................. 3.0, 2 = 35. 4.0, 1 = Power-Managed Modes",
    "Table of Contents\n.............................................................................................................................................................. 4.0, 2 = 45. 5.0, 1 =",
    "Table of Contents\nReset........................................................................................................................................................................................... 5.0, 2 = 55. 6.0, 1 = Memory",
    "Table of Contents\nOrganization.................................................................................................................................................................. 6.0, 2 = 67. 7.0, 1 = Program",
    "Table of Contents\nMemory......................................................................................................................................................................... 7.0, 2 = 89. 8.0, 1 = External Memory Interface",
    "Table of Contents\n.......................................................................................................................................................... 8.0, 2 = 95. 9.0, 1 = 8 x 8 Hardware",
    "Table of Contents\nMultiplier........................................................................................................................................................... 9.0, 2 = 107. 10.0, 1 = Interrupts",
    "Table of Contents\n................................................................................................................................................................................... 10.0, 2 = 109. 11.0, 1 = I/O Ports",
    "Table of Contents\n.................................................................................................................................................................................... 11.0, 2 = 125. 12.0, 1 = Timer0 Module",
    "Table of Contents\n.......................................................................................................................................................................... 12.0, 2 = 151. 13.0, 1 = Timer1 Module",
    "Table of Contents\n.......................................................................................................................................................................... 13.0, 2 = 155. 14.0, 1 = Timer2 Module",
    "Table of Contents\n.......................................................................................................................................................................... 14.0, 2 = 161. 15.0, 1 = Timer3 Module",
    "Table of Contents\n.......................................................................................................................................................................... 15.0, 2 = 163. 16.0, 1 = Capture/Compare/PWM (CCP) Modules",
    "Table of Contents\n.................................................................................................................................. 16.0, 2 = 167. 17.0, 1 = Master Synchronous Serial Port (MSSP) Module",
    "Table of Contents\n..................................................................................................................... 17.0, 2 = 177. 18.0, 1 = Enhanced Universal Synchronous Asynchronous Receiver Transmitter (EUSART)................................................................ 18.0, 2 = 217. 19.0, 1 = Addressable Universal Synchronous Asynchronous Receiver Transmitter (AUSART)",
    "Table of Contents\n............................................................ 19.0, 2 = 241. 20.0, 1 = 10-Bit Analog-to-Digital Converter (A/D) Module ...................................................................................................................... 20.0, 2 = 255. 21.0, 1 = Comparator",
    "Table of Contents\nModule................................................................................................................................................................... 21.0, 2 = 265. 22.0, 1 = Comparator Voltage Reference",
    "Table of Contents\nModule.................................................................................................................................... 22.0, 2 = 271. 23.0, 1 = High/Low-Voltage Detect",
    "Table of Contents\n(HLVD).............................................................................................................................................. 23.0, 2 = 275. 24.0, 1 = Special Features of the",
    "Table of Contents\nCPU..................................................................................................................................................... 24.0, 2 = 281. 25.0, 1 = Instruction Set",
    "Table of Contents\nSummary........................................................................................................................................................... 25.0, 2 = 297. 26.0, 1 = Development",
    "Table of Contents\nSupport................................................................................................................................................................ 26.0, 2 = 347. 27.0, 1 = Electrical Characteristics",
    "Table of Contents\n........................................................................................................................................................... 27.0, 2 = 351. 28.0, 1 = Packaging",
    "Table of Contents\nInformation............................................................................................................................................................... 28.0, 2 = 389. Appendix, 1 = A: Revision",
    "Table of Contents\nHistory.............................................................................................................................................................. Appendix, 2 = 395. Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 1 = Appendix B: Device",
    "Table of Contents\nDifferences.......................................................................................................................................................... Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 2 = 395. Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 1 = Appendix C: Conversion Considerations",
    "Table of Contents\n............................................................................................................................................ Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 2 = 396. Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 1 = Appendix D: Migration from Baseline to Enhanced Devices............................................................................................................... Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 2 = 396. Appendix E: Migration from Mid-Range to Enhanced Devices .........................................................................................................., 1 = Appendix E: Migration from Mid-Range to Enhanced Devices",
    "Table of Contents\n........................................................................................................... Appendix E: Migration from Mid-Range to Enhanced Devices .........................................................................................................., 2 = 397. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 1 = Appendix F: Migration from High-End to Enhanced Devices.............................................................................................................. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 2 = 397. Index",
    "Table of Contents\n.................................................................................................................................................................................................., 1 = Index",
    "Table of Contents\n................................................................................................................................................................................................... Index",
    "Table of Contents\n.................................................................................................................................................................................................., 2 = 399. The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 1 = The Microchip Web",
    "Table of Contents\nSite...................................................................................................................................................................... The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 2 = 409. Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 1 = Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................... Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 2 = 409. Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 1 = Customer",
    "Table of Contents\nSupport............................................................................................................................................................................... Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 2 = 409. Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 1 = Reader",
    "Table of Contents\nResponse............................................................................................................................................................................... Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................., 2 = 410. PIC18F6310/6410/8310/8410 Product Identification System",
    "Table of Contents\n............................................................................................................, 1 = PIC18F6310/6410/8310/8410 Product Identification System ............................................................................................................. PIC18F6310/6410/8310/8410",
    "Table of Contents\nProduct Identification System ............................................................................................................, 2 = 411",
    "TO OUR VALUED CUSTOMERS\nIt is our intention to provide our valued customers with the best documentation possible to ensure successful use of your Microchip products. To this end, we will continue to improve our publications to better suit your needs. Our publications will be refined and enhanced as new volumes and updates are introduced.\nIf you have any questions or comments regarding this publication, please contact the Marketing Communications Department via E-mail at docerrors@mail.microchip.com or fax the Reader Response Form in the back of this data sheet to (480) 792-4150. We welcome your feedback.",
    "Most Current Data Sheet\nTo obtain the most up-to-date version of this data sheet, please register at our Worldwide Web site at:\nhttp://www.microchip.com\nYou can determine the version of a data sheet by examining its literature number found on the bottom outside corner of any page. The last character of the literature number is the version number, (e.g., DS30000A is version A of document DS30000).",
    "Errata\nAn errata sheet, describing minor operational differences from the data sheet and recommended workarounds, may exist for current devices. As device/documentation issues become known to us, we will publish an errata sheet. The errata will specify the revision of silicon and revision of document to which it applies.\nTo determine if an errata sheet exists for a particular device, please check with one of the following:\n\u00b7 Microchip's Worldwide Web site; http://www.microchip.com\n\u00b7 Your local Microchip sales office (see last page)\n\u00b7 The Microchip Corporate Literature Center; U.S. FAX: (480) 792-7277\nWhen contacting a sales office or the literature center, please specify which device, revision of silicon and data sheet (include literature number) you are using.",
    "Customer Notification System\nRegister on our web site at www.microchip.com/cn to receive the most current information on all of our products.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "1.0 DEVICE OVERVIEW\nThis document contains device specific information for the following devices:",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\n\u2022 PIC18F6310\n\u2022 PIC18LF6310\n\u2022 PIC18F6410\n\u2022 PIC18LF6410\n\u2022 PIC18F8310\n\u2022 PIC18LF8310\n\u2022 PIC18F8410\n\u2022 PIC18LF8410\nThis family offers the advantages of all PIC18 microcontrollers -namely, high computational performance  at  an  economical  price.  In  addition  to these features, the PIC18F6310/6410/8310/8410 family  introduces  design  enhancements  that  make these microcontrollers a logical choice for many high-performance, power-sensitive applications.",
    "1.1.1 nanoWatt TECHNOLOGY\nAll of the devices in the PIC18F6310/6410/8310/8410 family incorporate a range of features that can significantly reduce power consumption during operation. Key items include:\n\u00b7 Alternate Run Modes: By clocking the controller from the Timer1 source or the internal oscillator block, power consumption during code execution can be reduced by as much as 90%.\n\u00b7 Multiple Idle Modes: The controller can also run with its CPU core disabled, but the peripherals still active. In these states, power consumption can be reduced even further - to as little as 4% of normal operation requirements.\n\u00b7 On-the-Fly Mode Switching: The power-managed modes are invoked by user code during operation, allowing the user to incorporate power-saving ideas into their application's software design.\n\u00b7 Lower Consumption in Key Modules: The power requirements for both Timer1 and the Watchdog Timer have been reduced by up to 80%, with typical values of 1.1 \uf06d A and 2.1 \uf06d A, respectively.",
    "1.1.1 nanoWatt TECHNOLOGY\nAll of the devices in the PIC18F6310/6410/8310/8410 family  offer  nine  different  oscillator  options,  allowing users a wide range of choices in developing application hardware. These include:\n\u00b7 Four Crystal modes, using crystals or ceramic resonators.\n\u00b7 Two External Clock modes, offering the option of using two pins (oscillator input and a divide-by-4 clock output) or one pin (oscillator input, with the second pin reassigned as general I/O).\n\u00b7 Two External RC Oscillator modes, with the same pin options as the External Clock modes.\n\u00b7 An internal oscillator block which provides an 8 MHz clock (\u00b12% accuracy) and an INTRC source (approximately 31 kHz, stable over temperature and VDD), as well as a range of six user-selectable clock frequencies between 125 kHz to 4 MHz for a total of eight clock frequencies. This option frees the two oscillator pins for use as additional general purpose I/O.",
    "1.1.1 nanoWatt TECHNOLOGY\n\u00b7 A Phase Lock Loop (PLL) frequency multiplier, available to both the High-Speed Crystal and Internal Oscillator modes, which allows clock speeds of up to 40 MHz. Used with the internal oscillator, the PLL gives users a complete selection of clock speeds from 31 kHz to 32 MHz - all without using an external crystal or clock circuit.\nBesides its availability as a clock source, the internal oscillator block provides a stable reference source that gives the family additional features for robust operation:\n\u00b7 Fail-Safe Clock Monitor: This option constantly monitors the main clock source against a reference signal provided by the internal oscillator. If a clock failure occurs, the controller is switched to the internal oscillator block, allowing for continued low-speed operation or a safe application shutdown.\n\u00b7 Two-Speed Start-up: This option allows the internal oscillator to serve as the clock source from Power-on Reset or wake-up from Sleep mode until the primary clock source is available.",
    "1.2 Other Special Features\n- \u00b7 Memory Endurance: The Flash cells for program memory are rated to last for approximately a thousand erase/write cycles. Data retention without refresh is conservatively estimated to be greater than 100 years.",
    "1.3 Details on Individual Family Members\n\u00b7 External Memory Interface: For those applications where more program or data storage is needed, the PIC18F8310/8410 devices provide the ability to access external memory devices. The memory interface is configurable for both 8-bit and 16-bit data widths and uses a standard range of control signals to enable communication with a wide range of memory devices. With their 21-bit program counters, the 80-pin devices can access a linear memory space of up to 2 Mbytes.\n\u00b7 Extended Instruction Set: The PIC18F6310/6410/8310/8410 family introduces an optional extension to the PIC18 instruction set, which adds 8 new instructions and an Indexed Addressing mode. This extension, enabled as a device configuration option, has been specifically designed to optimize re-entrant application code originally developed in high-level languages such as 'C'.",
    "1.3 Details on Individual Family Members\n\u00b7 Enhanced Addressable USART: This serial communication module is capable of standard RS-232 operation and provides support for the LIN/J2602 bus protocol. Other enhancements include Automatic Baud Rate Detection (ABD) and a 16-bit Baud Rate Generator for improved resolution. When the microcontroller is using the internal oscillator block, the EUSART provides stable operation for applications that talk to the outside world, without using an external crystal (or its accompanying power requirement).\n\u00b7 10-Bit A/D Converter: This module incorporates programmable acquisition time, allowing for a channel to be selected and a conversion to be initiated without waiting for a sampling period, and thus, reduces code overhead.\n\u00b7 Extended Watchdog Timer (WDT): This enhanced version incorporates a 16-bit prescaler, allowing a time-out range from 4 ms to over 2 minutes that is stable across operating voltage and temperature.",
    "1.3 Details on Individual Family Members\nDevices in the PIC18F6310/6410/8310/8410 family are available  in  64-pin  (PIC18F6310/8310)  and  80-pin (PIC18F6410/8410) packages. Block diagrams for the two  groups  are  shown  in  Figure 1-1  and  Figure 1-2, respectively.\nThe devices are differentiated from each other in three ways:\n1. Flash Program Memory: 8 Kbytes in PIC18FX310 devices, 16 Kbytes in PIC18FX410 devices.\n2. I/O Ports: 7 bidirectional ports on 64-pin devices, 9 bidirectional ports on 80-pin devices.\n3. External  Memory  Interface:  present  on  80-pin devices only.\nAll other features for devices in this family are identical. These are summarized in Table 1-1.\nThe pinouts for all devices are listed in Table 1-2 and Table 1-3.",
    "1.3 Details on Individual Family Members\nLike  all  Microchip  PIC18  devices,  members  of  the PIC18F6310/6410/8310/8410  family  are  available  as both standard and  low-voltage devices. Standard devices with Flash memory, designated with an 'F' in the part number (such as PIC18F6310), accommodate an operating VDD range of 4.2V to 5.5V. Low-voltage parts,  designated  by  'LF'  (such  as  PIC18LF6410), function over an extended VDD range of 2.0V to 5.5V.",
    "TABLE 1-1: DEVICE FEATURES\nOperating Frequency, PIC18F6310 = DC - 40 MHz. Operating Frequency, PIC18F6410 = DC - 40 MHz. Operating Frequency, PIC18F8310 = DC - 40 MHz. Operating Frequency, PIC18F8410 = DC - 40 MHz. Program Memory (Bytes), PIC18F6310 = 8K. Program Memory (Bytes), PIC18F6410 = 16K. Program Memory (Bytes), PIC18F8310 = 8K. Program Memory (Bytes), PIC18F8410 = 16K. Program Memory (Instructions), PIC18F6310 = 4096. Program Memory (Instructions), PIC18F6410 = 8192. Program Memory (Instructions), PIC18F8310 = 4096. Program Memory (Instructions), PIC18F8410 = 8192. Data Memory (Bytes), PIC18F6310 = 768. Data Memory (Bytes), PIC18F6410 = 768. Data Memory (Bytes), PIC18F8310 = 768. Data Memory (Bytes), PIC18F8410 =",
    "TABLE 1-1: DEVICE FEATURES\n768. External Memory Interface, PIC18F6310 = No. External Memory Interface, PIC18F6410 = No. External Memory Interface, PIC18F8310 = Yes. External Memory Interface, PIC18F8410 = Yes. Interrupt Sources, PIC18F6310 = 22. Interrupt Sources, PIC18F6410 = 22. Interrupt Sources, PIC18F8310 = 22. Interrupt Sources, PIC18F8410 = 22. I/O Ports, PIC18F6310 = Ports A, B, C, D, E, F, G. I/O Ports, PIC18F6410 = Ports A, B, C, D, E, F, G. I/O Ports, PIC18F8310 = Ports A, B, C, D, E, F, G, H, J. I/O Ports, PIC18F8410 = Ports A, B, C, D, E, F, G, H, J. Timers, PIC18F6310 = 4. Timers, PIC18F6410 = 4. Timers, PIC18F8310 =",
    "TABLE 1-1: DEVICE FEATURES\n4. Timers, PIC18F8410 = 4. Capture/Compare/PWM Modules, PIC18F6310 = 3. Capture/Compare/PWM Modules, PIC18F6410 = 3. Capture/Compare/PWM Modules, PIC18F8310 = 3. Capture/Compare/PWM Modules, PIC18F8410 = 3. Serial Communications, PIC18F6310 = MSSP, AUSART Enhanced USART. Serial Communications, PIC18F6410 = MSSP, AUSART Enhanced USART. Serial Communications, PIC18F8310 = MSSP, AUSART Enhanced USART. Serial Communications, PIC18F8410 = MSSP, AUSART Enhanced USART. Parallel Communications, PIC18F6310 = PSP. Parallel Communications, PIC18F6410 = PSP. Parallel Communications, PIC18F8310 = PSP. Parallel Communications, PIC18F8410 = PSP. 10-Bit Analog-to-Digital Module, PIC18F6310 = 12 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F6410 = 12",
    "TABLE 1-1: DEVICE FEATURES\nInput Channels. 10-Bit Analog-to-Digital Module, PIC18F8310 = 12 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F8410 = 12 Input Channels. Resets (and Delays), PIC18F6310 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F6410 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F8310 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F8410 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Programmable Low-Voltage Detect, PIC18F6310 = Yes. Programmable Low-Voltage",
    "TABLE 1-1: DEVICE FEATURES\nDetect, PIC18F6410 = Yes. Programmable Low-Voltage Detect, PIC18F8310 = Yes. Programmable Low-Voltage Detect, PIC18F8410 = Yes. Programmable Brown-out Reset, PIC18F6310 = Yes. Programmable Brown-out Reset, PIC18F6410 = Yes. Programmable Brown-out Reset, PIC18F8310 = Yes. Programmable Brown-out Reset, PIC18F8410 = Yes. Instruction Set, PIC18F6310 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F6410 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F8310 = 75 Instructions; 83 with Extended Instruction Set enabled. Instruction Set, PIC18F8410 = 75 Instructions; 83 with Extended Instruction Set enabled. Packages, PIC18F6310 = 64-Pin TQFP. Packages, PIC18F6410 = 64-Pin TQFP. Packages, PIC18F8310 = 80-Pin TQFP. Packages, PIC18F8410 = 80-Pin TQFP",
    "FIGURE 1-1: PIC18F6310/6410 (64-PIN) BLOCK DIAGRAM\nNote 1: CCP2 is multiplexed with RC1 when Configuration bit, CCP2MX, is set or RE7 when CCP2MX is not set.\n2: RG5 is only available when MCLR functionality is disabled.\n3: OSC1/CLKI and OSC2/CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 3.0 'Oscillator Configurations' for additional information.\nFIGURE 1-2:",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS\nRG5/MCLR/VPP, Pin Number TQFP = 7. RG5/MCLR/VPP, Pin Type = . RG5/MCLR/VPP, Buffer Type = . RG5/MCLR/VPP, Description = Master Clear (input) or programming voltage (input).. RG5, Pin Number TQFP = . RG5, Pin Type = I. RG5, Buffer Type = ST. RG5, Description = Digital input.. MCLR, Pin Number TQFP = . MCLR, Pin Type = I. MCLR, Buffer Type = ST. MCLR, Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number TQFP = . VPP, Pin Type = P. VPP, Buffer Type = . VPP, Description = Programming voltage input.. OSC1/CLKI/RA7, Pin Number TQFP = 39. OSC1/CLKI/RA7, Pin Type = . OSC1/CLKI/RA7, Buffer Type =",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS\n. OSC1/CLKI/RA7, Description = Oscillator crystal or external clock input.. OSC1, Pin Number TQFP = . OSC1, Pin Type = I. OSC1, Buffer Type = ST. OSC1, Description = Oscillator crystal input or external clock source input. ST buffer when configured in RC mode, CMOS otherwise.. CLKI, Pin Number TQFP = . CLKI, Pin Type = I. CLKI, Buffer Type = CMOS. CLKI, Description = External clock source input. Always associated with pin function, OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number TQFP = . RA7, Pin Type = I/O. RA7, Buffer Type = TTL. RA7, Description = General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number TQFP = 40. OSC2/CLKO/RA6, Pin Type = . OSC2/CLKO/RA6, Buffer Type = .",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS\nOSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number TQFP = . OSC2, Pin Type = O. OSC2, Buffer Type = -. OSC2, Description = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number TQFP = . CLKO, Pin Type = O. CLKO, Buffer Type = -. CLKO, Description = In RC mode, OSC2 pin outputs CLKO, which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number TQFP = . RA6, Pin Type = I/O. RA6, Buffer Type = TTL. RA6, Description = General purpose I/O pin.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nI =  Input\nAnalog =  Analog input\nO =  Output\n- P =  Power",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF- RA2 AN2 VREF- RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI RA4 T0CKI, Pin Number.TQFP = 24 23 22 21. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF- RA2 AN2 VREF- RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI RA4 T0CKI, Pin Type. = I/O I I/O I I/O I I I/O I I. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF- RA2 AN2 VREF- RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI RA4 T0CKI, Buffer Type. = TTL Analog TTL Analog TTL",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTTL. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2/AN2/VREF- RA2 AN2 VREF- RA3/AN3/VREF+ RA3 AN3 VREF+ RA4/T0CKI RA4 T0CKI, Description. = Digital I/O. Analog Input 0. Digital I/O. Analog Input 1. Digital I/O. Analog Input 2. A/D reference voltage (low) input.. RA5/AN4/HLVDIN RA5, Pin Number.TQFP = . RA5/AN4/HLVDIN RA5, Pin Type. = . RA5/AN4/HLVDIN RA5, Buffer Type. = Analog Analog. RA5/AN4/HLVDIN RA5, Description. = . , Pin Number.TQFP = . , Pin Type. = . , Buffer Type. = Analog Analog. , Description. = Digital I/O. Analog Input 3. A/D reference voltage (high) input.. AN4",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nHLVDIN, Pin Number.TQFP = 28. AN4 HLVDIN, Pin Type. = I/O I I/O I I. AN4 HLVDIN, Buffer Type. = ST ST TTL. AN4 HLVDIN, Description. = Digital I/O. Timer0 external clock input.. , Pin Number.TQFP = 27. , Pin Type. = . , Buffer Type. = . , Description. = Digital I/O. Analog Input 4. High/Low-Voltage Detect input. See the OSC2/CLKO/RA6 pin.. , Pin Number.TQFP = . , Pin Type. = . , Buffer Type. = Analog Analog. , Description. = . RA6, Pin Number.TQFP = . RA6, Pin Type. = . RA6, Buffer Type. = . RA6, Description. = . RA7, Pin Number.TQFP = . RA7, Pin Type. = . RA7, Buffer Type. = . RA7, Description. = See the OSC1/CLKI/RA7. ,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Number.TQFP = . , Pin Type. = . , Buffer Type. = . , Description. = pin.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\n- I =  Input\nAnalog\n=  Analog input\nO\n=  Output\n- P =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0, Pin Number.TQFP = 48. RB0/INT0, Pin Type. = . RB0/INT0, Buffer Type. = . RB0/INT0, Description. = . RB0, Pin Number.TQFP = . RB0, Pin Type. = I/O. RB0, Buffer Type. = TTL. RB0, Description. = Digital I/O.. INT0, Pin Number.TQFP = . INT0, Pin Type. = I. INT0, Buffer Type. = ST. INT0, Description. = External Interrupt 0.. RB1/INT1, Pin Number.TQFP = 47. RB1/INT1, Pin Type. = . RB1/INT1, Buffer Type. = . RB1/INT1, Description. = . RB1, Pin Number.TQFP = . RB1, Pin Type. = I/O. RB1, Buffer Type. = TTL. RB1, Description. = Digital I/O.. INT1, Pin Number.TQFP = . INT1, Pin Type.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= I. INT1, Buffer Type. = ST. INT1, Description. = External Interrupt 1.. RB2/INT2, Pin Number.TQFP = 46. RB2/INT2, Pin Type. = . RB2/INT2, Buffer Type. = . RB2/INT2, Description. = . RB2, Pin Number.TQFP = . RB2, Pin Type. = I/O. RB2, Buffer Type. = TTL. RB2, Description. = Digital I/O.. INT2, Pin Number.TQFP = . INT2, Pin Type. = I. INT2, Buffer Type. = ST. INT2, Description. = External Interrupt 2.. RB3/INT3, Pin Number.TQFP = 45. RB3/INT3, Pin Type. = . RB3/INT3, Buffer Type. = . RB3/INT3, Description. = . RB3, Pin Number.TQFP = . RB3, Pin Type. = I/O. RB3, Buffer Type. = TTL. RB3, Description.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= Digital I/O.. INT3, Pin Number.TQFP = . INT3, Pin Type. = I. INT3, Buffer Type. = ST. INT3, Description. = External Interrupt 3.. RB4/KBI0, Pin Number.TQFP = 44. RB4/KBI0, Pin Type. = . RB4/KBI0, Buffer Type. = . RB4/KBI0, Description. = . RB4, Pin Number.TQFP = . RB4, Pin Type. = I/O. RB4, Buffer Type. = TTL. RB4, Description. = Digital I/O.. KBI0, Pin Number.TQFP = . KBI0, Pin Type. = I. KBI0, Buffer Type. = TTL. KBI0, Description. = Interrupt-on-change pin.. RB5/KBI1, Pin Number.TQFP = 43. RB5/KBI1, Pin Type. = . RB5/KBI1, Buffer Type. = . RB5/KBI1,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDescription. = . RB5, Pin Number.TQFP = . RB5, Pin Type. = I/O. RB5, Buffer Type. = TTL. RB5, Description. = Digital I/O.. KBI1, Pin Number.TQFP = . KBI1, Pin Type. = I. KBI1, Buffer Type. = TTL. KBI1, Description. = Interrupt-on-change pin.. RB6/KBI2/PGC, Pin Number.TQFP = 42. RB6/KBI2/PGC, Pin Type. = . RB6/KBI2/PGC, Buffer Type. = . RB6/KBI2/PGC, Description. = . RB6, Pin Number.TQFP = . RB6, Pin Type. = I/O. RB6, Buffer Type. = TTL. RB6, Description. = Digital I/O.. KBI2, Pin Number.TQFP = . KBI2, Pin Type. = I. KBI2, Buffer Type. = TTL.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nKBI2, Description. = Interrupt-on-change pin.. PGC, Pin Number.TQFP = . PGC, Pin Type. = I/O. PGC, Buffer Type. = ST. PGC, Description. = In-Circuit Debugger and ICSP\u2122 programming clock pin.. RB7/KBI3/PGD, Pin Number.TQFP = 37. RB7/KBI3/PGD, Pin Type. = . RB7/KBI3/PGD, Buffer Type. = . RB7/KBI3/PGD, Description. = . RB7, Pin Number.TQFP = . RB7, Pin Type. = I/O. RB7, Buffer Type. = TTL. RB7, Description. = Digital I/O.. KBI3, Pin Number.TQFP = . KBI3, Pin Type. = I. KBI3, Buffer Type. = TTL. KBI3, Description. = Interrupt-on-change pin.. PGD, Pin Number.TQFP = . PGD, Pin",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = I/O. PGD, Buffer Type. = ST. PGD, Description. = In-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog\n=  Analog input\nI\n=  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number.TQFP = 30. RC0/T1OSO/T13CKI, Pin Type. = . RC0/T1OSO/T13CKI, Buffer Type. = . RC0/T1OSO/T13CKI, Description. = . RC0, Pin Number.TQFP = . RC0, Pin Type. = I/O. RC0, Buffer Type. = ST. RC0, Description. = Digital I/O.. T1OSO, Pin Number.TQFP = . T1OSO, Pin Type. = O. T1OSO, Buffer Type. = -. T1OSO, Description. = Timer1 oscillator output.. T13CKI, Pin Number.TQFP = . T13CKI, Pin Type. = I. T13CKI, Buffer Type. = ST. T13CKI, Description. = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.TQFP = 29. RC1/T1OSI/CCP2,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Type. = . RC1/T1OSI/CCP2, Buffer Type. = . RC1/T1OSI/CCP2, Description. = . RC1, Pin Number.TQFP = . RC1, Pin Type. = I/O. RC1, Buffer Type. = ST. RC1, Description. = Digital I/O.. T1OSI, Pin Number.TQFP = . T1OSI, Pin Type. = I. T1OSI, Buffer Type. = Analog. T1OSI, Description. = Timer1 oscillator input.. CCP2 (1), Pin Number.TQFP = . CCP2 (1), Pin Type. = I/O. CCP2 (1), Buffer Type. = ST. CCP2 (1), Description. = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1, Pin Number.TQFP = 33. RC2/CCP1, Pin Type. = . RC2/CCP1, Buffer Type. = .",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC2/CCP1, Description. = . RC2, Pin Number.TQFP = . RC2, Pin Type. = I/O. RC2, Buffer Type. = ST. RC2, Description. = Digital I/O.. CCP1, Pin Number.TQFP = . CCP1, Pin Type. = I/O. CCP1, Buffer Type. = ST. CCP1, Description. = Capture 1 input/Compare 1 output/PWM1 output.. RC3/SCK/SCL, Pin Number.TQFP = 34. RC3/SCK/SCL, Pin Type. = . RC3/SCK/SCL, Buffer Type. = . RC3/SCK/SCL, Description. = . RC3, Pin Number.TQFP = . RC3, Pin Type. = I/O. RC3, Buffer Type. = ST. RC3, Description. = Digital I/O.. SCK, Pin Number.TQFP = . SCK, Pin Type. = I/O. SCK, Buffer",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = ST. SCK, Description. = Synchronous serial clock input/output for SPI mode.. SCL, Pin Number.TQFP = . SCL, Pin Type. = I/O. SCL, Buffer Type. = I 2 C. SCL, Description. = Synchronous serial clock input/output for I 2 C mode.. RC4/SDI/SDA, Pin Number.TQFP = 35. RC4/SDI/SDA, Pin Type. = . RC4/SDI/SDA, Buffer Type. = . RC4/SDI/SDA, Description. = . RC4, Pin Number.TQFP = . RC4, Pin Type. = I/O. RC4, Buffer Type. = ST. RC4, Description. = Digital I/O.. SDI, Pin Number.TQFP = . SDI, Pin Type. = I. SDI, Buffer Type. = ST. SDI, Description. = SPI data in.. SDA, Pin Number.TQFP = . SDA,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Type. = I/O. SDA, Buffer Type. = I 2 C. SDA, Description. = I 2 C data I/O.. RC5/SDO, Pin Number.TQFP = 36. RC5/SDO, Pin Type. = . RC5/SDO, Buffer Type. = . RC5/SDO, Description. = . RC5, Pin Number.TQFP = . RC5, Pin Type. = I/O. RC5, Buffer Type. = ST. RC5, Description. = Digital I/O.. SDO, Pin Number.TQFP = . SDO, Pin Type. = O. SDO, Buffer Type. = -. SDO, Description. = SPI data out.. RC6/TX1/CK1, Pin Number.TQFP = 31. RC6/TX1/CK1, Pin Type. = . RC6/TX1/CK1, Buffer Type. = . RC6/TX1/CK1, Description. = . RC6, Pin Number.TQFP = . RC6,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Type. = I/O. RC6, Buffer Type. = ST. RC6, Description. = Digital I/O.. TX1, Pin Number.TQFP = . TX1, Pin Type. = O. TX1, Buffer Type. = -. TX1, Description. = EUSART1 asynchronous transmit.. CK1, Pin Number.TQFP = . CK1, Pin Type. = I/O. CK1, Buffer Type. = ST. CK1, Description. = EUSART1 synchronous clock (see related RX1/DT1).. RC7/RX1/DT1, Pin Number.TQFP = 32. RC7/RX1/DT1, Pin Type. = . RC7/RX1/DT1, Buffer Type. = . RC7/RX1/DT1, Description. = . RC7, Pin Number.TQFP = . RC7, Pin Type. = I/O. RC7, Buffer Type. = ST. RC7, Description. = Digital",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O.. RX1, Pin Number.TQFP = . RX1, Pin Type. = I. RX1, Buffer Type. = ST. RX1, Description. = EUSART1 asynchronous receive.. DT1, Pin Number.TQFP = . DT1, Pin Type. = I/O. DT1, Buffer Type. = ST. DT1, Description. = EUSART1 synchronous data (see related TX1/CK1).\nLegend:\nTTL =  TTL compatible input\nST =  Schmitt Trigger input with CMOS levels\nI =  Input\nP =  Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.\nCMOS\n=  CMOS compatible input or output\nAnalog\n=  Analog input\nO\n=  Output\nI 2 C = ST with I 2 C\u2122 or SMB levels",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/PSP0, Pin Number.TQFP = 58. RD0/PSP0, Pin Type. = . RD0/PSP0, Buffer Type. = . RD0/PSP0, Description. = PORTD is a bidirectional I/O port.. RD0, Pin Number.TQFP = . RD0, Pin Type. = I/O. RD0, Buffer Type. = ST. RD0, Description. = Digital I/O.. PSP0, Pin Number.TQFP = . PSP0, Pin Type. = I/O. PSP0, Buffer Type. = TTL. PSP0, Description. = Parallel Slave Port data.. RD1/PSP1, Pin Number.TQFP = 55. RD1/PSP1, Pin Type. = . RD1/PSP1, Buffer Type. = . RD1/PSP1, Description. = . RD1, Pin Number.TQFP = . RD1, Pin Type. = I/O. RD1, Buffer Type. = ST.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD1, Description. = Digital I/O.. PSP1, Pin Number.TQFP = . PSP1, Pin Type. = I/O. PSP1, Buffer Type. = TTL. PSP1, Description. = Parallel Slave Port data.. RD2/PSP2, Pin Number.TQFP = 54. RD2/PSP2, Pin Type. = . RD2/PSP2, Buffer Type. = . RD2/PSP2, Description. = . RD2, Pin Number.TQFP = . RD2, Pin Type. = I/O. RD2, Buffer Type. = ST. RD2, Description. = Digital I/O.. PSP2, Pin Number.TQFP = . PSP2, Pin Type. = I/O. PSP2, Buffer Type. = TTL. PSP2, Description. = Parallel Slave Port data.. RD3/PSP3, Pin Number.TQFP = 53. RD3/PSP3, Pin Type. = . RD3/PSP3, Buffer",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = . RD3/PSP3, Description. = . RD3, Pin Number.TQFP = . RD3, Pin Type. = I/O. RD3, Buffer Type. = ST. RD3, Description. = Digital I/O.. PSP3, Pin Number.TQFP = . PSP3, Pin Type. = I/O. PSP3, Buffer Type. = TTL. PSP3, Description. = Parallel Slave Port data.. RD4/PSP4, Pin Number.TQFP = 52. RD4/PSP4, Pin Type. = . RD4/PSP4, Buffer Type. = . RD4/PSP4, Description. = . RD4, Pin Number.TQFP = . RD4, Pin Type. = I/O. RD4, Buffer Type. = ST. RD4, Description. = Digital I/O.. PSP4, Pin Number.TQFP = . PSP4, Pin Type. = I/O. PSP4, Buffer Type. = TTL.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPSP4, Description. = Parallel Slave Port data.. RD5/PSP5, Pin Number.TQFP = 51. RD5/PSP5, Pin Type. = . RD5/PSP5, Buffer Type. = . RD5/PSP5, Description. = . RD5, Pin Number.TQFP = . RD5, Pin Type. = I/O. RD5, Buffer Type. = ST. RD5, Description. = Digital I/O.. PSP5, Pin Number.TQFP = . PSP5, Pin Type. = I/O. PSP5, Buffer Type. = TTL. PSP5, Description. = Parallel Slave Port data.. RD6/PSP6, Pin Number.TQFP = 50. RD6/PSP6, Pin Type. = . RD6/PSP6, Buffer Type. = . RD6/PSP6, Description. = . RD6, Pin Number.TQFP = . RD6, Pin Type. = I/O. RD6, Buffer Type. = ST.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD6, Description. = Digital I/O.. PSP6, Pin Number.TQFP = . PSP6, Pin Type. = I/O. PSP6, Buffer Type. = TTL. PSP6, Description. = Parallel Slave Port data.. RD7/PSP7, Pin Number.TQFP = 49. RD7/PSP7, Pin Type. = . RD7/PSP7, Buffer Type. = . RD7/PSP7, Description. = . RD7, Pin Number.TQFP = . RD7, Pin Type. = I/O. RD7, Buffer Type. = ST. RD7, Description. = Digital I/O.. PSP7, Pin Number.TQFP = . PSP7, Pin Type. = I/O. PSP7, Buffer Type. = TTL. PSP7, Description. = Parallel Slave Port data.\nLegend:\nTTL =  TTL compatible input\nCMOS\n=  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog\n=  Analog input\nI =  Input",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/RD RE0 RD, Pin Number.TQFP = 2. RE0/RD RE0 RD, Pin Type. = I/O I. RE0/RD RE0 RD, Buffer Type. = ST TTL. RE0/RD RE0 RD, Description. = Digital I/O. Read control for Parallel Slave Port.. RE1/WR RE1 WR, Pin Number.TQFP = 1. RE1/WR RE1 WR, Pin Type. = I/O I. RE1/WR RE1 WR, Buffer Type. = ST TTL. RE1/WR RE1 WR, Description. = Digital I/O. Write control for Parallel Slave Port.. RE2/CS RE2 CS, Pin Number.TQFP = 64. RE2/CS RE2 CS, Pin Type. = I/O I. RE2/CS RE2 CS, Buffer Type. = ST TTL. RE2/CS RE2 CS, Description. = Digital I/O. Chip select control for Parallel Slave Port.. RE3, Pin Number.TQFP = 63.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE3, Pin Type. = I/O. RE3, Buffer Type. = ST. RE3, Description. = Digital I/O.. RE4, Pin Number.TQFP = 62. RE4, Pin Type. = I/O. RE4, Buffer Type. = ST. RE4, Description. = Digital I/O.. RE5, Pin Number.TQFP = 61. RE5, Pin Type. = I/O. RE5, Buffer Type. = ST. RE5, Description. = Digital I/O.. RE6, Pin Number.TQFP = 60. RE6, Pin Type. = I/O. RE6, Buffer Type. = ST. RE6, Description. = Digital I/O.. RE7/CCP2 RE7 CCP2 (2), Pin Number.TQFP = 59. RE7/CCP2 RE7 CCP2 (2), Pin Type. = I/O I/O. RE7/CCP2 RE7 CCP2 (2), Buffer Type. = ST ST.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE7/CCP2 RE7 CCP2 (2), Description. = Digital I/O. Capture 2 input/Compare 2 output/PWM2 output.\nLegend:\nTTL =  TTL compatible input\nST =  Schmitt Trigger input with CMOS levels\nI =  Input\nP =  Power\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.\nCMOS =  CMOS compatible input or output\nAnalog\n=  Analog input\nO =  Output\nI 2 C = ST with I 2 C\u2122 or SMB levels",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRF0/AN5, Pin Number.TQFP = 18. RF0/AN5, Pin Type. = . RF0/AN5, Buffer Type. = . RF0/AN5, Description. = . RF0, Pin Number.TQFP = . RF0, Pin Type. = I/O. RF0, Buffer Type. = ST. RF0, Description. = Digital I/O.. AN5, Pin Number.TQFP = . AN5, Pin Type. = I. AN5, Buffer Type. = Analog. AN5, Description. = Analog Input 5.. RF1/AN6/C2OUT, Pin Number.TQFP = 17. RF1/AN6/C2OUT, Pin Type. = . RF1/AN6/C2OUT, Buffer Type. = . RF1/AN6/C2OUT, Description. = . RF1, Pin Number.TQFP = . RF1, Pin Type. = I/O. RF1, Buffer Type. = ST. RF1, Description. = Digital I/O.. AN6, Pin",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . AN6, Pin Type. = I. AN6, Buffer Type. = Analog. AN6, Description. = Analog Input. C2OUT, Pin Number.TQFP = . C2OUT, Pin Type. = O. C2OUT, Buffer Type. = -. C2OUT, Description. = 6. Comparator 2 output.. RF2/AN7/C1OUT, Pin Number.TQFP = 16. RF2/AN7/C1OUT, Pin Type. = . RF2/AN7/C1OUT, Buffer Type. = . RF2/AN7/C1OUT, Description. = . RF2, Pin Number.TQFP = . RF2, Pin Type. = I/O. RF2, Buffer Type. = ST. RF2, Description. = Digital I/O.. AN7, Pin Number.TQFP = . AN7, Pin Type. = I. AN7, Buffer Type. = Analog. AN7, Description. = Analog Input 7.. C1OUT, Pin Number.TQFP = . C1OUT, Pin Type. =",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nO. C1OUT, Buffer Type. = -. C1OUT, Description. = Comparator 1 output.. RF3/AN8, Pin Number.TQFP = 15. RF3/AN8, Pin Type. = . RF3/AN8, Buffer Type. = . RF3/AN8, Description. = . RF3, Pin Number.TQFP = . RF3, Pin Type. = I/O. RF3, Buffer Type. = ST. RF3, Description. = Digital I/O.. AN8, Pin Number.TQFP = . AN8, Pin Type. = I. AN8, Buffer Type. = Analog. AN8, Description. = Analog Input 8.. RF4/AN9, Pin Number.TQFP = 14. RF4/AN9, Pin Type. = . RF4/AN9, Buffer Type. = . RF4/AN9, Description. = . RF4, Pin Number.TQFP = . RF4, Pin Type. = I/O. RF4, Buffer Type. = ST. RF4, Description. =",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDigital I/O.. AN9, Pin Number.TQFP = . AN9, Pin Type. = I. AN9, Buffer Type. = Analog. AN9, Description. = Analog Input 9.. RF5/AN10/CVREF, Pin Number.TQFP = 13. RF5/AN10/CVREF, Pin Type. = . RF5/AN10/CVREF, Buffer Type. = . RF5/AN10/CVREF, Description. = . RF5, Pin Number.TQFP = . RF5, Pin Type. = I/O. RF5, Buffer Type. = ST. RF5, Description. = Digital I/O.. AN10, Pin Number.TQFP = . AN10, Pin Type. = I. AN10, Buffer Type. = Analog. AN10, Description. = Analog Input 10.. CVREF, Pin Number.TQFP = . CVREF, Pin Type. = O. CVREF, Buffer Type. = Analog. CVREF, Description. = Comparator reference voltage",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\noutput.. RF6/AN11, Pin Number.TQFP = 12. RF6/AN11, Pin Type. = . RF6/AN11, Buffer Type. = . RF6/AN11, Description. = . RF6, Pin Number.TQFP = . RF6, Pin Type. = I/O. RF6, Buffer Type. = ST. RF6, Description. = Digital I/O.. AN11, Pin Number.TQFP = . AN11, Pin Type. = I. AN11, Buffer Type. = Analog. AN11, Description. = Analog Input 11.. RF7/SS, Pin Number.TQFP = 11. RF7/SS, Pin Type. = . RF7/SS, Buffer Type. = . RF7/SS, Description. = . RF7, Pin Number.TQFP = . RF7, Pin Type. = I/O. RF7, Buffer Type. = ST. RF7, Description. = Digital I/O.. SS, Pin Number.TQFP = . SS, Pin Type. = I. SS,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer Type. = TTL. SS, Description. = SPI slave select input.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog\n=  Analog input\nI\n=  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Default assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRG0/CCP3 RG0 CCP3 RG1 TX2 CK2 RG2, Pin Number.TQFP = 3. RG0/CCP3 RG0 CCP3 RG1 TX2 CK2 RG2, Pin Type. = I/O I/O. RG0/CCP3 RG0 CCP3 RG1 TX2 CK2 RG2, Buffer Type. = ST ST. RG0/CCP3 RG0 CCP3 RG1 TX2 CK2 RG2, Description. = Digital I/O. Capture 3 input/Compare 3 output/PWM3 output.. RG1/TX2/CK2, Pin Number.TQFP = 4. RG1/TX2/CK2, Pin Type. = I/O O I/O. RG1/TX2/CK2, Buffer Type. = ST - ST. RG1/TX2/CK2, Description. = Digital I/O. AUSART2 asynchronous transmit.",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAUSART2 synchronous clock (see related RX2/DT2).. RG2/RX2/DT2 RX2 DT2, Pin Number.TQFP = 5. RG2/RX2/DT2 RX2 DT2, Pin Type. = I/O I I/O. RG2/RX2/DT2 RX2 DT2, Buffer Type. = ST ST ST. RG2/RX2/DT2 RX2 DT2, Description. = Digital I/O. AUSART2 asynchronous receive. AUSART2 synchronous data (see related TX2/CK2).. RG3, Pin Number.TQFP = 6. RG3, Pin Type. = I/O. RG3, Buffer Type. = ST. RG3, Description. = Digital I/O.. RG4 RG5, Pin Number.TQFP = 8. RG4 RG5, Pin Type. = I/O. RG4 RG5,",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer Type. = ST. RG4 RG5, Description. = Digital I/O. See RG5/MCLR/VPP pin. Ground reference for logic and I/O pins.. VSS, Pin Number.TQFP = 9, 25, 41, 56. VSS, Pin Type. = P. VSS, Buffer Type. = -. VSS, Description. = . VDD, Pin Number.TQFP = 10, 26, 38, 57. VDD, Pin Type. = P. VDD, Buffer Type. = -. VDD, Description. = Positive supply for logic and I/O pins.. AVSS, Pin Number.TQFP = 20. AVSS, Pin Type. = P. AVSS, Buffer Type. = -. AVSS, Description. = Ground reference for analog modules.. AVDD, Pin Number.TQFP = 19. AVDD, Pin Type. = P. AVDD, Buffer Type. = -. AVDD, Description. = Positive supply for analog modules.\nLegend:\nTTL =  TTL compatible input\nCMOS",
    "TABLE 1-2: PIC18F6310/6410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n=  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog =  Analog input\nI =  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1:\nDefault assignment for CCP2 when Configuration bit, CCP2MX, is set.\n2: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared.",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS\nRG5/MCLR/VPP, Pin Number TQFP = 9. RG5/MCLR/VPP, Pin Type = . RG5/MCLR/VPP, Buffer Type = . RG5/MCLR/VPP, Description = Master Clear (input) or programming voltage (input).. RG5, Pin Number TQFP = . RG5, Pin Type = I. RG5, Buffer Type = ST. RG5, Description = Digital input.. MCLR, Pin Number TQFP = . MCLR, Pin Type = I. MCLR, Buffer Type = ST. MCLR, Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number TQFP = . VPP, Pin Type = P. VPP, Buffer Type = . VPP, Description = Programming voltage input.. OSC1/CLKI/RA7, Pin Number TQFP = 49. OSC1/CLKI/RA7, Pin Type = . OSC1/CLKI/RA7, Buffer Type =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS\n. OSC1/CLKI/RA7, Description = Oscillator crystal or external clock input.. OSC1, Pin Number TQFP = . OSC1, Pin Type = I. OSC1, Buffer Type = ST. OSC1, Description = Oscillator crystal input or external clock source input. ST buffer when configured in RC mode, CMOS otherwise.. CLKI, Pin Number TQFP = . CLKI, Pin Type = I. CLKI, Buffer Type = CMOS. CLKI, Description = External clock source input. Always associated with pin function, OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number TQFP = . RA7, Pin Type = I/O. RA7, Buffer Type = TTL. RA7, Description = General purpose I/O pin.. OSC2/CLKO/RA6, Pin Number TQFP = 50. OSC2/CLKO/RA6, Pin Type = . OSC2/CLKO/RA6, Buffer Type = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS\nOSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number TQFP = . OSC2, Pin Type = O. OSC2, Buffer Type = -. OSC2, Description = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number TQFP = . CLKO, Pin Type = O. CLKO, Buffer Type = -. CLKO, Description = In RC mode, OSC2 pin outputs CLKO, which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number TQFP = . RA6, Pin Type = I/O. RA6, Buffer Type = TTL. RA6, Description = General purpose I/O pin.",
    "Legend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog =  Analog input\nI\n=  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF-, Pin Number.TQFP = 30 29 28. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF-, Pin Type. = I/O I I/O I I/O I I. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF-, Buffer Type. = TTL Analog TTL TTL Analog Analog. RA0/AN0 RA0 AN0 RA1/AN1 RA1 AN1 RA2 AN2 VREF-, Description. = Digital I/O. Analog Input 0. Digital I/O. Analog Input 1. Digital I/O. Analog Input 2. A/D reference voltage (low) input.. RA2/AN2/VREF-, Pin Number.TQFP = . RA2/AN2/VREF-, Pin Type. = . RA2/AN2/VREF-, Buffer Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAnalog. RA2/AN2/VREF-, Description. = . RA3/AN3/VREF+ RA3 AN3, Pin Number.TQFP = 27. RA3/AN3/VREF+ RA3 AN3, Pin Type. = I. RA3/AN3/VREF+ RA3 AN3, Buffer Type. = TTL. RA3/AN3/VREF+ RA3 AN3, Description. = Digital I/O. Analog Input 3. A/D reference voltage (high) input.. VREF+ RA4/T0CKI RA4, Pin Number.TQFP = . VREF+ RA4/T0CKI RA4, Pin Type. = I/O I. VREF+ RA4/T0CKI RA4, Buffer Type. = Analog Analog. VREF+ RA4/T0CKI RA4, Description. = . T0CKI, Pin Number.TQFP = 34. T0CKI, Pin Type. = I/O I. T0CKI, Buffer Type. = ST ST. T0CKI, Description.",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= Digital I/O. Timer0 external clock input.. RA5/AN4/HLVDIN RA5 AN4, Pin Number.TQFP = 33. RA5/AN4/HLVDIN RA5 AN4, Pin Type. = I/O I I. RA5/AN4/HLVDIN RA5 AN4, Buffer Type. = TTL. RA5/AN4/HLVDIN RA5 AN4, Description. = Digital I/O. Analog Input 4. High/Low-Voltage Detect input. See the OSC2/CLKO/RA6 pin.. HLVDIN, Pin Number.TQFP = . HLVDIN, Pin Type. = . HLVDIN, Buffer Type. = Analog Analog. HLVDIN, Description. = . RA6, Pin Number.TQFP = . RA6, Pin Type. = . RA6, Buffer Type. = . RA6, Description. = . RA7, Pin Number.TQFP = . RA7, Pin Type. = . RA7, Buffer Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RA7, Description. = See the OSC1/CLKI/RA7. , Pin Number.TQFP = . , Pin Type. = . , Buffer Type. = . , Description. = pin.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\n- I =  Input\nAnalog\n=  Analog input\nO =  Output\n- P =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/INT0, Pin Number.TQFP = 58. RB0/INT0, Pin Type. = . RB0/INT0, Buffer Type. = . RB0/INT0, Description. = programmed for internal weak pull-ups on all inputs.. RB0, Pin Number.TQFP = . RB0, Pin Type. = I/O. RB0, Buffer Type. = TTL. RB0, Description. = Digital I/O.. INT0, Pin Number.TQFP = . INT0, Pin Type. = I. INT0, Buffer Type. = ST. INT0, Description. = External Interrupt 0.. RB1/INT1, Pin Number.TQFP = 57. RB1/INT1, Pin Type. = . RB1/INT1, Buffer Type. = . RB1/INT1, Description. = . RB1, Pin Number.TQFP = . RB1, Pin Type. = I/O. RB1, Buffer Type. = TTL. RB1, Description. = Digital I/O.. INT1, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . INT1, Pin Type. = I. INT1, Buffer Type. = ST. INT1, Description. = External Interrupt 1.. RB2/INT2, Pin Number.TQFP = 56. RB2/INT2, Pin Type. = . RB2/INT2, Buffer Type. = . RB2/INT2, Description. = . RB2, Pin Number.TQFP = . RB2, Pin Type. = I/O. RB2, Buffer Type. = TTL. RB2, Description. = Digital I/O.. INT2, Pin Number.TQFP = . INT2, Pin Type. = I. INT2, Buffer Type. = ST. INT2, Description. = External Interrupt 2.. RB3/INT3/CCP2, Pin Number.TQFP = 55. RB3/INT3/CCP2, Pin Type. = . RB3/INT3/CCP2, Buffer Type. = . RB3/INT3/CCP2, Description. = . RB3, Pin Number.TQFP",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . RB3, Pin Type. = I/O. RB3, Buffer Type. = TTL. RB3, Description. = Digital I/O.. INT3, Pin Number.TQFP = . INT3, Pin Type. = I. INT3, Buffer Type. = ST. INT3, Description. = External Interrupt 3.. CCP2 (1), Pin Number.TQFP = . CCP2 (1), Pin Type. = O. CCP2 (1), Buffer Type. = Analog. CCP2 (1), Description. = Capture 2 input/Compare 2 output/PWM2 output.. RB4/KBI0, Pin Number.TQFP = 54. RB4/KBI0, Pin Type. = . RB4/KBI0, Buffer Type. = . RB4/KBI0, Description. = . RB4, Pin Number.TQFP = . RB4, Pin Type. = I/O. RB4, Buffer Type. = TTL. RB4, Description. = Digital I/O..",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nKBI0, Pin Number.TQFP = . KBI0, Pin Type. = I. KBI0, Buffer Type. = TTL. KBI0, Description. = Interrupt-on-change pin.. RB5/KBI1, Pin Number.TQFP = 53. RB5/KBI1, Pin Type. = . RB5/KBI1, Buffer Type. = . RB5/KBI1, Description. = . RB5, Pin Number.TQFP = . RB5, Pin Type. = I/O. RB5, Buffer Type. = TTL. RB5, Description. = Digital I/O.. KBI1, Pin Number.TQFP = . KBI1, Pin Type. = I. KBI1, Buffer Type. = TTL. KBI1, Description. = Interrupt-on-change pin.. RB6/KBI2/PGC, Pin Number.TQFP = 52. RB6/KBI2/PGC, Pin Type. = . RB6/KBI2/PGC, Buffer Type.",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . RB6/KBI2/PGC, Description. = . RB6, Pin Number.TQFP = . RB6, Pin Type. = I/O. RB6, Buffer Type. = TTL. RB6, Description. = Digital I/O.. KBI2, Pin Number.TQFP = . KBI2, Pin Type. = I. KBI2, Buffer Type. = TTL. KBI2, Description. = Interrupt-on-change pin.. PGC, Pin Number.TQFP = . PGC, Pin Type. = I/O. PGC, Buffer Type. = ST. PGC, Description. = In-Circuit Debugger and ICSP\u2122 programming clock pin.. RB7/KBI3/PGD, Pin Number.TQFP = 47. RB7/KBI3/PGD, Pin Type. = . RB7/KBI3/PGD, Buffer Type. = . RB7/KBI3/PGD, Description. = . RB7, Pin Number.TQFP = . RB7, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = I/O. RB7, Buffer Type. = TTL. RB7, Description. = Digital I/O.. KBI3, Pin Number.TQFP = . KBI3, Pin Type. = I. KBI3, Buffer Type. = TTL. KBI3, Description. = Interrupt-on-change pin.. PGD, Pin Number.TQFP = . PGD, Pin Type. = I/O. PGD, Buffer Type. = ST. PGD, Description. = In-Circuit Debugger and ICSP programming data pin.",
    "Legend:\nTTL =  TTL compatible input\nST =  Schmitt Trigger input with CMOS levels\nCMOS =  CMOS compatible input or output Analog =  Analog input\nI =  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T13CKI, Pin Number TQFP = 36. RC0/T1OSO/T13CKI, Pin Type = . RC0/T1OSO/T13CKI, Buffer Type = . RC0/T1OSO/T13CKI, Description = PORTC is a bidirectional I/O port.. RC0, Pin Number TQFP = . RC0, Pin Type = I/O. RC0, Buffer Type = ST. RC0, Description = Digital I/O.. T1OSO, Pin Number TQFP = . T1OSO, Pin Type = O. T1OSO, Buffer Type = -. T1OSO, Description = Timer1 oscillator output.. T13CKI, Pin Number TQFP = . T13CKI, Pin Type = I. T13CKI, Buffer Type = ST. T13CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number TQFP = 35. RC1/T1OSI/CCP2, Pin Type = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC1/T1OSI/CCP2, Buffer Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number TQFP = . RC1, Pin Type = I/O. RC1, Buffer Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number TQFP = . T1OSI, Pin Type = I. T1OSI, Buffer Type = CMOS. T1OSI, Description = Timer1 oscillator input.. CCP2 (2), Pin Number TQFP = . CCP2 (2), Pin Type = I/O. CCP2 (2), Buffer Type = ST. CCP2 (2), Description = Capture 2 input/Compare 2 output/PWM2 output.. RC2/CCP1, Pin Number TQFP = 43. RC2/CCP1, Pin Type = . RC2/CCP1, Buffer Type = . RC2/CCP1, Description = . RC2, Pin Number TQFP = . RC2, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType = I/O. RC2, Buffer Type = ST. RC2, Description = Digital I/O.. CCP1, Pin Number TQFP = . CCP1, Pin Type = I/O. CCP1, Buffer Type = ST. CCP1, Description = Capture 1 input/Compare 1 output/PWM1 output.. RC3/SCK/SCL, Pin Number TQFP = 44. RC3/SCK/SCL, Pin Type = . RC3/SCK/SCL, Buffer Type = . RC3/SCK/SCL, Description = . RC3, Pin Number TQFP = . RC3, Pin Type = I/O. RC3, Buffer Type = ST. RC3, Description = Digital I/O.. SCK, Pin Number TQFP = . SCK, Pin Type = I/O. SCK, Buffer Type = ST. SCK, Description = Synchronous serial clock input/output for SPI mode.. SCL, Pin Number TQFP = . SCL, Pin Type =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. SCL, Buffer Type = I 2 C. SCL, Description = Synchronous serial clock input/output for I 2 C mode.. RC4/SDI/SDA, Pin Number TQFP = 45. RC4/SDI/SDA, Pin Type = . RC4/SDI/SDA, Buffer Type = . RC4/SDI/SDA, Description = . RC4, Pin Number TQFP = . RC4, Pin Type = I/O. RC4, Buffer Type = ST. RC4, Description = Digital I/O.. SDI, Pin Number TQFP = . SDI, Pin Type = I. SDI, Buffer Type = ST. SDI, Description = SPI data in.. SDA, Pin Number TQFP = . SDA, Pin Type = I/O. SDA, Buffer Type = I 2 C. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number TQFP = 46. RC5/SDO, Pin Type = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC5/SDO, Buffer Type = . RC5/SDO, Description = . RC5, Pin Number TQFP = . RC5, Pin Type = I/O. RC5, Buffer Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number TQFP = . SDO, Pin Type = O. SDO, Buffer Type = -. SDO, Description = SPI data out.. RC6/TX1/CK1, Pin Number TQFP = 37. RC6/TX1/CK1, Pin Type = . RC6/TX1/CK1, Buffer Type = . RC6/TX1/CK1, Description = . RC6, Pin Number TQFP = . RC6, Pin Type = I/O. RC6, Buffer Type = ST. RC6, Description = Digital I/O.. TX1, Pin Number TQFP = . TX1, Pin Type = O. TX1, Buffer Type = -. TX1, Description = EUSART1 asynchronous transmit.. CK1, Pin Number",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTQFP = . CK1, Pin Type = I/O. CK1, Buffer Type = ST. CK1, Description = EUSART1 synchronous clock (see related RX1/DT1).. RC7/RX1/DT1, Pin Number TQFP = 38. RC7/RX1/DT1, Pin Type = . RC7/RX1/DT1, Buffer Type = . RC7/RX1/DT1, Description = . RC7, Pin Number TQFP = . RC7, Pin Type = I/O. RC7, Buffer Type = ST. RC7, Description = Digital I/O.. RX1, Pin Number TQFP = . RX1, Pin Type = I. RX1, Buffer Type = ST. RX1, Description = EUSART1 asynchronous receive.. DT1, Pin Number TQFP = . DT1, Pin Type = I/O. DT1, Buffer Type = ST. DT1, Description = EUSART1 synchronous data (see",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nrelated TX1/CK1).\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\n- I =  Input\nAnalog\n=  Analog input\nO\n=  Output\n- P =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/AD0/PSP0, Pin Number.TQFP = 72. RD0/AD0/PSP0, Pin Type. = . RD0/AD0/PSP0, Buffer Type. = . RD0/AD0/PSP0, Description.PORTD is a bidirectional I/O port. = . RD0, Pin Number.TQFP = . RD0, Pin Type. = I/O. RD0, Buffer Type. = ST. RD0, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD0, Pin Number.TQFP = . AD0, Pin Type. = I/O. AD0, Buffer Type. = TTL. AD0, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 0.. PSP0, Pin Number.TQFP = . PSP0, Pin Type. = I/O. PSP0, Buffer Type. = TTL. PSP0, Description.PORTD is a",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nbidirectional I/O port. = Parallel Slave Port data.. RD1/AD1/PSP1, Pin Number.TQFP = 69. RD1/AD1/PSP1, Pin Type. = . RD1/AD1/PSP1, Buffer Type. = . RD1/AD1/PSP1, Description.PORTD is a bidirectional I/O port. = . RD1, Pin Number.TQFP = . RD1, Pin Type. = I/O. RD1, Buffer Type. = ST. RD1, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD1, Pin Number.TQFP = . AD1, Pin Type. = I/O. AD1, Buffer Type. = TTL. AD1, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 1.. PSP1, Pin Number.TQFP = . PSP1, Pin Type. = I/O. PSP1, Buffer",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType. = TTL. PSP1, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD2/AD2/PSP2, Pin Number.TQFP = 68. RD2/AD2/PSP2, Pin Type. = . RD2/AD2/PSP2, Buffer Type. = . RD2/AD2/PSP2, Description.PORTD is a bidirectional I/O port. = . RD2, Pin Number.TQFP = . RD2, Pin Type. = I/O. RD2, Buffer Type. = ST. RD2, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD2, Pin Number.TQFP = . AD2, Pin Type. = I/O. AD2, Buffer Type. = TTL. AD2, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 2.. PSP2, Pin Number.TQFP = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPSP2, Pin Type. = I/O. PSP2, Buffer Type. = TTL. PSP2, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD3/AD3/PSP3, Pin Number.TQFP = 67. RD3/AD3/PSP3, Pin Type. = . RD3/AD3/PSP3, Buffer Type. = . RD3/AD3/PSP3, Description.PORTD is a bidirectional I/O port. = . RD3, Pin Number.TQFP = . RD3, Pin Type. = I/O. RD3, Buffer Type. = ST. RD3, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD3, Pin Number.TQFP = . AD3, Pin Type. = I/O. AD3, Buffer Type. = TTL. AD3, Description.PORTD is a bidirectional I/O port. = External Memory",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAddress/Data 3.. PSP3, Pin Number.TQFP = . PSP3, Pin Type. = I/O. PSP3, Buffer Type. = TTL. PSP3, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD4/AD4/PSP4, Pin Number.TQFP = 66. RD4/AD4/PSP4, Pin Type. = . RD4/AD4/PSP4, Buffer Type. = . RD4/AD4/PSP4, Description.PORTD is a bidirectional I/O port. = . RD4, Pin Number.TQFP = . RD4, Pin Type. = I/O. RD4, Buffer Type. = ST. RD4, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD4, Pin Number.TQFP = . AD4, Pin Type. = I/O. AD4, Buffer Type. = TTL. AD4,",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDescription.PORTD is a bidirectional I/O port. = External Memory Address/Data 4.. PSP4, Pin Number.TQFP = . PSP4, Pin Type. = I/O. PSP4, Buffer Type. = TTL. PSP4, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD5/AD5/PSP5, Pin Number.TQFP = 65. RD5/AD5/PSP5, Pin Type. = . RD5/AD5/PSP5, Buffer Type. = . RD5/AD5/PSP5, Description.PORTD is a bidirectional I/O port. = . RD5, Pin Number.TQFP = . RD5, Pin Type. = I/O. RD5, Buffer Type. = ST. RD5, Description.PORTD is a bidirectional I/O port. = Digital I/O.. AD5, Pin Number.TQFP = . AD5, Pin Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. AD5, Buffer Type. = TTL. AD5, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 5.. PSP5, Pin Number.TQFP = . PSP5, Pin Type. = I/O. PSP5, Buffer Type. = TTL. PSP5, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD6/AD6/PSP6, Pin Number.TQFP = 64. RD6/AD6/PSP6, Pin Type. = . RD6/AD6/PSP6, Buffer Type. = . RD6/AD6/PSP6, Description.PORTD is a bidirectional I/O port. = . RD6, Pin Number.TQFP = . RD6, Pin Type. = I/O. RD6, Buffer Type. = ST. RD6, Description.PORTD is a bidirectional I/O port. = Digital I/O..",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAD6, Pin Number.TQFP = . AD6, Pin Type. = I/O. AD6, Buffer Type. = TTL. AD6, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 6.. PSP6, Pin Number.TQFP = . PSP6, Pin Type. = I/O. PSP6, Buffer Type. = TTL. PSP6, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.. RD7/AD7/PSP7, Pin Number.TQFP = 63. RD7/AD7/PSP7, Pin Type. = . RD7/AD7/PSP7, Buffer Type. = . RD7/AD7/PSP7, Description.PORTD is a bidirectional I/O port. = . RD7, Pin Number.TQFP = . RD7, Pin Type. = I/O. RD7, Buffer Type. = ST. RD7, Description.PORTD is a",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nbidirectional I/O port. = Digital I/O.. AD7, Pin Number.TQFP = . AD7, Pin Type. = I/O. AD7, Buffer Type. = TTL. AD7, Description.PORTD is a bidirectional I/O port. = External Memory Address/Data 7.. PSP7, Pin Number.TQFP = . PSP7, Pin Type. = I/O. PSP7, Buffer Type. = TTL. PSP7, Description.PORTD is a bidirectional I/O port. = Parallel Slave Port data.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog\n=  Analog input\nI =  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/AD8/RD, Pin Number.TQFP = 4. RE0/AD8/RD, Pin Type. = . RE0/AD8/RD, Buffer Type. = . RE0/AD8/RD, Description. = . RE0, Pin Number.TQFP = . RE0, Pin Type. = I/O. RE0, Buffer Type. = ST. RE0, Description. = Digital I/O.. AD8, Pin Number.TQFP = . AD8, Pin Type. = I/O. AD8, Buffer Type. = TTL. AD8, Description. = External Memory Address/Data 8.. RD, Pin Number.TQFP = . RD, Pin Type. = I. RD, Buffer Type. = TTL. RD, Description. = Read control for Parallel Slave Port.. RE1/AD9/WR, Pin Number.TQFP = 3. RE1/AD9/WR, Pin Type. = . RE1/AD9/WR, Buffer Type. = . RE1/AD9/WR, Description. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. RE1, Pin Number.TQFP = . RE1, Pin Type. = I/O. RE1, Buffer Type. = ST. RE1, Description. = Digital I/O.. AD9, Pin Number.TQFP = . AD9, Pin Type. = I/O. AD9, Buffer Type. = TTL. AD9, Description. = External Memory Address/Data 9.. WR, Pin Number.TQFP = . WR, Pin Type. = I. WR, Buffer Type. = TTL. WR, Description. = Write control for Parallel Slave Port.. RE2/AD10/CS, Pin Number.TQFP = 78. RE2/AD10/CS, Pin Type. = . RE2/AD10/CS, Buffer Type. = . RE2/AD10/CS, Description. = . RE2, Pin Number.TQFP = . RE2, Pin Type. = I/O. RE2, Buffer Type. = ST. RE2, Description. = Digital I/O.. AD10, Pin Number.TQFP = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAD10, Pin Type. = I/O. AD10, Buffer Type. = TTL. AD10, Description. = External Memory Address/Data 10.. CS, Pin Number.TQFP = . CS, Pin Type. = I. CS, Buffer Type. = TTL. CS, Description. = Chip Select control for Parallel Slave Port.. RE3/AD11, Pin Number.TQFP = 77. RE3/AD11, Pin Type. = . RE3/AD11, Buffer Type. = . RE3/AD11, Description. = . RE3, Pin Number.TQFP = . RE3, Pin Type. = I/O. RE3, Buffer Type. = ST. RE3, Description. = Digital I/O.. AD11, Pin Number.TQFP = . AD11, Pin Type. = I/O. AD11, Buffer Type. = TTL. AD11, Description. = External Memory Address/Data 11.. RE4/AD12, Pin Number.TQFP = 76. RE4/AD12, Pin Type. = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE4/AD12, Buffer Type. = . RE4/AD12, Description. = . RE4, Pin Number.TQFP = . RE4, Pin Type. = I/O. RE4, Buffer Type. = ST. RE4, Description. = Digital I/O.. AD12, Pin Number.TQFP = . AD12, Pin Type. = I/O. AD12, Buffer Type. = TTL. AD12, Description. = External Memory Address/Data 12.. RE5/AD13, Pin Number.TQFP = 75. RE5/AD13, Pin Type. = . RE5/AD13, Buffer Type. = . RE5/AD13, Description. = . RE5, Pin Number.TQFP = . RE5, Pin Type. = I/O. RE5, Buffer Type. = ST. RE5, Description. = Digital I/O.. AD13, Pin Number.TQFP = . AD13, Pin Type. = I/O. AD13, Buffer Type. = TTL. AD13, Description. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nExternal Memory Address/Data 13.. RE6/AD14, Pin Number.TQFP = 74. RE6/AD14, Pin Type. = . RE6/AD14, Buffer Type. = . RE6/AD14, Description. = . RE6, Pin Number.TQFP = . RE6, Pin Type. = I/O. RE6, Buffer Type. = ST. RE6, Description. = Digital I/O.. AD14, Pin Number.TQFP = . AD14, Pin Type. = I/O. AD14, Buffer Type. = TTL. AD14, Description. = External Memory Address/Data 14.. RE7/CCP2/AD15, Pin Number.TQFP = 73. RE7/CCP2/AD15, Pin Type. = . RE7/CCP2/AD15, Buffer Type. = . RE7/CCP2/AD15, Description. = . RE7, Pin Number.TQFP = . RE7, Pin Type. = I/O. RE7, Buffer Type. = ST.",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE7, Description. = Digital I/O.. CCP2 (3), Pin Number.TQFP = . CCP2 (3), Pin Type. = I/O. CCP2 (3), Buffer Type. = ST. CCP2 (3), Description. = Capture 2 input/Compare 2 output/PWM2 output.. AD15, Pin Number.TQFP = . AD15, Pin Type. = I/O. AD15, Buffer Type. = TTL. AD15, Description. = External Memory Address/Data 15.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog =  Analog input\nI =  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRF0/AN5, Pin Number.TQFP = 24. RF0/AN5, Pin Type. = . RF0/AN5, Buffer Type. = . RF0/AN5, Description. = . RF0, Pin Number.TQFP = . RF0, Pin Type. = I/O. RF0, Buffer Type. = ST. RF0, Description. = Digital I/O.. AN5, Pin Number.TQFP = . AN5, Pin Type. = I. AN5, Buffer Type. = Analog. AN5, Description. = Analog Input 5.. RF1/AN6/C2OUT, Pin Number.TQFP = 23. RF1/AN6/C2OUT, Pin Type. = . RF1/AN6/C2OUT, Buffer Type. = . RF1/AN6/C2OUT, Description. = . RF1, Pin Number.TQFP = . RF1, Pin Type. = I/O. RF1, Buffer Type. = ST. RF1, Description. = Digital I/O.. AN6, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . AN6, Pin Type. = I. AN6, Buffer Type. = Analog. AN6, Description. = Analog Input. C2OUT, Pin Number.TQFP = . C2OUT, Pin Type. = O. C2OUT, Buffer Type. = -. C2OUT, Description. = 6. Comparator 2 output.. RF2/AN7/C1OUT, Pin Number.TQFP = 18. RF2/AN7/C1OUT, Pin Type. = . RF2/AN7/C1OUT, Buffer Type. = . RF2/AN7/C1OUT, Description. = . RF2, Pin Number.TQFP = . RF2, Pin Type. = I/O. RF2, Buffer Type. = ST. RF2, Description. = Digital I/O.. AN7, Pin Number.TQFP = . AN7, Pin Type. = I. AN7, Buffer Type. = Analog. AN7, Description. = Analog Input 7.. C1OUT, Pin Number.TQFP = . C1OUT, Pin Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nO. C1OUT, Buffer Type. = -. C1OUT, Description. = Comparator 1 output.. RF3/AN8, Pin Number.TQFP = 17. RF3/AN8, Pin Type. = . RF3/AN8, Buffer Type. = . RF3/AN8, Description. = . RF3, Pin Number.TQFP = . RF3, Pin Type. = I/O. RF3, Buffer Type. = ST. RF3, Description. = Digital I/O.. AN8, Pin Number.TQFP = . AN8, Pin Type. = I. AN8, Buffer Type. = Analog. AN8, Description. = Analog Input 8.. RF4/AN9, Pin Number.TQFP = 16. RF4/AN9, Pin Type. = . RF4/AN9, Buffer Type. = . RF4/AN9, Description. = . RF4, Pin Number.TQFP = . RF4, Pin Type. = I/O. RF4, Buffer Type. = ST. RF4, Description. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDigital I/O.. AN9, Pin Number.TQFP = . AN9, Pin Type. = I. AN9, Buffer Type. = Analog. AN9, Description. = Analog Input 9.. RF5/AN10/CVREF, Pin Number.TQFP = 15. RF5/AN10/CVREF, Pin Type. = . RF5/AN10/CVREF, Buffer Type. = . RF5/AN10/CVREF, Description. = . RF5, Pin Number.TQFP = . RF5, Pin Type. = I/O. RF5, Buffer Type. = ST. RF5, Description. = Digital I/O.. AN10, Pin Number.TQFP = . AN10, Pin Type. = I. AN10, Buffer Type. = Analog. AN10, Description. = Analog Input 10.. CVREF, Pin Number.TQFP = . CVREF, Pin Type. = O. CVREF, Buffer Type. = Analog. CVREF, Description. = Comparator reference voltage",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\noutput.. RF6/AN11, Pin Number.TQFP = 14. RF6/AN11, Pin Type. = . RF6/AN11, Buffer Type. = . RF6/AN11, Description. = . RF6, Pin Number.TQFP = . RF6, Pin Type. = I/O. RF6, Buffer Type. = ST. RF6, Description. = Digital I/O.. AN11, Pin Number.TQFP = . AN11, Pin Type. = I. AN11, Buffer Type. = Analog. AN11, Description. = Analog Input 11.. RF7/SS, Pin Number.TQFP = 13. RF7/SS, Pin Type. = . RF7/SS, Buffer Type. = . RF7/SS, Description. = . RF7, Pin Number.TQFP = . RF7, Pin Type. = I/O. RF7, Buffer Type. = ST. RF7, Description. = Digital I/O.. SS, Pin Number.TQFP = . SS, Pin Type. = I. SS,",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nBuffer Type. = TTL. SS, Description. = SPI slave select input.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nI\n=  Input\nAnalog\n=  Analog input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRG0/CCP3, Pin Number.TQFP = 5. RG0/CCP3, Pin Type. = . RG0/CCP3, Buffer Type. = . RG0/CCP3, Description. = PORTG is a bidirectional I/O port.. RG0, Pin Number.TQFP = . RG0, Pin Type. = I/O. RG0, Buffer Type. = ST. RG0, Description. = Digital I/O.. CCP3, Pin Number.TQFP = . CCP3, Pin Type. = I/O. CCP3, Buffer Type. = ST. CCP3, Description. = Capture 3 input/Compare 3 output/PWM3 output.. RG1/TX2/CK2, Pin Number.TQFP = 6. RG1/TX2/CK2, Pin Type. = . RG1/TX2/CK2, Buffer Type. = . RG1/TX2/CK2, Description. = .",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRG1, Pin Number.TQFP = . RG1, Pin Type. = I/O. RG1, Buffer Type. = ST. RG1, Description. = Digital I/O.. TX2, Pin Number.TQFP = . TX2, Pin Type. = O. TX2, Buffer Type. = -. TX2, Description. = AUSART2 asynchronous transmit.. CK2, Pin Number.TQFP = . CK2, Pin Type. = I/O. CK2, Buffer Type. = ST. CK2, Description. = AUSART2 synchronous clock (see related RX2/DT2).. RG2/RX2/DT2, Pin Number.TQFP = 7. RG2/RX2/DT2, Pin Type. = . RG2/RX2/DT2, Buffer Type. = . RG2/RX2/DT2, Description. = . RG2, Pin Number.TQFP = . RG2, Pin Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. RG2, Buffer Type. = ST. RG2, Description. = Digital I/O.. RX2, Pin Number.TQFP = . RX2, Pin Type. = I. RX2, Buffer Type. = ST. RX2, Description. = AUSART2 asynchronous receive.. DT2, Pin Number.TQFP = . DT2, Pin Type. = I/O. DT2, Buffer Type. = ST. DT2, Description. = AUSART2 synchronous data (see related TX2/CK2).. RG3, Pin Number.TQFP = 8. RG3, Pin Type. = I/O. RG3, Buffer Type. = ST. RG3, Description. = Digital I/O.. RG4, Pin Number.TQFP = 10. RG4, Pin Type. = I/O. RG4, Buffer Type. = ST. RG4, Description. = Digital I/O.. RG5, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . RG5, Pin Type. = . RG5, Buffer Type. = . RG5, Description. = See RG5/MCLR/VPP pin.. , Pin Number.TQFP = . , Pin Type. = . , Buffer Type. = . , Description. = PORTH is a bidirectional I/O port.. RH0/AD16, Pin Number.TQFP = 79. RH0/AD16, Pin Type. = . RH0/AD16, Buffer Type. = . RH0/AD16, Description. = . RH0, Pin Number.TQFP = . RH0, Pin Type. = I/O. RH0, Buffer Type. = ST. RH0, Description. = Digital I/O.. AD16, Pin Number.TQFP = . AD16, Pin Type. = I/O. AD16, Buffer Type. = TTL. AD16, Description. = External Memory Address/Data 16.. RH1/AD17, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = 80. RH1/AD17, Pin Type. = . RH1/AD17, Buffer Type. = . RH1/AD17, Description. = . RH1, Pin Number.TQFP = . RH1, Pin Type. = I/O. RH1, Buffer Type. = ST. RH1, Description. = Digital I/O.. AD17, Pin Number.TQFP = . AD17, Pin Type. = I/O. AD17, Buffer Type. = TTL. AD17, Description. = External Memory Address/Data 17.. RH2/AD18, Pin Number.TQFP = 1. RH2/AD18, Pin Type. = . RH2/AD18, Buffer Type. = . RH2/AD18, Description. = . RH2, Pin Number.TQFP = . RH2, Pin Type. = I/O. RH2, Buffer Type. = ST. RH2, Description. = Digital I/O.. AD18, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . AD18, Pin Type. = I/O. AD18, Buffer Type. = TTL. AD18, Description. = External Memory Address/Data 18.. RH3/AD19, Pin Number.TQFP = 2. RH3/AD19, Pin Type. = . RH3/AD19, Buffer Type. = . RH3/AD19, Description. = . RH3, Pin Number.TQFP = . RH3, Pin Type. = I/O. RH3, Buffer Type. = ST. RH3, Description. = Digital I/O.. AD19, Pin Number.TQFP = . AD19, Pin Type. = I/O. AD19, Buffer Type. = TTL. AD19, Description. = External Memory Address/Data 19.. RH4, Pin Number.TQFP = 22. RH4, Pin Type. = I/O. RH4, Buffer Type. = ST. RH4, Description. = Digital I/O.. RH5,",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin Number.TQFP = 21. RH5, Pin Type. = I/O. RH5, Buffer Type. = ST. RH5, Description. = Digital I/O.. RH6, Pin Number.TQFP = 20. RH6, Pin Type. = I/O. RH6, Buffer Type. = ST. RH6, Description. = Digital I/O.. RH7, Pin Number.TQFP = 19. RH7, Pin Type. = I/O. RH7, Buffer Type. = ST. RH7, Description. = Digital I/O.\nLegend:\nTTL =  TTL compatible input\nCMOS =  CMOS compatible input or output\nST =  Schmitt Trigger input with CMOS levels\nAnalog =  Analog input\nI\n=  Input\nO\n=  Output\nP =  Power\nI 2 C = ST with I 2 C\u2122 or SMB levels",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRJ0/ALE RJ0, Pin Number.TQFP = 62. RJ0/ALE RJ0, Pin Type. = I/O. RJ0/ALE RJ0, Buffer Type. = ST -. RJ0/ALE RJ0, Description. = Digital I/O. External memory address latch enable.. RJ1/OE RJ1 OE RJ2/WRL RJ2, Pin Number.TQFP = 61 60 59. RJ1/OE RJ1 OE RJ2/WRL RJ2, Pin Type. = I/O O I/O O I/O. RJ1/OE RJ1 OE RJ2/WRL RJ2, Buffer Type. = ST - ST. RJ1/OE RJ1 OE RJ2/WRL RJ2, Description. = Digital I/O. External memory output enable. Digital I/O.. RJ3/WRH RJ3 WRH RJ4/BA0, Pin",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = 39. RJ3/WRH RJ3 WRH RJ4/BA0, Pin Type. = O. RJ3/WRH RJ3 WRH RJ4/BA0, Buffer Type. = ST -. RJ3/WRH RJ3 WRH RJ4/BA0, Description. = Digital I/O. External memory write high control.. RJ4 BA0, Pin Number.TQFP = . RJ4 BA0, Pin Type. = I/O O. RJ4 BA0, Buffer Type. = ST -. RJ4 BA0, Description. = Digital I/O. External Memory Byte Address 0 control.. RJ5/CE, Pin Number.TQFP = . RJ5/CE, Pin Type. = . RJ5/CE, Buffer Type. = . RJ5/CE, Description. = . RJ4 CE, Pin Number.TQFP = 40. RJ4 CE, Pin Type. = I/O O. RJ4 CE, Buffer Type. =",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nST -. RJ4 CE, Description. = Digital I/O External memory chip enable control.. RJ6/LB RJ6 LB, Pin Number.TQFP = 41. RJ6/LB RJ6 LB, Pin Type. = I/O O. RJ6/LB RJ6 LB, Buffer Type. = ST -. RJ6/LB RJ6 LB, Description. = Digital I/O. External memory low byte control.. RJ7/UB RJ7, Pin Number.TQFP = 42. RJ7/UB RJ7, Pin Type. = I/O O. RJ7/UB RJ7, Buffer Type. = ST -. RJ7/UB RJ7, Description. = Digital I/O. External memory high byte control.. UB, Pin Number.TQFP = 11, 31, 51, 70. UB, Pin Type. = P. UB, Buffer Type. = -. UB, Description. = Ground reference for logic and I/O pins..",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nVSS, Pin Number.TQFP = . VSS, Pin Type. = P. VSS, Buffer Type. = . VSS, Description. = . VDD, Pin Number.TQFP = 12, 32, 48, 71. VDD, Pin Type. = . VDD, Buffer Type. = -. VDD, Description. = Positive supply for logic and I/O pins.. , Pin Number.TQFP = . , Pin Type. = P. , Buffer Type. = . , Description. = . , Pin Number.TQFP = 26. , Pin Type. = . , Buffer Type. = . , Description. = . , Pin Number.TQFP = . , Pin Type. = . , Buffer Type. = -. , Description. = Ground reference for analog modules.. AVSS, Pin Number.TQFP = . AVSS, Pin Type. = P. AVSS, Buffer Type. = . AVSS, Description. = . AVDD, Pin Number.TQFP = . AVDD, Pin Type. = . AVDD, Buffer Type. = -. AVDD,",
    "TABLE 1-3: PIC18F8310/8410 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDescription. = Positive supply for analog modules.. , Pin Number.TQFP = 25. , Pin Type. = . , Buffer Type. = . , Description. = \nLegend:\nTTL =  TTL compatible input\nST =  Schmitt Trigger input with CMOS levels\nI\n=  Input\nP =  Power\nCMOS\n=  CMOS compatible input or output\nAnalog =  Analog input\nO\n=  Output\nI 2 C = ST with I 2 C\u2122 or SMB levels\nNote 1: Alternate assignment for CCP2 when Configuration bit, CCP2MX, is cleared (all operating modes except Microcontroller mode).\n2: Default assignment for CCP2 in all operating modes (CCP2MX is set).\n3: Alternate assignment for CCP2 when CCP2MX is cleared (Microcontroller mode only).",
    "2.1 Basic Connection Requirements\nGetting started with the PIC18F6310/6410/8310/8410 family of 8-bit microcontrollers requires attention to a minimal set of device pin connections before proceeding with development.\nThe following pins must always be connected:\n\u00b7 All VDD and VSS pins (see Section 2.2 'Power Supply Pins' )\n\u00b7 All AVDD and AVSS pins, regardless of whether or not the analog device features are used (see Section 2.2 'Power Supply Pins' )\n\u2022\nMCLR pin\n(see Section 2.3 'Master Clear (MCLR) Pin' )\nThese pins must also be connected if they are being used in the end application:\n\u00b7 PGC/PGD pins used for In-Circuit Serial Programming\u2122 (ICSP\u2122) and debugging purposes (see Section 2.4 'ICSP Pins' )\n\u00b7 OSCI and OSCO pins when an external oscillator source is used (see Section 2.5 'External Oscillator Pins' )\nAdditionally, the following pins may be required:\n- \u00b7 VREF+/VREF- pins are used when external voltage reference for analog modules is implemented\nNote:",
    "2.1 Basic Connection Requirements\nThe AVDD and AVSS pins must always be connected, regardless of whether any of the analog modules are being used.\nThe  minimum  mandatory  connections  are  shown  in Figure 2-1.",
    "Key (all values are recommendations):\nC1 through C6: 0.1 \u00b5F, 20V ceramic\nR1: 10 k \u2126\nR2: 100 \u2126 to 470 \u2126\nNote 1:\nThe example shown is for a PIC18F device with five VDD/VSS and AVDD/AVSS pairs. Other devices may have more or less pairs; adjust the number of decoupling capacitors appropriately.",
    "2.2.1 DECOUPLING CAPACITORS\nThe  use  of  decoupling  capacitors  on  every  pair  of power  supply  pins,  such  as  VDD,  VSS,  AVDD  and AVSS, is required.\nConsider the following criteria when using decoupling capacitors:\n\u00b7 Value and type of capacitor: A 0.1 \uf06d F (100 nF), 10-20V capacitor is recommended. The capacitor should be a low-ESR device, with a resonance frequency in the range of 200 MHz and higher. Ceramic capacitors are recommended.\n\u00b7 Placement on the printed circuit board: The decoupling capacitors should be placed as close to the pins as possible. It is recommended to place the capacitors on the same side of the board as the device. If space is constricted, the capacitor can be placed on another layer on the PCB using a via; however, ensure that the trace length from the pin to the capacitor is no greater than 0.25 inch (6 mm).",
    "2.2.1 DECOUPLING CAPACITORS\n\u00b7 Handling high-frequency noise: If the board is experiencing high-frequency noise (upward of tens of MHz), add a second ceramic type capacitor in parallel to the above described decoupling capacitor. The value of the second capacitor can be in the range of 0.01 \uf06d F to 0.001 \uf06d F. Place this second capacitor next to each primary decoupling capacitor. In high-speed circuit designs, consider implementing a decade pair of capacitances as close to the power and ground pins as possible (e.g., 0.1 \uf06d F in parallel with 0.001 \uf06d F).\n\u00b7 Maximizing performance: On the board layout from the power supply circuit, run the power and return traces to the decoupling capacitors first, and then to the device pins. This ensures that the decoupling capacitors are first in the power chain. Equally important is to keep the trace length between the capacitor and the power pins to a minimum, thereby reducing PCB trace inductance.",
    "2.2.1 DECOUPLING CAPACITORS\nOn  boards  with  power  traces  running  longer  than six inches in length, it is suggested to use a tank capacitor for integrated circuits, including microcontrollers, to supply  a  local  power  source.  The  value  of  the  tank capacitor  should  be  determined  based  on  the  trace resistance  that  connects  the  power  supply  source  to the  device,  and  the  maximum  current  drawn  by  the device in the application. In other words, select the tank capacitor so that it meets the acceptable voltage sag at the device. Typical values range from 4.7 \uf06d F to 47 \uf06d F.",
    "2.2.3 CONSIDERATIONS WHEN USING BOR\nWhen the Brown-out Reset (BOR) feature is enabled, a sudden change in VDD may result in a spontaneous BOR event. This can happen when the microcontroller is operating under normal operating conditions, regardless of what the BOR set point has been programmed to, and even if VDD does not approach the set point. The precipitating factor in these BOR events is a rise or fall in VDD with a slew rate faster than 0.15V/ \uf06d s.\nAn application that incorporates adequate decoupling between the power supplies will not experience such rapid  voltage  changes.  Additionally,  the  use  of  an electrolytic  tank  capacitor  across  VDD  and  VSS,  as described above, will be helpful in preventing high slew rate transitions.\nIf  the  application has components that turn on or off, and share the same VDD circuit as the microcontroller, the  BOR  can  be  disabled  in  software  by  using  the SBOREN bit before  switching  the  component.  Afterwards, allow a small delay before re-enabling the BOR. By doing this, it is ensured that the BOR is disabled during  the  interval  that  might  cause  high  slew  rate changes of VDD.",
    "2.2.3 CONSIDERATIONS WHEN USING BOR\nNote:\nNot all devices incorporate software BOR control. See Section 5.0 'Reset' for device-specific information.",
    "2.3 Master Clear (MCLR) Pin\nThe MCLR pin provides two specific device functions:  Device  Reset,  and  Device  Programming and  Debugging.  If  programming  and  debugging  are not required in the end application, a direct connection  to  VDD  may  be  all  that  is  required.  The addition  of  other  components,  to  help  increase  the application's resistance to spurious Resets from voltage sags, may be beneficial. A typical configuration  is  shown  in  Figure 2-1.  Other  circuit designs  may  be  implemented,  depending  on  the application's requirements.\nDuring  programming  and  debugging,  the  resistance and capacitance that can be added to the pin must be considered. Device programmers and debuggers drive the  MCLR  pin.  Consequently,  specific  voltage  levels (VIH  and  VIL)  and  fast  signal  transitions  must  not  be adversely  affected.  Therefore,  specific  values  of  R1 and C1  will need  to be adjusted based  on the application  and  PCB  requirements.  For  example,  it  is recommended that the capacitor, C1, be isolated from the  MCLR  pin  during  programming  and  debugging operations by using a jumper (Figure 2-2). The jumper is replaced for normal run-time operations.",
    "2.3 Master Clear (MCLR) Pin\nAny components associated with the MCLR  pin should be placed within 0.25 inch (6 mm) of the pin.",
    "FIGURE 2-2: EXAMPLE OF MCLR PIN CONNECTIONS\nNote 1: R1 \uf0a3 10 k \uf057 is  recommended. A suggested starting value  is 10 k \uf057 . Ensure  that  the MCLR pin VIH and VIL specifications are met.\n2: R2 \uf0a3 470 \uf057 will limit any current flowing into MCLR from the external capacitor, C, in the event of MCLR  pin  breakdown,  due to Electrostatic  Discharge  (ESD)  or  Electrical Overstress (EOS). Ensure that the MCLR pin VIH and VIL specifications are met.",
    "2.4 ICSP Pins\nThe PGC and PGD pins are used for In-Circuit Serial Programming\u2122 (ICSP\u2122) and debugging purposes. It is recommended to keep the trace length between the ICSP connector and the ICSP pins on the device as short as possible. If the ICSP connector is expected to experience an ESD event, a series resistor is recommended, with the value in the range of a few tens of ohms, not to exceed 100 \u2126 .\nPull-up resistors, series diodes, and capacitors on the PGC and PGD pins are not recommended as they will interfere  with  the  programmer/debugger  communications to the device. If such discrete components are an application requirement, they should be removed from the circuit during programming and debugging. Alternatively, refer to the AC/DC characteristics and timing requirements  information in the respective device Flash  programming  specification  for  information  on capacitive loading limits and pin input voltage high (VIH) and input low (VIL) requirements.",
    "2.4 ICSP Pins\nFor device emulation, ensure that the 'Communication Channel Select' (i.e., PGCx/PGDx pins) programmed into the  device  matches the physical connections for the ICSP to the Microchip debugger/emulator tool.\nFor more information on available Microchip development  tools  connection  requirements,  refer  to Section 26.0 'Development Support' .",
    "FIGURE 2-3:\nMany  microcontrollers  have  options  for  at  least  two oscillators:  a  high-frequency  primary  oscillator  and  a low-frequency secondary oscillator (refer to Section 3.0 'Oscillator Configurations' for details).\nThe  oscillator  circuit  should  be  placed  on  the  same side  of  the  board  as  the  device.  Place  the  oscillator circuit  close  to  the  respective  oscillator  pins  with  no more than 0.5 inch (12 mm) between the circuit components and the pins. The load capacitors should be placed next to the oscillator itself, on the same side of the board.\nUse a grounded copper pour around the oscillator circuit to isolate it from surrounding circuits. The grounded copper pour should be routed directly to the MCU ground. Do not run any signal traces or power traces inside the ground pour. Also, if using a two-sided board, avoid any traces on the other side of the board where the crystal is placed.",
    "FIGURE 2-3:\nLayout  suggestions  are  shown  in  Figure  2-4.  In-line packages may be handled with a single-sided layout that completely encompasses the oscillator pins. With fine-pitch packages, it is not always possible to completely surround the pins and components. A suitable solution is to tie the broken guard sections to a mirrored ground layer. In all cases, the guard trace(s) must be returned to ground.\nIn  planning  the  application's  routing  and  I/O  assignments, ensure that adjacent port pins and other signals in close proximity to the oscillator are benign (i.e., free of high frequencies, short rise and fall times, and other similar noise).\nFor  additional  information  and  design  guidance  on oscillator circuits, please  refer  to  these  Microchip Application Notes, available at the corporate web site (www.microchip.com):",
    "FIGURE 2-3:\n\u00b7 AN826,  Crystal Oscillator Basics and Crystal ' Selection for rfPIC\u2122 and PICmicro \u00ae  Devices'\n\u00b7 AN849, 'Basic PICmicro \u00ae  Oscillator Design'\n\u00b7 AN943, 'Practical PICmicro \u00ae  Oscillator Analysis and Design'\n\u00b7 AN949, 'Making Your Oscillator Work'",
    "2.6 Unused I/Os\nUnused I/O pins should be configured as outputs and driven to a logic low state. Alternatively, connect a 1 k \u2126 to 10 k \u2126 resistor to VSS on unused pins and drive the output to logic low.",
    "3.1 Oscillator Types\nPIC18F6310/6410/8310/8410 devices can be operated in ten different oscillator modes. The user can program the  Configuration  bits,  FOSC<3:0>,  in  Configuration Register 1H to select one of these ten modes:\n1. LP\nLow-Power Crystal\n2. XT\nCrystal/Resonator\n3. HS\nHigh-Speed Crystal/Resonator\n4. HSPLL\nHigh-Speed Crystal/Resonator with PLL enabled\n5. RC\nExternal Resistor/Capacitor with FOSC/4 output on RA6\n6. RCIO\nExternal Resistor/Capacitor with I/O on RA6\n7. INTIO1\nInternal Oscillator with FOSC/4 output on RA6 and I/O on RA7\n8. INTIO2\nInternal Oscillator with I/O on RA6 and RA7\n9. EC\nExternal Clock with FOSC/4 output\n10. ECIO\nExternal Clock with I/O on RA6",
    "3.2 Crystal Oscillator/Ceramic Resonators\nIn XT, LP, HS or HSPLL Oscillator modes, a crystal or ceramic  resonator  is  connected  to  the  OSC1  and OSC2 pins to establish  oscillation.  Figure 3-1  shows the pin connections.\nThe  oscillator  design  requires  the  use  of  a  parallel resonant crystal.\nNote:, 1 = Use of a series resonant crystal may give a frequency out of the crystal manufacturer's specifications.",
    "FIGURE 3-1:\nCRYSTAL/CERAMIC RESONATOR OPERATION (XT, LP, HS OR HSPLL CONFIGURATION)\nNote 1: See Table 3-1 and Table 3-2 for initial values of C1 and C2.\n2: A series resistor (RS) may be required for AT strip cut crystals.\n3: RF varies with the oscillator mode chosen.",
    "Typical Capacitor Values Used:\nXT, Freq = 455 kHz. XT, OSC1 = 56 pF. XT, OSC2 = 56 pF. , Freq = 2.0 MHz. , OSC1 = 47 pF. , OSC2 = 47 pF. , Freq = 4.0 MHz. , OSC1 = 33 pF. , OSC2 = 33 pF. HS, Freq = 8.0 MHz. HS, OSC1 = 27 pF. HS, OSC2 = 27 pF. , Freq = 16.0 MHz. , OSC1 = 22 pF. , OSC2 = 22 pF",
    "Capacitor values are for design guidance only.\nThese  capacitors  were  tested  with  the  resonators listed below for basic start-up and operation. These values are not optimized .\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following Table 3-2 for additional information.\n455 kHz, Resonators Used: = 4.0 MHz. 2.0 MHz, Resonators Used: = 8.0 MHz. 16.0 MHz, Resonators Used: = 16.0 MHz",
    "TABLE 3-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nAn external clock source may also be connected to the OSC1 pin in the HS mode, as shown in Figure 3-2.",
    "TABLE 3-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nLP, Crystal Freq.Crystal Freq = 32 kHz. LP, Typical Capacitor Values Tested:.C1 = 33 pF. LP, Typical Capacitor Values Tested:.C2 = 33 pF. LP, Crystal Freq.Crystal Freq = 200 kHz. LP, Typical Capacitor Values Tested:.C1 = 15 pF. LP, Typical Capacitor Values Tested:.C2 = 15 pF. XT, Crystal Freq.Crystal Freq = 1 MHz. XT, Typical Capacitor Values Tested:.C1 = 33 pF. XT, Typical Capacitor Values Tested:.C2 = 33 pF. XT, Crystal Freq.Crystal Freq = 4 MHz. XT, Typical Capacitor Values Tested:.C1 = 27 pF. XT, Typical Capacitor Values Tested:.C2 = 27 pF. HS, Crystal Freq.Crystal Freq = 4 MHz. HS, Typical Capacitor Values Tested:.C1 = 27 pF. HS, Typical Capacitor Values Tested:.C2 = 27 pF.",
    "TABLE 3-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nHS, Crystal Freq.Crystal Freq = 8 MHz. HS, Typical Capacitor Values Tested:.C1 = 22 pF. HS, Typical Capacitor Values Tested:.C2 = 22 pF. HS, Crystal Freq.Crystal Freq = 20 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF\nCapacitor values are for design guidance only.\nThese capacitors were tested with the crystals listed below for basic start-up and operation. These values are not optimized.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following  this  table  for  additional information.\n32 kHz, Crystals Used: = 4 MHz. 200 kHz, Crystals Used: = 8 MHz. 1 MHz, Crystals Used: = 20 MHz",
    "TABLE 3-2: CAPACITOR SELECTION FOR CRYSTAL OSCILLATOR\nNote 1: Higher capacitance increases the stability of oscillator, but also increases the start-up time.\n2: When operating below 3V VDD, or when using certain ceramic resonators at any voltage, it may be necessary to use the HS mode or switch to a crystal oscillator.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer  for appropriate values of external components.\n4: Rs may be required to avoid overdriving crystals with low drive level specification.\n5: Always verify oscillator performance over the  VDD  and  temperature  range  that  is expected for the application.",
    "FIGURE 3-2:\nEXTERNAL CLOCK INPUT OPERATION (HS OSCILLATOR CONFIGURATION)",
    "3.3 External Clock Input\nThe EC and ECIO Oscillator modes require an external clock source to be connected to the OSC1 pin. There is no  oscillator  start-up  time  required  after  a  Power-on Reset or after an exit from Sleep mode.\nIn  the  EC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 3-3 shows the pin connections for the EC Oscillator mode.",
    "EXTERNAL CLOCK INPUT OPERATION (EC CONFIGURATION)\nThe ECIO Oscillator mode functions like the EC mode, except that the OSC2 pin becomes an additional general  purpose  I/O  pin.  The  I/O  pin  becomes  bit  6  of PORTA (RA6). Figure 3-4 shows the pin connections for the ECIO Oscillator mode.",
    "3.4 RC Oscillator\nFor timing-insensitive applications, the 'RC' and 'RCIO'  device  options  offer  additional  cost  savings. The actual oscillator frequency is a function of several factors:\n\u00b7 Supply voltage\n\u00b7 Values of the external resistor (REXT) and capacitor (CEXT)\n\u00b7 Operating temperature\nGiven the same device, operating voltage and temperature and component values, there will also be unit-to-unit  frequency  variations.  These  are  due  to factors such as:\n\u00b7 Normal manufacturing variation\n\u00b7 Difference in lead frame capacitance between package types (especially for low CEXT values)\n\u00b7 Variations within the tolerance of limits of REXT and CEXT\nIn  the  RC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic.  Figure 3-5  shows  how  the  R/C  combination  is connected.",
    "FIGURE 3-5: RC OSCILLATOR MODE\nThe RCIO Oscillator mode (Figure 3-6) functions like the RC mode, except that the OSC2 pin becomes an additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6).",
    "3.5 PLL Frequency Multiplier\nA Phase Locked Loop (PLL) circuit is provided as an option  for  users  who  want  to  use  a  lower  frequency oscillator circuit, or to clock the device up to its highest rated frequency from a crystal oscillator. This may be useful for customers who are concerned with EMI due to high-frequency crystals, or users who require higher clock speeds from an internal oscillator.",
    "3.5.1 HSPLL OSCILLATOR MODE\nThe  HSPLL  mode  makes  use  of  the  HS  Oscillator mode  for  frequencies  up  to  10  MHz.  A  PLL  then multiplies the  oscillator output  frequency  by  4  to produce an internal clock frequency up to 40 MHz.\nThe PLL is only available to the crystal oscillator when the FOSC<3:0> Configuration bits are programmed for HSPLL mode (= 0110 ).",
    "3.5.2 PLL AND INTOSC\nThe PLL is also available to the internal oscillator block in selected oscillator modes. In this configuration, the PLL is enabled in software and generates a clock output of up to 32 MHz. The operation of INTOSC with the PLL  is  described  in Section 3.6.4  'PLL  in  INTOSC Modes' .",
    "3.6 Internal Oscillator Block\nThe PIC18F6310/6410/8310/8410 devices include an internal oscillator block, which generates two different clock signals; either can  be  used  as  the  microcontroller's clock source. This may eliminate the need for  external  oscillator  circuits  on  the  OSC1  and/or OSC2 pins.\nWhen the OSCTUNE register is modified, the INTOSC frequency will begin shifting to the new frequency. The INTOSC clock will stabilize within 1 ms. Code execution continues during this shift. There is no indication that the shift has occurred.\nThe main output (INTOSC) is an 8 MHz clock source, which can be used to directly drive the device clock. It also drives a postscaler, which can provide a range of clock frequencies from 31 kHz to 4 MHz. The INTOSC output is enabled when a clock frequency from 125 kHz to 8 MHz is selected.\nThe  other  clock  source  is  the  internal  RC  oscillator (INTRC),  which  provides  a  nominal  31 kHz  output. INTRC is enabled if it is selected as the device clock source; it is also enabled automatically when any of the following are enabled:",
    "3.6 Internal Oscillator Block\n\u00b7 Power-up Timer\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Watchdog Timer\n\u00b7 Two-Speed Start-up\nThese  features  are  discussed  in  greater  detail  in Section 24.0 'Special Features of the CPU' .\nThe  clock  source  frequency  (INTOSC  direct,  INTRC direct or INTOSC postscaler) is selected by configuring the IRCF bits of the OSCCON register (Register 3-2).",
    "3.6.1 INTIO MODES\nUsing the internal oscillator as the clock source eliminates the need for up to two external oscillator pins, which  can  then  be  used  for  digital  I/O.  Two  distinct configurations are available:\n\u00b7 In INTIO1 mode, the OSC2 pin outputs FOSC/4, while OSC1 functions as RA7 for digital input and output.\n\u00b7 In INTIO2 mode, OSC1 functions as RA7 and OSC2 functions as RA6, both for digital input and output.",
    "3.6.2 INTOSC OUTPUT FREQUENCY\nThe internal oscillator block is calibrated at the factory to produce an INTOSC output frequency of 8.0 MHz.\nThe  INTRC  oscillator  operates  independently  of  the INTOSC  source.  Any  changes  in  INTOSC  across voltage and temperature are not necessarily reflected by changes in INTRC and vice versa.",
    "3.6.3 OSCTUNE REGISTER\nThe internal oscillator's output has been calibrated at the factory, but can be adjusted in the user's application. This is done by writing to the OSCTUNE register (Register 3-1).\nThe OSCTUNE register also implements the INTSRC and PLLEN bits, which control certain features of the internal oscillator block. The INTSRC bit allows users to  select  which  internal  oscillator  provides  the  clock source when the 31 kHz frequency option is selected. This  is  covered  in  greater  detail  in Section 3.7.1 'Oscillator Control Register' .\nThe PLLEN bit controls the operation of the frequency multiplier, PLL, in internal oscillator modes.",
    "3.6.4 PLL IN INTOSC MODES\nThe  4x  frequency  multiplier  can  be  used  with  the internal oscillator block to produce faster device clock speeds  than  are  normally  possible  with  an  internal oscillator.  When  enabled,  the  PLL  produces  a  clock speed of up to 32 MHz.\nUnlike  HSPLL  mode,  the  PLL  is  controlled  through software. The control bit,  PLLEN (OSCTUNE<6>), is used to enable or disable its operation.\nThe PLL is available when the device is configured to use the internal oscillator block as its primary clock source (FOSC<3:0> = 1001 or 1000 ). Additionally, the PLL will only  function  when  the  selected  output  frequency  is either 4 MHz or 8 MHz (OSCCON<6:4> = 111 or 110 ). If both of these conditions are not met, the PLL is disabled.\nThe PLLEN control bit is only functional in those internal oscillator modes where the PLL is available. In all other  modes,  it  is  forced  to  ' 0 ' and  is  effectively unavailable.",
    "3.6.5 INTOSC FREQUENCY DRIFT\nThe factory calibrates the internal oscillator block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes, which can affect the  controller  operation  in  a  variety  of  ways.  It  is possible to adjust the INTOSC frequency by modifying the value in the OSTUNE register. This has no effect on the INTRC clock source frequency.\nTuning the INTOSC source requires knowing when to make the adjustment, in which direction it  should  be made  and  in  some  cases,  how  large  a  change  is needed. Three examples follow, but other techniques may be used. Three compensation techniques are discussed  in Section 3.6.5.1 'Compensating with the AUSART' Section 3.6.5.2 'Compensating with the , Timers'' and Section 3.6.5.3  'Compensating with the Timers' , but other techniques may be used.",
    "3.6.5.1 Compensating with the AUSART\nAn  adjustment  may  be  required  when  the  AUSART begins to generate framing errors or receives data with errors  while  in  Asynchronous  mode.  Framing  errors indicate that the device clock frequency is too high; to adjust  for  this,  decrement  the  value  in  OSTUNE  to reduce the clock frequency. On the other hand, errors in data may suggest that the clock speed is too low; to compensate, increment OSTUNE to increase the clock frequency.",
    "3.6.5.2 Compensating with the Timers\nThis technique compares device clock speed to some reference clock. Two timers may be used; one timer is clocked  by  the  peripheral  clock,  while  the  other  is clocked  by  a  fixed  reference  source,  such  as  the Timer1 oscillator.\nis  greater  than  expected,  then  the  internal  oscillator block is running too fast. To adjust for this, decrement the OSCTUNE register.",
    "3.6.5.3 Compensating with the Timers\nA  CCP  module  can  use  free  running  Timer1  (or Timer3), clocked by the internal oscillator block and an external  event  with  a  known  period  (i.e.,  AC  power frequency). The time of the first event is captured in the CCPRxH:CCPRxL registers and is recorded. When the second event  causes a  capture,  the  time  of  the  first event is subtracted from the time of the second event. Since the period of the external  event  is  known,  the time difference between events can be calculated.\nBoth timers are cleared, but the timer clocked by the reference  generates  interrupts.  When  an  interrupt occurs,  the  internally  clocked  timer  is  read  and  both timers are cleared. If the internally clocked timer value\nIf the measured  time  is much  greater than the calculated  time,  then  the  internal  oscillator  block  is running too fast; to compensate, decrement the OSTUNE register. If the measured time is much less than  the  calculated  time,  then  the  internal  oscillator block  is  running  too  slow;  to  compensate,  increment the OSTUNE register.",
    "REGISTER 3-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nINTSRC, R/W-0 = PLLEN (1). INTSRC, U-0 = -. INTSRC, R/W-0 = TUN4. INTSRC, R/W-0 = TUN3. INTSRC, R/W-0 = TUN2. INTSRC, R/W-0 = TUN1. INTSRC, R/W-0 = TUN0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 3-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nINTSRC: Internal Oscillator Low-Frequency Source Select bit\n1 = 31.25 kHz device clock derived from 8 MHz INTOSC source (divide-by-256 enabled) 0 = 31 kHz device clock derived directly from INTRC internal oscillator\nbit 6\nPLLEN: Frequency Multiplier PLL for INTOSC Enable bit (1)\n1 = PLL enabled for INTOSC (4 MHz and 8 MHz only)\n0 = PLL disabled\nbit 5\nUnimplemented: Read as ' 0 '",
    "REGISTER 3-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nbit 4-0\nTUN<4:0>: Frequency Tuning bits\n01111 =  Maximum frequency\n\u2022\n\u2022\n\u2022\n\u2022\n00001\n00000 =  Center frequency. Oscillator module is running at the calibrated frequency.\n11111\n\u2022\n\u2022\n\u2022\n\u2022\n10000 =  Minimum frequency\nNote 1: Available only in certain oscillator configurations; otherwise, this bit is unavailable and reads as ' 0 '. See Section 3.6.4 'PLL in INTOSC Modes' for details.",
    "3.7 Clock Sources and Oscillator Switching\nLike previous PIC18 devices, the PIC18F6310/6410/8310/8410 family includes a feature that allows the device clock source to be switched from the main oscillator to an alternate low-frequency clock source. PIC18F6310/6410/8310/8410 devices offer two alternate clock sources. When an alternate clock source is enabled, the various power-managed  operating modes are available.\nEssentially,  there  are  three  clock  sources  for  these devices:\n\u00b7 Primary oscillators\n\u00b7 Secondary oscillators\n\u00b7 Internal oscillator block\nThe primary oscillators include the External Crystal and  Resonator  modes,  the  External  RC  modes,  the External Clock modes and the internal oscillator block. The  particular  mode  is  defined  by  the  FOSC<3:0> Configuration  bits.  The  details  of  these  modes  are covered earlier in this chapter.\nThe secondary oscillators are those external sources not  connected  to  the  OSC1  or  OSC2  pins.  These sources  may  continue  to  operate  even  after the controller is placed in a power-managed mode.",
    "3.7 Clock Sources and Oscillator Switching\nPIC18F6310/6410/8310/8410 devices offer the Timer1 oscillator as a secondary oscillator. This oscillator, in all power-managed  modes,  is  often  the  time  base  for functions such as a Real-Time Clock (RTC).\nMost often, a 32.768 kHz watch crystal is connected between the RC0/T1OSO/T13CKI and RC1/T1OSI/CCP2 pins. Like the LP mode oscillator circuit,  loading  capacitors  are  also  connected  from each pin to ground.\nThe Timer1 oscillator is discussed in greater detail in Section 13.3 'Timer1 Oscillator' .\nIn addition to being a primary clock source, the internal oscillator  block is  available  as  a  power-managed mode clock source. The INTRC source is also used as the clock source for several special features, such as the WDT and Fail-Safe Clock Monitor.",
    "3.7 Clock Sources and Oscillator Switching\nThe clock sources for the PIC18F6310/6410/8310/8410 devices  are  shown  in  Figure 3-8.  See Section 24.0 'Special  Features  of  the  CPU' for Configuration register details.",
    "3.7.1 OSCILLATOR CONTROL REGISTER\nThe OSCCON register (Register 3-2) controls several aspects of the device clock's operation, both in full-power operation and in power-managed modes.\nThe  System  Clock  Select  bits,  SCS<1:0>,  select  the clock source. The available clock sources are the primary clock (defined by the FOSC<3:0> Configuration bits),  the  secondary  clock  (Timer1  oscillator)  and  the internal  oscillator  block.  The  clock  source  changes immediately after one or more of the bits is written to, following a brief clock transition interval. The SCS bits are cleared on all forms of Reset.",
    "3.7.1 OSCILLATOR CONTROL REGISTER\ndevice  clock  in  primary  clock  modes.  The  IOFS  bit indicates when the internal oscillator block has stabilized  and  is  providing  the  device  clock  in  RC  Clock modes. The T1RUN bit (T1CON<6>) indicates when the  Timer1  oscillator  is  providing  the  device  clock  in secondary  clock  modes.  In  power-managed  modes, only one of these three bits will be set at any time. If none of these bits are set, the INTRC is providing the clock,  or  the  internal  oscillator  block  has  just  started and is not yet stable.",
    "3.7.1 OSCILLATOR CONTROL REGISTER\nThe Internal Oscillator Frequency Select bits, IRCF<2:0>, select the frequency output of the internal oscillator block to drive the device clock. The choices are the INTRC source, the INTOSC source (8 MHz) or one of the frequencies derived from the INTOSC postscaler (31.25 kHz to 4 MHz). If the internal oscillator block is supplying the device clock, changing the states of  these  bits  will  have  an  immediate  change  on  the internal  oscillator's  output.  Resets,  the  default  output frequency  of  the  internal  oscillator  block,  are  set  at 1 MHz.\nWhen  an  output  frequency  of  31 kHz  is  selected (IRCF<2:0> = 000 ), users may choose which internal oscillator  acts  as  the  source.  This  is  done  with  the INTSRC bit in the OSCTUNE register (OSCTUNE<7>). Setting this bit selects INTOSC as a 31.25 kHz clock source  by  enabling  the  divide-by-256  output  of  the INTOSC postscaler. Clearing INTSRC selects INTRC (nominally 31 kHz) as the clock source.",
    "3.7.1 OSCILLATOR CONTROL REGISTER\nThis option allows users to select the tunable and more precise INTOSC as a clock source, while maintaining power savings with a very low clock speed. Regardless of the setting of INTSRC, INTRC always remains the clock source for features such as the Watchdog Timer and the Fail-Safe Clock Monitor.\nThe OSTS, IOFS and T1RUN bits indicate which clock source  is  currently  providing  the  device  clock.  The OSTS bit indicates  that  the  Oscillator  Start-up  Timer has timed out and the primary clock is providing the\nThe IDLEN bit determines if the device goes into Sleep mode  or  one  of  the  Idle  modes  when  the SLEEP instruction is executed.\nThe use of the flag and control bits in the OSCCON register  is  discussed  in  more  detail  in Section 4.0 'Power-Managed Modes' .",
    "3.7.1 OSCILLATOR CONTROL REGISTER\nNote 1: The Timer1 oscillator must be enabled to select  the  secondary  clock  source.  The Timer1 oscillator is enabled by setting the T1OSCEN bit in the Timer1 Control register (T1CON<3>). If the Timer1 oscillator is not enabled, then any attempt to select a secondary clock source when executing a SLEEP instruction will be ignored.\n2: It is recommended that the Timer1 oscillator be operating and stable before executing the SLEEP instruction or a very long  delay  may  occur  while  the  Timer1 oscillator starts.",
    "3.7.2 OSCILLATOR TRANSITIONS\nPIC18F6310/6410/8310/8410 devices contain circuitry to  prevent  clock  'glitches'  when  switching  between clock sources. A short pause in the device clock occurs during the clock switch. The length of this pause is the sum of two cycles of the old clock source and three to four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nClock  transitions  are  discussed  in  greater  detail  in Section 4.1.2 'Entering Power-Managed Modes' .",
    "OSCCON: OSCILLATOR CONTROL REGISTER\nIDLEN, R/W-1 = IRCF2. IDLEN, R/W-0 = IRCF1. IDLEN, R/W-0 = IRCF0. IDLEN, R (1) = OSTS. IDLEN, R-0 = IOFS. IDLEN, R/W-0 = SCS1. IDLEN, R/W-0 = SCS0. bit 7, R/W-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R (1) = bit 7. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "OSCCON: OSCILLATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IDLEN: Idle Enable bit\n1 = Device enters Idle mode on SLEEP instruction\n0 = Device enters Sleep mode on SLEEP instruction",
    "bit 6-4\nIRCF<2:0>: Internal Oscillator Frequency Select bits\n111 = 8 MHz (INTOSC drives clock directly)\n110 = 4 MHz\n101 = 2 MHz\n100 = 1 MHz (3)\n011 = 500 kHz\n010 = 250 kHz\n001 = 125 kHz\n000 = 31 kHz (from either INTOSC/256 or INTRC directly) (2)",
    "bit 3\nOSTS: Oscillator Start-up Time-out Status bit (1)\n1 = Oscillator Start-up Timer time-out has expired; primary oscillator is running\n0 = Oscillator Start-up Timer time-out is running; primary oscillator is not ready",
    "bit 2\nIOFS: INTOSC Frequency Stable bit\n1 = INTOSC frequency is stable\n0 = INTOSC frequency is not stable",
    "bit 1-0 SCS<1:0>: System Clock Select bits\n1x = Internal oscillator block\n01 = Secondary (Timer1) oscillator\n00 = Primary oscillator\nNote 1: Depends on the state of the IESO Configuration bit.\n2: Source selected by the INTSRC bit (OSCTUNE<7>), see Section 3.6.3 'OSCTUNE Register' .\n3: Default output frequency of INTOSC on Reset.",
    "3.8 Effects of Power-Managed Modes on the Various Clock Sources\nWhen  PRI_IDLE  mode  is  selected,  the  designated primary oscillator continues to run without interruption. For  all  other  power-managed  modes,  the  oscillator using the OSC1 pin is disabled. The OSC1 pin (and OSC2 pin, if used by the oscillator) will stop oscillating.\nIn secondary clock modes (SEC_RUN and SEC_IDLE),  the  Timer1  oscillator  is  operating  and providing the device clock. The Timer1 oscillator may also  run  in  all  power-managed  modes  if  required  to clock Timer1 or Timer3.",
    "3.8 Effects of Power-Managed Modes on the Various Clock Sources\nIn  internal  oscillator  modes (RC_RUN and RC_IDLE), the  internal  oscillator  block  provides  the  device  clock source. The 31 kHz INTRC output can be used directly to provide the clock and may be enabled to support various special features, regardless of the power-managed mode  (see Section 24.2  'Watchdog  Timer  (WDT)' through Section 24.4  'Fail-Safe  Clock  Monitor' for more information on WDT, Fail-Safe Clock Monitor and Two-Speed Start-up). The INTOSC output at 8 MHz may be used directly to clock the device, or may be divided down by the postscaler. The INTOSC output is disabled if the clock is provided directly from the INTRC output.\nIf  the  Sleep  mode  is  selected,  all  clock  sources  are stopped.  Since  all  the  transistor  switching  currents have been stopped, Sleep mode achieves the lowest current consumption  of  the device (only leakage currents).",
    "3.9 Power-up Delays\nPower-up delays are controlled by two timers, so that no external Reset circuitry is required for most applications. The delays ensure that the device is kept in Reset until the device power supply is stable under normal circumstances and the primary clock is operating and stable. For additional information on power-up delays, see Section 5.5 'Device Reset Timers' .\nThe first timer is the Power-up Timer (PWRT), which provides  a  fixed  delay  on  power-up  (Parameter  33, Table 27-12).  It is enabled  by  clearing  (= 0 ) the PWRTEN Configuration bit.\nThe  second  timer  is  the  Oscillator  Start-up  Timer (OST),  intended  to  keep  the  chip  in  Reset  until  the crystal oscillator is stable (LP , XT and HS modes). The OST  does  this  by  counting  1024  oscillator  cycles before allowing the oscillator to clock the device.\nWhen  the  HSPLL  Oscillator  mode  is  selected,  the device is kept in Reset for an additional 2 ms, following the HS mode OST delay, so the PLL can lock to the incoming clock frequency.",
    "3.9 Power-up Delays\nThere  is  a  delay  of  interval,  TCSD  (Parameter  38, Table 27-12), following POR  while the controller becomes ready to execute instructions. This delay runs concurrently  with  any  other  delays.  This  may  be  the only delay that occurs when any of the EC, RC or INTIO modes are used as the primary clock source.\nEnabling any on-chip feature that will  operate during Sleep will increase the current consumed during Sleep. The INTRC is required to support WDT operation. The Timer1  oscillator may  be  operating  to support a real-time clock. Other features may be operating that do not require a device clock source (i.e., MSSP slave, PSP, INTx pins and others). Peripherals that may add significant current consumption are listed in Section 27.2 'DC Characteristics: Power-Down and Supply Current' .",
    "TABLE 3-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE (1)\nNote 1: See Table 5-2 in Section 5.0 'Reset' for time-outs due to Sleep and MCLR Reset.\n\nRC, INTIO1, OSC1 Pin = Floating, external resistor should pull high. RC, INTIO1, OSC2 Pin = At logic low (clock/4 output). RCIO, INTIO2, OSC1 Pin = Floating, external resistor should pull high. RCIO, INTIO2, OSC2 Pin = Configured as PORTA, bit 6. ECIO, OSC1 Pin = Floating, pulled by external clock. ECIO, OSC2 Pin = Configured as PORTA, bit 6. EC, OSC1 Pin = Floating, pulled by external clock. EC, OSC2 Pin = At logic low (clock/4 output). LP, XT and HS, OSC1 Pin = Feedback inverter disabled at quiescent voltage level. LP, XT and HS, OSC2 Pin = Feedback inverter disabled at quiescent voltage level",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "4.1.1 CLOCK SOURCES\nPIC18F6310/6410/8310/8410  devices  offer  a  total  of seven  operating modes  for more  efficient power management.  These  modes  provide  a  variety  of options for selective power conservation in applications where resources may be limited (i.e., battery-powered devices).\nThere are three categories of power-managed modes:\n\u00b7 Sleep mode\n\u00b7 Idle modes\n\u00b7 Run modes\nThese categories define which portions of the device are clocked and sometimes, what speed. The Run and Idle modes may use any of the three available clock sources (primary, secondary or INTOSC multiplexer); the Sleep mode does not use a clock source.\nThe power-managed modes include several power-saving  features.  One  of  these  is  the  clock switching  feature,  offered  in  other  PIC18  devices, allowing the controller to use the Timer1 oscillator in place  of  the  primary  oscillator.  Also  included  is  the Sleep  mode,  offered  by  all  PIC \u00ae   devices,  where  all device clocks are stopped.",
    "4.1 Selecting Power-Managed Modes\nSelecting a power-managed mode requires deciding if the CPU is to be clocked or not and selecting a clock source. The IDLEN bit controls CPU clocking, while the SCS<1:0>  bits  select  a  clock  source.  The  individual modes, bit settings, clock sources and affected modules are summarized in Table 4-1.\nThe SCS<1:0> bits allow the selection of one of three clock sources for power-managed modes. They are:\n\u00b7 The primary clock, as defined by the FOSC<3:0> Configuration bits\n\u00b7 The secondary clock (the Timer1 oscillator)\n\u00b7 The internal oscillator block (for RC modes)",
    "4.1.2 ENTERING POWER-MANAGED MODES\nEntering power-managed Run mode, or switching from one  power-managed  mode  to  another,  begins  by loading  the  OSCCON  register.  The  SCS<1:0>  bits select  the  clock  source  and  determine  which  Run or Idle mode is being used. Changing these bits causes an immediate switch to the new clock source, assuming that it  is  running.  The  switch  may  also  be subject to clock transition delays. These are discussed in Section 4.1.3 'Clock  Transitions  and  Status Indicators' and subsequent sections.\nEntry  to  the  power-managed  Idle  or  Sleep  modes  is triggered by the execution of a SLEEP instruction. The actual mode that results depends on the status of the IDLEN bit.\nDepending on the current mode and the mode being switched to, a change to a power-managed mode does not always require setting all of these bits. Many transitions  may  be  done  by  changing  the  oscillator  select bits, or changing the IDLEN bit prior to issuing a SLEEP instruction.  If the  IDLEN  bit  is  already  configured correctly, it may only be necessary to perform a SLEEP instruction to switch to the desired mode.",
    "TABLE 4-1: POWER-MANAGED MODES\nSleep, OSCCON<7,1:0> Bits.IDLEN (1) = 0. Sleep, OSCCON<7,1:0> Bits.SCS<1:0> = N/A. Sleep, Module Clocking.CPU = Off. Sleep, Module Clocking.Peripherals = Off. Sleep, Available Clock and Oscillator Source.Available Clock and Oscillator Source = None - All clocks are disabled.. PRI_RUN, OSCCON<7,1:0> Bits.IDLEN (1) = N/A. PRI_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 00. PRI_RUN, Module Clocking.CPU = Clocked. PRI_RUN, Module Clocking.Peripherals = Clocked. PRI_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC, INTRC (2) This is the normal Full-Power Execution mode. SEC_RUN, OSCCON<7,1:0>",
    "TABLE 4-1: POWER-MANAGED MODES\nBits.IDLEN (1) = N/A. SEC_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 01. SEC_RUN, Module Clocking.CPU = Clocked. SEC_RUN, Module Clocking.Peripherals = Clocked. SEC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_RUN, OSCCON<7,1:0> Bits.IDLEN (1) = N/A. RC_RUN, OSCCON<7,1:0> Bits.SCS<1:0> = 1x. RC_RUN, Module Clocking.CPU = Clocked. RC_RUN, Module Clocking.Peripherals = Clocked. RC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2). PRI_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. PRI_IDLE, OSCCON<7,1:0>",
    "TABLE 4-1: POWER-MANAGED MODES\nBits.SCS<1:0> = 00. PRI_IDLE, Module Clocking.CPU = Off. PRI_IDLE, Module Clocking.Peripherals = Clocked. PRI_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary - LP, XT, HS, HSPLL, RC, EC. SEC_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. SEC_IDLE, OSCCON<7,1:0> Bits.SCS<1:0> = 01. SEC_IDLE, Module Clocking.CPU = Off. SEC_IDLE, Module Clocking.Peripherals = Clocked. SEC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary - Timer1 Oscillator. RC_IDLE, OSCCON<7,1:0> Bits.IDLEN (1) = 1. RC_IDLE, OSCCON<7,1:0> Bits.SCS<1:0> = 1x. RC_IDLE, Module Clocking.CPU = Off.",
    "TABLE 4-1: POWER-MANAGED MODES\nRC_IDLE, Module Clocking.Peripherals = Clocked. RC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (2)\nNote\n1: IDLEN reflects its value when the SLEEP instruction is executed.\n2: Includes INTOSC and INTOSC postscaler, as well as the INTRC source.",
    "4.1.3 CLOCK TRANSITIONS AND STATUS INDICATORS\nThe length of the transition between clock sources is the sum of two cycles of the old clock source and three to  four  cycles  of  the  new  clock  source.  This  formula assumes that the new clock source is stable.\nUpon  resuming  normal  operation,  after  waking  from Sleep  or  Idle,  the  internal  state  machines  require  at least one TCY delay before another SLEEP instruction can be executed. If two back to back SLEEP instructions will be executed, the process shown in Example 4-1 should be used:\nThree  bits  indicate  the  current  clock  source  and  its status. They are:\n\u00b7 OSTS (OSCCON<3>)\n\u00b7 IOFS (OSCCON<2>)\n\u00b7 T1RUN (T1CON<6>)",
    "4.1.3 CLOCK TRANSITIONS AND STATUS INDICATORS\nIn general, only one of these bits will be set while in a given  power-managed  mode.  When  the  OSTS  bit  is set,  the  primary  clock  is  providing  the  device  clock. When the IOFS bit is set, the INTOSC output is providing  a  stable,  8 MHz  clock  source  to  a  divider  that actually drives the device clock. When the T1RUN bit is set, the Timer1 oscillator is providing the clock. If none of  these  bits  are  set,  then  either  the  INTRC  clock source is clocking the device or the INTOSC source is not yet stable.\nIf the internal oscillator block is configured as the primary clock source by the FOSC<3:0> Configuration bits, then both  the  OSTS  and  IOFS  bits  may  be  set  when  in PRI_RUN or PRI_IDLE modes. This indicates that the primary  clock  (INTOSC  output)  is  generating  a  stable 8 MHz  output.  Entering  another  power-managed  RC mode at the same frequency would clear the OSTS bit.",
    "4.1.3 CLOCK TRANSITIONS AND STATUS INDICATORS\nNote 1: Caution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible to select a higher clock speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\n2: Executing a SLEEP instruction does not necessarily  place  the  device  into  Sleep mode. It acts as the trigger to place the controller  into  either  the  Sleep  mode  or one of the Idle modes, depending on the setting of the IDLEN bit.",
    "4.1.4 MULTIPLE SLEEP COMMANDS\nThe  power-managed  mode  that  is  invoked  with  the SLEEP instruction is determined by the setting of the IDLEN  bit  at  the  time  the  instruction  is  executed.  If another SLEEP instruction is executed, the device will enter the power-managed mode specified by IDLEN at that time. If IDLEN has changed, the device will enter the new power-managed mode specified by the new setting.",
    "EXAMPLE 4-1:\nEXECUTING BACK TO BACK SLEEP INSTRUCTIONS\nSLEEP\nNOP\n;Wait at least 1 Tcy before\nexecuting another sleep instruction\nSLEEP",
    "4.2 Run Modes\nIn the  Run  modes,  clocks  to  both  the  core  and peripherals are active. The difference between these modes is the clock source.",
    "4.2.1 PRI_RUN MODE\nThe PRI_RUN mode is the normal full-power execution mode  of  the  microcontroller.  This  is  also  the  default mode upon a device Reset unless Two-Speed Start-up is enabled (see Section 24.3 'Two-Speed Start-up' for details). In this mode, the OSTS bit is set. The IOFS bit  may  be  set  if  the  internal  oscillator  block  is  the primary  clock  source  (see Section 3.7.1  'Oscillator Control Register' ).",
    "4.2.2 SEC_RUN MODE\nThe SEC_RUN mode is the compatible mode to the 'clock switching' feature offered in other PIC18 devices.  In  this  mode,  the  CPU  and  peripherals  are clocked from the Timer1 oscillator. This gives users the option of lower power consumption while still using a high-accuracy clock source.\nSEC_RUN mode is entered by setting the SCS<1:0> bits to ' 01 '. The device clock source is switched to the Timer1 oscillator (see Figure 4-1), the primary oscillator is shut down, the T1RUN bit (T1CON<6>) is set and the OSTS bit is cleared.",
    "Note:\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_RUN mode. If the T1OSCEN bit is not set when the SCS<1:0> bits are set to ' 01 ', entry to SEC_RUN  mode  will  not  occur.  If  the Timer1  oscillator  is  enabled,  but  not  yet running, peripheral clocks will be delayed until  the  oscillator  has  started;  in  such situations, initial oscillator operation is far from  stable  and  unpredictable  operation may result.",
    "PIC18F6310/6410/8310/8410\nOn transitions from SEC_RUN mode to PRI_RUN, the peripherals and CPU continue to be clocked from the Timer1  oscillator  while  the  primary  clock  is  started. When the primary clock becomes ready, a clock switch back  to  the  primary  clock  occurs  (see  Figure 4-2).\nWhen the clock switch is complete, the T1RUN bit is cleared, the OSTS bit is set and the primary clock is providing the clock. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "4.2.3 RC_RUN MODE\nIn RC_RUN  mode,  the  CPU  and  peripherals  are clocked  from  the  internal  oscillator  block  using  the INTOSC  multiplexer  and  the  primary  clock  is  shut down.  When  using  the  INTRC  source,  this  mode provides  the  best  power  conservation  of  all  the  Run modes, while still executing code. It works well for user applications which are not highly timing-sensitive, or do not require high-speed clocks at all times.\nIf  the IRCF bits and the INTSRC bit are all clear, the INTOSC output is not  enabled  and  the  IOFS  bit  will remain clear; there will be no indication of the current clock  source.  The  INTRC  source  is  providing  the device clocks.\nIf  the  primary  clock  source  is  the  internal  oscillator block (either INTRC or INTOSC), there are no distinguishable differences between PRI_RUN and RC_RUN modes during execution. However, a clock switch  delay  will  occur  during  entry  to  and  exit  from RC_RUN mode. Therefore, if the primary clock source is  the  internal  oscillator  block,  the  use  of  RC_RUN mode is not recommended.",
    "4.2.3 RC_RUN MODE\nThis  mode is  entered  by  setting  the  SCS1  bit  to  ' 1 '. Although it is ignored, it is recommended that the SCS0 bit also be  cleared; this is to maintain software compatibility with future devices.  When  the  clock source  is  switched  to  the  INTOSC  multiplexer  (see Figure 4-3), the primary oscillator is shut down and the OSTS bit is cleared.The IRCF bits may be modified at any time to immediately change the clock speed.",
    "Note:\nCaution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\nIf the  IRCF  bits  are  changed  from  all  clear  (thus, enabling the INTOSC output), or if INTSRC is set, the IOFS  bit becomes  set  after the INTOSC  output becomes stable. Clocks to the device continue while the  INTOSC  source  stabilizes  after  an  interval  of TIOBST.\nIf the IRCF bits were previously at a non-zero value, or if INTSRC  was  set  before  setting  SCS1  and  the INTOSC source was already stable, the IOFS bit will remain set.",
    "Note:\nOn transitions from RC_RUN mode to PRI_RUN, the device  continues  to  be  clocked  from  the  INTOSC multiplexer while the primary clock is started. When the primary  clock  becomes  ready,  a  clock  switch  to  the primary clock occurs (see Figure 4-4). When the clock switch is complete, the IOFS bit is cleared, the OSTS bit is set and the primary clock is providing the device clock. The IDLEN and SCS bits are not affected by the switch. The INTRC source will continue to run if either the WDT or the Fail-Safe Clock Monitor is enabled.",
    "4.3 Sleep Mode\nThe power-managed Sleep mode in the PIC18F6310/6410/8310/8410  devices  is  identical  to the  legacy  Sleep  mode  offered  in  all  other  PIC \u00ae devices.  It  is  entered  by  clearing  the  IDLEN  bit  (the default  state  on  device  Reset)  and  executing  the SLEEP instruction. This shuts down  the  selected oscillator (see Figure 4-5). All clock source status bits are cleared.\nEntering the Sleep mode from any other mode does not require a clock switch. This is because no clocks are needed once the controller has entered Sleep. If the WDT is selected,  the  INTRC  source  will  continue  to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "4.3 Sleep Mode\nWhen a wake event occurs in Sleep mode (by interrupt, Reset or WDT time-out), the device will not be clocked until  the  primary  clock  source  becomes  ready  (see Figure 4-6),  or  it  will  be  clocked  from  the  internal oscillator block if either the Two-Speed Start-up or the Fail-Safe Clock Monitor are enabled (see Section 24.0 'Special Features of the CPU' ).  In  either case, the OSTS bit is set when the primary clock is providing the device  clocks.  The  IDLEN  and  SCS  bits  are  not affected by the wake-up.",
    "4.4 Idle Modes\nThe  Idle  modes  allow  the  controller's  CPU  to  be selectively shut down while the peripherals continue to operate. Selecting a particular Idle mode allows users to further manage power consumption.\nIf the IDLEN bit is set to a ' 1 ' when a SLEEP instruction is  executed,  the  peripherals  will  be  clocked  from  the clock source selected using the SCS<1:0>  bits; however, the CPU will not be clocked. The clock source status bits are not affected. Setting IDLEN and executing SLEEP provides a quick method of switching from a given Run mode to its corresponding Idle mode.\nIf the WDT is selected, the INTRC source will continue to operate. If the Timer1 oscillator is enabled, it will also continue to run.",
    "4.4 Idle Modes\nSince the CPU is not executing instructions, the only exits from any of the Idle modes are by interrupt, WDT time-out or a Reset. When a wake event occurs, CPU execution is delayed by an interval of TCSD (Parameter 38, Table 27-12), while it becomes ready to execute code. When the CPU begins executing code, it resumes with the same clock source for the current Idle mode. For example, when waking from RC_IDLE mode, the internal oscillator block will clock the CPU and peripherals (in other words, RC_RUN mode). The IDLEN and SCS bits are not affected by the wake-up.\nWhile  in  any  Idle  mode  or  the  Sleep  mode,  a  WDT time-out will result in a WDT wake-up to the Run mode currently specified by the SCS<1:0> bits.",
    "FIGURE 4-5: TRANSITION TIMING FOR ENTRY TO SLEEP MODE\nQ4 Q3 Q2 Q1 Q1, 1 = . OSC1, 1 = . CPU, 1 = . Clock, 1 = . Peripheral Clock, 1 = . Sleep, 1 = . Program PC, 1 = PC + 2. Counter, 1 = \nFIGURE 4-6:",
    "4.4.1 PRI_IDLE MODE\nThis mode is unique among the three low-power Idle modes, in that it does not disable the primary device clock. For timing-sensitive applications, this allows for the fastest resumption of device operation with its more accurate primary clock source, since the clock source does not have to 'warm up' or transition from another oscillator.\nWhen a wake event occurs, the CPU is clocked from the primary  clock  source.  A  delay  of  interval,  TCSD,  is required  between  the  wake  event  and  when  code execution starts. This is required to allow the CPU to become ready to execute instructions. After the wake-up,  the  OSTS  bit  remains  set.  The  IDLEN  and SCS  bits are not affected by the wake-up  (see Figure 4-8).",
    "4.4.1 PRI_IDLE MODE\nPRI_IDLE mode is entered from PRI_RUN mode by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first, then  clear  the  SCS  bits  and  execute SLEEP . Although the CPU is disabled, the peripherals continue to be clocked from the primary clock source specified by  the  FOSC<3:0>  Configuration  bits.  The  OSTS  bit remains set (see Figure 4-7).",
    "4.4.3 RC_IDLE MODE\nIn  SEC_IDLE  mode,  the  CPU  is  disabled,  but  the peripherals  continue  to  be  clocked  from  the  Timer1 oscillator. This mode is entered from SEC_RUN by setting the IDLEN bit and executing a SLEEP instruction. If the device is in another Run mode, set IDLEN first, then set  SCS<1:0> to ' 01 '  and  execute SLEEP .  When the clock source is switched to the Timer1 oscillator, the primary oscillator is shut down, the OSTS bit is cleared and the T1RUN bit is set.\nWhen a wake event occurs, the peripherals continue to be clocked from the Timer1 oscillator. After an interval of TCSD following the wake event, the CPU begins executing code being clocked by the Timer1 oscillator. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run (see Figure 4-8).\nNote:",
    "4.4.3 RC_IDLE MODE\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_IDLE mode. If the T1OSCEN bit is not set when the SLEEP instruction  is  executed,  the SLEEP instruction  will be  ignored  and entry to SEC_IDLE mode will not occur. If the  Timer1  oscillator  is  enabled,  but  not yet running, peripheral clocks will be delayed until the oscillator has started. In such situations, initial oscillator operation is far from stable and unpredictable operation may result.\nIn RC_IDLE mode, the CPU is disabled, but the peripherals continue to be clocked from the internal oscillator block using the INTOSC multiplexer. This mode allows for controllable power conservation during Idle periods.",
    "4.4.3 RC_IDLE MODE\nFrom  RC_RUN,  this  mode  is  entered  by  setting  the IDLEN  bit  and  executing  a SLEEP instruction.  If  the device is in another Run mode, first set IDLEN, then set the SCS1 bit and execute SLEEP . Although its value is ignored, it is recommended that SCS0 also be cleared; this  is  to  maintain  software  compatibility  with  future devices.  The  INTOSC  multiplexer  may  be  used  to select a higher clock frequency by modifying the IRCF bits before executing the SLEEP instruction. When the clock source is switched to the INTOSC multiplexer, the primary  oscillator  is  shut  down  and  the  OSTS  bit  is cleared.",
    "4.4.3 RC_IDLE MODE\nIf the IRCF bits are set to any non-zero value, or the INTSRC bit is set, the INTOSC output is enabled. The IOFS  bit becomes  set  after the INTOSC  output becomes stable, after an interval of TIOBST (Parameter 39, Table 27-12). Clocks to the peripherals continue  while  the  INTOSC  source  stabilizes.  If  the IRCF  bits  were  previously  at  a  non-zero  value,  or INTSRC  was  set  before  the SLEEP instruction  was executed and the INTOSC source was already stable, the  IOFS  bit  will  remain  set.  If  the  IRCF  bits  and INTSRC are all clear, the INTOSC output will not be enabled; the IOFS bit will remain clear and there will be no indication of the current clock source.",
    "4.4.3 RC_IDLE MODE\nWhen a wake event occurs, the peripherals continue to be clocked from the INTOSC multiplexer. After a delay of TCSD following the wake event, the CPU begins executing code, being clocked by the INTOSC multiplexer. The  IDLEN  and  SCS  bits  are  not  affected  by  the wake-up.  The  INTRC  source  will  continue  to  run  if either  the  WDT  or  the  Fail-Safe  Clock  Monitor  is enabled.",
    "4.5.3 EXIT BY RESET\nAn exit from Sleep mode or any of the Idle modes is triggered by an interrupt, a Reset or a WDT time-out. This  section  discusses  the  triggers  that  cause  exits from power-managed modes. The clocking subsystem actions are discussed in each of the power-managed modes (see Section 4.2 'Run Modes' through Section 4.4 'Idle Modes' ).",
    "4.5.1 EXIT BY INTERRUPT\nAny of the available interrupt sources can cause the device  to  exit  from  an  Idle  or  Sleep  mode  to  a  Run mode. To enable this functionality, an interrupt source must be enabled by setting its enable bit in one of the INTCON or PIE registers. The exit sequence is initiated when the corresponding interrupt flag bit is set.\nOn all exits from Idle or Sleep modes by interrupt, code execution branches  to  the interrupt vector if the GIE/GIEH  bit  (INTCON<7>)  is  set.  Otherwise,  code execution  continues  or  resumes  without  branching (see Section 10.0 'Interrupts' ).\nA  fixed  delay  of  interval,  TCSD,  following  the  wake event, is required when leaving Sleep and Idle modes. This delay is required for the CPU to prepare for execution.  Instruction  execution  resumes  on  the  first  clock cycle following this delay.",
    "4.5.2 EXIT BY WDT TIME-OUT\nA WDT time-out will cause different actions depending on which power-managed mode the device is in when the time-out occurs.\nIf the device is not executing code (all Idle modes and Sleep mode), the time-out will result in an exit from the power-managed mode (see Section 4.2 'Run Modes' and Section 4.3 'Sleep Mode' ). If the device is  executing  code  (all  Run  modes),  the  time-out  will result in a WDT Reset (see Section 24.2 'Watchdog Timer (WDT)' ).\nThe WDT timer and postscaler are cleared by executing a SLEEP or CLRWDT instruction, losing a currently selected clock source (if the Fail-Safe Clock Monitor is enabled) and modifying the IRCF bits in the OSCCON register if the internal oscillator block is the device clock source.",
    "4.5.2 EXIT BY WDT TIME-OUT\nNormally, the device is held in Reset by the Oscillator Start-up Timer (OST) until the primary clock becomes ready. At that time, the OSTS bit is set and the device begins executing code. If the internal oscillator block is the new clock source, the IOFS bit is set instead.\nThe  exit  delay  time  from  Reset  to  the  start  of  code execution depends on both the clock sources before and after the wake-up and the type of oscillator if the new clock source is the primary clock. Exit delays are summarized in Table 4-2.",
    "4.5.2 EXIT BY WDT TIME-OUT\nCode  execution  can  begin  before  the  primary  clock becomes ready. If either the Two-Speed Start-up (see Section 24.3  'Two-Speed  Start-up' ) or Fail-Safe Clock  Monitor  (see Section 24.4  'Fail-Safe  Clock Monitor' ) is enabled, the device may begin execution as soon as the Reset source has cleared. Execution is clocked  by  the  INTOSC  multiplexer  driven  by  the internal  oscillator  block.  Execution  is  clocked  by  the internal  oscillator  block  until  either  the  primary  clock becomes ready, or a power-managed mode is entered before the primary clock becomes ready; the primary clock is then shut down.",
    "4.5.4 EXIT WITHOUT AN OSCILLATOR START-UP DELAY\nCertain  exits  from  power-managed  modes  do  not invoke the OST at all. There are two cases:\n\u00b7 PRI_IDLE mode, where the primary clock source is not stopped; and\n\u00b7 the primary clock source is not any of the LP, XT, HS or HSPLL modes.\nIn  these  instances,  the  primary  clock  source  either does not require an oscillator start-up delay since it is already  running  (PRI_IDLE),  or  normally  does  not require an oscillator start-up delay (RC, EC and INTIO Oscillator modes). However, a fixed delay of interval, TCSD, following the wake event, is still required when leaving  Sleep  and  Idle  modes  to  allow  the  CPU  to prepare for  execution.  Instruction  execution  resumes on the first clock cycle following this delay.",
    "TABLE 4-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nPrimary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = LP, XT, HS. Primary Device Clock (PRI_IDLE mode), Exit Delay = T CSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = OSTS. Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = HSPLL. Primary Device Clock (PRI_IDLE mode), Exit Delay = T CSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = OSTS. Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = EC, RC, INTRC (1). Primary Device Clock (PRI_IDLE mode), Exit Delay = T CSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = -. Primary Device Clock (PRI_IDLE mode), Clock Source After Wake-up = INTOSC (3). Primary Device Clock (PRI_IDLE",
    "TABLE 4-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nmode), Exit Delay = T CSD (2). Primary Device Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON) = IOFS. T1OSC or INTRC (1), Clock Source After Wake-up = LP, XT, HS. T1OSC or INTRC (1), Exit Delay = T OST (4). T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON) = OSTS. T1OSC or INTRC (1), Clock Source After Wake-up = HSPLL. T1OSC or INTRC (1), Exit Delay = T OST + t rc (4). T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON) = OSTS. T1OSC or INTRC (1), Clock Source After Wake-up = EC, RC, INTRC (1). T1OSC or INTRC (1), Exit Delay = T CSD (2). T1OSC or",
    "TABLE 4-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nINTRC (1), Clock Ready Status Bit (OSCCON) = -. T1OSC or INTRC (1), Clock Source After Wake-up = INTOSC (2). T1OSC or INTRC (1), Exit Delay = TIOBST (5). T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON) = IOFS. INTOSC (3), Clock Source After Wake-up = LP, XT, HS. INTOSC (3), Exit Delay = T OST (5). INTOSC (3), Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (3), Clock Source After Wake-up = HSPLL. INTOSC (3), Exit Delay = T OST + t rc (4). INTOSC (3), Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (3), Clock Source After Wake-up = EC, RC, INTRC (1). INTOSC (3), Exit Delay = T",
    "TABLE 4-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nCSD (2). INTOSC (3), Clock Ready Status Bit (OSCCON) = -. INTOSC (3), Clock Source After Wake-up = INTOSC (2). INTOSC (3), Exit Delay = None. INTOSC (3), Clock Ready Status Bit (OSCCON) = IOFS. None (Sleep mode), Clock Source After Wake-up = LP, XT, HS. None (Sleep mode), Exit Delay = T OST (4). None (Sleep mode), Clock Ready Status Bit (OSCCON) = OSTS. None (Sleep mode), Clock Source After Wake-up = HSPLL. None (Sleep mode), Exit Delay = T OST + t rc (4). None (Sleep mode), Clock Ready Status Bit (OSCCON) = OSTS. None (Sleep mode), Clock Source After Wake-up = EC, RC, INTRC (1). None (Sleep mode), Exit Delay = T CSD (2). None (Sleep mode), Clock Ready Status",
    "TABLE 4-2: EXIT DELAY ON WAKE-UP BY RESET FROM SLEEP MODE OR ANY IDLE MODE (BY CLOCK SOURCES)\nBit (OSCCON) = -. None (Sleep mode), Clock Source After Wake-up = INTOSC (2). None (Sleep mode), Exit Delay = TIOBST (5). None (Sleep mode), Clock Ready Status Bit (OSCCON) = IOFS\nNote 1: In this instance, refers specifically to the 31 kHz INTRC clock source.\n2: TCSD (Parameter 38) is a required delay when waking from Sleep and all Idle modes and runs concurrently with any other required delays (see Section 4.4 'Idle Modes' ).\n3: Includes both the INTOSC 8 MHz source and postscaler derived frequencies.\n4: TOST is the Oscillator Start-up Timer (Parameter 32). t rc is the PLL Lock-out Timer (Parameter F12); it is also designated as TPLL.\n5: Execution continues during TIOBST (Parameter 39), the INTOSC stabilization period.",
    "5.0 RESET\nThe PIC18F6310/6410/8310/8410 devices differentiate between various kinds of Reset:\na) Power-on Reset (POR)\nb) MCLR Reset during normal operation\nc) MCLR Reset during power-managed modes\nd) Watchdog Timer (WDT) Reset (during execution)\ne) Programmable Brown-out Reset (BOR)\nf) RESET Instruction\ng) Stack Full Reset\nh) Stack Underflow Reset\nThis  section  discusses  Resets  generated  by  MCLR, POR and BOR and covers the operation of the various start-up  timers.  Stack  Reset  events  are  covered  in Section 6.1.3.4 'Stack Full and Underflow Resets' . WDT Resets are covered in Section 24.2 'Watchdog Timer (WDT)' .",
    "5.1 RCON Register\nDevice Reset events are tracked through the RCON register (Register 5-1). The  lower  five  bits of the register indicate that a specific Reset  event  has occurred. In most cases, these bits can only be set by the event and must be cleared by the application after the event. The state of these flag bits, taken together, can  be  read  to  indicate  the  type  of  Reset  that  just occurred. This is described in more detail in Section 5.6 'Reset State of Registers' .\nThe  RCON  register  also  has  control  bits  for  setting interrupt  priority  (IPEN)  and  software  control  of  the BOR  (SBOREN).  Interrupt  priority  is  discussed  in Section 10.0 'Interrupts' . BOR is covered in Section 5.4 'Brown-out Reset (BOR)' .\nA simplified block diagram of the On-Chip Reset Circuit is shown in Figure 5-1.",
    "RCON: RESET CONTROL REGISTER\nIPEN, R/W-0 (1) = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 = POR. IPEN, R/W-0 = BOR. bit 7, R/W-0 (1) = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)\nSBOREN: BOR Software Enable bit (1)\nIf BOREN<1:0> = 01 :\n1 = BOR is enabled\n0 = BOR is disabled\nIf BOREN<1:0> = 00 10 , or 11 :\nBit is disabled and read as ' 0 '.",
    "bit 5 Unimplemented: Read as ' 0 '\nbit 4\nRI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a Brown-out Reset occurs)",
    "bit 3 TO: Watchdog Timer Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred\nPD: Power-Down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Set by execution of the SLEEP instruction",
    "bit 1 POR: Power-on Reset Status bit\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)",
    "bit 0 BOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)\nNote 1: If SBOREN is enabled, its Reset state is ' 1 '; otherwise, it is ' 0 '.\nNote 1: It is recommended that the POR bit be set after a Power-on Reset has been detected, so that subsequent Power-on Resets may be detected.\n2: Brown-out Reset is said to have occurred when BOR is ' 0 ' and POR is ' 1 ' (assuming that POR was set to ' 1 ' by software immediately after a Power-on Reset).",
    "5.2 Master Clear (MCLR)\nThe MCLR pin provides a method for triggering a hard external Reset of the device. A Reset is generated by holding  the  pin  low.  PIC18  Extended  MCU  devices have  a  noise  filter  in  the  MCLR  Reset  path  which detects and ignores small pulses.\nThe MCLR pin is not driven low by any internal Resets, including the WDT.\nIn  PIC18F6310/6410/8310/8410  devices,  the  MCLR input can be disabled with the MCLRE Configuration bit. When MCLR is disabled, the pin becomes a digital input. See Section 11.7 'PORTG, TRISG and LATG Registers' for more information.",
    "5.3 Power-on Reset (POR)\nA Power-on Reset pulse is generated on-chip whenever  VDD  rises  above  a  certain  threshold.  This allows the device to start in the initialized state when VDD is adequate for operation.\nTo take advantage of the POR circuitry, tie the MCLR pin through a resistor (1 k \uf057 to 10 k \uf057 ) to VDD. This will eliminate external RC components usually needed to create a Power-on Reset delay. A minimum rise rate for VDD  is  specified  (Parameter  D004).  For  a  slow  rise time, see Figure 5-2.\nWhen the device starts normal operation (i.e., exits the Reset condition), device operating parameters (voltage, frequency, temperature, etc.) must be met to ensure operation. If these conditions are not met, the device  must  be  held  in  Reset  until  the  operating conditions are met.",
    "5.3 Power-on Reset (POR)\nPOR events are captured by the POR bit (RCON<1>). The state of the bit is set to ' 0 ' whenever a POR occurs; it does not change for any other Reset event. POR is not  reset  to  ' 1 '  by  any  hardware  event.  To  capture multiple events, the user manually resets the bit to ' 1 ' in software following any POR.",
    "EXTERNAL POWER-ON RESET CIRCUIT (FOR SLOW VDD POWER-UP)\nNote 1: External  Power-on  Reset  circuit  is  required only  if  the  VDD  power-up  slope  is  too  slow. The diode, D, helps discharge the capacitor quickly when VDD powers down.\n2: R < 40 k \uf057 is recommended to make sure that the  voltage  drop  across  R  does  not  violate the device's electrical specification.\n3: R1 \uf0b3 1  k \uf057 will  limit  any  current  flowing into MCLR from external capacitor, C, in the event of MCLR/VPP pin breakdown, due to Electrostatic  Discharge  (ESD)  or  Electrical Overstress (EOS).",
    "5.4 Brown-out Reset (BOR)\nPIC18F6310/6410/8310/8410  devices implement a BOR circuit  that  provides  the  user  with  a  number  of configuration  and  power-saving  options.  The  BOR  is controlled  by  the  BORV<1:0>  and  BOREN<1:0> Configuration  bits.  There  are  a  total  of  four  BOR configurations, which are summarized in Table 5-1.\nThe BOR threshold is set by the BORV<1:0> bits. If BOR is  enabled  (any  values  of  BOREN<1:0>  except  ' 00 '), any  drop  of  VDD  below  VBOR  (Parameter D005)  for greater than TBOR (Parameter 35) will reset the device. A Reset may or may not occur if VDD falls below VBOR for  less  than  TBOR.  The chip will  remain  in Brown-out Reset until VDD rises above VBOR.",
    "5.4 Brown-out Reset (BOR)\nIf the Power-up Timer is enabled, it will be invoked after VDD  rises  above  VBOR;  it  then  will  keep  the  chip  in Reset for an additional time delay, TPWRT (Parameter 33).  If  VDD  drops  below  VBOR  while  the Power-up Timer is running, the chip will go back into a Brown-out  Reset  and  the  Power-up  Timer  will  be initialized. Once VDD rises above VBOR, the Power-up Timer will execute the additional time delay.\nBOR and the Power-up Timer (PWRT) are independently configured. Enabling the Brown-out Reset does not automatically enable the PWRT.",
    "5.4.1 SOFTWARE ENABLED BOR\nWhen BOREN<1:0> = 01 , the BOR can be enabled or disabled by the user in software. This is done with the control  bit,  SBOREN  (RCON<6>).  Setting  SBOREN enables the BOR to function as previously described. Clearing  SBOREN  disables  the  BOR  entirely.  The SBOREN bit operates only in this mode; otherwise, it is read as ' 0 '.\nPlacing the BOR under software control gives the user the additional flexibility of tailoring the application to its environment without having to reprogram the device to change the BOR configuration. It also allows the user to  tailor  device  power  consumption  in  software  by eliminating the incremental current that the BOR consumes.  While  the  BOR  current  is  typically  very small, it may have some impact in low-power applications.",
    "Note:\nEven when BOR is under software control, the Brown-out Reset voltage level is still  set by the BORV<1:0> Configuration bits. It cannot be changed in software.",
    "5.4.2 DETECTING BOR\nWhen Brown-out Reset is enabled, the BOR bit always resets to ' 0 ' on any BOR or POR event. This makes it difficult  to  determine  if  a  Brown-out  Reset  event  has occurred  just  by  reading  the  state  of  BOR  alone.  A more reliable  method is  to  simultaneously  check  the state  of  both  POR  and BOR.  This  assumes  that  the POR bit is reset to ' 1 ' in software immediately after any POR event. If BOR is ' 0 '  while  POR is  ' 1 ',  it  can  be reliably assumed that a BOR event has occurred.",
    "5.4.3 DISABLING BOR IN SLEEP MODE\nWhen  BOREN<1:0>  = 10 ,  the  BOR  remains  under hardware control and operates as previously described. Whenever the device enters Sleep mode, however, the BOR is automatically disabled. When the device  returns  to  any  other  operating  mode,  BOR  is automatically re-enabled.\nThis  mode  allows  for  applications  to  recover  from brown-out  situations,  while  actively  executing  code, when the device requires BOR protection the most. At the same time, it saves additional power in Sleep mode by eliminating the small incremental BOR current.",
    "5.4.3 DISABLING BOR IN SLEEP MODE\nTABLE 5-1: BOR CONFIGURATIONS\n\n0, BOR Configuration.BOREN0 = 0. 0, Status of SBOREN.(RCON<6>) = Unavailable. 0, BOR Operation = BOR is disabled; must be enabled by reprogramming the Configuration bits.. 0, BOR Configuration.BOREN0 = 1. 0, Status of SBOREN.(RCON<6>) = Available. 0, BOR Operation = BOR is enabled in software; operation controlled by SBOREN.. 1, BOR Configuration.BOREN0 = 0. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR is enabled in hardware and active during the Run and Idle modes; disabled during Sleep mode.. 1, BOR Configuration.BOREN0 = 1. 1, Status of SBOREN.(RCON<6>) = Unavailable. 1, BOR Operation = BOR is enabled in hardware; must be disabled by reprogramming the Configuration bits.",
    "5.5 Device Reset Timers\nPIC18F6310/6410/8310/8410 devices incorporate three  separate  on-chip  timers  that  help  regulate  the Power-on  Reset  process.  Their  main  function  is  to ensure that the device clock is stable before code is executed. These timers are:\n\u00b7 Power-up Timer (PWRT)\n\u00b7 Oscillator Start-up Timer (OST)\n\u00b7 PLL Lock Time-out",
    "5.5.1 POWER-UP TIMER (PWRT)\nThe Power-up Timer (PWRT) of the PIC18F6310/6410/8310/8410 devices is an 11-bit counter  which  uses  the  INTRC  source  as  the  clock input.  This  yields  an  approximate  time  interval  of 2048 x 32 \uf06d s = 65.6 ms. While the PWRT is counting, the device is held in Reset.\nThe power-up time delay depends on the INTRC clock and will vary from chip to chip due to temperature and process variation. See DC Parameter 33 for details.\nThe  PWRT  is  enabled  by  clearing  the  PWRTEN Configuration bit.",
    "5.5.2 OSCILLATOR START-UP TIMER (OST)\nThe Oscillator Start-up Timer (OST) provides a 1024 oscillator cycle (from OSC1 input) delay after the PWRT delay is over (Parameter 33). This ensures that the  crystal  oscillator  or  resonator  has  started  and  is stabilized.\nThe OST time-out is invoked only for XT, LP, HS and HSPLL modes, and only on Power-on Reset or on exit from most power-managed modes.",
    "TABLE 5-2: TIME-OUT IN VARIOUS SITUATIONS\nHSPLL, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 T OSC + 2 ms (2). HSPLL, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 T OSC + 2 ms (2). HSPLL, Exit from Power-Managed Mode. = 1024 T OSC + 2 ms (2). HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 T OSC. HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 T OSC. HS, XT, LP, Exit from Power-Managed Mode. = 1024 T OSC. EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. EC, ECIO, Exit from Power-Managed",
    "TABLE 5-2: TIME-OUT IN VARIOUS SITUATIONS\nMode. = -. RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 1 = -. RC, RCIO, Exit from Power-Managed Mode. = -. INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 1 = -. INTIO1, INTIO2, Exit from Power-Managed Mode. = -\nNote 1: 66 ms (65.5 ms) is the nominal Power-up Timer (PWRT) delay.\n- 2: 2 ms is the nominal time required for the PLL to lock.",
    "5.5.3 PLL LOCK TIME-OUT\nWith  the  PLL  enabled  in  its  PLL  mode,  the  time-out sequence  following a Power-on  Reset  is slightly different from other oscillator modes. A separate timer is used to provide a fixed time-out that is sufficient for the PLL to lock to the main oscillator frequency. This PLL lock time-out (TPLL) is typically 2 ms and follows the oscillator start-up time-out.",
    "5.5.4 TIME-OUT SEQUENCE\nOn power-up, the time-out sequence is as follows:\n1. After the POR  pulse has cleared, PWRT time-out is invoked (if enabled).\n2. Then, the OST is activated.\nThe total time-out will vary based on oscillator configuration and the status of the PWRT. Figure 5-3, Figure 5-4,  Figure 5-5,  Figure 5-6  and  Figure 5-7  all depict  time-out  sequences  on  power-up,  with  the Power-up Timer enabled and the device operating in HS Oscillator mode. Figures 5-3 through 5-6 also apply to devices operating in XT or LP modes. For devices in RC mode and with the PWRT disabled, on the other hand, there will be no time-out at all.\nSince the time-outs occur from the POR pulse, if MCLR is kept  low  long  enough,  all  time-outs  will  expire. Bringing MCLR high will begin execution immediately (Figure 5-5). This is useful for testing purposes or to synchronize more  than one PIC18FXXXX  device operating in parallel.",
    "FIGURE 5-3: TIME-OUT SEQUENCE ON POWER-UP (MCLR TIED TO VDD, VDD RISE < TPWRT)\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "TIME-OUT SEQUENCE ON POWER-UP (MCLR NOT TIED TO VDD): CASE 1\nTPWRT\nTOST\nVDD\nMCLR\nINTERNAL POR\nPWRT TIME-OUT\nOST TIME-OUT\nINTERNAL RESET",
    "FIGURE 5-7: TIME-OUT SEQUENCE ON POR W/PLL ENABLED (MCLR TIED TO VDD)\nNote:\nTOST = 1024 clock cycles.\nTPLL \uf0bb 2 ms max. First three stages of the PWRT timer.",
    "5.6 Reset State of Registers\nMost registers are unaffected by a Reset. Their status is unknown  on  POR  and  unchanged  by  all  other Resets.  The  other  registers  are  forced  to  a  'Reset state' depending on the type of Reset that occurred.\nTable 5-4  describes  the  Reset  states  for  all  of  the Special Function Registers. These are categorized by Power-on  and  Brown-out  Resets,  Master  Clear  and WDT Resets and WDT wake-ups.\nMost  registers  are  not  affected  by  a  WDT  wake-up, since  this  is  viewed  as  the  resumption  of  normal operation. Status bits from the RCON register, RI, TO, PD,  POR and  BOR,  are  set  or  cleared  differently  in different  Reset  situations,  as  indicated  in  Table 5-3. These bits are used in software to determine the nature of the Reset.\n\nTABLE 5-3: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER",
    "5.6 Reset State of Registers\nPower-on Reset, Program.Counter = 0000h. Power-on Reset, RCON Register.SBOREN = 1. Power-on Reset, RCON Register.RI = 1. Power-on Reset, RCON Register.TO = 1. Power-on Reset, RCON Register.PD = 1. Power-on Reset, RCON Register.POR = 0. Power-on Reset, RCON Register.BOR = 0. Power-on Reset, STKPTR Register.STKFUL = 0. Power-on Reset, STKPTR Register.STKUNF = 0. RESET Instruction, Program.Counter = 0000h. RESET Instruction, RCON Register.SBOREN = u (2). RESET Instruction, RCON Register.RI = 0. RESET Instruction, RCON Register.TO = u. RESET Instruction, RCON Register.PD = u. RESET Instruction, RCON Register.POR = u. RESET Instruction, RCON Register.BOR = u. RESET Instruction, STKPTR Register.STKFUL = u. RESET Instruction, STKPTR Register.STKUNF = u. Brown-out Reset,",
    "5.6 Reset State of Registers\nProgram.Counter = 0000h. Brown-out Reset, RCON Register.SBOREN = u (2). Brown-out Reset, RCON Register.RI = 1. Brown-out Reset, RCON Register.TO = 1. Brown-out Reset, RCON Register.PD = 1. Brown-out Reset, RCON Register.POR = u. Brown-out Reset, RCON Register.BOR = 0. Brown-out Reset, STKPTR Register.STKFUL = u. Brown-out Reset, STKPTR Register.STKUNF = u. MCLR Reset during Power-Managed Run Modes, Program.Counter = 0000h. MCLR Reset during Power-Managed Run Modes, RCON Register.SBOREN = u (2). MCLR Reset during Power-Managed Run Modes, RCON Register.RI = u. MCLR Reset during Power-Managed Run Modes, RCON Register.TO = 1. MCLR Reset during Power-Managed Run Modes, RCON Register.PD = u. MCLR Reset during Power-Managed Run Modes, RCON Register.POR = u. MCLR Reset during Power-Managed Run",
    "5.6 Reset State of Registers\nModes, RCON Register.BOR = u. MCLR Reset during Power-Managed Run Modes, STKPTR Register.STKFUL = u. MCLR Reset during Power-Managed Run Modes, STKPTR Register.STKUNF = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, Program.Counter = 0000h. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.SBOREN = u (2). MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.RI = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.TO = 1. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.PD = 0. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.POR = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, RCON Register.BOR = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode, STKPTR Register.STKFUL = u. MCLR Reset during Power-Managed Idle Modes and Sleep Mode,",
    "5.6 Reset State of Registers\nSTKPTR Register.STKUNF = u. WDT Time-out during Full-Power or Power-Managed Run Modes, Program.Counter = 0000h. WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.SBOREN = u (2). WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.RI = u. WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.TO = 0. WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.PD = u. WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.POR = u. WDT Time-out during Full-Power or Power-Managed Run Modes, RCON Register.BOR = u. WDT Time-out during Full-Power or Power-Managed Run Modes, STKPTR Register.STKFUL = u. WDT Time-out during Full-Power or Power-Managed Run Modes, STKPTR Register.STKUNF = u. MCLR Reset during",
    "5.6 Reset State of Registers\nFull-Power Execution, Program.Counter = 0000h. MCLR Reset during Full-Power Execution, RCON Register.SBOREN = u (2). MCLR Reset during Full-Power Execution, RCON Register.RI = u. MCLR Reset during Full-Power Execution, RCON Register.TO = u. MCLR Reset during Full-Power Execution, RCON Register.PD = u. MCLR Reset during Full-Power Execution, RCON Register.POR = u. MCLR Reset during Full-Power Execution, RCON Register.BOR = u. MCLR Reset during Full-Power Execution, STKPTR Register.STKFUL = u. MCLR Reset during Full-Power Execution, STKPTR Register.STKUNF = u. Stack Full Reset (STVREN = 1 ), Program.Counter = 0000h. Stack Full Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Full Reset (STVREN = 1 ), RCON Register.RI = u. Stack Full Reset (STVREN = 1 ), RCON Register.TO = u. Stack Full Reset",
    "5.6 Reset State of Registers\n(STVREN = 1 ), RCON Register.PD = u. Stack Full Reset (STVREN = 1 ), RCON Register.POR = u. Stack Full Reset (STVREN = 1 ), RCON Register.BOR = u. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKFUL = 1. Stack Full Reset (STVREN = 1 ), STKPTR Register.STKUNF = u. Stack Underflow Reset (STVREN = 1 ), Program.Counter = 0000h. Stack Underflow Reset (STVREN = 1 ), RCON Register.SBOREN = u (2). Stack Underflow Reset (STVREN = 1 ), RCON Register.RI = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.TO = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.PD = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.POR = u. Stack Underflow Reset (STVREN = 1 ), RCON Register.BOR = u. Stack",
    "5.6 Reset State of Registers\nUnderflow Reset (STVREN = 1 ), STKPTR Register.STKFUL = u. Stack Underflow Reset (STVREN = 1 ), STKPTR Register.STKUNF = 1. Stack Underflow Error (not an actual Reset, STVREN = 0 ), Program.Counter = 0000h. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.SBOREN = u (2). Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.RI = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.TO = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.PD = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.POR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register.BOR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ),",
    "5.6 Reset State of Registers\nSTKPTR Register.STKFUL = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKPTR Register.STKUNF = 1. WDT Time-out during Power-Managed Idle or Sleep Modes, Program.Counter = PC + 2. WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.SBOREN = u (2). WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.RI = u. WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.TO = 0. WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.PD = 0. WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.POR = u. WDT Time-out during Power-Managed Idle or Sleep Modes, RCON Register.BOR = u. WDT Time-out during Power-Managed Idle or Sleep Modes, STKPTR Register.STKFUL = u. WDT Time-out during Power-Managed Idle or Sleep Modes, STKPTR",
    "5.6 Reset State of Registers\nRegister.STKUNF = u. Interrupt Exit from Power-Managed Modes, Program.Counter = PC + 2 (1). Interrupt Exit from Power-Managed Modes, RCON Register.SBOREN = u (2). Interrupt Exit from Power-Managed Modes, RCON Register.RI = u. Interrupt Exit from Power-Managed Modes, RCON Register.TO = u. Interrupt Exit from Power-Managed Modes, RCON Register.PD = 0. Interrupt Exit from Power-Managed Modes, RCON Register.POR = u. Interrupt Exit from Power-Managed Modes, RCON Register.BOR = u. Interrupt Exit from Power-Managed Modes, STKPTR Register.STKFUL = u. Interrupt Exit from Power-Managed Modes, STKPTR Register.STKUNF = u\nLegend:\nu = unchanged",
    "5.6 Reset State of Registers\nNote 1: When the wake-up is due to an interrupt and the GIEH or GIEL bits are set, the PC is loaded with the interrupt vector (008h or 0018h).\n2: Reset state is ' 1 ' for POR and unchanged for all other Resets when software BOR is enabled (BOREN<1:0> Configuration bits = 01 and SBOREN = 1 ); otherwise, the Reset state is ' 0 '.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSU, Applicable Devices = 6X10. TOSU, Applicable Devices = 8X10. TOSU, Power-on Reset, Brown-out Reset = ---0 0000. TOSU, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. TOSU, Wake-up via WDT or Interrupt = ---0 uuuu (3). TOSH, Applicable Devices = 6X10. TOSH, Applicable Devices = 8X10. TOSH, Power-on Reset, Brown-out Reset = 0000 0000. TOSH, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSH, Wake-up via WDT or Interrupt = uuuu uuuu (3). TOSL, Applicable Devices = 6X10. TOSL, Applicable Devices = 8X10. TOSL, Power-on Reset, Brown-out Reset = 0000 0000. TOSL, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSL, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nuuuu (3). STKPTR, Applicable Devices = 6X10. STKPTR, Applicable Devices = 8X10. STKPTR, Power-on Reset, Brown-out Reset = uu-0 0000. STKPTR, MCLR Resets WDT Reset RESET Instruction Stack Resets = 00-0 0000. STKPTR, Wake-up via WDT or Interrupt = uu-u uuuu (3). PCLATU, Applicable Devices = 6X10. PCLATU, Applicable Devices = 8X10. PCLATU, Power-on Reset, Brown-out Reset = ---0 0000. PCLATU, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. PCLATU, Wake-up via WDT or Interrupt = ---u uuuu. PCLATH, Applicable Devices = 6X10. PCLATH, Applicable Devices = 8X10. PCLATH, Power-on Reset, Brown-out Reset = 0000 0000. PCLATH, MCLR Resets WDT Reset",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nRESET Instruction Stack Resets = 0000 0000. PCLATH, Wake-up via WDT or Interrupt = uuuu uuuu. PCL, Applicable Devices = 6X10. PCL, Applicable Devices = 8X10. PCL, Power-on Reset, Brown-out Reset = 0000 0000. PCL, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PCL, Wake-up via WDT or Interrupt = PC + 2 (2). TBLPTRU, Applicable Devices = 6X10. TBLPTRU, Applicable Devices = 8X10. TBLPTRU, Power-on Reset, Brown-out Reset = --00 0000. TBLPTRU, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0000. TBLPTRU, Wake-up via WDT or Interrupt = --uu uuuu. TBLPTRH, Applicable Devices = 6X10. TBLPTRH, Applicable Devices = 8X10. TBLPTRH, Power-on Reset, Brown-out Reset = 0000",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n0000. TBLPTRH, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRH, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRL, Applicable Devices = 6X10. TBLPTRL, Applicable Devices = 8X10. TBLPTRL, Power-on Reset, Brown-out Reset = 0000 0000. TBLPTRL, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRL, Wake-up via WDT or Interrupt = uuuu uuuu. TABLAT, Applicable Devices = 6X10. TABLAT, Applicable Devices = 8X10. TABLAT, Power-on Reset, Brown-out Reset = 0000 0000. TABLAT, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TABLAT, Wake-up via WDT or Interrupt = uuuu uuuu. PRODH, Applicable Devices = 6X10. PRODH, Applicable Devices = 8X10. PRODH, Power-on",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nReset, Brown-out Reset = xxxx xxxx. PRODH, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PRODH, Wake-up via WDT or Interrupt = uuuu uuuu. PRODL, Applicable Devices = 6X10. PRODL, Applicable Devices = 8X10. PRODL, Power-on Reset, Brown-out Reset = xxxx xxxx. PRODL, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PRODL, Wake-up via WDT or Interrupt = uuuu uuuu. INTCON, Applicable Devices = 6X10. INTCON, Applicable Devices = 8X10. INTCON, Power-on Reset, Brown-out Reset = 0000 000x. INTCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 000u. INTCON, Wake-up via WDT or Interrupt = uuuu uuuu (1). INTCON2, Applicable Devices = 6X10. INTCON2, Applicable Devices =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n8X10. INTCON2, Power-on Reset, Brown-out Reset = 1111 1111. INTCON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. INTCON2, Wake-up via WDT or Interrupt = uuuu uuuu (1). INTCON3, Applicable Devices = 6X10. INTCON3, Applicable Devices = 8X10. INTCON3, Power-on Reset, Brown-out Reset = 1100 0000. INTCON3, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1100 0000. INTCON3, Wake-up via WDT or Interrupt = uuuu uuuu (1). INDF0, Applicable Devices = 6X10. INDF0, Applicable Devices = 8X10. INDF0, Power-on Reset, Brown-out Reset = N/A. INDF0, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF0, Wake-up via WDT or Interrupt = N/A. POSTINC0, Applicable Devices =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n6X10. POSTINC0, Applicable Devices = 8X10. POSTINC0, Power-on Reset, Brown-out Reset = N/A. POSTINC0, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC0, Wake-up via WDT or Interrupt = N/A. POSTDEC0, Applicable Devices = 6X10. POSTDEC0, Applicable Devices = 8X10. POSTDEC0, Power-on Reset, Brown-out Reset = N/A. POSTDEC0, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC0, Wake-up via WDT or Interrupt = N/A. PREINC0, Applicable Devices = 6X10. PREINC0, Applicable Devices = 8X10. PREINC0, Power-on Reset, Brown-out Reset = N/A. PREINC0, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PREINC0, Wake-up via WDT or Interrupt = N/A. PLUSW0,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nApplicable Devices = 6X10. PLUSW0, Applicable Devices = 8X10. PLUSW0, Power-on Reset, Brown-out Reset = N/A. PLUSW0, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PLUSW0, Wake-up via WDT or Interrupt = N/A. FSR0H, Applicable Devices = 6X10. FSR0H, Applicable Devices = 8X10. FSR0H, Power-on Reset, Brown-out Reset = ---- xxxx. FSR0H, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu. FSR0H, Wake-up via WDT or Interrupt = ---- uuuu. FSR0L, Applicable Devices = 6X10. FSR0L, Applicable Devices = 8X10. FSR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR0L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nFSR0L, Wake-up via WDT or Interrupt = uuuu uuuu. WREG, Applicable Devices = 6X10. WREG, Applicable Devices = 8X10. WREG, Power-on Reset, Brown-out Reset = xxxx xxxx. WREG, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. WREG, Wake-up via WDT or Interrupt = uuuu uuuu. INDF1, Applicable Devices = 6X10. INDF1, Applicable Devices = 8X10. INDF1, Power-on Reset, Brown-out Reset = N/A. INDF1, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF1, Wake-up via WDT or Interrupt = N/A. POSTINC1, Applicable Devices = 6X10. POSTINC1, Applicable Devices = 8X10. POSTINC1, Power-on Reset, Brown-out Reset = N/A. POSTINC1, MCLR Resets WDT Reset RESET Instruction Stack Resets",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= N/A. POSTINC1, Wake-up via WDT or Interrupt = N/A. POSTDEC1, Applicable Devices = 6X10. POSTDEC1, Applicable Devices = 8X10. POSTDEC1, Power-on Reset, Brown-out Reset = N/A. POSTDEC1, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC1, Wake-up via WDT or Interrupt = N/A. PREINC1, Applicable Devices = 6X10. PREINC1, Applicable Devices = 8X10. PREINC1, Power-on Reset, Brown-out Reset = N/A. PREINC1, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PREINC1, Wake-up via WDT or Interrupt = N/A. PLUSW1, Applicable Devices = 6X10. PLUSW1, Applicable Devices = 8X10. PLUSW1, Power-on Reset, Brown-out Reset = N/A. PLUSW1, MCLR Resets WDT Reset RESET Instruction Stack Resets",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n= N/A. PLUSW1, Wake-up via WDT or Interrupt = N/A. FSR1H, Applicable Devices = 6X10. FSR1H, Applicable Devices = 8X10. FSR1H, Power-on Reset, Brown-out Reset = ---- xxxx. FSR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu. FSR1H, Wake-up via WDT or Interrupt = ---- uuuu. FSR1L, Applicable Devices = 6X10. FSR1L, Applicable Devices = 8X10. FSR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. FSR1L, Wake-up via WDT or Interrupt = uuuu uuuu. BSR, Applicable Devices = 6X10. BSR, Applicable Devices = 8X10. BSR, Power-on Reset, Brown-out Reset =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n---- 0000. BSR, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- 0000. BSR, Wake-up via WDT or Interrupt = ---- uuuu\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.\nNote",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 5-3 for Reset value for specific condition.\n5: Bits, 6 and 7 of PORTA, LATA and TRISA, are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nINDF2, Applicable Devices = 6X10. INDF2, Applicable Devices = 8X10. INDF2, Power-on Reset, Brown-out Reset = N/A. INDF2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF2, Wake-up via WDT or Interrupt = N/A. POSTINC2, Applicable Devices = 6X10. POSTINC2, Applicable Devices = 8X10. POSTINC2, Power-on Reset, Brown-out Reset = N/A. POSTINC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC2, Wake-up via WDT or Interrupt = N/A. POSTDEC2, Applicable Devices = 6X10. POSTDEC2, Applicable Devices = 8X10. POSTDEC2, Power-on Reset, Brown-out Reset = N/A. POSTDEC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC2, Wake-up via WDT or Interrupt =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nN/A. PREINC2, Applicable Devices = 6X10. PREINC2, Applicable Devices = 8X10. PREINC2, Power-on Reset, Brown-out Reset = N/A. PREINC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PREINC2, Wake-up via WDT or Interrupt = N/A. PLUSW2, Applicable Devices = 6X10. PLUSW2, Applicable Devices = 8X10. PLUSW2, Power-on Reset, Brown-out Reset = N/A. PLUSW2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PLUSW2, Wake-up via WDT or Interrupt = N/A. FSR2H, Applicable Devices = 6X10. FSR2H, Applicable Devices = 8X10. FSR2H, Power-on Reset, Brown-out Reset = ---- xxxx. FSR2H, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nFSR2H, Wake-up via WDT or Interrupt = ---- uuuu. FSR2L, Applicable Devices = 6X10. FSR2L, Applicable Devices = 8X10. FSR2L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR2L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. FSR2L, Wake-up via WDT or Interrupt = uuuu uuuu. STATUS, Applicable Devices = 6X10. STATUS, Applicable Devices = 8X10. STATUS, Power-on Reset, Brown-out Reset = ---x xxxx. STATUS, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---u uuuu. STATUS, Wake-up via WDT or Interrupt = ---u uuuu. TMR0H, Applicable Devices = 6X10. TMR0H, Applicable Devices = 8X10. TMR0H, Power-on Reset, Brown-out Reset = 0000",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. TMR0H, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TMR0H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0L, Applicable Devices = 6X10. TMR0L, Applicable Devices = 8X10. TMR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR0L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR0L, Wake-up via WDT or Interrupt = uuuu uuuu. T0CON, Applicable Devices = 6X10. T0CON, Applicable Devices = 8X10. T0CON, Power-on Reset, Brown-out Reset = 1111 1111. T0CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. T0CON, Wake-up via WDT or Interrupt = uuuu uuuu. OSCCON, Applicable Devices =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n6X10. OSCCON, Applicable Devices = 8X10. OSCCON, Power-on Reset, Brown-out Reset = 0100 q000. OSCCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0100 00q0. OSCCON, Wake-up via WDT or Interrupt = uuuu uuqu. HLVDCON, Applicable Devices = 6X10. HLVDCON, Applicable Devices = 8X10. HLVDCON, Power-on Reset, Brown-out Reset = 0-00 0101. HLVDCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0-00 0101. HLVDCON, Wake-up via WDT or Interrupt = u-uu uuuu. WDTCON, Applicable Devices = 6X10. WDTCON, Applicable Devices = 8X10. WDTCON, Power-on Reset, Brown-out Reset = ---- ---0. WDTCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- ---0.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDTCON, Wake-up via WDT or Interrupt = ---- ---u. RCON (4), Applicable Devices = 6X10. RCON (4), Applicable Devices = 8X10. RCON (4), Power-on Reset, Brown-out Reset = 0q-1 11q0. RCON (4), MCLR Resets WDT Reset RESET Instruction Stack Resets = 0q-q qquu. RCON (4), Wake-up via WDT or Interrupt = uq-u qquu. TMR1H, Applicable Devices = 6X10. TMR1H, Applicable Devices = 8X10. TMR1H, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR1H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1L, Applicable Devices = 6X10. TMR1L, Applicable Devices",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= 8X10. TMR1L, Power-on Reset, Brown-out Reset = 0000 0000. TMR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR1L, Wake-up via WDT or Interrupt = uuuu uuuu. T1CON, Applicable Devices = 6X10. T1CON, Applicable Devices = 8X10. T1CON, Power-on Reset, Brown-out Reset = 0000 0000. T1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = u0uu uuuu. T1CON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR2, Applicable Devices = 6X10. TMR2, Applicable Devices = 8X10. TMR2, Power-on Reset, Brown-out Reset = 1111 1111. TMR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TMR2, Wake-up",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nvia WDT or Interrupt = uuuu uuuu. PR2, Applicable Devices = 6X10. PR2, Applicable Devices = 8X10. PR2, Power-on Reset, Brown-out Reset = -000 0000. PR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = -111 1111. PR2, Wake-up via WDT or Interrupt = -111 1111. T2CON, Applicable Devices = 6X10. T2CON, Applicable Devices = 8X10. T2CON, Power-on Reset, Brown-out Reset = -000 0000. T2CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = -000 0000. T2CON, Wake-up via WDT or Interrupt = -uuu uuuu. SSPBUF, Applicable Devices = 6X10. SSPBUF, Applicable Devices = 8X10. SSPBUF, Power-on Reset, Brown-out Reset = 0000 0000. SSPBUF, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. SSPBUF, Wake-up via WDT or Interrupt = uuuu uuuu. SSPADD, Applicable Devices = 6X10. SSPADD, Applicable Devices = 8X10. SSPADD, Power-on Reset, Brown-out Reset = 0000 0000. SSPADD, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPADD, Wake-up via WDT or Interrupt = uuuu uuuu. SSPSTAT, Applicable Devices = 6X10. SSPSTAT, Applicable Devices = 8X10. SSPSTAT, Power-on Reset, Brown-out Reset = 0000 0000. SSPSTAT, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPSTAT, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON1, Applicable Devices = 6X10. SSPCON1, Applicable Devices = 8X10. SSPCON1, Power-on Reset, Brown-out Reset = 0000 0000.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nSSPCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPCON1, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON2, Applicable Devices = 6X10. SSPCON2, Applicable Devices = 8X10. SSPCON2, Power-on Reset, Brown-out Reset = 0000 0000. SSPCON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPCON2, Wake-up via WDT or Interrupt = uuuu uuuu. ADRESH, Applicable Devices = 6X10. ADRESH, Applicable Devices = 8X10. ADRESH, Power-on Reset, Brown-out Reset = xxxx xxxx. ADRESH, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu uuuu. ADRESL, Applicable Devices = 6X10. ADRESL, Applicable Devices = 8X10.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nADRESL, Power-on Reset, Brown-out Reset = 0000 0000. ADRESL, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu uuuu. ADCON0 ADCON1, Applicable Devices = 6X10 6X10. ADCON0 ADCON1, Applicable Devices = 8X10. ADCON0 ADCON1, Power-on Reset, Brown-out Reset = --00 0000. ADCON0 ADCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0000 --00 0000. ADCON0 ADCON1, Wake-up via WDT or Interrupt = --uu uuuu --uu uuuu. ADCON2, Applicable Devices = 6X10. ADCON2, Applicable Devices = 8X10. ADCON2, Power-on Reset, Brown-out Reset = 0-00 0000. ADCON2, MCLR Resets WDT Reset RESET Instruction Stack",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = . ADCON2, Wake-up via WDT or Interrupt = u-uu uuuu. , Applicable Devices = . , Applicable Devices = 8X10. , Power-on Reset, Brown-out Reset = --00 qqqq. , MCLR Resets WDT Reset RESET Instruction Stack Resets = 0-00 0000. , Wake-up via WDT or Interrupt = \nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 5-3 for Reset value for specific condition.\n5: Bits, 6 and 7 of PORTA, LATA and TRISA, are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCPR1H, Applicable Devices = 6X10. CCPR1H, Applicable Devices = 8X10. CCPR1H, Power-on Reset, Brown-out Reset = xxxx xxxx. CCPR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu uuuu. CCPR1L, Applicable Devices = 6X10. CCPR1L, Applicable Devices = 8X10. CCPR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. CCPR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. CCPR1L, Wake-up via WDT or Interrupt = uuuu uuuu. CCP1CON, Applicable Devices = 6X10. CCP1CON, Applicable Devices = 8X10. CCP1CON, Power-on Reset, Brown-out Reset = --00 0000. CCP1CON, MCLR Resets",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT Reset RESET Instruction Stack Resets = --00 0000. CCP1CON, Wake-up via WDT or Interrupt = --uu uuuu. CCPR2H, Applicable Devices = 6X10. CCPR2H, Applicable Devices = 8X10. CCPR2H, Power-on Reset, Brown-out Reset = xxxx xxxx. CCPR2H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu uuuu. CCPR2L, Applicable Devices = 6X10. CCPR2L, Applicable Devices = 8X10. CCPR2L, Power-on Reset, Brown-out Reset = 0000 0000. CCPR2L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu uuuu. CCP2CON, Applicable Devices = 6X10.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCP2CON, Applicable Devices = 8X10. CCP2CON, Power-on Reset, Brown-out Reset = --00 0000. CCP2CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0000. CCP2CON, Wake-up via WDT or Interrupt = --uu uuuu. CCPR3H, Applicable Devices = 6X10. CCPR3H, Applicable Devices = 8X10. CCPR3H, Power-on Reset, Brown-out Reset = xxxx xxxx. CCPR3H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. CCPR3H, Wake-up via WDT or Interrupt = uuuu uuuu. CCPR3L, Applicable Devices = 6X10. CCPR3L, Applicable Devices = 8X10. CCPR3L, Power-on Reset, Brown-out Reset = 0000 0000. CCPR3L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. CCPR3L, Wake-up via WDT or Interrupt = uuuu uuuu. CCP3CON, Applicable Devices = 6X10. CCP3CON, Applicable Devices = 8X10. CCP3CON, Power-on Reset, Brown-out Reset = --00 0000. CCP3CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0000. CCP3CON, Wake-up via WDT or Interrupt = --uu uuuu. CVRCON, Applicable Devices = 6X10. CVRCON, Applicable Devices = 8X10. CVRCON, Power-on Reset, Brown-out Reset = 0000 0000. CVRCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. CVRCON, Wake-up via WDT or Interrupt = uuuu uuuu. CMCON, Applicable Devices = 6X10. CMCON, Applicable Devices = 8X10. CMCON, Power-on Reset, Brown-out Reset = 0000",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0111. CMCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0111. CMCON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR3H, Applicable Devices = 6X10. TMR3H, Applicable Devices = 8X10. TMR3H, Power-on Reset, Brown-out Reset = 0000 0000. TMR3H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR3H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR3L, Applicable Devices = 6X10. TMR3L, Applicable Devices = 8X10. TMR3L, Power-on Reset, Brown-out Reset = 0000 0000. TMR3L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. T3CON, Applicable Devices = 6X10. T3CON, Applicable Devices = 8X10. T3CON, Power-on Reset, Brown-out Reset = 0000 0000. T3CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu uuuu. PSPCON, Applicable Devices = 6X10. PSPCON, Applicable Devices = 8X10. PSPCON, Power-on Reset, Brown-out Reset = 0000 ----. PSPCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 ----. PSPCON, Wake-up via WDT or Interrupt = uuuu ----. SPBRG1, Applicable Devices = 6X10. SPBRG1, Applicable Devices = 8X10. SPBRG1, Power-on Reset, Brown-out Reset = 0000 0000. SPBRG1, MCLR Resets WDT Reset RESET Instruction Stack",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = 0000 0000. SPBRG1, Wake-up via WDT or Interrupt = uuuu uuuu. RCREG1, Applicable Devices = 6X10. RCREG1, Applicable Devices = 8X10. RCREG1, Power-on Reset, Brown-out Reset = 0000 0000. RCREG1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. RCREG1, Wake-up via WDT or Interrupt = uuuu uuuu. TXREG1, Applicable Devices = 6X10. TXREG1, Applicable Devices = 8X10. TXREG1, Power-on Reset, Brown-out Reset = xxxx xxxx. TXREG1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TXREG1, Wake-up via WDT or Interrupt = uuuu uuuu. TXSTA1, Applicable Devices = 6X10. TXSTA1, Applicable Devices = 8X10. TXSTA1, Power-on Reset,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = 0000 0010. TXSTA1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0010. TXSTA1, Wake-up via WDT or Interrupt = uuuu uuuu. RCSTA1, Applicable Devices = 6X10. RCSTA1, Applicable Devices = 8X10. RCSTA1, Power-on Reset, Brown-out Reset = 0000 000x. RCSTA1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 000x. RCSTA1, Wake-up via WDT or Interrupt = uuuu uuuu. IPR3, Applicable Devices = 6X10. IPR3, Applicable Devices = 8X10. IPR3, Power-on Reset, Brown-out Reset = --11 ---1. IPR3, MCLR Resets WDT Reset RESET Instruction Stack Resets = --11 ---1. IPR3, Wake-up via WDT or Interrupt = --uu ---u. PIR3, Applicable Devices = 6X10.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPIR3, Applicable Devices = 8X10. PIR3, Power-on Reset, Brown-out Reset = --00 ---0. PIR3, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 ---0. PIR3, Wake-up via WDT or Interrupt = --uu ---u (1). PIE3, Applicable Devices = 6X10. PIE3, Applicable Devices = 8X10. PIE3, Power-on Reset, Brown-out Reset = --00 ---0. PIE3, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 ---0. PIE3, Wake-up via WDT or Interrupt = --uu ---u. IPR2, Applicable Devices = 6X10. IPR2, Applicable Devices = 8X10. IPR2, Power-on Reset, Brown-out Reset = 11-- 1111. IPR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 11-- 1111. IPR2, Wake-up via",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT or Interrupt = uu-- uuuu. PIR2, Applicable Devices = 6X10. PIR2, Applicable Devices = 8X10. PIR2, Power-on Reset, Brown-out Reset = 00-- 0000. PIR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 00-- 0000. PIR2, Wake-up via WDT or Interrupt = uu-- uuuu (1). PIE2, Applicable Devices = 6X10. PIE2, Applicable Devices = 8X10. PIE2, Power-on Reset, Brown-out Reset = 00-- 0000. PIE2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 00-- 0000. PIE2, Wake-up via WDT or Interrupt = uu-- uuuu. IPR1, Applicable Devices = 6X10. IPR1, Applicable Devices = 8X10. IPR1, Power-on Reset, Brown-out Reset = 1111 1111. IPR1, MCLR Resets WDT Reset RESET Instruction Stack",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = 1111 1111. IPR1, Wake-up via WDT or Interrupt = uuuu uuuu. PIR1, Applicable Devices = 6X10. PIR1, Applicable Devices = 8X10. PIR1, Power-on Reset, Brown-out Reset = 0000 0000. PIR1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PIR1, Wake-up via WDT or Interrupt = uuuu uuuu (1). PIE1, Applicable Devices = 6X10. PIE1, Applicable Devices = 8X10. PIE1, Power-on Reset, Brown-out Reset = 0000 0000. PIE1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PIE1, Wake-up via WDT or Interrupt = uuuu uuuu. MEMCON, Applicable Devices = 6X10. MEMCON, Applicable Devices = 8X10. MEMCON, Power-on Reset, Brown-out Reset = 0-00 --00.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nMEMCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0-00 --00. MEMCON, Wake-up via WDT or Interrupt = u-uu --uu. OSCTUNE, Applicable Devices = 6X10. OSCTUNE, Applicable Devices = 8X10. OSCTUNE, Power-on Reset, Brown-out Reset = 00-0 0000. OSCTUNE, MCLR Resets WDT Reset RESET Instruction Stack Resets = 00-0 0000. OSCTUNE, Wake-up via WDT or Interrupt = uu-u uuuu. TRISJ, Applicable Devices = 6X10. TRISJ, Applicable Devices = 8X10. TRISJ, Power-on Reset, Brown-out Reset = 1111 1111. TRISJ, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISJ, Wake-up via WDT or Interrupt = uuuu uuuu. TRISH, Applicable Devices = 6X10. TRISH, Applicable Devices = 8X10. TRISH,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nPower-on Reset, Brown-out Reset = 1111 1111. TRISH, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISH, Wake-up via WDT or Interrupt = uuuu uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nLegend: u = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 5-3 for Reset value for specific condition.\n5: Bits, 6 and 7 of PORTA, LATA and TRISA, are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTRISG, Applicable Devices = 6X10. TRISG, Applicable Devices = 8X10. TRISG, Power-on Reset, Brown-out Reset = ---1 1111. TRISG, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---1 1111. TRISG, Wake-up via WDT or Interrupt = ---u uuuu. TRISF, Applicable Devices = 6X10. TRISF, Applicable Devices = 8X10. TRISF, Power-on Reset, Brown-out Reset = 1111 1111. TRISF, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISF, Wake-up via WDT or Interrupt = uuuu uuuu. TRISE, Applicable Devices = 6X10. TRISE, Applicable Devices = 8X10. TRISE, Power-on Reset, Brown-out Reset = 1111 1111. TRISE, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISE, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. TRISD, Applicable Devices = 6X10. TRISD, Applicable Devices = 8X10. TRISD, Power-on Reset, Brown-out Reset = 1111 1111. TRISD, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISD, Wake-up via WDT or Interrupt = uuuu uuuu. TRISC, Applicable Devices = 6X10. TRISC, Applicable Devices = 8X10. TRISC, Power-on Reset, Brown-out Reset = 1111 1111. TRISC, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISC, Wake-up via WDT or Interrupt = uuuu uuuu. TRISB, Applicable Devices = 6X10. TRISB, Applicable Devices = 8X10. TRISB, Power-on Reset, Brown-out Reset = 1111 1111. TRISB, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. TRISB, Wake-up via WDT or Interrupt = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. TRISA (5), Applicable Devices = 6X10. TRISA (5), Applicable Devices = 8X10. TRISA (5), Power-on Reset, Brown-out Reset = 1111 1111 (5). TRISA (5), MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111 (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). LATJ, Applicable Devices = 6X10. LATJ, Applicable Devices = 8X10. LATJ, Power-on Reset, Brown-out Reset = xxxx xxxx. LATJ, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATJ, Wake-up via WDT or Interrupt = uuuu uuuu. LATH, Applicable Devices = 6X10. LATH, Applicable Devices = 8X10. LATH, Power-on Reset, Brown-out Reset = xxxx xxxx. LATH, MCLR",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATH, Wake-up via WDT or Interrupt = uuuu uuuu. LATG, Applicable Devices = 6X10. LATG, Applicable Devices = 8X10. LATG, Power-on Reset, Brown-out Reset = ---x xxxx. LATG, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---u uuuu. LATG, Wake-up via WDT or Interrupt = ---u uuuu. LATF, Applicable Devices = 6X10. LATF, Applicable Devices = 8X10. LATF, Power-on Reset, Brown-out Reset = xxxx xxxx. LATF, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATF, Wake-up via WDT or Interrupt = uuuu uuuu. LATE, Applicable Devices = 6X10. LATE, Applicable Devices = 8X10. LATE, Power-on Reset,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nBrown-out Reset = xxxx xxxx. LATE, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATE, Wake-up via WDT or Interrupt = uuuu uuuu. LATD, Applicable Devices = 6X10. LATD, Applicable Devices = 8X10. LATD, Power-on Reset, Brown-out Reset = xxxx xxxx. LATD, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATD, Wake-up via WDT or Interrupt = uuuu uuuu. LATC, Applicable Devices = 6X10. LATC, Applicable Devices = 8X10. LATC, Power-on Reset, Brown-out Reset = xxxx xxxx. LATC, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATC, Wake-up via WDT or Interrupt = uuuu uuuu. LATB, Applicable Devices = 6X10. LATB,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 8X10. LATB, Power-on Reset, Brown-out Reset = xxxx xxxx. LATB, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. LATB, Wake-up via WDT or Interrupt = uuuu uuuu. LATA (5), Applicable Devices = 6X10. LATA (5), Applicable Devices = 8X10. LATA (5), Power-on Reset, Brown-out Reset = xxxx xxxx (5). LATA (5), MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu (5). LATA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). PORTJ, Applicable Devices = 6X10. PORTJ, Applicable Devices = 8X10. PORTJ, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTJ, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu. PORTJ, Wake-up via WDT or Interrupt = uuuu uuuu. PORTH, Applicable Devices = 6X10. PORTH, Applicable Devices = 8X10. PORTH, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTH, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PORTH, Wake-up via WDT or Interrupt = uuuu uuuu. PORTG, Applicable Devices = 6X10. PORTG, Applicable Devices = 8X10. PORTG, Power-on Reset, Brown-out Reset = --xx xxxx. PORTG, MCLR Resets WDT Reset RESET Instruction Stack Resets = --uu uuuu. PORTG, Wake-up via WDT or Interrupt = --uu uuuu. PORTF, Applicable Devices = 6X10. PORTF, Applicable Devices = 8X10. PORTF, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTF, MCLR Resets WDT",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nReset RESET Instruction Stack Resets = uuuu uuuu. PORTF, Wake-up via WDT or Interrupt = uuuu uuuu. PORTE, Applicable Devices = 6X10. PORTE, Applicable Devices = 8X10. PORTE, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTE, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PORTE, Wake-up via WDT or Interrupt = uuuu uuuu. PORTD, Applicable Devices = 6X10. PORTD, Applicable Devices = 8X10. PORTD, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTD, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu uuuu. PORTC, Applicable Devices = 6X10. PORTC, Applicable Devices = 8X10. PORTC, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTC,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nMCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu uuuu. PORTB, Applicable Devices = 6X10. PORTB, Applicable Devices = 8X10. PORTB, Power-on Reset, Brown-out Reset = xxxx xxxx. PORTB, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu uuuu. PORTA (5) SPBRGH1, Applicable Devices = 6X10. PORTA (5) SPBRGH1, Applicable Devices = 8X10. PORTA (5) SPBRGH1, Power-on Reset, Brown-out Reset = xx0x 0000 (5). PORTA (5) SPBRGH1, MCLR Resets WDT Reset RESET Instruction Stack Resets = uu0u 0000 (5). PORTA (5) SPBRGH1, Wake-up via WDT or Interrupt =",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu uuuu (5). , Applicable Devices = 6X10. , Applicable Devices = 8X10. , Power-on Reset, Brown-out Reset = 0000 0000. , MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. , Wake-up via WDT or Interrupt = uuuu uuuu. BAUDCON1, Applicable Devices = 6X10. BAUDCON1, Applicable Devices = 8X10. BAUDCON1, Power-on Reset, Brown-out Reset = 0100 0-00. BAUDCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0100 0-00. BAUDCON1, Wake-up via WDT or Interrupt = uuuu u-uu. SPBRG2, Applicable Devices = 6X10. SPBRG2, Applicable Devices = 8X10. SPBRG2, Power-on Reset, Brown-out Reset = 0000. SPBRG2, MCLR Resets WDT Reset RESET Instruction Stack Resets = . SPBRG2,",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = . , Applicable Devices = . , Applicable Devices = . , Power-on Reset, Brown-out Reset = 0000. , MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. , Wake-up via WDT or Interrupt = uuuu uuuu. RCREG2, Applicable Devices = 6X10. RCREG2, Applicable Devices = 8X10. RCREG2, Power-on Reset, Brown-out Reset = 0000 0000. RCREG2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. RCREG2, Wake-up via WDT or Interrupt = uuuu uuuu. TXREG2, Applicable Devices = 6X10. TXREG2, Applicable Devices = 8X10. TXREG2, Power-on Reset, Brown-out Reset = xxxx xxxx. TXREG2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TXREG2, Wake-up via WDT or Interrupt",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= uuuu uuuu. TXSTA2, Applicable Devices = 6X10. TXSTA2, Applicable Devices = 8X10. TXSTA2, Power-on Reset, Brown-out Reset = 0000 -010. TXSTA2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 -010. TXSTA2, Wake-up via WDT or Interrupt = uuuu -uuu\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as ' 0 ', q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.",
    "TABLE 5-4: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 5-3 for Reset value for specific condition.\n5: Bits, 6 and 7 of PORTA, LATA and TRISA, are enabled depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read ' 0 '.",
    "6.0 MEMORY ORGANIZATION\nThere  are  two  types  of  memory  in  PIC18  Flash microcontroller devices:\n\u00b7 Program Memory\n\u00b7 Data RAM\nAs Harvard architecture devices, the data and program memories use separate busses; this allows for concurrent access of the two memory spaces.\nAdditional detailed information on the operation of the Flash  program  memory  is  provided  in Section 7.0 'Program Memory' .",
    "6.1 Program Memory Organization\nPIC18  microcontrollers  implement  a  21-bit  program counter,  which  is  capable  of  addressing  a  2-Mbyte program memory space. Accessing a location between the  upper  boundary  of  the  physically  implemented memory and the 2-Mbyte address will return all ' 0 's (a NOP instruction).\nThe PIC18F6310 and PIC18F8310 each have 8 Kbytes of Flash memory and can store up to 4,096 single-word instructions.  The  PIC18F6410  and  PIC18F8410  each have 16 Kbytes of Flash memory and can store up to 8,192 single-word instructions.\nPIC18 devices have two interrupt vectors. The Reset vector  address  is  at  0000h  and  the  interrupt  vector addresses are at 0008h and 0018h.\nThe program memory maps for the PIC18F6310/6410/8310/8410  devices  are  shown  in Figure 6-1.",
    "FIGURE 6-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F6310/6410/8310/8410 DEVICES\nCALL,RCALL,RETURN RETFIE,RETLW 21, PIC18FX310.PC<20:0> = CALL,RCALL,RETURN RETFIE,RETLW 21. CALL,RCALL,RETURN RETFIE,RETLW 21, PC<20:0> = CALL,RCALL,RETURN RETFIE,RETLW 21. CALL,RCALL,RETURN RETFIE,RETLW 21,  = . CALL,RCALL,RETURN RETFIE,RETLW 21, PC<20:0> = CALL,RCALL,RETURN RETFIE,RETLW 21. CALL,RCALL,RETURN RETFIE,RETLW 21, PIC18FX410.PC<20:0> = CALL,RCALL,RETURN RETFIE,RETLW 21. CALL,RCALL,RETURN RETFIE,RETLW 21, PC<20:0> = Memory 4000h 3FFFh. CALL,RCALL,RETURN RETFIE,RETLW 21,",
    "FIGURE 6-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F6310/6410/8310/8410 DEVICES\n= . CALL,RCALL,RETURN RETFIE,RETLW 21,  = . Stack Level 1, PIC18FX310.PC<20:0> = Stack Level 1. Stack Level 1, PC<20:0> = Stack Level 1. Stack Level 1,  = Space. Stack Level 1, PC<20:0> = Stack Level 1. Stack Level 1, PIC18FX410.PC<20:0> = Stack Level 1. Stack Level 1, PC<20:0> = Space. Stack Level 1,  = . Stack Level 1,  = . \uf0b7 \uf0b7 \uf0b7, PIC18FX310.PC<20:0> = \uf0b7 \uf0b7 \uf0b7. \uf0b7 \uf0b7 \uf0b7, PC<20:0> = \uf0b7 \uf0b7 \uf0b7. \uf0b7 \uf0b7 \uf0b7,  = . \uf0b7 \uf0b7 \uf0b7, PC<20:0> = \uf0b7 \uf0b7 \uf0b7. \uf0b7 \uf0b7 \uf0b7, PIC18FX410.PC<20:0> = \uf0b7 \uf0b7 \uf0b7. \uf0b7 \uf0b7 \uf0b7, PC<20:0> = \uf0b7 \uf0b7 \uf0b7. \uf0b7 \uf0b7 \uf0b7,  = . \uf0b7 \uf0b7 \uf0b7,",
    "FIGURE 6-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F6310/6410/8310/8410 DEVICES\n= . Stack Level 31, PIC18FX310.PC<20:0> = Stack Level 31. Stack Level 31, PC<20:0> = Stack Level 31. Stack Level 31,  = . Stack Level 31, PC<20:0> = Stack Level 31. Stack Level 31, PIC18FX410.PC<20:0> = Stack Level 31. Stack Level 31, PC<20:0> = Stack Level 31. Stack Level 31,  = . Stack Level 31,  = . Reset Vector, PIC18FX310.PC<20:0> = High-Priority Interrupt Vector. Reset Vector, PC<20:0> = 0000h 0008h. Reset Vector,  = . Reset Vector, PC<20:0> = High-Priority Interrupt Vector. Reset Vector, PIC18FX410.PC<20:0> = Reset Vector. Reset Vector, PC<20:0> = 0000h 0008h. Reset Vector,  = . Reset Vector,",
    "FIGURE 6-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F6310/6410/8310/8410 DEVICES\n= . Low-Priority Interrupt, PIC18FX310.PC<20:0> = Vector. Low-Priority Interrupt, PC<20:0> = 0018h. Low-Priority Interrupt,  = . Low-Priority Interrupt, PC<20:0> = Low-Priority Interrupt Vector. Low-Priority Interrupt, PIC18FX410.PC<20:0> = Low-Priority Interrupt Vector. Low-Priority Interrupt, PC<20:0> = 0018h. Low-Priority Interrupt,  = . Low-Priority Interrupt,  = . On-Chip Program Memory, PIC18FX310.PC<20:0> = . On-Chip Program Memory, PC<20:0> = 2000h 1FFFh. On-Chip Program Memory,  = . On-Chip Program Memory, PC<20:0> = On-Chip. On-Chip Program Memory, PIC18FX410.PC<20:0> = Program Memory. On-Chip Program Memory, PC<20:0> = . On-Chip Program Memory,",
    "FIGURE 6-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F6310/6410/8310/8410 DEVICES\n= . On-Chip Program Memory,  = . Read ' 0 ', PIC18FX310.PC<20:0> = . Read ' 0 ', PC<20:0> = . Read ' 0 ',  = User Memory. Read ' 0 ', PC<20:0> = . Read ' 0 ', PIC18FX410.PC<20:0> = . Read ' 0 ', PC<20:0> = User. Read ' 0 ',  = . Read ' 0 ',  = . , PIC18FX310.PC<20:0> = 1FFFFFh. , PC<20:0> = . ,  = . , PC<20:0> = . , PIC18FX410.PC<20:0> = . , PC<20:0> = 1FFFFFh. ,  = . ,  = ",
    "6.1.1 PIC18F8310/8410 PROGRAM MEMORY MODES\nIn addition to available on-chip Flash program memory, 80-pin  devices  in  this  family  can  also  address  up  to 2 Mbytes  of  external  program  memory  through  an external  memory  interface.  There  are  four  distinct operating modes available to the controllers:\n\u00b7 Microprocessor (MP)\n\u00b7 The Extended Microcontroller Mode allows access to both internal and external program memories as a single block. The device can access its entire on-chip Flash memory; above this, the device accesses external program memory up to the 2-Mbyte program space limit. As with Boot Block mode, execution automatically switches between the two memories as required.\n\u00b7 Microprocessor with Boot Block (MPBB)\n\u00b7 Extended Microcontroller (EMC)\n\u00b7 Microcontroller (MC)\nThe program memory mode is determined by setting the two Least Significant bits of the CONFIG3L Configuration  byte,  as  shown  in  Register 6-1.  (See  also Section 24.1 'Configuration Bits' for additional details on the device Configuration bits.)\nThe program memory modes operate as follows:",
    "6.1.1 PIC18F8310/8410 PROGRAM MEMORY MODES\n\u00b7 The Microprocessor Mode permits access only to external program memory; the contents of the on-chip Flash memory is ignored. The 21-bit program counter permits access to the entire 2-Mbyte linear program memory space.\n\u00b7 The Microprocessor with Boot Block Mode accesses on-chip Flash memory from addresses 000000h to 0007FFh. Above this, external program memory is accessed all the way up to the 2-Mbyte limit. Program execution automatically switches between the two memories as required.\n\u00b7 The Microcontroller Mode accesses only on-chip Flash memory. Attempts to read above the physical limit of the on-chip Flash (3FFFh) causes a read of all ' 0 's (a NOP instruction). The Microcontroller mode is also the only operating mode available to PIC18F6310 and PIC18F6410 devices.\nIn all modes, the microcontroller has complete access to data RAM.\nFigure 6-2 compares the memory maps of the different program  memory  modes.  The  differences  between on-chip  and  external  memory  access  limitations  are more fully explained in Table 6-1.",
    "REGISTER 6-1: CONFIG3L: CONFIGURATION BYTE REGISTER LOW\nR/P-1, 1 = R/P-1. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = U-0. R/P-1, 6 = R/P-1. R/P-1, 7 = R/P-1. WAIT, 1 = BW. WAIT, 2 = -. WAIT, 3 = -. WAIT, 4 = -. WAIT, 5 = -. WAIT, 6 = PM1. WAIT, 7 = PM0. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0",
    "REGISTER 6-1: CONFIG3L: CONFIGURATION BYTE REGISTER LOW\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value after erase bit, 1 = '1' = Bit is set. -n = Value after erase bit, 2 = '0' = Bit is cleared. -n = Value after erase bit, 3 = x = Bit is unknown",
    "bit 7\nWAIT: External Bus Data Wait Enable bit\n1 = Wait selections unavailable, device will not wait\n0 = Wait programmed by WAIT1 and WAIT0 bits of MEMCOM register (MEMCOM<5:4>)\nbit 6\nBW: External Bus Data Width Select bit\n1 = 16-bit external bus data width\n0 = 8-bit external bus data width\nbit 5-2\nUnimplemented: Read as ' 0 '\nbit 1-0\nPM<1:0>: Processor Data Memory Mode Select bits\n11 = Microcontroller mode\n10 = Microprocessor mode (1)\n01 = Microcontroller with Boot Block mode (1)\n00 = Extended Microcontroller mode (1)\nNote 1: This mode is available only on PIC18F8410 devices.",
    "FIGURE 6-2: MEMORY MAPS FOR PIC18FX310/X410 PROGRAM MEMORY MODES\nLegend:\n(Top of Memory) represents upper boundary of on-chip program memory space (1FFFh for PIC18FX310, 3FFFh for PIC18FX410). Shaded areas represent unimplemented or inaccessible areas, depending on the mode.\nNote 1: This mode is the only available mode on 64-pin devices and the default on 80-pin devices.\n2: These modes are only available on 80-pin devices.",
    "TABLE 6-1: MEMORY ACCESS FOR PIC18F8310/8410 PROGRAM MEMORY MODES\nMicrocontroller, Internal Program Memory.Execution From = Yes. Microcontroller, Internal Program Memory.Table Read From = Yes. Microcontroller, Internal Program Memory.Table Write To = Yes. Microcontroller, External Program Memory.Execution From = No Access. Microcontroller, External Program Memory.Table Read From = No Access. Microcontroller, External Program Memory.Table Write To = No Access. Extended Microcontroller, Internal Program Memory.Execution From = Yes. Extended Microcontroller, Internal Program Memory.Table Read From = Yes. Extended Microcontroller, Internal Program Memory.Table Write To = Yes. Extended Microcontroller, External Program Memory.Execution From = Yes. Extended Microcontroller, External Program Memory.Table Read From = Yes. Extended Microcontroller, External Program Memory.Table Write To = Yes. Microprocessor, Internal Program Memory.Execution From = No Access. Microprocessor, Internal Program Memory.Table Read From = No Access. Microprocessor, Internal Program Memory.Table Write To = No Access.",
    "TABLE 6-1: MEMORY ACCESS FOR PIC18F8310/8410 PROGRAM MEMORY MODES\nMicroprocessor, External Program Memory.Execution From = Yes. Microprocessor, External Program Memory.Table Read From = Yes. Microprocessor, External Program Memory.Table Write To = Yes. Microprocessor w/Boot Block, Internal Program Memory.Execution From = Yes. Microprocessor w/Boot Block, Internal Program Memory.Table Read From = Yes. Microprocessor w/Boot Block, Internal Program Memory.Table Write To = Yes. Microprocessor w/Boot Block, External Program Memory.Execution From = Yes. Microprocessor w/Boot Block, External Program Memory.Table Read From = Yes. Microprocessor w/Boot Block, External Program Memory.Table Write To = Yes",
    "6.1.2 PROGRAM COUNTER\nThe Program Counter (PC) specifies the address of the instruction to fetch for execution. The PC is 21 bits wide and is contained in three separate 8-bit registers. The low byte, known as the PCL register, is both readable and writable. The high byte, or PCH register, contains the PC<15:8> bits; it is not directly readable or writable. Updates to the PCH register are performed through the PCLATH register. The upper byte is called PCU. This register  contains  the  PC<20:16>  bits;  it  is  also  not directly  readable  or  writable.  Updates  to  the  PCU register are performed through the PCLATU register.\nThe stack operates as a 31-word by 21-bit RAM and a 5-bit Stack Pointer register, STKPTR. The stack space is not part of either program or data space. The Stack Pointer is readable and writable and the address on the top of the stack is readable and writable through the Top-of-Stack  (TOS)  Special  File  Registers.  Data  can also be pushed to or popped from the stack using these registers.",
    "6.1.2 PROGRAM COUNTER\nThe contents of PCLATH and PCLATU are transferred to  the  program  counter  by  any  operation  that  writes PCL.  Similarly,  the  upper  two  bytes  of  the  program counter are transferred to PCLATH and PCLATU by an operation that reads PCL. This is useful for computed offsets  to  the  PC  (see Section 6.1.5.1  'Computed GOTO' ).\nThe PC addresses bytes in the program memory. To prevent the PC from becoming misaligned with word instructions, the Least Significant bit of PCL is fixed to a  value  of  ' 0 '.  The  PC  increments  by  2  to  address sequential instructions in the program memory.\nThe CALL, RCALL, GOTO and  program  branch instructions write to the program counter directly. For these instructions, the contents of PCLATH  and PCLATU are not transferred to the program counter.",
    "6.1.3 RETURN ADDRESS STACK\nThe Return Address Stack allows any combination of up to 31 program calls and interrupts to occur. The PC is  pushed  onto  the  stack  when  a CALL or RCALL instruction  is  executed,  or  an  interrupt  is  Acknowledged.  The  PC  value  is  pulled  off  the  stack  on  a RETURN RETLW , or a RETFIE instruction. PCLATU and PCLATH  are  not  affected  by  any  of  the RETURN or CALL instructions.\nA CALL type instruction causes a push onto the stack; the Stack Pointer is first incremented and the location pointed  to  by  the  Stack  Pointer  is  written  with  the contents of the PC (already pointing to the instruction following the CALL ). A RETURN type instruction causes a  pop  from  the  stack;  the  contents  of  the  location pointed to by the STKPTR are transferred to the PC and then the Stack Pointer is decremented.\nThe  Stack  Pointer  is  initialized  to  ' 00000 ' after  all Resets. There is no RAM associated with the location corresponding to a Stack Pointer value of ' 00000 '; this is only a Reset value. Status bits indicate if the stack is full, has overflowed or has underflowed.",
    "6.1.3.1 Top-of-Stack Access\nOnly  the  top  of  the  Return  Address  Stack  (TOS)  is readable and writable. A set of three registers, TOSU:TOSH:TOSL,  hold  the  contents  of  the  stack location pointed to by the STKPTR register (Figure 6-3). This allows users to implement a software stack if necessary. After a CALL RCALL , or interrupt, the software  can  read  the  pushed  value  by  reading  the TOSU:TOSH:TOSL  registers.  These  values  can  be placed on a user-defined software stack. At return time, the software can return these values to TOSU:TOSH:TOSL and do a return.\nThe user must disable the global interrupt enable bits while accessing the stack to prevent inadvertent stack corruption.",
    "6.1.3.2 Return Stack Pointer (STKPTR)\nThe STKPTR register (Register 6-2) contains the Stack Pointer value, the STKFUL (Stack Full) status bit and the STKUNF (Stack Underflow) status bit. The value of the  Stack  Pointer  can  be  0  through  31.  The  Stack Pointer increments before values are pushed onto the stack and decrements after values are popped off the stack. On Reset, the Stack Pointer value will be zero. The user may read and write the Stack Pointer value. This  feature  can  be  used  by  a  Real-Time  Operating System for return stack maintenance.\nAfter the PC is pushed onto the stack 31 times (without popping any values off the stack), the STKFUL bit is set.  The  STKFUL  bit  is  cleared  by  software  or  by  a POR.",
    "6.1.3.2 Return Stack Pointer (STKPTR)\nThe action that takes place when the stack becomes full depends  on  the  state  of  the  STVREN  (Stack Overflow  Reset  Enable)  Configuration  bit.  (Refer  to Section 24.1 'Configuration Bits' for a description of the device  Configuration  bits.) If STVREN  is  set (default),  the  31st push will  push the  (PC  + 2)  value onto  the  stack,  set  the  STKFUL  bit  and  reset  the device. The STKFUL bit will remain set and the Stack Pointer will be set to zero.\nWhen  the  stack  has  been  popped  enough  times  to unload the stack, the next pop will return a value of zero to  the  PC  and sets the STKUNF bit, while the Stack Pointer remains at zero. The STKUNF bit will remain set until cleared by software, or until a POR occurs.\nNote:\nReturning a value of zero to the PC on an underflow has the effect of vectoring the program  to  the  Reset  vector  where  the stack conditions can be verified and appropriate actions can be taken. This is not the same as a Reset, as the contents of the SFRs are not affected.",
    "6.1.3.3 PUSH and POP Instructions\nSince  the  Top-of-Stack  is  readable  and  writable,  the ability to push values onto the stack and pull values off the  stack,  without  disturbing  normal  program  execution, is a desirable feature. The PIC18 instruction set includes  two  instructions, PUSH and POP ,  that  permit the  TOS  to  be  manipulated  under  software  control. TOSU, TOSH and TOSL can be modified to place data or a return address on the stack.\nIf STVREN is cleared, the STKFUL bit will be set on the 31st push and the Stack Pointer will increment to 31. Any additional pushes will not overwrite the 31st push and STKPTR will remain at 31.\nThe PUSH instruction places the current PC value onto the stack. This increments the Stack Pointer and loads the current PC value onto the stack.\nThe POP instruction  discards  the  current  TOS  by decrementing  the  Stack  Pointer.  The  previous  value pushed onto the stack then becomes the TOS value.",
    "REGISTER 6-2: STKPTR: STACK POINTER REGISTER\nR/C-0, 1 = R/C-0. R/C-0, 2 = U-0. R/C-0, 3 = R/W-0. R/C-0, 4 = R/W-0. R/C-0, 5 = R/W-0. R/C-0, 6 = R/W-0. R/C-0, 7 = R/W-0. STKFUL (1), 1 = STKUNF (1). STKFUL (1), 2 = -. STKFUL (1), 3 = SP4. STKFUL (1), 4 = SP3. STKFUL (1), 5 = SP2. STKFUL (1), 6 = SP1. STKFUL (1), 7 = SP0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 6-2: STKPTR: STACK POINTER REGISTER\n-n = Value at POR,  = '1' = Bit is set. -n = Value at POR, U=Unimplemented bit, read as '0' = '0' = Bit is cleared. -n = Value at POR, C = Clearable bit = x = Bit is unknown\n(1)\nbit 7\nSTKFUL: Stack Full Flag bit\n1 = Stack became full or overflowed\n0 = Stack has not become full or overflowed\nbit 6\nSTKUNF: Stack Underflow Flag bit (1)\n1 = Stack underflow occurred\n0 = Stack underflow did not occur\nbit 5\nUnimplemented: Read as ' 0 '\nbit 4-0\nSP<4:0>: Stack Pointer Location bits\nNote 1: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "6.1.3.4 Stack Full and Underflow Resets\nDevice Resets on stack overflow and stack underflow conditions are enabled by setting the STVREN bit in Configuration Register 4L. When STVREN is set, a full or underflow condition will set the appropriate STKFUL or STKUNF bit and then cause a device Reset. When STVREN is cleared, a full or underflow condition will set the appropriate STKFUL or STKUNF bit, but not cause a  device  Reset.  The  STKFUL  or  STKUNF  bits  are cleared by the user software or a Power-on Reset.",
    "6.1.4 FAST REGISTER STACK\nA  Fast  Register  Stack  is  provided  for  the  STATUS, WREG and BSR registers  to  provide  a  'fast  return' option for interrupts. This stack is only one level deep and is neither readable nor writable. It is loaded with the current value of the corresponding register when the processor vectors for an interrupt. All interrupt sources will push values into the stack registers. The values in the  registers  are  then  loaded  back  into  the  working registers  if  the RETFIE, FAST instruction  is  used  to return from the interrupt.\nIf both low and high-priority interrupts are enabled, the stack registers cannot be used reliably to return from low-priority interrupts. If a high-priority interrupt occurs while servicing a low-priority interrupt, the stack register values stored by the low-priority interrupt will be overwritten. In these cases, users must save the key registers in software during a low-priority interrupt.",
    "6.1.4 FAST REGISTER STACK\nIf interrupt priority is not used, all interrupts may use the Fast  Register  Stack  for  returns  from  interrupt.  If  no interrupts  are  used,  the  Fast  Register  Stack  can  be used to restore the STATUS, WREG and BSR registers at the end of a subroutine call. To use the Fast Register Stack  for  a  subroutine  call,  a CALL label, FAST instruction  must  be  executed  to  save  the  STATUS, WREG and BSR registers to the Fast Register Stack. A RETURN, FAST instruction is then executed to restore these registers from the Fast Register Stack.\nExample 6-1 shows a source code example that uses the  Fast  Register  Stack  during  a  subroutine  call  and return.",
    "EXAMPLE 6-1: FAST REGISTER STACK CODE EXAMPLE\nCALL, 1 = SUB1, FAST. CALL, 2 = ;STATUS, WREG, BSR ;SAVED IN FAST REGISTER ;STACK. SUB1, 1 = \uf0b7 \uf0b7 RETURN FAST. SUB1, 2 = . SUB1, 1 = . SUB1, 2 = ;RESTORE VALUES SAVED. SUB1, 1 = . SUB1, 2 = ;IN FAST REGISTER STACK",
    "6.1.5 LOOK-UP TABLES IN PROGRAM MEMORY\nThere may be programming situations that require the creation of data structures, or look-up tables, in program memory. For PIC18 devices, look-up tables can be implemented in two ways:\n\u00b7 Computed GOTO\n\u00b7 Table Reads",
    "6.1.5.1 Computed GOTO\nA computed GOTO is accomplished by adding an offset to  the  program  counter.  An  example  is  shown  in Example 6-2.\nA look-up table can be formed  with an ADDWF  PCL instruction and a group of RETLW nn instructions. The W register is loaded with an offset into the table before executing a call to that table. The first instruction of the called routine is the ADDWF PCL instruction. The next instruction  executed  will  be  one  of  the RETLW nn instructions  that  returns  the  value  ' nn '  to  the  calling function.\nThe offset  value  (in  WREG)  specifies  the  number  of bytes  that  the  program  counter  should  advance  and should be multiples of 2 (LSb = 0 ).\nIn  this  method,  only  one  data  byte  may  be  stored  in each  instruction  location  and  room  on  the  Return Address Stack is required.",
    "EXAMPLE 6-2: COMPUTED GOTO USING AN OFFSET VALUE\n, 1 = MOVF CALL. , 2 = OFFSET, TABLE. ORG, 1 = nn00h. ORG, 2 = . TABLE, 1 = ADDWF. TABLE, 2 = PCL. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = RETLW. , 2 = nnh. , 1 = .. , 2 = . , 1 = .. , 2 = . , 1 = .. , 2 = ",
    "6.1.5.2 Table Reads\nA  better  method  of  storing  data  in  program  memory allows two bytes of data to be stored in each instruction location.\nLook-up  table  data  may  be  stored  two  bytes  per program word while programming. The Table Pointer (TBLPTR) register specifies the byte address and the Table Latch (TABLAT) register contains the data that is read  from  the  program  memory.  Data  is  transferred from program memory one byte at a time.\nTable read operation is discussed further in Section 7.1 'Table Reads and Table Writes' .",
    "6.2.1 CLOCKING SCHEME\nThe  microcontroller clock input, whether  from  an internal or external source, is internally divided by four to  generate  four  non-overlapping  quadrature  clocks (Q1, Q2, Q3 and Q4). Internally, the program counter is incremented  on  every  Q1;  the  instruction  is  fetched from the program memory and latched into the instruction register during Q4. The instruction is decoded and executed  during  the  following  Q1  through  Q4.  The clocks  and  instruction  execution  flow  are  shown  in Figure 6-4.\nAn  'Instruction  Cycle'  consists  of  four  Q  cycles,  Q1 through  Q4.  The  instruction  fetch  and  execute  are pipelined  in  such  a  manner  that  a  fetch  takes  one instruction  cycle,  while  the  decode  and  execute  take another  instruction  cycle.  However,  due  to  the  pipelining, each  instruction  effectively  executes  in  one cycle. If an instruction causes the program counter to change (e.g., GOTO ),  then  two  cycles are required to complete the instruction (Example 6-3).\nA fetch cycle begins with the Program Counter (PC) incrementing in Q1.",
    "6.2.1 CLOCKING SCHEME\nIn the execution cycle, the fetched instruction is latched into  the  Instruction  Register  (IR)  in  cycle  Q1.  This instruction  is  then  decoded  and  executed  during  the Q2, Q3 and Q4 cycles. Data memory is read during Q2 (operand  read)  and  written  during  Q4  (destination write).",
    "EXAMPLE 6-3: INSTRUCTION PIPELINE FLOW\nAll instructions are single cycle, except for any program branches. These take two cycles since the fetch instruction is 'flushed' from the pipeline, while the new instruction is being fetched and then executed.",
    "6.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe program memory is addressed in bytes. Instructions are stored as two bytes or four bytes in program memory. The Least Significant Byte of an instruction word is always stored in a program memory location with an even address (LSb = 0 ). To maintain alignment with instruction boundaries, the PC increments in steps of 2 and the LSb will always read ' 0 ' (see Section 6.1.2 'Program Counter' ).\nFigure 6-5 shows an example of how instruction words are stored in the program memory.",
    "6.2.3 INSTRUCTIONS IN PROGRAM MEMORY\nThe CALL and GOTO instructions  have  the  absolute program memory address embedded into the instruction.  Since  instructions  are  always  stored  on  word boundaries,  the  data  contained  in  the  instruction  is  a word address. The word address is written to PC<20:1>, which  accesses  the  desired  byte  address  in  program memory.  Instruction  #2  in  Figure 6-5  shows  how  the instruction, GOTO  0006h ,  is  encoded  in  the  program memory. Program branch instructions, which encode a relative address offset, operate in the same manner. The offset value stored in a branch instruction represents the number of single-word instructions that the PC will be offset  by. Section 25.0  'Instruction  Set  Summary' provides further details of the instruction set.",
    "FIGURE 6-5: INSTRUCTIONS IN PROGRAM MEMORY\nProgram Memory\nByte Locations\n\uf0ae\uf020\nInstruction 1:\nInstruction 2:\nMOVLW\n055h\nGOTO\n0006h\nInstruction 3:\nLSB = 1, 1 = LSB = 0. LSB = 1, 2 = Word Address \uf0af. , 1 = . , 2 = 000000h. , 1 = . , 2 = 000002h. , 1 = . , 2 = 000004h. , 1 = . , 2 = 000006h. 0Fh, 1 = 55h. 0Fh, 2 = 000008h. EFh, 1 = 03h. EFh, 2 = 00000Ah. F0h, 1 = 00h. F0h, 2 = 00000Ch. C1h, 1 = 23h. C1h, 2 = 00000Eh. F4h, 1 = 56h. F4h, 2 = 000010h. , 1 = . , 2 = 000012h. , 1 = . , 2 = 000014h\nMOVFF\n123h, 456h",
    "6.2.4 TWO-WORD INSTRUCTIONS\nThe standard PIC18 instruction set has four two-word instructions: CALL , MOVFF , GOTO and LSFR . In  all cases, the second word of the instructions always has ' 1111 ' as its four Most Significant bits; the other 12 bits are literal data, usually a data memory address.\nThe  use  of  ' 1111 '  in  the  4  MSbs  of  an  instruction specifies  a  special  form  of NOP .  If  the  instruction  is executed in proper sequence - immediately after the first  word - the data in the second word is accessed and used by the instruction sequence. If the first word is  skipped  for  some  reason  and  the  second  word  is executed by itself, a NOP is executed instead. This is necessary for cases when the two-word instruction is preceded by a conditional instruction that changes the PC. Example 6-4 shows how this works.\nNote:\nSee Section 6.5 'Data Memory and the Extended Instruction Set' for information  on  two-word  instructions  in the extended instruction set.",
    "EXAMPLE 6-4: TWO-WORD INSTRUCTIONS\n0110, CASE 1:.Object Code = 0110. 0110, CASE 1:.Object Code = 0000 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1 ;. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1, REG2 ; No, skip this word. 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101 0110. 1111, CASE 1:.Source Code = . 1111, CASE 1:.Source Code = ; Execute this word as a NOP. 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3 ; continue code. CASE 2:, CASE 1:.Object Code = CASE 2:.",
    "EXAMPLE 6-4: TWO-WORD INSTRUCTIONS\nCASE 2:, CASE 1:.Object Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. CASE 2:, CASE 1:.Source Code = CASE 2:. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Object Code = Object Code. Object Code, CASE 1:.Source Code = Source Code. Object Code, CASE 1:.Source Code = Source Code. 0110, CASE 1:.Object Code = 0110 0000. 0110, CASE 1:.Object Code = 0000. 0110, CASE 1:.Source Code = TSTFSZ. 0110, CASE 1:.Source Code = REG1 ; is RAM location. 1100, CASE 1:.Object Code = 0001. 1100, CASE 1:.Object Code = 0010 0011. 1100, CASE 1:.Source Code = MOVFF. 1100, CASE 1:.Source Code = REG1, REG2 ; Yes, execute this word. 1111, CASE 1:.Object Code = 0100. 1111, CASE 1:.Object Code = 0101 0110. 1111,",
    "EXAMPLE 6-4: TWO-WORD INSTRUCTIONS\nCASE 1:.Source Code = . 1111, CASE 1:.Source Code = ; 2nd word of instruction. 0010, CASE 1:.Object Code = 0100. 0010, CASE 1:.Object Code = 0000 0000. 0010, CASE 1:.Source Code = ADDWF. 0010, CASE 1:.Source Code = REG3 ; continue code",
    "6.3.1 BANK SELECT REGISTER\nNote:\nThe  operation  of  some  aspects  of  data memory  are  changed  when  the  PIC18 extended instruction set is enabled. See Section 6.5 'Data Memory  and the Extended  Instruction Set' for more information.\nThe data memory in PIC18 devices is implemented as static RAM. Each register in the data memory has a 12-bit  address,  allowing  up  to  4096  bytes  of  data memory. The memory space is divided into as many as 16 banks that contain 256 bytes each. PIC18F6310/6410/8310/8410 devices implement only  3 complete  banks,  for  a  total  of  768  bytes. Figure 6-6  shows  the  data  memory  organization  for the devices.\nThe data memory contains Special Function Registers (SFRs) and General Purpose Registers (GPRs). The SFRs are used for control and status of the controller and peripheral functions, while GPRs are used for data storage and scratchpad operations in the user's application. Any read of an unimplemented location will read as ' 0 's.\nThe instruction  set  and  architecture  allow  operations across  all  banks.  The  entire  data  memory  may  be accessed  by  Direct,  Indirect  or  Indexed  Addressing modes. Addressing modes are discussed later in this section.",
    "6.3.1 BANK SELECT REGISTER\nTo  ensure  that  commonly  used  registers  (SFRs  and select GPRs) can be accessed in a single cycle, PIC18 devices implement an Access Bank. This is a 256-byte memory space that provides fast access to SFRs and the  lower  portion  of  GPR  Bank  0  without  using  the BSR. Section 6.3.2 'Access Bank' provides a detailed description of the Access RAM.\nLarge  areas  of  data  memory  require  an  efficient addressing  scheme  to  make  rapid  access  to  any address  possible.  Ideally,  this  means  that  an  entire address does not need to be provided for each read or write  operation.  For  PIC18  devices,  this  is  accomplished with a RAM banking scheme. This divides the memory space into16 contiguous banks of 256 bytes. Depending  on  the  instruction,  each  location  can  be addressed directly by its full 12-bit address, or an 8-bit low-order address and a 4-bit Bank Pointer.",
    "6.3.1 BANK SELECT REGISTER\nMost instructions in the PIC18 instruction set make use of the Bank Pointer, known as the Bank Select Register (BSR). This SFR holds the 4 Most Significant bits of a location's  address;  the  instruction  itself  includes  the 8 Least Significant bits. Only the four lower bits of the BSR are implemented (BSR<3:0>). The upper four bits are  unused;  they  will  always  read  ' 0 '  and  cannot  be written to. The BSR can be loaded directly by using the MOVLB instruction.\nThe  value  of  the  BSR  indicates  the  bank  in  data memory; the 8 bits in the instruction show the location in the bank and can be thought of as an offset from the bank's lower boundary. The relationship between the BSR's value and the bank division in data memory is shown in Figure 6-7.\nSince up to 16 registers may share the same low-order address, the user must always be careful to ensure that the proper bank is selected before performing a data read  or  write.  For  example,  writing  what  should  be program data to an 8-bit address of F9h while the BSR is 0Fh will end up resetting the program counter.",
    "6.3.1 BANK SELECT REGISTER\nWhile any bank can be selected, only those banks that are  actually  implemented  can  be  read  or  written  to. Writes  to  unimplemented  banks  are  ignored,  while reads from unimplemented banks will return ' 0 's. Even so, the STATUS register will still be affected as if the operation  was  successful.  The  data  memory  map  in Figure 6-6 indicates which banks are implemented.\nIn  the  core  PIC18  instruction  set,  only  the MOVFF instruction  fully  specifies  the  12-bit  address  of  the source and target registers. This instruction ignores the BSR completely when it executes. All other instructions include only the low-order address as an operand and must use either the BSR or the Access Bank to locate their target registers.",
    "USE OF THE BANK SELECT REGISTER (DIRECT ADDRESSING)\n- 2: The MOVFF instruction embeds the entire 12-bit address in the instruction.",
    "6.3.2 ACCESS BANK\nWhile  the  use  of  the  BSR  with  an  embedded  8-bit address  allows  users  to  address  the  entire  range  of data memory, it also means that the user must always ensure  that  the  correct  bank  is  selected.  Otherwise, data may be read from or written to the wrong location. This can be disastrous if a GPR is the intended target of  an  operation  but  an  SFR  is  written  to  instead. Verifying  and/or  changing  the  BSR  for  each  read  or write to data memory can become very inefficient.\nUsing this 'forced' addressing allows the instruction to operate  on  a  data  address  in  a  single  cycle  without updating the BSR first. For 8-bit addresses of 80h and above, this means that users can evaluate and operate on SFRs more efficiently. The Access RAM below 60h is a good place for data values that the user might need to  access  rapidly,  such  as  immediate  computational results  or  common  program  variables.  Access  RAM also allows for faster and more code efficient context saving and switching of variables.",
    "6.3.2 ACCESS BANK\nTo streamline access for the most commonly used data memory locations, the data memory is configured with an  Access  Bank,  which  allows  users  to  access  a mapped block of memory without specifying  a  BSR. The  Access  Bank  consists  of  the  first  96  bytes  of memory (00h-5Fh) in Bank 0 and the last 160 bytes of memory (60h-FFh) in Block 15. The lower half is known as the 'Access RAM' and is composed of GPRs. This upper  half  is  where  the  device's  SFRs  are  mapped. These  two  areas  are  mapped  contiguously  in  the Access Bank and can be addressed in a linear fashion by an 8-bit address (Figure 6-6).\nThe Access Bank is used by core PIC18 instructions that include the Access RAM bit (the 'a' parameter in the instruction). When 'a' is equal to ' 1 ', the instruction uses  the  BSR  and  the  8-bit  address  included  in  the opcode for the data memory address. When 'a' is ' 0 ', however,  the  instruction  is  forced  to  use  the  Access Bank  address  map;  the  current  value  of  the  BSR  is ignored entirely.",
    "6.3.2 ACCESS BANK\nThe mapping of the Access Bank is slightly different when the extended instruction set is enabled (XINST Configuration bit = 1 ). This is discussed in more detail in Section 6.5.3  'Mapping  the  Access  Bank  in Indexed Literal Offset Mode' .",
    "6.3.3 GENERAL PURPOSE REGISTER FILE\nPIC18 devices may have banked memory in the GPR area. This is data RAM, which is available for use by all instructions.  GPRs  start  at  the  bottom  of  Bank  0 (address 000h) and grow upwards towards the bottom of the  SFR  area.  GPRs  are  not  initialized  by  a Power-on  Reset  and  are  unchanged  on  all  other Resets.",
    "6.3.4 SPECIAL FUNCTION REGISTERS\nThe Special Function  Registers (SFRs) are registers used by the CPU and peripheral modules for controlling the desired operation of the device. These registers are implemented as static RAM. SFRs start at the top of data memory (FFFh) and extend downward to occupy more than the top half of Bank 15 (F60h to FFFh). A list of these registers is given in Table 6-2 and Table 6-3.\nThe  SFRs  can  be  classified  into  two  sets:  those associated  with  the  'core'  device  functionality  (ALU, Resets and interrupts) and  those related to the peripheral functions. The Reset and interrupt registers are  described  in  their  respective  chapters,  while  the ALU's  STATUS  register  is  described  later  in  this section.  Registers  related  to  the  operation  of  the peripheral features are described in the chapter for that peripheral.\nThe SFRs are typically distributed among the peripherals whose functions they control. Unused SFR locations are unimplemented and read as ' 0 's.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFFFh, Name = TOSU. FFFh, Address = FDFh INDF2 (1). FFFh, Name = . FFFh, Address = FBFh. FFFh, Name = CCPR1H. FFFh, Address = F9Fh. FFFh, Name = IPR1. FFFh, Address = F7Fh. FFFh, Name = SPBRGH1. FFEh, Name = TOSH. FFEh, Address = FDEh. FFEh, Name = POSTINC2 (1). FFEh, Address = FBEh. FFEh, Name = CCPR1L. FFEh, Address = F9Eh. FFEh, Name = PIR1. FFEh, Address = F7Eh. FFEh, Name = BAUDCON1. FFDh, Name = TOSL FDDh. FFDh, Address = . FFDh, Name = POSTDEC2 (1). FFDh, Address = FBDh. FFDh, Name = CCP1CON.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFFDh, Address = F9Dh. FFDh, Name = PIE1. FFDh, Address = F7Dh. FFDh, Name = - (2). FFCh, Name = STKPTR. FFCh, Address = FDCh. FFCh, Name = PREINC2 (1). FFCh, Address = FBCh. FFCh, Name = CCPR2H. FFCh, Address = F9Ch. FFCh, Name = MEMCON (3). FFCh, Address = F7Ch. FFCh, Name = - (2). FFBh, Name = PCLATU. FFBh, Address = FDBh. FFBh, Name = PLUSW2 (1). FFBh, Address = FBBh. FFBh, Name = CCPR2L. FFBh, Address = F9Bh. FFBh, Name = OSCTUNE. FFBh, Address = F7Bh. FFBh, Name = - (2). FFAh, Name = PCLATH. FFAh, Address = FDAh.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFFAh, Name = FSR2H. FFAh, Address = FBAh. FFAh, Name = CCP2CON. FFAh, Address = F9Ah. FFAh, Name = TRISJ (3). FFAh, Address = F7Ah. FFAh, Name = - (2). FF9h, Name = PCL. FF9h, Address = FD9h. FF9h, Name = FSR2L. FF9h, Address = FB9h. FF9h, Name = CCPR3H. FF9h, Address = F99h. FF9h, Name = TRISH (3). FF9h, Address = F79h. FF9h, Name = - (2). FF8h, Name = TBLPTRU. FF8h, Address = FD8h. FF8h, Name = STATUS. FF8h, Address = FB8h. FF8h, Name = CCPR3L. FF8h, Address = F98h.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFF8h, Name = TRISG. FF8h, Address = F78h. FF8h, Name = - (2). FF7h, Name = TBLPTRH. FF7h, Address = FD7h. FF7h, Name = TMR0H. FF7h, Address = FB7h. FF7h, Name = CCP3CON. FF7h, Address = F97h. FF7h, Name = TRISF. FF7h, Address = F77h. FF7h, Name = - (2). FF6h, Name = TBLPTRL. FF6h, Address = FD6h. FF6h, Name = TMR0L. FF6h, Address = FB6h. FF6h, Name = - (2). FF6h, Address = F96h. FF6h, Name = TRISE. FF6h, Address = F76h. FF6h, Name = - (2).",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFF5h, Name = TABLAT. FF5h, Address = FD5h. FF5h, Name = T0CON. FF5h, Address = FB5h. FF5h, Name = CVRCON. FF5h, Address = F95h. FF5h, Name = TRISD. FF5h, Address = F75h. FF5h, Name = - (2). FF4h, Name = PRODH. FF4h, Address = FD4h. FF4h, Name = - (2). FF4h, Address = FB4h. FF4h, Name = CMCON. FF4h, Address = F94h. FF4h, Name = TRISC. FF4h, Address = F74h. FF4h, Name = - (2). FF3h, Name = PRODL. FF3h, Address = FD3h. FF3h, Name = OSCCON. FF3h, Address = FB3h. FF3h,",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nName = TMR3H. FF3h, Address = F93h. FF3h, Name = TRISB. FF3h, Address = F73h. FF3h, Name = - (2). FF2h, Name = INTCON. FF2h, Address = FD2h. FF2h, Name = HLVDCON. FF2h, Address = FB2h. FF2h, Name = TMR3L. FF2h, Address = F92h. FF2h, Name = TRISA. FF2h, Address = F72h. FF2h, Name = - (2). FF1h, Name = INTCON2. FF1h, Address = FD1h. FF1h, Name = WDTCON. FF1h, Address = FB1h. FF1h, Name = T3CON. FF1h, Address = F91h. FF1h, Name = LATJ (3). FF1h, Address =",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nF71h. FF1h, Name = - (2). FF0h, Name = INTCON3. FF0h, Address = FD0h. FF0h, Name = RCON. FF0h, Address = FB0h. FF0h, Name = PSPCON. FF0h, Address = F90h. FF0h, Name = LATH (3). FF0h, Address = F70h. FF0h, Name = - (2). FEFh, Name = INDF0 (1). FEFh, Address = FCFh. FEFh, Name = TMR1H. FEFh, Address = FAFh. FEFh, Name = SPBRG1. FEFh, Address = F8Fh. FEFh, Name = LATG. FEFh, Address = F6Fh. FEFh, Name = SPBRG2. FEEh, Name = POSTINC0 (1). FEEh, Address = FCEh.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFEEh, Name = TMR1L. FEEh, Address = FAEh. FEEh, Name = RCREG1. FEEh, Address = F8Eh. FEEh, Name = LATF. FEEh, Address = F6Eh. FEEh, Name = RCREG2. FEDh, Name = POSTDEC0 (1). FEDh, Address = FCDh. FEDh, Name = T1CON. FEDh, Address = FADh. FEDh, Name = TXREG1. FEDh, Address = F8Dh. FEDh, Name = LATE. FEDh, Address = F6Dh. FEDh, Name = TXREG2. FECh, Name = PREINC0 (1). FECh, Address = FCCh. FECh, Name = TMR2. FECh, Address = FACh. FECh, Name = TXSTA1. FECh, Address = F8Ch. FECh, Name = LATD. FECh, Address = F6Ch. FECh, Name =",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nTXSTA2. FEBh, Name = PLUSW0 (1). FEBh, Address = FCBh. FEBh, Name = PR2. FEBh, Address = FABh. FEBh, Name = RCSTA1. FEBh, Address = F8Bh. FEBh, Name = LATC. FEBh, Address = F6Bh. FEBh, Name = RCSTA2. FEAh, Name = FSR0H. FEAh, Address = FCAh. FEAh, Name = T2CON. FEAh, Address = FAAh. FEAh, Name = - (2). FEAh, Address = F8Ah. FEAh, Name = LATB. FEAh, Address = F6Ah. FEAh, Name = - (2). FE9h, Name = FSR0L. FE9h, Address = FC9h. FE9h, Name = SSPBUF. FE9h, Address = FA9h. FE9h, Name = - (2). FE9h, Address = F89h.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFE9h, Name = LATA. FE9h, Address = F69h. FE9h, Name = - (2). FE8h, Name = WREG. FE8h, Address = FC8h. FE8h, Name = SSPADD. FE8h, Address = FA8h. FE8h, Name = - (2). FE8h, Address = F88h. FE8h, Name = PORTJ (3). FE8h, Address = F68h. FE8h, Name = - (2). FE7h, Name = INDF1 (1). FE7h, Address = FC7h. FE7h, Name = SSPSTAT. FE7h, Address = FA7h. FE7h, Name = - (2). FE7h, Address = F87h. FE7h, Name = PORTH (3). FE7h, Address = F67h. FE7h, Name = - (2). FE6h, Name",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\n= POSTINC1 (1). FE6h, Address = FC6h. FE6h, Name = SSPCON1. FE6h, Address = FA6h. FE6h, Name = - (2). FE6h, Address = F86h. FE6h, Name = PORTG. FE6h, Address = F66h. FE6h, Name = - (2). FE5h, Name = POSTDEC1 (1). FE5h, Address = FC5h. FE5h, Name = SSPCON2. FE5h, Address = FA5h. FE5h, Name = IPR3. FE5h, Address = F85h. FE5h, Name = PORTF. FE5h, Address = F65h. FE5h, Name = - (2). FE4h, Name = PREINC1 (1). FE4h, Address = FC4h. FE4h, Name = ADRESH. FE4h, Address = FA4h.",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nFE4h, Name = PIR3. FE4h, Address = F84h. FE4h, Name = PORTE. FE4h, Address = F64h. FE4h, Name = - (2). FE3h, Name = PLUSW1 (1). FE3h, Address = FC3h. FE3h, Name = ADRESL. FE3h, Address = FA3h. FE3h, Name = PIE3. FE3h, Address = F83h. FE3h, Name = PORTD. FE3h, Address = F63h. FE3h, Name = - (2). FE2h, Name = FSR1H. FE2h, Address = FC2h. FE2h, Name = ADCON0. FE2h, Address = FA2h. FE2h, Name = IPR2. FE2h, Address = F82h. FE2h, Name = PORTC. FE2h, Address = F62h. FE2h,",
    "TABLE 6-2: SPECIAL FUNCTION REGISTER MAP FOR PIC18F6310/6410/8310/8410 DEVICES\nName = - (2). FE1h, Name = FSR1L. FE1h, Address = FC1h. FE1h, Name = ADCON1. FE1h, Address = FA1h. FE1h, Name = PIR2. FE1h, Address = F81h. FE1h, Name = PORTB. FE1h, Address = F61h. FE1h, Name = - (2). FE0h, Name = BSR. FE0h, Address = FC0h. FE0h, Name = ADCON2. FE0h, Address = FA0h. FE0h, Name = PIE2. FE0h, Address = F80h. FE0h, Name = PORTA. FE0h, Address = F60h. FE0h, Name = - (2)\nNote\n1: This is not a physical register.\n2: Unimplemented registers are read as ' 0 '.\n3: This register is not available on 64-pin devices.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nTOSU, Bit 7 = -. TOSU, Bit 6 = -. TOSU, Bit 5 = -. TOSU, Bit 4 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 3 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 2 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 1 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 0 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Value on POR, BOR = ---0. TOSU, Value on POR, BOR = 0000. TOSU, Details on page: = 63, 70. TOSH, Bit 7 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 6 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 5 = Top-of-Stack",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nHigh Byte (TOS<15:8>). TOSH, Bit 4 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 3 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 2 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 1 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 0 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Value on POR, BOR = 0000. TOSH, Value on POR, BOR = 0000. TOSH, Details on page: = 63, 70. TOSL, Bit 7 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 6 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 5 = Top-of-Stack Low Byte (TOS<7:0>).",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nTOSL, Bit 4 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 3 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 2 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 1 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 0 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Value on POR, BOR = 0000. TOSL, Value on POR, BOR = 0000. TOSL, Details on page: = 63, 70. STKPTR, Bit 7 = STKFUL (6). STKPTR, Bit 6 = STKUNF (6). STKPTR, Bit 5 = -. STKPTR, Bit 4 = Return Stack Pointer. STKPTR, Bit 3 = Return Stack Pointer. STKPTR, Bit 2 = Return Stack Pointer. STKPTR, Bit",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n1 = Return Stack Pointer. STKPTR, Bit 0 = Return Stack Pointer. STKPTR, Value on POR, BOR = 00-0. STKPTR, Value on POR, BOR = 0000. STKPTR, Details on page: = 63, 71. PCLATU, Bit 7 = -. PCLATU, Bit 6 = -. PCLATU, Bit 5 = -. PCLATU, Bit 4 = Holding Register for PC<20:16>. PCLATU, Bit 3 = Holding Register for PC<20:16>. PCLATU, Bit 2 = Holding Register for PC<20:16>. PCLATU, Bit 1 = Holding Register for PC<20:16>. PCLATU, Bit 0 = Holding Register for PC<20:16>. PCLATU, Value on POR, BOR = ---0. PCLATU, Value on POR, BOR = 0000. PCLATU, Details on page: = 63, 70. PCLATH, Bit 7 = Holding Register for PC<15:8>.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nPCLATH, Bit 6 = Holding Register for PC<15:8>. PCLATH, Bit 5 = Holding Register for PC<15:8>. PCLATH, Bit 4 = Holding Register for PC<15:8>. PCLATH, Bit 3 = Holding Register for PC<15:8>. PCLATH, Bit 2 = Holding Register for PC<15:8>. PCLATH, Bit 1 = Holding Register for PC<15:8>. PCLATH, Bit 0 = Holding Register for PC<15:8>. PCLATH, Value on POR, BOR = 0000. PCLATH, Value on POR, BOR = 0000. PCLATH, Details on page: = 63, 70. PCL, Bit 7 = PC Low Byte (PC<7:0>). PCL, Bit 6 = PC Low Byte (PC<7:0>). PCL, Bit 5 = PC Low Byte (PC<7:0>). PCL, Bit 4 = PC Low Byte (PC<7:0>). PCL, Bit",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n3 = PC Low Byte (PC<7:0>). PCL, Bit 2 = PC Low Byte (PC<7:0>). PCL, Bit 1 = PC Low Byte (PC<7:0>). PCL, Bit 0 = PC Low Byte (PC<7:0>). PCL, Value on POR, BOR = 0000. PCL, Value on POR, BOR = 0000. PCL, Details on page: = 63, 70. TBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n(TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Value on POR, BOR = --00. TBLPTRU, Value on POR, BOR = 0000. TBLPTRU, Details on page: = 63, 93. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH,",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nBit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Value on POR, BOR = 0000. TBLPTRH, Details on page: = 63, 93. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n(TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Value on POR, BOR = 0000. TBLPTRL, Details on page: = 63, 93. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on POR, BOR = 0000. TABLAT, Value on POR, BOR = 0000. TABLAT, Details on page: = 63, 93. PRODH, Bit 7",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n= Product Register High Byte. PRODH, Bit 6 = Product Register High Byte. PRODH, Bit 5 = Product Register High Byte. PRODH, Bit 4 = Product Register High Byte. PRODH, Bit 3 = Product Register High Byte. PRODH, Bit 2 = Product Register High Byte. PRODH, Bit 1 = Product Register High Byte. PRODH, Bit 0 = Product Register High Byte. PRODH, Value on POR, BOR = xxxx. PRODH, Value on POR, BOR = xxxx. PRODH, Details on page: = 63, 107. PRODL, Bit 7 = Product Register Low Byte. PRODL, Bit 6 = Product Register Low Byte. PRODL, Bit 5 = Product Register Low Byte. PRODL, Bit 4 = Product Register Low Byte. PRODL, Bit 3 = Product Register Low Byte. PRODL, Bit 2 = Product Register Low Byte. PRODL, Bit 1 = Product Register Low Byte. PRODL, Bit 0 = Product Register Low Byte. PRODL, Value on POR, BOR = xxxx. PRODL, Value on POR, BOR = xxxx.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nPRODL, Details on page: = 63, 107. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Details on page: = 63, 111. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = INTEDG3. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = INT3IP. INTCON2, Bit 0 = RBIP. INTCON2, Value on POR,",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nBOR = 1111 1111. INTCON2, Value on POR, BOR = . INTCON2, Details on page: = 63, 112. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = INT3IE. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = INT3IF. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 1100. INTCON3, Value on POR, BOR = 0000. INTCON3, Details on page: = 63, 113. INDF0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 5 = Uses contents of",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 not changed (not a physical register). INDF0, Value on POR, BOR = N/A. INDF0, Value on POR, BOR = . INDF0, Details on page: = 63, 85. POSTINC0, Bit 7 = Uses contents of FSR0",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nto address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nregister). POSTINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-incremented (not a physical register). POSTINC0, Value on POR, BOR = N/A. POSTINC0, Value on POR, BOR = . POSTINC0, Details on page: = 63, 85. POSTDEC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 6 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 3 = Uses contents",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nof FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 post-decremented (not a physical register). POSTDEC0, Value on POR, BOR = N/A. POSTDEC0, Value on POR, BOR = . POSTDEC0, Details on page: = 63, 85. PREINC0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 6 = Uses contents of FSR0 to address data memory - value of",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR0 pre-incremented (not a physical register). PREINC0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register). PREINC0,",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nValue on POR, BOR = N/A. PREINC0, Value on POR, BOR = . PREINC0, Details on page: = 63, 85. PLUSW0, Bit 7 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 6 = offset by W. PLUSW0, Bit 5 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 4 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 3 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 2 = Uses contents of FSR0 to address data memory - value of FSR0",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\npre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 1 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Bit 0 = Uses contents of FSR0 to address data memory - value of FSR0 pre-incremented (not a physical register), value of FSR0. PLUSW0, Value on POR, BOR = N/A. PLUSW0, Value on POR, BOR = . PLUSW0, Details on page: = 63, 85. FSR0H, Bit 7 = -. FSR0H, Bit 6 = -. FSR0H, Bit 5 = -. FSR0H, Bit 4 = -. FSR0H, Bit 3 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 2 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Bit 1 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H,",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nBit 0 = Indirect Data Memory Address Pointer 0 High Byte. FSR0H, Value on POR, BOR = ---- xxxx. FSR0H, Value on POR, BOR = . FSR0H, Details on page: = 63, 85. FSR0L, Bit 7 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 6 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 5 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 4 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 3 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 2 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 1 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 0 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Value on POR, BOR = xxxx. FSR0L, Value on POR, BOR = xxxx. FSR0L, Details on page: = 63,",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n85. WREG, Bit 7 = Working Register. WREG, Bit 6 = Working Register. WREG, Bit 5 = Working Register. WREG, Bit 4 = Working Register. WREG, Bit 3 = Working Register. WREG, Bit 2 = Working Register. WREG, Bit 1 = Working Register. WREG, Bit 0 = Working Register. WREG, Value on POR, BOR = xxxx. WREG, Value on POR, BOR = xxxx. WREG, Details on page: = 63. INDF1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nregister). INDF1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 not changed (not a physical register). INDF1, Value on POR, BOR = N/A. INDF1, Value on POR, BOR = . INDF1, Details on page: = 63, 85. POSTINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n(not a physical register). POSTINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-incremented (not a physical register). POSTINC1, Value on POR, BOR =",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nN/A. POSTINC1, Value on POR, BOR = . POSTINC1, Details on page: = 63, 85. POSTDEC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\npost-decremented (not a physical register). POSTDEC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 post-decremented (not a physical register). POSTDEC1, Value on POR, BOR = N/A. POSTDEC1, Value on POR, BOR = . POSTDEC1, Details on page: = 63, 85. PREINC1, Bit 7 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register).",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nPREINC1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register). PREINC1, Value on POR, BOR = . PREINC1, Value on POR, BOR = N/A. PREINC1, Details on page: = 63, 85. PLUSW1, Bit 7 = Uses contents of FSR1",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nto address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 6 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 5 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 4 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 3 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 2 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n(not a physical register), value of FSR1 offset by W. PLUSW1, Bit 1 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Bit 0 = Uses contents of FSR1 to address data memory - value of FSR1 pre-incremented (not a physical register), value of FSR1 offset by W. PLUSW1, Value on POR, BOR = N/A. PLUSW1, Value on POR, BOR = . PLUSW1, Details on page: = 63, 85. FSR1H, Bit 7 = -. FSR1H, Bit 6 = -. FSR1H, Bit 5 = -. FSR1H, Bit 4 = -. FSR1H, Bit 3 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 2 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Bit 1 = Indirect Data Memory Address Pointer 1 High Byte.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR1H, Bit 0 = Indirect Data Memory Address Pointer 1 High Byte. FSR1H, Value on POR, BOR = ----. FSR1H, Value on POR, BOR = xxxx. FSR1H, Details on page: = 63, 85. FSR1L, Bit 7 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 6 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 5 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 4 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 3 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 2 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 1 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Bit 0 = Indirect Data Memory Address Pointer 1 Low Byte. FSR1L, Value on POR, BOR = xxxx. FSR1L, Value on POR, BOR = xxxx. FSR1L, Details on",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\npage: = 63, 85. BSR, Bit 7 = -. BSR, Bit 6 = -. BSR, Bit 5 = -. BSR, Bit 4 = -. BSR, Bit 3 = Bank Select Register. BSR, Bit 2 = Bank Select Register. BSR, Bit 1 = Bank Select Register. BSR, Bit 0 = Bank Select Register. BSR, Value on POR, BOR = ----. BSR, Value on POR, BOR = 0000. BSR, Details on page: = 63, 75. INDF2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 4 = Uses contents of FSR2 to address data memory - value of",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR2 not changed (not a physical register). INDF2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 not changed (not a physical register). INDF2, Value on POR, BOR = N/A. INDF2, Value on POR, BOR = . INDF2, Details on page: = 64, 85. , Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\npost-incremented (not a physical register). , Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-incremented (not a physical register). , Value on POR, BOR = . , Value on POR, BOR = . , Details on page: = . POSTDEC2, Bit 7",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n= Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\npost-decremented (not a physical register). POSTDEC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 post-decremented (not a physical register). POSTDEC2, Value on POR, BOR = N/A. POSTDEC2, Value on POR, BOR = . POSTDEC2, Details on page: = 64, 85. PREINC2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register).",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nPREINC2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 1 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register). PREINC2, Value on POR, BOR = N/A. PREINC2, Value on POR, BOR = . PREINC2, Details on page: = 64, 85. PLUSW2, Bit 7 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n6 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 5 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 4 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 3 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 2 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 1 = Uses contents of FSR2 to address data memory - value of",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Bit 0 = Uses contents of FSR2 to address data memory - value of FSR2 pre-incremented (not a physical register), value of FSR2 offset by W. PLUSW2, Value on POR, BOR = . PLUSW2, Value on POR, BOR = N/A. PLUSW2, Details on page: = 64, 85. FSR2H, Bit 7 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 6 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 5 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 4 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 3 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 2 = - - - - Indirect Data Memory Address Pointer 2 High Byte.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR2H, Bit 1 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Bit 0 = - - - - Indirect Data Memory Address Pointer 2 High Byte. FSR2H, Value on POR, BOR = ----. FSR2H, Value on POR, BOR = xxxx. FSR2H, Details on page: = 64, 85. FSR2L, Bit 7 = Indirect Data - - - N OV Z DC C. FSR2L, Bit 6 = Memory Address. FSR2L, Bit 5 = Pointer 2. FSR2L, Bit 4 = Low Byte. FSR2L, Bit 3 = Indirect Data - - - N OV Z DC C. FSR2L, Bit 2 = Indirect Data - - - N OV Z DC C. FSR2L, Bit 1 = Indirect Data - - - N OV Z DC C. FSR2L, Bit 0 = Indirect Data - - - N OV Z DC C. FSR2L, Value on POR, BOR = xxxx.",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\nFSR2L, Value on POR, BOR = xxxx. FSR2L, Details on page: = 64, 85 64, 83. STATUS, Bit 7 = . STATUS, Bit 6 = . STATUS, Bit 5 = . STATUS, Bit 4 = . STATUS, Bit 3 = . STATUS, Bit 2 = . STATUS, Bit 1 = . STATUS, Bit 0 = . STATUS, Value on POR, BOR = ---x. STATUS, Value on POR, BOR = xxxx. STATUS, Details on page: = \nLegend:\nx = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded locations are unimplemented, read as ' 0 '.\nNote",
    "REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410)\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 5.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 64-pin devices, read as ' 0 '.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 3.6.4 'PLL in INTOSC Modes' .\n4: The RG5 bit is only available when Master Clear is disabled (MCLRE Configuration bit = 0 ); otherwise, RG5 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: STKFUL and STKUNF bits are cleared by user software or by a POR.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTMR0H, Bit 7 = Timer0 Register High Byte. TMR0H, Bit 6 = Timer0 Register High Byte. TMR0H, Bit 5 = Timer0 Register High Byte. TMR0H, Bit 4 = Timer0 Register High Byte. TMR0H, Bit 3 = Timer0 Register High Byte. TMR0H, Bit 2 = Timer0 Register High Byte. TMR0H, Bit 1 = Timer0 Register High Byte. TMR0H, Bit 0 = Timer0 Register High Byte. TMR0H, Value on POR, BOR = 0000. TMR0H, Value on POR, BOR = 0000. TMR0H, Details on page: = 64, 153. TMR0H, Details on page: = . TMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTMR0L, Bit 4 = Timer0 Register Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte. TMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Value on POR, BOR = xxxx. TMR0L, Value on POR, BOR = xxxx. TMR0L, Details on page: = 64, 153. TMR0L, Details on page: = . T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nT0CON, Value on POR, BOR = 1111. T0CON, Value on POR, BOR = 1111. T0CON, Details on page: = 64, 151. T0CON, Details on page: = . OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 = IRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0100. OSCCON, Value on POR, BOR = q000. OSCCON, Details on page: = 42, 64. OSCCON, Details on page: = . HLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nHLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Value on POR, BOR = 0-00. HLVDCON, Value on POR, BOR = 0101. HLVDCON, Details on page: = 64, 275. HLVDCON, Details on page: = . WDTCON, Bit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Value on POR, BOR = ----. WDTCON, Value on POR, BOR =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n---0. WDTCON, Details on page: = 64, 291. WDTCON, Details on page: = . RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN (1). RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Value on POR, BOR = 0q-1. RCON, Value on POR, BOR = 11q0. RCON, Details on page: = 56, 64, 123. RCON, Details on page: = . TMR1H, Bit 7 = Timer1 Register High Byte. TMR1H, Bit 6 = Timer1 Register High Byte. TMR1H, Bit 5 = Timer1 Register High Byte. TMR1H, Bit 4 = Timer1 Register High Byte. TMR1H, Bit 3 = Timer1 Register High Byte.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTMR1H, Bit 2 = Timer1 Register High Byte. TMR1H, Bit 1 = Timer1 Register High Byte. TMR1H, Bit 0 = Timer1 Register High Byte. TMR1H, Value on POR, BOR = xxxx. TMR1H, Value on POR, BOR = xxxx. TMR1H, Details on page: = 64, 159. TMR1H, Details on page: = . TMR1L, Bit 7 = Timer1 Register Low Byte. TMR1L, Bit 6 = Timer1 Register Low Byte. TMR1L, Bit 5 = Timer1 Register Low Byte. TMR1L, Bit 4 = Timer1 Register Low Byte. TMR1L, Bit 3 = Timer1 Register Low Byte. TMR1L, Bit 2 = Timer1 Register Low Byte. TMR1L, Bit 1 = Timer1 Register Low Byte. TMR1L, Bit 0 = Timer1 Register Low Byte.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTMR1L, Value on POR, BOR = 0000. TMR1L, Value on POR, BOR = 0000. TMR1L, Details on page: = 64, 159. TMR1L, Details on page: = . T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR = 0000. T1CON, Value on POR, BOR = 0000. T1CON, Details on page: = 64, 155. T1CON, Details on page: = . TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTimer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Value on POR, BOR = 1111. TMR2, Value on POR, BOR = 1111. TMR2, Details on page: = 64, 162. TMR2, Details on page: = . PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Value on POR, BOR",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n= -000. PR2, Value on POR, BOR = 0000. PR2, Details on page: = 64, 162. PR2, Details on page: = . T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3 T2OUTPS2. T2CON, Bit 5 = T2OUTPS3 T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000. T2CON, Value on POR, BOR = 0000. T2CON, Details on page: = 64, 161. T2CON, Details on page: = . SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 6 = MSSP Receive",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nBuffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive Buffer/Transmit Register. SSPBUF, Value on POR, BOR = 0000. SSPBUF, Value on POR, BOR = 0000. SSPBUF, Details on page: = 64, 178, 186. SSPBUF, Details on page: = . SSPADD, Bit 7 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 6 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nMode.. SSPADD, Bit 5 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 4 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 3 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 2 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 1 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Bit 0 = MSSP Address Register in I 2 C\u2122Slave Mode. MSSP Baud Rate Reload Register in I 2 C Master Mode.. SSPADD, Value on POR,",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nBOR = 0000. SSPADD, Value on POR, BOR = 0000. SSPADD, Details on page: = 64, 186. SSPADD, Details on page: = . SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Value on POR, BOR = 0000. SSPSTAT, Value on POR, BOR = 0000. SSPSTAT, Details on page: = 64, 178, 188. SSPSTAT, Details on page: = . SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nSSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Value on POR, BOR = 0000. SSPCON1, Value on POR, BOR = 0000. SSPCON1, Details on page: = 64, 179, 179. SSPCON1, Details on page: = . SSPCON2, Bit 7 = GCEN. SSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN. SSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN. SSPCON2, Bit 0 = SEN. SSPCON2, Value on POR, BOR = 0000. SSPCON2, Value on POR, BOR = 0000. SSPCON2, Details on page: = 64,",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n189. SSPCON2, Details on page: = . ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Value on POR, BOR = xxxx. ADRESH, Value on POR, BOR = xxxx. ADRESH, Details on page: = 64, 264. ADRESH, Details on page: = . ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nRegister Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Value on POR, BOR = 0000. ADRESL, Value on POR, BOR = 0000. ADRESL, Details on page: = 64, 264. ADRESL, Details on page: = . ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Value on POR, BOR = --00. ADCON0, Value on POR, BOR = 0000.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nADCON0, Details on page: = 64, 255. ADCON0, Details on page: = . ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00. ADCON1, Value on POR, BOR = qqqq. ADCON1, Details on page: = 64, 256. ADCON1, Details on page: = . ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n= ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Value on POR, BOR = 0-00. ADCON2, Value on POR, BOR = 0000. ADCON2, Details on page: = 64, 257. ADCON2, Details on page: = . CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCapture/Compare/PWM Register 1 High Byte. CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Details on page: = 65, 168. CCPR1H, Details on page: = . CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 Low Byte.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Details on page: = 65, 168. CCPR1L, Details on page: = . CCP1CON, Bit 7 = -. CCP1CON, Bit 6 = -. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = --00. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Details on page: = 65, 167. CCP1CON, Details on page: = . CCPR2H, Bit 7 = Capture/Compare/PWM",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nRegister 2 High Byte. CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 High Byte. CCPR2H, Value on POR, BOR = xxxx. CCPR2H, Value on POR, BOR = xxxx. CCPR2H, Details on page: = 65, 168. CCPR2H, Details on page: = . CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 6 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCapture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 Low Byte. CCPR2L, Value on POR, BOR = 0000. CCPR2L, Value on POR, BOR = 0000. CCPR2L, Details on page: = 65, 168. CCPR2L, Details on page: = . CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nDC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Value on POR, BOR = --00. CCP2CON, Value on POR, BOR = 0000. CCP2CON, Details on page: = 65, 167. CCP2CON, Details on page: = . CCPR3H, Bit 7 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 6 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 5 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 4 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 3 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 2 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCapture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 1 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Bit 0 = Capture/Compare/PWM Register 3 High Byte. CCPR3H, Value on POR, BOR = xxxx. CCPR3H, Value on POR, BOR = xxxx. CCPR3H, Details on page: = 65, 168. CCPR3H, Details on page: = . CCPR3L, Bit 7 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 6 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 5 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 4 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 3 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 2 = Capture/Compare/PWM Register 3 Low Byte.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCCPR3L, Bit 1 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Bit 0 = Capture/Compare/PWM Register 3 Low Byte. CCPR3L, Value on POR, BOR = 0000. CCPR3L, Value on POR, BOR = 0000. CCPR3L, Details on page: = 65, 168. CCPR3L, Details on page: = . CCP3CON, Bit 7 = -. CCP3CON, Bit 6 = -. CCP3CON, Bit 5 = DC3B1. CCP3CON, Bit 4 = DC3B0. CCP3CON, Bit 3 = CCP3M3. CCP3CON, Bit 2 = CCP3M2. CCP3CON, Bit 1 = CCP3M1. CCP3CON, Bit 0 = CCP3M0. CCP3CON, Value on POR, BOR = --00. CCP3CON, Value on POR, BOR = 0000.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCCP3CON, Details on page: = 65, 167. CCP3CON, Details on page: = . CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR, BOR = 0000. CVRCON, Value on POR, BOR = 0000. CVRCON, Details on page: = 65, 271. CVRCON, Details on page: = . CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nCMCON, Bit 0 = CM0. CMCON, Value on POR, BOR = 0000. CMCON, Value on POR, BOR = 0111. CMCON, Details on page: = 65, 265. CMCON, Details on page: = . TMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Value on POR, BOR = 0000. TMR3H, Value on POR, BOR = 0000. TMR3H, Details on page: = 65, 163.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTMR3H, Details on page: = . TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte. TMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Value on POR, BOR = 0000. TMR3L, Value on POR, BOR = 0000. TMR3L, Details on page: = 65, 165. TMR3L, Details on page: = . T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nT3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Value on POR, BOR = 0000. T3CON, Value on POR, BOR = 0000. T3CON, Details on page: = 65, 163. T3CON, Details on page: = . PSPCON, Bit 7 = IBF. PSPCON, Bit 6 = OBF. PSPCON, Bit 5 = IBOV. PSPCON, Bit 4 = PSPMODE. PSPCON, Bit 3 = -. PSPCON, Bit 2 = -. PSPCON, Bit 1 = -. PSPCON, Bit 0 = -. PSPCON, Value on POR, BOR = 0000. PSPCON, Value on POR, BOR = ----. PSPCON, Details on",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\npage: = 65, 149. PSPCON, Details on page: = \nLegend:\nx = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded locations are unimplemented, read as ' 0 '.\nNote",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 5.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 64-pin devices, read as ' 0 '.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 3.6.4 'PLL in INTOSC Modes' .\n4: The RG5 bit is only available when Master Clear is disabled (MCLRE Configuration bit = 0 ); otherwise, RG5 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: STKFUL and STKUNF bits are cleared by user software or by a POR.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nSPBRG1, Bit 7 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Low Byte. SPBRG1, Value on POR, BOR = 0000 0000. SPBRG1, Details on page: = 65, 221. RCREG1, Bit 7 = EUSART1 Receive Register. RCREG1, Bit 6 = EUSART1 Receive Register. RCREG1, Bit 5 = EUSART1 Receive Register.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nRCREG1, Bit 4 = EUSART1 Receive Register. RCREG1, Bit 3 = EUSART1 Receive Register. RCREG1, Bit 2 = EUSART1 Receive Register. RCREG1, Bit 1 = EUSART1 Receive Register. RCREG1, Bit 0 = EUSART1 Receive Register. RCREG1, Value on POR, BOR = 0000 0000. RCREG1, Details on page: = 65, 229. TXREG1, Bit 7 = EUSART1 Transmit Register. TXREG1, Bit 6 = EUSART1 Transmit Register. TXREG1, Bit 5 = EUSART1 Transmit Register. TXREG1, Bit 4 = EUSART1 Transmit Register. TXREG1, Bit 3 = EUSART1 Transmit Register. TXREG1, Bit 2 = EUSART1 Transmit Register. TXREG1, Bit 1 = EUSART1 Transmit Register. TXREG1, Bit 0 = EUSART1 Transmit Register.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTXREG1, Value on POR, BOR = xxxx xxxx. TXREG1, Details on page: = 65, 226. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Value on POR, BOR = 0000 0010. TXSTA1, Details on page: = 65, 218. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1,",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nValue on POR, BOR = 0000 000x. RCSTA1, Details on page: = 65, 219. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Value on POR, BOR = --11 ---1. IPR3, Details on page: = 65, 122. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Value on POR, BOR =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n--00 ---0. PIR3, Details on page: = 65, 116. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit 1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Value on POR, BOR = --00 ---0. PIE3, Details on page: = 65, 119. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR = 11-- 1111.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nIPR2, Details on page: = 65, 121. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR = 00-- 0000. PIR2, Details on page: = 65, 115. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR = 00-- 0000.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPIE2, Details on page: = 65, 118. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111 1111. IPR1, Details on page: = 65, 120. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPIR1, Value on POR, BOR = 0000 0000. PIR1, Details on page: = 65, 114. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000 0000. PIE1, Details on page: = 65, 117. MEMCON (2), Bit 7 = EBDIS. MEMCON (2), Bit 6 = -. MEMCON (2), Bit 5 = WAIT1. MEMCON (2), Bit 4 = WAIT0. MEMCON (2), Bit 3 = -. MEMCON (2), Bit 2 = -. MEMCON (2), Bit 1 = WM1.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nMEMCON (2), Bit 0 = WM0. MEMCON (2), Value on POR, BOR = 0-00 --00. MEMCON (2), Details on page: = 65, 95. OSCTUNE, Bit 7 = INTSRC. OSCTUNE, Bit 6 = PLLEN (3). OSCTUNE, Bit 5 = -. OSCTUNE, Bit 4 = TUN4. OSCTUNE, Bit 3 = TUN3. OSCTUNE, Bit 2 = TUN2. OSCTUNE, Bit 1 = TUN1. OSCTUNE, Bit 0 = TUN0. OSCTUNE, Value on POR, BOR = 00-0 0000. OSCTUNE, Details on page: = 39, 65. TRISJ (2), Bit 7 = PORTJ Data Direction Register. TRISJ (2), Bit 6 = PORTJ Data Direction Register. TRISJ (2), Bit 5 = PORTJ Data Direction Register. TRISJ (2), Bit 4 = PORTJ Data Direction Register.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTRISJ (2), Bit 3 = PORTJ Data Direction Register. TRISJ (2), Bit 2 = PORTJ Data Direction Register. TRISJ (2), Bit 1 = PORTJ Data Direction Register. TRISJ (2), Bit 0 = PORTJ Data Direction Register. TRISJ (2), Value on POR, BOR = 1111 1111. TRISJ (2), Details on page: = 65, 147. TRISH (2), Bit 7 = PORTH Data Direction Register. TRISH (2), Bit 6 = PORTH Data Direction Register. TRISH (2), Bit 5 = PORTH Data Direction Register. TRISH (2), Bit 4 = PORTH Data Direction Register. TRISH (2), Bit 3 = PORTH Data Direction Register. TRISH (2), Bit 2 = PORTH Data Direction Register. TRISH (2), Bit 1 = PORTH Data Direction Register. TRISH (2), Bit 0 = PORTH Data Direction Register. TRISH (2), Value on",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPOR, BOR = 1111 1111. TRISH (2), Details on page: = 65, 145. TRISG, Bit 7 = -. TRISG, Bit 6 = -. TRISG, Bit 5 = -. TRISG, Bit 4 = PORTG Data Direction Register. TRISG, Bit 3 = PORTG Data Direction Register. TRISG, Bit 2 = PORTG Data Direction Register. TRISG, Bit 1 = PORTG Data Direction Register. TRISG, Bit 0 = PORTG Data Direction Register. TRISG, Value on POR, BOR = ---1 1111. TRISG, Details on page: = 66, 143. TRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register. TRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPORTF Data Direction Register. TRISF, Value on POR, BOR = 1111 1111. TRISF, Details on page: = 66, 141. TRISE, Bit 7 = PORTE Data Direction Register. TRISE, Bit 6 = PORTE Data Direction Register. TRISE, Bit 5 = PORTE Data Direction Register. TRISE, Bit 4 = PORTE Data Direction Register. TRISE, Bit 3 = PORTE Data Direction Register. TRISE, Bit 2 = PORTE Data Direction Register. TRISE, Bit 1 = PORTE Data Direction Register. TRISE, Bit 0 = PORTE Data Direction Register. TRISE, Value on POR, BOR = 1111 1111. TRISE, Details on page: = 66, 139. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nData Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Value on POR, BOR = 1111 1111. TRISD, Details on page: = 66, 136. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111 1111. TRISC, Details on page: = 66, 133. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Value on POR, BOR = 1111 1111. TRISB, Details on page: = 66, 130. TRISA, Bit 7 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 6 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 5 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 4 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 3 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 2 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Bit 1 = TRISA7 (5) TRISA6 (5) PORTA Data",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nDirection Register. TRISA, Bit 0 = TRISA7 (5) TRISA6 (5) PORTA Data Direction Register. TRISA, Value on POR, BOR = 1111 1111. TRISA, Details on page: = 66, 127. LATJ (2), Bit 7 = LATJ Output Latch Register. LATJ (2), Bit 6 = LATJ Output Latch Register. LATJ (2), Bit 5 = LATJ Output Latch Register. LATJ (2), Bit 4 = LATJ Output Latch Register. LATJ (2), Bit 3 = LATJ Output Latch Register. LATJ (2), Bit 2 = LATJ Output Latch Register. LATJ (2), Bit 1 = LATJ Output Latch Register. LATJ (2), Bit 0 = LATJ Output Latch Register. LATJ (2), Value on POR, BOR = xxxx xxxx. LATJ (2), Details on page: = 66, 147. LATH",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n(2), Bit 7 = LATH. LATH (2), Bit 6 = LATH. LATH (2), Bit 5 = LATH. LATH (2), Bit 4 = LATH. LATH (2), Bit 3 = LATH. LATH (2), Bit 2 = LATH. LATH (2), Bit 1 = LATH. LATH (2), Bit 0 = LATH. LATH (2), Value on POR, BOR = xxxx xxxx. LATH (2), Details on page: = 66, 145. LATG, Bit 7 = Output Latch Register -. LATG, Bit 6 = -. LATG, Bit 5 = -. LATG, Bit 4 = LATG Output. LATG, Bit 3 = Latch Register. LATG, Bit 2 = Output Latch Register -. LATG, Bit 1 = Output Latch Register -. LATG, Bit 0 = Output Latch Register -. LATG, Value on POR, BOR =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n---x xxxx. LATG, Details on page: = 66, 143. LATF, Bit 7 = LATF Output Latch Register. LATF, Bit 6 = LATF Output Latch Register. LATF, Bit 5 = LATF Output Latch Register. LATF, Bit 4 = LATF Output Latch Register. LATF, Bit 3 = LATF Output Latch Register. LATF, Bit 2 = LATF Output Latch Register. LATF, Bit 1 = LATF Output Latch Register. LATF, Bit 0 = LATF Output Latch Register. LATF, Value on POR, BOR = xxxx xxxx. LATF, Details on page: = 66, 141. LATE, Bit 7 = LATE Output Latch Register. LATE, Bit 6 = LATE Output Latch Register. LATE, Bit 5 = LATE Output Latch Register. LATE, Bit 4 = LATE Output Latch Register. LATE, Bit 3 = LATE Output Latch Register. LATE, Bit 2 = LATE Output Latch Register. LATE, Bit 1 = LATE Output Latch Register. LATE, Bit 0 = LATE Output Latch Register. LATE, Value on",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPOR, BOR = xxxx xxxx. LATE, Details on page: = 66, 139. LATD, Bit 7 = LATD Output Latch Register. LATD, Bit 6 = LATD Output Latch Register. LATD, Bit 5 = LATD Output Latch Register. LATD, Bit 4 = LATD Output Latch Register. LATD, Bit 3 = LATD Output Latch Register. LATD, Bit 2 = LATD Output Latch Register. LATD, Bit 1 = LATD Output Latch Register. LATD, Bit 0 = LATD Output Latch Register. LATD, Value on POR, BOR = xxxx xxxx. LATD, Details on page: = 66, 136. LATC, Bit 7 = LATC Output Latch Register. LATC, Bit 6 = LATC Output Latch Register. LATC, Bit 5 = LATC Output Latch Register. LATC, Bit 4 = LATC Output Latch Register. LATC, Bit 3 = LATC Output Latch Register. LATC, Bit 2 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nLATC Output Latch Register. LATC, Bit 1 = LATC Output Latch Register. LATC, Bit 0 = LATC Output Latch Register. LATC, Value on POR, BOR = xxxx xxxx. LATC, Details on page: = 66, 133. LATB, Bit 7 = LATB Output Latch Register. LATB, Bit 6 = LATB Output Latch Register. LATB, Bit 5 = LATB Output Latch Register. LATB, Bit 4 = LATB Output Latch Register. LATB, Bit 3 = LATB Output Latch Register. LATB, Bit 2 = LATB Output Latch Register. LATB, Bit 1 = LATB Output Latch Register. LATB, Bit 0 = LATB Output Latch Register. LATB, Value on POR, BOR = xxxx xxxx. LATB, Details on page: = 66, 130. LATA, Bit 7 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 6 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nLATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 5 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 4 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 3 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 2 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 1 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Bit 0 = LATA7 (5) LATA6 (5) LATA Output Latch Register. LATA, Value on POR, BOR = xxxx xxxx. LATA, Details on page: = 66, 127. PORTJ (2), Bit 7 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 6 = Read PORTJ pins, Write PORTJ Data",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nLatch. PORTJ (2), Bit 5 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 4 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 3 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 2 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 1 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Bit 0 = Read PORTJ pins, Write PORTJ Data Latch. PORTJ (2), Value on POR, BOR = xxxx xxxx. PORTJ (2), Details on page: = 66, 147. PORTH (2), Bit 7 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 6 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 5 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 4 = Read PORTH",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\npins, Write PORTH Data Latch. PORTH (2), Bit 3 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 2 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 1 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Bit 0 = Read PORTH pins, Write PORTH Data Latch. PORTH (2), Value on POR, BOR = xxxx xxxx. PORTH (2), Details on page: = 66, 145. PORTG, Bit 7 = -. PORTG, Bit 6 = -. PORTG, Bit 5 = RG5 (4). PORTG, Bit 4 = Read PORTG. PORTG, Bit 3 = pins<4:0>,. PORTG, Bit 2 = Write PORTG. PORTG, Bit 1 = Data Latch<4:0>. PORTG, Bit 0 = Read PORTG. PORTG, Value on POR, BOR = --xx xxxx. PORTG, Details",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\non page: = 66, 143. PORTF, Bit 7 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 6 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 5 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 4 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 3 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 2 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 1 = Read PORTF pins, Write PORTF Data Latch. PORTF, Bit 0 = Read PORTF pins, Write PORTF Data Latch. PORTF, Value on POR, BOR = xxxx xxxx. PORTF, Details on page: = 66, 141. PORTE, Bit 7 = . PORTE, Bit 6 = . PORTE, Bit 5 = . PORTE, Bit 4 = . PORTE, Bit 3 = . PORTE, Bit 2 = . PORTE, Bit 1 = . PORTE, Bit 0 = . PORTE, Value on POR, BOR =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nxxxx. PORTE, Details on page: = 66, 139. , Bit 7 = Read PORTE pins, Write PORTE Data Latch. , Bit 6 = Read PORTE pins, Write PORTE Data Latch. , Bit 5 = Read PORTE pins, Write PORTE Data Latch. , Bit 4 = Read PORTE pins, Write PORTE Data Latch. , Bit 3 = Read PORTE pins, Write PORTE Data Latch. , Bit 2 = Read PORTE pins, Write PORTE Data Latch. , Bit 1 = Read PORTE pins, Write PORTE Data Latch. , Bit 0 = Read PORTE pins, Write PORTE Data Latch. , Value on POR, BOR = xxxx. , Details on page: = . PORTD, Bit 7 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 6 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 5 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 4 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 3 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 2 = Read",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPORTD pins, Write PORTD Data Latch. PORTD, Bit 1 = Read PORTD pins, Write PORTD Data Latch. PORTD, Bit 0 = Read PORTD pins, Write PORTD Data Latch. PORTD, Value on POR, BOR = xxxx xxxx. PORTD, Details on page: = 66, 136. PORTC, Bit 7 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 6 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 5 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 4 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 3 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 2 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 1 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Bit 0 = Read PORTC pins, Write PORTC Data Latch xxxx. PORTC, Value on",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPOR, BOR = xxxx xxxx. PORTC, Details on page: = 66, 133. PORTB, Bit 7 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 6 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 5 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 4 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 3 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 2 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 1 = Read PORTB pins, Write PORTB Data Latch. PORTB, Bit 0 = Read PORTB pins, Write PORTB Data Latch. PORTB, Value on POR, BOR = xxxx. PORTB, Details on page: = 66, 130. PORTA, Bit 7 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 6 = RA7 (5) RA6 (5) Read",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nPORTA pins, Write PORTA Data Latch. PORTA, Bit 5 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 4 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 3 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 2 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 1 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 0 = RA7 (5) RA6 (5) Read PORTA pins, Write PORTA Data Latch. PORTA, Value on POR, BOR = xx0x 0000. PORTA, Details on page: = 66, 127\nLegend:",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n- x = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded locations are unimplemented, read as ' 0 '.\nNote",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 5.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 64-pin devices, read as ' 0 '.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 3.6.4 'PLL in INTOSC Modes' .\n4: The RG5 bit is only available when Master Clear is disabled (MCLRE Configuration bit = 0 ); otherwise, RG5 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: STKFUL and STKUNF bits are cleared by user software or by a POR.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nSPBRGH1, Bit 7 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Bit 0 = EUSART1 Baud Rate Generator High Byte. SPBRGH1, Value on POR, BOR = 0000 0000. SPBRGH1, Details on page: = 66, 221. BAUDCON1, Bit 7 = ABDOVF. BAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 =",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Value on POR, BOR = 0100 0-00. BAUDCON1, Details on page: = 66, 220. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator. SPBRG2, Bit 4 = AUSART2 Baud Rate Generator. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator. SPBRG2, Value on POR, BOR = 0000 0000.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nSPBRG2, Details on page: = 66, 234. RCREG2, Bit 7 = AUSART2 Receive Register. RCREG2, Bit 6 = AUSART2 Receive Register. RCREG2, Bit 5 = AUSART2 Receive Register. RCREG2, Bit 4 = AUSART2 Receive Register. RCREG2, Bit 3 = AUSART2 Receive Register. RCREG2, Bit 2 = AUSART2 Receive Register. RCREG2, Bit 1 = AUSART2 Receive Register. RCREG2, Bit 0 = AUSART2 Receive Register. RCREG2, Value on POR, BOR = 0000 0000. RCREG2, Details on page: = 66, 248. TXREG2, Bit 7 = AUSART2 Transmit Register. TXREG2, Bit 6 = AUSART2 Transmit Register. TXREG2, Bit 5 = AUSART2 Transmit Register. TXREG2, Bit 4 = AUSART2 Transmit Register. TXREG2, Bit 3 = AUSART2 Transmit Register.",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\nTXREG2, Bit 2 = AUSART2 Transmit Register. TXREG2, Bit 1 = AUSART2 Transmit Register. TXREG2, Bit 0 = AUSART2 Transmit Register. TXREG2, Value on POR, BOR = xxxx xxxx. TXREG2, Details on page: = 66, 246. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Value on POR, BOR = 0000 -010. TXSTA2, Details on page: = 66, 242. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Value on POR, BOR = 0000 000x. RCSTA2, Details on page: = 66, 243\nLegend:\n- x = unknown, u = unchanged, -= unimplemented, q = value depends on condition. Shaded locations are unimplemented, read as ' 0 '.\nNote",
    "TABLE 6-3: REGISTER FILE SUMMARY (PIC18F6310/6410/8310/8410) (CONTINUED)\n1: The SBOREN bit is only available when the BOREN<1:0> Configuration bits = 01 ; otherwise, it is disabled and reads as ' 0 '. See Section 5.4 'Brown-out Reset (BOR)' .\n2: These registers and/or bits are not implemented on 64-pin devices, read as ' 0 '.\n3: The PLLEN bit is only available in specific oscillator configurations; otherwise, it is disabled and reads as ' 0 '. See Section 3.6.4 'PLL in INTOSC Modes' .\n4: The RG5 bit is only available when Master Clear is disabled (MCLRE Configuration bit = 0 ); otherwise, RG5 reads as ' 0 '. This bit is read-only.\n5: RA6/RA7 and their associated latch and direction bits are individually configured as port pins based on various primary oscillator modes. When disabled, these bits read as ' 0 '.\n6: STKFUL and STKUNF bits are cleared by user software or by a POR.",
    "6.3.5 STATUS REGISTER\nThe STATUS register, shown in Register 6-3, contains the arithmetic status of the ALU. As with any other SFR, it can be the operand for any instruction.\nintended. As an example, CLRF STATUS , will set the Z bit  and  leave  the  remaining  Status  bits  unchanged (' 000u u1uu ').\nIf the STATUS register is the destination for an instruction that affects the Z, DC, C, OV or N bits, the results of the instruction are not written; instead, the status is updated according to the instruction performed. Therefore,  the  result  of  an  instruction  with  the  STATUS register as its destination may  be  different than\nIt is recommended that only BCF BSF SWAPF MOVFF , , , and MOVWF instructions are used to alter the STATUS register, because these instructions do not affect the Z, C, DC, OV or N bits in the STATUS register.\nFor other instructions that do not affect Status bits, see the instruction set summaries  in Table 25-2 and Table 25-3.\nNote:\nThe C and DC bits operate as a Borrow and Digit Borrow bit, respectively, in subtraction.",
    "REGISTER 6-3: STATUS REGISTER\n-, U-0 = -. -, U-0 = -. -, R/W-x = N. -, R/W-x = OV. -, R/W-x = Z. -, R/W-x = DC (1). -, R/W-x = C (2). bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-x = bit 0\nLegend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as '0'\n-n = Value at POR\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "bit 4 N: Negative bit\nThis bit is used for signed arithmetic (2's complement). It indicates whether the result was negative (ALU MSB = 1 ).\n1 = Result was negative\n0 = Result was positive\nOV: Overflow bit\nThis bit is used for signed arithmetic (2's complement). It indicates an overflow of the 7-bit magnitude, which causes the sign bit (bit 7) to change state.\n1 = Overflow occurred for signed arithmetic (in this arithmetic operation)\n0 = No overflow occurred\nZ: Zero bit\n1 = The result of an arithmetic or logic operation is zero\n0 = The result of an arithmetic or logic operation is not zero",
    "bit 1 DC: Digit Carry/Borrow bit (1)\nFor ADDWF ADDLW SUBLW , , and SUBWF instructions:\n1 = A carry-out from the 4th low-order bit of the result occurred 0 = No carry-out from the 4th low-order bit of the result\nC: Carry/Borrow bit (2)\nFor ADDWF ADDLW SUBLW , , and SUBWF instructions:\n1 = A carry-out from the Most Significant bit of the result occurred\n0 = No carry-out from the Most Significant bit of the result occurred\nNote 1: For Borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either bit 4 or bit 3 of the source register.\n2: For Borrow, the polarity is reversed. A subtraction is executed by adding the 2's complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either the high or low-order bit of the source register.",
    "6.4 Data Addressing Modes\nNote:\nPurpose Register File' ), or a location in the Access Bank  ( Section 6.3.2  'Access  Bank' ) as  the  data source for the instruction.\nThe execution of some instructions in the core  PIC18  instruction  set  are  changed when the PIC18 extended instruction set is enabled. See Section 6.5 'Data Memory and  the  Extended  Instruction  Set' for more information.\nWhile the program memory can be addressed in only one way - through the program counter - information in the data memory space can be addressed in several ways. For most instructions, the addressing mode is fixed. Other instructions may use up to three modes, depending on which operands are used and whether or not the extended instruction set is enabled.\nThe addressing modes are:\n\u00b7 Inherent\n\u00b7 Literal\n\u00b7 Direct\n\u00b7 Indirect\nAn additional addressing mode, Indexed Literal Offset, is available  when  the  extended  instruction  set  is enabled (XINST Configuration bit = 1 ). Its operation is discussed in greater detail in Section 6.5.1 'Indexed Addressing with Literal Offset' .",
    "6.4.1 INHERENT AND LITERAL ADDRESSING\nMany  PIC18  control  instructions  do  not  need  any argument at all; they either perform an operation that globally affects the device, or they operate implicitly on one  register. This  addressing  mode  is  known  as Inherent Addressing. Examples include SLEEP RESET , and DAW .\nOther instructions work in a similar way but require an additional  explicit  argument  in  the  opcode.  This  is known  as  Literal  Addressing  mode,  because  they require some literal value as an argument. Examples include ADDLW and MOVLW , which respectively, add or move a literal value to the W register. Other examples include CALL and GOTO , which include a 20-bit program memory address.",
    "6.4.2 DIRECT ADDRESSING\nDirect  Addressing  specifies  all  or  part  of  the  source and/or destination address of the operation within the opcode itself. The options are specified by the arguments accompanying the instruction.\nIn  the  core  PIC18  instruction  set,  bit-oriented  and byte-oriented instructions use some version of Direct Addressing by default. All of these instructions include some  8-bit  literal  address  as  their  Least  Significant Byte. This address specifies either a register address in one of the banks of data RAM ( Section 6.3.3 'General\nThe Access RAM bit, 'a', determines how the address is interpreted. When 'a' is ' 1 ', the contents of the BSR ( Section 6.3.1 'Bank Select Register' ) are used with the address to determine the complete 12-bit address of the register. When 'a' is ' 0 ', the address is interpreted as being a register in the Access Bank. Addressing that uses  the  Access  RAM  is  sometimes  also  known  as Direct Forced Addressing mode.\nA few instructions, such as MOVFF ,  include the entire 12-bit  address  (either  source  or  destination)  in  their opcodes. In these cases, the BSR is ignored entirely.",
    "6.4.2 DIRECT ADDRESSING\nThe destination of the operation's results is determined by the destination bit, 'd'. When 'd' is ' 1 ', the results are stored back in the source register, overwriting its original contents. When 'd' is ' 0 ',  the results are stored in the  W  register.  Instructions  without  the  'd'  argument have a destination that is implicit in the instruction; their destination is either the target register being operated on, or the W register.",
    "6.4.3 INDIRECT ADDRESSING\nIndirect Addressing allows the user to access a location in  data memory without giving a fixed address in the instruction. This is done by using File Select Registers (FSRs) as pointers to the locations to be read or written to. Since the FSRs are themselves located in RAM as Special File Registers, they can also be directly manipulated under program control. This makes FSRs very useful in implementing data structures, such as tables and arrays in data memory.\nThe registers for Indirect Addressing are also implemented with Indirect File Operands (INDFs) that permit automatic manipulation of the pointer value with auto-incrementing, auto-decrementing or offsetting with another value. This allows for efficient code using loops, such as the example of clearing an entire RAM bank in Example 6-5. It also enables users to perform Indexed Addressing and other Stack Pointer operations for program memory in data memory.",
    "HOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nNEXT, 1 = LFSR CLRF POSTINC0. NEXT, 2 = FSR0, 100h ; ; ;. NEXT, 3 = Clear INDF register then ; inc pointer. , 1 = BTFSS 1. , 2 = FSR0H,. , 3 = ; All done with ; Bank1?. , 1 = BRA. , 2 = NEXT. , 3 = ; NO, clear next. CONTINUE, 1 = CONTINUE. CONTINUE, 2 = CONTINUE. CONTINUE, 3 = ; YES, continue",
    "6.4.3.1 FSR Registers and the INDF Operand\nAt  the  core  of  Indirect  Addressing  are  three  sets  of registers: FSR0, FSR1 and FSR2. Each represents a pair  of  8-bit  registers,  FSRnH  and  FSRnL.  The  four upper bits of the FSRnH register are not used, so each FSR pair holds a 12-bit value. This represents a value that can address the entire range of the data memory in a linear fashion. The FSR register pairs, then, serve as pointers to data memory locations.",
    "6.4.3.1 FSR Registers and the INDF Operand\nIndirect  Addressing  is  accomplished  with  a  set  of Indirect File Operands, INDF0 through INDF2. These can  be  thought  of  as  'virtual'  registers';  they  are mapped in the SFR space but are not physically implemented. Reading or writing to a particular INDF register actually accesses its corresponding FSR register pair. A read from INDF1, for example, reads the data at the address indicated by FSR1H:FSR1L. Instructions that use the INDF registers as operands actually use the contents of their corresponding FSR as a pointer to the instruction's target. The  INDF  operand  is just a convenient way of using the pointer.\nBecause Indirect Addressing uses a full 12-bit address, data RAM banking is not necessary. Thus, the current contents of the BSR and the Access RAM bit have no effect on determining the target address.",
    "6.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\nIn addition to the INDF operand, each FSR register pair also has four additional indirect operands. Like INDF, these  are  'virtual'  registers  that  cannot  be  indirectly read or written to. Accessing these registers actually accesses  the  associated  FSR  register  pair,  but  also performs a specific action on its stored value. They are:\nIn  this  context,  accessing  an  INDF  register  uses  the value  in  the  FSR  registers  without  changing  them. Similarly, accessing a PLUSW register gives the FSR value offset by the value in the W register; neither value is  actually  changed  in  the  operation.  Accessing  the other  virtual  registers  changes  the  value  of  the  FSR registers.",
    "6.4.3.2 FSR Registers and POSTINC, POSTDEC, PREINC and PLUSW\n\u00b7 POSTDEC: accesses the FSR value, then automatically decrements it by ' 1 ' afterwards\n\u00b7 POSTINC: accesses the FSR value, then automatically increments it by ' 1 ' afterwards\n\u00b7 PREINC: increments the FSR value by ' 1 ', then uses it in the operation\n\u00b7 PLUSW: adds the signed value of the W register (range of -127 to 128) to that of the FSR and uses the new value in the operation.\nOperations  on  the  FSRs  with  POSTDEC,  POSTINC and  PREINC  affect  the  entire  register  pair;  that  is, rollovers of the FSRnL register from FFh to 00h carry over to the FSRnH register. On the other hand, results of  these  operations  do  not  change  the  value  of  any flags in the STATUS register (e.g., Z, N, OV, etc.).",
    "PIC18F6310/6410/8310/8410\nThe PLUSW register can be used to implement a form of Indexed Addressing in the data memory space. By manipulating  the  value  in  the  W  register,  users  can reach  addresses  that  are  fixed  offsets  from  pointer addresses. In some applications, this can be used to implement  some  powerful  program  control  structure, such as software stacks, inside of data memory.",
    "6.4.3.3 Operations by FSRs on FSRs\nIndirect Addressing operations that target other FSRs or virtual registers represent special cases. For example, using an FSR to point to one of the virtual registers will not result in successful operations. As a specific case, assume that FSR0H:FSR0L contains FE7h, the address of INDF1. Attempts to read the value of the INDF1, using INDF0 as an operand, will return 00h. Attempts to write to INDF1, using INDF0 as the operand, will result in a NOP .\nOn the other hand, using the virtual registers to write to an FSR pair may not occur as planned. In these cases, the value will be written to the FSR pair, but without any incrementing or decrementing. Thus, writing to INDF2 or POSTDEC2  will  write  the  same  value  to  the FSR2H:FSR2L.\nSince the FSRs are physical registers mapped in the SFR space, they can be manipulated through all direct operations.  Users  should  proceed  cautiously  when working  on  these  registers,  particularly  if  their  code uses Indirect Addressing.",
    "6.4.3.3 Operations by FSRs on FSRs\nSimilarly, operations by Indirect Addressing are generally permitted on all other SFRs. Users should exercise the appropriate caution that they do not inadvertently change settings that might affect the operation of the device.",
    "6.5 Data Memory and the Extended Instruction Set\nEnabling  the  PIC18  extended  instruction  set  (XINST Configuration  bit  = 1 ) significantly  changes  certain aspects  of  data  memory  and  its  addressing.  Specifically, the use of the Access Bank for many of the core PIC18  instructions  is  different;  this  is due  to  the introduction  of  a  new  addressing  mode  for  the  data memory space.\nWhat does not change is just as important. The size of the data memory space is unchanged, as well as its linear addressing. The SFR map remains the same. Core PIC18 instructions can still operate in both Direct and Indirect Addressing mode; inherent and literal instructions  do  not  change  at  all.  Indirect  Addressing  with FSR0 and FSR1 also remain unchanged.\nEnabling the PIC18 extended instruction set changes the  behavior  of  Indirect  Addressing  using  the  FSR2 register pair and its associated file operands. Under the proper  conditions,  instructions  that  use  the  Access Bank  -  that  is,  most  bit-oriented  and  byte-oriented instructions - can invoke a form of Indexed Addressing using an offset specified in the instruction. This special addressing mode is known as Indexed Addressing with Literal Offset, or Indexed Literal Offset mode.\nWhen using the extended instruction set, this addressing mode requires the following:",
    "6.5 Data Memory and the Extended Instruction Set\n\u00b7 The use of the Access Bank is forced ('a' = 0 ); and\n\u00b7 The file address argument is less than or equal to 5Fh.\nUnder these conditions, the file address of the instruction  is  not  interpreted  as  the  lower  byte  of  an address (used with the BSR in Direct Addressing), or as an 8-bit address in the Access Bank. Instead, the value is interpreted as an offset value to an Address Pointer specified by FSR2. The offset and the contents of FSR2 are added to obtain the target address of the operation.",
    "6.5.2 INSTRUCTIONS AFFECTED BY INDEXED LITERAL OFFSET MODE\nAny of the core PIC18 instructions that can use Direct Addressing  are  potentially  affected  by  the  Indexed Literal Offset Addressing  mode.  This  includes  all byte-oriented  and  bit-oriented  instructions,  or  almost one-half of the standard PIC18 instruction set. Instructions  that  only  use  Inherent  or  Literal  Addressing modes are unaffected.\nAdditionally,  byte-oriented  and  bit-oriented  instructions are  not  affected  if  they  do  not  use  the  Access  Bank (Access RAM bit is ' 1 '), or include a file address of 60h or above. Instructions meeting these criteria will continue to execute as before. A comparison of the different possible addressing modes when the extended instruction set is enabled is shown in Figure 6-9.\nThose who desire to use byte-oriented or bit-oriented instructions in the Indexed Literal Offset mode should note the changes to assembler syntax for this mode. This  is  described  in  more  detail  in Section 25.2.1 'Extended Instruction Syntax' .\nFIGURE 6-9:",
    "COMPARING ADDRESSING OPTIONS FOR BIT-ORIENTED AND BYTE-ORIENTED INSTRUCTIONS (EXTENDED INSTRUCTION SET ENABLED)\nEXAMPLE INSTRUCTION: ADDWF, f, d, a (Opcode: 0010 01da ffff ffff )",
    "When a = 0 and f \uf0b3 60h:\nThe  instruction executes  in Direct Forced mode. 'f' is interpreted as a location in the Access  RAM  between  060h and FFFh. This is the same as locations F60h to FFFh (Bank 15) of data memory.\nLocations below 060h are not available in this addressing mode.",
    "When a = 0 and f \uf020\uf0a3\uf020 5Fh:\nThe instruction executes in Indexed Literal Offset mode. 'f' is interpreted as an offset to the address  value  in  FSR2.  The two are added together to obtain the address of the target register for the instruction. The address  can  be  anywhere  in the data memory space.\nNote  that  in  this mode,  the correct syntax is now: ADDWF [k], d where 'k' is the same as 'f'.",
    "When a = 1 (all values of f):\nThe  instruction executes  in Direct  mode  (also  known  as Direct Long mode). 'f' is interpreted  as  a  location  in one of the 16 banks of the data memory  space.  The  bank  is designated by the Bank Select Register  (BSR).  The  address can  be  in  any  implemented bank in the data memory space.",
    "6.5.3 MAPPING THE ACCESS BANK IN INDEXED LITERAL OFFSET MODE\nThe  use  of  Indexed  Literal  Offset  Addressing  mode effectively changes how the lower part of Access RAM (00h to 5Fh) is mapped. Rather than containing just the contents of the bottom part of Bank 0, this mode maps the contents from Bank 0 and a user-defined 'window' that  can  be  located  anywhere  in  the  data  memory space. The value of FSR2 establishes the lower boundary of the addresses mapped into the window, while the upper  boundary  is  defined  by  FSR2  plus  95  (5Fh). Addresses in the Access RAM above 5Fh are mapped as previously described (see Section 6.3.2 'Access Bank' ). An example of Access Bank remapping in this addressing mode is shown in Figure 6-10.\nRemapping of the Access Bank applies only to operations using the Indexed Literal Offset mode. Operations that use the BSR (Access RAM bit is ' 1 ') will continue to use Direct Addressing as before.",
    "6.6 PIC18 Instruction Execution and the Extended Instruction Set\nEnabling the extended instruction set adds eight additional commands to the existing PIC18 instruction set. These  instructions are executed as described in Section 25.2 'Extended Instruction Set' .",
    "7.0 PROGRAM MEMORY\nFor  PIC18FX310/X410 devices, the on-chip program memory  is  implemented  as  read-only  memory.  It  is readable  over  the  entire  VDD  range  during  normal operation; it cannot be written to or erased. Reads from program memory are executed one byte at a time.\nPIC18F8410 devices also implement the ability to read, write  to  and  execute  code  from  external  memory devices  using  the  external  memory  interface.  In  this implementation, external memory is used as all or part of  the  program  memory  space.  The  operation  of  the physical interface is discussed in Section 8.0 'External Memory Interface' .\nIn all devices, a value written to the program memory space does not need  to be a valid instruction. Executing a program memory location that forms  an invalid instruction results in a NOP .",
    "7.1 Table Reads and Table Writes\nTo read and write to the program memory space, there are two operations that allow the processor to move bytes  between  the  program  memory  space  and  the data RAM: table read ( TBLRD ) and table write ( TBLWT ).\nThe program memory space is 16 bits wide, while the data RAM space is 8 bits wide. Table reads and table writes move data between these two memory spaces through an 8-bit register (TABLAT).\nTable  read  operations  retrieve  data  from  program memory and places it into the data RAM space. Table write  operations  place  data  from  the  data  memory space on the external data bus. The actual process of writing  the  data  to  the  particular  memory  device  is determined  by  the  requirements  of  the  device  itself. Figure 7-1 shows the table operations as they relate to program memory and data RAM.\nTable operations work with byte entities. A table block containing data, rather than program instructions, is not required to be word-aligned. Therefore, a table block can start and end at any byte address. If a table write is being used to write executable code into an external program memory, program instructions will need to be word-aligned.",
    "Note:\nAlthough it cannot be used in PIC18F6310 devices  in  normal  operation,  the TBLWT instruction is still implemented in the instruction  set.  Executing  the  instruction takes two instruction cycles, but effectively results in a NOP .\nThe TBLWT instruction is available in programming modes and is used during In-Circuit Serial Programming (ICSP).",
    "7.2 Control Registers\nTABLE 7-1:\nTwo control registers are used in conjunction with the TBLRD and TBLWT instructions:  the  TABLAT  register and the TBLPTR register set.",
    "7.2.1 TABLAT - TABLE LATCH REGISTER\nThe Table Latch (TABLAT) is an 8-bit register mapped into the SFR space. The Table Latch register is used to hold  8-bit  data  during  data  transfers  between  the program memory space and data RAM.",
    "7.2.2 TBLPTR - TABLE POINTER REGISTER\nThe Table Pointer register (TBLPTR) addresses a byte within  the  program  memory.  It  is  comprised  of  three SFR registers: Table Pointer Upper Byte, Table Pointer High Byte and Table Pointer Low Byte (TBLPTRU:TBLPTRH:TBLPTRL).  Only  the  lower  six bits of TBLPTRU are used with TBLPTRH and TBLPTRL to form a 22-bit wide pointer.\nThe contents of TBLPTR indicate a location in program memory space. The low-order 21 bits allow the device to address the full 2 Mbytes of program memory space. The 22nd bit allows access to the configuration space, including  the  device  ID,  user  ID  locations  and  the Configuration bits.\nThe TBLPTR register set is updated when executing a TBLRD or TBLWT operation in one of four ways, based on the instruction's arguments. These are detailed in Table 7-1. These operations on the TBLPTR only affect the low-order 21 bits.\nWhen a TBLRD or TBLWT is executed, all 22 bits of the TBLPTR  determine  which  address  in  the  program memory space is to be read or written to.",
    "TABLE POINTER OPERATIONS WITH TBLRD AND TBLWT INSTRUCTIONS\nTBLRD* TBLWT*, Operation on Table Pointer = TBLPTR is not modified. TBLRD*+ TBLWT*+, Operation on Table Pointer = TBLPTR is incremented after the read/write. TBLRD*- TBLWT*-, Operation on Table Pointer = TBLPTR is decremented after the read/write. TBLRD+* TBLWT+*, Operation on Table Pointer = TBLPTR is incremented before the read/write",
    "7.3 Reading the Flash Program Memory\nThe TBLRD instruction is used to retrieve data from the program memory space and places it into data RAM. Table reads from program memory are performed one byte at a time.\nTBLPTR points to a byte address in program space. Executing TBLRD places  the  byte  pointed  to  into TABLAT.\nThe internal program memory is typically organized by words. The Least Significant bit of the address selects between the high and low bytes of the word. Figure 7-2 shows  the  interface  between  the  internal  program memory and the TABLAT.\nA typical method for reading data from program memory is shown in Example 7-1.",
    "EXAMPLE 7-1: READING A FLASH PROGRAM MEMORY WORD\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. , 3 = ; Load TBLPTR with the base ; address of the word. READ_WORD, 1 = . READ_WORD, 2 = . READ_WORD, 3 = . , 1 = TBLRD*+ MOVF MOVWF TBLRD*+ MOVF MOVF. , 2 = TABLAT, W WORD_EVEN TABLAT, W WORD_ODD. , 3 = ; read into TABLAT and increment ; get data ; read into TABLAT and increment. , 1 = . , 2 = . , 3 = ; get data",
    "7.4 Writing to Program Memory Space (PIC18F8310/8410 only)\nThe table write operation outputs the contents of the TBLPTR and TABLAT registers to the external address and  data  busses  of  the  external  memory  interface. Depending on the program memory mode selected, the operation may target any byte address in the device's memory space.  What  happens  to  this  data  depends largely on the external memory device being used.\nFor  PIC18  devices  with  Enhanced  Flash  memory,  a single  algorithm  is  used  for  writing  to  the  on-chip program array. In the case of external devices, however, the  algorithm  is  determined  by  the  type  of  memory device and its requirements. In some cases, a specific instruction sequence must be sent before data can be written  or  erased.  Address  and  data  demultiplexing, chip select operation and write time requirements must all be considered in creating the appropriate code.\nThe connection of the data and address busses to the memory  device  are  dictated  by  the  interface  being used, the data bus width and the target device. When using a 16-bit data path, the algorithm must take into account the width of the target memory.",
    "7.4 Writing to Program Memory Space (PIC18F8310/8410 only)\nAnother  important  consideration  is the write time requirement of the target device. If this is longer than the time that a TBLWT operation makes data available on  the  interface,  the  algorithm  must  be  adjusted  to lengthen this time. It may be possible, for example, to buy enough time by increasing the length of the wait state on table operations.\nIn  all  cases,  it  is  important  to  remember that instructions in the program memory space are word-aligned, with the Least Significant bit always being written to an even-numbered  address  (LSb  = 0 ).  If  data  is  being stored in the program memory space, word alignment of the data is not required.\nA complete overview of interface algorithms is beyond the scope of this data sheet. The best place for timing and  instruction  sequence  requirements  is  the  data sheet of the memory device in question. For additional information on algorithm design for the external memory interface, refer to Microchip application note AN869, 'External Memory Interfacing  Techniques for the PIC18F8XXX' (DS00869).",
    "7.4.1 WRITE VERIFY\nDepending  on  the  application,  good  programming practice  may  dictate  that  the  value  written  to  the memory should be verified against the original value. This should be used in applications where excessive writes can stress bits near the specification limit.",
    "7.4.2 UNEXPECTED TERMINATION OF WRITE OPERATION\nIf a write is terminated by an unplanned event, such as loss  of  power  or  an  unexpected  Reset,  the  memory location just programmed should be verified and reprogrammed if needed. If the application writes to external memory on a frequent basis, it may be necessary to implement  an  error  trapping  routine  to  handle  these unplanned events.",
    "7.5 Erasing External Memory (PIC18F8310/8410 only)\nErasure  is  implemented  in  different  ways  on  different devices. In many cases, it is possible to erase all or part of the memory by issuing a specific command. In some devices, it may be necessary to write ' 0 's to the locations to be  erased.  For  specific  information,  consult  the external memory device's data sheet for clarification.",
    "7.6 Writing and Erasing On-Chip Program Memory (ICSP Mode)\nWhile  the  on-chip  program  memory  is  read-only  in normal operating mode, it can be written to and erased as a function of In-Circuit Serial Programming (ICSP). In this mode, the TBLWT operation is used in all devices to write to blocks of 64 bytes (32 words) at one time. Write blocks  are  boundary-aligned  with  the  code  protection blocks.  Special  commands  are  used  to  erase  one  or more code blocks of the program memory, or the entire device.\nThe TBLWT operation  on  write  blocks  is  somewhat different than the word write operations for PIC18F8310/8410  devices  described  here.  A  more complete  description of block write operations is provided  in  the  Microchip  document 'Programming Specifications  for PIC18FX410/X490  Flash  MCUs' (DS39624).",
    "7.7 Flash Program Operation During Code Protection\nSee Section 24.5 'Program Verification and Code Protection' for  details  on  code  protection  of  Flash program memory.",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH FLASH PROGRAM MEMORY\nTBLPTRU, Bit 7 = -. TBLPTRU, Bit 6 = -. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Reset Values on Page = 63. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>).",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH FLASH PROGRAM MEMORY\nTBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Reset Values on Page = 63. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 =",
    "TABLE 7-2: REGISTERS ASSOCIATED WITH FLASH PROGRAM MEMORY\nProgram Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Reset Values on Page = 63. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Reset Values on Page = 63\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used during Flash/EEPROM access.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "8.0 EXTERNAL MEMORY INTERFACE\nNote:\nThe  external  memory  interface  is  not implemented on PIC18F6310 and PIC18F6410 (64-pin) devices.\nThe  external  memory  interface  allows  the  device  to access  external  memory  devices  (such  as  Flash, EPROM, SRAM, etc.) as program or data memory. It is implemented with 28 pins, multiplexed across four I/O ports. Three ports (PORTD, PORTE and PORTH) are multiplexed with the address/data bus for a total of 20 available  lines,  while  PORTJ  is  multiplexed  with  the bus control signals. A list of the pins and their functions is provided in Table 8-1.\nAs  implemented  here,  the  interface  is  similar  to  that introduced on PIC18F8X20 microcontrollers. The most notable difference is that the interface on PIC18F8310/8410  devices  supports  both  16-Bit  and Multiplexed 8-Bit Data Width modes; it does not support  the  8-Bit  Demultiplexed  mode.  The  Bus  Width mode  is  set  by  the  BW  Configuration  bit  when  the device  is  programmed  and  cannot  be  changed  in software.",
    "8.0 EXTERNAL MEMORY INTERFACE\nThe  operation  of  the  interface  is  controlled  by  the MEMCON register (Register 8-1). Clearing the EBDIS bit (MEMCON<7>) enables the interface and disables the I/O functions of the ports, as well as any other multiplexed functions. Setting the bit disables the interface and enables the ports.\nFor  a  more  complete  discussion  of  the  operating modes that use the external memory interface, refer to Section 8.1 'Program  Memory  Modes  and  the External Memory Interface' .",
    "REGISTER 8-1: MEMCON: MEMORY CONTROL REGISTER\nEBDIS, U-0 = -. EBDIS, R/W-0 = WAIT1. EBDIS, R/W-0 = WAIT0. EBDIS, U-0 = -. EBDIS, U-0 = -. EBDIS, R/W-0 = WM1. EBDIS, R/W-0 = WM0. bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = bit 0",
    "REGISTER 8-1: MEMCON: MEMORY CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EBDIS : External Bus Disable bit\n1 = External system bus disabled, all external bus drivers are mapped as I/O ports\n0 = External system bus enabled, I/O ports are disabled\nbit 6\nUnimplemented: Read as ' 0 '\nbit 5-4\nWAIT<1:0>: Table Reads and Writes Bus Cycle Wait Count bits\n11 = Table reads and writes will wait 0 TCY\n10 = Table reads and writes will wait 1 TCY\n01 = Table reads and writes will wait 2 TCY\n00 = Table reads and writes will wait 3 TCY\nbit 3-2\nUnimplemented: Read as ' 0 '\nbit 1-0\nWM<1:0>: TBLWRT Operation with 16-Bit Bus Width bits\n1x = Word Write mode: TABLAT0 and TABLAT1 word output; WRH active when TABLAT1 is written\n01 = Byte Select mode: TABLAT data copied on both MSB and LSB; WRH and (UB or LB) will activate\n00 = Byte Write mode: TABLAT data copied on both MSB and LSB; WRH or WRL will activate",
    "bit 7 EBDIS : External Bus Disable bit\nNote 1: If SBOREN is enabled, its Reset state is ' 1 '; otherwise, it is ' 0 '.",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\n\nNote 1: Alternate assignment for CCP2 when CCP2MX Configuration bit is cleared (all devices in Microcontroller mode).",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\nRD0/AD0/PSP0, Port = PORTD. RD0/AD0/PSP0, Bit = 0. RD0/AD0/PSP0, Function = Input/Output or System Bus Address bit 0 or Data bit 0 or Parallel Slave Port bit 0. RD1/AD1/PSP1, Port = PORTD. RD1/AD1/PSP1, Bit = 1. RD1/AD1/PSP1, Function = Input/Output or System Bus Address bit 1 or Data bit 1 or Parallel Slave Port bit 1. RD2/AD2/PSP2, Port = PORTD. RD2/AD2/PSP2, Bit = 2. RD2/AD2/PSP2, Function = Input/Output or System Bus Address bit 2 or Data bit 2 or Parallel Slave Port bit 2. RD3/AD3/PSP3, Port = PORTD. RD3/AD3/PSP3, Bit = 3. RD3/AD3/PSP3, Function = Input/Output or System Bus Address bit 3 or",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\nData bit 3 or Parallel Slave Port bit 3. RD4/AD4/PSP4, Port = PORTD. RD4/AD4/PSP4, Bit = 4. RD4/AD4/PSP4, Function = Input/Output or System Bus Address bit 4 or Data bit 4 or Parallel Slave Port bit 4. RD5/AD5/PSP5, Port = PORTD. RD5/AD5/PSP5, Bit = 5. RD5/AD5/PSP5, Function = Input/Output or System Bus Address bit 5 or Data bit 5 or Parallel Slave Port bit 5. RD6/AD6/PSP6, Port = PORTD. RD6/AD6/PSP6, Bit = 6. RD6/AD6/PSP6, Function = Input/Output or System Bus Address bit 6 or Data bit 6 or Parallel Slave Port bit 6. RD7/AD7/PSP7, Port = PORTD. RD7/AD7/PSP7, Bit = 7. RD7/AD7/PSP7, Function =",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\nInput/Output or System Bus Address bit 7 or Data bit 7 or Parallel Slave Port bit 7. RE0/AD8/RD, Port = PORTE. RE0/AD8/RD, Bit = 0. RE0/AD8/RD, Function = Input/Output or System Bus Address bit 8 or Data bit 8 or Parallel Slave Port Read Control pin. RE1/AD9/WR, Port = PORTE. RE1/AD9/WR, Bit = 1. RE1/AD9/WR, Function = Input/Output or System Bus Address bit 9 or Data bit 9 or Parallel Slave Port Write Control pin. RE2/AD10/CS, Port = PORTE. RE2/AD10/CS, Bit = 2. RE2/AD10/CS, Function = Input/Output or System Bus Address bit 10 or Data bit 10 or Parallel Slave Port Chip Select pin. RE3/AD11, Port = PORTE. RE3/AD11, Bit = 3. RE3/AD11, Function = Input/Output or System Bus Address bit 11 or Data bit 11. RE4/AD12, Port",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\n= PORTE. RE4/AD12, Bit = 4. RE4/AD12, Function = Input/Output or System Bus Address bit 12 or Data bit 12. RE5/AD13, Port = PORTE. RE5/AD13, Bit = 5. RE5/AD13, Function = Input/Output or System Bus Address bit 13 or Data bit 13. RE6/AD14, Port = PORTE. RE6/AD14, Bit = 6. RE6/AD14, Function = Input/Output or System Bus Address bit 14 or Data bit 14. RE7/CCP2 (1) /AD15, Port = PORTE. RE7/CCP2 (1) /AD15, Bit = 7. RE7/CCP2 (1) /AD15, Function = Input/Output or Capture 2 Input/Compare 2 Output/PWM 2 Output pin or System Bus Address bit 15 or Data bit 15. RH0/AD16, Port = PORTH. RH0/AD16, Bit = 0. RH0/AD16, Function = Input/Output or System",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\nBus Address bit 16. RH1/AD17, Port = PORTH. RH1/AD17, Bit = 1. RH1/AD17, Function = Input/Output or System Bus Address bit 17. RH2/AD18, Port = PORTH. RH2/AD18, Bit = 2. RH2/AD18, Function = Input/Output or System Bus Address bit 18. RH3/AD19, Port = PORTH. RH3/AD19, Bit = 3. RH3/AD19, Function = Input/Output or System Bus Address bit 19. RJ0/ALE, Port = PORTJ. RJ0/ALE, Bit = 0. RJ0/ALE, Function = Input/Output or System Bus Address Latch Enable (ALE) Control pin. RJ1/OE, Port = PORTJ. RJ1/OE, Bit = 1. RJ1/OE, Function = Input/Output or System Bus Output Enable (OE) Control pin. RJ2/WRL, Port = PORTJ.",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\nRJ2/WRL, Bit = 2. RJ2/WRL, Function = Input/Output or System Bus Write Low (WRL) Control pin. RJ3/WRH, Port = PORTJ. RJ3/WRH, Bit = 3. RJ3/WRH, Function = Input/Output or System Bus Write High (WRH) Control pin. RJ4/BA0, Port = PORTJ. RJ4/BA0, Bit = 4. RJ4/BA0, Function = Input/Output or System Bus Byte Address bit 0. RJ5/CE, Port = PORTJ. RJ5/CE, Bit = 5. RJ5/CE, Function = Input/Output or System Bus Chip Enable (CE) Control pin. RJ6/LB, Port = PORTJ. RJ6/LB, Bit = 6. RJ6/LB, Function = Input/Output or System Bus Lower Byte Enable (LB) Control pin. RJ7/UB, Port = PORTJ. RJ7/UB, Bit =",
    "TABLE 8-1: PIC18F8310/8410 EXTERNAL BUS - I/O PORT FUNCTIONS\n7. RJ7/UB, Function = Input/Output or System Bus Upper Byte Enable (UB) Control pin",
    "8.1 Program Memory Modes and the External Memory Interface\nAs  previously  noted,  PIC18F8310/8410  devices  are capable of operating in any one of four program memory modes, using combinations of on-chip and external program memory. The functions of the multiplexed port pins depends on the program memory mode selected, as well as the setting of the EBDIS bit.\nIn Microcontroller mode, the bus is not active and the pins  have  their  port  functions  only.  Writes  to  the MEMCOM register are not permitted.",
    "8.1 Program Memory Modes and the External Memory Interface\nIn Microprocessor  with  Boot  Block or Extended Microcontroller mode, the external program memory bus shares I/O port functions on the pins. When the device  is  fetching or doing  table read/table  write operations on the external program memory space, the pins will have the external bus function. If the device is fetching and  accessing internal program  memory locations  only,  the  EBDIS  control  bit  will  change  the pins from external memory to I/O port functions. When EBDIS = 0 , the pins function as the external bus. When EBDIS = 1 , the pins function as I/O ports.\nIn Microprocessor mode , the external bus is always active  and  the  port  pins  have  only  the  external  bus function.\nIf the device fetches or accesses external memory while EBDIS = 1 ,  the  pins  will  switch  to  external  bus.  If  the EBDIS bit is set by a program executing from external memory, the action of setting the bit will be delayed until the program branches into the internal memory. At that time, the pins will change from external bus to I/O ports.",
    "PIC18F6310/6410/8310/8410\nWhen the  device  is  executing  out  of  internal  memory (EBDIS = 0) in Microprocessor with Boot Block mode or Extended Microcontroller mode, the control signals will NOT  be  active.  They  will  go  to  a  state  where  the AD<15:0> and A<19:16> are tri-state; the CE, OE, WRH, WRL, UB and LB signals are ' 1 '; ALE and BA0 are ' 0 '. Note that only those pins associated with the current address width are forced to tri-state; the other pins continue to function as I/O. In the case of a 16-bit address width, for example,  only  AD<15:0>  (PORTD  and PORTE) are affected; A<19:16> (PORTH<3:0>) continue to function as I/O. In all external memory modes, the bus takes priority over any other peripherals that may share pins with it. This includes the Parallel Slave Port and serial communications modules which would otherwise take priorityover the I/O port.",
    "8.2 16-Bit Mode\nIn 16-bit mode, the external memory interface can be connected  to  external  memories  in  three  different configurations:\n\u00b7 16-Bit Byte Write\n\u00b7 16-Bit Word Write\n\u00b7 16-Bit Byte Select\nThe  configuration  to  be  used  is  determined  by  the WM<1:0> bits in the MEMCON register (MEMCON<1:0>). These three different configurations allow  the  designer  maximum  flexibility  in  using  both 8-bit and 16-bit devices with 16-bit data.\nFor all 16-bit modes, the Address Latch Enable (ALE) pin indicates that the address bits, A<15:0>, are available on the external memory interface bus. Following the address latch, the Output Enable signal (OE) will enable both bytes of program memory at once to form a 16-bit instruction word. The Chip Enable signal (CE) is active at  any time  that the microcontroller accesses external memory,  whether  reading  or  writing; it is inactive (asserted high) whenever the device is in Sleep mode.",
    "8.2 16-Bit Mode\nIn Byte Select mode, JEDEC standard Flash memories will require BA0 for the byte address line and one I/O line to select between Byte and Word mode. The other 16-bit modes do not need BA0. JEDEC standard static RAM memories will use the UB or LB signals for byte selection.",
    "8.2.1 16-BIT BYTE WRITE MODE\nFigure 8-1  shows  an  example  of  16-Bit  Byte  Write mode  for  PIC18F8310/8410  devices.  This  mode  is used  for  two  separate  8-bit  memories  connected  for 16-bit operation. This generally includes basic EPROM and Flash devices. It allows table writes to byte-wide external memories.\nDuring a TBLWT instruction cycle, the TABLAT data is presented  on  the  upper  and  lower  bytes  of the AD<15:0> bus. The appropriate WRH or WRL control line is strobed on the LSb of the TBLPTR.",
    "FIGURE 8-1: 16-BIT BYTE WRITE MODE EXAMPLE\nNote 1: This signal only applies to table writes. See Section 7.1 'Table Reads and Table Writes' .",
    "8.2.2 16-BIT WORD WRITE MODE\nFigure 8-2  shows  an  example  of  16-Bit  Word  Write mode for PIC18F8410 devices. This mode is used for word-wide  memories,  which  includes  some  of  the EPROM and Flash type memories. This mode allows opcode fetches and table reads from all forms of 16-bit memory  and  table  writes  to  any  type  of  word-wide external  memories.  This  method  makes  a  distinction between TBLWT cycles to even or odd addresses.\nDuring a TBLWT cycle to an odd address (TBLPTR<0> = 1 ),  the  TABLAT data is presented on the upper byte of the AD<15:0> bus. The contents of the holding latch are presented on the lower byte of the AD<15:0> bus.\nDuring a TBLWT cycle to an even address (TBLPTR<0> = 0 ), the TABLAT data is transferred to a holding  latch  and  the  external  address  data  bus  is tri-stated for the data portion of the bus cycle. No write signals are activated.",
    "8.2.2 16-BIT WORD WRITE MODE\nThe WRH signal is strobed for each write cycle; the WRL pin is unused. The signal on the BA0 pin indicates the LSb of TBLPTR, but it is left unconnected. Instead, the UB and LB signals are active to select both bytes. The obvious limitation to this method is that the table write must be done in pairs on a specific word boundary to correctly write a word location.",
    "8.2.3 16-BIT BYTE SELECT MODE\nFigure 8-3  shows  an  example  of  16-Bit  Byte  Select mode.  This  mode  allows  table  write  operations  to word-wide external memories  with byte selection capability. This  generally  includes both  word-wide Flash and SRAM devices.\nDuring a TBLWT cycle, the TABLAT data is presented on the upper and lower byte of the AD<15:0> bus. The WRH signal is strobed for each write cycle; the WRL pin is not used. The BA0 or UB/LB signals are used to select  the  byte  to  be  written,  based  on  the  Least Significant bit of the TBLPTR register.\nFlash and SRAM devices use different control signal combinations to implement Byte Select mode. JEDEC standard Flash memories require that a controller I/O port pin be connected to the memory's BYTE/WORD pin to provide the select signal. They also use the BA0 signal from the controller as a byte address. JEDEC standard static RAM memories, on the other hand, use the UB or LB signals to select the byte.",
    "8.2.4 16-BIT MODE TIMING\nThe  presentation  of  control  signals  on  the  external memory  bus  is  different  for  the  various  operating modes.  Typical  signal  timing  diagrams  are  shown  in Figure 8-4 through Figure 8-6.",
    "8.3 8-Bit Mode\nThe external memory interface implemented in PIC18F8410 devices operates only in 8-Bit Multiplexed mode; data shares the 8 Least Significant bits of the address bus.\nFigure 8-1  shows  an  example  of  8-Bit  Multiplexed mode for PIC18F8410 devices. This mode is used for a single 8-bit memory connected for 16-bit operation. The instructions will be fetched as two 8-bit bytes on a shared data/address bus. The two bytes are sequentially fetched within one instruction cycle (TCY). Therefore, the designer must choose external memory devices  according  to  timing  calculations  based  on 1/2 TCY (2 times the instruction rate). For proper memory speed selection, glue logic propagation delay times must be considered along with setup and hold times.",
    "8.3 8-Bit Mode\nThe Address Latch Enable (ALE) pin indicates that the address  bits,  A<15:0>,  are  available  on  the  external memory interface bus. The Output Enable signal (OE) will enable one byte of program memory for a portion of the  instruction  cycle,  then  BA0  will  change  and  the second byte will be enabled to form the 16-bit instruction word. The Least Significant bit of the address, BA0, must  be  connected  to  the  memory  devices  in  this mode. The Chip Enable signal (CE) is  active at any time that the microcontroller accesses external memory,  whether  reading  or  writing;  it  is  inactive (asserted high) whenever the device is in Sleep mode.\nThis generally includes basic EPROM and Flash devices. It allows table writes to byte-wide external memories.\nDuring a TBLWT instruction cycle, the TABLAT data is presented  on  the  upper  and  lower  bytes  of the AD<15:0> bus. The appropriate level of the BA0 control line is strobed on the LSb of the TBLPTR.\nFIGURE 8-7: 8-BIT MULTIPLEXED MODE EXAMPLE",
    "8.3.1 8-BIT MODE TIMING\nThe  presentation  of  control  signals  on  the  external memory  bus  is  different  for  the  various  operating modes.  Typical  signal  timing  diagrams  are  shown  in Figure 8-4 through Figure 8-6.",
    "FIGURE 8-8: EXTERNAL MEMORY BUS TIMING FOR TBLRD (MICROPROCESSOR MODE)\nFIGURE 8-9: EXTERNAL MEMORY BUS TIMING FOR TBLRD (EXTENDED MICROCONTROLLER MODE)",
    "8.4 Operation in Power-Managed Modes\nIn alternate, power-managed Run modes, the external bus  continues  to  operate  normally.  If  a  clock  source with a lower speed is selected, bus operations will run at that speed. In these cases, excessive access times for the external memory may result if wait states have been enabled and added to external memory operations.\nIf  operations  in  a  lower  power  Run  mode  are  anticipated,  users  should  provide  in  their  applications  for adjusting  memory  access  times  at  the  lower  clock speeds.\nIn Sleep and Idle modes, the microcontroller core does not  need  to  access  data;  bus  operations  are  suspended. The state of the external bus is frozen with the address/data pins and most of the control pins holding at  the  same  state  they  were  in  when  the  mode  was invoked.  The  only  potential  changes  are  the  CE,  LB and UB pins which are held at logic high.",
    "TABLE 8-2: REGISTERS ASSOCIATED WITH THE EXTERNAL MEMORY INTERFACE\nMEMCON, Bit 7 = EBDIS. MEMCON, Bit 6 = -. MEMCON, Bit 5 = WAIT1. MEMCON, Bit 4 = WAIT0. MEMCON, Bit 3 = -. MEMCON, Bit 2 = -. MEMCON, Bit 1 = WM1. MEMCON, Bit 0 = WM0. MEMCON, Reset Values on Page = 65. CONFIG3L, Bit 7 = WAIT. CONFIG3L, Bit 6 = BW. CONFIG3L, Bit 5 = -. CONFIG3L, Bit 4 = -. CONFIG3L, Bit 3 = -. CONFIG3L, Bit 2 = -. CONFIG3L, Bit 1 = PM1. CONFIG3L, Bit 0 = PM0. CONFIG3L, Reset Values on Page = 285. CONFIG3H, Bit 7 = MCLRE. CONFIG3H, Bit 6 = -. CONFIG3H, Bit 5 = -. CONFIG3H, Bit 4 = -.",
    "TABLE 8-2: REGISTERS ASSOCIATED WITH THE EXTERNAL MEMORY INTERFACE\nCONFIG3H, Bit 3 = -. CONFIG3H, Bit 2 = LPT1OSC. CONFIG3H, Bit 1 = -. CONFIG3H, Bit 0 = CCP2MX. CONFIG3H, Reset Values on Page = 286\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for the external memory interface.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "EXAMPLE 9-1:\n8 x 8 UNSIGNED MULTIPLY ROUTINE",
    "9.1 Introduction\nAll PIC18 devices include an 8 x 8 hardware multiplier as part of the ALU. The multiplier performs an unsigned operation and yields a 16-bit result that is stored in the product register pair PRODH:PRODL. The multiplier's operation  does  not  affect  any  flags  in  the  STATUS register.\nMaking multiplication a hardware operation allows it to be completed in a single instruction cycle. This has the advantages  of  higher  computational  throughput  and reduced  code  size  for  multiplication  algorithms  and allows the PIC18 devices to be used in many applications previously reserved for digital signal processors. A comparison  of various hardware  and  software multiply operations, along with the savings in memory and execution time, is shown in Table 9-1.",
    "9.2 Operation\nExample 9-1  shows  the  instruction  sequence  for  an 8 x 8  unsigned  multiplication.  Only  one  instruction  is required when one of the arguments is already loaded in the WREG register.\nExample 9-2 shows the sequence to do an 8 x 8 signed multiplication.  To  account  for  the  sign  bits  of  the arguments, each argument's Most Significant bit (MSb) is tested and the appropriate subtractions are done.\n\nTABLE 9-1: PERFORMANCE COMPARISON FOR VARIOUS MULTIPLY OPERATIONS",
    "9.2 Operation\n8 x 8 Unsigned, Multiply Method = Without Hardware Multiply. 8 x 8 Unsigned, Program Memory (Words). = 13. 8 x 8 Unsigned, Cycles (Max). = 69. 8 x 8 Unsigned, Time.@40 MHz = 6.9 \uf06d s. 8 x 8 Unsigned, Time.@10 MHz = 27.6 \uf06d s. 8 x 8 Unsigned, Time.@4MHz = 69 \uf06d s. 8 x 8 Unsigned, Multiply Method = Hardware Multiply. 8 x 8 Unsigned, Program Memory (Words). = 1. 8 x 8 Unsigned, Cycles (Max). = 1. 8 x 8 Unsigned, Time.@40 MHz = 100 ns. 8 x 8 Unsigned, Time.@10 MHz = 400 ns. 8 x 8 Unsigned, Time.@4MHz = 1 \uf06d s. 8 x 8 Signed, Multiply Method = Without Hardware Multiply. 8 x 8 Signed, Program Memory (Words). = 33. 8 x 8 Signed, Cycles (Max). = 91. 8 x 8 Signed, Time.@40 MHz = 9.1 \uf06d s. 8 x 8 Signed, Time.@10 MHz = 36.4 \uf06d s. 8 x 8 Signed,",
    "9.2 Operation\nTime.@4MHz = 91 \uf06d s. 8 x 8 Signed, Multiply Method = Hardware Multiply. 8 x 8 Signed, Program Memory (Words). = 6. 8 x 8 Signed, Cycles (Max). = 6. 8 x 8 Signed, Time.@40 MHz = 600 ns. 8 x 8 Signed, Time.@10 MHz = 2.4 \uf06d s. 8 x 8 Signed, Time.@4MHz = 6 \uf06d s. 16 x 16 Unsigned, Multiply Method = Without Hardware Multiply. 16 x 16 Unsigned, Program Memory (Words). = 21. 16 x 16 Unsigned, Cycles (Max). = 242. 16 x 16 Unsigned, Time.@40 MHz = 24.2 \uf06d s. 16 x 16 Unsigned, Time.@10 MHz = 96.8 \uf06d s. 16 x 16 Unsigned, Time.@4MHz = 242 \uf06d s. 16 x 16 Unsigned, Multiply Method = Hardware Multiply. 16 x 16 Unsigned, Program Memory (Words). = 28. 16 x 16 Unsigned, Cycles (Max). = 28. 16 x 16 Unsigned, Time.@40 MHz = 2.8 \uf06d s. 16 x 16 Unsigned, Time.@10 MHz",
    "9.2 Operation\n= 11.2 \uf06d s. 16 x 16 Unsigned, Time.@4MHz = 28 \uf06d s. 16 x 16 Signed, Multiply Method = Without Hardware Multiply. 16 x 16 Signed, Program Memory (Words). = 52. 16 x 16 Signed, Cycles (Max). = 254. 16 x 16 Signed, Time.@40 MHz = 25.4 \uf06d s. 16 x 16 Signed, Time.@10 MHz = 102.6 \uf06d s. 16 x 16 Signed, Time.@4MHz = 254 \uf06d s. 16 x 16 Signed, Multiply Method = Hardware Multiply. 16 x 16 Signed, Program Memory (Words). = 35. 16 x 16 Signed, Cycles (Max). = 40. 16 x 16 Signed, Time.@40 MHz = 4.0 \uf06d s. 16 x 16 Signed, Time.@10 MHz = 16.0 \uf06d s. 16 x 16 Signed, Time.@4MHz = 40 \uf06d s\nMOVF\nARG1, W\n;\nMULWF\nARG2\n; ARG1 * ARG2 ->\n; PRODH:PRODL",
    "8 x 8 SIGNED MULTIPLY ROUTINE\nMOVF MULWF, 1 = ARG1, W ARG2. MOVF MULWF, 2 = ; ARG1 * ARG2 ->. BTFSC SUBWF, 1 = ARG2, SB PRODH, F. BTFSC SUBWF, 2 = ; PRODH:PRODL ; Test Sign Bit ; PRODH = PRODH. MOVF BTFSC, 1 = ARG2, W ARG1,. MOVF BTFSC, 2 = ; - ARG1. SUBWF, 1 = SB PRODH, F. SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH",
    "PIC18F6310/6410/8310/8410\nExample 9-3  shows  the  sequence  to  do  a  16  x  16 unsigned multiplication. Equation 9-1 shows the algorithm that is used. The 32-bit result is stored in four registers (RES3:RES0).\nEQUATION 9-2:\n16 x 16 SIGNED MULTIPLICATION ALGORITHM",
    "EQUATION 9-1:\n16 x 16 UNSIGNED MULTIPLICATION ALGORITHM\nRES3:RES0\n=\nARG1H:ARG1L   ARG2H:ARG2L \uf0b7\n=\n(ARG1H   ARG2H   2 16 ) + \uf0b7 \uf0b7\n(ARG1H   ARG2L   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2H   2 8 ) + \uf0b7 \uf0b7\n(ARG1L    ARG2L) \uf0b7",
    "EXAMPLE 9-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L, ARG2L. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = . MULWF, 2 = . MULWF, 3 = . MULWF, 4 = ; ARG1L * ARG2L-> ; PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES1. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES0. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2H-> PRODH:PRODL.",
    "EXAMPLE 9-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2H-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W.",
    "EXAMPLE 9-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2L-> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,.",
    "EXAMPLE 9-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = \nExample 9-4  shows  the  sequence  to  do  a  16  x  16 signed  multiply.  Equation 9-2  shows  the  algorithm used.  The  32-bit  result  is  stored  in  four  registers (RES3:RES0).  To  account  for  the  sign  bits  of  the arguments, the MSb for each argument pair is tested and the appropriate subtractions are done.",
    "EXAMPLE 9-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nRES3:RES0= ARG1H:ARG1L   ARG2H:ARG2L \uf0b7\n= (ARG1H   ARG2H   2 16 ) + \uf0b7 \uf0b7\n(ARG1H   ARG2L   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2H   2 8 ) + \uf0b7 \uf0b7\n(ARG1L   ARG2L) + \uf0b7\n(-1 \uf0b7 ARG2H<7>   ARG1H:ARG1L   2 16 ) + \uf0b7 \uf0b7\n(-1 \uf0b7 ARG1H<7>   ARG2H:ARG2L   2 16 ) \uf0b7 \uf0b7",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nMULWF, ARG1L, = ARG2L. MULWF, W = . MULWF,  = ; ;. MULWF,  = ARG1L * ARG2L -> PRODH:PRODL. MULWF,  = . MULWF,  = . MULWF,  = . MULWF,  = . MOVFF, ARG1L, = PRODH,. MOVFF, W = RES1. MOVFF,  = ;. MOVFF,  = . MOVFF,  = . MOVFF,  = . MOVFF,  = . MOVFF,  = . MOVFF, ARG1L, = PRODL,. MOVFF, W = RES0. MOVFF,  = ;. MOVFF,  = . MOVFF,  = . MOVFF,  = . MOVFF,  = . MOVFF,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVF MULWF, ARG1L, = ARG1H, ARG2H. MOVF MULWF, W = W. MOVF MULWF,  = ;. MOVF MULWF,  = ARG1H * ARG2H -> PRODH:PRODL. MOVF MULWF,  = . MOVF MULWF,  = . MOVF MULWF,  = . MOVF MULWF,  = . MOVFF MOVFF ; MOVF MULWF, ARG1L, = PRODH, PRODL,. MOVFF MOVFF ; MOVF MULWF, W = RES3. MOVFF MOVFF ; MOVF MULWF,  = ;. MOVFF MOVFF ; MOVF MULWF,  = ARG1L * ARG2H -> PRODH:PRODL. MOVFF MOVFF ; MOVF MULWF,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVFF MOVFF ; MOVF MULWF,  = . MOVFF MOVFF ; MOVF MULWF,  = . MOVFF MOVFF ; MOVF MULWF,  = . MOVF ADDWF MOVF ADDWFC CLRF ADDWFC, ARG1L, = ARG1L, ARG2H. MOVF ADDWF MOVF ADDWFC CLRF ADDWFC, W = RES2 W. MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,  = ; ; ;. MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,  = . MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,  = . MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,  = . MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,  = . MOVF ADDWF MOVF ADDWFC CLRF ADDWFC,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . , ARG1L, = PRODL, RES1, PRODH, RES2,. , W = W F W F. ,  = ; ; ;. ,  = . ,  = . ,  = . ,  = . ,  = . ; MOVF MULWF, ARG1L, = WREG RES3,. ; MOVF MULWF, W = F. ; MOVF MULWF,  = ; ; ;. ; MOVF MULWF,  = Add cross products. ; MOVF MULWF,  = . ; MOVF MULWF,  = . ; MOVF MULWF,  = . ; MOVF MULWF,  = . , ARG1L, = ARG1H, ARG2L. , W = . ,  = . ,  = ARG1H * ARG2L. ,  = . ,  = . ,  = . ,  = . , ARG1L, = . , W = W. ,  = ; ;. ,  = -> PRODH:PRODL. ,  = . ,  = . ,  = . ,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVF, ARG1L, = PRODL,. MOVF, W = W. MOVF,  = ; ;. MOVF,  = . MOVF,  = . MOVF,  = . MOVF,  = . MOVF,  = . , ARG1L, = . , W = F PRODH,. ,  = . ,  = Add cross products. ,  = . ,  = . ,  = . ,  = . ADDWF MOVF, ARG1L, = RES1,. ADDWF MOVF, W = . ADDWF MOVF,  = ; ;. ADDWF MOVF,  = . ADDWF MOVF,  = . ADDWF MOVF,  = . ADDWF MOVF,  = . ADDWF MOVF,  = . ADDWFC CLRF ADDWFC, ARG1L, = RES2, WREG. ADDWFC CLRF ADDWFC, W = W F. ADDWFC CLRF ADDWFC,  = ; ; ;. ADDWFC CLRF ADDWFC,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . ADDWFC CLRF ADDWFC,  = . ADDWFC CLRF ADDWFC,  = . ADDWFC CLRF ADDWFC,  = . ADDWFC CLRF ADDWFC,  = . ; BTFSS BRA MOVF, ARG1L, = RES3,. ; BTFSS BRA MOVF, W = F. ; BTFSS BRA MOVF,  = ; ;. ; BTFSS BRA MOVF,  = ARG2H:ARG2L neg? no, check ARG1. ; BTFSS BRA MOVF,  = . ; BTFSS BRA MOVF,  = . ; BTFSS BRA MOVF,  = . ; BTFSS BRA MOVF,  = . MOVF SUBWFB ; SIGN_ARG1 BTFSS, ARG1L, = ARG1H, RES3. MOVF SUBWFB ; SIGN_ARG1 BTFSS, W = W. MOVF SUBWFB ; SIGN_ARG1 BTFSS,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= ;. MOVF SUBWFB ; SIGN_ARG1 BTFSS,  = . MOVF SUBWFB ; SIGN_ARG1 BTFSS,  = . MOVF SUBWFB ; SIGN_ARG1 BTFSS,  = . MOVF SUBWFB ; SIGN_ARG1 BTFSS,  = . MOVF SUBWFB ; SIGN_ARG1 BTFSS,  = . BRA, ARG1L, = ARG1H, ARG2L,. BRA, W = W W. BRA,  = ; ;. BRA,  = ARG1H:ARG1L neg? no, done. BRA,  = . BRA,  = . BRA,  = . BRA,  = . MOVF SUBWF MOVF SUBWFB, ARG1L, = RES2 ARG2H, RES3. MOVF SUBWF MOVF SUBWFB, W = . MOVF SUBWF MOVF SUBWFB,  = . MOVF SUBWF MOVF SUBWFB,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVF SUBWF MOVF SUBWFB,  = . MOVF SUBWF MOVF SUBWFB,  = . MOVF SUBWF MOVF SUBWFB,  = . MOVF SUBWF MOVF SUBWFB,  = . , ARG1L, = CONT_CODE. , W = 7. ,  = . ,  = . ,  = . ,  = . ,  = . ,  = . , ARG1L, = . , W = . ,  = ;. ,  = . ,  = . ,  = . ,  = . ,  = . CONT_CODE, ARG1L, = . CONT_CODE, W = . CONT_CODE,  = . CONT_CODE,  = . CONT_CODE,  = . CONT_CODE,  = . CONT_CODE,  = . CONT_CODE,  = . ;, ARG1L, = . ;, W = . ;,  = . ;,  = . ;,  = . ;,  = . ;,  = . ;,  = . , ARG1L, = . , W = . ,",
    "EXAMPLE 9-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= ;. ,  = . ,  = . ,  = . ,  = . ,  = . SUBWF, ARG1L, = RES2. SUBWF, W = . SUBWF,  = . SUBWF,  = . SUBWF,  = W. SUBWF,  = ARG1L,. SUBWF,  = SIGN_ARG1. SUBWF,  = ;. , ARG1L, = . , W = 7. ,  = ;. ,  = . ,  = . ,  = . ,  = . ,  = . , ARG1L, = . , W = . ,  = ;. ,  = . ,  = . ,  = . ,  = . ,  = . , ARG1L, = ARG2H,. , W = . ,  = . ,  = . ,  = . ,  = . ,  = . ,  = ",
    "10.0 INTERRUPTS\nThe PIC18F6310/6410/8310/8410 devices have multiple  interrupt  sources  and  an  interrupt  priority feature that allows most  interrupt sources  to be assigned a high-priority level or a low-priority level. The high-priority interrupt vector is at 0008h and the lowpriority interrupt vector is at 0018h. High-priority interrupt events will interrupt any low-priority interrupts that may be in progress.\nWhen  the  IPEN  bit  is  cleared  (default  state),  the interrupt priority feature is disabled and interrupts are compatible with PIC \u00ae mid-range devices. In Compatibility mode, the interrupt priority bits for each source  have  no  effect.  INTCON<6>  is  the  PEIE  bit, which enables/disables all peripheral interrupt sources. INTCON<7> is the GIE bit, which enables/disables all interrupt  sources.  All  interrupts  branch  to  address 0008h in Compatibility mode.\nThere  are  ten  registers  which  are  used  to  control interrupt operation. These registers are:",
    "10.0 INTERRUPTS\n\u00b7 RCON\n\u00b7 INTCON\n\u00b7 INTCON2\n\u00b7 INTCON3\n\u00b7 PIR1, PIR2, PIR3\n\u00b7 PIE1, PIE2, PIE3\n\u00b7 IPR1, IPR2, IPR3\nIt is recommended that the Microchip header files supplied  with  MPLAB \u00ae   IDE  be  used  for  the  symbolic  bit names in these registers. This allows the assembler/ compiler to automatically take care of the placement of these bits within the specified register.\nIn general, interrupt sources have three bits to control their operation. They are:\n\u00b7 Flag bit to indicate that an interrupt event occurred\n\u00b7 Enable bit that allows program execution to branch to the interrupt vector address when the flag bit is set\n\u00b7 Priority bit to select high priority or low priority",
    "10.0 INTERRUPTS\nThe interrupt priority feature is enabled by setting the IPEN bit (RCON<7>). When  interrupt priority is enabled,  there  are  two  bits  which  enable  interrupts globally. Setting the GIEH bit (INTCON<7>) enables all interrupts  that  have  the  priority  bit  set  (high  priority). Setting the GIEL bit (INTCON<6>) enables all interrupts that have the priority bit cleared (low priority). When  the  interrupt  flag,  enable  bit  and  appropriate global  interrupt  enable  bit  are  set,  the  interrupt  will vector immediately to address 0008h or 0018h, depending on the priority bit setting. Individual interrupts can be disabled through their corresponding enable bits.\nWhen an interrupt is responded to, the global interrupt enable bit is cleared to disable further interrupts. If the IPEN bit is cleared, this is the GIE bit. If interrupt priority levels are used, this will either be the GIEH or GIEL bit. High-priority  interrupt  sources  can  interrupt  a  lowpriority interrupt. Low-priority interrupts are not processed while high-priority interrupts are in progress.",
    "10.0 INTERRUPTS\nThe return address is pushed onto the stack and the PC is loaded with the interrupt vector address (0008h or 0018h). Once in the Interrupt Service Routine, the source(s) of the interrupt can be determined by polling the interrupt flag  bits.  The  interrupt  flag  bits  must  be cleared  in  software  before  re-enabling  interrupts  to avoid recursive interrupts.\nThe 'return  from  interrupt'  instruction, RETFIE ,  exits the interrupt routine and sets the GIE bit (GIEH or GIEL if priority levels are used), which re-enables interrupts.\nFor external interrupt events, such as the INTx pins or the PORTB input change interrupt, the interrupt latency will be  three  to  four  instruction  cycles.  The  exact latency is the same for one or two-cycle instructions. Individual interrupt flag bits are set, regardless of the status of their corresponding enable bit or the GIE bit.\nNote:\nDo not use the MOVFF instruction to modify any of the interrupt control registers while any interrupt  is  enabled.  Doing  so  may cause erratic microcontroller behavior.",
    "10.1 INTCON Registers\nNote:\nThe  INTCON  registers  are  readable  and  writable registers which contain various enable, priority and flag bits.\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure that the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 10-1: INTCON: INTERRUPT CONTROL REGISTER\nGIE/GIEH, R/W-0 = PEIE/GIEL. GIE/GIEH, R/W-0 = TMR0IE. GIE/GIEH, R/W-0 = INT0IE. GIE/GIEH, R/W-0 = RBIE. GIE/GIEH, R/W-0 = TMR0IF. GIE/GIEH, R/W-0 = INT0IF. GIE/GIEH, R/W-x = RBIF (1). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-x = bit 0",
    "REGISTER 10-1: INTCON: INTERRUPT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 GIE/GIEH: Global Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked interrupts\n0 = Disables all interrupts",
    "When IPEN = 1 :\n1 = Enables all high-priority interrupts\n0 = Disables all interrupts\nbit 6\nPEIE/GIEL: Peripheral Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked peripheral interrupts\n0 = Disables all peripheral interrupts\n1 = Enables all low-priority peripheral interrupts\n0 = Disables all low-priority peripheral interrupts",
    "bit 5\nTMR0IE: TMR0 Overflow Interrupt Enable bit\n1 = Enables the TMR0 overflow interrupt\n0 = Disables the TMR0 overflow interrupt",
    "bit 4\nINT0IE: INT0 External Interrupt Enable bit\n1 = Enables the INT0 external interrupt\n0 = Disables the INT0 external interrupt",
    "bit 3\nRBIE: RB Port Change Interrupt Enable bit\n1 = Enables the RB port change interrupt\n0 = Disables the RB port change interrupt\nbit 2\nTMR0IF: TMR0 Overflow Interrupt Flag bit\n1 = TMR0 register has overflowed (must be cleared in software)\n0 = TMR0 register did not overflow",
    "bit 1 INT0IF:\nINT0 External Interrupt Flag bit\n1 = The INT0 external interrupt occurred (must be cleared in software)\n0 = The INT0 external interrupt did not occur",
    "bit 0\nRBIF: RB Port Change Interrupt Flag bit (1)\n1 = At least one of the RB<7:4> pins changed state (must be cleared in software)\n0 = None of the RB<7:4> pins have changed state\nNote 1: A mismatch condition will continue to set this bit. Reading PORTB will end the mismatch condition and allow the bit to be cleared.",
    "REGISTER 10-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nRBPU, R/W-1 = INTEDG0. RBPU, R/W-1 = INTEDG1. RBPU, R/W-1 = INTEDG2. RBPU, R/W-1 = INTEDG3. RBPU, R/W-1 = TMR0IP. RBPU, R/W-1 = INT3IP. RBPU, R/W-1 = RBIP. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 10-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nRBPU: PORTB Pull-up Enable bit\n1 = All PORTB pull-ups are disabled\n0 = PORTB pull-ups are enabled by individual port latch values\nbit 6\nINTEDG0: External Interrupt 0 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 5\nINTEDG1: External Interrupt 1 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 4\nINTEDG2: External Interrupt 2 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge",
    "bit 3\nINTEDG3: External Interrupt 3 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 2\nTMR0IP: TMR0 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nINT3IP: INT3 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nRBIP: RB Port Change Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "Note:\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 10-3: INTCON3: INTERRUPT CONTROL REGISTER 3\nINT2IP, R/W-1 = INT1IP. INT2IP, R/W-0 = INT3IE. INT2IP, R/W-0 = INT2IE. INT2IP, R/W-0 = INT1IE. INT2IP, R/W-0 = INT3IF. INT2IP, R/W-0 = INT2IF. INT2IP, R/W-0 = INT1IF. bit 7, R/W-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-3: INTCON3: INTERRUPT CONTROL REGISTER 3\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nINT2IP: INT2 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nINT1IP: INT1 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5\nINT3IE: INT3 External Interrupt Enable bit\n1 = Enables the INT3 external interrupt\n0 = Disables the INT3 external interrupt\nbit 4\nINT2IE: INT2 External Interrupt Enable bit\n1 = Enables the INT2 external interrupt\n0 = Disables the INT2 external interrupt\nbit 3",
    "REGISTER 10-3: INTCON3: INTERRUPT CONTROL REGISTER 3\nINT1IE: INT1 External Interrupt Enable bit\n1 = Enables the INT1 external interrupt\n0 = Disables the INT1 external interrupt\nbit 2\nINT3IF: INT3 External Interrupt Flag bit\n1 = The INT3 external interrupt occurred (must be cleared in software)\n0 = The INT3 external interrupt did not occur\nbit 1\nINT2IF: INT2 External Interrupt Flag bit\n1 = The INT2 external interrupt occurred (must be cleared in software)\n0 = The INT2 external interrupt did not occur\nbit 0\nINT1IF: INT1 External Interrupt Flag bit\n1 = The INT1 external interrupt occurred (must be cleared in software)\n0 = The INT1 external interrupt did not occur\nNote:\nInterrupt flag bits are set when an interrupt condition occurs, regardless of the state of its corresponding enable bit or the global interrupt enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "10.2 PIR Registers\nThe PIR registers contain the individual flag bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are three Peripheral Interrupt Request (Flag) registers (PIR1, PIR2, PIR3).\nNote 1: Interrupt flag bits are  set when an interrupt  condition  occurs,  regardless  of  the state of its corresponding enable bit or the Global Interrupt Enable bit, GIE (INTCON<7>).\n2: User software should ensure the appropriate interrupt flag bits are cleared prior  to  enabling  an  interrupt  and  after servicing that interrupt.",
    "REGISTER 10-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nPSPIF, R/W-0 = ADIF. PSPIF, R-0 = RC1IF. PSPIF, R-0 = TX1IF. PSPIF, R/W-0 = SSPIF. PSPIF, R/W-0 = CCP1IF. PSPIF, R/W-0 = TMR2IF. PSPIF, R/W-0 = TMR1IF. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 PSPIF: Parallel Slave Port Read/Write Interrupt Flag bit\n1 = A read or a write operation has taken place (must be cleared in software)\n0 = No read or write has occurred\nADIF: A/D Converter Interrupt Flag bit\n1 = An A/D conversion completed (must be cleared in software)\n0 = The A/D conversion is not complete\nbit 5 RC1IF: EUSART Receive Interrupt Flag bit\n1 = The EUSART receive buffer, RCREG1, is full (cleared when RCREG1 is read)\n0 = The EUSART receive buffer is empty\nbit 4 TX1IF: EUSART Transmit Interrupt Flag bit\n1 = The EUSART transmit buffer, TXREG1, is empty (cleared when TXREG1 is written)\n0 = The EUSART transmit buffer is full",
    "bit 3 SSPIF: Master Synchronous Serial Port Interrupt Flag bit\n1 = The transmission/reception is complete (must be cleared in software)\n0 = Waiting to transmit/receive",
    "bit 2 CCP1IF: CCP1 Interrupt Flag bit\nCapture mode:\n1 = A TMR1/TMR3 register capture occurred (must be cleared in software)\n0 = No TMR1/TMR3 register capture occurred",
    "Compare mode:\n1 = A TMR1/TMR3 register compare match occurred (must be cleared in software)\n0 = No TMR1/TMR3 register compare match occurred",
    "PWM mode:\nUnused in this mode.\nTMR2IF: TMR2 to PR2 Match Interrupt Flag bit\n1 = TMR2 to PR2 match occurred (must be cleared in software)\n0 = No TMR2 to PR2 match occurred\nTMR1IF: TMR1 Overflow Interrupt Flag bit\n1 = TMR1 register overflowed (must be cleared in software)\n0 = TMR1 register did not overflow\nbit 6\nbit 1",
    "REGISTER 10-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nOSCFIF, R/W-0 = CMIF. OSCFIF, U-0 = -. OSCFIF, U-0 = -. OSCFIF, R/W-0 = BCLIF. OSCFIF, R/W-0 = HLVDIF. OSCFIF, R/W-0 = TMR3IF. OSCFIF, R/W-0 = CCP2IF. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nOSCFIF: Oscillator Fail Interrupt Flag bit\n1 = Device oscillator failed, clock input has changed to INTOSC (must be cleared in software)\n0 = Device clock operating",
    "bit 6\nCMIF: Comparator Interrupt Flag bit\n1 = Comparator input has changed (must be cleared in software)\n0 = Comparator input has not changed",
    "bit 3 BCLIF: Bus Collision Interrupt Flag bit\n1 = A bus collision occurred (must be cleared in software)\n0 = No bus collision occurred\nbit 2\nHLVDIF: High/Low-Voltage Detect Interrupt Flag bit\n1 = A low-voltage condition occurred (must be cleared in software)\n0 = The device voltage is above the Low-Voltage Detect trip point",
    "bit 1\nTMR3IF: TMR3 Overflow Interrupt Flag bit\n1 = TMR3 register overflowed (must be cleared in software)\n0 = TMR3 register did not overflow\nbit 0\nCCP2IF: CCP2 Interrupt Flag bit",
    "Capture mode:\n1 = A TMR1/TMR3 register capture occurred (must be cleared in software)\n0 = No TMR1/TMR3 register capture occurred",
    "Compare mode:\n1 = A TMR1/TMR3 register compare match occurred (must be cleared in software)\n0 = No TMR1/TMR3 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "REGISTER 10-6: PIR3: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 3\n-, U-0 = -. -, R-0 = RC2IF. -, R-0 = TX21F. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = CCP3IF. bit 7, U-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 0\n-n = Value at POR, W=Writable bit = '1' = Bit is set. -n = Value at POR,  = '0' = Bit is cleared. -n = Value at POR,  = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as ' 0 '\nbit 5\nRC2IF: AUSART Receive Interrupt Flag bit\n1 = The AUSART receive buffer, RCREG2, is full (cleared when RCREG2 is read)\n0 = The AUSART receive buffer is empty\nbit 4\nTX2IF: AUSART Transmit Interrupt Flag bit\n1 = The AUSART transmit buffer, TXREG2, is empty (cleared when TXREG2 is written)\n0 = The AUSART transmit buffer is full",
    "bit 3-1 Unimplemented: Read as ' 0 '\nbit 0\nCCP3IF: CCP3 Interrupt Flag bit",
    "Capture mode:\n1 = A TMR1/TMR3 register capture occurred (must be cleared in software)\n0 = No TMR1/TMR3 register capture occurred",
    "Compare mode:\n1 = A TMR1/TMR3 register compare match occurred (must be cleared in software)\n0 = No TMR1/TMR3 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "10.3 PIE Registers\nThe PIE registers contain the individual enable bits for the peripheral interrupts. Due  to the number  of peripheral interrupt sources, there are three Peripheral Interrupt  Enable  registers  (PIE1,  PIE2,  PIE3).  When IPEN = 0 ,  the PEIE bit must be set to enable any of these peripheral interrupts.",
    "REGISTER 10-7: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nPSPIE, R/W-0 = ADIE. PSPIE, R/W-0 = RC1IE. PSPIE, R/W-0 = TX1IE. PSPIE, R/W-0 = SSPIE. PSPIE, R/W-0 = CCP1IE. PSPIE, R/W-0 = TMR2IE. PSPIE, R/W-0 = TMR1IE. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-7: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nPSPIE: Parallel Slave Port Read/Write Interrupt Enable bit\n1 = Enables the PSP read/write interrupt\n0 = Disables the PSP read/write interrupt\nbit 6\nADIE: A/D Converter Interrupt Enable bit\n1 = Enables the A/D interrupt\n0 = Disables the A/D interrupt\nbit 5\nRC1IE: EUSART Receive Interrupt Enable bit\n1 = Enables the EUSART receive interrupt\n0 = Disables the EUSART receive interrupt",
    "bit 4\nTX1IE: EUSART Transmit Interrupt Enable bit\n1 = Enables the EUSART transmit interrupt\n0 = Disables the EUSART transmit interrupt",
    "bit 3\nSSPIE: Master Synchronous Serial Port Interrupt Enable bit\n1 = Enables the MSSP interrupt\n0 = Disables the MSSP interrupt",
    "bit 2\nCCP1IE: CCP1 Interrupt Enable bit\n1 = Enables the CCP1 interrupt\n0 = Disables the CCP1 interrupt",
    "bit 1\nTMR2IE: TMR2 to PR2 Match Interrupt Enable bit\n1 = Enables the TMR2 to PR2 match interrupt\n0 = Disables the TMR2 to PR2 match interrupt\nbit 0\nTMR1IE: TMR1 Overflow Interrupt Enable bit\n1 = Enables the TMR1 overflow interrupt\n0 = Disables the TMR1 overflow interrupt",
    "REGISTER 10-8: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nOSCFIE, R/W-0 = CMIE. OSCFIE, U-0 = -. OSCFIE, U-0 = -. OSCFIE, R/W-0 = BCLIE. OSCFIE, R/W-0 = HLVDIE. OSCFIE, R/W-0 = TMR3IE. OSCFIE, R/W-0 = CCP2IE. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-8: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIE: Oscillator Fail Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 6\nCMIE: Comparator Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 5-4 Unimplemented: Read as ' 0 '\nbit 3\nBCLIE: Bus Collision Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 2\nHLVDIE: High/Low-Voltage Detect Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 1\nTMR3IE: TMR3 Overflow Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "bit 0 CCP2IE: CCP2 Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "REGISTER 10-9: PIE3: PERIPHERAL INTERRUPT ENABLE REGISTER 3\nU-0, 1 = U-0. U-0, 2 = R-0. U-0, 3 = R-0. U-0, 4 = U-0. U-0, 5 = U-0. U-0, 6 = U-0. U-0, 7 = R/W-0. -, 1 = -. -, 2 = RC2IE. -, 3 = TX2IE. -, 4 = -. -, 5 = -. -, 6 = -. -, 7 = CCP3IE. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 10-9: PIE3: PERIPHERAL INTERRUPT ENABLE REGISTER 3\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5\nRC2IE: AUSART Receive Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 4\nTX2IE: AUSART Transmit Interrupt Enable bit\n1 = Enabled\n0 = Disabled\nbit 3-1\nUnimplemented: Read as ' 0 '\nbit 0\nCCP3IE: CCP3 Interrupt Enable bit\n1 = Enabled\n0 = Disabled",
    "10.4 IPR Registers\nThe IPR registers contain the individual priority bits for the peripheral interrupts. Due  to the number  of peripheral interrupt sources, there are three Peripheral Interrupt  Priority  registers  (IPR1,  IPR2,  IPR3).  Using the  priority  bits requires  that  the  Interrupt  Priority Enable (IPEN) bit be set.",
    "REGISTER 10-10: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nPSPIP, R/W-1 = ADIP. PSPIP, R/W-1 = RC1IP. PSPIP, R/W-1 = TX1IP. PSPIP, R/W-1 = SSPIP. PSPIP, R/W-1 = CCP1IP. PSPIP, R/W-1 = TMR2IP. PSPIP, R/W-1 = TMR1IP. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 10-10: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPSPIP: Parallel Slave Port Read/Write Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nADIP: A/D Converter Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5\nRC1IP: EUSART Receive Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 4\nTX1IP: EUSART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nSSPIP: Master Synchronous Serial Port Interrupt Priority bit\n1 = High priority",
    "REGISTER 10-10: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\n0 = Low priority'\nbit 2\nCCP1IP: CCP1 Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR2IP: TMR2 to PR2 Match Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nTMR1IP: TMR1 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "REGISTER 10-11: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nOSCFIP, R/W-1 = CMIP. OSCFIP, U-0 = -. OSCFIP, U-0 = -. OSCFIP, R/W-1 = BCLIP. OSCFIP, R/W-1 = HLVDIP. OSCFIP, R/W-1 = TMR3IP. OSCFIP, R/W-1 = CCP2IP. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 10-11: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nOSCFIP: Oscillator Fail Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nCMIP: Comparator Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 5-4\nUnimplemented: Read as ' 0 '\nbit 3\nBCLIP: Bus Collision Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 2\nHLVDIP: High/Low-Voltage Detect Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR3IP: TMR3 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nCCP2IP: CCP2 Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "REGISTER 10-12: IPR3: PERIPHERAL INTERRUPT PRIORITY REGISTER 3\n-, U-0 = -. -, R-1 = RC2IP. -, R-1 = TX21P. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/W-1 = CCP3IP. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R-1 = bit 7 bit 0. bit 7 bit 0, R-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0\n-n = Value at POR, W=Writable bit = '1' = Bit is set. -n = Value at POR,  = '0' = Bit is cleared. -n = Value at POR,  = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5\nRC2IP: AUSART Receive Priority Flag bit",
    "REGISTER 10-12: IPR3: PERIPHERAL INTERRUPT PRIORITY REGISTER 3\n1 = High priority\n0 = Low priority\nbit 4\nTX2IP: AUSART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3-1\nUnimplemented: Read as ' 0 '\nbit 0\nCCP3IP: CCP3 Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "10.5 RCON Register\nThe RCON register contains bits used to determine the cause of the last Reset or wake-up from Idle or Sleep modes.  RCON  also  contains  the  bit  that  enables interrupt priorities (IPEN).",
    "REGISTER 10-13: RCON REGISTER\nIPEN, R/W-1 = SBOREN. IPEN, U-0 = -. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 = POR. IPEN, R/W-0 = BOR. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 10-13: RCON REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "REGISTER 10-13: RCON REGISTER\nbit 7, 1 = IPEN: Interrupt Priority Enable bit 1 = Enable priority levels on interrupts 0 = Disable priority levels on interrupts (PIC16CXXX. bit 6, 1 = SBOREN: Software BOR Enable bit For details of bit operation and Reset state, see Register 5-1.. bit 5, 1 = Unimplemented: Read as ' 0 '. bit 4, 1 = RI: RESET Instruction Flag bit For details of bit operation, see Register. bit 3, 1 = TO: Watchdog Timer Time-out Flag bit For details of bit operation, see Register 5-1.. bit 2, 1 = PD: Power-Down Detection Flag bit For details of bit operation, see Register 5-1.. bit 1, 1 = POR: Power-on Reset Status bit For details of bit operation, see Register 5-1.. bit 0, 1 = BOR: Brown-out Reset Status bit For details of bit operation, see Register 5-1.",
    "10.7 TMR0 Interrupt\nExternal interrupts on the RB0/INT0, RB1/INT1, RB2/ INT2  and  RB3/INT3  pins  are  edge-triggered.  If  the corresponding INTEDGx bit in the INTCON2 register is set (= 1 ), the interrupt is triggered by a rising edge; if the bit is clear, the trigger is on the falling edge. When a valid edge  appears  on  the  RBx/INTx  pin,  the corresponding flag bit, INTxIF, is set. This interrupt can be disabled by clearing the corresponding enable bit, INTxIE. Flag bit, INTxIF, must be cleared in software in the  Interrupt  Service  Routine  before  re-enabling  the interrupt.\nAll external interrupts (INT0, INT1, INT2 and INT3) can wake-up  the processor from the power-managed modes if bit, INTxIE, was set prior to going into powermanaged  modes.  If  the  Global  Interrupt  Enable  bit, GIE, is set, the processor will branch to the interrupt vector following wake-up.",
    "10.7 TMR0 Interrupt\nIn 8-bit mode (which is the default), an overflow in the TMR0 register (FFh \uf0ae 00h) will set flag bit, TMR0IF. In 16-bit mode, an overflow in the TMR0H:TMR0L register pair (FFFFh \uf0ae\uf020 0000h) will set TMR0IF. The interrupt can be  enabled/disabled by setting/clearing enable  bit, TMR0IE (INTCON<5>). Interrupt priority  for  Timer0  is determined by the value contained in the interrupt priority bit, TMR0IP  (INTCON2<2>).  See Section 12.0 'Timer0  Module' for  further  details  on  the  Timer0 module.",
    "10.8 PORTB Interrupt-on-Change\nInterrupt priority for INT1, INT2 and INT3 is determined by  the  value  contained  in  the  interrupt  priority  bits, INT1IP  (INTCON3<6>),  INT2IP  (INTCON3<7>)  and INT3IP (INTCON2<1>). There is no priority bit associated  with  INT0.  It  is always  a  high-priority interrupt source.\nAn input change on PORTB<7:4> sets flag bit, RBIF (INTCON<0>). The interrupt can be enabled/disabled by  setting/clearing  enable  bit,  RBIE  (INTCON<3>). Interrupt  priority  for  PORTB  interrupt-on-change  is determined  by  the  value  contained  in  the  interrupt priority bit, RBIP (INTCON2<0>).",
    "10.9 Context Saving During Interrupts\nDuring interrupts, the return PC address is saved on the stack. Additionally, the WREG, STATUS and BSR registers are saved on the fast return stack. If a fast return  from  interrupt  is  not  used  (see Section 6.3 'Data Memory Organization' ), the user may need to save the WREG, STATUS and BSR registers on entry to  the  Interrupt  Service  Routine.  Depending  on  the user's application, other registers may also need to be saved. Example 10-1 saves and restores the WREG, STATUS and BSR registers during an Interrupt Service Routine.",
    "EXAMPLE 10-1: SAVING STATUS, WREG AND BSR REGISTERS IN RAM\nMOVWF, 1 = W_TEMP. MOVWF, 2 = ; W_TEMP is in virtual bank. MOVFF, 1 = STATUS, STATUS_TEMP. MOVFF, 2 = ; STATUS_TEMP located anywhere. MOVFF ;, 1 = BSR, BSR_TEMP. MOVFF ;, 2 = ; BSR_TMEP located anywhere. ; USER ;, 1 = ISR CODE. ; USER ;, 2 = . MOVFF, 1 = BSR_TEMP, BSR. MOVFF, 2 = ; Restore BSR. MOVF, 1 = W_TEMP, W. MOVF, 2 = ; Restore WREG. MOVFF, 1 = STATUS_TEMP, STATUS. MOVFF, 2 = ; Restore STATUS",
    "11.0 I/O PORTS\nDepending on the device selected and features enabled,  there  are  up  to  nine  ports  available.  Some pins of the I/O ports are multiplexed with an alternate function from the peripheral features on the device. In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin.\nEach port has three registers for its operation. These registers are:\n\u00b7 TRIS register (Data Direction register)\n\u00b7 PORT register (reads the levels on the pins of the device)\n\u00b7 LAT register (Output Latch register)\nThe Output Latch (LAT register) is useful for read-modify-write operations on the value that the I/O pins are driving.\nA simplified  model  of  a  generic  I/O  port,  without  the interfaces to other peripherals, is shown in Figure 11-1.",
    "11.1 PORTA, TRISA and LATA Registers\nPORTA is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISA.  Setting  a TRISA bit (= 1 ) will make the corresponding PORTA pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISA bit (= 0 ) will make the corresponding PORTA pin an output (i.e., put the contents of the output latch on the selected pin).\nReading the  PORTA register reads the  status of  the pins, whereas writing to it, will write to the port latch.\nThe  Output  Latch  register  (LATA)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATA register  read  and  write  the  latched  output  value  for PORTA.",
    "11.1 PORTA, TRISA and LATA Registers\nThe  RA4  pin  is  multiplexed  with  the  Timer0  module clock input to become the RA4/T0CKI pin. Pins, RA6 and RA7, are multiplexed with the main oscillator pins. They are enabled as oscillator or I/O pins by the selection of the main oscillator in the Configuration register (see Section 24.1  'Configuration  Bits' for  details). When they are not used as port pins, RA6 and RA7 and their associated TRIS and LAT bits are read as ' 0 '.\nThe other PORTA pins are multiplexed with the analog VREF+ and VREFinputs. The operation of pins, RA<5:0>,  as  A/D  Converter  inputs  is  selected  by clearing  or  setting  the  PCFG<3:0>  control  bits  in  the ADCON1 register.\nNote:, 1 = On a Power-on Reset, RA5 and RA<3:0> are configured as analog inputs and read as ' 0 '. RA4 is configured as a digital input.",
    "11.1 PORTA, TRISA and LATA Registers\nThe RA4/T0CKI pin is a Schmitt Trigger input and an open-drain  output.  All  other  PORTA  pins  have  TTL input levels and full CMOS output drivers.\nThe TRISA register controls the direction of the PORTA pins, even when they are being used as analog inputs. The user must ensure the bits in the TRISA register are maintained set when using them as analog inputs.",
    "EXAMPLE 11-1: INITIALIZING PORTA\nCLRF, 1 = PORTA. CLRF, 2 = ; Initialize PORTA by ; clearing output ; data latches. CLRF, 1 = LATA. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 07h. MOVLW, 2 = ; Configure A/D. MOVWF, 1 = ADCON1. MOVWF, 2 = ; for digital inputs. MOVWF, 1 = 07h. MOVWF, 2 = ; Configure comparators. MOVWF, 1 = CMCON. MOVWF, 2 = ; for digital input. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISA. MOVWF, 2 = ; Set RA<3:0> as inputs ; RA<5:4> as outputs",
    "TABLE 11-1: PORTA FUNCTIONS\nRA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 0. RA0/AN0, I/O = O. RA0/AN0, I/O Type = DIG. RA0/AN0, Description = LATA<0> data output; not affected by analog input.. RA0/AN0, Function = RA0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = TTL. RA0/AN0, Description = PORTA<0> data input; disabled when analog input enabled.. RA0/AN0, Function = AN0. RA0/AN0, TRIS Setting = 1. RA0/AN0, I/O = I. RA0/AN0, I/O Type = ANA. RA0/AN0, Description = A/D Input Channel 0. Default input configuration on POR; does not affect digital output.. RA1/AN1, Function = RA1. RA1/AN1, TRIS Setting = 0. RA1/AN1,",
    "TABLE 11-1: PORTA FUNCTIONS\nI/O = O. RA1/AN1, I/O Type = DIG. RA1/AN1, Description = LATA<1> data output; not affected by analog input.. RA1/AN1, Function = RA1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = TTL. RA1/AN1, Description = PORTA<1> data input; disabled when analog input enabled.. RA1/AN1, Function = AN1. RA1/AN1, TRIS Setting = 1. RA1/AN1, I/O = I. RA1/AN1, I/O Type = ANA. RA1/AN1, Description = A/D Input Channel 1. Default input configuration on POR; does not affect digital output.. RA2/AN2/VREF-, Function = RA2. RA2/AN2/VREF-, TRIS Setting = 0. RA2/AN2/VREF-, I/O = O. RA2/AN2/VREF-,",
    "TABLE 11-1: PORTA FUNCTIONS\nI/O Type = DIG. RA2/AN2/VREF-, Description = LATA<2> data output; not affected by analog input. Disabled when CVREF output enabled.. RA2/AN2/VREF-, Function = RA2. RA2/AN2/VREF-, TRIS Setting = 1. RA2/AN2/VREF-, I/O = I. RA2/AN2/VREF-, I/O Type = TTL. RA2/AN2/VREF-, Description = PORTA<2> data input. Disabled when analog functions enabled; disabled when CVREF output enabled.. RA2/AN2/VREF-, Function = AN2. RA2/AN2/VREF-, TRIS Setting = 1. RA2/AN2/VREF-, I/O = I. RA2/AN2/VREF-, I/O Type = ANA. RA2/AN2/VREF-, Description = A/D Input Channel 2. Default input configuration on POR; not affected by analog output.. RA2/AN2/VREF-,",
    "TABLE 11-1: PORTA FUNCTIONS\nFunction = VREF-. RA2/AN2/VREF-, TRIS Setting = 1. RA2/AN2/VREF-, I/O = I. RA2/AN2/VREF-, I/O Type = ANA. RA2/AN2/VREF-, Description = Comparator voltage reference low input and A/D voltage reference low input.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 0. RA3/AN3/VREF+, I/O = O. RA3/AN3/VREF+, I/O Type = DIG. RA3/AN3/VREF+, Description = LATA<3> data output; not affected by analog input.. RA3/AN3/VREF+, Function = RA3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = TTL.",
    "TABLE 11-1: PORTA FUNCTIONS\nRA3/AN3/VREF+, Description = PORTA<3> data input; disabled when analog input enabled.. RA3/AN3/VREF+, Function = AN3. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = A/D Input Channel 3. Default input configuration on POR.. RA3/AN3/VREF+, Function = VREF+. RA3/AN3/VREF+, TRIS Setting = 1. RA3/AN3/VREF+, I/O = I. RA3/AN3/VREF+, I/O Type = ANA. RA3/AN3/VREF+, Description = Comparator voltage reference high input and A/D voltage reference high input.. RA4/T0CKI, Function = RA4. RA4/T0CKI, TRIS Setting = 0. RA4/T0CKI, I/O =",
    "TABLE 11-1: PORTA FUNCTIONS\nO. RA4/T0CKI, I/O Type = DIG. RA4/T0CKI, Description = LATA<4> data output. RA4/T0CKI, Function = RA4. RA4/T0CKI, TRIS Setting = 1. RA4/T0CKI, I/O = I. RA4/T0CKI, I/O Type = ST. RA4/T0CKI, Description = PORTA<4> data input; default configuration on POR.. RA4/T0CKI, Function = T0CKI. RA4/T0CKI, TRIS Setting = x. RA4/T0CKI, I/O = I. RA4/T0CKI, I/O Type = ST. RA4/T0CKI, Description = Timer0 clock input.. RA5/AN4/HLVDIN, Function = RA5. RA5/AN4/HLVDIN, TRIS Setting = 0. RA5/AN4/HLVDIN, I/O = O. RA5/AN4/HLVDIN, I/O Type = DIG.",
    "TABLE 11-1: PORTA FUNCTIONS\nRA5/AN4/HLVDIN, Description = LATA<5> data output; not affected by analog input.. RA5/AN4/HLVDIN, Function = RA5. RA5/AN4/HLVDIN, TRIS Setting = 1. RA5/AN4/HLVDIN, I/O = I. RA5/AN4/HLVDIN, I/O Type = TTL. RA5/AN4/HLVDIN, Description = PORTA<5> data input; disabled when analog input enabled.. RA5/AN4/HLVDIN, Function = AN4. RA5/AN4/HLVDIN, TRIS Setting = 1. RA5/AN4/HLVDIN, I/O = I. RA5/AN4/HLVDIN, I/O Type = ANA. RA5/AN4/HLVDIN, Description = A/D Input Channel 4. Default configuration on POR.. RA5/AN4/HLVDIN, Function = HLVDIN. RA5/AN4/HLVDIN,",
    "TABLE 11-1: PORTA FUNCTIONS\nTRIS Setting = 1. RA5/AN4/HLVDIN, I/O = I. RA5/AN4/HLVDIN, I/O Type = ANA. RA5/AN4/HLVDIN, Description = High/Low-Voltage Detect external trip point input.. OSC2/CLKO/RA6, Function = OSC2. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = ANA. OSC2/CLKO/RA6, Description = Main oscillator feedback output connection (XT, HS and LP modes).. OSC2/CLKO/RA6, Function = CLKO. OSC2/CLKO/RA6, TRIS Setting = x. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = System cycle clock output (F",
    "TABLE 11-1: PORTA FUNCTIONS\nOSC/4) in all oscillator modes except RCIO, INTIO2 and ECIO.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 0. OSC2/CLKO/RA6, I/O = O. OSC2/CLKO/RA6, I/O Type = DIG. OSC2/CLKO/RA6, Description = LATA<6> data output. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC2/CLKO/RA6, Function = RA6. OSC2/CLKO/RA6, TRIS Setting = 1. OSC2/CLKO/RA6, I/O = I. OSC2/CLKO/RA6, I/O Type = TTL. OSC2/CLKO/RA6, Description = PORTA<6> data input. Enabled in RCIO, INTIO2 and ECIO modes only.. OSC1/CLKI/RA7, Function = OSC1.",
    "TABLE 11-1: PORTA FUNCTIONS\nOSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main oscillator input connection.. OSC1/CLKI/RA7, Function = CLKI. OSC1/CLKI/RA7, TRIS Setting = x. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = ANA. OSC1/CLKI/RA7, Description = Main clock input connection.. OSC1/CLKI/RA7, Function = RA7. OSC1/CLKI/RA7, TRIS Setting = 0. OSC1/CLKI/RA7, I/O = O. OSC1/CLKI/RA7, I/O Type = DIG. OSC1/CLKI/RA7, Description = LATA<7> data output. Disabled in External Oscillator modes..",
    "TABLE 11-1: PORTA FUNCTIONS\nOSC1/CLKI/RA7, Function = . OSC1/CLKI/RA7, TRIS Setting = 1. OSC1/CLKI/RA7, I/O = I. OSC1/CLKI/RA7, I/O Type = TTL. OSC1/CLKI/RA7, Description = PORTA<7> data input. Disabled in External Oscillator modes.\nLegend: O = Output, I = Input, ANA = Analog Signal, DIG = Digital Output, ST= Schmitt Buffer Input, TTL = TTL Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on Page = 66. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = LATA Output Latch Register. LATA, Bit 4 = LATA Output Latch Register. LATA, Bit 3 = LATA Output Latch Register. LATA, Bit 2 = LATA Output Latch Register. LATA, Bit 1 = LATA Output Latch Register. LATA, Bit 0 = LATA Output Latch Register. LATA, Reset Values on Page = 66. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit 5 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\n4 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit 3 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit 2 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit 1 = TRISA6 (1) PORTA Data Direction Register. TRISA, Bit 0 = TRISA6 (1) PORTA Data Direction Register. TRISA, Reset Values on Page = 66. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on Page = 64\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by PORTA.",
    "SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\n- Note 1: RA<7:6> and their associated latch and data direction bits are enabled as I/O pins based on oscillator configuration; otherwise, they are read as ' 0 '.",
    "11.2 PORTB, TRISB and LATB Registers\nPORTB is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISB.  Setting  a TRISB bit (= 1 )  will  make the corresponding PORTB pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISB bit (= 0 ) will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin).\nFour of the PORTB pins (RB<7:4>) have an interrupt-on-change  feature.  Only  pins  configured  as inputs  can  cause  this  interrupt  to  occur  (i.e.,  any RB<7:4> pin configured as an output is excluded from the interrupt-on-change comparison). The input pins (of RB<7:4>) are compared with the old value latched on the  last  read  of  PORTB.  The  'mismatch'  outputs  of RB<7:4> are ORed together to generate the RB Port Change Interrupt with Flag bit, RBIF (INTCON<0>).",
    "11.2 PORTB, TRISB and LATB Registers\nThe  Output  Latch  register  (LATB)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATB register  read  and  write  the  latched  output  value  for PORTB.",
    "EXAMPLE 11-2: INITIALIZING PORTB\nCLRF, 1 = PORTB. CLRF, 2 = ; Initialize PORTB by ; clearing output ; data latches. CLRF, 1 = LATB. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISB. MOVWF, 2 = ; Set RB<3:0> as inputs ; RB<5:4> as outputs ; RB<7:6> as inputs\nEach of the PORTB pins has a weak internal pull-up. A single  control  bit  can  turn  on  all  the  pull-ups.  This  is performed by clearing bit, RBPU (INTCON2<7>). The weak pull-up is automatically turned off when the port pin  is configured  as  an  output.  The  pull-ups  are disabled on a Power-on Reset.\nThis interrupt can wake the device from power-managed  modes.  The  user,  in  the  Interrupt Service Routine, can clear the interrupt in the following manner:",
    "EXAMPLE 11-2: INITIALIZING PORTB\na) Any  read  or  write  of  PORTB  (except  with  the MOVFF  (ANY),  PORTB instruction).  This  will end the mismatch condition.\nb) Wait one TCY delay (for example, execute one NOP instruction).\nc) Clear flag bit, RBIF.\nA mismatch condition will continue to set flag bit, RBIF. Reading PORTB will end the mismatch condition and allow flag bit, RBIF, to be cleared after a one TCY delay.\nThe interrupt-on-change  feature  is  recommended  for wake-up on key depression operation and operations where PORTB is only used for the interrupt-on-change feature. Polling of PORTB is not recommended while using the interrupt-on-change feature.",
    "EXAMPLE 11-2: INITIALIZING PORTB\nFor  80-pin  devices,  RB3  can  be  configured  as  the alternate  peripheral  pin  for  the CCP2  module  by clearing  the  CCP2MX  Configuration  bit.  This  applies only when the device is in one of the operating modes other  than  the  default  Microcontroller  mode.  If  the device is in Microcontroller mode, the alternate assignment for CCP2 is RE7. As with other CCP2 configurations, the user must ensure that the TRISB<3> bit is set appropriately for the intended operation.",
    "TABLE 11-3: PORTB FUNCTIONS\nRB0/INT0, Function = RB0. RB0/INT0, TRIS Setting = 0. RB0/INT0, I/O = O. RB0/INT0, I/O Type = DIG. RB0/INT0, Description = LATB<0> data output.. RB0/INT0, Function = RB0. RB0/INT0, TRIS Setting = 1. RB0/INT0, I/O = I. RB0/INT0, I/O Type = TTL. RB0/INT0, Description = PORTB<0> data input; weak pull-up when RBPU bit is cleared.. RB0/INT0, Function = INT0. RB0/INT0, TRIS Setting = 1. RB0/INT0, I/O = I. RB0/INT0, I/O Type = ST. RB0/INT0, Description = External Interrupt 0 input.. RB1/INT1, Function = RB1. RB1/INT1, TRIS Setting = 0. RB1/INT1, I/O = O. RB1/INT1,",
    "TABLE 11-3: PORTB FUNCTIONS\nI/O Type = DIG. RB1/INT1, Description = LATB<1> data output.. RB1/INT1, Function = RB1. RB1/INT1, TRIS Setting = 1. RB1/INT1, I/O = I. RB1/INT1, I/O Type = TTL. RB1/INT1, Description = PORTB<1> data input; weak pull-up when RBPU bit is cleared.. RB1/INT1, Function = INT1. RB1/INT1, TRIS Setting = 1. RB1/INT1, I/O = I. RB1/INT1, I/O Type = ST. RB1/INT1, Description = External Interrupt 1 input.. RB2/INT2, Function = RB2. RB2/INT2, TRIS Setting = 0. RB2/INT2, I/O = O. RB2/INT2, I/O Type = DIG. RB2/INT2, Description = LATB<2> data output.. RB2/INT2, Function = RB2. RB2/INT2,",
    "TABLE 11-3: PORTB FUNCTIONS\nTRIS Setting = 1. RB2/INT2, I/O = I. RB2/INT2, I/O Type = TTL. RB2/INT2, Description = PORTB<2> data input; weak pull-up when RBPU bit is cleared.. RB2/INT2, Function = INT2. RB2/INT2, TRIS Setting = 1. RB2/INT2, I/O = I. RB2/INT2, I/O Type = ST. RB2/INT2, Description = External Interrupt 2 input.. RB3/INT3/ CCP2, Function = RB3. RB3/INT3/ CCP2, TRIS Setting = 0. RB3/INT3/ CCP2, I/O = O. RB3/INT3/ CCP2, I/O Type = DIG. RB3/INT3/ CCP2, Description = LATB<3> data output.. RB3/INT3/ CCP2, Function = RB3. RB3/INT3/ CCP2, TRIS Setting = 1. RB3/INT3/",
    "TABLE 11-3: PORTB FUNCTIONS\nCCP2, I/O = I. RB3/INT3/ CCP2, I/O Type = TTL. RB3/INT3/ CCP2, Description = PORTB<3> data input; weak pull-up when RBPU bit is cleared.. RB3/INT3/ CCP2, Function = INT3. RB3/INT3/ CCP2, TRIS Setting = 1. RB3/INT3/ CCP2, I/O = I. RB3/INT3/ CCP2, I/O Type = ST. RB3/INT3/ CCP2, Description = External Interrupt 3 input.. RB3/INT3/ CCP2, Function = CCP2 (1). RB3/INT3/ CCP2, TRIS Setting = 0. RB3/INT3/ CCP2, I/O = O. RB3/INT3/ CCP2, I/O Type = DIG. RB3/INT3/ CCP2, Description = CCP2 compare output and CCP2 PWMoutput; takes priority over port data..",
    "TABLE 11-3: PORTB FUNCTIONS\nRB3/INT3/ CCP2, Function = CCP2 (1). RB3/INT3/ CCP2, TRIS Setting = 1. RB3/INT3/ CCP2, I/O = I. RB3/INT3/ CCP2, I/O Type = ST. RB3/INT3/ CCP2, Description = CCP2 capture input.. RB4/KBI0, Function = RB4. RB4/KBI0, TRIS Setting = 0. RB4/KBI0, I/O = O. RB4/KBI0, I/O Type = DIG. RB4/KBI0, Description = LATB<4> data output.. RB4/KBI0, Function = RB4. RB4/KBI0, TRIS Setting = 1. RB4/KBI0, I/O = I. RB4/KBI0, I/O Type = TTL. RB4/KBI0, Description = PORTB<4> data input; weak pull-up when RBPU bit is cleared.. RB4/KBI0, Function",
    "TABLE 11-3: PORTB FUNCTIONS\n= KBI0. RB4/KBI0, TRIS Setting = 1. RB4/KBI0, I/O = I. RB4/KBI0, I/O Type = TTL. RB4/KBI0, Description = Interrupt-on-change pin.. RB5/KBI1, Function = RB5. RB5/KBI1, TRIS Setting = 0. RB5/KBI1, I/O = O. RB5/KBI1, I/O Type = DIG. RB5/KBI1, Description = LATB<5> data output. RB5/KBI1, Function = RB5. RB5/KBI1, TRIS Setting = 1. RB5/KBI1, I/O = I. RB5/KBI1, I/O Type = TTL. RB5/KBI1, Description = PORTB<5> data input; weak pull-up when RBPU bit is cleared.. RB5/KBI1, Function = KBI1. RB5/KBI1, TRIS Setting = 1. RB5/KBI1,",
    "TABLE 11-3: PORTB FUNCTIONS\nI/O = I. RB5/KBI1, I/O Type = TTL. RB5/KBI1, Description = Interrupt-on-change pin.. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 0. RB6/KBI2/PGC, I/O = O. RB6/KBI2/PGC, I/O Type = DIG. RB6/KBI2/PGC, Description = LATB<6> data output. RB6/KBI2/PGC, Function = RB6. RB6/KBI2/PGC, TRIS Setting = 1. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = PORTB<6> data input; weak pull-up when RBPU bit is cleared.. RB6/KBI2/PGC, Function = KBI2. RB6/KBI2/PGC, TRIS",
    "TABLE 11-3: PORTB FUNCTIONS\nSetting = 1. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = TTL. RB6/KBI2/PGC, Description = Interrupt-on-change pin.. RB6/KBI2/PGC, Function = PGC. RB6/KBI2/PGC, TRIS Setting = x. RB6/KBI2/PGC, I/O = I. RB6/KBI2/PGC, I/O Type = ST. RB6/KBI2/PGC, Description = Serial execution (ICSP\u2122) clock input for ICSP and ICD operation. (2). RB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS Setting = 0. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG. RB7/KBI3/PGD, Description = LATB<7> data output..",
    "TABLE 11-3: PORTB FUNCTIONS\nRB7/KBI3/PGD, Function = RB7. RB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = PORTB<7> data input; weak pull-up when RBPU bit is cleared.. RB7/KBI3/PGD, Function = KBI3. RB7/KBI3/PGD, TRIS Setting = 1. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = TTL. RB7/KBI3/PGD, Description = Interrupt-on-change pin.. RB7/KBI3/PGD, Function = PGD. RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = O. RB7/KBI3/PGD, I/O Type = DIG.",
    "TABLE 11-3: PORTB FUNCTIONS\nRB7/KBI3/PGD, Description = Serial execution data output for ICSP and ICD operation. (2). RB7/KBI3/PGD, Function = PGD. RB7/KBI3/PGD, TRIS Setting = x. RB7/KBI3/PGD, I/O = I. RB7/KBI3/PGD, I/O Type = ST. RB7/KBI3/PGD, Description = Serial execution data input for ICSP and ICD operation. (2)\nLegend: O = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input, TTL = TTL Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: Alternate assignment for CCP2 when the CCP2MX Configuration bit is cleared (Microprocessor, Extended Microcontroller and Microcontroller with Boot Block modes, 80-pin devices only); default assignment is RC1.\n2: All other pin functions are disabled when ICSP or ICD operations are enabled.",
    "TABLE 11-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Reset Values on Page = 66. LATB, Bit 7 = LATB Output Latch Register. LATB, Bit 6 = LATB Output Latch Register. LATB, Bit 5 = LATB Output Latch Register. LATB, Bit 4 = LATB Output Latch Register. LATB, Bit 3 = LATB Output Latch Register. LATB, Bit 2 = LATB Output Latch Register. LATB, Bit 1 = LATB Output Latch Register. LATB, Bit 0 = LATB Output Latch Register. LATB, Reset Values on Page = 66. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB,",
    "TABLE 11-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nBit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on Page = 66. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = INTEDG3. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 =",
    "TABLE 11-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nINT3IP. INTCON2, Bit 0 = RBIP. INTCON2, Reset Values on Page = 63. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = INT3IE. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = INT3IF. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Reset Values on Page = 63\nLegend: Shaded cells are not used by PORTB.",
    "11.3 PORTC, TRISC and LATC Registers\nPORTC is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISC.  Setting a TRISC bit (= 1 )  will  make the corresponding PORTC pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISC bit (= 0 ) will make the corresponding PORTC pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATC)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATC register  read  and  write  the  latched  output  value  for PORTC.\nPORTC is multiplexed with several peripheral functions (Table 11-5).  The  pins  have  Schmitt  Trigger  input buffers.  RC1  is  normally  configured  by  Configuration bit, CCP2MX, as the default peripheral pin of the CCP2 module (default/erased state, CCP2MX = 1 ).",
    "11.3 PORTC, TRISC and LATC Registers\nWhen  enabling  peripheral  functions,  care  should  be taken in defining TRIS bits for each PORTC pin. Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. The user should refer to the corresponding peripheral section for the correct TRIS bit settings.\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nThe  contents  of  the  TRISC  register  are  affected  by peripheral  overrides.  Reading  TRISC  always  returns the current contents, even though a peripheral device may be overriding one or more of the pins.",
    "EXAMPLE 11-3: INITIALIZING PORTC\nCLRF, 1 = PORTC. CLRF, 2 = ; Initialize ; clearing ; data. CLRF, 1 = LATC. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RC<3:0> as inputs ; RC<5:4> as outputs ; RC<7:6> as inputs",
    "TABLE 11-5: PORTC FUNCTIONS\nRC0/T1OSO/T13CKI, Function = RC0. RC0/T1OSO/T13CKI, TRIS Setting = 0. RC0/T1OSO/T13CKI, I/O = O. RC0/T1OSO/T13CKI, I/O Type = DIG. RC0/T1OSO/T13CKI, Description = LATC<0> data output.. RC0/T1OSO/T13CKI, Function = . RC0/T1OSO/T13CKI, TRIS Setting = 1. RC0/T1OSO/T13CKI, I/O = I. RC0/T1OSO/T13CKI, I/O Type = ST. RC0/T1OSO/T13CKI, Description = PORTC<0> data input.. RC0/T1OSO/T13CKI, Function = T1OSO. RC0/T1OSO/T13CKI, TRIS Setting = x. RC0/T1OSO/T13CKI, I/O = O. RC0/T1OSO/T13CKI, I/O Type = ANA.",
    "TABLE 11-5: PORTC FUNCTIONS\nRC0/T1OSO/T13CKI, Description = Timer1 oscillator output; enabled when Timer1 oscillator is enabled. Disables digital I/O.. RC0/T1OSO/T13CKI, Function = T13CKI. RC0/T1OSO/T13CKI, TRIS Setting = 1. RC0/T1OSO/T13CKI, I/O = I. RC0/T1OSO/T13CKI, I/O Type = ST. RC0/T1OSO/T13CKI, Description = Timer1/Timer3 counter input.. RC1/T1OSI/CCP2, Function = RC1. RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O. RC1/T1OSI/CCP2, I/O Type = DIG. RC1/T1OSI/CCP2, Description = LATC<1> data output.. RC1/T1OSI/CCP2, Function = . RC1/T1OSI/CCP2,",
    "TABLE 11-5: PORTC FUNCTIONS\nTRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = PORTC<1> data input.. RC1/T1OSI/CCP2, Function = T1OSI. RC1/T1OSI/CCP2, TRIS Setting = x. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ANA. RC1/T1OSI/CCP2, Description = Timer1 oscillator input; enabled when Timer1 oscillator is enabled. Disables digital I/O.. RC1/T1OSI/CCP2, Function = CCP2 (1). RC1/T1OSI/CCP2, TRIS Setting = 0. RC1/T1OSI/CCP2, I/O = O. RC1/T1OSI/CCP2, I/O Type = DIG.",
    "TABLE 11-5: PORTC FUNCTIONS\nRC1/T1OSI/CCP2, Description = CCP2 compare output and CCP2 PWM output; takes priority over port data.. RC1/T1OSI/CCP2, Function = . RC1/T1OSI/CCP2, TRIS Setting = 1. RC1/T1OSI/CCP2, I/O = I. RC1/T1OSI/CCP2, I/O Type = ST. RC1/T1OSI/CCP2, Description = CCP2 capture input. RC2/CCP1, Function = RC2. RC2/CCP1, TRIS Setting = 0. RC2/CCP1, I/O = O. RC2/CCP1, I/O Type = DIG. RC2/CCP1, Description = LATC<2> data output.. RC2/CCP1, Function = . RC2/CCP1, TRIS Setting = 1. RC2/CCP1, I/O = I. RC2/CCP1, I/O Type = ST. RC2/CCP1, Description =",
    "TABLE 11-5: PORTC FUNCTIONS\nPORTC<2> data input.. RC2/CCP1, Function = CCP1. RC2/CCP1, TRIS Setting = 0. RC2/CCP1, I/O = O. RC2/CCP1, I/O Type = DIG. RC2/CCP1, Description = CCP1 compare output and CCP1 PWM output; takes priority over port data.. RC2/CCP1, Function = . RC2/CCP1, TRIS Setting = 1. RC2/CCP1, I/O = I. RC2/CCP1, I/O Type = ST. RC2/CCP1, Description = CCP1 capture input.. RC3/SCK/SCL, Function = RC3. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = LATC<3> data output.. RC3/SCK/SCL, Function",
    "TABLE 11-5: PORTC FUNCTIONS\n= . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = PORTC<3> data input.. RC3/SCK/SCL, Function = SCK. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = SPI clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = SPI clock input (MSSP module).. RC3/SCK/SCL, Function =",
    "TABLE 11-5: PORTC FUNCTIONS\nSCL. RC3/SCK/SCL, TRIS Setting = 0. RC3/SCK/SCL, I/O = O. RC3/SCK/SCL, I/O Type = DIG. RC3/SCK/SCL, Description = I 2 C\u2122 clock output (MSSP module); takes priority over port data.. RC3/SCK/SCL, Function = . RC3/SCK/SCL, TRIS Setting = 1. RC3/SCK/SCL, I/O = I. RC3/SCK/SCL, I/O Type = ST. RC3/SCK/SCL, Description = I 2 C clock input (MSSP module); input type depends on module setting.. RC4/SDI/SDA, Function = RC4. RC4/SDI/SDA, TRIS Setting = 0. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = LATC<4> data output..",
    "TABLE 11-5: PORTC FUNCTIONS\nRC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = PORTC<4> data input.. RC4/SDI/SDA, Function = SDI. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = SPI data input (MSSP module).. RC4/SDI/SDA, Function = SDA. RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = O. RC4/SDI/SDA, I/O Type = DIG. RC4/SDI/SDA, Description = I 2 C data output (MSSP module); takes priority over port",
    "TABLE 11-5: PORTC FUNCTIONS\ndata.. RC4/SDI/SDA, Function = . RC4/SDI/SDA, TRIS Setting = 1. RC4/SDI/SDA, I/O = I. RC4/SDI/SDA, I/O Type = ST. RC4/SDI/SDA, Description = I 2 C data input (MSSP module); input type depends on module setting.. RC5/SDO, Function = RC5. RC5/SDO, TRIS Setting = 0. RC5/SDO, I/O = O. RC5/SDO, I/O Type = DIG. RC5/SDO, Description = LATC<5> data output.. RC5/SDO, Function = . RC5/SDO, TRIS Setting = 1. RC5/SDO, I/O = I. RC5/SDO, I/O Type = ST. RC5/SDO, Description = PORTC<5> data input.. RC6/TX1/CK1, Function = SDO. RC6/TX1/CK1, TRIS Setting = 0.",
    "TABLE 11-5: PORTC FUNCTIONS\nRC6/TX1/CK1, I/O = O. RC6/TX1/CK1, I/O Type = DIG. RC6/TX1/CK1, Description = SPI data output (MSSP module); takes priority over port data.. RC6/TX1/CK1, Function = . RC6/TX1/CK1, TRIS Setting = 1. RC6/TX1/CK1, I/O = I. RC6/TX1/CK1, I/O Type = ST. RC6/TX1/CK1, Description = PORTC<6> data input.. , Function = RC6. , TRIS Setting = 0. , I/O = O. , I/O Type = DIG. , Description = LATC<6> data output.. , Function = TX1. , TRIS Setting = . , I/O = . , I/O Type = . , Description = . , Function = CK1. , TRIS Setting = 1. , I/O = O. , I/O Type = DIG. , Description = Synchronous serial data input (EUSART",
    "TABLE 11-5: PORTC FUNCTIONS\nmodule). User must configure as an input.. , Function = . , TRIS Setting = 1. , I/O = I. , I/O Type = ST. , Description = Synchronous serial clock input (EUSART module).. RC7/RX1/DT1, Function = RC7. RC7/RX1/DT1, TRIS Setting = 0. RC7/RX1/DT1, I/O = O. RC7/RX1/DT1, I/O Type = DIG. RC7/RX1/DT1, Description = LATC<7> data output.. RC7/RX1/DT1, Function = . RC7/RX1/DT1, TRIS Setting = 1. RC7/RX1/DT1, I/O = I. RC7/RX1/DT1, I/O Type = ST. RC7/RX1/DT1, Description = PORTC<7> data input.. RC7/RX1/DT1, Function = RX1.",
    "TABLE 11-5: PORTC FUNCTIONS\nRC7/RX1/DT1, TRIS Setting = 1. RC7/RX1/DT1, I/O = I. RC7/RX1/DT1, I/O Type = ST. RC7/RX1/DT1, Description = Asynchronous serial receive data input (EUSART module). RC7/RX1/DT1, Function = DT1. RC7/RX1/DT1, TRIS Setting = 1. RC7/RX1/DT1, I/O = O. RC7/RX1/DT1, I/O Type = DIG. RC7/RX1/DT1, Description = Synchronous serial data output (EUSART module); takes priority over port data.. RC7/RX1/DT1, Function = . RC7/RX1/DT1, TRIS Setting = 1. RC7/RX1/DT1, I/O = I. RC7/RX1/DT1, I/O Type = ST. RC7/RX1/DT1, Description =",
    "TABLE 11-5: PORTC FUNCTIONS\nSynchronous serial data input (EUSART module). User must configure as an input.\nLegend:\n- O = Output, I = Input, ANA = Analog Signal, DIG = Digital Output, ST = Schmitt Buffer Input,\nx = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: Default assignment for CCP2 when CCP2MX Configuration bit is set.",
    "TABLE 11-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nPORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Reset Values on Page = 66. LATC, Bit 7 = LATC Output Latch Register. LATC, Bit 6 = LATC Output Latch Register. LATC, Bit 5 = LATC Output Latch Register. LATC, Bit 4 = LATC Output Latch Register. LATC, Bit 3 = LATC Output Latch Register. LATC, Bit 2 = LATC Output Latch Register. LATC, Bit 1 = LATC Output Latch Register. LATC, Bit 0 = LATC Output Latch Register. LATC, Reset Values on Page = 66. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC",
    "TABLE 11-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nData Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on Page = 66",
    "11.4 PORTD, TRISD and LATD Registers\nPORTD is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISD.  Setting a TRISD bit (= 1 )  will  make the corresponding PORTD pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISD bit (= 0 ) will make the corresponding PORTD pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATD)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATD register  read  and  write  the  latched  output  value  for PORTD.\nAll  pins  on  PORTD  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.\nNote: On  a  Power-on  Reset,  these  pins  are\nconfigured as digital inputs.",
    "11.4 PORTD, TRISD and LATD Registers\nIn  80-pin  devices,  PORTD  is  multiplexed  with  the system bus as part of the external memory interface. I/O port and other functions are only available when the interface is disabled by setting the EBDIS bit (MEMCON<7>). When the interface is enabled, PORTD  is  the  low-order  byte  of  the multiplexed address/data bus (AD<7:0>). The TRISD bits are also overridden.\nPORTD can also be configured to function as an 8-bit wide parallel microprocessor port by setting the PSPMODE Control bit  (PSPCON<4>).  In  this  mode, parallel port data takes priority over other digital I/O (but not the external memory interface). When the parallel port  is  active,  the  input  buffers  are  TTL.  For  more information,  refer  to Section 11.10  'Parallel  Slave Port' .",
    "EXAMPLE 11-4: INITIALIZING PORTD\nCLRF, 1 = PORTD. CLRF, 2 = ; Initialize PORTD by ; clearing output ; data latches. CLRF, 1 = LATD. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISD. MOVWF, 2 = ; Set RD<3:0> as inputs ; RD<5:4> as outputs ; RD<7:6> as inputs",
    "TABLE 11-7: PORTD FUNCTIONS\nRD0/AD0/PSP0, Function = RD0. RD0/AD0/PSP0, TRIS Setting = 0. RD0/AD0/PSP0, I/O = O. RD0/AD0/PSP0, I/O Type = DIG. RD0/AD0/PSP0, Description = LATD<0> data output.. RD0/AD0/PSP0, Function = . RD0/AD0/PSP0, TRIS Setting = 1. RD0/AD0/PSP0, I/O = I. RD0/AD0/PSP0, I/O Type = ST. RD0/AD0/PSP0, Description = PORTD<0> data input.. RD0/AD0/PSP0, Function = AD0 (2). RD0/AD0/PSP0, TRIS Setting = x. RD0/AD0/PSP0, I/O = O. RD0/AD0/PSP0, I/O Type = DIG. RD0/AD0/PSP0, Description =",
    "TABLE 11-7: PORTD FUNCTIONS\nExternal memory interface, Address/Data Bit 0 output. (1). RD0/AD0/PSP0, Function = . RD0/AD0/PSP0, TRIS Setting = x. RD0/AD0/PSP0, I/O = I. RD0/AD0/PSP0, I/O Type = TTL. RD0/AD0/PSP0, Description = External memory interface, Data Bit 0 input. (1). RD0/AD0/PSP0, Function = PSP0. RD0/AD0/PSP0, TRIS Setting = x. RD0/AD0/PSP0, I/O = O. RD0/AD0/PSP0, I/O Type = DIG. RD0/AD0/PSP0, Description = PSP read data output (LATD<0>); takes priority over port data.. RD0/AD0/PSP0, Function = . RD0/AD0/PSP0, TRIS Setting = x. RD0/AD0/PSP0, I/O = I.",
    "TABLE 11-7: PORTD FUNCTIONS\nRD0/AD0/PSP0, I/O Type = TTL. RD0/AD0/PSP0, Description = PSP write data input.. RD1/AD1/PSP1, Function = RD1. RD1/AD1/PSP1, TRIS Setting = 0. RD1/AD1/PSP1, I/O = O. RD1/AD1/PSP1, I/O Type = DIG. RD1/AD1/PSP1, Description = LATD<1> data output.. RD1/AD1/PSP1, Function = . RD1/AD1/PSP1, TRIS Setting = 1. RD1/AD1/PSP1, I/O = I. RD1/AD1/PSP1, I/O Type = ST. RD1/AD1/PSP1, Description = PORTD<1> data input.. RD1/AD1/PSP1, Function = AD1 (2). RD1/AD1/PSP1, TRIS Setting = x.",
    "TABLE 11-7: PORTD FUNCTIONS\nRD1/AD1/PSP1, I/O = O. RD1/AD1/PSP1, I/O Type = DIG. RD1/AD1/PSP1, Description = External memory interface, Address/Data Bit 1 output. (1). RD1/AD1/PSP1, Function = . RD1/AD1/PSP1, TRIS Setting = x. RD1/AD1/PSP1, I/O = I. RD1/AD1/PSP1, I/O Type = TTL. RD1/AD1/PSP1, Description = External memory interface, Data Bit 1 input. (1). RD1/AD1/PSP1, Function = PSP1. RD1/AD1/PSP1, TRIS Setting = x. RD1/AD1/PSP1, I/O = O. RD1/AD1/PSP1, I/O Type = DIG. RD1/AD1/PSP1, Description = PSP read data output (LATD<1>); takes priority over port data..",
    "TABLE 11-7: PORTD FUNCTIONS\nRD1/AD1/PSP1, Function = . RD1/AD1/PSP1, TRIS Setting = x. RD1/AD1/PSP1, I/O = I. RD1/AD1/PSP1, I/O Type = TTL. RD1/AD1/PSP1, Description = PSP write data input.. RD2/AD2/PSP2, Function = RD2. RD2/AD2/PSP2, TRIS Setting = 0. RD2/AD2/PSP2, I/O = O. RD2/AD2/PSP2, I/O Type = DIG. RD2/AD2/PSP2, Description = LATD<2> data output.. RD2/AD2/PSP2, Function = . RD2/AD2/PSP2, TRIS Setting = 1. RD2/AD2/PSP2, I/O = I. RD2/AD2/PSP2, I/O Type = ST. RD2/AD2/PSP2, Description = PORTD<2> data",
    "TABLE 11-7: PORTD FUNCTIONS\ninput.. RD2/AD2/PSP2, Function = AD2 (2). RD2/AD2/PSP2, TRIS Setting = x. RD2/AD2/PSP2, I/O = O. RD2/AD2/PSP2, I/O Type = DIG. RD2/AD2/PSP2, Description = External memory interface, Address/Data Bit 2 output. (1). RD2/AD2/PSP2, Function = . RD2/AD2/PSP2, TRIS Setting = x. RD2/AD2/PSP2, I/O = I. RD2/AD2/PSP2, I/O Type = TTL. RD2/AD2/PSP2, Description = External memory interface, Data Bit 2 input. (1). RD2/AD2/PSP2, Function = PSP2. RD2/AD2/PSP2, TRIS Setting = x. RD2/AD2/PSP2, I/O = O. RD2/AD2/PSP2, I/O Type =",
    "TABLE 11-7: PORTD FUNCTIONS\nDIG. RD2/AD2/PSP2, Description = PSP read data output (LATD<2>); takes priority over port data.. RD2/AD2/PSP2, Function = . RD2/AD2/PSP2, TRIS Setting = x. RD2/AD2/PSP2, I/O = I. RD2/AD2/PSP2, I/O Type = TTL. RD2/AD2/PSP2, Description = PSP write data input.. RD3/AD3/PSP3, Function = RD3. RD3/AD3/PSP3, TRIS Setting = 0. RD3/AD3/PSP3, I/O = O. RD3/AD3/PSP3, I/O Type = DIG. RD3/AD3/PSP3, Description = LATD<3> data output.. RD3/AD3/PSP3, Function = . RD3/AD3/PSP3, TRIS Setting = 1. RD3/AD3/PSP3, I/O = I.",
    "TABLE 11-7: PORTD FUNCTIONS\nRD3/AD3/PSP3, I/O Type = ST. RD3/AD3/PSP3, Description = PORTD<3> data input.. RD3/AD3/PSP3, Function = AD3 (2). RD3/AD3/PSP3, TRIS Setting = x. RD3/AD3/PSP3, I/O = O. RD3/AD3/PSP3, I/O Type = DIG. RD3/AD3/PSP3, Description = External memory interface, Address/Data Bit 3 output. (1). RD3/AD3/PSP3, Function = . RD3/AD3/PSP3, TRIS Setting = x. RD3/AD3/PSP3, I/O = I. RD3/AD3/PSP3, I/O Type = TTL. RD3/AD3/PSP3, Description = External memory interface, Data Bit 3 input. (1). RD3/AD3/PSP3, Function = PSP3. RD3/AD3/PSP3, TRIS",
    "TABLE 11-7: PORTD FUNCTIONS\nSetting = x. RD3/AD3/PSP3, I/O = O. RD3/AD3/PSP3, I/O Type = DIG. RD3/AD3/PSP3, Description = PSP read data output (LATD<3>); takes priority over port data.. RD3/AD3/PSP3, Function = . RD3/AD3/PSP3, TRIS Setting = x. RD3/AD3/PSP3, I/O = I. RD3/AD3/PSP3, I/O Type = TTL. RD3/AD3/PSP3, Description = PSP write data input.. RD4/AD4/PSP4, Function = RD4. RD4/AD4/PSP4, TRIS Setting = 0. RD4/AD4/PSP4, I/O = O. RD4/AD4/PSP4, I/O Type = DIG. RD4/AD4/PSP4, Description = LATD<4> data output.. RD4/AD4/PSP4,",
    "TABLE 11-7: PORTD FUNCTIONS\nFunction = . RD4/AD4/PSP4, TRIS Setting = 1. RD4/AD4/PSP4, I/O = I. RD4/AD4/PSP4, I/O Type = ST. RD4/AD4/PSP4, Description = PORTD<4> data input.. RD4/AD4/PSP4, Function = AD4 (2). RD4/AD4/PSP4, TRIS Setting = x. RD4/AD4/PSP4, I/O = O. RD4/AD4/PSP4, I/O Type = DIG. RD4/AD4/PSP4, Description = External memory interface, Address/Data Bit 4 output. (1). RD4/AD4/PSP4, Function = . RD4/AD4/PSP4, TRIS Setting = x. RD4/AD4/PSP4, I/O = I. RD4/AD4/PSP4, I/O Type = TTL. RD4/AD4/PSP4, Description = External memory interface, Data Bit",
    "TABLE 11-7: PORTD FUNCTIONS\n4 input. (1). RD4/AD4/PSP4, Function = PSP4. RD4/AD4/PSP4, TRIS Setting = x. RD4/AD4/PSP4, I/O = O. RD4/AD4/PSP4, I/O Type = DIG. RD4/AD4/PSP4, Description = PSP read data output (LATD<4>); takes priority over port data.. RD4/AD4/PSP4, Function = . RD4/AD4/PSP4, TRIS Setting = x. RD4/AD4/PSP4, I/O = I. RD4/AD4/PSP4, I/O Type = TTL. RD4/AD4/PSP4, Description = PSP write data input.. RD5/AD5/PSP5, Function = RD5. RD5/AD5/PSP5, TRIS Setting = 0. RD5/AD5/PSP5, I/O = O. RD5/AD5/PSP5, I/O Type",
    "TABLE 11-7: PORTD FUNCTIONS\n= DIG. RD5/AD5/PSP5, Description = LATD<5> data output.. RD5/AD5/PSP5, Function = . RD5/AD5/PSP5, TRIS Setting = 1. RD5/AD5/PSP5, I/O = I. RD5/AD5/PSP5, I/O Type = ST. RD5/AD5/PSP5, Description = PORTD<5> data input.. RD5/AD5/PSP5, Function = AD5 (2). RD5/AD5/PSP5, TRIS Setting = x. RD5/AD5/PSP5, I/O = O. RD5/AD5/PSP5, I/O Type = DIG. RD5/AD5/PSP5, Description = External memory interface, Address/Data Bit 5 output. (1). RD5/AD5/PSP5, Function = . RD5/AD5/PSP5, TRIS Setting = x. RD5/AD5/PSP5, I/O = I.",
    "TABLE 11-7: PORTD FUNCTIONS\nRD5/AD5/PSP5, I/O Type = TTL. RD5/AD5/PSP5, Description = External memory interface, Data Bit 5 input. (1). RD5/AD5/PSP5, Function = PSP5. RD5/AD5/PSP5, TRIS Setting = x. RD5/AD5/PSP5, I/O = O. RD5/AD5/PSP5, I/O Type = DIG. RD5/AD5/PSP5, Description = PSP read data output (LATD<5>); takes priority over port data.. RD5/AD5/PSP5, Function = . RD5/AD5/PSP5, TRIS Setting = x. RD5/AD5/PSP5, I/O = I. RD5/AD5/PSP5, I/O Type = TTL. RD5/AD5/PSP5, Description = PSP write data input.. RD6/AD6/PSP6, Function = RD6. RD6/AD6/PSP6,",
    "TABLE 11-7: PORTD FUNCTIONS\nTRIS Setting = 0. RD6/AD6/PSP6, I/O = O. RD6/AD6/PSP6, I/O Type = DIG. RD6/AD6/PSP6, Description = LATD<6> data output.. RD6/AD6/PSP6, Function = . RD6/AD6/PSP6, TRIS Setting = 1. RD6/AD6/PSP6, I/O = I. RD6/AD6/PSP6, I/O Type = ST. RD6/AD6/PSP6, Description = PORTD<6> data input.. RD6/AD6/PSP6, Function = AD6 (2). RD6/AD6/PSP6, TRIS Setting = x. RD6/AD6/PSP6, I/O = O. RD6/AD6/PSP6, I/O Type = DIG-3. RD6/AD6/PSP6, Description = External memory interface, Address/Data Bit 6 output. (1).",
    "TABLE 11-7: PORTD FUNCTIONS\nRD6/AD6/PSP6, Function = . RD6/AD6/PSP6, TRIS Setting = x. RD6/AD6/PSP6, I/O = I. RD6/AD6/PSP6, I/O Type = TTL. RD6/AD6/PSP6, Description = External memory interface, Data Bit 6 input. (1). RD6/AD6/PSP6, Function = PSP6. RD6/AD6/PSP6, TRIS Setting = x. RD6/AD6/PSP6, I/O = O. RD6/AD6/PSP6, I/O Type = DIG. RD6/AD6/PSP6, Description = PSP read data output (LATD<6>); takes priority over port data.. RD6/AD6/PSP6, Function = . RD6/AD6/PSP6, TRIS Setting = x. RD6/AD6/PSP6, I/O = I. RD6/AD6/PSP6, I/O Type =",
    "TABLE 11-7: PORTD FUNCTIONS\nTTL. RD6/AD6/PSP6, Description = PSP write data input.\nLegend:\n- O = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input, TTL = TTL Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote\n1: External memory interface I/O takes priority over all other digital and PSP I/O.\n2: Implemented on 80-pin devices only.",
    "TABLE 11-7: PORTD FUNCTIONS (CONTINUED)\nRD7/AD7/PSP7, Function = RD7. RD7/AD7/PSP7, TRIS Setting = 0. RD7/AD7/PSP7, I/O = O. RD7/AD7/PSP7, I/O Type = DIG. RD7/AD7/PSP7, Description = LATD<7> data output.. RD7/AD7/PSP7, Function = . RD7/AD7/PSP7, TRIS Setting = 1. RD7/AD7/PSP7, I/O = I. RD7/AD7/PSP7, I/O Type = ST. RD7/AD7/PSP7, Description = PORTD<7> data input.. RD7/AD7/PSP7, Function = AD7 (2). RD7/AD7/PSP7, TRIS Setting = x. RD7/AD7/PSP7, I/O = O. RD7/AD7/PSP7, I/O Type = DIG.",
    "TABLE 11-7: PORTD FUNCTIONS (CONTINUED)\nRD7/AD7/PSP7, Description = External memory interface, Address/Data Bit 7 output (1) .. RD7/AD7/PSP7, Function = . RD7/AD7/PSP7, TRIS Setting = x. RD7/AD7/PSP7, I/O = I. RD7/AD7/PSP7, I/O Type = TTL. RD7/AD7/PSP7, Description = External memory interface, Data Bit 7 input (1). RD7/AD7/PSP7, Function = PSP7. RD7/AD7/PSP7, TRIS Setting = x. RD7/AD7/PSP7, I/O = O. RD7/AD7/PSP7, I/O Type = DIG. RD7/AD7/PSP7, Description = PSP read data output (LATD<7>); takes priority over port data.. RD7/AD7/PSP7, Function = . RD7/AD7/PSP7, TRIS Setting = x.",
    "TABLE 11-7: PORTD FUNCTIONS (CONTINUED)\nRD7/AD7/PSP7, I/O = I. RD7/AD7/PSP7, I/O Type = TTL. RD7/AD7/PSP7, Description = PSP write data input.\nLegend:\nO = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input, TTL = TTL Buffer Input,\nx = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1:\nExternal memory interface I/O takes priority over all other digital and PSP I/O.\n2: Implemented on 80-pin devices only.",
    "TABLE 11-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on Page = 66. LATD, Bit 7 = LATD Output Latch Register. LATD, Bit 6 = LATD Output Latch Register. LATD, Bit 5 = LATD Output Latch Register. LATD, Bit 4 = LATD Output Latch Register. LATD, Bit 3 = LATD Output Latch Register. LATD, Bit 2 = LATD Output Latch Register. LATD, Bit 1 = LATD Output Latch Register. LATD, Bit 0 = LATD Output Latch Register. LATD, Reset Values on Page = 66. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD,",
    "TABLE 11-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nBit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Reset Values on Page = 66",
    "11.5 PORTE, TRISE and LATE Registers\nPORTE  is  an  8-bit wide, bidirectional port. The corresponding Data Direction register is TRISE. Setting a TRISE bit (= 1 ) will make the corresponding PORTE pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISE bit (= 0 ) will make the corresponding PORTE pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATE)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATE register  read  and  write  the  latched  output  value  for PORTE.\nAll  pins  on  PORTE  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.\nNote: On  a  Power-on  Reset,  these  pins  are configured as digital inputs.\nWhen the device is operating in Microcontroller mode, pin RE7 can be configured as the alternate peripheral pin for the CCP2 module. This is done by clearing the CCP2MX Configuration bit.",
    "11.5 PORTE, TRISE and LATE Registers\nIn  80-pin  devices,  PORTE  is  multiplexed  with  the system bus as part of the external memory interface. I/O port and other functions are only available when the interface is disabled by setting the EBDIS bit (MEMCON<7>). When the interface is enabled (80-pin devices  only),  PORTE  is  the  high-order  byte  of  the multiplexed address/data bus (AD<15:8>). The TRISE bits are also overridden.\nWhen the Parallel Slave Port is active on PORTD, three of  the  PORTE  pins  (RE0/AD8/RD,  RE1/AD9/WR  and RE2/AD10/CS) are configured as digital control inputs for  the  port.  The  control  functions  are  summarized  in Table 11-9.  The  reconfiguration  occurs  automatically when the PSPMODE Control bit (PSPCON<4>) is set. Users must still make certain the corresponding TRISE bits are set to configure these pins as digital inputs.",
    "EXAMPLE 11-5: INITIALIZING PORTE\nCLRF, 1 = PORTE. CLRF, 2 = ; Initialize PORTE by ; clearing output ; data latches. CLRF, 1 = LATE. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 03h. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISE. MOVWF, 2 = ; Set RE<1:0> as inputs ; RE<7:2> as outputs",
    "TABLE 11-9: PORTE FUNCTIONS\nRE0/AD8/RD, Function = RE0. RE0/AD8/RD, TRIS Setting = 0. RE0/AD8/RD, I/O = O. RE0/AD8/RD, I/O Type = DIG. RE0/AD8/RD, Description = LATE<0> data output.. RE0/AD8/RD, Function = RE0. RE0/AD8/RD, TRIS Setting = 1. RE0/AD8/RD, I/O = I. RE0/AD8/RD, I/O Type = ST. RE0/AD8/RD, Description = PORTE<0> data input.. RE0/AD8/RD, Function = AD8 (3). RE0/AD8/RD, TRIS Setting = x. RE0/AD8/RD, I/O = O. RE0/AD8/RD, I/O Type = DIG. RE0/AD8/RD, Description = External memory interface, Address/Data Bit 8 output. (2). RE0/AD8/RD, Function = AD8 (3).",
    "TABLE 11-9: PORTE FUNCTIONS\nRE0/AD8/RD, TRIS Setting = x. RE0/AD8/RD, I/O = I. RE0/AD8/RD, I/O Type = TTL. RE0/AD8/RD, Description = External memory interface, Data Bit 8 input. (2). RE0/AD8/RD, Function = RD. RE0/AD8/RD, TRIS Setting = 1. RE0/AD8/RD, I/O = I. RE0/AD8/RD, I/O Type = TTL. RE0/AD8/RD, Description = Parallel Slave Port read enable control input.. RE1/AD9/WR, Function = RE1. RE1/AD9/WR, TRIS Setting = 0. RE1/AD9/WR, I/O = O. RE1/AD9/WR, I/O Type = DIG. RE1/AD9/WR, Description = LATE<1> data output.. RE1/AD9/WR, Function = RE1. RE1/AD9/WR, TRIS Setting = 1.",
    "TABLE 11-9: PORTE FUNCTIONS\nRE1/AD9/WR, I/O = I. RE1/AD9/WR, I/O Type = ST. RE1/AD9/WR, Description = PORTE<1> data input.. RE1/AD9/WR, Function = AD9 (3). RE1/AD9/WR, TRIS Setting = x. RE1/AD9/WR, I/O = O. RE1/AD9/WR, I/O Type = DIG. RE1/AD9/WR, Description = External memory interface, Address/Data Bit 9 output. (2). RE1/AD9/WR, Function = AD9 (3). RE1/AD9/WR, TRIS Setting = x. RE1/AD9/WR, I/O = I. RE1/AD9/WR, I/O Type = TTL. RE1/AD9/WR, Description = External memory interface, Data Bit 9 input. (2). RE1/AD9/WR, Function = WR. RE1/AD9/WR, TRIS Setting = 1. RE1/AD9/WR,",
    "TABLE 11-9: PORTE FUNCTIONS\nI/O = I. RE1/AD9/WR, I/O Type = TTL. RE1/AD9/WR, Description = Parallel Slave Port write enable control input.. RE2/AD10/CS, Function = RE2. RE2/AD10/CS, TRIS Setting = 0. RE2/AD10/CS, I/O = O. RE2/AD10/CS, I/O Type = DIG. RE2/AD10/CS, Description = LATE<2> data output.. RE2/AD10/CS, Function = RE2. RE2/AD10/CS, TRIS Setting = 1. RE2/AD10/CS, I/O = I. RE2/AD10/CS, I/O Type = ST. RE2/AD10/CS, Description = PORTE<2> data input.. RE2/AD10/CS, Function = AD10 (3). RE2/AD10/CS, TRIS Setting = x. RE2/AD10/CS, I/O = O. RE2/AD10/CS, I/O Type = DIG.",
    "TABLE 11-9: PORTE FUNCTIONS\nRE2/AD10/CS, Description = External memory interface, Address/Data Bit 10 output. (2). RE2/AD10/CS, Function = AD10 (3). RE2/AD10/CS, TRIS Setting = x. RE2/AD10/CS, I/O = I. RE2/AD10/CS, I/O Type = TTL. RE2/AD10/CS, Description = External memory interface, Data Bit 10 input. (2). RE2/AD10/CS, Function = CS. RE2/AD10/CS, TRIS Setting = 1. RE2/AD10/CS, I/O = I. RE2/AD10/CS, I/O Type = TTL. RE2/AD10/CS, Description = Parallel Slave Port chip select control input.. RE3/AD11, Function = RE3. RE3/AD11, TRIS Setting = 0. RE3/AD11, I/O = O. RE3/AD11, I/O Type = DIG. RE3/AD11, Description = LATE<3> data output..",
    "TABLE 11-9: PORTE FUNCTIONS\nRE3/AD11, Function = RE3. RE3/AD11, TRIS Setting = 1. RE3/AD11, I/O = I. RE3/AD11, I/O Type = ST. RE3/AD11, Description = PORTE<3> data input.. RE3/AD11, Function = AD11 (3). RE3/AD11, TRIS Setting = x. RE3/AD11, I/O = O. RE3/AD11, I/O Type = DIG. RE3/AD11, Description = External memory interface, Address/Data Bit 11 output. (2). RE3/AD11, Function = AD11 (3). RE3/AD11, TRIS Setting = x. RE3/AD11, I/O = I. RE3/AD11, I/O Type = TTL. RE3/AD11, Description = External memory interface, Data Bit 11 input. (2). RE4/AD12, Function = RE4. RE4/AD12, TRIS Setting = 0. RE4/AD12, I/O = O.",
    "TABLE 11-9: PORTE FUNCTIONS\nRE4/AD12, I/O Type = DIG. RE4/AD12, Description = LATE<4> data output.. RE4/AD12, Function = RE4. RE4/AD12, TRIS Setting = 1. RE4/AD12, I/O = I. RE4/AD12, I/O Type = ST. RE4/AD12, Description = PORTE<4> data input.. RE4/AD12, Function = AD12 (3). RE4/AD12, TRIS Setting = x. RE4/AD12, I/O = O. RE4/AD12, I/O Type = DIG. RE4/AD12, Description = External memory interface, Address/Data Bit 12 output. (2). RE4/AD12, Function = AD12 (3). RE4/AD12, TRIS Setting = x. RE4/AD12, I/O = I. RE4/AD12, I/O Type = TTL. RE4/AD12, Description = External memory interface, Data Bit 12 input. (2). RE5/AD13, Function =",
    "TABLE 11-9: PORTE FUNCTIONS\nRE5. RE5/AD13, TRIS Setting = 0. RE5/AD13, I/O = O. RE5/AD13, I/O Type = DIG. RE5/AD13, Description = LATE<5> data output.. RE5/AD13, Function = RE5. RE5/AD13, TRIS Setting = 1. RE5/AD13, I/O = I. RE5/AD13, I/O Type = ST. RE5/AD13, Description = PORTE<5> data input.. RE5/AD13, Function = AD13 (3). RE5/AD13, TRIS Setting = x. RE5/AD13, I/O = O. RE5/AD13, I/O Type = DIG. RE5/AD13, Description = External memory interface, Address/Data Bit 13 output. (2). RE5/AD13, Function = AD13 (3). RE5/AD13, TRIS Setting = x. RE5/AD13, I/O = I. RE5/AD13, I/O Type = TTL.",
    "TABLE 11-9: PORTE FUNCTIONS\nRE5/AD13, Description = External memory interface, Data Bit 13 input. (2). RE6/AD14, Function = RE6. RE6/AD14, TRIS Setting = 0. RE6/AD14, I/O = O. RE6/AD14, I/O Type = DIG. RE6/AD14, Description = LATE<6> data output.. RE6/AD14, Function = RE6. RE6/AD14, TRIS Setting = 1. RE6/AD14, I/O = I. RE6/AD14, I/O Type = ST. RE6/AD14, Description = PORTE<6> data input.. RE6/AD14, Function = AD14 (3). RE6/AD14, TRIS Setting = x. RE6/AD14, I/O = O. RE6/AD14, I/O Type = DIG. RE6/AD14, Description = External memory interface, Address/Data Bit 14 output. (2). RE6/AD14, Function = AD14 (3). RE6/AD14, TRIS Setting = x.",
    "TABLE 11-9: PORTE FUNCTIONS\nRE6/AD14, I/O = I. RE6/AD14, I/O Type = TTL. RE6/AD14, Description = External memory interface, Data Bit 14 input. (2). RE7/CCP2/AD15, Function = RE7. RE7/CCP2/AD15, TRIS Setting = 0. RE7/CCP2/AD15, I/O = O. RE7/CCP2/AD15, I/O Type = DIG. RE7/CCP2/AD15, Description = LATE<7> data output.. RE7/CCP2/AD15, Function = RE7. RE7/CCP2/AD15, TRIS Setting = 1. RE7/CCP2/AD15, I/O = I. RE7/CCP2/AD15, I/O Type = ST. RE7/CCP2/AD15, Description = PORTE<7> data input.. RE7/CCP2/AD15, Function = CCP2 (1). RE7/CCP2/AD15, TRIS Setting =",
    "TABLE 11-9: PORTE FUNCTIONS\n0. RE7/CCP2/AD15, I/O = O. RE7/CCP2/AD15, I/O Type = DIG. RE7/CCP2/AD15, Description = CCP2 compare output and CCP2 PWMoutput; takes priority over port data.. RE7/CCP2/AD15, Function = CCP2 (1). RE7/CCP2/AD15, TRIS Setting = 1. RE7/CCP2/AD15, I/O = I. RE7/CCP2/AD15, I/O Type = ST. RE7/CCP2/AD15, Description = CCP2 capture input.. RE7/CCP2/AD15, Function = AD15 (3). RE7/CCP2/AD15, TRIS Setting = x. RE7/CCP2/AD15, I/O = O. RE7/CCP2/AD15, I/O Type = DIG. RE7/CCP2/AD15, Description = External memory interface, Address/Data Bit 15 output.",
    "TABLE 11-9: PORTE FUNCTIONS\n(2). RE7/CCP2/AD15, Function = AD15 (3). RE7/CCP2/AD15, TRIS Setting = x. RE7/CCP2/AD15, I/O = I. RE7/CCP2/AD15, I/O Type = TTL. RE7/CCP2/AD15, Description = External memory interface, Data Bit 15 input. (2)\nLegend:\nO = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input, TTL = TTL Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote\n1: Alternate assignment for CCP2 when CCP2MX Configuration bit is cleared (all devices in Microcontroller mode).\n2: External memory interface I/O takes priority over all other digital and PSP I/O.\n3: Implemented on 80-pin devices only.",
    "TABLE 11-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE, Bit 7 = RE7. PORTE, Bit 6 = RE6. PORTE, Bit 5 = RE5. PORTE, Bit 4 = RE4. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on Page = 66. LATE, Bit 7 = LATE Output Latch Register. LATE, Bit 6 = LATE Output Latch Register. LATE, Bit 5 = LATE Output Latch Register. LATE, Bit 4 = LATE Output Latch Register. LATE, Bit 3 = LATE Output Latch Register. LATE, Bit 2 = LATE Output Latch Register. LATE, Bit 1 = LATE Output Latch Register. LATE, Bit 0 = LATE Output Latch Register. LATE, Reset Values on Page = 66. TRISE, Bit 7 = PORTE Data Direction Register. TRISE, Bit 6 = PORTE Data Direction Register. TRISE, Bit 5 = PORTE Data Direction Register. TRISE, Bit 4 = PORTE Data Direction Register. TRISE, Bit 3 = PORTE Data Direction Register. TRISE, Bit 2 = PORTE Data Direction Register. TRISE, Bit 1 = PORTE Data Direction Register. TRISE, Bit 0 =",
    "TABLE 11-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE Data Direction Register. TRISE, Reset Values on Page = 66",
    "11.6 PORTF, LATF and TRISF Registers\nPORTF is an 8-bit wide, bidirectional port. The corresponding  Data  Direction  register  is  TRISF.  Setting  a TRISF bit (= 1 ) will make the corresponding PORTF pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISF bit (= 0 ) will make the corresponding PORTF pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATF)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATF register  read  and  write  the  latched  output  value  for PORTF.\nAll  pins  on  PORTF  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.",
    "11.6 PORTF, LATF and TRISF Registers\nPORTF is multiplexed with several analog peripheral functions, including the A/D Converter and comparator inputs,  as well as the comparator outputs. Pins, RF2 through  RF6,  may  be  used  as  comparator  inputs  or outputs by setting the appropriate bits in the CMCON register.  To  use  RF<6:3>  as  digital  inputs,  it  is  also necessary to turn off the comparators.\nNote:\nOn a Power-on Reset, RA5 and RA<3:0> are configured as analog inputs and read as ' 0 '. RA4 is configured as a digital input.\nNote 1: On a Power-on Reset, the RF<6:0> pins are configured as inputs and read as ' 0 '.\n2: To configure PORTF as a digital I/O, turn off the comparators and set the ADCON1 value.",
    "EXAMPLE 11-6: INITIALIZING PORTF\nCLRF, 1 = PORTF. CLRF, 2 = ; ;. CLRF, 3 = ; Initialize PORTF by clearing output data latches. CLRF, 1 = LATF. CLRF, 2 = ; ;. CLRF, 3 = Alternate method to clear output ; data latches. MOVLW MOVWF MOVLW, 1 = 0x07 CMCON 0x0F. MOVLW MOVWF MOVLW, 2 = ; ; ;. MOVLW MOVWF MOVLW, 3 = Turn off comparators. MOVWF MOVLW, 1 = ADCON1 0xCF. MOVWF MOVLW, 2 = ; ; ;. MOVWF MOVLW, 3 = Set PORTF as digital I/O Value used to initialize data. MOVWF, 1 = TRISF. MOVWF, 2 = ; ; ;. MOVWF, 3 = Set RF3:RF0 as inputs RF5:RF4 as outputs RF7:RF6 as inputs",
    "TABLE 11-11: PORTF FUNCTIONS\nRF0/AN5, Function = RF0. RF0/AN5, TRIS Setting = 0. RF0/AN5, I/O = O. RF0/AN5, I/O Type = DIG. RF0/AN5, Description = LATF<0> data output; not affected by analog input.. RF0/AN5, Function = RF0. RF0/AN5, TRIS Setting = 1. RF0/AN5, I/O = I. RF0/AN5, I/O Type = ST. RF0/AN5, Description = PORTF<0> data input; disabled when analog input is enabled.. RF0/AN5, Function = AN5. RF0/AN5, TRIS Setting = 1. RF0/AN5, I/O = I. RF0/AN5, I/O Type = ANA. RF0/AN5, Description = A/D Input Channel 5. Default configuration on POR.. RF1/AN6/C2OUT, Function = RF1. RF1/AN6/C2OUT, TRIS Setting = 0.",
    "TABLE 11-11: PORTF FUNCTIONS\nRF1/AN6/C2OUT, I/O = O. RF1/AN6/C2OUT, I/O Type = DIG. RF1/AN6/C2OUT, Description = LATF<1> data output; not affected by analog input.. RF1/AN6/C2OUT, Function = RF1. RF1/AN6/C2OUT, TRIS Setting = 1. RF1/AN6/C2OUT, I/O = I. RF1/AN6/C2OUT, I/O Type = ST. RF1/AN6/C2OUT, Description = PORTF<1> data input; disabled when analog input is enabled.. RF1/AN6/C2OUT, Function = AN6. RF1/AN6/C2OUT, TRIS Setting = 1. RF1/AN6/C2OUT, I/O = I. RF1/AN6/C2OUT, I/O Type = ANA. RF1/AN6/C2OUT, Description = A/D Input Channel 6. Default configuration on POR.. RF1/AN6/C2OUT, Function = C2OUT.",
    "TABLE 11-11: PORTF FUNCTIONS\nRF1/AN6/C2OUT, TRIS Setting = 0. RF1/AN6/C2OUT, I/O = O. RF1/AN6/C2OUT, I/O Type = DIG. RF1/AN6/C2OUT, Description = Comparator 2 output; takes priority over port data.. RF2/AN7/C1OUT, Function = RF2. RF2/AN7/C1OUT, TRIS Setting = 0. RF2/AN7/C1OUT, I/O = O. RF2/AN7/C1OUT, I/O Type = DIG. RF2/AN7/C1OUT, Description = LATF<2> data output; not affected by analog input.. RF2/AN7/C1OUT, Function = RF2. RF2/AN7/C1OUT, TRIS Setting = 1. RF2/AN7/C1OUT, I/O = I. RF2/AN7/C1OUT, I/O Type = ST. RF2/AN7/C1OUT, Description = PORTF<2> data input; disabled when analog input is enabled..",
    "TABLE 11-11: PORTF FUNCTIONS\nRF2/AN7/C1OUT, Function = AN7. RF2/AN7/C1OUT, TRIS Setting = 1. RF2/AN7/C1OUT, I/O = I. RF2/AN7/C1OUT, I/O Type = ANA. RF2/AN7/C1OUT, Description = A/D Input Channel 7. Default configuration on POR.. RF2/AN7/C1OUT, Function = C1OUT. RF2/AN7/C1OUT, TRIS Setting = 0. RF2/AN7/C1OUT, I/O = O. RF2/AN7/C1OUT, I/O Type = TTL. RF2/AN7/C1OUT, Description = Comparator 1 output; takes priority over port data.. RF3/AN8, Function = RF3. RF3/AN8, TRIS Setting = 0. RF3/AN8, I/O = O. RF3/AN8, I/O Type = DIG. RF3/AN8, Description = LATF<3> data output; not affected by analog input.. RF3/AN8, Function =",
    "TABLE 11-11: PORTF FUNCTIONS\nRF3. RF3/AN8, TRIS Setting = 1. RF3/AN8, I/O = I. RF3/AN8, I/O Type = ST. RF3/AN8, Description = PORTF<3> data input; disabled when analog input is enabled.. RF3/AN8, Function = AN8. RF3/AN8, TRIS Setting = 1. RF3/AN8, I/O = I. RF3/AN8, I/O Type = ANA. RF3/AN8, Description = A/D Input Channel 8 and Comparator C2+ input. Default input configuration on POR; not affected by analog output.. RF4/AN9, Function = RF4. RF4/AN9, TRIS Setting = 0. RF4/AN9, I/O = O. RF4/AN9, I/O Type = DIG. RF4/AN9, Description = LATF<4> data output; not affected by analog input.. RF4/AN9, Function = RF4. RF4/AN9, TRIS Setting = 1. RF4/AN9,",
    "TABLE 11-11: PORTF FUNCTIONS\nI/O = I. RF4/AN9, I/O Type = ST. RF4/AN9, Description = PORTF<4> data input; disabled when analog input is enabled.. RF4/AN9, Function = AN9. RF4/AN9, TRIS Setting = 1. RF4/AN9, I/O = I. RF4/AN9, I/O Type = ANA. RF4/AN9, Description = A/D Input Channel 9 and Comparator C2- input. Default input configuration on POR; does not affect digital output.. RF5/AN10/CVREF, Function = RF5. RF5/AN10/CVREF, TRIS Setting = 0. RF5/AN10/CVREF, I/O = O. RF5/AN10/CVREF, I/O Type = DIG. RF5/AN10/CVREF, Description = LATF<5> data output; not affected by analog input. Disabled when CVREF output is enabled.. RF5/AN10/CVREF, Function = RF5.",
    "TABLE 11-11: PORTF FUNCTIONS\nRF5/AN10/CVREF, TRIS Setting = 1. RF5/AN10/CVREF, I/O = I. RF5/AN10/CVREF, I/O Type = ST. RF5/AN10/CVREF, Description = PORTF<5> data input; disabled when analog input is enabled. Disabled when CVREF output is enabled. RF5/AN10/CVREF, Function = AN10. RF5/AN10/CVREF, TRIS Setting = 1. RF5/AN10/CVREF, I/O = I. RF5/AN10/CVREF, I/O Type = ANA. RF5/AN10/CVREF, Description = A/D Input Channel 10 and Comparator C1+ input. Default input configuration on POR.. RF5/AN10/CVREF, Function = CVREF. RF5/AN10/CVREF, TRIS Setting = x. RF5/AN10/CVREF, I/O = O. RF5/AN10/CVREF, I/O Type = ANA.",
    "TABLE 11-11: PORTF FUNCTIONS\nRF5/AN10/CVREF, Description = Comparator voltage reference output. Enabling this feature disables digital I/O.. RF6/AN11, Function = RF6. RF6/AN11, TRIS Setting = 0. RF6/AN11, I/O = O. RF6/AN11, I/O Type = DIG. RF6/AN11, Description = LATF<6> data output; not affected by analog input.. RF6/AN11, Function = RF6. RF6/AN11, TRIS Setting = 1. RF6/AN11, I/O = I. RF6/AN11, I/O Type = ST. RF6/AN11, Description = PORTF<6> data input; disabled when analog input is enabled.. RF6/AN11, Function = AN11. RF6/AN11, TRIS Setting = 1. RF6/AN11, I/O = I. RF6/AN11, I/O Type = ANA. RF6/AN11, Description = A/D Input Channel 11 and Comparator C1- input. Default input configuration on",
    "TABLE 11-11: PORTF FUNCTIONS\nPOR; does not affect digital output.. RF7/SS, Function = RF7. RF7/SS, TRIS Setting = 0. RF7/SS, I/O = O. RF7/SS, I/O Type = DIG. RF7/SS, Description = LATF<7> data output.. RF7/SS, Function = RF7. RF7/SS, TRIS Setting = 1. RF7/SS, I/O = I. RF7/SS, I/O Type = ST. RF7/SS, Description = PORTF<7> data input.. RF7/SS, Function = SS. RF7/SS, TRIS Setting = 1. RF7/SS, I/O = I. RF7/SS, I/O Type = TTL. RF7/SS, Description = Slave select input for MSSP (MSSP module).",
    "TABLE 11-11: PORTF FUNCTIONS\nLegend: O = Output, I = Input, ANA = Analog Signal, DIG = Digital Output, ST = Schmitt Buffer Input, TTL = TTL Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 11-12: SUMMARY OF REGISTERS ASSOCIATED WITH PORTF\nTRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register. TRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 = PORTF Data Direction Register. TRISF, Reset Values on Page = 66. PORTF, Bit 7 = RF7. PORTF, Bit 6 = RF6. PORTF, Bit 5 = RF5. PORTF, Bit 4 = RF4. PORTF, Bit 3 = RF3. PORTF, Bit 2 = RF2. PORTF, Bit 1 = RF1. PORTF, Bit 0 = RF0. PORTF, Reset Values on Page = 66. LATF, Bit 7 = LATF Output Latch Register. LATF, Bit 6 = LATF Output Latch Register. LATF, Bit 5 = LATF Output Latch Register. LATF, Bit 4 = LATF Output Latch Register. LATF, Bit 3 = LATF",
    "TABLE 11-12: SUMMARY OF REGISTERS ASSOCIATED WITH PORTF\nOutput Latch Register. LATF, Bit 2 = LATF Output Latch Register. LATF, Bit 1 = LATF Output Latch Register. LATF, Bit 0 = LATF Output Latch Register. LATF, Reset Values on Page = 66. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on Page = 64. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on Page = 65. CVRCON, Bit 7 = CVREN.",
    "TABLE 11-12: SUMMARY OF REGISTERS ASSOCIATED WITH PORTF\nCVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTF.",
    "11.7 PORTG, TRISG and LATG Registers\nPORTG is a 6-bit wide, bidirectional port. The corresponding Data Direction register is  TRISG.  Setting  a TRISG bit (= 1 ) will make the corresponding PORTG pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISG bit (= 0 ) will make the corresponding PORTG pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATG)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATG register,  read  and  write  the  latched  output  value  for PORTG.\nPORTG is multiplexed with USART functions (Table 11-13). PORTG pins have Schmitt Trigger input buffers.",
    "11.7 PORTG, TRISG and LATG Registers\nWhen  enabling  peripheral  functions,  care  should  be taken in defining TRIS bits for each PORTG pin. Some peripherals  override  the  TRIS  bit  to  make  a  pin  an output, while other peripherals override the TRIS bit to make  a  pin  an  input.  The  user  should  refer  to  the corresponding peripheral section for the correct TRIS bit settings. The pin override value is not loaded into the TRIS register. This allows read-modify-write of the TRIS register without concern due to peripheral overrides.\nThe sixth pin of PORTG (RG5/MCLR/VPP) is an input only  pin.  Its  operation  is  controlled  by  the  MCLRE Configuration bit. When  selected as a port pin (MCLRE = 0 ), it functions as a digital input only pin; as such, it does not have TRIS or LAT bits associated with its  operation.  Otherwise,  it  functions  as  the  device's Master Clear input. In either  configuration, RG5  also functions  as  the  programming  voltage  input  during programming.\nNote:",
    "11.7 PORTG, TRISG and LATG Registers\nOn a Power-on Reset, RG5 is enabled as a digital input only if Master Clear functionality  is  disabled.  All  other  5  pins are configured as digital inputs.",
    "EXAMPLE 11-7: INITIALIZING PORTG\nCLRF, 1 = PORTG. CLRF, 2 = ; Initialize PORTG by ; clearing output ; data latches. CLRF, 1 = LATG. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0x04. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISG. MOVWF, 2 = ; Set RG1:RG0 as outputs ; RG2 as input ; RG4:RG3 as inputs",
    "TABLE 11-13: PORTG FUNCTIONS\nRG0/CCP3, Function = RG0. RG0/CCP3, TRIS Setting = 0. RG0/CCP3, I/O = O. RG0/CCP3, I/O Type = DIG. RG0/CCP3, Description = LATG<0> data output.. RG0/CCP3, Function = RG0. RG0/CCP3, TRIS Setting = 1. RG0/CCP3, I/O = I. RG0/CCP3, I/O Type = ST. RG0/CCP3, Description = PORTG<0> data input.. RG0/CCP3, Function = CCP3. RG0/CCP3, TRIS Setting = 0. RG0/CCP3, I/O = O. RG0/CCP3, I/O Type = DIG. RG0/CCP3, Description = CCP3 compare and PWM output; takes priority over port data.. RG0/CCP3, Function =",
    "TABLE 11-13: PORTG FUNCTIONS\nCCP3. RG0/CCP3, TRIS Setting = 1. RG0/CCP3, I/O = I. RG0/CCP3, I/O Type = ST. RG0/CCP3, Description = CCP3 capture input.. RG1/TX2/CK2, Function = R21. RG1/TX2/CK2, TRIS Setting = 0. RG1/TX2/CK2, I/O = O. RG1/TX2/CK2, I/O Type = DIG. RG1/TX2/CK2, Description = LATG<1> data output.. RG1/TX2/CK2, Function = R21. RG1/TX2/CK2, TRIS Setting = 1. RG1/TX2/CK2, I/O = I. RG1/TX2/CK2, I/O Type = ST. RG1/TX2/CK2, Description = PORTG<1> data input.. RG1/TX2/CK2, Function =",
    "TABLE 11-13: PORTG FUNCTIONS\nTX2. RG1/TX2/CK2, TRIS Setting = 1. RG1/TX2/CK2, I/O = O. RG1/TX2/CK2, I/O Type = DIG. RG1/TX2/CK2, Description = Synchronous serial data output (AUSART module); takes priority over port data.. RG1/TX2/CK2, Function = CK2. RG1/TX2/CK2, TRIS Setting = 1. RG1/TX2/CK2, I/O = O. RG1/TX2/CK2, I/O Type = DIG. RG1/TX2/CK2, Description = Synchronous serial data input (AUSART module). User must configure as an input.. RG1/TX2/CK2, Function = CK2. RG1/TX2/CK2, TRIS Setting = 1. RG1/TX2/CK2, I/O = I. RG1/TX2/CK2, I/O Type = ST.",
    "TABLE 11-13: PORTG FUNCTIONS\nRG1/TX2/CK2, Description = Synchronous serial clock input (AUSART module).. RG2/RX2/DT2, Function = RG2. RG2/RX2/DT2, TRIS Setting = 0. RG2/RX2/DT2, I/O = O. RG2/RX2/DT2, I/O Type = DIG. RG2/RX2/DT2, Description = LATG<2> data output.. RG2/RX2/DT2, Function = RG2. RG2/RX2/DT2, TRIS Setting = 1. RG2/RX2/DT2, I/O = I. RG2/RX2/DT2, I/O Type = ST. RG2/RX2/DT2, Description = PORTG<2> data input.. RG2/RX2/DT2, Function = RX2. RG2/RX2/DT2, TRIS Setting = 1.",
    "TABLE 11-13: PORTG FUNCTIONS\nRG2/RX2/DT2, I/O = I. RG2/RX2/DT2, I/O Type = ST. RG2/RX2/DT2, Description = Asynchronous serial receive data input (AUSART module).. RG2/RX2/DT2, Function = DT2. RG2/RX2/DT2, TRIS Setting = 1. RG2/RX2/DT2, I/O = O. RG2/RX2/DT2, I/O Type = DIG. RG2/RX2/DT2, Description = Synchronous serial data output (AUSART module); takes priority over port data.. RG2/RX2/DT2, Function = DT2. RG2/RX2/DT2, TRIS Setting = 1. RG2/RX2/DT2, I/O = I. RG2/RX2/DT2, I/O Type = ST. RG2/RX2/DT2, Description =",
    "TABLE 11-13: PORTG FUNCTIONS\nSynchronous serial data input (AUSART module). User must configure as an input.. RG3, Function = RG3. RG3, TRIS Setting = 0. RG3, I/O = O. RG3, I/O Type = DIG. RG3, Description = LATG<3> data output.. RG3, Function = RG3. RG3, TRIS Setting = 1. RG3, I/O = I. RG3, I/O Type = ST. RG3, Description = PORTG<3> data input.. RG4, Function = RG4. RG4, TRIS Setting = 0. RG4, I/O = O. RG4, I/O Type = DIG. RG4, Description = LATG<4> data output.. RG4, Function = RG4. RG4, TRIS Setting = 1. RG4, I/O = I. RG4, I/O Type = ST. RG4, Description = PORTG<4> data",
    "TABLE 11-13: PORTG FUNCTIONS\ninput.. RG5/MCLR/VPP, Function = RG5. RG5/MCLR/VPP, TRIS Setting = - (1). RG5/MCLR/VPP, I/O = I. RG5/MCLR/VPP, I/O Type = ST. RG5/MCLR/VPP, Description = PORTG<5> data input; enabled when MCLRE Configuration bit is clear.. RG5/MCLR/VPP, Function = MCLR. RG5/MCLR/VPP, TRIS Setting = -. RG5/MCLR/VPP, I/O = I. RG5/MCLR/VPP, I/O Type = ST. RG5/MCLR/VPP, Description = External Master Clear input; enabled when MCLRE Configuration bit is set.. RG5/MCLR/VPP, Function = VPP. RG5/MCLR/VPP, TRIS Setting = -. RG5/MCLR/VPP, I/O = I.",
    "TABLE 11-13: PORTG FUNCTIONS\nRG5/MCLR/VPP, I/O Type = ANA. RG5/MCLR/VPP, Description = High-Voltage Detection; used for ICSP\u2122 mode entry detection. Always available, regardless of pin mode.\nLegend:\nO = Output, I = Input, ANA = Analog Signal, DIG = Digital Output, ST = Schmitt Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).\nNote 1: RG5 does not have a corresponding TRISG bit.",
    "TABLE 11-14: SUMMARY OF REGISTERS ASSOCIATED WITH PORTG\nPORTG, Bit 7 = -. PORTG, Bit 6 = -. PORTG, Bit 5 = RG5 (1). PORTG, Bit 4 = RG4. PORTG, Bit 3 = RG3. PORTG, Bit 2 = RG2. PORTG, Bit 1 = RG1. PORTG, Bit 0 = RG0. PORTG, Reset Valueson Page = 66. LATG, Bit 7 = -. LATG, Bit 6 = -. LATG, Bit 5 = -. LATG, Bit 4 = LATG Output Latch Register. LATG, Bit 3 = LATG Output Latch Register. LATG, Bit 2 = LATG Output Latch Register. LATG, Bit 1 = LATG Output Latch Register. LATG, Bit 0 = LATG Output Latch Register. LATG, Reset Valueson Page = 66. TRISG, Bit 7 = -. TRISG, Bit 6 = -. TRISG, Bit 5 = -. TRISG, Bit 4 = PORTG Data Direction Register. TRISG, Bit 3 = PORTG Data Direction",
    "TABLE 11-14: SUMMARY OF REGISTERS ASSOCIATED WITH PORTG\nRegister. TRISG, Bit 2 = PORTG Data Direction Register. TRISG, Bit 1 = PORTG Data Direction Register. TRISG, Bit 0 = PORTG Data Direction Register. TRISG, Reset Valueson Page = 66\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PORTG.\nNote 1: RG5 is available as an input only when MCLR is disabled.",
    "11.8 PORTH, LATH and TRISH Registers\nNote:\nPORTH\nis\nonly\navailable\non\nPIC18F8310/8410 devices.\nWhen the external memory interface is enabled, four of the  PORTH  pins  function  as  the  high-order  address lines  for  the  interface.  The  address  output  from  the interface  takes  priority  over  other  digital  I/O.  The corresponding TRISH bits are also overridden.\nPORTH is an 8-bit wide, bidirectional I/O port. The corresponding Data Direction register is TRISH. Setting a TRISH bit (= 1 )  will  make the corresponding PORTH pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISH bit (= 0 ) will make the corresponding PORTH pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATH)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATH register,  read  and  write  the  latched  output  value  for PORTH.\nAll  pins  on  PORTH  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.\nNote:",
    "11.8 PORTH, LATH and TRISH Registers\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.",
    "EXAMPLE 11-8: INITIALIZING PORTH\nCLRF, 1 = PORTH. CLRF, 2 = ; Initialize PORTH by ; clearing output ; data latches. CLRF, 1 = LATH. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0CFh. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISH. MOVWF, 2 = ; Set RH3:RH0 as inputs ; RH5:RH4 as outputs ; RH7:RH6 as inputs",
    "TABLE 11-15: PORTH FUNCTIONS\nRH0/AD16, Function = RH0. RH0/AD16, TRIS Setting = 0. RH0/AD16, I/O = O. RH0/AD16, I/O Type = DIG. RH0/AD16, Description = LATH<0> data output.. RH0/AD16, Function = RH0. RH0/AD16, TRIS Setting = 1. RH0/AD16, I/O = I. RH0/AD16, I/O Type = ST. RH0/AD16, Description = PORTH<0> data input.. RH0/AD16, Function = AD16. RH0/AD16, TRIS Setting = x. RH0/AD16, I/O = O. RH0/AD16, I/O Type = DIG. RH0/AD16, Description = External memory interface, Address Line 16. Takes priority over port data.. RH1/AD17, Function = RH1. RH1/AD17, TRIS Setting = 0.",
    "TABLE 11-15: PORTH FUNCTIONS\nRH1/AD17, I/O = O. RH1/AD17, I/O Type = DIG. RH1/AD17, Description = LATH<1> data output.. RH1/AD17, Function = RH1. RH1/AD17, TRIS Setting = 1. RH1/AD17, I/O = I. RH1/AD17, I/O Type = ST. RH1/AD17, Description = PORTH<1> data input.. RH1/AD17, Function = AD17. RH1/AD17, TRIS Setting = x. RH1/AD17, I/O = O. RH1/AD17, I/O Type = DIG. RH1/AD17, Description = External memory interface, Address Line 17. Takes priority over port data.. RH2/AD18, Function = RH2. RH2/AD18, TRIS Setting = 0. RH2/AD18, I/O = O. RH2/AD18, I/O Type = DIG.",
    "TABLE 11-15: PORTH FUNCTIONS\nRH2/AD18, Description = LATH<2> data output.. RH2/AD18, Function = RH2. RH2/AD18, TRIS Setting = 1. RH2/AD18, I/O = I. RH2/AD18, I/O Type = ST. RH2/AD18, Description = PORTH<2> data input.. RH2/AD18, Function = AD18. RH2/AD18, TRIS Setting = x. RH2/AD18, I/O = O. RH2/AD18, I/O Type = DIG. RH2/AD18, Description = External memory interface, Address Line 18. Takes priority over port data.. RH3/AD19, Function = RH3. RH3/AD19, TRIS Setting = 0. RH3/AD19, I/O = O. RH3/AD19, I/O Type = DIG. RH3/AD19, Description = LATH<3> data output.. RH3/AD19, Function =",
    "TABLE 11-15: PORTH FUNCTIONS\nRH3. RH3/AD19, TRIS Setting = 1. RH3/AD19, I/O = I. RH3/AD19, I/O Type = ST. RH3/AD19, Description = PORTH<3> data input.. RH3/AD19, Function = AD19. RH3/AD19, TRIS Setting = x. RH3/AD19, I/O = O. RH3/AD19, I/O Type = DIG. RH3/AD19, Description = External memory interface, Address Line 19. Takes priority over port data.. RH4, Function = RH4. RH4, TRIS Setting = 0. RH4, I/O = O. RH4, I/O Type = DIG. RH4, Description = LATH<4> data output.. RH4, Function = RH4. RH4, TRIS Setting = 1. RH4, I/O = I. RH4, I/O Type = ST. RH4, Description = PORTH<4> data",
    "TABLE 11-15: PORTH FUNCTIONS\ninput.. RH5, Function = RH5. RH5, TRIS Setting = 0. RH5, I/O = O. RH5, I/O Type = DIG. RH5, Description = LATH<5> data output.. RH5, Function = RH5. RH5, TRIS Setting = 1. RH5, I/O = I. RH5, I/O Type = ST. RH5, Description = PORTH<5> data input.. RH6, Function = RH6. RH6, TRIS Setting = 0. RH6, I/O = O. RH6, I/O Type = DIG. RH6, Description = LATH<6> data output.. RH6, Function = RH6. RH6, TRIS Setting = 1. RH6, I/O = I. RH6, I/O Type = ST. RH6, Description = PORTH<6> data input.. RH7, Function = RH7. RH7, TRIS Setting = 0.",
    "TABLE 11-15: PORTH FUNCTIONS\nRH7, I/O = O. RH7, I/O Type = DIG. RH7, Description = LATH<7> data output.. RH7, Function = RH7. RH7, TRIS Setting = 1. RH7, I/O = I. RH7, I/O Type = ST. RH7, Description = PORTH<7> data input.\nLegend:\nO = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input,\nx = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 11-16: SUMMARY OF REGISTERS ASSOCIATED WITH PORTH\nTRISH, Bit 7 = PORTH Data Direction Register. TRISH, Bit 6 = PORTH Data Direction Register. TRISH, Bit 5 = PORTH Data Direction Register. TRISH, Bit 4 = PORTH Data Direction Register. TRISH, Bit 3 = PORTH Data Direction Register. TRISH, Bit 2 = PORTH Data Direction Register. TRISH, Bit 1 = PORTH Data Direction Register. TRISH, Bit 0 = PORTH Data Direction Register. TRISH, Reset Values on Page = 65. PORTH, Bit 7 = RH7. PORTH, Bit 6 = RH6. PORTH, Bit 5 = RH5. PORTH, Bit 4 = RH4. PORTH, Bit 3 = RH3. PORTH, Bit 2 = RH2. PORTH, Bit 1 = RH1. PORTH, Bit 0 = RH0. PORTH, Reset Values on Page = 66. LATH, Bit 7 = PORTH Output Latch Register. LATH, Bit 6 = PORTH Output Latch Register. LATH, Bit 5 = PORTH Output Latch Register. LATH, Bit 4 = PORTH Output Latch Register.",
    "TABLE 11-16: SUMMARY OF REGISTERS ASSOCIATED WITH PORTH\nLATH, Bit 3 = PORTH Output Latch Register. LATH, Bit 2 = PORTH Output Latch Register. LATH, Bit 1 = PORTH Output Latch Register. LATH, Bit 0 = PORTH Output Latch Register. LATH, Reset Values on Page = 66",
    "11.9 PORTJ, TRISJ and LATJ Registers\nNote:, 1 = PORTJ is available only on PIC18F8310/8410 devices.\nWhen the external memory interface is enabled, all of the  PORTJ  pins  function  as  control  outputs  for  the interface. This occurs automatically when the interface is enabled by clearing the EBDIS control bit (MEMCON<7>). The TRISJ bits are also overridden.\nPORTJ is an 8-bit wide, bidirectional port. The corresponding  Data  Direction  register  is  TRISJ.  Setting  a TRISJ bit (= 1 ) will make the corresponding PORTJ pin an input (i.e., put the corresponding output driver in a High-Impedance mode). Clearing a TRISJ bit (= 0 ) will make the corresponding PORTJ pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Output  Latch  register  (LATJ)  is  also  memory mapped.  Read-modify-write  operations  on  the  LATJ register,  read  and  write  the  latched  output  value  for PORTJ.",
    "11.9 PORTJ, TRISJ and LATJ Registers\nAll pins  on  PORTJ  are  implemented  with  Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.",
    "EXAMPLE 11-9: INITIALIZING PORTJ\nCLRF, 1 = PORTJ. CLRF, 2 = ; Initialize PORTG by ; clearing output ; data latches. CLRF, 1 = LATJ. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0xCF. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISJ. MOVWF, 2 = ; Set RJ3:RJ0 as inputs ; RJ5:RJ4 as output ; RJ7:RJ6 as inputs",
    "TABLE 11-17: PORTJ FUNCTIONS\nRJ0/ALE, Function = RJ0. RJ0/ALE, TRIS Setting = 0. RJ0/ALE, I/O = O. RJ0/ALE, I/O Type = DIG. RJ0/ALE, Description = LATJ<0> data output.. RJ0/ALE, Function = RJ0. RJ0/ALE, TRIS Setting = 1. RJ0/ALE, I/O = I. RJ0/ALE, I/O Type = ST. RJ0/ALE, Description = PORTJ<0> data input.. RJ0/ALE, Function = ALE. RJ0/ALE, TRIS Setting = x. RJ0/ALE, I/O = O. RJ0/ALE, I/O Type = DIG. RJ0/ALE, Description = External memory interface address latch enable control output; takes priority over digital I/O.. RJ1/OE, Function = RJ1. RJ1/OE, TRIS Setting = 0. RJ1/OE, I/O = O.",
    "TABLE 11-17: PORTJ FUNCTIONS\nRJ1/OE, I/O Type = DIG. RJ1/OE, Description = LATJ<1> data output.. RJ1/OE, Function = RJ1. RJ1/OE, TRIS Setting = 1. RJ1/OE, I/O = I. RJ1/OE, I/O Type = ST. RJ1/OE, Description = PORTJ<1> data input.. RJ1/OE, Function = OE. RJ1/OE, TRIS Setting = x. RJ1/OE, I/O = O. RJ1/OE, I/O Type = DIG. RJ1/OE, Description = External memory interface output enable control output; takes priority over digital I/O.. RJ2/WRL, Function = RJ2. RJ2/WRL, TRIS Setting = 0. RJ2/WRL, I/O = O. RJ2/WRL, I/O Type = DIG. RJ2/WRL, Description =",
    "TABLE 11-17: PORTJ FUNCTIONS\nLATJ<2> data output.. RJ2/WRL, Function = RJ2. RJ2/WRL, TRIS Setting = 1. RJ2/WRL, I/O = I. RJ2/WRL, I/O Type = ST. RJ2/WRL, Description = PORTJ<2> data input.. RJ2/WRL, Function = WRL. RJ2/WRL, TRIS Setting = x. RJ2/WRL, I/O = O. RJ2/WRL, I/O Type = DIG. RJ2/WRL, Description = External memory bus write low byte control; takes priority over digital I/O.. RJ3/WRH, Function = RJ3. RJ3/WRH, TRIS Setting = 0. RJ3/WRH, I/O = O. RJ3/WRH, I/O Type = DIG. RJ3/WRH, Description = LATJ<3> data output.. RJ3/WRH, Function = RJ3.",
    "TABLE 11-17: PORTJ FUNCTIONS\nRJ3/WRH, TRIS Setting = 1. RJ3/WRH, I/O = I. RJ3/WRH, I/O Type = ST. RJ3/WRH, Description = PORTJ<3> data input.. RJ3/WRH, Function = WRH. RJ3/WRH, TRIS Setting = x. RJ3/WRH, I/O = O. RJ3/WRH, I/O Type = DIG. RJ3/WRH, Description = External memory interface write high byte control output; takes priority over digital I/O.. RJ4/BA0, Function = RJ4. RJ4/BA0, TRIS Setting = 0. RJ4/BA0, I/O = O. RJ4/BA0, I/O Type = DIG. RJ4/BA0, Description = LATJ<4> data output.. RJ4/BA0, Function = RJ4. RJ4/BA0, TRIS Setting = 1. RJ4/BA0, I/O = I.",
    "TABLE 11-17: PORTJ FUNCTIONS\nRJ4/BA0, I/O Type = ST. RJ4/BA0, Description = PORTJ<4> data input.. RJ4/BA0, Function = BA0. RJ4/BA0, TRIS Setting = x. RJ4/BA0, I/O = O. RJ4/BA0, I/O Type = DIG. RJ4/BA0, Description = External Memory Interface Byte Address 0 control output; takes prior- ity over digital I/O.. RJ5/CE, Function = RJ5. RJ5/CE, TRIS Setting = 0. RJ5/CE, I/O = O. RJ5/CE, I/O Type = DIG. RJ5/CE, Description = LATJ<5> data output.. RJ5/CE, Function = RJ5. RJ5/CE, TRIS Setting = 1. RJ5/CE, I/O = I. RJ5/CE, I/O Type = ST. RJ5/CE, Description = PORTJ<5> data input..",
    "TABLE 11-17: PORTJ FUNCTIONS\nRJ5/CE, Function = CE. RJ5/CE, TRIS Setting = x. RJ5/CE, I/O = O. RJ5/CE, I/O Type = DIG. RJ5/CE, Description = External memory interface chip enable control output; takes priority over digital I/O.. RJ6/LB, Function = RJ6. RJ6/LB, TRIS Setting = 0. RJ6/LB, I/O = O. RJ6/LB, I/O Type = DIG. RJ6/LB, Description = LATJ<6> data output.. RJ6/LB, Function = RJ6. RJ6/LB, TRIS Setting = 1. RJ6/LB, I/O = I. RJ6/LB, I/O Type = ST. RJ6/LB, Description = PORTJ<6> data input.. RJ6/LB, Function = LB. RJ6/LB, TRIS Setting = x. RJ6/LB, I/O = O. RJ6/LB, I/O",
    "TABLE 11-17: PORTJ FUNCTIONS\nType = DIG. RJ6/LB, Description = External memory interface lower byte enable control output; takes priority over digital I/O.. RJ7/UB, Function = RJ7. RJ7/UB, TRIS Setting = 0. RJ7/UB, I/O = O. RJ7/UB, I/O Type = DIG. RJ7/UB, Description = LATJ<7> data output.. RJ7/UB, Function = RJ7. RJ7/UB, TRIS Setting = 1. RJ7/UB, I/O = I. RJ7/UB, I/O Type = ST. RJ7/UB, Description = PORTJ<7> data input.. RJ7/UB, Function = UB. RJ7/UB, TRIS Setting = x. RJ7/UB, I/O = O. RJ7/UB, I/O Type = DIG. RJ7/UB, Description = External memory interface upper byte enable control output; takes priority over digital",
    "TABLE 11-17: PORTJ FUNCTIONS\nI/O.\nLegend: O = Output, I = Input, DIG = Digital Output, ST = Schmitt Buffer Input, x = Don't care (TRIS bit does not affect port direction or is overridden for this option).",
    "TABLE 11-18: SUMMARY OF REGISTERS ASSOCIATED WITH PORTJ\nPORTJ, Bit 7 = RJ7. PORTJ, Bit 6 = RJ6. PORTJ, Bit 5 = RJ5. PORTJ, Bit 4 = RJ4. PORTJ, Bit 3 = RJ3. PORTJ, Bit 2 = RJ2. PORTJ, Bit 1 = RJ1. PORTJ, Bit 0 = RJ0. PORTJ, Reset Values on Page = 66. LATJ, Bit 7 = LATJ Output Latch Register. LATJ, Bit 6 = LATJ Output Latch Register. LATJ, Bit 5 = LATJ Output Latch Register. LATJ, Bit 4 = LATJ Output Latch Register. LATJ, Bit 3 = LATJ Output Latch Register. LATJ, Bit 2 = LATJ Output Latch Register. LATJ, Bit 1 = LATJ Output Latch Register. LATJ, Bit 0 = LATJ Output Latch Register. LATJ, Reset Values on Page = 66. TRISJ, Bit 7 = PORTJ Data Direction Register. TRISJ, Bit 6 = PORTJ Data Direction Register. TRISJ, Bit",
    "TABLE 11-18: SUMMARY OF REGISTERS ASSOCIATED WITH PORTJ\n5 = PORTJ Data Direction Register. TRISJ, Bit 4 = PORTJ Data Direction Register. TRISJ, Bit 3 = PORTJ Data Direction Register. TRISJ, Bit 2 = PORTJ Data Direction Register. TRISJ, Bit 1 = PORTJ Data Direction Register. TRISJ, Bit 0 = PORTJ Data Direction Register. TRISJ, Reset Values on Page = 65",
    "FIGURE 11-2:\nPORTD  can  also  function  as  an  8-bit  wide  Parallel Slave Port (PSP), or microprocessor port, when control bit,  PSPMODE (PSPCON<4>), is set. It is asynchronously  readable  and  writable  by  the  external  world through RD control input pin, RE0/RD and WR control input pin, RE1/WR.\nNote:, 1 = For PIC18F8310/8410 devices, the Parallel Slave Port is available only in Microcontroller mode.\nThe  PSP  can  directly  interface  to  an  8-bit  microprocessor data bus. The external microprocessor can read or write the PORTD latch as an 8-bit latch. Setting bit,  PSPMODE, enables port pin, RE0/RD, to be the RD input, RE1/WR to be the WR input and RE2/CS to be the CS (Chip Select) input. For this functionality, the corresponding data direction bits of the TRISE register (TRISE<2:0>) must be configured as inputs (set).",
    "FIGURE 11-2:\nA write to the PSP occurs when both the CS and WR lines are first detected low and ends when either are detected high. The PSPIF and IBF flag bits are both set when the write ends.\nA read from the PSP occurs when both the CS and RD lines are first detected low. The data in PORTD is read out and the OBF bit is set. If the user writes new data to PORTD to set OBF, the data is immediately read out; however, the OBF bit is not set.\nWhen either the CS or RD lines are detected high, the PORTD pins return to the input state and the PSPIF bit is set. User applications should wait for PSPIF to be set before servicing the PSP; when this happens, the IBF and OBF bits can be polled and the appropriate action taken.\nThe timing for the control  signals  in  Write  and  Read modes  is shown  in Figure 11-3 and  Figure 11-4, respectively.\nPORTD AND PORTE BLOCK DIAGRAM (PARALLEL SLAVE PORT)",
    "REGISTER 11-1: PSPCON: PARALLEL SLAVE PORT CONTROL REGISTER\nIBF, R-0 = OBF. IBF, R/W-0 = IBOV. IBF, R/W-0 = PSPMODE. IBF, U-0 = -. IBF, U-0 = -. IBF, U-0 = -. IBF, U-0 = -. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 0",
    "REGISTER 11-1: PSPCON: PARALLEL SLAVE PORT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nIBF: Input Buffer Full Status bit\n1 = A word has been received and is waiting to be read by the CPU\n0 = No word has been received\nbit 6\nOBF: Output Buffer Full Status bit\n1 = The output buffer still holds a previously written word\n0 = The output buffer has been read\nbit 5\nIBOV: Input Buffer Overflow Detect bit\n1 = A write occurred when a previously input word has not been read (must be cleared in software)\n0 = No overflow occurred\nbit 4",
    "REGISTER 11-1: PSPCON: PARALLEL SLAVE PORT CONTROL REGISTER\nPSPMODE: Parallel Slave Port Mode Select bit\n1 = Parallel Slave Port mode\n0 = General Purpose I/O mode\nbit 3-0 Unimplemented: Read as ' 0 '",
    "FIGURE 11-3: PARALLEL SLAVE PORT WRITE WAVEFORMS\n, 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 5 = Q1. , 6 = Q2. , 7 = Q3. , 8 = Q4. , 9 = Q1. , 10 = Q2. , 11 = Q3. , 12 = Q4. CS, 1 = . CS, 2 = . CS, 3 = . CS, 4 = . CS, 5 = . CS, 6 = . CS, 7 = . CS, 8 = . CS, 9 = . CS, 10 = . CS, 11 = . CS, 12 = . WR, 1 = . WR, 2 = . WR, 3 = . WR, 4 = . WR, 5 = . WR, 6 = . WR, 7 = . WR, 8 = . WR, 9 = . WR, 10 = . WR, 11 = . WR, 12 = . RD, 1 = . RD, 2 = . RD, 3 = . RD, 4 = . RD, 5 = . RD, 6 = . RD, 7 = . RD, 8 = . RD, 9 = . RD, 10 = . RD, 11",
    "FIGURE 11-3: PARALLEL SLAVE PORT WRITE WAVEFORMS\n= . RD, 12 = . PORTD<7:0>, 1 = . PORTD<7:0>, 2 = . PORTD<7:0>, 3 = . PORTD<7:0>, 4 = . PORTD<7:0>, 5 = . PORTD<7:0>, 6 = . PORTD<7:0>, 7 = . PORTD<7:0>, 8 = . PORTD<7:0>, 9 = . PORTD<7:0>, 10 = . PORTD<7:0>, 11 = . PORTD<7:0>, 12 = . IBF, 1 = . IBF, 2 = . IBF, 3 = . IBF, 4 = . IBF, 5 = . IBF, 6 = . IBF, 7 = . IBF, 8 = . IBF, 9 = . IBF, 10 = . IBF, 11 = . IBF, 12 = . OBF, 1 = . OBF, 2 = . OBF, 3 = . OBF, 4 = . OBF, 5 = . OBF, 6",
    "FIGURE 11-3: PARALLEL SLAVE PORT WRITE WAVEFORMS\n= . OBF, 7 = . OBF, 8 = . OBF, 9 = . OBF, 10 = . OBF, 11 = . OBF, 12 = . PSPIF, 1 = . PSPIF, 2 = . PSPIF, 3 = . PSPIF, 4 = . PSPIF, 5 = . PSPIF, 6 = . PSPIF, 7 = . PSPIF, 8 = . PSPIF, 9 = . PSPIF, 10 = . PSPIF, 11 = . PSPIF, 12 = ",
    "TABLE 11-19: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Reset Values on Page = 66. LATD, Bit 7 = LATD Output Latch Register. LATD, Bit 6 = LATD Output Latch Register. LATD, Bit 5 = LATD Output Latch Register. LATD, Bit 4 = LATD Output Latch Register. LATD, Bit 3 = LATD Output Latch Register. LATD, Bit 2 = LATD Output Latch Register. LATD, Bit 1 = LATD Output Latch Register. LATD, Bit 0 = LATD Output Latch Register. LATD, Reset Values on Page = 66. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit",
    "TABLE 11-19: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\n4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Reset Values on Page = 66. PORTE, Bit 7 = RE7. PORTE, Bit 6 = RE6. PORTE, Bit 5 = RE5. PORTE, Bit 4 = RE4. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Reset Values on Page = 66. LATE, Bit 7 = LATE Output Latch Register. LATE, Bit 6 = LATE Output Latch Register. LATE, Bit 5 = LATE Output Latch Register. LATE, Bit 4 = LATE Output Latch Register. LATE, Bit 3 = LATE Output Latch Register. LATE, Bit 2 = LATE Output Latch Register. LATE, Bit 1 = LATE Output Latch Register. LATE, Bit 0 = LATE Output Latch Register. LATE, Reset Values on Page = 66. TRISE, Bit 7 = PORTE Data Direction Register. TRISE, Bit 6 =",
    "TABLE 11-19: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPORTE Data Direction Register. TRISE, Bit 5 = PORTE Data Direction Register. TRISE, Bit 4 = PORTE Data Direction Register. TRISE, Bit 3 = PORTE Data Direction Register. TRISE, Bit 2 = PORTE Data Direction Register. TRISE, Bit 1 = PORTE Data Direction Register. TRISE, Bit 0 = PORTE Data Direction Register. TRISE, Reset Values on Page = 66. PSPCON, Bit 7 = IBF. PSPCON, Bit 6 = OBF. PSPCON, Bit 5 = IBOV. PSPCON, Bit 4 = PSPMODE. PSPCON, Bit 3 = -. PSPCON, Bit 2 = -. PSPCON, Bit 1 = -. PSPCON, Bit 0 = -. PSPCON, Reset Values on Page = 65. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 =",
    "TABLE 11-19: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nINT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5",
    "TABLE 11-19: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\n= RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Parallel Slave Port.",
    "12.0 TIMER0 MODULE\nThe Timer0 module incorporates the following features:\nThe T0CON  register (Register 12-1) controls all aspects of the module's operation, including the prescale selection. It is both readable and writable.\n\u00b7 Software-selectable operation as a timer or counter in both 8-bit or 16-bit modes\n\u00b7 Readable and writable registers\n\u00b7 Dedicated 8-bit software-programmable prescaler\n\u00b7 Selectable clock source (internal or external)\n\u00b7 Edge select for external clock\n\u00b7 Interrupt-on-overflow",
    "REGISTER 12-1: T0CON: TIMER0 CONTROL REGISTER REGISTER\nTMR0ON, R/W-1 = T08BIT. TMR0ON, R/W-1 = T0CS. TMR0ON, R/W-1 = TOSE. TMR0ON, R/W-1 = PSA. TMR0ON, R/W-1 = T0PS2. TMR0ON, R/W-1 = T0PS1. TMR0ON, R/W-1 = T0PS0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 12-1: T0CON: TIMER0 CONTROL REGISTER REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 TMR0ON:\nTimer0 On/Off Control bit\n1 = Enables Timer0\n0 = Stops Timer0",
    "bit 6\nT08BIT : Timer0 8-Bit/16-Bit Control bit\n1 = Timer0 is configured as an 8-bit timer/counter\n0 = Timer0 is configured as a 16-bit timer/counter",
    "bit 5 T0CS : Timer0 Clock Source Select bit\n1 = Transition on T0CKI pin input edge\n0 = Internal clock (FOSC/4)",
    "bit 4 T0SE\n: Timer0 Source Edge Select bit\n1 = Increment on high-to-low transition on T0CKI pin\n0 = Increment on low-to-high transition on T0CKI pin",
    "bit 3 PSA : Timer0 Prescaler Assignment bit\n1 = TImer0 prescaler is not assigned; Timer0 clock input bypasses prescaler\n0 = Timer0 prescaler is assigned; Timer0 clock input comes from prescaler output\nbit 2-0\nT0PS<2:0> : Timer0 Prescaler Select bits\n111 = 1:256 Prescale value\n110 = 1:128 Prescale value\n101 = 1:64   Prescale value\n100 = 1:32   Prescale value\n011 = 1:16   Prescale value\n010\n= 1:8     Prescale value\n001\n= 1:4     Prescale value\n000\n= 1:2     Prescale value\nA  simplified  block  diagram  of  the  Timer0  module  in 8-bit mode  is shown  in Figure 12-1. Figure 12-2 shows  a  simplified block diagram  of the Timer0 module in 16-bit mode.",
    "12.1 Timer0 Operation\nTimer0 can operate as either a timer or a counter; the mode is selected by clearing the T0CS bit (T0CON<5>). In Timer mode (T0CS = 0 ), the module increments on every clock by default, unless a different prescaler value is selected (see Section 12.3 'Prescaler' ). If the TMR0 register is written to, the increment is inhibited for the following two instruction cycles. The user can work around this by writing an adjusted value to the TMR0 register.\nThe Counter mode is selected by setting the T0CS bit (= 1 ).  In  Counter mode, Timer0 increments either on every  rising  or  falling  edge  of  pin,  RA4/T0CKI.  The incrementing edge is determined by the Timer0 Source Edge Select bit, T0SE (T0CON<4>); clearing this bit selects  the  rising  edge.  Restrictions  on  the  external clock input are discussed below.\ninternal phase clock (TOSC). There is a delay between synchronization  and  the  onset  of  incrementing  the timer/counter.",
    "12.2 Timer0 Reads and Writes in 16-Bit Mode\nTMR0H is not the actual high byte of Timer0 in 16-bit mode; it is actually a buffered version of the real high byte  of  Timer0,  which  is  not  directly  readable  nor writable (refer to Figure 12-2). TMR0H is updated with the contents of the high byte of Timer0 during a read of TMR0L. This provides the ability to read all 16 bits of Timer0, without having to verify that the read of the high and  low  byte  were  valid,  due  to  a  rollover  between successive reads of the high and low byte.\nAn external clock source can be used to drive Timer0; however, it must meet certain requirements to ensure that  the  external  clock  can  be  synchronized  with  the\nSimilarly, a write to the high byte of Timer0 must also take place through the TMR0H Buffer register. The high byte is updated with the contents of TMR0H when a write occurs to TMR0L. This allows all 16 bits of Timer0 to be updated at once.",
    "12.3 Prescaler\nAn 8-bit counter is available as a prescaler for the Timer0 module. The prescaler is not directly readable or writable; its value is set by the PSA  and  T0PS<2:0>  bits (T0CON<3:0>), which determine the prescaler assignment and prescale ratio.\nClearing  the  PSA  bit  assigns  the  prescaler  to  the Timer0 module. When it is assigned, prescale values from 1:2 through 1:256 in power-of-2 increments are selectable.\nWhen assigned to the Timer0 module, all instructions writing to the TMR0 register (e.g., CLRF TMR0, MOVWF TMR0, BSF TMR0, etc.) clear the prescaler count.\nNote:, 1 = Writing to TMR0 when the prescaler is assigned to Timer0 will clear the prescaler count, but will not change the prescaler assignment.",
    "12.3.1 SWITCHING PRESCALER ASSIGNMENT\nThe  prescaler  assignment  is  fully  under  software control and can be changed 'on-the-fly' during program execution.",
    "12.4 Timer0 Interrupt\nThe  TMR0  interrupt  is  generated  when  the  TMR0 register  overflows from  FFh  to  00h in 8-bit  mode, or from FFFFh to 0000h in 16-bit mode. This overflow sets the TMR0IF flag bit. The interrupt can be masked by clearing  the  TMR0IE  bit  (INTCON<5>).  Before  reenabling the interrupt, the TMR0IF bit must be cleared in software by the Interrupt Service Routine.\nSince Timer0 is shut down in Sleep mode, the TMR0 interrupt cannot awaken the processor from Sleep.",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER0\nTMR0L, Bit 7 = Timer0 Module Low Byte Register. TMR0L, Bit 6 = Timer0 Module Low Byte Register. TMR0L, Bit 5 = Timer0 Module Low Byte Register. TMR0L, Bit 4 = Timer0 Module Low Byte Register. TMR0L, Bit 3 = Timer0 Module Low Byte Register. TMR0L, Bit 2 = Timer0 Module Low Byte Register. TMR0L, Bit 1 = Timer0 Module Low Byte Register. TMR0L, Bit 0 = Timer0 Module Low Byte Register. TMR0L, Reset Values on Page = 64. TMR0H, Bit 7 = Timer0 Module High Byte Register. TMR0H, Bit 6 = Timer0 Module High Byte Register. TMR0H, Bit 5 = Timer0 Module High Byte Register. TMR0H, Bit 4 = Timer0 Module High Byte Register. TMR0H, Bit 3 = Timer0 Module High Byte Register. TMR0H, Bit 2 = Timer0 Module High Byte Register. TMR0H, Bit 1 =",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER0\nTimer0 Module High Byte Register. TMR0H, Bit 0 = Timer0 Module High Byte Register. TMR0H, Reset Values on Page = 64. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Reset Values on Page = 64. TRISA, Bit 7 = PORTA Data Direction",
    "TABLE 12-1: REGISTERS ASSOCIATED WITH TIMER0\nRegister. TRISA, Bit 6 = PORTA Data Direction Register. TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Reset Values on Page = 66\nLegend: Shaded cells are not used by Timer0.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "13.0 TIMER1 MODULE\nThe Timer1 timer/counter  module  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer1  module  is shown in Figure 13-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 13-2.\n\u00b7 Software-selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR1H and TMR1L)\n\u00b7 Selectable clock source (internal or external) with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Reset on CCP Special Event Trigger\n\u00b7 Device clock status flag (T1RUN)\nThe module incorporates its own low-power oscillator to  provide  an  additional  clocking  option.  The  Timer1 oscillator can also be used as a low-power clock source for the microcontroller in power-managed operation.\nTimer1 can also be used to provide Real-Time Clock (RTC) functionality to applications with only a minimal addition of external components and code overhead.",
    "13.0 TIMER1 MODULE\nTimer1  is controlled through the T1CON  Control register  (Register 13-1).  It  also  contains  the  Timer1 Oscillator Enable  bit (T1OSCEN).  Timer1  can  be enabled or disabled by setting or clearing control bit, TMR1ON (T1CON<0>).",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\nRD16, R-0 = T1RUN. RD16, R/W-0 = T1CKPS1. RD16, R/W-0 = T1CKPS0. RD16, R/W-0 = T1OSCEN. RD16, R/W-0 = T1SYNC. RD16, R/W-0 = TMR1CS. RD16, R/W-0 = TMR1ON. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\nbit 7, R = Readable bit -n = Value at POR = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of TImer1 in one 16-bit operation 0 = Enables register read/write of Timer1 in two 8-bit operations. bit 7, Bit is set = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of TImer1 in one 16-bit operation 0 = Enables register read/write of Timer1 in two 8-bit operations. bit 7, x = Bit is unknown = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of TImer1 in one 16-bit operation 0 = Enables register read/write of Timer1 in two 8-bit operations. bit 6, R = Readable bit -n = Value at POR = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1 oscillator 0 = Device clock is derived from another source. bit 6, Bit is set = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\noscillator 0 = Device clock is derived from another source. bit 6, x = Bit is unknown = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1 oscillator 0 = Device clock is derived from another source. bit 5-4, R = Readable bit -n = Value at POR = T1CKPS<1:0>: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value 00 = 1:1 Prescale value. bit 5-4, Bit is set = T1CKPS<1:0>: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value 00 = 1:1 Prescale value. bit 5-4, x = Bit is unknown = T1CKPS<1:0>: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\n= 1:2 Prescale value 00 = 1:1 Prescale value. bit 3, R = Readable bit -n = Value at POR = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 3, Bit is set = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 3, x = Bit is unknown = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 2, R = Readable bit -n = Value at POR = T1SYNC: Timer1 External Clock Input Synchronization Select bit When TMR1CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input When TMR1CS = 0 :. bit 2, Bit is set = T1SYNC: Timer1 External Clock Input",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\nSynchronization Select bit When TMR1CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input When TMR1CS = 0 :. bit 2, x = Bit is unknown = T1SYNC: Timer1 External Clock Input Synchronization Select bit When TMR1CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input When TMR1CS = 0 :. bit 1, R = Readable bit -n = Value at POR = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from pin RC0/T1OSO/T13CKI (on the rising edge) 0 = Internal clock (F OSC/4). bit 1, Bit is set = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from pin",
    "REGISTER 13-1: T1CON: TIMER1 CONTROL REGISTER\nRC0/T1OSO/T13CKI (on the rising edge) 0 = Internal clock (F OSC/4). bit 1, x = Bit is unknown = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from pin RC0/T1OSO/T13CKI (on the rising edge) 0 = Internal clock (F OSC/4). bit 0, R = Readable bit -n = Value at POR = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1. bit 0, Bit is set = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1. bit 0, x = Bit is unknown = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1",
    "13.1 Timer1 Operation\nTimer1 can operate in one of these modes:\ncycle (FOSC/4). When the bit is set, Timer1 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\n\u00b7 Timer\n\u00b7 Synchronous Counter\n\u00b7 Asynchronous Counter\nThe operating mode is determined by the clock select bit, TMR1CS (T1CON<1>). When TMR1CS is cleared (= 0 ), Timer1 increments on every internal instruction\nWhen  Timer1  is  enabled,  the  RC1/T1OSI  and  RC0/ T1OSO/T13CKI pins become inputs. This means the values  of  TRISC<1:0>  are  ignored  and  the  pins  are read as ' 0 '.",
    "FIGURE 13-2: TIMER1 BLOCK DIAGRAM (16-BIT READ/WRITE MODE)\nNote 1: When enable bit, T1OSCEN, is cleared, the inverter and feedback resistor are turned off to eliminate power drain.",
    "13.2 Timer1 16-Bit Read/Write Mode\nTimer1 can be configured for 16-bit reads and writes (see Figure 13-2). When the RD16 control bit (T1CON<7>) is set, the address for TMR1H is mapped to a buffer register for the high byte of Timer1. A read from TMR1L will load the contents of the high byte of Timer1 into the Timer1 high byte buffer. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte, has become invalid due to a rollover between reads.\nA write to the high byte of Timer1 must also take place through the TMR1H Buffer register. The Timer1 high byte is updated with the contents of TMR1H when a write occurs to TMR1L. This allows a user to write all 16 bits to both the high and low bytes of Timer1 at once.",
    "13.2 Timer1 16-Bit Read/Write Mode\nThe  high  byte  of  Timer1  is  not  directly  readable  or writable in this mode. All reads and writes must take place  through  the  Timer1  High  Byte  Buffer  register. Writes  to  TMR1H  do  not  clear  the  Timer1  prescaler. The prescaler is only cleared on writes to TMR1L.",
    "13.3 Timer1 Oscillator\nAn  on-chip  crystal oscillator circuit is incorporated between  pins,  T1OSI  (input)  and  T1OSO  (amplifier output).  It  is  enabled  by  setting  the  Timer1  Oscillator Enable bit, T1OSCEN (T1CON<3>). The oscillator is a low-power  circuit rated for 32 kHz  crystals. It will continue to run during all power-managed modes. The circuit for a typical LP oscillator is shown in Figure 13-3. Table 13-1 shows the capacitor selection for the Timer1 oscillator.\nThe user must provide a software time delay to ensure proper start-up of the Timer1 oscillator.",
    "TABLE 13-1: CAPACITOR SELECTION FOR THE TIMER OSCILLATOR\nLP, Freq = 32 kHz. LP, C1 = 27 pF (1). LP, C2 = 27 pF (1)\nNote 1: Microchip  suggests  these  values  as  a starting  point  in  validating  the  oscillator circuit.\n2: Higher capacitance increases the stability of the oscillator, but also increases the start-up time.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer  for appropriate values of external components.\n4: Capacitor values are for design guidance only.",
    "13.3.1 USING TIMER1 AS A CLOCK SOURCE\nThe Timer1 oscillator is also available as a clock source in power-managed modes. By setting the clock select bits,  SCS<1:0>  (OSCCON<1:0>),  to  ' 01 ',  the  device switches  to  SEC_RUN  mode;  both  the  CPU  and peripherals are clocked from the Timer1 oscillator. If the IDLEN  bit  (OSCCON<7>)  is  cleared  and  a SLEEP instruction  is  executed,  the  device  enters  SEC_IDLE mode. Additional details are available  in Section 4.0 'Power-Managed Modes' .\nWhenever the Timer1 oscillator is providing the clock source, the Timer1 System Clock Status Flag, T1RUN (T1CON<6>), is set. This can be used to determine the controller's current clocking mode. It can also indicate the clock source being currently used by the Fail-Safe Clock Monitor. If the Clock Monitor is enabled and the Timer1 oscillator fails while providing the clock, polling the T1RUN bit will indicate whether the clock is being provided by the Timer1 oscillator or another source.",
    "13.3.2 LOW-POWER TIMER1 OPTION\nThe Timer1 oscillator can operate at two distinct levels of power consumption based on device configuration. When the LPT1OSC Configuration bit is set, the Timer1 oscillator operates in a low-power mode. When LPT1OSC is not set, Timer1 operates at a higher power level. Power consumption for a particular mode is relatively  constant,  regardless  of  the  device's  operating mode. The default Timer1 configuration is the higher power mode.\nAs  the  Low-Power  Timer1  mode  tends  to  be  more sensitive to interference, high noise environments may cause some oscillator instability. The low-power option is therefore best suited for low noise applications where power conservation is an important design consideration.",
    "13.6 Using Timer1 as a Real-Time Clock\nThe  Timer1  oscillator  circuit  draws  very  little  power during operation. Due to the low-power nature of the oscillator, it may also be sensitive to rapidly changing signals in close proximity.\nThe oscillator circuit, shown in Figure 13-3, should be located  as  close  as  possible  to  the  microcontroller. There should be no circuits passing within the oscillator circuit boundaries other than VSS or VDD.\nIf a high-speed circuit must be located near the oscillator (such as the CCP1 pin in Output Compare or PWM mode, or the primary oscillator using the OSC2 pin), a grounded guard ring around the oscillator circuit may be  helpful  when  used  on  a  single  sided  PCB,  or  in addition to a ground plane.",
    "13.4 Timer1 Interrupt\nThe TMR1 register pair (TMR1H:TMR1L) increments from  0000h  to  FFFFh  and  rolls  over  to  0000h.  The Timer1 interrupt, if enabled, is generated on overflow, which is latched in interrupt flag bit, TMR1IF (PIR1<0>). This interrupt can be enabled or disabled by setting or clearing the Timer1 Interrupt Enable bit, TMR1IE (PIE1<0>).",
    "13.5 Resetting Timer1 Using the CCP Special Event Trigger\nIf  CCP1 or CCP2 is configured in Compare mode to generate  a  Special  Event  Trigger  (CCP1M<3:0>  or CCP2M<3:0> = 1011 ),  this  signal  will  reset  Timer1. The trigger from CCP2 will also start an A/D conversion if the  A/D  module  is  enabled  (see Section 16.3.4 'Special Event Triggers' for more information.).\nThe module must be configured as either a timer or a synchronous counter to take advantage of this feature. When used this way, the CCPRH:CCPRL register pair effectively becomes a period register for Timer1.\nIf  Timer1 is running in Asynchronous Counter 'mode, this Reset operation may not work.\nIn  the  event  that  a  write  to  Timer1  coincides  with  a Special  Event  Trigger,  the  write  operation  will  take precedence.\nNote:\nThe special event triggers from the CCP2 module will not set the TMR1IF interrupt flag bit (PIR1<0>).",
    "13.5 Resetting Timer1 Using the CCP Special Event Trigger\nAdding an external LP oscillator to Timer1 (such as the one  described  in Section 13.3  'Timer1  Oscillator' , above), gives users the option to include RTC functionality to their applications. This is accomplished with an inexpensive watch crystal to provide an accurate time base and several lines of application code to calculate the time. When operating in Sleep mode and using a battery  or  supercapacitor  as  a  power  source,  it  can completely  eliminate  the  need  for  a  separate  RTC device and battery backup.\nThe  application code  routine, RTCisr , shown  in Example 13-1, demonstrates a simple method  to increment a counter at one-second intervals using an Interrupt Service Routine. Incrementing the TMR1 register pair to overflow triggers the interrupt and calls the routine, which increments the seconds counter by one; additional counters for minutes and hours are incremented as the previous counter overflow.",
    "13.5 Resetting Timer1 Using the CCP Special Event Trigger\nSince the register pair is 16 bits wide, counting up to overflow the register directly from a 32.768 kHz clock would  take  2  seconds.  To  force  the  overflow  at  the required one-second  intervals, it is necessary  to preload it; the simplest method is to set the Most Significant bit of TMR1H with a BSF instruction. Note that the TMR1L register is never preloaded or altered; doing so may introduce cumulative error over many cycles.\nFor this method to be accurate, Timer1 must operate in Asynchronous mode and the Timer1 overflow interrupt must  be  enabled  (PIE1<0>  = 1 ), as  shown  in  the routine RTCinit .  The Timer1 oscillator must also be enabled and running at all times.",
    "EXAMPLE 13-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nMOVLW MOVWF CLRF MOVLW MOVWF CLRF CLRF MOVLW MOVWF BSF RETURN, 1 = 80h TMR1H TMR1L b ' 00001111 ' T1CON secs mins .12 hours PIE1, TMR1IE. MOVLW MOVWF CLRF MOVLW MOVWF CLRF CLRF MOVLW MOVWF BSF RETURN, 2 = ; ; ; ;. MOVLW MOVWF CLRF MOVLW MOVWF CLRF CLRF MOVLW MOVWF BSF RETURN, 3 = ; Preload TMR1 register pair for 1 second overflow Configure for external clock, Asynchronous operation, external oscillator Initialize timekeeping registers. , 1 = TMR1H, 7. , 2 = ;. , 3 = Preload. BSF BCF INCF MOVLW CPFSGT RETURN CLRF INCF MOVLW CPFSGT RETURN",
    "EXAMPLE 13-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nCLRF INCF MOVLW CPFSGT RETURN MOVLW MOVWF RETURN, 1 = PIR1, TMR1IF secs, F .59 secs secs mins, F .59 F .23 hours. BSF BCF INCF MOVLW CPFSGT RETURN CLRF INCF MOVLW CPFSGT RETURN CLRF INCF MOVLW CPFSGT RETURN MOVLW MOVWF RETURN, 2 = ; ; ; ; ; ; ; ; ; ; ; ; ;. BSF BCF INCF MOVLW CPFSGT RETURN CLRF INCF MOVLW CPFSGT RETURN CLRF INCF MOVLW CPFSGT RETURN MOVLW MOVWF RETURN, 3 = Clear Increment 60 No, done Clear seconds Increment minutes 60 minutes elapsed? No, done clear minutes Increment hours 24 hours elapsed? No, done Reset hours to 1 Done. mins mins, 1 = . mins mins, 2 = . mins mins, 3 = . hours,,",
    "EXAMPLE 13-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n1 = . hours,, 2 = . hours,, 3 = . , 1 = . , 2 = ;. , 3 = . , 1 = .01. , 2 = . , 3 = . , 1 = hours. , 2 = . , 3 = ",
    "TABLE 13-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit",
    "TABLE 13-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. TMR1L, Bit 7 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 6 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 5 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit",
    "TABLE 13-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n4 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 3 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 2 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 1 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 0 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Reset Values on Page = 64. TMR1H, Bit 7 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 6 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 5 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 4 = Holding Register for the Most Significant Byte of the",
    "TABLE 13-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n16-Bit TMR1 Register. TMR1H, Bit 3 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 2 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 1 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 0 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Reset Values on Page = 64. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on Page = 64",
    "TABLE 13-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer1 module.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "14.1 Timer2 Operation\nThe  Timer2  timer  module  incorporates  the  following features:\n\u00b7 8-bit Timer and Period registers (TMR2 and PR2, respectively)\n\u00b7 Readable and writable (both registers)\n\u00b7 Software-programmable prescaler (1:1, 1:4 and 1:16)\n\u00b7 Software-programmable postscaler (1:1 through 1:16)\n\u00b7 Interrupt on TMR2-to-PR2 match\n\u00b7 Optional use as the shift clock for the MSSP module\nThe module is controlled through the T2CON register (Register 14-1),  which  enables  or  disables  the  timer and  configures  the  prescaler  and  postscaler.  Timer2 can  be  shut  off  by  clearing  control  bit,  TMR2ON (T2CON<2>), to minimize power consumption.\nA simplified block diagram of the module is shown in Figure 14-1.",
    "14.1 Timer2 Operation\nIn normal operation, TMR2 is incremented from 00h on each clock (FOSC/4). A 2-bit counter/prescaler on the clock input gives direct input, divide-by-4 and divide-by-16 prescale options; these are selected by the prescaler control bits, T2CKPS<1:0> (T2CON<1:0>). The value of  TMR2  is  compared  to  that  of  the  period  register, PR2, on each clock cycle. When the two values match, the comparator generates a match signal as the timer output. This signal also resets the value of TMR2 to 00h on  the  next  cycle  and  drives  the  output  counter/ postscaler (see Section 14.2 'Timer2 Interrupt' ).\nThe TMR2 and PR2 registers are both directly readable and  writable.  The  TMR2  register  is  cleared  on  any device Reset, while the PR2 register initializes at FFh. Both the prescaler and postscaler counters are cleared on the following events:",
    "14.1 Timer2 Operation\n\u00b7 a write to the TMR2 register\n\u00b7 a write to the T2CON register\n\u00b7 any device Reset (Power-on Reset, MCLR Reset, Watchdog Timer Reset, or Brown-out Reset)\nTMR2 is not cleared when T2CON is written.",
    "REGISTER 14-1: T2CON: TIMER2 CONTROL REGISTER\n-, R/W-0 = T2OUTPS3. -, R/W-0 = T2OUTPS2. -, R/W-0 = T2OUTPS1. -, R/W-0 = T2OUTPS0. -, R/W-0 = TMR2ON. -, R/W-0 = T2CKPS1. -, R/W-0 = T2CKPS0. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 14-1: T2CON: TIMER2 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nUnimplemented: Read as ' 0 '\nbit 6-3\nT2OUTPS<3:0>:\nTimer2 Output Postscale Select bits\n0000 = 1:1 Postscale\n0001 = 1:2 Postscale\n\u2022\n\u2022\n\u2022\n1111 = 1:16 Postscale\nbit 2\nTMR2ON: Timer2 On bit\n1 = Timer2 is on\n0 = Timer2 is off\nbit 1-0\nT2CKPS<1:0>: Timer2 Clock Prescale Select bits",
    "REGISTER 14-1: T2CON: TIMER2 CONTROL REGISTER\n00 = Prescaler is 1\n01 = Prescaler is 4\n1x = Prescaler is 16",
    "14.3 TMR2 Output\nTimer2 also can generate an optional device interrupt. The Timer2 output signal (TMR2-to-PR2 match) provides the input for the 4-bit output counter/postscaler. This counter generates the TMR2 match interrupt flag which is latched in TMR2IF (PIR1<1>). The interrupt is enabled by setting the TMR2 Match Interrupt Enable bit, TMR2IE (PIE1<1>).\nA range of 16 postscale options (from 1:1 through 1:16 inclusive) can be selected with the postscaler control bits, T2OUTPS<3:0> (T2CON<6:3>).",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\n3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register.",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nTMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on Page = 64. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on Page = 64. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on Page = 64",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer2 module.\nThe unscaled output of TMR2 is available primarily to the CCP modules, where it is used as a time base for operations in PWM mode.\nTimer2 can be optionally used as the shift clock source for  the  MSSP  module  operating  in  SPI  mode.  Additional information is provided in Section 17.0 'Master Synchronous Serial Port (MSSP) Module' .",
    "15.0 TIMER3 MODULE\nThe Timer3 timer/counter  module  incorporates  these features:\nA  simplified  block  diagram  of  the  Timer3  module  is shown in Figure 15-1. A block diagram of the module's operation in Read/Write mode is shown in Figure 15-2.\n\u00b7 Software-selectable operation as a 16-bit timer or counter\n\u00b7 Readable and writable 8-bit registers (TMR3H and TMR3L)\n\u00b7 Selectable clock source (internal or external), with device clock or Timer1 oscillator internal options\n\u00b7 Interrupt-on-overflow\n\u00b7 Module Reset on CCP Special Event Trigger",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nRD16, R/W-0 = T3CCP2. RD16, R/W-0 = T3CKPS1. RD16, R/W-0 = T3CKPS0. RD16, R/W-0 = T3CCP1. RD16, R/W-0 = T3SYNC. RD16, R/W-0 = TMR3CS. RD16, R/W-0 = TMR3ON. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nbit 7, Legend:.R = Readable bit.-n = Value at POR = RD16: 16-Bit Read/Write Mode Enable bit. bit 7, Legend:.W=Writable bit.'1' = Bit is set = RD16: 16-Bit Read/Write Mode Enable bit. bit 7, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = RD16: 16-Bit Read/Write Mode Enable bit. bit 7, Legend:.U = Unimplemented bit, read as '0'. = RD16: 16-Bit Read/Write Mode Enable bit. bit 6, 3, Legend:.R = Readable bit.-n = Value at POR = 0 T3CCP<2:1>: Timer3 and Timer1 to CCPx Enable bits 11 = Timer3 is the clock source for compare/capture of all CCP modules 10 = Timer3 is the clock source for compare/capture of CCP3, Timer1 is the clock source for compare/capture of CCP1 and CCP2. bit 6, 3,",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nLegend:.W=Writable bit.'1' = Bit is set = 0 T3CCP<2:1>: Timer3 and Timer1 to CCPx Enable bits 11 = Timer3 is the clock source for compare/capture of all CCP modules 10 = Timer3 is the clock source for compare/capture of CCP3, Timer1 is the clock source for compare/capture of CCP1 and CCP2. bit 6, 3, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = 0 T3CCP<2:1>: Timer3 and Timer1 to CCPx Enable bits 11 = Timer3 is the clock source for compare/capture of all CCP modules 10 = Timer3 is the clock source for compare/capture of CCP3, Timer1 is the clock source for compare/capture of CCP1 and CCP2. bit 6, 3, Legend:.U = Unimplemented bit, read as '0'. = 0 T3CCP<2:1>: Timer3 and Timer1 to CCPx Enable",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nbits 11 = Timer3 is the clock source for compare/capture of all CCP modules 10 = Timer3 is the clock source for compare/capture of CCP3, Timer1 is the clock source for compare/capture of CCP1 and CCP2. bit 5-4, Legend:.R = Readable bit.-n = Value at POR = T3CKPS<1:0> : Timer3 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 5-4, Legend:.W=Writable bit.'1' = Bit is set = T3CKPS<1:0> : Timer3 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 5-4, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = T3CKPS<1:0> : Timer3 Input Clock Prescale Select bits 11 =",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\n1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 5-4, Legend:.U = Unimplemented bit, read as '0'. = T3CKPS<1:0> : Timer3 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 2, Legend:.R = Readable bit.-n = Value at POR = T3SYNC: Timer3 External Clock Input Synchronization Control bit (Not usable if the device clock comes from Timer1/Timer3.) When TMR3CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 2, Legend:.W=Writable bit.'1' = Bit is set = T3SYNC: Timer3 External Clock Input Synchronization Control bit (Not usable if the device clock comes from Timer1/Timer3.) When TMR3CS = 1 : 1 = Do not",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nsynchronize external clock input 0 = Synchronize external clock input. bit 2, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = T3SYNC: Timer3 External Clock Input Synchronization Control bit (Not usable if the device clock comes from Timer1/Timer3.) When TMR3CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 2, Legend:.U = Unimplemented bit, read as '0'. = T3SYNC: Timer3 External Clock Input Synchronization Control bit (Not usable if the device clock comes from Timer1/Timer3.) When TMR3CS = 1 : 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 1, Legend:.R = Readable bit.-n = Value at POR = This bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 . TMR3CS: Timer3 Clock Source Select bit",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\n1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the. bit 1, Legend:.W=Writable bit.'1' = Bit is set = This bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 . TMR3CS: Timer3 Clock Source Select bit 1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the. bit 1, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = This bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 . TMR3CS: Timer3 Clock Source Select bit 1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the. bit 1, Legend:.U = Unimplemented bit, read as '0'. = This bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 . TMR3CS: Timer3 Clock Source Select bit 1 = External clock",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\ninput from Timer1 oscillator or T13CKI (on the rising edge after the. bit 0, Legend:.R = Readable bit.-n = Value at POR = TMR3ON: Timer3 On bit 1 = Enables Timer3 0 = Stops Timer3. bit 0, Legend:.W=Writable bit.'1' = Bit is set = TMR3ON: Timer3 On bit 1 = Enables Timer3 0 = Stops Timer3. bit 0, Legend:.U = Unimplemented bit, read as '0'.'0' = Bit is cleared = TMR3ON: Timer3 On bit 1 = Enables Timer3 0 = Stops Timer3. bit 0, Legend:.U = Unimplemented bit, read as '0'. = TMR3ON: Timer3 On bit 1 = Enables Timer3 0 = Stops Timer3",
    "REGISTER 15-1: T3CON: TIMER3 CONTROL REGISTER\nThe Timer3 module is controlled through the T3CON register (Register 15-1). It also selects the clock source options  for  the  CCP  modules  (see Section 16.1.1 'CCP  Modules  and  Timer  Resources' for  more information).",
    "15.1 Timer3 Operation\nTimer3 can operate in one of three modes:\ncycle (FOSC/4). When the bit is set, Timer3 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator, if enabled.\n\u00b7 Timer\n\u00b7 Synchronous counter\n\u00b7 Asynchronous counter\nThe operating mode is determined by the clock select bit, TMR3CS (T3CON<1>). When TMR3CS is cleared (= 0 ), Timer3 increments on every internal instruction\nAs  with  Timer1,  the  RC1/T1OSI  and  RC0/T1OSO/ T13CKI pins become inputs when the Timer1 oscillator is enabled. This means the values of TRISC<1:0> are ignored and the pins are read as ' 0 '.",
    "15.2 Timer3 16-Bit Read/Write Mode\nTimer3 can be configured for 16-bit reads and writes (see Figure 15-2). When the RD16 control bit (T3CON<7>) is set, the address for TMR3H is mapped to a buffer register for the high byte of Timer3. A read from TMR3L will load the contents of the high byte of Timer3 into the Timer3 High Byte Buffer register. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte,  has  become  invalid  due  to  a  rollover  between reads.\nA write to the high byte of Timer3 must also take place through the TMR3H Buffer register. The Timer3 high byte is updated with the contents of TMR3H when a write occurs to TMR3L. This allows a user to write all 16 bits to both the high and low bytes of Timer3 at once.\nThe  high  byte  of  Timer3  is  not  directly  readable  or writable in this mode. All reads and writes must take place through the Timer3 High Byte Buffer register.",
    "15.2 Timer3 16-Bit Read/Write Mode\nWrites  to  TMR3H  do  not  clear  the  Timer3  prescaler. The prescaler is only cleared on writes to TMR3L.",
    "15.3 Using the Timer1 Oscillator as the Timer3 Clock Source\nThe Timer1 internal oscillator may be used as the clock source for Timer3. The Timer1 oscillator is enabled by setting the T1OSCEN (T1CON<3>) bit. To use it as the Timer3 clock source, the TMR3CS bit must also be set. As  previously  noted,  this  also  configures  Timer3  to increment on every rising edge of the oscillator source.",
    "15.4 Timer3 Interrupt\nThe TMR3 register pair (TMR3H:TMR3L) increments from  0000h  to  FFFFh  and  overflows  to  0000h.  The Timer3 interrupt, if enabled, is generated on overflow and is latched in interrupt flag bit, TMR3IF (PIR2<1>). This interrupt can be enabled or disabled by setting or clearing the Timer3  Interrupt  Enable  bit, TMR3IE (PIE2<1>).",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nIf  either  the  CCP1  or  CCP2  modules is configured to generate  a  Special  Event  Trigger  in  Compare  mode (CCP1M<3:0> or CCP2M<3:0> = 1011 ), this signal will reset Timer3. The trigger of CCP2 will also start an A/D conversion if the A/D module is enabled (see Section 16.3.4  'Special  Event  Triggers' for more information).\nThe module must be configured as either a timer or synchronous counter to take advantage of this feature. When used this way,  the  CCPR2H:CCPR2L register pair effectively becomes a period register for Timer3.\nIf  Timer3  is  running  in  Asynchronous  Counter mode, the Reset operation may not work.\nIn  the  event  that  a  write  to  Timer3  coincides  with  a Special Event Trigger from a CCP module, the write will take precedence.\nNote:\nThe special event triggers from the CCP2 module will not set the TMR3IF interrupt flag bit (PIR1<0>).",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nThe  Timer1  oscillator  is  described  in Section 13.0 'Timer1 Module' .\n\nTABLE 15-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 65. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE.",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nPIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 65. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on Page = 65. TMR3L, Bit 7 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 6 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 5 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 4 = Holding Register for the Least Significant Byte of the",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\n16-Bit TMR3 Register. TMR3L, Bit 3 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 2 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 1 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Bit 0 = Holding Register for the Least Significant Byte of the 16-Bit TMR3 Register. TMR3L, Reset Values on Page = 65. TMR3H, Bit 7 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 6 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 5 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 4 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register.",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nTMR3H, Bit 3 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 2 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 1 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Bit 0 = Holding Register for the Most Significant Byte of the 16-Bit TMR3 Register. TMR3H, Reset Values on Page = 65. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on Page = 64. T3CON, Bit 7 = RD16.",
    "15.5 Resetting Timer3 Using the CCP Special Event Trigger\nT3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the Timer3 module.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "16.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nPIC18F6310/6410/8310/8410 devices have three CCP (Capture/Compare/PWM)  modules,  labelled  CCP1, CCP2  and  CCP3.  All  modules  implement  standard Capture, Compare and Pulse-Width Modulation (PWM) modes.\nEach CCP module contains a 16-bit register which can operate as a 16-bit Capture register, a 16-bit Compare register or a PWM Master/Slave Duty Cycle register. For the sake of clarity, all CCP module operation in the following sections is described with respect to CCP2, but are equally applicable to CCP1 and CCP3.",
    "REGISTER 16-1: CCPxCON: CCP1/CCP2/CCP3 CONTROL REGISTER\n-, U-0 = -. -, R/W-0 = DCxB1. -, R/W-0 = DCxB0. -, R/W-0 = CCPxM3. -, R/W-0 = CCPxM2. -, R/W-0 = CCPxM1. -, R/W-0 = CCPxM0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-1: CCPxCON: CCP1/CCP2/CCP3 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as ' 0 '\nbit 5-4\nDCxB<1:0> : PWM Duty Cycle bit 1 and bit 0 for CCP Module x\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:\nThese bits are the two Least Significant bits (bit 1 and bit 0) of the 10-bit PWM Duty Cycle register. The eight Most Significant bits (DCx<9:2>) of the PWM Duty Cycle are found in CCPRxL.\nCCPxM<3:0> : CCP Module x Mode Select bits\n0000 = Capture/Compare/PWM disabled (resets CCPx module)\n0001 = Reserved\n0010 = Compare mode, toggle output on match (CCPxIF bit is set)\n0011 = Reserved\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge",
    "bit 7-6 Unimplemented: Read as ' 0 '\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode: initialize CCPx pin low; on compare match, force CCPx pin high (CCPxIF bit is set)\n1001 = Compare mode: initialize CCPx pin high; on compare match, force CCPx pin low (CCPxIF bit is set)\n1010 = Compare mode: generate software interrupt on compare match (CCPxIF bit is set, CCPx pin reflects I/O state)\n1011 = Compare mode: trigger special event, reset timer, start A/D conversion on CCPx match (CCPxIF bit is set) (1,2)\n11xx = PWM mode\nNote 1: The Special Event Trigger on CCP1 will reset the timer but not start an A/D conversion on a CCP1 match.\n2: For CCP3, the Special Event Trigger is not available. This mode functions the same as Compare Generate Interrupt mode (CCP3M<3:0> = 1010 ).",
    "16.1 CCP Module Configuration\nEach  Capture/Compare/PWM  module  is  associated with a control register (generically, CCPxCON) and a data  register  (CCPRx).  The  data  register,  in  turn,  is comprised  of  two  8-bit  registers:  CCPRxL  (low  byte) and  CCPRxH  (high  byte).  All registers are both readable and writable.",
    "16.1.1 CCP MODULES AND TIMER RESOURCES\nThe CCP modules utilize Timers 1, 2 or 3, depending on the mode selected. Timer1 and Timer3 are available to modules  in  Capture  or  Compare  modes,  while Timer2 is available for modules in PWM mode.\nTABLE 16-1: CCP MODE - TIMER RESOURCE\n\nCapture Compare PWM, Timer Resource = Timer1 or Timer3 Timer1 or Timer3 Timer2\ntimer resource if they are configured to operate in the same mode (Capture/Compare or PWM) at the same time.\nDepending on the configuration selected, up to three timers may be active at once, with modules in the same configuration (Capture/Compare  or PWM)  sharing timer resources. The possible configurations are shown in Figure 16-1.",
    "16.1.2 CCP2 PIN ASSIGNMENT\nThe CCP2MX Configuration bit determines if CCP2 is multiplexed to its default or alternate assignment. By default, CCP2 is assigned to RC1 (CCP2MX = 1 ).  If CCP2MX is cleared, CCP2 is multiplexed with either RE7 or RB3 (RE7 is the only alternative assignment for 64-pin devices).\nFor  any  device  in  Microcontroller  mode,  the  alternate CCP2  assignment  is RE7. For 80-pin devices in Microcprocessor, Extended Microcontroller or Microcontroller with Boot Block mode, the alternate assignment is RB3. Note that RE7 is the only alternative assignment for 64-pin devices.\nThe  assignment  of  a  particular  timer  to  a  module  is determined  by  the  Timer-to-CCP  enable  bits  in  the T3CON register (Register 15-1). All three modules may be active at any given time and may share the same\nChanging the pin assignment of CCP2 does not automatically change any requirements for configuring the port pin. Users must always verify that the appropriate TRIS register is configured correctly for CCP2 operation, regardless of where it is located.",
    "FIGURE 16-1: CCP AND TIMER INTERCONNECT CONFIGURATIONS\nTimer1  is  used  for  all Capture and Compare operations for all three CCP modules. Timer2 is used for PWM operations for all three CCP modules. Timer3 is not used.\nAll modules may share Timer1 and Timer2 resources as common time bases.",
    "T3CCP<2:1> = 10\nTimer1 is used for Capture and Compare operations for CCP1 and Timer 3 is used for CCP2 and CCP3.\nAll three modules share Timer2 as a common time base for PWM operation.\nTimer1 is used for Capture and Compare operations for CCP1 and CCP2. Timer 3 is used for CCP3.\nAll three modules share Timer2 as a common time base for PWM operation.",
    "T3CCP<2:1> = 11\nTimer3  is  used  for  all Capture and Compare operations for all three CCP modules. Timer2 is used for PWM operations for all three CCP modules. Timer1 is not used.\nAll modules may share Timer2 and Timer3 resources as common time bases.",
    "16.2 Capture Mode\nIn Capture mode, the CCPR2H:CCPR2L register pair captures  the  16-bit  value  of  the  TMR1  or  TMR3 registers when an event occurs on the CCP2 pin (RC1 or RE7, depending on device configuration). An event is defined as one of the following:\n\u00b7 every falling edge\n\u00b7 every rising edge\n\u00b7 every 4th rising edge\n\u00b7 every 16th rising edge\nThe  event  is selected by the mode  select bits, CCP2M<3:0> (CCP2CON<3:0>).  When  a  capture  is made, the interrupt request flag bit, CCP2IF (PIR2<1>), is set; it must be cleared in software. If another capture occurs before the value in register CCPR2 is read, the old captured value is overwritten by the new captured value.",
    "16.2.1 CCP PIN CONFIGURATION\nIn Capture mode, the appropriate CCPx pin should be configured  as  an  input  by  setting  the  corresponding TRIS direction bit.\nNote:\nIf RC1/CCP2 or RE7/CCP2 is configured as an output, a write to the port can cause a capture condition.",
    "16.2.2 TIMER1/TIMER3 MODE SELECTION\nThe timers that are to be used with the capture feature (Timer1 and/or Timer3) must be running in Timer mode or Synchronized Counter mode. In Asynchronous Counter mode, the capture operation may not work.   The timer to be used with each CCP module is selected in the T3CON register (see Section 16.1.1 'CCP Modules and Timer Resources' ).",
    "16.3.1 CCP PIN CONFIGURATION\nWhen the Capture mode is changed, a false capture interrupt may be generated. The user should keep bit, CCP2IE (PIE2<1>), clear to avoid false interrupts and should clear the flag bit, CCP2IF, following any such change in operating mode.",
    "16.2.4 CCP PRESCALER\nThere are four prescaler settings in Capture mode; they are specified as part of the operating mode selected by the  mode  select  bits  (CCP2M<3:0>).  Whenever  the CCP module is turned off, or the CCP module is not in Capture mode, the prescaler counter is cleared. This means that any Reset will clear the prescaler counter.\nSwitching from one capture prescaler to another may generate an interrupt. Also, the prescaler counter will not be cleared, therefore, the first capture may be from a non-zero prescaler. Example 16-1 shows the recommended method for switching between capture prescalers.  This  example  also  clears  the  prescaler counter and will not generate the 'false' interrupt.",
    "EXAMPLE 16-1: CHANGING BETWEEN CAPTURE PRESCALERS\nCLRF MOVLW, 1 = ; Turn CCP module off ; Load WREG with the ; new prescaler mode ; value and CCP ON. MOVWF, 1 = ; Load CCP2CON with ; this value",
    "16.3 Compare Mode\nIn Compare mode, the 16-bit CCPR2 register value is constantly compared against either the TMR1 or TMR3 register  pair value. When a match occurs, the CCP2 pin can be:\n\u00b7 driven high\n\u00b7 driven low\n\u00b7 toggled (high-to-low or low-to-high)\n\u00b7 remain unchanged (that is, reflects the state of the I/O latch)\nThe action on the pin is based on the value of the mode select  bits  (CCP2M<3:0>).  At  the  same  time,  the interrupt flag bit, CCP2IF, is set.\nThe user must configure the CCPx pin as an output by clearing the appropriate TRIS bit.",
    "Note:\nClearing the CCPxCON register will force the  RC1  or  RE7  compare  output  latch (depending on device configuration) to the default low level. This is not the PORTC or PORTE I/O data latch.",
    "16.3.2 TIMER1/TIMER3 MODE SELECTION\nTimer1 and/or Timer3 must be running in Timer mode, or Synchronized Counter mode, if the CCP module is using the compare feature. In Asynchronous Counter mode, the compare operation may not work.",
    "16.3.3 SOFTWARE INTERRUPT MODE\nWhen the Generate Software Interrupt mode is chosen (CCP2M<3:0> = 1010 ), the CCP2 pin is not affected. Only a CCP interrupt is generated if enabled and the CCP2IE bit is set.",
    "16.3.4 SPECIAL EVENT TRIGGERS\nCCP1  and  CCP2  are  both  equipped  with  a  Special Event  Trigger.  This  is  an  internal  hardware  signal, generated in Compare mode, to trigger actions by other modules.  The  Special  Event  Trigger  is  enabled  by selecting  the  Compare  Special  Event  Trigger  mode (CCP2M<3:0> = 1011 ).\nFor either CCP module, the Special Event Trigger resets the Timer register pair for whichever timer resource is currently  assigned  as  the  module's  time  base.  This allows the CCPRx registers to serve as a programmable period register for either timer.\nThe Special Event Trigger for CCP2 can also start an A/D conversion. In order to do this, the A/D Converter must already be enabled.",
    "Note:\nThe Special Event Trigger of CCP1 only resets Timer1/Timer3 and cannot start an A/D conversion even when the A/D Converter is enabled.\nCCP3 is  not  equipped  with  a  Special  Event  Trigger. Selecting the Compare Special Event Trigger mode for this  device (CCP3M<3:0> = 1011 )  is  functionally  the same  as  selecting  the  Generate  Software  Interrupt mode (CCP3M<3:0> = 1010 ).",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on Page = 64. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nPIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 65. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 65. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nIPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on Page = 65. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit 1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nIPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on Page = 66. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on Page = 66. TRISE, Bit 7 = PORTE Data Direction Register. TRISE, Bit 6 = PORTE Data Direction Register. TRISE, Bit 5 = PORTE Data Direction Register. TRISE, Bit 4 = PORTE Data Direction Register. TRISE, Bit 3 = PORTE Data Direction Register. TRISE, Bit 2 = PORTE Data Direction Register. TRISE, Bit 1 = PORTE Data Direction Register. TRISE, Bit 0 = PORTE Data Direction Register. TRISE, Reset Values on Page = 66. TMR1L, Bit 7 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 6 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 5 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 4 = Holding Register for the Least",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nSignificant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 3 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 2 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 1 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Bit 0 = Holding Register for the Least Significant Byte of the 16-Bit TMR1 Register. TMR1L, Reset Values on Page = 64. TMR1H, Bit 7 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 6 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 5 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 4 = Holding Register for the Most Significant Byte of the 16-Bit",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR1 Register. TMR1H, Bit 3 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 2 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 1 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Bit 0 = Holding Register for the Most Significant Byte of the 16-Bit TMR1 Register. TMR1H, Reset Values on Page = 64. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Reset Values on Page = 64.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR3H, Bit 7 = Timer3 Register High Byte. TMR3H, Bit 6 = Timer3 Register High Byte. TMR3H, Bit 5 = Timer3 Register High Byte. TMR3H, Bit 4 = Timer3 Register High Byte. TMR3H, Bit 3 = Timer3 Register High Byte. TMR3H, Bit 2 = Timer3 Register High Byte. TMR3H, Bit 1 = Timer3 Register High Byte. TMR3H, Bit 0 = Timer3 Register High Byte. TMR3H, Reset Values on Page = 65. TMR3L, Bit 7 = Timer3 Register Low Byte. TMR3L, Bit 6 = Timer3 Register Low Byte. TMR3L, Bit 5 = Timer3 Register Low Byte. TMR3L, Bit 4 = Timer3 Register Low Byte. TMR3L, Bit 3 = Timer3 Register Low Byte. TMR3L, Bit 2 = Timer3 Register Low Byte. TMR3L, Bit 1 = Timer3 Register Low Byte.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR3L, Bit 0 = Timer3 Register Low Byte. TMR3L, Reset Values on Page = 65. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Reset Values on Page = 65. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 3 =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCapture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Reset Values on Page = 65. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 1 = Capture/Compare/PWM",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nRegister 1 (MSB). CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Reset Values on Page = 65. CCP1CON, Bit 7 = -. CCP1CON, Bit 6 = -. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on Page = 65. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 4 = Capture/Compare/PWM Register 2",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n(LSB). CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Reset Values on Page = 65. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 (MSB).",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCPR2H, Bit 1 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Reset Values on Page = 65. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on Page = 65. CCPR3L, Bit 7 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 6 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 5 = Capture/Compare/PWM Register 3 (LSB).",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCPR3L, Bit 4 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 3 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 2 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 1 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 0 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Reset Values on Page = 65. CCPR3H, Bit 7 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 6 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 5 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 4 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 3 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 2",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n= Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 1 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 0 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Reset Values on Page = 65. CCP3CON, Bit 7 = -. CCP3CON, Bit 6 = -. CCP3CON, Bit 5 = DC3B1. CCP3CON, Bit 4 = DC3B0. CCP3CON, Bit 3 = CCP3M3. CCP3CON, Bit 2 = CCP3M2. CCP3CON, Bit 1 = CCP3M1. CCP3CON, Bit 0 = CCP3M0. CCP3CON, Reset Values on Page = 65\nLegend:\n-= unimplemented, read as ' 0 '. Shaded cells are not used by Capture/Compare, Timer1 or Timer3.",
    "16.4 PWM Mode\nIn Pulse-Width Modulation (PWM) mode, the CCP2 pin produces up to a 10-bit resolution PWM output. Since the CCP2 pin is multiplexed with a PORTC or PORTE data latch, the appropriate TRIS bit must be cleared to make the CCP2 pin an output.\nNote:, 1 = Clearing the CCP2CON register will force the RC1 or RE7 output latch (depending on device configuration) to the default low level. This is not the PORTC or PORTE I/O data latch.\nFigure 16-4  shows  a  simplified  block  diagram  of  the CCP module in PWM mode.\nFor a step-by-step procedure on how to set up the CCP module for PWM  operation, see Section 16.4.3 'Setup for Pwm Operation' .",
    "FIGURE 16-4: SIMPLIFIED PWM BLOCK DIAGRAM\nNote 1: The 8-bit TMR2 value is concatenated with the 2-bit internal Q clock, or 2 bits of the prescaler, to create the 10-bit time base.\nA PWM output (Figure 16-5) has a time base (period) and a time that the output stays high (duty cycle). The frequency  of  the  PWM  is  the  inverse  of  the  period (1/period).",
    "16.4.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following formula:",
    "EQUATION 16-1:\nPWM Period   = (PR2) + 1] \u00b7 4 \u00b7 TOSC \u00b7 (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period].\nWhen TMR2 is equal to PR2, the following three events occur on the next increment cycle:\n\u00b7 TMR2 is cleared\n\u00b7 The CCP2 pin is set (exception: if PWM duty cycle = 0%, the CCP2 pin will not be set)\n\u00b7 The PWM duty cycle is latched from CCPR2L into CCPR2H\nNote:\nThe Timer2 postscalers (see Section 14.0 'Timer2 Module' )  are  not used  in  the  determination  of  the  PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "16.4.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPR2L register and to the CCP2CON<5:4> bits. Up to 10-bit resolution is available. The CCPR2L contains the eight MSbs and the CCP2CON<5:4> contains the two LSbs. This 10-bit value is represented by CCPR2L:CCP2CON<5:4>.  The  following  equation  is used to calculate the PWM duty cycle in time:",
    "EQUATION 16-2:\nPWM Duty Cycle =\n(CCPR2L:CCP2CON<5:4>) \u2022\nTOSC \u2022 (TMR2 Prescale Value)\nCCPR2L and CCP2CON<5:4> can be written to at any time,  but  the  duty  cycle  value  is  not  latched  into CCPR2H until after a match between PR2 and TMR2 occurs  (i.e.,  the  period  is  complete).  In  PWM  mode, CCPR2H is a read-only register.\nThe  CCPR2H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation.\nThe maximum PWM resolution (bits) for a given PWM frequency is given by the equation:",
    "EQUATION 16-3:\n<!-- formula-not-decoded -->\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP2 pin will not be cleared.",
    "16.4.3 SETUP FOR PWM OPERATION\nThe following steps should be taken when configuring the CCP module for PWM operation:\n1. Set  the  PWM  period  by  writing  to  the  PR2 register.\n2. Set  the  PWM  duty  cycle  by  writing  to  the CCPR2L register and CCP2CON<5:4> bits.\nWhen  the  CCPR2H  and  2-bit  latch  match  TMR2, concatenated with an internal 2-bit Q clock or 2 bits of the TMR2 prescaler, the CCP2 pin is cleared.\n3. Make the CCP2 pin an output by clearing the appropriate TRIS bit.\n4. Set  the  TMR2  prescale  value,  then  enable Timer2 by writing to T2CON.\n5. Configure the CCP2 module for PWM operation.",
    "TABLE 16-3: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 16-3: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. RCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on Page = 64. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF.",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nPIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. TRISB, Bit 7 = PORTB Data Direction",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nRegister. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Reset Values on Page = 66. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Reset Values on Page = 66. TRISE, Bit 7 = PORTE Data Direction Register. TRISE, Bit 6 = PORTE Data Direction Register. TRISE, Bit 5 = PORTE Data Direction Register. TRISE, Bit 4 = PORTE",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nData Direction Register. TRISE, Bit 3 = PORTE Data Direction Register. TRISE, Bit 2 = PORTE Data Direction Register. TRISE, Bit 1 = PORTE Data Direction Register. TRISE, Bit 0 = PORTE Data Direction Register. TRISE, Reset Values on Page = 66. TMR2, Bit 7 = Timer2 Register. TMR2, Bit 6 = Timer2 Register. TMR2, Bit 5 = Timer2 Register. TMR2, Bit 4 = Timer2 Register. TMR2, Bit 3 = Timer2 Register. TMR2, Bit 2 = Timer2 Register. TMR2, Bit 1 = Timer2 Register. TMR2, Bit 0 = Timer2 Register. TMR2, Reset Values on Page = 64. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nRegister. PR2, Bit 0 = Timer2 Period Register. PR2, Reset Values on Page = 64. T2CON, Bit 7 = -. T2CON, Bit 6 = T2OUTPS3. T2CON, Bit 5 = T2OUTPS2. T2CON, Bit 4 = T2OUTPS1. T2CON, Bit 3 = T2OUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Reset Values on Page = 64. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 3 = Capture/Compare/PWM Register 1",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n(LSB). CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Reset Values on Page = 65. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 (MSB). CCPR1H,",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nBit 0 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Reset Values on Page = 65. CCP1CON, Bit 7 = -. CCP1CON, Bit 6 = -. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Reset Values on Page = 65. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 3 =",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCapture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Reset Values on Page = 65. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 1 = Capture/Compare/PWM Register 2",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n(MSB). CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Reset Values on Page = 65. CCP2CON, Bit 7 = -. CCP2CON, Bit 6 = -. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Reset Values on Page = 65. CCPR3L, Bit 7 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 6 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 5 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 4 = Capture/Compare/PWM Register 3 (LSB).",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCCPR3L, Bit 3 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 2 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 1 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Bit 0 = Capture/Compare/PWM Register 3 (LSB). CCPR3L, Reset Values on Page = 65. CCPR3H, Bit 7 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 6 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 5 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 4 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 3 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 2 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 1 =",
    "TABLE 16-4: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nCapture/Compare/PWM Register 3 (MSB). CCPR3H, Bit 0 = Capture/Compare/PWM Register 3 (MSB). CCPR3H, Reset Values on Page = 65. CCP3CON, Bit 7 = -. CCP3CON, Bit 6 = -. CCP3CON, Bit 5 = DC3B1. CCP3CON, Bit 4 = DC3B0. CCP3CON, Bit 3 = CCP3M3. CCP3CON, Bit 2 = CCP3M2. CCP3CON, Bit 1 = CCP3M1. CCP3CON, Bit 0 = CCP3M0. CCP3CON, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by PWM or Timer2.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "17.1 Master SSP (MSSP) Module Overview\nThe Master Synchronous Serial Port (MSSP) module is a serial interface, useful for communicating with other peripheral or microcontroller devices. These peripheral devices may be serial EEPROMs, shift registers, display drivers, A/D converters, etc. The MSSP module can operate in one of two modes:\n\u00b7 Serial Peripheral Interface (SPI)\n\u00b7 Inter-Integrated Circuit (I 2 C)\n-Full Master mode\n-Slave mode (with general address call)\nThe  I 2 C  interface  supports  the  following  modes  in hardware:\n\u00b7 Master mode\n\u00b7 Multi-Master mode\n\u00b7 Slave mode",
    "17.2 Control Registers\nThe  MSSP  module  has  three  associated  registers. These  include  a  status  register  (SSPSTAT)  and  two control registers (SSPCON1 and SSPCON2). The use of these registers and their individual configuration bits differ  significantly  depending  on  whether  the  MSSP module is operated in SPI or I 2 C mode.\nAdditional  details  are  provided  under  the  individual sections.",
    "17.3 SPI Mode\nThe SPI mode allows 8 bits of data to be synchronously transmitted and received simultaneously. All four modes of SPI are supported. To accomplish communication, typically three pins are used:\n\u00b7 Serial Data Out (SDO)\n\u00b7 Serial Data In (SDI)\n\u00b7 Serial Clock (SCK)\nAdditionally, a fourth pin may be used when in a Slave mode of operation:\n- \u00b7 Slave Select (SS)\nFigure 17-1  shows  the  block  diagram  of  the  MSSP module when operating in SPI mode.",
    "17.3.1 REGISTERS\nThe  MSSP  module  has  four  registers  for  SPI  mode operation. These are:\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\nSSPCON1 and SSPSTAT are the control and status registers in SPI  mode  operation.  The  SSPCON1 register  is  readable  and  writable. The  lower 6 bits of the  SSPSTAT are read-only. The upper 2 bits of the SSPSTAT are read/write.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nSMP, R/W-0 = CKE. SMP, R-0 = D/A. SMP, R-0 = P. SMP, R-0 = S. SMP, R-0 = R/W. SMP, R-0 = UA. SMP, R-0 = BF. bit 7, R/W-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = . bit 7, R-0 = bit 0",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nSMP: Sample bit\nSPI Master mode:\n1 = Input data sampled at end of data output time\n0 = Input data sampled at middle of data output time\nSPI Slave mode:\nSMP must be cleared when SPI is used in Slave mode.",
    "bit 6\nCKE: SPI Clock Edge Select bit\nWhen CKP = 0 :\n1 = Data transmitted on rising edge of SCK\n0 = Data transmitted on falling edge of SCK\nWhen CKP = 1 :\n1 = Data transmitted on falling edge of SCK\n0 = Data transmitted on rising edge of SCK\nbit 5\nD/A: Data/Address bit\nUsed in I C mode only. 2",
    "bit 4\nP: Stop bit\nUsed in I C\u2122 mode only. This bit is cleared when the MSSP module is disabled; SSPEN is cleared. 2",
    "bit 3\nS: Start bit\nUsed in I C mode only. 2",
    "bit 2\nR/W: Read/Write bit Information\nUsed in I C mode only. 2",
    "bit 1\nUA: Update Address bit\nUsed in I C mode only. 2\nbit 0\nBF: Buffer Full Status bit (Receive mode only)\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nWCOL, R/W-0 = SSPOV (1). WCOL, R/W-0 = SSPEN (2). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3 (3). WCOL, R/W-0 = SSPM2 (3). WCOL, R/W-0 = SSPM1 (3). WCOL, R/W-0 = SSPM0 (3). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit (Transmit mode only)\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision\n(1)",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nSPI Slave mode:\n1 = A new byte is received while the SSPBUF register is still holding the previous data. In case of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user must read the  SSPBUF,  even  if  only  transmitting  data,  to  avoid  setting  overflow  (must  be  cleared  in software).\n0 = No overflow\nSSPEN: Master Synchronous Serial Port Enable bit (2)\n- 1 = Enables serial port and configures SCK, SDO, SDI and SS as serial port pins\n0 = Disables serial port and configures these pins as I/O port pins\nCKP: Clock Polarity Select bit\n1 = Idle state for clock is a high level\n0 = Idle state for clock is a low level\nSSPM<3:0>: Master Synchronous Serial Port Mode Select bits (3)\n0101 = SPI Slave mode, clock = SCK pin, SS pin control disabled, SS can be used as I/O pin\n0100 = SPI Slave mode, clock = SCK pin, SS pin control enabled",
    "bit 6 SSPOV: Receive Overflow Indicator bit\n0011 = SPI Master mode, clock = TMR2 output/2\n0010 = SPI Master mode, clock = FOSC/64\n0001 = SPI Master mode, clock = FOSC/16\n0000 = SPI Master mode, clock = FOSC/4\nNote 1: In Master mode, the overflow bit is not set, since each new reception (and transmission) is initiated by writing to the SSPBUF register.\n2: When enabled, these pins must be properly configured as inputs or outputs.\n3: Bit combinations not specifically listed here are either reserved or implemented in I 2 C\u2122 mode only.",
    "17.3.2 OPERATION\nWhen initializing the SPI, several options need to be specified. This is done by programming the appropriate control  bits  (SSPCON1<5:0>  and  SSPSTAT<7:6>). These control bits allow the following to be specified:\n- \u00b7 Master mode (SCK is the clock output)\nreading the data that was just received. Any write to the SSPBUF register during transmission/reception of data will be ignored and the write collision detect bit, WCOL (SSPCON1<7>), will be set. User software must clear the WCOL bit so that it can be determined if the following write(s) to the SSPBUF  register completed successfully.\n\u00b7 Slave mode (SCK is the clock input)\n\u00b7 Clock Polarity (Idle state of SCK)\n\u00b7 Data Input Sample Phase (middle or end of data output time)\n\u00b7 Clock Edge (output data on rising/falling edge of SCK)\n\u00b7 Clock Rate (Master mode only)\n\u00b7 Slave Select mode (Slave mode only)",
    "17.3.2 OPERATION\nThe MSSP consists of a transmit/receive shift register (SSPSR) and a buffer register (SSPBUF). The SSPSR shifts the data in and out of the device, MSb first. The SSPBUF holds the data that was written to the SSPSR until the received data is ready. Once the 8 bits of data have been received, that byte is moved to the SSPBUF register. Then, the Buffer Full detect bit, BF (SSPSTAT<0>), and the interrupt flag bit, SSPIF, are set. This double-buffering of the received data (SSPBUF) allows the next byte to start reception before",
    "17.3.2 OPERATION\nWhen the application software is expecting to receive valid data, the SSPBUF should be read before the next byte of data to transfer is written to the SSPBUF. The Buffer  Full  bit,  BF  (SSPSTAT<0>),  indicates  when SSPBUF  has  been  loaded  with  the  received  data (transmission is complete). When the SSPBUF is read, the BF bit is cleared. This data may be irrelevant if the SPI is only a transmitter. Generally, the MSSP interrupt is used to determine when the transmission/reception has  completed.  The  SSPBUF  must  be  read  and/or written. If the interrupt method is not going to be used, then software polling can be done to ensure that a write collision  does  not  occur.  Example 17-1  shows  the loading of the SSPBUF (SSPSR) for data transmission.\nThe SSPSR is not directly readable or writable and can only be accessed by addressing the SSPBUF register. Additionally,  the  MSSP  Status  register  (SSPSTAT) indicates the various status conditions.",
    "EXAMPLE 17-1: LOADING THE SSPBUF (SSPSR) REGISTER\nLOOP, 1 = BTFSS BRA. LOOP, 2 = SSPSTAT, BF LOOP. LOOP, 3 = ;Has data been received (transmit complete)? ;No. , 1 = MOVF. , 2 = SSPBUF, W. , 3 = ;WREG reg = contents of SSPBUF. , 1 = MOVWF. , 2 = RXDATA. , 3 = ;Save in user RAM, if data is meaningful. , 1 = MOVF. , 2 = TXDATA, W. , 3 = ;W reg = contents of TXDATA. , 1 = MOVWF. , 2 = SSPBUF. , 3 = ;New data to xmit\nNote 1: The SSPBUF register cannot be used with read-modify-write instructions, such as BCF BTFSC , and COMF , etc.\n2: To avoid lost data in Master mode, a read of the SSPBUF must be performed to clear the Buffer Full (BF) detect bit (SSPSTAT<0>) between each transmission.",
    "17.3.3 ENABLING SPI I/O\nTo  enable  the  serial  port,  MSSP  Enable  bit,  SSPEN (SSPCON1<5>), must be set. To reset or reconfigure SPI mode, clear the SSPEN  bit, reinitialize the SSPCON registers and then set the SSPEN bit. This configures the SDI, SDO, SCK and SS pins as serial port pins. For the pins to behave as the serial port function,  some must have their data direction bits (in the TRIS register) appropriately programmed as follows:\n\u00b7 SDI must have TRISC<4> bit cleared\n\u00b7 SDO must have TRISC<5> bit cleared\n\u00b7 SCK (Master mode) must have TRISC<3> bit cleared\n\u00b7 SCK (Slave mode) must have TRISC<3> bit set\n\u00b7 SS must have TRISF<7> bit set",
    "17.3.4 TYPICAL CONNECTION\nFigure 17-2 shows a typical connection between two microcontrollers. The  master controller (Processor 1) initiates the data transfer by sending the SCK signal. Data is shifted out of both shift registers on their programmed clock edge and latched on the opposite edge of the clock. Both processors should be programmed to the same Clock Polarity (CKP), then both controllers would  send  and  receive  data  at  the  same  time. Whether  the  data  is  meaningful  (or  dummy  data) depends  on  the  application  software.  This  leads  to three scenarios for data transmission:\n\u00b7 Master sends data - Slave sends dummy data \uf020 \uf020\n\u00b7 Master sends data - Slave sends data \uf020 \uf020\n\u00b7 Master sends dummy data - Slave sends data \uf020 \uf020\nAny  serial  port  function  that  is  not  desired  may  be overridden  by  programming  the  corresponding  Data Direction (TRIS) register to the opposite value.",
    "17.3.5 MASTER MODE\nThe master can initiate the data transfer at any time because it controls the SCK. The master determines when  the  slave (Processor 2, Figure 17-2) is to broadcast data by the software protocol.\nIn  Master  mode,  the  data  is  transmitted/received  as soon as the SSPBUF register is written to. If the SPI is only  going  to  receive,  the  SDO  output  could  be  disabled (programmed as an input). The SSPSR register will continue to shift in the signal present on the SDI pin at the programmed  clock  rate.  As  each  byte is received, it will be loaded into the SSPBUF register as if  a  normal  received  byte  (interrupts  and  status  bits appropriately  set).  This  could  be  useful  in  receiver applications as a 'Line Activity Monitor' mode.\nThe clock polarity is selected by appropriately programming the CKP bit (SSPCON1<4>). This then, would  give  waveforms  for  SPI  communication  as shown  in  Figure 17-3,  Figure 17-5  and  Figure 17-6, where the MSB is transmitted first. In Master mode, the SPI clock rate (bit rate) is user programmable to be one of the following:",
    "17.3.5 MASTER MODE\n\u00b7 FOSC/4 (or TCY)\n\u00b7 FOSC/16 (or 4 \u00b7 TCY)\n\u00b7 FOSC/64 (or 16 \u00b7 TCY)\n\u00b7 Timer2 output/2\nFigure 17-3  shows  the  waveforms  for  Master  mode. When the CKE bit is set, the SDO data is valid before there is a clock edge on SCK. The change of the input sample is shown based on the state of the SMP bit. The time  when  the  SSPBUF  is  loaded  with  the  received data is shown.\nFIGURE 17-3: SPI MODE WAVEFORM (MASTER MODE)",
    "17.3.6 SLAVE MODE\nIn Slave mode, the data is transmitted and received as the external clock pulses appear on SCK. When the last bit is latched, the SSPIF interrupt flag bit is set.\nWhile in Slave mode, the external clock is supplied by the external clock source on the SCK pin. This external clock must meet the minimum high and low times as specified in the electrical specifications.\nWhile in  Sleep  mode,  the  slave  can  transmit/receive data. When a byte is received, the device will wake-up from Sleep.",
    "17.3.7 SLAVE SELECT SYNCHRONIZATION\neven if in the middle of a transmitted byte and becomes a  floating  output.  External  pull-up/pull-down  resistors may be desirable, depending on the application.\nNote 1: When the SPI is in Slave mode with SS pin control enabled (SSPCON<3:0> = 0100 ), the SPI module will reset if the SS pin is set to VDD.\n2: If the SPI is used in Slave mode with CKE set,  then  the  SS  pin  control  must  be enabled\nWhen the SPI module resets, the bit counter is forced to ' 0 '. This can be done by either forcing the SS pin to a high level or clearing the SSPEN bit.\nThe SS pin allows  a  Synchronous Slave mode.  The SPI must be in Slave mode with SS pin control enabled (SSPCON1<3:0> = 04h). The pin must not be driven low for the SS pin to function as an input. The data latch must be high. When the SS pin is low, transmission and reception are enabled and the SDO pin is driven. When the SS pin goes high, the SDO pin is no longer driven,",
    "17.3.7 SLAVE SELECT SYNCHRONIZATION\nTo emulate two-wire communication, the SDO pin can be connected to the SDI pin. When the SPI needs to operate as a receiver, the SDO pin can be configured as an input. This disables transmissions from the SDO. The SDI can always be left as an input (SDI function) since it cannot create a bus conflict.\nFIGURE 17-4: SLAVE SYNCHRONIZATION WAVEFORM",
    "PIC18F6310/6410/8310/8410\nFIGURE 17-5:",
    "SPI MODE WAVEFORM (SLAVE MODE WITH CKE = 0\n)\nFIGURE 17-6:\nSPI MODE WAVEFORM (SLAVE MODE WITH CKE =\n)\n1",
    "17.3.9 EFFECTS OF A RESET\nIn SPI Master mode, module clocks may be operating at a different speed than when in Full-Power mode; in the case of the Sleep mode, all clocks are halted.\nIn most power-managed modes, a clock is provided to the peripherals. That clock should be from the primary clock source, the secondary clock (Timer1 oscillator at 32.768 kHz) or the INTOSC source. See Section 3.7 'Clock Sources and Oscillator Switching' for additional information.\nIn  most cases, the speed that the master clocks SPI data is not important; however, this should be evaluated for each system.\nIf MSSP interrupts are enabled, they can wake the controller from Sleep mode, or one of the Idle modes, when the  master  completes  sending  data.  If  an  exit  from Sleep  or  Idle  mode  is  not  desired,  MSSP  interrupts should be disabled.\nIf  the  Sleep  mode  is  selected,  all  module  clocks  are halted  and  the  transmission/reception  will  remain  in that  state  until  the  devices  wakes.  After  the  device returns to Run mode, the module will resume transmitting and receiving data.\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.3.10 BUS MODE COMPATIBILITY\nTable 17-1 shows the compatibility between the standard  SPI  modes  and  the  states  of  the  CKP  and CKE control bits.",
    "TABLE 17-1: SPI BUS MODES\n0, 0, Control Bits State.CKP = 0. 0, 0, Control Bits State.CKE = 1. 0, 1, Control Bits State.CKP = 0. 0, 1, Control Bits State.CKE = 0. 1, 0, Control Bits State.CKP = 1. 1, 0, Control Bits State.CKE = 1. 1, 1, Control Bits State.CKP = 1. 1, 1, Control Bits State.CKE = 0\nThere is also an SMP bit which controls when the data is sampled.\nIn  SPI  Slave  mode,  the  SPI  Transmit/Receive  Shift register  operates  asynchronously  to  the  device.  This allows the device to be placed in any power-managed mode  and  data  to  be  shifted  into  the  SPI  Transmit/ Receive  Shift  register.  When  all  8  bits  have  been received, the MSSP interrupt flag bit will be set and if enabled, will wake the device.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nRegister. TRISC, Reset Values on Page = 66. TRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register. TRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 = PORTF Data Direction Register. TRISF, Reset Values on Page = 66. SSPBUF, Bit 7 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 6 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 5 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 4 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 3 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 2 = Master Synchronous Serial Port Receive Buffer/Transmit Register.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPBUF, Bit 1 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 0 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Reset Values on Page = 64. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Reset Values on Page = 64. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Reset Values on Page",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\n= 64\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the MSSP in SPI mode.",
    "17.4.1 REGISTERS\nThe MSSP module in I 2 C  mode  fully  implements  all master  and  slave  functions  (including  general  call support) and provides interrupts on Start and Stop bits in  hardware  to  determine  a  free  bus  (multi-master function). The MSSP module implements the standard mode  specifications as well as 7-bit and 10-bit addressing.\nTwo pins are used for data transfer:\n\u00b7 Serial clock (SCL) - RC3/SCK/SCL\n\u00b7 Serial data (SDA) - RC4/SDI/SDA\nThe user must configure these pins as inputs through the TRISC<4:3> bits.",
    "(I 2 C\u2122 MODE)\nThe MSSP module has six registers for I 2 C operation. These are:\n\u00b7 MSSP Control Register 1 (SSPCON1)\n\u00b7 MSSP Control Register 2 (SSPCON2)\n\u00b7 MSSP Status Register (SSPSTAT)\n\u00b7 Serial Receive/Transmit Buffer Register (SSPBUF)\n\u00b7 MSSP Shift Register (SSPSR) - Not directly accessible\n\u00b7 MSSP Address Register (SSPADD)\nSSPCON1, SSPCON2  and  SSPSTAT  are  the  control and status registers in I 2 C mode  operation. The SSPCON1 and SSPCON2 registers are readable and writable. The lower 6 bits of the SSPSTAT are read-only. The upper 2 bits of the SSPSTAT are read/write.\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to, or read from.\nSSPADD  register  holds  the  slave  device  address when  the  MSSP  is  configured  in  I 2 C  Slave  mode. When  the  MSSP  is  configured  in  Master  mode,  the lower  7 bits of SSPADD  act  as  the  Baud  Rate Generator reload value.",
    "(I 2 C\u2122 MODE)\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nSMP, R/W-0 = CKE. SMP, R-0 = D/A. SMP, R-0 = P (1). SMP, R-0 = S (1). SMP, R-0 = R/W (2,3). SMP, R-0 = UA. SMP, R-0 = BF. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 0",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 C\u2122 MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Slew Rate Control bit\nIn Master or Slave mode:\n1 = Slew rate control disabled for Standard Speed mode (100 kHz and 1 MHz)\n0 = Slew rate control enabled for High-Speed mode (400 kHz)",
    "bit 6\nCKE: SMBus Select bit\nIn Master or Slave mode:\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "bit 5\nD/A: Data/Address bit\nIn Master mode:\nReserved.",
    "In Slave mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address",
    "bit 4 P: Stop bit\n(1)\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last",
    "bit 3 S: Start bit\n(1)\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last",
    "bit 2\nR/W: Read/Write bit Information (I 2 C mode only)",
    "In Slave mode: (2)\n1 = Read\n0 = Write",
    "In Master mode: (3)\n1 = Transmit is in progress\n0 = Transmit is not in progress",
    "bit 1\nUA: Update Address bit (10-Bit Slave mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated",
    "bit 0\nBF: Buffer Full Status bit",
    "In Transmit mode:\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty",
    "In Receive mode:\n1 = Data transmit in progress (does not include the ACK and Stop bits), SSPBUF is full\n0 = Data transmit complete (does not include the ACK and Stop bits), SSPBUF is empty\nNote 1: In Master mode, the overflow bit is not set since each new reception (and transmission) is initiated by writing to the SSPBUF register.\n2: When enabled, these pins must be properly configured as input or output.\n3: Bit combinations not specifically listed here are either reserved or implemented in I 2 C mode only.",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 C\u2122 MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. SMP, 1 = CKE. SMP, 2 = D/A. SMP, 3 = P (1). SMP, 4 = S (1). SMP, 5 = R/W (2,3). SMP, 6 = UA. SMP, 7 = BF\nbit 7\nbit 0",
    "bit 7 SMP: Slew Rate Control bit\nIn Master or Slave mode:\n1 = Slew rate control disabled for Standard Speed mode (100 kHz and 1 MHz)\n0 = Slew rate control enabled for High-Speed mode (400 kHz)\nCKE:\nSMBus Select bit\nIn Master or Slave mode:\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "In Master mode:\nReserved.\nIn Slave mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address",
    "bit 4 P: Stop bit (1)\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last",
    "bit 3 S: Start bit (1)\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last\nbit 2 R/W: Read/Write bit Information (I 2 C mode only)\nIn Slave mode: (2)\n1 = Read\nIn Master mode: (3)\n0 = Write\n1 = Transmit is in progress\n0 = Transmit is not in progress\nbit 1 UA: Update Address bit (10-Bit Slave mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated",
    "bit 0\nNote\n- BF: Buffer Full Status bit",
    "In Transmit mode:\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty",
    "In Receive mode:\n1 = Data transmit in progress (does not include the ACK and Stop bits), SSPBUF is full\n0 = Data transmit complete (does not include the ACK and Stop bits), SSPBUF is empty\n1: This bit is cleared on Reset and when SSPEN is cleared.\n2: This bit holds the R/W bit information following the last address match. This bit is only valid from the address match to the next Start bit, Stop bit or not ACK bit.\n3: ORing this bit with SEN, RSEN, PEN, RCEN or ACKEN will indicate if the MSSP is in Idle mode.\nbit 6",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. GCEN, 1 = ACKSTAT. GCEN, 2 = ACKDT (1). GCEN, 3 = ACKEN (2). GCEN, 4 = RCEN (2). GCEN, 5 = PEN (2). GCEN, 6 = RSEN (2). GCEN, 7 = SEN (2)\nbit 7\nbit 0",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\nbit 7 GCEN: General Call Enable bit (Slave mode only)\n1 = Enable interrupt when a general call address (0000h) is received in the SSPSR\n0 = General call address disabled\nbit 6 ACKSTAT: Acknowledge Status bit (Master Transmit mode only)\n1 = Acknowledge was not received from slave\n0 = Acknowledge was received from slave\nbit 5 ACKDT: Acknowledge Data bit (Master Receive mode only) (1)\n1 = Not Acknowledge\n0 = Acknowledge\nbit 4 ACKEN: Acknowledge Sequence Enable bit (Master Receive mode only) (2)\n1 = Initiate Acknowledge sequence on SDA and SCL pins and transmit ACKDT data bit; automatically cleared by hardware\n0 = Acknowledge sequence Idle\nbit 3 RCEN: Receive Enable bit (Master mode only) (2)\n1 = Enables Receive mode for I 2 C\n0 = Receive Idle\nbit 2 PEN: Stop Condition Enable bit (Master mode only) (2)\n1 = Initiate Stop condition on SDA and SCL pins; automatically cleared by hardware\n0 = Stop condition Idle\nbit 1 RSEN: Repeated Start Condition Enable bit (Master mode only) (2)",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 C\u2122 MODE)\n1 = Initiate Repeated Start condition on SDA and SCL pins; automatically cleared by hardware.\n0 = Repeated Start condition Idle\nbit 0 SEN: Start Condition Enable/Stretch Enable bit (2)",
    "In Master mode:\n1 = Initiate Start condition on SDA and SCL pins; automatically cleared by hardware\n0 = Start condition Idle",
    "In Slave mode:\n1 = Clock stretching is enabled for both slave transmit and slave receive (stretch enabled)\n0 = Clock stretching is disabled\nNote 1: Value that will be transmitted when the user initiates an Acknowledge sequence at the end of a receive.\n2: If the I 2 C module is not in Idle mode, this bit may not be set (no spooling) and the SSPBUF may not be written (or writes to the SSPBUF are disabled).",
    "17.4.3.1 Addressing\nThe  MSSP  module  functions  are  enabled  by  setting MSSP Enable bit, SSPEN (SSPCON<5>).\nThe  SSPCON1  register  allows  control  of  the  I 2 C operation. Four  mode selection bits (SSPCON<3:0>) allow one of the following I 2 C modes to be selected:\n\u00b7 I 2 C Master mode, Clock = (FOSC/4) x (SSPADD + 1)\n\u00b7 I 2 C Slave mode (7-bit address)\n\u00b7 I 2 C Slave mode (10-bit address)\n\u00b7 I 2 C Slave mode (7-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Slave mode (10-bit address) with Start and Stop bit interrupts enabled\n\u00b7 I 2 C Firmware Controlled Master mode, slave is Idle\nSelection  of  any  I 2 C  mode  with  the  SSPEN  bit  set, forces  the  SCL  and  SDA  pins  to  be  open-drain, provided  these  pins  are  programmed  to  inputs  by setting  the appropriate TRISC bits. To ensure proper operation  of  the  module,  pull-up  resistors  must  be provided externally to the SCL and SDA pins.",
    "17.4.3 SLAVE MODE\nIn Slave mode, the SCL and SDA pins must be configured as inputs (TRISC<4:3> set). The MSSP module will override the input state with the output data when required (slave-transmitter).\nThe I 2 C Slave mode hardware will always generate an interrupt  on  an  address  match.  Through  the  mode select  bits,  the  user  can  also  choose  to  interrupt  on Start and Stop bits\nWhen an address is matched, or the data transfer after an address match is received, the hardware automatically will generate the Acknowledge (ACK) pulse and load  the  SSPBUF  register  with  the  received  value currently in the SSPSR register.\nAny combination of the following conditions will cause the MSSP module not to give this ACK pulse:\n\u00b7 The Buffer Full bit, BF (SSPSTAT<0>), was set before the transfer was received.\n\u00b7 The overflow bit, SSPOV (SSPCON<6>), was set before the transfer was received.",
    "17.4.3 SLAVE MODE\nIn  this  case,  the  SSPSR register value is not loaded into the SSPBUF, but bit, SSPIF (PIR1<3>), is set. The BF bit is cleared by reading the SSPBUF register, while bit, SSPOV, is cleared through software.\nThe SCL clock input must have a minimum high and low for proper operation. The high and low times of the I 2 C  specification,  as  well  as  the  requirement  of  the MSSP module, are shown in timing Parameter #100 and Parameter #101.\nOnce the MSSP module has been enabled, it waits for a Start condition to occur. Following the Start condition, the 8 bits are shifted into the SSPSR register. All incoming bits are sampled with the rising edge of the clock (SCL)  line.  The  value  of  register  SSPSR<7:1>  is compared to the value of the  SSPADD register. The address is compared on the falling edge of the eighth clock (SCL) pulse. If the addresses match and the BF and SSPOV bits are clear, the following events occur:",
    "17.4.3 SLAVE MODE\n1. The  SSPSR  register  value  is  loaded  into  the SSPBUF register.\n2. The Buffer Full bit, BF, is set.\n3. An ACK pulse is generated.\n4. MSSP Interrupt  Flag  bit,  SSPIF  (PIR1<3>),  is set  (interrupt  is  generated,  if  enabled)  on  the falling edge of the ninth SCL pulse.\nIn 10-Bit Addressing mode, two address bytes need to be received by the slave. The five Most Significant bits (MSbs) of the first address byte specify if this is a 10-bit address. Bit, R/W (SSPSTAT<2>), must specify a write so  the  slave  device  will  receive  the  second  address byte. For a 10-bit address, the first byte would equal ' 11110  A9  A8  0 ',  where ' A9 '  and  ' A8 '  are the two MSbs of the address. The sequence of events for 10-bit addressing is as follows, with Steps 7 through 9 for the slave-transmitter:",
    "17.4.3 SLAVE MODE\n1. Receive first (high) byte of address (bits, SSPIF, BF and UA (SSPSTAT<1>), are set).\n2. Update the SSPADD register with second (low) byte of address (clears bit, UA, and releases the SCL line).\n3. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n4. Receive second (low) byte of address (SSPIF, BF and UA bits are set).\n5. Update the SSPADD register with the first (high) byte of address. If match releases SCL line, this will clear bit, UA.\n6. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n7. Receive Repeated Start condition.\n8. Receive first (high) byte of address (bits, SSPIF and BF, are set).\n9. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the address byte is clear and an address  match  occurs,  the  R/W  bit  of  the  SSPSTAT register is cleared. The received address is loaded into the  SSPBUF  register  and  the  SDA  line  is  held  low (ACK).\nWhen the address byte overflow condition exists, then the no Acknowledge (ACK) pulse is given. An overflow condition is defined as either bit, BF (SSPSTAT<0>), is set or bit, SSPOV (SSPCON1<6>), is set.\nAn MSSP interrupt is generated for each data transfer byte.  Flag  bit,  SSPIF  (PIR1<3>),  must  be  cleared  in software. The SSPSTAT register is used to determine the status of the byte.\nIf SEN is enabled (SSPCON2<0> = 1 ), RC3/SCK/SCL will  be  held  low  (clock  stretch)  following  each  data transfer.  The  clock  must  be  released  by  setting  bit, CKP  (SSPCON<4>). See Section 17.4.4 'Clock Stretching' for more details.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the incoming address byte is set and  an  address  match  occurs,  the  R/W  bit  of  the SSPSTAT register is set. The received address is loaded into the SSPBUF register. The ACK pulse will be sent on the ninth bit and pin, RC3/SCK/SCL, is held low regardless  of  SEN  (see Section 17.4.4 'Clock Stretching' for more detail). By stretching the clock, the master will be unable to assert another clock pulse until the slave is done  preparing  the  transmit  data.  The  transmit  data must be loaded into the SSPBUF register  which  also loads the SSPSR register. Then, the RC3/SCK/SCL pin should be enabled by setting bit, CKP (SSPCON1<4>). The 8 data bits are shifted out on the falling edge of the SCL  input.  This  ensures  that  the  SDA  signal  is  valid during the SCL high time (Figure 17-9).",
    "17.4.3.3 Transmission\nThe ACK pulse from the master-receiver is latched on the rising edge of the ninth SCL input pulse. If the SDA line is high  (not  ACK),  then  the  data  transfer  is complete. In this case, when the ACK is latched by the slave, the slave monitors for another occurrence of the Start bit. If the SDA line was low (ACK), the next transmit  data  must  be  loaded  into  the  SSPBUF  register. Again, pin, RC3/SCK/SCL, must be enabled by setting bit, CKP.\nAn MSSP interrupt is generated for each data transfer byte. The SSPIF bit must be cleared in software and the SSPSTAT register is used to determine the status of the byte. The SSPIF bit is set on the falling edge of the ninth clock pulse.",
    "17.4.4 CLOCK STRETCHING\nBoth 7 and 10-Bit Slave modes implement automatic clock stretching during a transmit sequence.",
    "17.4.4.3 Clock Stretching for 7-Bit Slave Transmit Mode\nThe SEN bit (SSPCON2<0>) allows clock stretching to be  enabled  during  receives.  Setting  SEN  will  cause the  SCL  pin  to  be  held  low  at  the  end  of  each  data receive sequence.",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nIn 7-Bit Slave Receive mode, on the falling edge of the ninth clock at the end of the ACK sequence, if the BF bit  is  set,  the  CKP  bit  in  the  SSPCON1  register  is automatically  cleared,  forcing  the  SCL  output  to  be held low. The CKP being cleared to ' 0 '  will assert the SCL line low. The CKP bit must be set in the user's ISR before reception is allowed to continue. By holding the SCL line low, the user has time to service the ISR and  read  the  contents  of  the  SSPBUF  before  the master device can initiate another receive sequence. This  will  prevent  buffer  overruns  from  occurring  (see Figure 17-13).",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nNote 1: If the  user  reads  the  contents  of  the SSPBUF  before  the  falling  edge  of  the ninth clock, thus clearing the BF bit, the CKP  bit  will  not  be  cleared  and  clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit. The user should be careful to clear the BF bit in the ISR before the next receive sequence in order to prevent an overflow condition.",
    "17.4.4.2 Clock Stretching for 10-Bit Slave Receive Mode (SEN = 1 )\nIn  10-Bit  Slave  Receive  mode  during  the  address sequence,  clock  stretching  automatically  takes  place but CKP is not cleared. During this time, if the UA bit is set  after  the  ninth  clock,  clock  stretching  is  initiated. The UA bit is set after receiving the upper byte of the 10-bit address and following the receive of the second byte of the 10-bit address with the R/W bit cleared to ' 0 '. The release of the clock line occurs upon updating SSPADD.  Clock  stretching  will  occur  on  each  data receive sequence as described in 7-bit mode.",
    "Note:\nIf the user polls the UA bit and clears it by updating the SSPADD register before the falling edge of the ninth clock occurs and if the user hasn't cleared the BF bit by reading the SSPBUF register before that time, then the CKP bit will still NOT be asserted low.  Clock  stretching  on  the  basis  of  the state  of  the  BF  bit  only  occurs  during  a data sequence, not an address sequence.\n7-Bit Slave Transmit mode implements clock stretching by clearing the CKP bit after the falling edge of the ninth clock, if the BF bit is clear. This occurs regardless of the state of the SEN bit.\nThe user's ISR must set the CKP bit before transmission  is  allowed  to  continue.  By  holding  the  SCL  line low, the user has time to service the ISR and load the contents of the SSPBUF before the master device can initiate another transmit sequence (see Figure 17-9).\nNote 1: If the user loads the contents of SSPBUF, setting the BF bit before the falling edge of the ninth clock, the CKP bit will not be cleared and  clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit.",
    "17.4.4.4 Clock Stretching for 10-Bit Slave Transmit Mode\nIn  10-Bit  Slave  Transmit  mode,  clock  stretching  is controlled during the first two address sequences by the  state  of  the  UA  bit,  just  as  it  is  in  10-Bit  Slave Receive  mode. The  first  two  addresses  are  followed by a third address sequence which contains the highorder bits of the 10-bit address and the R/W bit set to ' 1 '. After the third address sequence is performed, the UA  bit  is  not  set,  the  module  is  now  configured  in Transmit  mode  and  clock  stretching  is  controlled  by the  BF  flag  as  in  7-Bit  Slave  Transmit  mode  (see Figure 17-11).",
    "PIC18F6310/6410/8310/8410\n17.4.4.5 Clock Synchronization and the CKP bit\nWhen the CKP bit is cleared, the SCL output is forced to ' 0 '. However, setting the CKP bit will not assert the SCL  output  low  until the SCL  output  is already sampled low. Therefore, the CKP bit will not assert the SCL  line  until  an  external  I 2 C  master  device  has already  asserted  the  SCL  line.  The  SCL  output  will remain  low  until  the  CKP  bit  is  set  and  all  other devices  on  the  I 2 C  bus  have  deasserted  SCL.  This ensures that a write to the CKP bit will not violate the minimum high time requirement for SCL (see Figure 17-12).",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nThe addressing procedure for the I 2 C bus is such that the  first  byte  after  the  Start  condition  usually  determines which device will be the slave addressed by the master. The exception is the general call address which can address all devices. When this address is used, all devices should, in theory, respond with an Acknowledge.\nThe  general  call  address  is  one  of  eight  addresses reserved for specific purposes by the I 2 C protocol. It consists of all ' 0 's with R/W = 0 .\nThe general call address is recognized when the General Call Enable bit (GCEN) is enabled (SSPCON2<7> set). Following a Start bit detect, 8 bits are shifted into the SSPSR and the address is compared against the SSPADD.  It  is  also  compared  to  the  general  call address and fixed in hardware.\nIf  the  general  call  address  matches,  the  SSPSR  is transferred to the SSPBUF, the BF flag bit is set (eighth bit) and on the falling edge of the ninth bit (ACK bit), the SSPIF interrupt flag bit is set.",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nWhen the interrupt is serviced, the source for the interrupt  can  be  checked  by  reading  the  contents  of  the SSPBUF. The value can be used to determine if the address was device specific or a general call address.\nIn 10-bit mode, the SSPADD is required to be updated for the second half of the address to match and the UA bit is set (SSPSTAT<1>). If the general call address is sampled when the GCEN bit is set, while the slave is configured in 10-Bit Addressing mode, then the second half of the address is not necessary, the UA bit will not be set and the slave will begin receiving data after the Acknowledge (Figure 17-15).",
    "17.4.6 MASTER MODE\nMaster  mode  is  enabled  by  setting  and  clearing  the appropriate SSPM bits in SSPCON1 and by setting the SSPEN bit. In Master mode, the SCL and SDA lines are manipulated by the MSSP hardware.\nMaster  mode  of  operation  is  supported  by  interrupt generation on the detection of the Start and Stop conditions. The Stop (P) and Start (S) bits are cleared from a Reset or when the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit is set or the bus is Idle, with both the S and P bits clear.\nIn Firmware  Controlled Master mode,  user  code conducts  all  I 2 C  bus  operations  based  on  Start  and Stop bit conditions.\nOnce  Master  mode  is  enabled,  the  user  has  six options.\n1. Assert a Start condition on SDA and SCL.\n2. Assert a Repeated Start condition on SDA and SCL.\n3. Write to the SSPBUF register initiating transmission of data/address.\n4. Configure the I 2 C port to receive data.\n5. Generate an Acknowledge condition at the end of a received byte of data.\n6. Generate a Stop condition on SDA and SCL.",
    "Note:\nThe  MSSP  module,  when  configured  in I 2 C Master mode, does not allow queueing of  events.  For  instance,  the  user  is  not allowed  to  initiate  a  Start  condition  and immediately write the SSPBUF register to initiate transmission before the Start condition  is  complete.  In  this  case,  the SSPBUF  will  not  be  written  to  and  the WCOL bit will be set, indicating that a write to the SSPBUF did not occur.\nThe following events will cause MSSP Interrupt Flag bit, SSPIF, to be set (MSSP interrupt, if enabled):\n\u00b7 Start condition\n\u00b7 Stop condition\n\u00b7 Data transfer byte transmitted/received\n\u00b7 Acknowledge transmit\n\u00b7 Repeated Start",
    "17.4.6.1 I 2 C Master Mode Operation\nA typical transmit sequence would go as follows:\nThe  master  device  generates  all  of  the  serial  clock pulses and the Start and Stop conditions.   A transfer is ended with a Stop condition or with a Repeated Start condition.  Since the Repeated Start condition is also the beginning of the next serial transfer, the I 2 C bus will not be released.\nIn Master  Transmitter  mode,  serial  data  is  output through SDA, while SCL outputs the serial clock. The first byte transmitted contains the slave address of the receiving device (7 bits) and the Read/Write (R/W) bit. In this case, the R/W bit will be logic ' 0 '. Serial data is transmitted, 8 bits at a time. After each byte is transmitted,  an  Acknowledge  bit  is  received.  Start  and  Stop conditions are output to indicate the beginning and the end of a serial transfer.",
    "17.4.6.1 I 2 C Master Mode Operation\nIn  Master  Receive  mode,  the  first  byte  transmitted contains the slave address of the transmitting device (7 bits) and the R/W bit. In this case, the R/W bit will be logic ' 1 '. Thus, the first byte transmitted is a 7-bit slave address, followed by a ' 1 '  to  indicate  the  receive  bit. Serial data is received via SDA, while SCL outputs the serial clock. Serial data is received 8 bits at a time. After each byte is received, an Acknowledge bit is transmitted.  Start  and  Stop  conditions  indicate  the  beginning and end of transmission.\nThe Baud Rate Generator used for the SPI mode operation is used to set the SCL clock frequency for either 100  kHz,  400  kHz  or  1  MHz  I 2 C  operation.  See Section 17.4.7 'Baud Rate' for more detail.",
    "17.4.6.1 I 2 C Master Mode Operation\n1. The user generates a Start condition by setting the Start Enable bit, SEN (SSPCON2<0>).\n2. SSPIF is set. The MSSP module will wait the required  start  time  before  any  other  operation takes place.\n3. The  user  loads  the  SSPBUF  with  the  slave address to transmit.\n4. Address is shifted out the SDA pin until all 8 bits are transmitted.\n5. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n6. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.\n7. The user loads the SSPBUF with 8 bits of data.\n8. Data is shifted out the SDA pin until all 8 bits are transmitted.\n9. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n10. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.",
    "17.4.6.1 I 2 C Master Mode Operation\n11. The user generates a Stop condition by setting the Stop Enable bit, PEN (SSPCON2<2>).\n12. Interrupt is generated once the Stop condition is complete.",
    "17.4.7 BAUD RATE\nIn I 2 C Master mode, the Baud Rate Generator (BRG) reload  value  is  placed  in  the  lower  7  bits  of  the SSPADD register (Figure 17-17). When a write occurs to SSPBUF, the Baud Rate Generator will automatically begin counting. The BRG counts down to ' 0 ' and stops until another reload has taken place. The BRG count is decremented twice per instruction cycle (TCY) on the Q2 and Q4 clocks. In I 2 C  Master  mode,  the  BRG  is reloaded automatically.\nOnce the given operation is complete (i.e., transmission of the last data bit is followed by ACK), the internal clock will automatically stop counting and the SCL pin will remain in its last state.\nTable 17-3 demonstrates clock rates based on instruction  cycles  and  the  BRG  value  loaded  into SSPADD. Table 17-3 demonstrates clock rates based on instruction cycles  and the  BRG value  loaded into SSPADD. The SSPADD BRG value of ' 0x00 '  is  not supported.",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\n10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 19h. 10 MHz, FSCL (2 Rollovers of BRG) = 400 kHz. 10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 20h. 10 MHz, FSCL (2 Rollovers of BRG) = 312.5 kHz. 10 MHz, FCY * 2 = 20 MHz. 10 MHz, BRG Value = 3Fh. 10 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 0Ah. 4 MHz, FSCL (2 Rollovers of BRG) = 400 kHz. 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 0Dh. 4 MHz, FSCL (2 Rollovers of BRG) = 308 kHz. 4 MHz, FCY * 2 = 8 MHz. 4 MHz, BRG Value = 28h. 4 MHz, FSCL (2 Rollovers of BRG) = 100 kHz. 1 MHz,",
    "TABLE 17-3: I 2 C\u2122 CLOCK RATE W/BRG\nFCY * 2 = 2 MHz. 1 MHz, BRG Value = 03h. 1 MHz, FSCL (2 Rollovers of BRG) = 333 kHz. 1 MHz, FCY * 2 = 2 MHz. 1 MHz, BRG Value = 0Ah. 1 MHz, FSCL (2 Rollovers of BRG) = 100 kHz",
    "17.4.7.1 Clock Arbitration\nClock arbitration occurs when the master, during any receive,  transmit  or  Repeated  Start/Stop  condition, deasserts  the  SCL  pin  (SCL  allowed  to  float  high). When the SCL pin is allowed to float high, the Baud Rate  Generator  (BRG)  is  suspended  from  counting until the SCL pin is actually sampled high. When the\nSCL pin is sampled high, the Baud Rate Generator is reloaded  with  the  contents  of  SSPADD<6:0>  and begins counting. This ensures that the SCL high time will always be at least one BRG rollover count in the event that the clock is held low by an external device (Figure 17-18).",
    "17.4.8 I 2 C MASTER MODE START CONDITION TIMING\nTo  initiate  a  Start  condition,  the  user  sets  the  Start Enable bit, SEN (SSPCON2<0>). If the SDA and SCL pins  are  sampled  high,  the  Baud  Rate  Generator  is reloaded with the contents of SSPADD<6:0> and starts its count. If SCL and SDA are both sampled high when the Baud Rate Generator times out (TBRG), the SDA pin is driven low. The action of the SDA being driven low while SCL is high is the Start condition and causes the S bit (SSPSTAT<3>) to be set. Following this, the Baud Rate Generator is reloaded with the contents of SSPADD<6:0> and resumes its count. When the Baud Rate Generator times out (TBRG), the SEN  bit (SSPCON2<0>) will be automatically cleared by hardware, the Baud Rate Generator is suspended, leaving the  SDA  line  held  low  and  the  Start  condition  is complete.\nNote:",
    "17.4.8 I 2 C MASTER MODE START CONDITION TIMING\nIf, at the beginning of the Start condition, the SDA  and SCL  pins are already sampled low, or if during the Start condition,  the  SCL line is  sampled low before the SDA line is driven low, a bus collision occurs,  the  Bus  Collision  Interrupt  Flag, BCLIF, is set, the Start condition is aborted and  the  I 2 C  module  is  reset  into  its  Idle state.",
    "17.4.8.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Start sequence is in progress, the WCOL is set and the contents of the buffer are unchanged (the write doesn't occur).\nNote:\nBecause queueing of events is not allowed,  writing  to  the  lower  5  bits  of SSPCON2  is  disabled  until the Start condition is complete.",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\n- Note 1: If  RSEN is programmed while any other event is in progress, it will not take effect.",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nA Repeated Start condition occurs when the RSEN bit (SSPCON2<1>) is programmed high and the I 2 C logic module is in the Idle state. When the RSEN bit is set, the SCL pin is asserted low. When the SCL pin is sampled low, the Baud Rate Generator is loaded with the contents of SSPADD<5:0> and begins counting. The SDA pin is released (brought high) for one Baud Rate Generator count (TBRG). When the Baud Rate Generator times out, if SDA is sampled high, the SCL pin will be deasserted (brought high). When SCL is sampled high,  the  Baud  Rate  Generator  is  reloaded  with  the contents of SSPADD<6:0> and begins counting. SDA and  SCL  must  be  sampled  high  for  one  TBRG.  This action  is  then  followed  by  assertion  of  the  SDA  pin (SDA = 0 ) for one TBRG while SCL is high. Following this, the RSEN bit (SSPCON2<1>) will be automatically cleared  and  the  Baud  Rate  Generator  will  not",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nbe reloaded, leaving the SDA pin held low. As soon as a Start condition is detected on the SDA and SCL pins, the S bit (SSPSTAT<3>) will be set. The SSPIF bit will not be set until the Baud Rate Generator has timed out.\n2: A bus collision during the Repeated Start condition occurs if:\n\u00b7 SDA is sampled low when SCL goes from low-to-high.\n\u00b7 SCL goes low before SDA is asserted low. This may indicate that another master is attempting to transmit a data ' 1 '.\nImmediately following the SSPIF bit getting set, the user may write the SSPBUF with the 7-bit address in 7-bit mode, or the default first address in 10-bit mode. After the first 8 bits are transmitted and an ACK is received, the  user  may  then  transmit  an  additional  eight  bits  of address (10-bit mode) or 8 bits of data (7-bit mode).",
    "17.4.9.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Repeated Start sequence is in progress, the WCOL is set and the contents  of  the  buffer  are  unchanged  (the  write  doesn't occur).",
    "Note:\nBecause queueing of events is not allowed,  writing  of  the  lower  5  bits  of SSPCON2 is disabled until the Repeated Start condition is complete.",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nTransmission  of  a  data  byte,  a  7-bit  address  or  the other half of a 10-bit address is accomplished by simply writing a value to the SSPBUF register. This action will set the Buffer Full flag bit, BF, and allow the Baud Rate Generator to begin counting and start the next transmission.  Each  bit  of  address/data  will  be  shifted  out onto  the  SDA  pin  after  the  falling  edge  of  SCL  is asserted (see data hold time specification Parameter #106). SCL is held low for one Baud Rate Generator rollover count (TBRG). Data should be valid before SCL is released high (see data setup time specification Parameter  #107).  When  the  SCL  pin  is released high, it is held that way for TBRG. The data on the SDA pin must remain stable for that duration and some hold time after the next falling edge of SCL. After the eighth bit is shifted out (the falling edge of the eighth clock), the BF flag is cleared and the master releases SDA. This allows the slave device being addressed to respond with an ACK bit during the ninth bit time if an address  match  occurred,  or  if  data  was",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nreceived properly. The status of ACK is written into the ACKDT bit on the falling edge of the ninth clock. If the master receives an Acknowledge, the Acknowledge Status bit, ACKSTAT, is cleared. If not, the bit is set. After the ninth clock, the SSPIF bit is set and the master clock (Baud Rate Generator) is suspended until the next data byte is loaded into the SSPBUF, leaving SCL low and SDA unchanged (Figure 17-21).",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nAfter the write to the SSPBUF, each bit of address will be  shifted  out  on  the  falling  edge  of  SCL  until  all 7 address bits and the R/W bit are completed. On the falling edge of the eighth clock, the master will deassert the  SDA  pin,  allowing  the  slave  to  respond  with  an Acknowledge. On the falling edge of the ninth clock, the master will sample the SDA pin to see if the address was recognized by a slave. The status of the ACK bit is loaded into the ACKSTAT status bit (SSPCON2<6>). Following the falling edge of the ninth clock transmission of the address, the SSPIF is set, the BF flag is cleared and the Baud Rate Generator is turned off until another write to the SSPBUF takes place, holding SCL low and allowing SDA to float.",
    "17.4.10.1 BF Status Flag\nIn  Transmit  mode,  the  BF  bit  (SSPSTAT<0>)  is  set when the CPU writes to SSPBUF and is cleared when all 8 bits are shifted out.",
    "17.4.10.2 WCOL Status Flag\nIf  the  user  writes  the  SSPBUF  when  a  transmit  is already in progress (i.e., SSPSR is still shifting out a data byte), the WCOL is set and the contents of the buffer  are  unchanged  (the  write  doesn't  occur)  after 2 TCY after the SSPBUF write. If SSPBUF is rewritten within  2  TCY,  the  WCOL  bit  is  set  and  SSPBUF  is updated. This may result in a corrupted transfer. The user  should  verify  that  the  WCOL  flag  is  clear  after each write to SSPBUF to ensure the transfer is correct.",
    "17.4.10.3 ACKSTAT Status Flag\nIn Transmit mode, the ACKSTAT bit (SSPCON2<6>) is cleared  when  the  slave  has  sent  an  Acknowledge (ACK = 0 ) and is set when the slave does not Acknowledge (ACK = 1 ). A slave sends an Acknowledge when it has recognized its address (including a general call), or when the slave has properly received its data.",
    "17.4.11 I 2 C MASTER MODE RECEPTION\nMaster mode reception is enabled by programming the Receive Enable bit, RCEN (SSPCON2<3>).\nNote:\nThe  MSSP  module  must  be  in  an  Idle state  before  the  RCEN  bit  is  set  or  the RCEN bit will be disregarded.\nThe Baud Rate Generator begins counting and on each rollover, the state of the SCL pin changes (high-to-low/ low-to-high) and data is shifted into the SSPSR. After the falling edge of the eighth clock, the receive enable flag is automatically  cleared,  the  contents  of  the SSPSR are loaded into the SSPBUF, the BF flag bit is set,  the  SSPIF  flag  bit  is  set  and  the  Baud  Rate Generator  is  suspended  from  counting,  holding  SCL low. The MSSP is now in Idle state awaiting the next command. When the buffer is read by the CPU, the BF flag  bit  is  automatically  cleared.  The  user  can  then send an Acknowledge bit at the end of reception by setting  the  Acknowledge  Sequence  Enable  bit,  ACKEN (SSPCON2<4>).",
    "17.4.11.1 BF Status Flag\nIn receive operation, the BF bit is set when an address or data byte is loaded into SSPBUF from SSPSR. It is cleared when the SSPBUF register is read.",
    "17.4.11.2 SSPOV Status Flag\nIn receive operation, the SSPOV bit is set when 8 bits are  received  into  the  SSPSR  and  the  BF  flag  bit  is already set from a previous reception.",
    "17.4.11.3 WCOL Status Flag\nIf the  user  writes  the  SSPBUF  when  a  receive  is already in progress (i.e., SSPSR is still shifting in a data byte), the WCOL bit is set and the contents of the buffer are unchanged (the write doesn't occur).",
    "17.4.13 STOP CONDITION TIMING\nAn  Acknowledge  sequence  is  enabled  by  setting  the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>). When this  bit  is  set,  the  SCL  pin  is pulled low and the contents of the Acknowledge data bit are presented on the SDA pin. If the user wishes to generate an Acknowledge, then the ACKDT bit should be cleared. If not, the user should set the ACKDT bit before starting  an  Acknowledge  sequence.  The  Baud  Rate Generator  then  counts  for  one  rollover  period  (TBRG) and the SCL pin is deasserted (pulled high). When the SCL pin is  sampled high (clock  arbitration),  the  Baud Rate Generator counts for TBRG. The SCL pin is then pulled low. Following this, the ACKEN bit is automatically cleared, the Baud Rate Generator is turned off and the MSSP module then goes into Idle mode (Figure 17-23).",
    "17.4.12.1 WCOL Status Flag\nIf the user writes the SSPBUF when an Acknowledge sequence is  in  progress,  then  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).\nA Stop bit is asserted on the SDA pin at the end of a receive/transmit by setting the Stop Sequence Enable bit,  PEN  (SSPCON2<2>).  At  the  end  of  a  receive/ transmit, the SCL line is held low after the falling edge of the ninth clock. When the PEN bit is set, the master will assert the SDA line low. When the SDA line is sampled low, the Baud Rate Generator is reloaded and counts down to ' 0 '. When the Baud Rate Generator times out, the SCL pin will be brought high and one TBRG (Baud Rate Generator rollover count) later, the SDA pin will be deasserted. When the SDA pin is sampled high while SCL is high, the P bit (SSPSTAT<4>) is set. A TBRG later, the  PEN  bit  is  cleared  and  the  SSPIF  bit  is  set (Figure 17-24).",
    "17.4.13.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Stop sequence is  in  progress,  then  the  WCOL  bit  is  set  and  the contents of the buffer are unchanged (the write doesn't occur).",
    "17.4.14 SLEEP OPERATION\nWhile  in  Sleep  mode,  the  I 2 C  module  can  receive addresses  or  data  and  when  an  address  match  or complete  byte  transfer  occurs,  wake  the  processor from Sleep (if the MSSP interrupt is enabled).",
    "17.4.15 EFFECT OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.4.16 MULTI-MASTER MODE\nIn Multi-Master mode, the interrupt generation on the detection of the  Start  and  Stop  conditions  allows  the determination of when the bus is free. The Stop (P) and Start  (S)  bits  are  cleared  from  a  Reset  or  when  the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit (SSPSTAT<4>) is set, or the bus is Idle, with both the S and P bits clear. When the bus is busy, enabling the MSSP interrupt will generate the interrupt when the Stop condition occurs.\nIn multi-master  operation,  the  SDA  line  must  be monitored for arbitration to see if the signal level is the expected  output  level.  This  check  is  performed  in hardware with the result placed in the BCLIF bit.\nThe states where arbitration can be lost are:\n\u00b7 Address Transfer\n\u00b7 Data Transfer\n\u00b7 A Start Condition\n\u00b7 A Repeated Start Condition\n\u00b7 An Acknowledge Condition",
    "17.4.16 MULTI-MASTER MODE\nMulti-Master mode support is achieved by bus arbitration. When the master outputs address/data bits onto the SDA pin, arbitration takes place when the master outputs  a  ' 1 '  on  SDA,  by  letting  SDA  float  high  and another master asserts a ' 0 '. When the SCL pin floats high,  data  should  be  stable.  If  the  expected  data  on SDA is a ' 1 ' and the data sampled on the SDA pin = 0 , then a bus collision has taken place. The master will set the Bus Collision Interrupt Flag, BCLIF and reset the I 2 C port to its Idle state (Figure 17-25).\nIf  a  transmit  was  in  progress  when  the  bus  collision occurred,  the  transmission  is  halted,  the  BF  flag  is cleared, the SDA and SCL lines are deasserted and the SSPBUF can be written to. When the user services the bus collision  Interrupt  Service  Routine  and  if  the  I 2 C bus  is  free,  the  user  can  resume  communication  by asserting a Start condition.",
    "17.4.16 MULTI-MASTER MODE\nIf a Start, Repeated Start, Stop or Acknowledge condition was in progress when the bus collision occurred, the condition is aborted, the SDA and SCL lines are deasserted and the respective control bits in the SSPCON2 register  are  cleared.  When  the  user  services  the  bus collision Interrupt Service Routine and if the I 2 C bus is free, the user can resume communication by asserting a Start condition.\nThe master will continue to monitor the SDA and SCL pins. If a Stop condition occurs, the SSPIF bit will be set.\nA write  to  the  SSPBUF  will  start  the  transmission  of data  at  the  first  data  bit  regardless  of  where  the transmitter left off when the bus collision occurred.\nIn Multi-Master mode, the interrupt generation on the detection of Start and Stop conditions allows the determination of when the bus is free. Control of the I 2 C bus can be taken when the P bit is  set  in  the  SSPSTAT register,  or  the  bus  is  Idle  and  the  S  and  P  bits  are cleared.",
    "17.4.17.1 Bus Collision During a Start Condition\nDuring a Start condition, a bus collision occurs if:\na) SDA or SCL are sampled low at the beginning of the Start condition (Figure 17-26).\nb) SCL is sampled low before SDA is asserted low (Figure 17-27).\nIf  the  SDA  pin  is  sampled  low  during  this  count,  the BRG  is  reset  and  the  SDA  line  is  asserted  early (Figure 17-28). If, however, a ' 1 ' is sampled on the SDA pin, the SDA pin is asserted low at the end of the BRG count. The Baud Rate Generator is then reloaded and counts down to ' 0 ' and during this time, if the SCL pins are sampled as ' 0 ', a bus collision does not occur. At the end of the BRG count, the SCL pin is asserted low.\nDuring a Start  condition,  both the  SDA  and the  SCL pins are monitored.\nIf the SDA pin is already low, or the SCL pin is already low, then all of the following occur:",
    "17.4.17.1 Bus Collision During a Start Condition\n\u00b7 the Start condition is aborted,\n\u00b7 the BCLIF flag is set and\n\u00b7 the MSSP module is reset to its Idle state (Figure 17-26).\nThe Start condition begins with the SDA and SCL pins deasserted. When the SDA pin is sampled high, the Baud  Rate  Generator  is  loaded  from  SSPADD<6:0> and counts down to ' 0 '. If the SCL pin is sampled low while SDA is high, a bus collision occurs because it is assumed that another master is attempting to drive a data ' 1 ' during the Start condition.\nThe reason that bus collision is not a factor during a Start condition is that no two bus masters can assert a Start condition at the exact  same  time.  Therefore,  one  master will  always  assert  SDA  before  the  other. This condition does  not cause  a  bus collision because the two masters must be allowed to arbitrate the first address following the Start condition. If the address is the same, arbitration must be allowed to continue  into  the  data  portion,  Repeated Start or Stop conditions.",
    "FIGURE 17-26: BUS COLLISION DURING START CONDITION (SDA ONLY)\nNote:",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nDuring  a  Repeated  Start  condition,  a  bus  collision occurs if:\n- a) A low level is sampled on SDA when SCL goes from low level to high level.\nIf SDA is low, a bus collision has occurred (i.e., another master is attempting to transmit a data ' 0 ', Figure 17-29). If SDA is sampled high, the BRG is reloaded and begins counting. If SDA goes from high-to-low before the BRG times  out,  no  bus  collision  occurs  because  no  two masters can assert SDA at exactly the same time.\n- b) SCL  goes  low  before  SDA  is  asserted  low, indicating  that  another master is attempting to transmit a data ' 1 '.\nWhen the user deasserts SDA and the pin is allowed to float high, the BRG is loaded with SSPADD<6:0> and counts down to ' 0 '. The SCL pin is then deasserted and when sampled high, the SDA pin is sampled.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nIf SCL goes from high-to-low before the BRG times out and SDA has not already been asserted, a bus collision occurs.  In  this  case,  another  master  is  attempting  to transmit a data ' 1 ' during the Repeated Start condition (see Figure 17-30).\nIf, at the end of the BRG time-out, both SCL and SDA are still high, the SDA pin is driven low and the BRG is reloaded and begins counting. At the end of the count, regardless of the status of the SCL pin, the SCL pin is driven low and the Repeated Start condition is complete.",
    "17.4.17.3 Bus Collision During a Stop Condition\nBus collision occurs during a Stop condition if:\na) After  the  SDA  pin  has  been  deasserted  and allowed to float high, SDA is sampled low after the BRG has timed out.\nb) After the SCL pin is deasserted, SCL is sampled low before SDA goes high.\nThe  Stop  condition  begins  with  SDA  asserted  low. When SDA is sampled low, the SCL pin is allowed to float. When the pin is sampled high (clock arbitration), the Baud Rate Generator is loaded with SSPADD<6:0> and counts down to ' 0 '. After the BRG times out, SDA is sampled. If SDA is sampled low, a bus collision has occurred. This is due to another master attempting to drive  a  data  ' 0 ' (Figure 17-31).  If  the  SCL  pin  is sampled low before SDA is allowed to float high, a bus collision occurs. This is another case of another master attempting to drive a data ' 0 ' (Figure 17-32).",
    "FIGURE 17-31: BUS COLLISION DURING A STOP CONDITION (CASE 1)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nSDA asserted low\nSDA sampled low after TBRG, set BCLIF\n' 0 '\n' 0 '",
    "FIGURE 17-32: BUS COLLISION DURING A STOP CONDITION (CASE 2)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nAssert SDA\nSCL goes low before SDA goes high, set BCLIF\n' 0 '\n' 0 '",
    "TABLE 17-4: REGISTERS ASSOCIATED WITH I 2 C\u2122 OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 =",
    "TABLE 17-4: REGISTERS ASSOCIATED WITH I 2 C\u2122 OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC",
    "TABLE 17-4: REGISTERS ASSOCIATED WITH I 2 C\u2122 OPERATION\nData Direction Register. TRISC, Reset Values on Page = 66. SSPBUF, Bit 7 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 6 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 5 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 4 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 3 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 2 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 1 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Bit 0 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPBUF, Reset Values on Page = 64. SSPADD, Bit 7 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 6 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 5 = Master",
    "TABLE 17-4: REGISTERS ASSOCIATED WITH I 2 C\u2122 OPERATION\nSynchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 4 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 3 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 2 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 1 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Bit 0 = Master Synchronous Serial Port Receive Buffer/Transmit Register. SSPADD, Reset Values on Page = 64. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Reset Values on Page = 64. SSPCON2, Bit 7 = GCEN.",
    "TABLE 17-4: REGISTERS ASSOCIATED WITH I 2 C\u2122 OPERATION\nSSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN. SSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN. SSPCON2, Bit 0 = SEN. SSPCON2, Reset Values on Page = 64. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Reset Values on Page = 64\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used by the MSSP in I 2 C mode.",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nPIC18F6310/6410/8310/8410 devices have three serial I/O modules: the MSSP module, discussed in the previous chapter and  two  Universal Synchronous Asynchronous  Receiver  Transmitter  (USART)  modules. (Generically, the USART is also known as a Serial Communications Interface or SCI.) The USART can be configured as a full-duplex asynchronous system that can  communicate  with  peripheral  devices,  such  as CRT terminals and personal computers. It can also be configured as a half-duplex synchronous system that can communicate with peripheral devices, such as A/D or D/A integrated circuits, serial EEPROMs, etc.\nThere are two distinct implementations of the USART module  in these devices: the Enhanced  USART (EUSART),  discussed here and the Addressable USART (AUSART), discussed in the next chapter. For this device  family, USART1  always  refers  to  the EUSART, while USART2 is always the AUSART.",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\nThe  EUSART  and  AUSART  modules  implement  the same  core  features  for  serial  communications;  their basic operation is essentially the same. The EUSART module  provides  additional  features,  including  automatic  baud  rate  detection  and  calibration,  automatic wake-up  on  Sync  Break  reception  and  12-bit  Break character  transmit.  These  features  make  it  ideally suited  for  use  in  Local  Interconnect  Network  bus (LIN/J2602 bus) systems.\nThe  EUSART  can  be  configured  in  the  following modes:\n\u00b7 Asynchronous (full-duplex) with:\n-Auto-wake-up on character reception\n-Auto-baud calibration\n-12-bit Break character transmission\n\u00b7 Synchronous - Master (half-duplex) with selectable clock polarity\n\u00b7 Synchronous - Slave (half-duplex) with selectable clock polarity\nThe pins of the Enhanced USART are multiplexed with PORTC. In order to configure TX1/CK1 and RX1/DT1 as a USART:",
    "18.0 ENHANCED UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (EUSART)\n\u00b7 SPEN bit (RCSTA1<7>) must be set (= 1 )\n\u00b7 TRISC<7> bit must be set (= 1 )\n\u00b7 TRISC<6> bit must be set (= 1 )\nNote:\nThe  USART  control  will automatically reconfigure the pin from input to output as needed.\nThe  operation  of  the  Enhanced  USART  module  is controlled through three registers:\n\u00b7 Transmit Status and Control Register 1 (TXSTA1)\n\u00b7 Receive Status and Control Register 1 (RCSTA1)\n\u00b7 Baud Rate Control Register 1 (BAUDCON1)\nThe registers are described in Register 18-1, Register 18-2 and Register 18-3.",
    "REGISTER 18-1: TXSTA1: EUSART1 TRANSMIT STATUS AND CONTROL REGISTER\nCSRC, R/W-0 = TX9. CSRC, R/W-0 = TXEN (1). CSRC, R/W-0 = SYNC. CSRC, R/W-0 = SENDB. CSRC, R/W-0 = BRGH. CSRC, R-1 = TRMT. CSRC, R/W-0 = TX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 18-1: TXSTA1: EUSART1 TRANSMIT STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 CSRC: Clock Source Select bit\nAsynchronous mode:\nDon't care.\nSynchronous mode:\n1 = Master mode (clock generated internally from BRG)\n0 = Slave mode (clock from external source)",
    "bit 6\nTX9: 9-Bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission",
    "bit 5\nTXEN: Transmit Enable bit (1)\n1 = Transmit is enabled\n0 = Transmit is disabled",
    "bit 4\nSYNC: AUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode",
    "bit 3\nSENDB: Send Break Character bit\nAsynchronous mode:\n1 = Send Sync Break on next transmission (cleared by hardware upon completion)\n0 = Sync Break transmission completed\nSynchronous mode:\nDon't care.",
    "bit 2\nBRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.\nbit 1\nTRMT: Transmit Shift Register Status bit\n1 = TSR is empty\n0 = TSR is full",
    "bit 0\nTX9D: 9th bit of Transmit Data\nCan be address/data bit or a parity bit.\nNote 1: SREN/CREN overrides TXEN in Sync mode.",
    "bit 6\nbit 4",
    "REGISTER 18-2: RCSTA1: EUSART1 RECEIVE STATUS AND CONTROL REGISTER\nSPEN, R/W-0 = RX9. SPEN, R/W-0 = SREN. SPEN, R/W-0 = CREN. SPEN, R/W-0 = ADDEN. SPEN, R-0 = FERR. SPEN, R-0 = OERR. SPEN, R-x = RX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-x = bit 0",
    "REGISTER 18-2: RCSTA1: EUSART1 RECEIVE STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SPEN: Serial Port Enable bit\n1 = Serial port is enabled\n0 = Serial port is disabled\nRX9: 9-Bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN: Single Receive Enable bit\nAsynchronous mode:\nDon't care.\nSynchronous mode - Master:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode - Slave:\nDon't care.\nCREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver",
    "Synchronous mode:\n1 = Enables continuous receive until enable bit, CREN, is cleared (CREN overrides SREN)\n0 = Disables continuous receive\nADDEN: Address Detect Enable bit\nAsynchronous mode 9-Bit (RX9 = 1 ):\n1 = Enables address detection, enables interrupt and loads the receive buffer when RSR<8> are set 0 = Disables address detection, all bytes are received and ninth bit can be used as a parity bit\nAsynchronous mode 8-Bit (RX9 = 0 ):\nDon't care.",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be cleared by reading RCREG1 register and receiving next valid byte)\n0 = No framing error\nOERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit, CREN)\n0 = No overrun error",
    "bit 0 RX9D: 9th bit of Received Data bit\nThis can be address/data bit or a parity bit and must be calculated by user firmware.",
    "REGISTER 18-3: BAUDCON1: BAUD RATE CONTROL REGISTER 1\nABDOVF, R-1 = RCIDL. ABDOVF, R/W-0 = RXDTP. ABDOVF, R/W-0 = TXCKP. ABDOVF, R/W-0 = BRG16. ABDOVF, U-0 = -. ABDOVF, R/W-0 = WUE. ABDOVF, R/W-0 = ABDEN. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 18-3: BAUDCON1: BAUD RATE CONTROL REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 ABDOVF : Auto-Baud Acquisition Rollover Status bit\n1 = A BRG rollover has occurred during Auto-Baud Rate Detect mode (must be cleared in software) 0 = No BRG rollover has occurred",
    "bit 6\nRCIDL : Receive Operation Idle Status bit\n1 = Receive operation is Idle\n0 = Receive operation is active",
    "bit 5 RXDTP : Received Data Polarity Select bit\nAsynchronous mode:\n1 = Receive data (RXx) is inverted (active-low)\n0 = Receive data (RXx) is not inverted (active-high)\nSynchronous mode:\nNo affect.\nTXCKP : Clock and Data Polarity Select bit\nAsynchronous mode:\n1 = Idle state for transmit (TXx) is a low level\n0 = Idle state for transmit (TXx) is a high level",
    "Synchronous mode:\n1 = Idle state for clock (CKx) is a high level\n0 = Idle state for clock (CKx) is a low level",
    "bit 3 BRG16: 16-Bit Baud Rate Register Enable bit\n1 = 16-bit Baud Rate Generator - SPBRGH1 and SPBRG1\n0 = 8-bit Baud Rate Generator - SPBRG1 only (Compatible mode); SPBRGH1 value ignored",
    "bit 1 WUE: Wake-up Enable bit\nAsynchronous mode:\n1 = EUSART will continue to sample the RXx pin - interrupt generated on falling edge; bit cleared in hardware on following rising edge\n0 = RXx pin not monitored or rising edge detected\nSynchronous mode:\nUnused in this mode.",
    "bit 0 ABDEN : Auto-Baud Detect Enable bit\nAsynchronous mode:\n1 = Enable baud rate measurement on the next character. Requires reception of a Sync field (55h); cleared in hardware upon completion.\n0 = Baud rate measurement disabled or completed",
    "Synchronous mode:\nUnused in this mode.\nbit 4",
    "18.1 EUSART Baud Rate Generator (BRG)\nThe BRG is a dedicated, 8-bit or 16-bit generator that supports  both  the  Asynchronous  and  Synchronous modes of the EUSART. By default, the BRG operates in 8-bit mode; setting the BRG16 bit (BAUDCON1<3>) selects 16-bit mode.\nThe SPBRGH1:SPBRG1 register pair controls the period of  a  free  running  timer.  In  Asynchronous  mode,  bits, BRGH  (TXSTA1<2>)  and  BRG16  (BAUDCON1<3>), also control the baud rate. In Synchronous mode, BRGH is ignored. Table 18-1 shows the formula for computation of the baud rate for different EUSART modes that only apply in Master mode (internally generated clock).",
    "18.1 EUSART Baud Rate Generator (BRG)\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRGH1:SPBRG1 registers can be  calculated  using  the  formulas  in  T able 18-1.  From this,  the  error  in  baud  rate  can  be  determined.  An example calculation is shown in Example 18-1. Typical baud rates and error values for the various Asynchronous modes are shown in Table 18-2. It may be advantageous to use the high baud rate (BRGH = 1 ) or  the  16-bit  BRG  to  reduce  the  baud  rate  error,  or achieve a slow baud rate for a fast oscillator frequency.\nWriting a new  value to the SPBRGH1:SPBRG1 registers causes the BRG timer to be reset (or cleared). This  ensures  the  BRG  does  not  wait  for  a  timer overflow before outputting the new baud rate.\nNote:\nThe BRG value of ' 0 ' is not supported.",
    "18.1.1 OPERATION IN POWER-MANAGED MODES\nThe device clock is used to generate the desired baud rate.  When  one  of  the  power-managed  modes  is entered, the new clock source may be operating at a different frequency. This may require an adjustment to the value in the SPBRG1 register pair.",
    "18.1.2 SAMPLING\nThe data on the RXx pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RXx pin when SYNC is clear or when both BRG16 and BRGH are not set. The data on the  RXx  pin  is  sampled  once  when  SYNC  is  set  or when BRGH16 and BRGH are both set.",
    "TABLE 18-1: BAUD RATE FORMULAS\n0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[64 (n + 1)]. 0, Configuration Bits.BRG16 = 0. 0, Configuration Bits.BRGH = 1. 0, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 0. 0, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[16 (n + 1)]. 0, Configuration Bits.BRG16 = 1. 0, Configuration Bits.BRGH = 1. 0,",
    "TABLE 18-1: BAUD RATE FORMULAS\nBRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Asynchronous. 0, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 0. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 8-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]. 1, Configuration Bits.BRG16 = 1. 1, Configuration Bits.BRGH = x. 1, BRG/EUSART Mode.BRG/EUSART Mode = 16-bit/Synchronous. 1, Baud Rate Formula.Baud Rate Formula = FOSC/[4 (n + 1)]\nLegend: x = Don't care, n = Value of SPBRGH1:SPBRG1 register pair",
    "EXAMPLE 18-1: CALCULATING BAUD RATE ERROR\nFor a device with FOSC of 16 MHz, desired baud rate of 9600, Asynchronous mode, 8-bit BRG:\nDesired Baud Rate\n= FOSC/(64 ([SPBRGH1:SPBRG1] + 1))\nSolving for SPBRGH1:SPBRG1:\nX\n= ((FOSC/Desired Baud Rate)/64) - 1\n= ((16000000/9600)/64) - 1\n= [25.042] = 25\nCalculated Baud Rate\n= 16000000/(64 (25 + 1))\n= 9615\nError\n= (Calculated Baud Rate - Desired Baud Rate)/Desired Baud Rate\n= (9615 - 9600)/9600 = 0.16%",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH THE BAUD RATE GENERATOR\nTXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF. BAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 =",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH THE BAUD RATE GENERATOR\nBRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte.",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH THE BAUD RATE GENERATOR\nSPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: 0\n- = unimplemented, read as ' '. Shaded cells are not used by the BRG.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 1.221. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n64. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 31. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 15. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n, BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 15. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 52.083. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -9.58. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nvalue (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 104.167. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -9.58. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 78.125. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -32.18. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 0.3, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 8.929. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -6.99. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 6. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 20.833. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 2.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -45.75. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 40.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.441. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.766. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 1.73. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.615.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 21. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1 , BRG16 = 0.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n= 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRG16 = 0.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.% Error = -.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 1041. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -0.03. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 520. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.399. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 259. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 9.6, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 259. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nvalue (decimal) = 129. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 1.73. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n20.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 21. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n55.555. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 3.55. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -1.36. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 415. 0.3, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 0.3, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nMHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 9.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 19.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(decimal) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, SYNC = 0 , BRGH = 0 ,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nBRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 8.51. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 0 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 33332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.00.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 16665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.00. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 8332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 6665. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.00. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n8332. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 4165. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.02.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 2082. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 1665. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 4165. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.02. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2082. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.402. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.06. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 1040. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.400. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.04. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 832. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 9.606. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.06. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 1040. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n(K) = 9.596. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = -0.03. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 520. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\nvalue (decimal) = 259. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.193. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= -0.03. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 520. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 259. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n103. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 57.803. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = 0.35. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 172. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 57.471. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n-0.22. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 86. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 58.140. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = 0.94. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 42. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.142. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = 0.79. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 34. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.Actual Rate (K) = 114.943. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.% Error = -0.22. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 40.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n86. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.Actual Rate (K) = 116.279. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.% Error = 0.94. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 42. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.Actual Rate (K) = 113.636. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.% Error = -1.36.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 21. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.Actual Rate (K) = 117.647. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.% Error = -2.12. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 16",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.01. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3332. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.04.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 1665. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.04. 0.3, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n1.200. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.04. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 832. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n415. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 415. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 207. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 103. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 9.615. 9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n9.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 19.230.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = 19.230. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -0.16. 19.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 12.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 58.824. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = 2.12. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 16. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = 55.555. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = 3.55.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 8. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 57.6, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.Actual Rate (K) = 111.111. 115.2, SYNC",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n= 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.% Error = -3.55. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 8. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, SYNC = 0 , BRGH = 1",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODES (CONTINUED)\n, BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.% Error = -. 115.2, SYNC = 0 , BRGH = 1 , BRG16 = 1 or SYNC = 1 , BRG16 = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "18.1.3 AUTO-BAUD RATE DETECT\nThe Enhanced USART module supports the automatic detection and calibration of baud rate. This feature is active only in Asynchronous mode and while the WUE bit is clear.\nThe  automatic  baud  rate  measurement  sequence (Figure 18-1) begins whenever a Start bit is received and the ABDEN  bit is set. The calculation is self-averaging.\nIn the Auto-Baud Rate Detect (ABD) mode, the clock to the BRG is reversed. Rather than the BRG clocking the incoming RX1 signal, the RX1 signal is timing the BRG. In  ABD  mode,  the  internal  Baud  Rate  Generator  is used as a counter to time the bit period of the incoming serial byte stream.",
    "18.1.3 AUTO-BAUD RATE DETECT\nOnce the ABDEN bit is set, the state machine will clear the BRG and look for a Start bit. The Auto-Baud Rate Detect must receive a byte with the value, 55h (ASCII 'U', which is also the LIN/J2602 bus Sync character), in order to calculate the proper bit rate. The measurement is taken over both a low and a high bit time in order to minimize any effects caused by asymmetry of the  incoming  signal.  After  a  Start  bit,  the  SPBRG1 begins counting up, using the preselected clock source on the first rising edge of RX1. After eight bits on the RX1 pin or the fifth rising edge, an accumulated value totalling the proper BRG period is left in the SPBRGH1:SPBRG1 register pair. Once the 5th edge is seen  (this  should  correspond  to  the  Stop  bit),  the ABDEN bit is automatically cleared.",
    "18.1.3 AUTO-BAUD RATE DETECT\nIf a rollover of the BRG occurs (an overflow from FFFFh to 0000h), the event is trapped by the ABDOVF status bit (BAUDCON1<7>). It is set in hardware by BRG rollovers and can be set or cleared by the user in software. ABD mode  remains  active  after  rollover  events  and  the ABDEN bit remains set (Figure 18-2).\nWhile  calibrating the baud  rate  period, the BRG registers are clocked at 1/8th the preconfigured clock rate. Note that the BRG clock can be configured by the BRG16 and BRGH bits. The BRG16 bit must be set to use both SPBRG1 and SPBRGH1 as a 16-bit counter. This allows the user to verify that no carry occurred for 8-bit  modes  by  checking  for  00h  in  the  SPBRGH1 register. Refer to Table 18-4 for counter clock rates to the BRG.",
    "18.1.3 AUTO-BAUD RATE DETECT\nWhile  the  ABD  sequence  takes  place,  the  EUSART state machine is held in Idle. The RC1IF interrupt is set once the fifth rising edge on RX1 is detected. The value in the RCREG1 needs to be read to clear the RC1IF interrupt. The contents of RCREG1 should be discarded.\nNote 1: If the WUE bit is set with the ABDEN bit, Auto-Baud Rate Detection will occur on the byte following the Break character.\n2: It  is  up  to  the  user  to  determine  that  the incoming character baud rate is within the range of the selected BRG clock source. Some combinations of oscillator frequency and EUSART baud rates are not possible due to bit error rates. Overall system timing and  communication  baud  rates  must  be taken  into  consideration  when  using  the Auto-Baud Rate Detection feature.\n3: To maximize baud rate range, it is recommended  to  set  the  BRG16  bit  if  the auto-baud feature is used.",
    "18.1.3 AUTO-BAUD RATE DETECT\nTABLE 18-4: BRG COUNTER CLOCK RATES\n\n0, BRGH = 0. 0, BRG Counter Clock = FOSC/512. 0, BRGH = 1. 0, BRG Counter Clock = FOSC/128. 1, BRGH = 0. 1, BRG Counter Clock = FOSC/128. 1, BRGH = 1. 1, BRG Counter Clock = FOSC/32",
    "18.1.3.1 ABD and EUSART Transmission\nSince the BRG clock is reversed during ABD acquisition,  the  EUSART transmitter cannot be used during ABD. This means that whenever the ABDEN bit is set, TXREG1  cannot  be  written  to.  Users  should  also ensure  that  ABDEN  does  not  become  set  during  a transmit  sequence.  Failing  to  do  this  may  result  in unpredictable EUSART operation.",
    "FIGURE 18-1: AUTOMATIC BAUD RATE CALCULATION\nBRG Value, 1 = XXXXh. BRG Value, 2 = 0000h. BRG Value, 3 = 001Ch. RX1 Pin, 1 = . RX1 Pin, 2 = Start. RX1 Pin, 3 = Bit 0 Bit 1 Edge #1 Bit 2 Bit 3 Edge #2 Bit 4 Bit 5 Edge #3 Bit 6 Bit 7 Edge #4 Stop Bit Edge #5. BRG Clock, 1 = BRG Clock. BRG Clock, 2 = BRG Clock. BRG Clock, 3 = BRG Clock. ABDEN bit, 1 = Set by User. ABDEN bit, 2 = . ABDEN bit, 3 = Auto-Cleared. RC1IF bit (Interrupt), 1 = . RC1IF bit (Interrupt), 2 = . RC1IF bit (Interrupt), 3 = . Read RCREG1 SPBRG1, 1 = . Read RCREG1 SPBRG1, 2 = XXXXh. Read RCREG1 SPBRG1, 3 = 1Ch. SPBRGH1, 1 = XXXXh. SPBRGH1, 2 = . SPBRGH1, 3",
    "FIGURE 18-1: AUTOMATIC BAUD RATE CALCULATION\n= 00h",
    "FIGURE 18-2: BRG OVERFLOW SEQUENCE\nStart\nBit 0\nXXXXh\n0000h\n0000h\nFFFFh\nBRG Clock\nABDEN bit\nRX1 Pin\nABDOVF bit\nBRG Value",
    "18.2 EUSART Asynchronous Mode\nThe  Asynchronous  mode  of  operation  is  selected  by clearing the  SYNC bit (TXSTA1<4>). In this mode, the EUSART uses standard Non-Return-to-Zero (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip dedicated 8-bit/16-bit Baud Rate Generator can be used to derive standard baud rate frequencies from the oscillator.\ninterrupt can be enabled or disabled by setting or clearing  the  interrupt  enable  bit,  TX1IE  (PIE1<4>).  TX1IF will be set regardless of the state of TX1IE; it cannot be cleared in software. TX1IF is also not cleared immediately upon loading TXREG1, but becomes valid in the second instruction cycle following the load instruction. Polling TX1IF immediately following a load of TXREG1 will return invalid results.",
    "18.2 EUSART Asynchronous Mode\nThe EUSART transmits and receives the LSb first. The EUSART's  transmitter  and  receiver  are  functionally independent, but use the same data format and baud rate. The Baud Rate Generator produces a clock, either x16 or x64 of the bit shift rate depending on the BRGH and  BRG16  bits  (TXSTA1<2>  and  BAUDCON1<3>). Parity  is  not  supported  by  the  hardware  but  can  be implemented in software and stored as the 9th data bit. The TXCKP (BAUDCON<4>) and RXDTP (BAUDCON<5>) bits allow the TX and RX signals to be inverted (polarity reversed). Devices that buffer signals between TTL and RS-232 levels also invert the signal. Setting the TXCKP and RXDTP bits allows for the use of circuits that provide buffering without inverting the signal.\nWhen operating in Asynchronous mode, the EUSART module consists of the following important elements:",
    "18.2 EUSART Asynchronous Mode\n\u00b7 Baud Rate Generator\n\u00b7 Sampling Circuit\n\u00b7 Asynchronous Transmitter\n\u00b7 Asynchronous Receiver\n\u00b7 Auto-Wake-up on Sync Break Character\n\u00b7 12-Bit Break Character Transmit\n\u00b7 Auto-Baud Rate Detection",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 18-3. The heart of the transmitter is the Transmit (Serial) Shift register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG1. The TXREG1 register is loaded with data in software. The TSR register is not loaded until the Stop bit  has  been  transmitted  from  the  previous  load.  As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG1 register (if available).\nOnce the TXREG1 register transfers  the data  to  the TSR register (occurs in one TCY), the TXREG1 register is empty and the TX1IF flag bit (PIR1<4>) is set. This",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\nWhile TX1IF indicates the status of the TXREG1 register, another bit, TRMT (TXSTA1<1>), shows the status of the TSR register. TRMT is a read-only bit which is set when the TSR register is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TXCKP  bit (BAUDCON<4>)  allows  the  TX  signal  to  be  inverted (polarity reversed). Devices that buffer signals from TTL to RS-232 levels also invert the signal (when TTL = 1 , RS-232 = negative). Inverting the polarity of the TXx pin data by setting the TXCKP bit allows for use of circuits that provide buffering without inverting the signal.\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag  bit,  TX1IF,  is  set  when  enable  bit, TXEN, is set.\nTo set up an Asynchronous Transmission:",
    "18.2.1 EUSART ASYNCHRONOUS TRANSMITTER\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If the signal from the TXx pin is to be inverted, set the TXCKP bit.\n4. If interrupts are desired, set enable bit, TXIE.\n5. If 9-bit transmission is desired, set transmit bit, TX9. Can be used as an address/data bit.\n6. Enable  the  transmission  by  setting  bit,  TXEN, which will also set bit, TXIF.\n7. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n8. Load  data  to the TXREG  register  (starts transmission).\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\non Page = 65. TXREG1, Bit 7 = EUSART1 Transmit Register. TXREG1, Bit 6 = EUSART1 Transmit Register. TXREG1, Bit 5 = EUSART1 Transmit Register. TXREG1, Bit 4 = EUSART1 Transmit Register. TXREG1, Bit 3 = EUSART1 Transmit Register. TXREG1, Bit 2 = EUSART1 Transmit Register. TXREG1, Bit 1 = EUSART1 Transmit Register. TXREG1, Bit 0 = EUSART1 Transmit Register. TXREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 =",
    "TABLE 18-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nEUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend:\n- = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous transmission.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThe receiver block diagram is  shown in Figure 18-6. The data is received on the RX1 pin and drives the data recovery block. The data recovery block is actually a high-speed shifter operating at x16 times the baud rate, whereas the main receive serial shifter operates at the bit rate or at FOSC. This mode would typically be used in RS-232 systems.\nThe RXDTP bit (BAUDCON<5>) allows the RX signal to be inverted (polarity reversed). Devices that buffer signals  from  RS-232  to  TTL  levels  also  perform  an inversion  of  the signal  (when  RS-232  =  positive, TTL = 0 ). Inverting the polarity of the RXx pin data by setting the RXDTP bit allows for the use of circuits that provide buffering without inverting the signal.\nTo set up an Asynchronous Reception:",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If the signal at the RXx pin is to be inverted, set the RXDTP bit.\n4. If interrupts are desired, set enable bit, RCIE.\n5. If 9-bit reception is desired, set bit, RX9.\n6. Enable the reception by setting bit, CREN.\n7. Flag bit, RCIF, will be set when reception is complete and an interrupt will be generated if enable bit, RCIE, was set.\n8. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG register.\n10. If any error occurred, clear the error by clearing enable bit, CREN.",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n11. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.\nThis mode would typically be used in RS-485 systems. To  set  up  an  Asynchronous  Reception  with  Address Detect Enable:",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate.  Set or clear the  BRGH and  BRG16  bits,  as  required,  to  achieve  the desired baud rate.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If the signal at the RXx pin is to be inverted, set the RXDTP bit. If the signal from the TXx pin is to be inverted, set the TXCKP bit.\n4. If interrupts are required, set the RCEN bit and select the desired priority level with the RCIP bit.\n5. Set the RX9 bit to enable 9-bit reception.\n6. Set the ADDEN bit to enable address detect.\n7. Enable reception by setting the CREN bit.\n8. The RCIF bit will be set when reception is complete. The interrupt will be Acknowledged if the RCIE and GIE bits are set.\n9. Read the  RCSTA  register  to  determine  if  any error occurred during reception, as well as read bit 9 of data (if applicable).",
    "18.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n10. Read RCREG to determine if the device is being addressed.\n11. If any error occurred, clear the CREN bit.\n12. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.",
    "FIGURE 18-7: ASYNCHRONOUS RECEPTION\nNote:\nThis timing diagram shows three words appearing on the RX1 input. The RCREG1 (Receive Buffer) is read after the third word causing the OERR (Overrun) bit to be set.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\non Page = 65. RCREG1, Bit 7 = EUSART1 Receive Register. RCREG1, Bit 6 = EUSART1 Receive Register. RCREG1, Bit 5 = EUSART1 Receive Register. RCREG1, Bit 4 = EUSART1 Receive Register. RCREG1, Bit 3 = EUSART1 Receive Register. RCREG1, Bit 2 = EUSART1 Receive Register. RCREG1, Bit 1 = EUSART1 Receive Register. RCREG1, Bit 0 = EUSART1 Receive Register. RCREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 =",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nEUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: - = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous reception.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nDuring  Sleep  mode,  all  clocks  to  the  EUSART  are suspended. Because of this, the Baud Rate Generator is inactive and a proper byte reception cannot be performed. The auto-wake-up feature allows the controller to wake-up, due to activity on the RX1/DT1 line while the EUSART is operating in Asynchronous mode.\nOscillator start-up time must  also  be  considered, especially in applications using oscillators with longer start-up  intervals  (i.e.,  XT  or  HS  mode).  The  Sync Break (or Wake-up Signal) character must be of sufficient length and be followed by a sufficient interval to allow  enough  time  for  the  selected  oscillator  to  start and provide proper initialization of the EUSART.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nThe  auto-wake-up  feature  is  enabled  by  setting  the WUE bit (BAUDCON<1>). Once set, the typical receive sequence on RX1/DT1 is disabled and the EUSART remains in an Idle state, monitoring for a wake-up event independent  of  the  CPU  mode.  A  wake-up  event consists  of  a  high-to-low  transition  on  the  RX1/DT1 line. (This coincides with the start of a Sync Break or a Wake-up Signal character for the LIN/J2602 protocol.)\nFollowing a wake-up event, the module generates an RC1IF  interrupt.  The  interrupt  is  generated  synchronously  to  the  Q  clocks  in  normal  operating  modes (Figure 18-8)  and  asynchronously,  if  the  device  is  in Sleep  mode  (Figure 18-9).  The  interrupt  condition  is cleared by reading the RCREG1 register.",
    "18.2.4 AUTO-WAKE-UP ON SYNC BREAK CHARACTER\nThe WUE  bit is automatically cleared once a low-to-high transition is observed on the RX1 line following the wake-up event. At this point, the EUSART module is in Idle mode and returns to normal operation. This signals to the user that the Sync Break event is over.",
    "18.2.4.1 Special Considerations Using Auto-Wake-up\nSince  auto-wake-up  functions  by  sensing  rising  edge transitions  on  RX1/DT1,  information  with  any  state changes  before the Stop bit may  signal a false End-of-Character  (EOC)  and  cause  data  or  framing errors. Therefore, to work properly, the initial character in the transmission must be all ' 0 's. This can be 00h (8 bits) for standard RS-232 devices, or 000h (12 bits) for the LIN/J2602 bus.",
    "18.2.4.2 Special Considerations Using the WUE Bit\nThe timing of WUE and RC1IF events may cause some confusion when it comes to determining the validity of received data. As noted, setting the WUE bit places the EUSART in an Idle mode. The wake-up event causes a receive interrupt by setting the RC1IF bit. The WUE bit is cleared after this when a rising edge is seen on RX1/DT1.  The  interrupt  condition  is  then  cleared  by reading the RCREG1 register. Ordinarily,  the  data  in RCREG1 will be dummy data and should be discarded.\nThe fact that the WUE bit has been cleared (or is still set) and the RC1IF flag is set should not be used as an indicator of the integrity of the data in RCREG1. Users should  consider  implementing  a  parallel  method  in firmware to verify received data integrity.\nTo assure that no actual data is lost, check the RCIDL bit to verify that a receive operation is not in process. If a receive operation is not occurring, the WUE bit may then be set just prior to entering the Sleep mode.",
    "FIGURE 18-9: AUTO-WAKE-UP BIT (WUE) TIMINGS DURING SLEEP\nNote 1: If the wake-up event requires long oscillator warm-up time, the auto-clear of the WUE bit can occur while the stposc signal is still active. This sequence should not depend on the presence of Q clocks.\n2: The EUSART remains in Idle while the WUE bit is set.",
    "18.2.5 BREAK CHARACTER SEQUENCE\nThe  Enhanced  USART  module  has  the  capability  of sending the special Break character sequences that are required  by  the  LIN/J2602  bus  standard.  The  Break character  transmit  consists  of  a  Start  bit,  followed  by twelve ' 0 ' bits and a Stop bit. The Frame Break character is sent whenever the SENDB and TXEN bits (TXSTA<3> and TXSTA<5>) are set while the Transmit Shift register is loaded with data. Note that the value of data written to TXREG1 will be ignored and all ' 0 's will be transmitted.\nThe SENDB bit is automatically reset by hardware after the corresponding Stop bit is sent. This allows the user to preload the transmit FIFO with the next transmit byte following the Break  character  (typically, the Sync character in the LIN/J2602 specification).\nNote that the data value written to the TXREG1 for the Break character is ignored. The write simply serves the purpose of initiating the proper sequence.\nThe TRMT bit indicates when the transmit operation is active or Idle, just as it does during normal transmission.  See  Figure 18-10  for  the  timing  of  the  Break character sequence.",
    "18.2.5.1 Break and Sync Transmit Sequence\nThe  following  sequence  will  send  a  message  frame header made up of a Break, followed by an Auto-Baud Sync byte. This sequence is typical of a LIN/J2602 bus master.\n1. Configure the EUSART for the desired mode.\n2. Set  the  TXEN  and  SENDB  bits  to  set  up  the Break character.",
    "FIGURE 18-10: SEND BREAK CHARACTER SEQUENCE\n3. Load the TXREG1 with a dummy character to initiate transmission (the value is ignored).\n4. Write '55h' to TXREG1  to  load  the Sync character into the transmit FIFO buffer.\n5. After the Break has been sent, the SENDB bit is reset  by  hardware.  The  Sync  character  now transmits in the preconfigured mode.\nWhen the TXREG1 becomes empty, as indicated by the TX1IF bit, the next data byte can be written to TXREG1.",
    "18.2.6 RECEIVING A BREAK CHARACTER\nThe  Enhanced  USART  module can  receive  a  Break character in two ways.\nThe first method forces configuration of the baud rate at a frequency of 9/13 the typical speed. This allows for the  Stop  bit  transition  to  be  at  the  correct  sampling location (13 bits for Break versus Start bit and 8 data bits for typical data).\nThe  second  method  uses  the  auto-wake-up  feature described in Section 18.2.4 'Auto-Wake-up on Sync Break  Character' . By enabling this feature, the EUSART  will  sample  the  next  two  transitions  on RX1/DT1, cause an RC1IF interrupt  and receive  the next data byte followed by another interrupt.\nNote  that  following  a  Break  character,  the  user  will typically  want  to  enable  the  Auto-Baud  Rate  Detect feature. For both methods, the user can set the ABD bit once the TX1IF interrupt is observed.",
    "18.3 EUSART Synchronous Master Mode\nThe Synchronous Master mode is entered by setting the CSRC bit (TXSTA<7>). In this mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting  data,  the  reception  is  inhibited  and  vice versa.  Synchronous  mode  is  entered  by  setting  bit, SYNC  (TXSTA<4>).  In  addition,  enable  bit,  SPEN (RCSTA1<7>), is set in order to configure the TX1 and RX1  pins to CK1  (clock) and  DT1  (data) lines, respectively.\nThe Master mode indicates that the processor transmits the master clock on the CK1 line. Clock polarity (CK1) is selected with the TXCKP bit (BAUDCON<4>). Setting  TXCKP  sets  the  Idle  state  on  CK1  as  high, while clearing the bit sets the Idle state as low.",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\nThe  EUSART transmitter  block  diagram  is  shown  in Figure 18-3. The heart of the transmitter is the Transmit (Serial) Shift register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG1. The TXREG1 register is loaded with data in software. The TSR register is not loaded until the last bit  has  been  transmitted  from  the  previous  load.  As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG1 register (if available).\nOnce the TXREG1 register transfers  the data  to  the TSR register (occurs in one TCYCLE), the TXREG1 is empty  and  the  TX1IF  flag  bit  (PIR1<4>)  is  set.  The interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TX1IE (PIE1<4>). TX1IF is set  regardless  of  the  state  of  enable  bit,  TX1IE;  it cannot be cleared in software. It will reset only when new data is loaded into the TXREG1 register.",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\nWhile flag bit, TX1IF, indicates the status of the TXREG1 register,  another  bit,  TRMT  (TXSTA<1>),  shows  the status of the TSR register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TSR  is  not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Master Transmission:",
    "18.3.1 EUSART SYNCHRONOUS MASTER TRANSMISSION\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit,  as  required,  to  achieve  the  desired  baud rate.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. If the signal from the CKx pin is to be inverted, set the TXCKP bit.\n4. If interrupts are desired, set enable bit, TXIE.\n5. If 9-bit transmission is desired, set bit, TX9.\n6. Enable the transmission by setting bit, TXEN.\n7. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n8. Start transmission by loading data to the TXREG register.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\non Page = 65. TXREG1, Bit 7 = EUSART1 Transmit Register. TXREG1, Bit 6 = EUSART1 Transmit Register. TXREG1, Bit 5 = EUSART1 Transmit Register. TXREG1, Bit 4 = EUSART1 Transmit Register. TXREG1, Bit 3 = EUSART1 Transmit Register. TXREG1, Bit 2 = EUSART1 Transmit Register. TXREG1, Bit 1 = EUSART1 Transmit Register. TXREG1, Bit 0 = EUSART1 Transmit Register. TXREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 =",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nEUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master transmission.",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n- 4. If the signal from the CKx pin is to be inverted, set the TXCKP bit.\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either the Single Receive Enable bit, SREN  (RCSTA1<5>),  or  the  Continuous  Receive Enable bit, CREN (RCSTA1<4>). Data is sampled on the RX1 pin on the falling edge of the clock.\nIf enable  bit,  SREN,  is  set,  only  a  single  word  is received. If enable bit, CREN, is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Master Reception:",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n1. Initialize the SPBRGH:SPBRG registers for the appropriate baud rate. Set or clear the BRG16 bit,  as  required,  to  achieve  the  desired  baud rate.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. Ensure bits, CREN and SREN, are clear.\n5. If interrupts are desired, set enable bit, RCIE.\n6. If 9-bit reception is desired, set bit, RX9.\n7. If a single reception is required, set bit, SREN. For continuous reception, set bit, CREN.\n8. Interrupt flag bit, RCIF, will be set when reception is complete and an interrupt will be generated if the enable bit, RCIE, was set.\n9. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n10. Read  the  8-bit  received  data  by  reading  the RCREG register.\n11. If any error occurred, clear the error by clearing bit, CREN.",
    "18.3.2 EUSART SYNCHRONOUS MASTER RECEPTION\n12. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\non Page = 65. RCREG1, Bit 7 = EUSART1 Receive Register. RCREG1, Bit 6 = EUSART1 Receive Register. RCREG1, Bit 5 = EUSART1 Receive Register. RCREG1, Bit 4 = EUSART1 Receive Register. RCREG1, Bit 3 = EUSART1 Receive Register. RCREG1, Bit 2 = EUSART1 Receive Register. RCREG1, Bit 1 = EUSART1 Receive Register. RCREG1, Bit 0 = EUSART1 Receive Register. RCREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 =",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nEUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master reception.",
    "18.4 EUSART Synchronous Slave Mode\nSynchronous  Slave  mode  is  entered  by  clearing  bit, CSRC  (TXSTA<7>).  This mode  differs from the Synchronous  Master  mode  in  that  the  shift  clock  is supplied  externally  at  the  CK1  pin  (instead  of  being supplied  internally  in  Master  mode).  This  allows  the device to transfer or receive data while in any low-power mode.",
    "18.4.1 EUSART SYNCHRONOUS SLAVE TRANSMIT\nThe operation of the Synchronous Master and Slave modes are identical except in the  case  of  the  Sleep mode.\nIf  two words are written to the TXREG1 and then the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The  second  word  will  remain  in  the  TXREG1 register.\nc) Flag bit, TX1IF, will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG1  register  will  transfer  the  second word to the TSR and flag bit, TX1IF, will now be set.\ne) If enable bit, TX1IE, is set, the interrupt will wake the  chip  from  Sleep.  If  the  global  interrupt  is enabled, the program will branch to the interrupt vector.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\non Page = 65. TXREG1, Bit 7 = EUSART1 Transmit Register. TXREG1, Bit 6 = EUSART1 Transmit Register. TXREG1, Bit 5 = EUSART1 Transmit Register. TXREG1, Bit 4 = EUSART1 Transmit Register. TXREG1, Bit 3 = EUSART1 Transmit Register. TXREG1, Bit 2 = EUSART1 Transmit Register. TXREG1, Bit 1 = EUSART1 Transmit Register. TXREG1, Bit 0 = EUSART1 Transmit Register. TXREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = EUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 =",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nEUSART1 Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 6 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = EUSART1 Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave transmission.\nTo set up a Synchronous Slave Transmission:",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n1. Enable the synchronous slave serial port by setting  bits,  SYNC  and  SPEN,  and  clearing  bit, CSRC.\n2. Clear bits, CREN and SREN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If the signal from the CKx pin is to be inverted, set the TXCKP bit.\n5. If 9-bit transmission is desired, set bit, TX9.\n6. Enable the transmission by setting enable bit, TXEN.\n7. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n8. Start transmission by loading data to the TXREGx register.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "18.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\nTo set up a Synchronous Slave Reception:\nThe operation of the Synchronous Master and Slave modes is identical except in the case of Sleep or any Idle  mode  and  bit,  SREN,  which  is  a  'don't  care'  in Slave mode.\nIf  receive is enabled by setting the CREN bit prior to entering Sleep or any Idle mode, then a word may be received while in this low-power mode. Once the word is received, the RSR register will transfer the data to the RCREG1 register; if the RC1IE enable bit is set, the interrupt generated will wake  the chip from the low-power mode. If the global interrupt is enabled, the program will branch to the interrupt vector.",
    "18.4.2 EUSART SYNCHRONOUS SLAVE RECEPTION\n1. Enable  the  synchronous  master  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. If interrupts are desired, set enable bit, RCIE.\n3. If the signal from the CKx pin is to be inverted, set the TXCKP bit.\n4. If 9-bit reception is desired, set bit, RX9.\n5. To enable reception, set enable bit, CREN.\n6. Flag  bit,  RCIF,  will  be  set  when  reception  is complete.  An  interrupt will be  generated  if enable bit, RCIE, was set.\n7. Read the RCSTA register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG register.\n9. If any error occurred, clear the error by clearing bit, CREN.\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\n= SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. RCSTA1, Bit 7 = SPEN. RCSTA1, Bit 6 = RX9. RCSTA1, Bit 5 = SREN. RCSTA1, Bit 4 = CREN. RCSTA1, Bit 3 = ADDEN. RCSTA1, Bit 2 = FERR. RCSTA1, Bit 1 = OERR. RCSTA1, Bit 0 = RX9D. RCSTA1, Reset Values",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\non Page = 65. RCREG1, Bit 7 = EUSART1 Receive Register. RCREG1, Bit 6 = EUSART1 Receive Register. RCREG1, Bit 5 = EUSART1 Receive Register. RCREG1, Bit 4 = EUSART1 Receive Register. RCREG1, Bit 3 = EUSART1 Receive Register. RCREG1, Bit 2 = EUSART1 Receive Register. RCREG1, Bit 1 = EUSART1 Receive Register. RCREG1, Bit 0 = EUSART1 Receive Register. RCREG1, Reset Values on Page = 65. TXSTA1, Bit 7 = CSRC. TXSTA1, Bit 6 = TX9. TXSTA1, Bit 5 = TXEN. TXSTA1, Bit 4 = SYNC. TXSTA1, Bit 3 = SENDB. TXSTA1, Bit 2 = BRGH. TXSTA1, Bit 1 = TRMT. TXSTA1, Bit 0 = TX9D. TXSTA1, Reset Values on Page = 65. BAUDCON1, Bit 7 = ABDOVF.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBAUDCON1, Bit 6 = RCIDL. BAUDCON1, Bit 5 = RXDTP. BAUDCON1, Bit 4 = TXCKP. BAUDCON1, Bit 3 = BRG16. BAUDCON1, Bit 2 = -. BAUDCON1, Bit 1 = WUE. BAUDCON1, Bit 0 = ABDEN. BAUDCON1, Reset Values on Page = 66. SPBRGH1, Bit 7 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 6 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 5 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 4 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 3 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 2 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 1 = Baud Rate Generator Register High Byte. SPBRGH1, Bit 0 = Baud Rate Generator Register High Byte. SPBRGH1, Reset Values on Page = 66. SPBRG1, Bit 7 =",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nBaud Rate Generator Register Low Byte. SPBRG1, Bit 6 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 5 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 4 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 3 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 2 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 1 = Baud Rate Generator Register Low Byte. SPBRG1, Bit 0 = Baud Rate Generator Register Low Byte. SPBRG1, Reset Values on Page = 65\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave reception.",
    "19.0 ADDRESSABLE UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (AUSART)\nThe  Addressable  Universal  Synchronous  Asynchronous Receiver Transmitter (AUSART) module is very similar  in  function  to  the  Enhanced  USART  module, discussed in the previous chapter. It is provided as an additional channel for serial communication with external devices, for those situations that do not require Auto-Baud Detection (ABD) or LIN/J2602 bus support.\nThe  AUSART  can  be  configured  in  the  following modes:\n\u00b7 Asynchronous (full-duplex)\n\u00b7 Synchronous - Master (half-duplex)\n\u00b7 Synchronous - Slave (half-duplex)\nThe pins of the AUSART module are multiplexed with the functions of PORTG (RG1/TX2/CK2 and RG2/RX2/DT2,  respectively).  In  order  to  configure these pins as an AUSART:",
    "19.0 ADDRESSABLE UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (AUSART)\n\u00b7 SPEN bit (RCSTA2<7>) must be set (= 1 )\n\u00b7 TRISG<2> bit must be set (= 1 )\n\u00b7 TRISG<1> bit must be cleared (= 0 ) for Asynchronous and Synchronous Master modes\n\u00b7 TRISG<1> bit must be set (= 1 ) for Synchronous Slave mode",
    "Note:\nThe  USART  control  will automatically reconfigure the pin from input to output as needed.\nThe operation of the Addressable USART module is controlled through two registers: TXSTA2 and RXSTA2.  These  are  detailed  in  Register 19-1  and Register 19-2 respectively.",
    "REGISTER 19-1: TXSTA2: AUSART2 TRANSMIT STATUS AND CONTROL REGISTER\nCSRC, R/W-0 = TX9. CSRC, R/W-0 = TXEN (1). CSRC, R/W-0 = SYNC. CSRC, U-0 = -. CSRC, R/W-0 = BRGH. CSRC, R-1 = TRMT. CSRC, R/W-0 = TX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 19-1: TXSTA2: AUSART2 TRANSMIT STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nCSRC: Clock Source Select bit\nAsynchronous mode:\nDon't care.\nSynchronous mode:\n1 = Master mode (clock generated internally from BRG)\n0 = Slave mode (clock from external source)",
    "bit 6\nTX9: 9-Bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission",
    "bit 5\nTXEN: Transmit Enable bit (1)\n1 = Transmit is enabled\n0 = Transmit is disabled",
    "bit 4\nSYNC: AUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode",
    "bit 3\nUnimplemented: Read as ' 0 '",
    "bit 2 BRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.",
    "bit 1\nTRMT: Transmit Shift Register Status bit\n1 = TSR is empty\n0 = TSR is full\nbit 0\nTX9D: 9th bit of Transmit Data bit\nCan be address/data bit or a parity bit.\nNote 1: SREN/CREN overrides TXEN in Sync mode.",
    "REGISTER 19-2: RCSTA2: AUSART2 RECEIVE STATUS AND CONTROL REGISTER\nSPEN, R/W-0 = RX9. SPEN, R/W-0 = SREN. SPEN, R/W-0 = CREN. SPEN, R/W-0 = ADDEN. SPEN, R-0 = FERR. SPEN, R-0 = OERR. SPEN, R-x = RX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-x = bit 0",
    "REGISTER 19-2: RCSTA2: AUSART2 RECEIVE STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SPEN: Serial Port Enable bit\n1 = Serial port is enabled (configures RXx/DTx and TXx/CKx pins as serial port pins)\n0 = Serial port is disabled (held in Reset)",
    "bit 6 RX9: 9-Bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN: Single Receive Enable bit\nAsynchronous mode:\nDon't care.\nSynchronous mode - Master:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode - Slave:\nDon't care.",
    "bit 4\nCREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver",
    "Synchronous mode:\n1 = Enables continuous receive until enable bit, CREN, is cleared (CREN overrides SREN)\n0 = Disables continuous receive",
    "bit 3\nADDEN: Address Detect Enable bit\nAsynchronous mode 9-Bit (RX9 = 1 ):\n1\n= Enables address detection, enables interrupt and loads the receive buffer when RSR<8> are set\n0 = Disables address detection, all bytes are received and ninth bit can be used as a parity bit",
    "Asynchronous mode 9-Bit (RX9 = 0 ):\nDon't care.",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be updated by reading RCREG1 register and receiving next valid byte) 0 = No framing error",
    "bit 1\nOERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit, CREN)\n0 = No overrun error",
    "bit 0\nRX9D: 9th bit of Received Data bit\nThis can be address/data bit or a parity bit and must be calculated by user firmware.",
    "19.1 AUSART Baud Rate Generator (BRG)\nThe BRG is a dedicated, 8-bit generator that supports both the Asynchronous and Synchronous modes of the AUSART.\nWriting a new value to the SPBRG2 register causes the BRG timer to  be  reset  (or  cleared).  This  ensures  the BRG does not wait for a timer overflow before outputting the new baud rate.\nThe SPBRG2  register controls the period of a free-running timer. In Asynchronous mode, BRGH bit (TXSTA<2>) also controls the baud rate. In Synchronous mode, BRGH is ignored. Table 19-1 shows the formula for computation of the baud rate for different AUSART  modes,  which  only  apply  in  Master  mode (internally generated clock).",
    "19.1 AUSART Baud Rate Generator (BRG)\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRG2 register can be calculated using the formulas in Table 19-1. From this, the error  in  baud  rate  can  be  determined.  An  example calculation  is  shown  in  Example 19-1.  Typical  baud rates  and  error  values  for  the  various  Asynchronous modes are shown  in  Table 19-2.  It  may  be  advantageous to use the high baud rate (BRGH = 1 ) to reduce the baud rate error, or achieve a slow baud rate for a fast oscillator frequency.",
    "19.1.1 OPERATION IN POWER-MANAGED MODES\nThe device clock is used to generate the desired baud rate.  When  one  of  the  power-managed  modes  is entered, the new clock source may be operating at a different frequency. This may require an adjustment to the value in the SPBRG2 register.",
    "19.1.2 SAMPLING\nThe data on the RX2 pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RX2 pin.",
    "TABLE 19-1: BAUD RATE FORMULAS\n0, Configuration Bits.BRGH = 0. 0, BRG/AUSART Mode = Asynchronous. 0, Baud Rate Formula = FOSC/[64 (n + 1)]. 0, Configuration Bits.BRGH = 1. 0, BRG/AUSART Mode = Asynchronous. 0, Baud Rate Formula = FOSC/[16 (n + 1)]. 1, Configuration Bits.BRGH = x. 1, BRG/AUSART Mode = Synchronous. 1, Baud Rate Formula = FOSC/[4 (n + 1)]\nLegend: x = Don't care, n = Value of SPBRG2 register",
    "EXAMPLE 19-1: CALCULATING BAUD RATE ERROR\nFor a device with FOSC of 16 MHz, desired baud rate of 9600, Asynchronous mode, BRGH = 0:\nDesired Baud Rate\n= FOSC/(64 ([SPBRG2] + 1))\nSolving for SPBRG2:\nX\n=\n((FOSC/Desired Baud Rate)/64) - 1\n= ((16000000/9600)/64) - 1\n= [25.042] = 25\nCalculated Baud Rate\n= 16000000/(64 (25 + 1))\n= 9615\nError\n= (Calculated Baud Rate - Desired Baud Rate)/Desired Baud Rate\n= (9615 - 9600)/9600 = 0.16%",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH THE BAUD RATE GENERATOR\nTXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 4",
    "TABLE 19-2: REGISTERS ASSOCIATED WITH THE BAUD RATE GENERATOR\n= AUSART2 Baud Rate Generator Register. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register. SPBRG2, Reset Values on Page = 66\nLegend: Shaded cells are not used by the BRG.",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 0.FOSC = 40.000 MHz.% Error = -. 0.3, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 0.FOSC = 20.000 MHz.% Error = -. 0.3, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 0.FOSC = 10.000 MHz.% Error = -. 0.3, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 0.FOSC = 8.000 MHz.% Error = -. 0.3, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, BRGH = 0.FOSC = 40.000 MHz.% Error = -. 1.2, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = 1.221. 1.2, BRGH = 0.FOSC = 20.000 MHz.% Error = 1.73. 1.2, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 1.2, BRGH = 0.FOSC =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n10.000 MHz.Actual Rate (K) = 1.202. 1.2, BRGH = 0.FOSC = 10.000 MHz.% Error = 0.16. 1.2, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 1.2, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = 1.201. 1.2, BRGH = 0.FOSC = 8.000 MHz.% Error = -0.16. 1.2, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 103. 2.4, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = 2.441. 2.4, BRGH = 0.FOSC = 40.000 MHz.% Error = 1.73. 2.4, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 2.4, BRGH =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 20.000 MHz.Actual Rate (K) = 2.404. 2.4, BRGH = 0.FOSC = 20.000 MHz.% Error = 0.16. 2.4, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 2.4, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = 2.404. 2.4, BRGH = 0.FOSC = 10.000 MHz.% Error = 0.16. 2.4, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 2.4, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, BRGH = 0.FOSC = 8.000 MHz.% Error = -0.16. 2.4, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 9.6,",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 0.FOSC = 40.000 MHz.% Error = 0.16. 9.6, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 9.6, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = 9.766. 9.6, BRGH = 0.FOSC = 20.000 MHz.% Error = 1.73. 9.6, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 31. 9.6, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = 9.766. 9.6, BRGH = 0.FOSC = 10.000 MHz.% Error = 1.73. 9.6, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n15. 9.6, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 0.FOSC = 8.000 MHz.% Error = -0.16. 9.6, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = 12. 19.2, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = 19.531. 19.2, BRGH = 0.FOSC = 40.000 MHz.% Error = 1.73. 19.2, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 31. 19.2, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = 19.531. 19.2, BRGH = 0.FOSC = 20.000 MHz.% Error = 1.73. 19.2, BRGH = 0.FOSC = 20.000",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = 15. 19.2, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = 19.531. 19.2, BRGH = 0.FOSC = 10.000 MHz.% Error = 1.73. 19.2, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 19.2, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 19.2, BRGH = 0.FOSC = 8.000 MHz.% Error = -. 19.2, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 57.6, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = 56.818. 57.6, BRGH = 0.FOSC = 40.000 MHz.% Error = -1.36. 57.6, BRGH = 0.FOSC =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n40.000 MHz.SPBRG value (decimal) = 10. 57.6, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = 62.500. 57.6, BRGH = 0.FOSC = 20.000 MHz.% Error = 8.51. 57.6, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 57.6, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = 52.083. 57.6, BRGH = 0.FOSC = 10.000 MHz.% Error = -9.58. 57.6, BRGH = 0.FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 57.6, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 57.6, BRGH = 0.FOSC = 8.000 MHz.% Error = -. 57.6, BRGH = 0.FOSC =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n8.000 MHz.SPBRG value (decimal) = -. 115.2, BRGH = 0.FOSC = 40.000 MHz.Actual Rate (K) = 125.000. 115.2, BRGH = 0.FOSC = 40.000 MHz.% Error = 8.51. 115.2, BRGH = 0.FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 115.2, BRGH = 0.FOSC = 20.000 MHz.Actual Rate (K) = 104.167. 115.2, BRGH = 0.FOSC = 20.000 MHz.% Error = -9.58. 115.2, BRGH = 0.FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 115.2, BRGH = 0.FOSC = 10.000 MHz.Actual Rate (K) = 78.125. 115.2, BRGH = 0.FOSC = 10.000 MHz.% Error = -32.18. 115.2, BRGH =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 115.2, BRGH = 0.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 0.FOSC = 8.000 MHz.% Error = -. 115.2, BRGH = 0.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 0.300. 0.3, BRGH = 0.FOSC = 4.000 MHz.% Error = 0.16. 0.3, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 0.3, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = 0.300. 0.3, BRGH = 0.FOSC = 2.000 MHz.% Error = -0.16. 0.3, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 0.3, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, BRGH = 0.FOSC = 1.000 MHz.% Error = -0.16. 0.3, BRGH = 0.FOSC = 1.000 MHz.SPBRG value",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 51. 1.2, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, BRGH = 0.FOSC = 4.000 MHz.% Error = 0.16. 1.2, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 1.2, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, BRGH = 0.FOSC = 2.000 MHz.% Error = -0.16. 1.2, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 25. 1.2, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, BRGH = 0.FOSC = 1.000 MHz.% Error = -0.16. 1.2, BRGH = 0.FOSC = 1.000",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = 12. 2.4, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, BRGH = 0.FOSC = 4.000 MHz.% Error = 0.16. 2.4, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 2.4, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, BRGH = 0.FOSC = 2.000 MHz.% Error = -0.16. 2.4, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 2.4, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 2.4, BRGH = 0.FOSC = 1.000 MHz.% Error = -. 2.4, BRGH = 0.FOSC = 1.000",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = -. 9.6, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 8.929. 9.6, BRGH = 0.FOSC = 4.000 MHz.% Error = -6.99. 9.6, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 6. 9.6, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 9.6, BRGH = 0.FOSC = 2.000 MHz.% Error = -. 9.6, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 9.6, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, BRGH = 0.FOSC = 1.000 MHz.% Error = -. 9.6, BRGH = 0.FOSC = 1.000",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.SPBRG value (decimal) = -. 19.2, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 20.833. 19.2, BRGH = 0.FOSC = 4.000 MHz.% Error = 8.51. 19.2, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 2. 19.2, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, BRGH = 0.FOSC = 2.000 MHz.% Error = -. 19.2, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, BRGH = 0.FOSC = 1.000 MHz.% Error = -. 19.2, BRGH = 0.FOSC = 1.000 MHz.SPBRG",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nvalue (decimal) = -. 57.6, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, BRGH = 0.FOSC = 4.000 MHz.% Error = 8.51. 57.6, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 57.6, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, BRGH = 0.FOSC = 2.000 MHz.% Error = -. 57.6, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, BRGH = 0.FOSC = 1.000 MHz.% Error = -. 57.6, BRGH = 0.FOSC = 1.000 MHz.SPBRG value (decimal) =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n-. 115.2, BRGH = 0.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 115.2, BRGH = 0.FOSC = 4.000 MHz.% Error = -45.75. 115.2, BRGH = 0.FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 115.2, BRGH = 0.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 0.FOSC = 2.000 MHz.% Error = -. 115.2, BRGH = 0.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, BRGH = 0.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 0.FOSC = 1.000 MHz.% Error = -. 115.2, BRGH = 0.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 40.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 20.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 1.FOSC = 10.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 10.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.FOSC = 8.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 8.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = -. 1.2, BRGH = 1.FOSC = 40.000 MHz.% Error = -. 1.2, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = -. 1.2, BRGH = 1.FOSC = 20.000 MHz.% Error = -. 1.2, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 1.FOSC = 10.000",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nMHz.Actual Rate (K) = -. 1.2, BRGH = 1.FOSC = 10.000 MHz.% Error = -. 1.2, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = -. 1.2, BRGH = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 1.2, BRGH = 1.FOSC = 8.000 MHz.% Error = -. 1.2, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -. 2.4, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = -. 2.4, BRGH = 1.FOSC = 40.000 MHz.% Error = -. 2.4, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = -. 2.4, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = -.",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, BRGH = 1.FOSC = 20.000 MHz.% Error = -. 2.4, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = -. 2.4, BRGH = 1.FOSC = 10.000 MHz.Actual Rate (K) = 2.441. 2.4, BRGH = 1.FOSC = 10.000 MHz.% Error = 1.73. 2.4, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 2.4, BRGH = 1.FOSC = 8.000 MHz.Actual Rate (K) = 2.403. 2.4, BRGH = 1.FOSC = 8.000 MHz.% Error = -0.16. 2.4, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 207. 9.6, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n9.766. 9.6, BRGH = 1.FOSC = 40.000 MHz.% Error = 1.73. 9.6, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 9.6, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 1.FOSC = 20.000 MHz.% Error = 0.16. 9.6, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, BRGH = 1.FOSC = 10.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 1.FOSC = 10.000 MHz.% Error = 0.16. 9.6, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, BRGH = 1.FOSC = 8.000 MHz.Actual",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nRate (K) = 9.615. 9.6, BRGH = 1.FOSC = 8.000 MHz.% Error = -0.16. 9.6, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 51. 19.2, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = 19.231. 19.2, BRGH = 1.FOSC = 40.000 MHz.% Error = 0.16. 19.2, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 19.2, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = 19.231. 19.2, BRGH = 1.FOSC = 20.000 MHz.% Error = 0.16. 19.2, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, BRGH = 1.FOSC =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n10.000 MHz.Actual Rate (K) = 19.531. 19.2, BRGH = 1.FOSC = 10.000 MHz.% Error = 1.73. 19.2, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 31. 19.2, BRGH = 1.FOSC = 8.000 MHz.Actual Rate (K) = 19.230. 19.2, BRGH = 1.FOSC = 8.000 MHz.% Error = -0.16. 19.2, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 25. 57.6, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = 58.140. 57.6, BRGH = 1.FOSC = 40.000 MHz.% Error = 0.94. 57.6, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, BRGH =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n1.FOSC = 20.000 MHz.Actual Rate (K) = 56.818. 57.6, BRGH = 1.FOSC = 20.000 MHz.% Error = -1.36. 57.6, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 21. 57.6, BRGH = 1.FOSC = 10.000 MHz.Actual Rate (K) = 56.818. 57.6, BRGH = 1.FOSC = 10.000 MHz.% Error = -1.36. 57.6, BRGH = 1.FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 57.6, BRGH = 1.FOSC = 8.000 MHz.Actual Rate (K) = 55.555. 57.6, BRGH = 1.FOSC = 8.000 MHz.% Error = 3.55. 57.6, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = 8.",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n115.2, BRGH = 1.FOSC = 40.000 MHz.Actual Rate (K) = 113.636. 115.2, BRGH = 1.FOSC = 40.000 MHz.% Error = -1.36. 115.2, BRGH = 1.FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, BRGH = 1.FOSC = 20.000 MHz.Actual Rate (K) = 113.636. 115.2, BRGH = 1.FOSC = 20.000 MHz.% Error = -1.36. 115.2, BRGH = 1.FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, BRGH = 1.FOSC = 10.000 MHz.Actual Rate (K) = 125.000. 115.2, BRGH = 1.FOSC = 10.000 MHz.% Error = 8.51. 115.2, BRGH = 1.FOSC = 10.000 MHz.SPBRG value",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 4. 115.2, BRGH = 1.FOSC = 8.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 1.FOSC = 8.000 MHz.% Error = -. 115.2, BRGH = 1.FOSC = 8.000 MHz.SPBRG value (decimal) = -",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n0.3, BRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 4.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 0.3, BRGH = 1.FOSC = 2.000 MHz.% Error = -. 0.3, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 0.3, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = 0.300. 0.3, BRGH = 1.FOSC = 1.000 MHz.% Error = -0.16. 0.3, BRGH = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 207. 1.2,",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 1.202. 1.2, BRGH = 1.FOSC = 4.000 MHz.% Error = 0.16. 1.2, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 1.2, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = 1.201. 1.2, BRGH = 1.FOSC = 2.000 MHz.% Error = -0.16. 1.2, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 103. 1.2, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = 1.201. 1.2, BRGH = 1.FOSC = 1.000 MHz.% Error = -0.16. 1.2, BRGH = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = 51.",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n2.4, BRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 2.404. 2.4, BRGH = 1.FOSC = 4.000 MHz.% Error = 0.16. 2.4, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 2.4, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = 2.403. 2.4, BRGH = 1.FOSC = 2.000 MHz.% Error = -0.16. 2.4, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 51. 2.4, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = 2.403. 2.4, BRGH = 1.FOSC = 1.000 MHz.% Error = -0.16. 2.4, BRGH = 1.FOSC = 1.000 MHz.SPBRG value",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n(decimal) = 25. 9.6, BRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 1.FOSC = 4.000 MHz.% Error = 0.16. 9.6, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 9.6, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = 9.615. 9.6, BRGH = 1.FOSC = 2.000 MHz.% Error = -0.16. 9.6, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = 12. 9.6, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 9.6, BRGH = 1.FOSC = 1.000 MHz.% Error = -. 9.6, BRGH = 1.FOSC = 1.000 MHz.SPBRG",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nvalue (decimal) = -. 19.2, BRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 19.231. 19.2, BRGH = 1.FOSC = 4.000 MHz.% Error = 0.16. 19.2, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 19.2, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 19.2, BRGH = 1.FOSC = 2.000 MHz.% Error = -. 19.2, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 19.2, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 19.2, BRGH = 1.FOSC = 1.000 MHz.% Error = -. 19.2, BRGH = 1.FOSC = 1.000 MHz.SPBRG value (decimal) =",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\n-. 57.6, BRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 62.500. 57.6, BRGH = 1.FOSC = 4.000 MHz.% Error = 8.51. 57.6, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 57.6, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 57.6, BRGH = 1.FOSC = 2.000 MHz.% Error = -. 57.6, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 57.6, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 57.6, BRGH = 1.FOSC = 1.000 MHz.% Error = -. 57.6, BRGH = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -. 115.2,",
    "TABLE 19-3: BAUD RATES FOR ASYNCHRONOUS MODES\nBRGH = 1.FOSC = 4.000 MHz.Actual Rate (K) = 125.000. 115.2, BRGH = 1.FOSC = 4.000 MHz.% Error = 8.51. 115.2, BRGH = 1.FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 115.2, BRGH = 1.FOSC = 2.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 1.FOSC = 2.000 MHz.% Error = -. 115.2, BRGH = 1.FOSC = 2.000 MHz.SPBRG value (decimal) = -. 115.2, BRGH = 1.FOSC = 1.000 MHz.Actual Rate (K) = -. 115.2, BRGH = 1.FOSC = 1.000 MHz.% Error = -. 115.2, BRGH = 1.FOSC = 1.000 MHz.SPBRG value (decimal) = -",
    "19.2 AUSART Asynchronous Mode\nThe Asynchronous mode of operation is selected by clearing the SYNC bit (TXSTA2<4>). In this mode, the AUSART uses standard Non-Return-to-Zero (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip dedicated 8-bit Baud Rate Generator can be used to derive standard baud rate frequencies from the oscillator.\ninterrupt  can  be  enabled  or  disabled  by  setting  or clearing  the  interrupt  enable  bit,  TX2IE  (PIE3<4>). TX2IF will be set regardless of the state of TX2IE; it cannot  be  cleared  in  software.  TX2IF  is  also  not cleared immediately upon loading TXREG2, but becomes valid in the second instruction cycle following the load instruction. Polling TX2IF immediately following a load of TXREG2 will return invalid results.",
    "19.2 AUSART Asynchronous Mode\nThe AUSART transmits and receives the LSb first. The AUSART's  transmitter  and  receiver  are  functionally independent but use the same data format and baud rate.  The  Baud  Rate  Generator  produces  a  clock, either x16 or x64 of the bit shift rate, depending on the BRGH bit (TXSTA2<2>). Parity is not supported by the hardware  but  can  be  implemented  in  software  and stored as the 9th data bit.\nWhen operating in Asynchronous mode, the AUSART module consists of the following important elements:\n\u00b7 Baud Rate Generator\n\u00b7 Sampling Circuit\n\u00b7 Asynchronous Transmitter\n\u00b7 Asynchronous Receiver",
    "19.2.1 AUSART ASYNCHRONOUS TRANSMITTER\nThe  AUSART transmitter  block  diagram  is  shown  in Figure 19-1. The heart of the transmitter is the Transmit (Serial) Shift register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG2. The TXREG2 register is loaded with data in software. The TSR register is not loaded until the Stop bit  has  been  transmitted  from  the  previous  load.  As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG2 register (if available).\nWhile TX2IF indicates the status of the TXREG2 register, another bit, TRMT (TXSTA2<1>), shows the status of the TSR register. TRMT is a read-only bit which is set when the TSR register is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine if the TSR register is empty.\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag  bit,  TX2IF,  is  set  when  enable  bit, TXEN is set.",
    "19.2.1 AUSART ASYNCHRONOUS TRANSMITTER\nTo set up an Asynchronous Transmission:\n1. Initialize the SPBRG2 register for the appropriate baud rate. Set or clear the BRGH bit, as required, to achieve the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, TX2IE.\n4. If 9-bit transmission is desired, set transmit bit, TX9. Can be used as address/data bit.\n5. Enable  the  transmission  by  setting  bit,  TXEN, which will also set bit, TX2IF.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Load  data to the TXREG2  register  (starts transmission).\nOnce the TXREG2 register transfers  the data  to  the TSR register (occurs in one TCY), the TXREG2 register is empty and the TX2IF flag bit (PIR3<4>) is set. This",
    "19.2.1 AUSART ASYNCHRONOUS TRANSMITTER\n- 8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 19-4: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-4: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. TXREG2, Bit 7 = AUSART2 Transmit Register. TXREG2, Bit 6 = AUSART2 Transmit Register.",
    "TABLE 19-4: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nTXREG2, Bit 5 = AUSART2 Transmit Register. TXREG2, Bit 4 = AUSART2 Transmit Register. TXREG2, Bit 3 = AUSART2 Transmit Register. TXREG2, Bit 2 = AUSART2 Transmit Register. TXREG2, Bit 1 = AUSART2 Transmit Register. TXREG2, Bit 0 = AUSART2 Transmit Register. TXREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register. SPBRG2,",
    "TABLE 19-4: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nBit 4 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register. SPBRG2, Reset Values on Page = 66\nLegend: - = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous transmission.",
    "19.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThe receiver block diagram is  shown in Figure 19-4.\nThe data is received on the RX2 pin and drives the data recovery block. The data recovery block is actually a high-speed shifter operating at x16 times the baud rate, whereas the main receive serial shifter operates at the bit rate or at FOSC. This mode would typically be used in RS-232 systems.\nTo set up an Asynchronous Reception:",
    "19.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRG2 register for the appropriate baud rate. Set or clear the BRGH bit, as required, to achieve the desired baud rate.\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, RC2IE.\n4. If 9-bit reception is desired, set bit, RX9.\n5. Enable the reception by setting bit, CREN.\n6. Flag  bit,  RC2IF,  will  be  set  when  reception  is complete and an interrupt will  be  generated  if enable bit, RC2IE, was set.\n7. Read the RCSTA2 register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG2 register.\n9. If any error occurred, clear the error by clearing enable bit, CREN.\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "19.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThis mode would typically be used in RS-485 systems. To  set  up  an  Asynchronous  Reception  with  Address Detect Enable:",
    "19.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRG2 register for the appropriate baud rate.  Set or  clear  the  BRGH  and BRG16 bits,  as  required,  to  achieve  the  desired  baud rate.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If interrupts are required, set the RCEN bit and select the desired priority level with the RC2IP bit.\n4. Set the RX9 bit to enable 9-bit reception.\n5. Set the ADDEN bit to enable address detect.\n6. Enable reception by setting the CREN bit.\n7. The  RC2IF  bit  will  be  set  when  reception  is complete. The interrupt will be Acknowledged if the RC2IE and GIE bits are set.\n8. Read the RCSTA2 register to determine if any error occurred during reception, as well as read bit 9 of data (if applicable).\n9. Read  RCREG2  to  determine  if  the  device  is being addressed.\n10. If any error occurred, clear the CREN bit.",
    "19.2.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n11. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.",
    "TABLE 19-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. RCREG2, Bit 7 = AUSART2 Receive Register. RCREG2, Bit 6 = AUSART2 Receive Register.",
    "TABLE 19-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nRCREG2, Bit 5 = AUSART2 Receive Register. RCREG2, Bit 4 = AUSART2 Receive Register. RCREG2, Bit 3 = AUSART2 Receive Register. RCREG2, Bit 2 = AUSART2 Receive Register. RCREG2, Bit 1 = AUSART2 Receive Register. RCREG2, Bit 0 = AUSART2 Receive Register. RCREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register. SPBRG2,",
    "TABLE 19-5: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nBit 4 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register. SPBRG2, Reset Values on Page = 66\nLegend: - = unimplemented locations read as ' 0 '. Shaded cells are not used for asynchronous reception.",
    "19.3 AUSART Synchronous Master Mode\nThe Synchronous Master mode is entered by setting the CSRC bit (TXSTA2<7>). In this mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting  data,  the  reception  is  inhibited  and  vice versa.  Synchronous  mode  is  entered  by  setting  bit, SYNC  (TXSTA2<4>).  In  addition,  enable  bit,  SPEN (RCSTA2<7>), is set in order to configure the TX2 and RX2  pins to CK2  (clock) and  DT2  (data) lines, respectively.",
    "19.3 AUSART Synchronous Master Mode\nOnce the TXREG2 register transfers  the data  to  the TSR register (occurs in one TCYCLE), the TXREG2 is empty  and  the  TX2IF  flag  bit  (PIR3<4>)  is  set.  The interrupt can be enabled or disabled by setting or clearing the interrupt enable bit, TX2IE (PIE3<4>). TX2IF is set regardless of the state of enable bit, TX2IE; it cannot be cleared in software. It will reset only when new data is loaded into the TXREG2 register.\nThe Master mode indicates that the processor transmits the master clock on the CK2 line.",
    "19.3.1 AUSART SYNCHRONOUS MASTER TRANSMISSION\nThe  AUSART transmitter  block  diagram  is  shown  in Figure 19-1. The heart of the transmitter is the Transmit (Serial) Shift register (TSR). The Shift register obtains its data from the Read/Write Transmit Buffer register, TXREG2. The TXREG2 register is loaded with data in software. The TSR register is not loaded until the last bit  has  been  transmitted  from  the  previous  load.  As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG2 (if available).\nWhile flag bit, TX2IF, indicates the status of the TXREG2 register,  another  bit,  TRMT  (TXSTA2<1>),  shows  the status of the TSR register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine  if  the  TSR  register  is  empty.  The  TSR  is  not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Master Transmission:",
    "19.3.1 AUSART SYNCHRONOUS MASTER TRANSMISSION\n1. Initialize the SPBRG2 register for the appropriate baud rate.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. If interrupts are desired, set enable bit, TX2IE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG2 register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 19-6: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-6: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. TXREG2, Bit 7 = AUSART2 Transmit Register. TXREG2, Bit 6 = AUSART2 Transmit Register.",
    "TABLE 19-6: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nTXREG2, Bit 5 = AUSART2 Transmit Register. TXREG2, Bit 4 = AUSART2 Transmit Register. TXREG2, Bit 3 = AUSART2 Transmit Register. TXREG2, Bit 2 = AUSART2 Transmit Register. TXREG2, Bit 1 = AUSART2 Transmit Register. TXREG2, Bit 0 = AUSART2 Transmit Register. TXREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register. SPBRG2,",
    "TABLE 19-6: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nBit 4 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register. SPBRG2, Reset Values on Page = 66\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master transmission.",
    "19.3.2 AUSART SYNCHRONOUS MASTER RECEPTION\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either the Single Receive Enable bit, SREN  (RCSTA2<5>),  or  the  Continuous  Receive Enable bit, CREN (RCSTA2<4>). Data is sampled on the RX2 pin on the falling edge of the clock.\nIf enable  bit,  SREN,  is  set,  only  a  single  word  is received. If enable bit, CREN, is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Master Reception:",
    "19.3.2 AUSART SYNCHRONOUS MASTER RECEPTION\n1. Initialize the SPBRG2 register for the appropriate baud rate.\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. Ensure bits, CREN and SREN, are clear.\n4. If interrupts are desired, set enable bit, RC2IE.\n5. If 9-bit reception is desired, set bit, RX9.\n6. If a single reception is required, set bit, SREN. For continuous reception, set bit, CREN.\n7. Interrupt flag bit, RC2IF,  will be  set when reception  is  complete  and  an  interrupt  will  be generated if the enable bit, RC2IE, was set.\n8. Read the RCSTA2 register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG2 register.\n10. If any error occurred, clear the error by clearing bit, CREN.\n11. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "FIGURE 19-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\nTX2/CK2 Pin, bit 0.bit 0 = . TX2/CK2 Pin, bit.1 = . TX2/CK2 Pin, bit 2.bit 2 = . TX2/CK2 Pin, bit 3.bit 3 = . TX2/CK2 Pin, bit 4.bit 4 = . TX2/CK2 Pin, bit 5.bit 5 = . TX2/CK2 Pin, bit 6.bit 6 = . TX2/CK2 Pin, bit 7.bit 7 = . TX2/CK2 Pin, Q3 Q4.Q3 Q4 = . Write to, bit 0.bit 0 = . Write to, bit.1 = . Write to, bit 2.bit 2 = . Write to, bit 3.bit 3 = . Write to, bit 4.bit 4 = . Write to, bit 5.bit 5 = . Write to, bit 6.bit 6 = . Write to, bit 7.bit 7 = . Write to, Q3 Q4.Q3 Q4 = . bit SREN, bit 0.bit 0 = . bit SREN, bit.1 =",
    "FIGURE 19-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\n. bit SREN, bit 2.bit 2 = . bit SREN, bit 3.bit 3 = . bit SREN, bit 4.bit 4 = . bit SREN, bit 5.bit 5 = . bit SREN, bit 6.bit 6 = . bit SREN, bit 7.bit 7 = . bit SREN, Q3 Q4.Q3 Q4 = . SREN bit, bit 0.bit 0 = . SREN bit, bit.1 = . SREN bit, bit 2.bit 2 = . SREN bit, bit 3.bit 3 = . SREN bit, bit 4.bit 4 = . SREN bit, bit 5.bit 5 = . SREN bit, bit 6.bit 6 = . SREN bit, bit 7.bit 7 = . SREN bit, Q3 Q4.Q3 Q4 = . CREN bit ' 0 ', bit 0.bit 0 = . CREN bit ' 0 ', bit.1 = . CREN bit ' 0 ', bit 2.bit 2 = . CREN bit ' 0 ', bit 3.bit 3 = . CREN",
    "FIGURE 19-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\nbit ' 0 ', bit 4.bit 4 = . CREN bit ' 0 ', bit 5.bit 5 = . CREN bit ' 0 ', bit 6.bit 6 = . CREN bit ' 0 ', bit 7.bit 7 = . CREN bit ' 0 ', Q3 Q4.Q3 Q4 = ' 0 '. RC2IF bit (Interrupt), bit 0.bit 0 = . RC2IF bit (Interrupt), bit.1 = . RC2IF bit (Interrupt), bit 2.bit 2 = . RC2IF bit (Interrupt), bit 3.bit 3 = . RC2IF bit (Interrupt), bit 4.bit 4 = . RC2IF bit (Interrupt), bit 5.bit 5 = . RC2IF bit (Interrupt), bit 6.bit 6 = . RC2IF bit (Interrupt), bit 7.bit 7 = . RC2IF bit (Interrupt), Q3 Q4.Q3 Q4 = . Read, bit 0.bit 0 = . Read, bit.1 = . Read, bit 2.bit 2 = . Read,",
    "FIGURE 19-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\nbit 3.bit 3 = . Read, bit 4.bit 4 = . Read, bit 5.bit 5 = . Read, bit 6.bit 6 = . Read, bit 7.bit 7 = . Read, Q3 Q4.Q3 Q4 = . RCREG2, bit 0.bit 0 = . RCREG2, bit.1 = . RCREG2, bit 2.bit 2 = . RCREG2, bit 3.bit 3 = . RCREG2, bit 4.bit 4 = . RCREG2, bit 5.bit 5 = . RCREG2, bit 6.bit 6 = . RCREG2, bit 7.bit 7 = . RCREG2, Q3 Q4.Q3 Q4 = . Timing diagram demonstrates, bit 0.bit 0 = . Timing diagram demonstrates, bit.1 = . Timing diagram demonstrates, bit 2.bit 2 = . Timing diagram demonstrates, bit 3.bit 3 = . Timing diagram demonstrates, bit 4.bit 4 = . Timing diagram demonstrates, bit 5.bit 5 = . Timing diagram demonstrates, bit 6.bit 6",
    "FIGURE 19-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\n= . Timing diagram demonstrates, bit 7.bit 7 = . Timing diagram demonstrates, Q3 Q4.Q3 Q4 = ",
    "TABLE 19-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. RCREG2, Bit 7 = AUSART2 Receive Register. RCREG2, Bit 6 = AUSART2 Receive Register.",
    "TABLE 19-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nRCREG2, Bit 5 = AUSART2 Receive Register. RCREG2, Bit 4 = AUSART2 Receive Register. RCREG2, Bit 3 = AUSART2 Receive Register. RCREG2, Bit 2 = AUSART2 Receive Register. RCREG2, Bit 1 = AUSART2 Receive Register. RCREG2, Bit 0 = AUSART2 Receive Register. RCREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register Low",
    "TABLE 19-7: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nByte. SPBRG2, Bit 4 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Reset Values on Page = 66\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous master reception.",
    "19.4 AUSART Synchronous Slave Mode\nSynchronous  Slave  mode  is  entered  by  clearing  bit, CSRC  (TXSTA2<7>).  This  mode  differs  from  the Synchronous  Master  mode  in  that  the  shift  clock  is supplied  externally  at  the  CK2  pin  (instead  of  being supplied  internally  in  Master  mode).  This  allows  the device to transfer or receive data while in any low-power mode.",
    "19.4.1 AUSART SYNCHRONOUS SLAVE TRANSMIT\nThe operation of the Synchronous Master and Slave modes are identical except in the  case  of  the  Sleep mode.\nIf  two words are written to the TXREG2 and then the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The  second  word  will remain in TXREG2 register.\nc) Flag bit, TX2IF, will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG2  register  will  transfer  the  second word to the TSR and flag bit, TX2IF, will now be set.\ne) If enable bit, TX2IE,is set, the interrupt will wake the  chip  from  Sleep.  If  the  global  interrupt  is enabled, the program will branch to the interrupt vector.",
    "TABLE 19-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. TXREG2, Bit 7 = AUSART2 Transmit Register. TXREG2, Bit 6 = AUSART2 Transmit Register.",
    "TABLE 19-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nTXREG2, Bit 5 = AUSART2 Transmit Register. TXREG2, Bit 4 = AUSART2 Transmit Register. TXREG2, Bit 3 = AUSART2 Transmit Register. TXREG2, Bit 2 = AUSART2 Transmit Register. TXREG2, Bit 1 = AUSART2 Transmit Register. TXREG2, Bit 0 = AUSART2 Transmit Register. TXREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register Low",
    "TABLE 19-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nByte. SPBRG2, Bit 4 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Reset Values on Page = 66\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave transmission.\nTo set up a Synchronous Slave Transmission:",
    "TABLE 19-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n1. Enable  the  synchronous  slave  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. Clear bits, CREN and SREN.\n3. If interrupts are desired, set enable bit, TX2IE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting enable bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG2 register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "19.4.2 AUSART SYNCHRONOUS SLAVE RECEPTION\nTo set up a Synchronous Slave Reception:\nThe operation of the Synchronous Master and Slave modes is identical except in the case of Sleep, or any Idle  mode  and  bit,  SREN,  which  is  a  'don't  care'  in Slave mode.\nIf  receive is enabled by setting the CREN bit prior to entering Sleep, or any Idle mode, then a word may be received while in this low-power mode. Once the word is received, the RSR register will transfer the data to the RCREG2 register; if the RC2IE enable bit is set, the interrupt generated will wake the chip from low-power mode. If the global interrupt is enabled, the program will branch to the interrupt vector.",
    "19.4.2 AUSART SYNCHRONOUS SLAVE RECEPTION\n1. Enable  the  synchronous  master  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. If interrupts are desired, set enable bit, RC2IE.\n3. If 9-bit reception is desired, set bit, RX9.\n4. To enable reception, set enable bit, CREN.\n5. Flag  bit,  RC2IF,  will  be  set  when  reception  is complete.  An  interrupt will be  generated  if enable bit, RC2IE, was set.\n6. Read the RCSTA2 register to get the 9th bit (if enabled)  and  determine  if  any  error  occurred during reception.\n7. Read  the  8-bit  received  data  by  reading  the RCREG2 register.\n8. If any error occurred, clear the error by clearing bit, CREN.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 19-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR3, Bit 7 = -. PIR3, Bit 6 = -. PIR3, Bit 5 = RC2IF. PIR3, Bit 4 = TX2IF. PIR3, Bit 3 = -. PIR3, Bit 2 = -. PIR3, Bit 1 = -. PIR3, Bit 0 = CCP3IF. PIR3, Reset Values on Page = 65. PIE3, Bit 7 = -. PIE3, Bit 6 = -. PIE3, Bit 5 = RC2IE. PIE3, Bit 4 = TX2IE. PIE3, Bit 3 = -. PIE3, Bit 2 = -. PIE3, Bit",
    "TABLE 19-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\n1 = -. PIE3, Bit 0 = CCP3IE. PIE3, Reset Values on Page = 65. IPR3, Bit 7 = -. IPR3, Bit 6 = -. IPR3, Bit 5 = RC2IP. IPR3, Bit 4 = TX2IP. IPR3, Bit 3 = -. IPR3, Bit 2 = -. IPR3, Bit 1 = -. IPR3, Bit 0 = CCP3IP. IPR3, Reset Values on Page = 65. RCSTA2, Bit 7 = SPEN. RCSTA2, Bit 6 = RX9. RCSTA2, Bit 5 = SREN. RCSTA2, Bit 4 = CREN. RCSTA2, Bit 3 = ADDEN. RCSTA2, Bit 2 = FERR. RCSTA2, Bit 1 = OERR. RCSTA2, Bit 0 = RX9D. RCSTA2, Reset Values on Page = 66. RCREG2, Bit 7 = AUSART2 Receive Register. RCREG2, Bit 6 = AUSART2 Receive Register.",
    "TABLE 19-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nRCREG2, Bit 5 = AUSART2 Receive Register. RCREG2, Bit 4 = AUSART2 Receive Register. RCREG2, Bit 3 = AUSART2 Receive Register. RCREG2, Bit 2 = AUSART2 Receive Register. RCREG2, Bit 1 = AUSART2 Receive Register. RCREG2, Bit 0 = AUSART2 Receive Register. RCREG2, Reset Values on Page = 66. TXSTA2, Bit 7 = CSRC. TXSTA2, Bit 6 = TX9. TXSTA2, Bit 5 = TXEN. TXSTA2, Bit 4 = SYNC. TXSTA2, Bit 3 = -. TXSTA2, Bit 2 = BRGH. TXSTA2, Bit 1 = TRMT. TXSTA2, Bit 0 = TX9D. TXSTA2, Reset Values on Page = 66. SPBRG2, Bit 7 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 6 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 5 = AUSART2 Baud Rate Generator Register Low",
    "TABLE 19-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nByte. SPBRG2, Bit 4 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 3 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 2 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 1 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Bit 0 = AUSART2 Baud Rate Generator Register Low Byte. SPBRG2, Reset Values on Page = 66\nLegend: - = unimplemented, read as ' 0 '. Shaded cells are not used for synchronous slave reception.",
    "20.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nThe  Analog-to-Digital  (A/D)  Converter  module  has 12 inputs  for the PIC18FX310/X410  devices.  This module allows conversion of an analog input signal to a corresponding 10-bit digital number.\nThe module has five registers:\n\u00b7 A/D Result High Register (ADRESH)\n\u00b7 A/D Result Low Register (ADRESL)\n\u00b7 A/D Control Register 0 (ADCON0)\n\u00b7 A/D Control Register 1 (ADCON1)\n\u00b7 A/D Control Register 2 (ADCON2)\nThe ADCON0 register, shown in Register 20-1, controls the operation of the A/D module. The ADCON1 register, shown in Register 20-2, configures the functions of the port pins. The ADCON2 register, shown  in  Register 20-3,  configures  the  A/D  clock source, programmed acquisition time and justification.",
    "REGISTER 20-1: ADCON0: A/D CONTROL REGISTER 0\n-, U-0 = -. -, R/W-0 = CHS3. -, R/W-0 = CHS2. -, R/W-0 = CHS1. -, R/W-0 = CHS0. -, R/W-0 = GO/DONE. -, R/W-0 = ADON\nbit 7\nbit 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5-2",
    "REGISTER 20-1: ADCON0: A/D CONTROL REGISTER 0\nCHS<3:0>: Analog Channel Select bits\n0000 = Channel 0 (AN0)\n0001 = Channel 1 (AN1)\n0010 = Channel 2 (AN2)\n0011 = Channel 3 (AN3)\n0100 = Channel 4 (AN4)\n0101 = Channel 5 (AN5)\n0110 = Channel 6 (AN6)\n0111 = Channel 7 (AN7)\n1000 = Channel 8 (AN8)\n1001 = Channel 9 (AN9)\n1010 = Channel 10 (AN10)\n1011 = Channel 11 (AN11)\n1100 = Unimplemented (1)\n1101 = Unimplemented (1)\n1110 = Unimplemented (1)\n1111 = Unimplemented (1)\nbit 1\nGO/DONE: A/D Conversion Status bit\nWhen ADON = 1 :\n1 = A/D conversion is in progress\n0 = A/D is Idle\nbit 0\nADON: A/D On bit\n1 = A/D Converter module is enabled\n0 = A/D Converter module is disabled",
    "REGISTER 20-1: ADCON0: A/D CONTROL REGISTER 0\nNote 1: Performing a conversion on unimplemented channels will return a floating input measurement.",
    "REGISTER 20-2:\nADCON1: A/D CONTROL REGISTER 1\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-q. U-0, 5 = R/W-q. U-0, 6 = R/W-q. U-0, 7 = R/W-q. -, 1 = -. -, 2 = VCFG1. -, 3 = VCFG0. -, 4 = PCFG3. -, 5 = PCFG2. -, 6 = PCFG1. -, 7 = PCFG0\nbit 7\nbit 0",
    "REGISTER 20-2:\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-6 Unimplemented: Read as ' 0 '\nbit 5\nVCFG1: Voltage Reference Configuration bit (VREF- source):\n1 = VREF- (AN2)\n0 = AVSS\nbit 4\nVCFG0: Voltage Reference Configuration bit (VREF+ source):\n1 = VREF+ (AN3)\n0 = AVDD\nbit 3-0\nPCFG<3:0>: A/D Port Configuration Control bits:",
    "REGISTER 20-2:\n0000, AN11 = A. 0000, AN10 = A. 0000, AN9 = A. 0000, AN8 = A. 0000, AN7 = A. 0000, AN6 = A. 0000, AN5 = A. 0000, AN4 = A. 0000, AN3 = A. 0000, AN2 = A. 0000, AN1 = A. 0000, AN0 = A. 0001, AN11 = A. 0001, AN10 = A. 0001, AN9 = A. 0001, AN8 = A. 0001, AN7 = A. 0001, AN6 = A. 0001, AN5 = A. 0001, AN4 = A. 0001, AN3 = A. 0001, AN2 = A. 0001, AN1 = A. 0001, AN0 = A. 0010, AN11 = A. 0010, AN10 = A. 0010, AN9 = A. 0010, AN8 = A. 0010, AN7 = A. 0010, AN6 = A. 0010, AN5 = A. 0010,",
    "REGISTER 20-2:\nAN4 = A. 0010, AN3 = A. 0010, AN2 = A. 0010, AN1 = A. 0010, AN0 = A. 0011, AN11 = A. 0011, AN10 = A. 0011, AN9 = A. 0011, AN8 = A. 0011, AN7 = A. 0011, AN6 = A. 0011, AN5 = A. 0011, AN4 = A. 0011, AN3 = A. 0011, AN2 = A. 0011, AN1 = A. 0011, AN0 = A. 0100, AN11 = D. 0100, AN10 = A. 0100, AN9 = A. 0100, AN8 = A. 0100, AN7 = A. 0100, AN6 = A. 0100, AN5 = A. 0100, AN4 = A. 0100, AN3 = A. 0100, AN2 = A. 0100, AN1 = A. 0100, AN0 = A. 0101, AN11 = D. 0101, AN10 = D. 0101, AN9 =",
    "REGISTER 20-2:\nA. 0101, AN8 = A. 0101, AN7 = A. 0101, AN6 = A. 0101, AN5 = A. 0101, AN4 = A. 0101, AN3 = A. 0101, AN2 = A. 0101, AN1 = A. 0101, AN0 = A. 0110, AN11 = D. 0110, AN10 = D. 0110, AN9 = D. 0110, AN8 = A. 0110, AN7 = A. 0110, AN6 = A. 0110, AN5 = A. 0110, AN4 = A. 0110, AN3 = A. 0110, AN2 = A. 0110, AN1 = A. 0110, AN0 = A. 0111, AN11 = D. 0111, AN10 = D. 0111, AN9 = D. 0111, AN8 = D. 0111, AN7 = A. 0111, AN6 = A. 0111, AN5 = A. 0111, AN4 = A. 0111, AN3 = A. 0111, AN2 = A.",
    "REGISTER 20-2:\n0111, AN1 = A. 0111, AN0 = A. 1000, AN11 = D. 1000, AN10 = D. 1000, AN9 = D. 1000, AN8 = D. 1000, AN7 = D. 1000, AN6 = A. 1000, AN5 = A. 1000, AN4 = A. 1000, AN3 = A. 1000, AN2 = A. 1000, AN1 = A. 1000, AN0 = A. 1001, AN11 = D. 1001, AN10 = D. 1001, AN9 = D. 1001, AN8 = D. 1001, AN7 = D. 1001, AN6 = D. 1001, AN5 = A. 1001, AN4 = A. 1001, AN3 = A. 1001, AN2 = A. 1001, AN1 = A. 1001, AN0 = A. 1010, AN11 = D. 1010, AN10 = D. 1010, AN9 = D. 1010, AN8 = D. 1010, AN7 = D. 1010, AN6 = D. 1010, AN5 =",
    "REGISTER 20-2:\nD. 1010, AN4 = A. 1010, AN3 = A. 1010, AN2 = A. 1010, AN1 = A. 1010, AN0 = A. 1011, AN11 = D. 1011, AN10 = D. 1011, AN9 = D. 1011, AN8 = D. 1011, AN7 = D. 1011, AN6 = D. 1011, AN5 = D. 1011, AN4 = D. 1011, AN3 = A. 1011, AN2 = A. 1011, AN1 = A. 1011, AN0 = A. 1100, AN11 = D. 1100, AN10 = D. 1100, AN9 = D. 1100, AN8 = D. 1100, AN7 = D. 1100, AN6 = D. 1100, AN5 = D. 1100, AN4 = D. 1100, AN3 = D. 1100, AN2 = A. 1100, AN1 = A. 1100, AN0 = A. 1101, AN11 = D. 1101, AN10 = D. 1101, AN9 = D. 1101, AN8",
    "REGISTER 20-2:\n= D. 1101, AN7 = D. 1101, AN6 = D. 1101, AN5 = D. 1101, AN4 = D. 1101, AN3 = D. 1101, AN2 = D. 1101, AN1 = A. 1101, AN0 = A. 1110, AN11 = D. 1110, AN10 = D. 1110, AN9 = D. 1110, AN8 = D. 1110, AN7 = D. 1110, AN6 = D. 1110, AN5 = D. 1110, AN4 = D. 1110, AN3 = D. 1110, AN2 = D. 1110, AN1 = D. 1110, AN0 = A. 1111, AN11 = D. 1111, AN10 = D. 1111, AN9 = D. 1111, AN8 = D. 1111, AN7 = D. 1111, AN6 = D. 1111, AN5 = D. 1111, AN4 = D. 1111, AN3 = D. 1111, AN2 = D. 1111, AN1 = D.",
    "REGISTER 20-2:\n1111, AN0 = D\nA = Analog input\nD = Digital I/O",
    "REGISTER 20-3: ADCON2: A/D CONTROL REGISTER 2\nR/W-0, 1 = U-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. ADFM, 1 = -. ADFM, 2 = ACQT2. ADFM, 3 = ACQT1. ADFM, 4 = ACQT0. ADFM, 5 = ADCS2. ADFM, 6 = ADCS1. ADFM, 7 = ADCS0\nbit 7\nbit 0",
    "REGISTER 20-3: ADCON2: A/D CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nADFM: A/D Result Format Select bit\n1 = Right justified\n0 = Left justified\nbit 6\nUnimplemented: Read as ' 0 '\nbit 5-3\nACQT<2:0>: A/D Acquisition Time Select bits\n111 = 20 TAD\n110 = 16 TAD\n101 = 12 TAD\n100 = 8 TAD\n011 = 6 TAD\n010 = 4 TAD\n001 = 2 TAD\n000 = 0 TAD (1)",
    "bit 2-0\nADCS<2:0>: A/D Conversion Clock Select bits\n111 = FRC (clock derived from A/D RC oscillator) (1)\n110 = FOSC/64\n101 = FOSC/16\n100 = FOSC/4\n011 = FRC (clock derived from A/D RC oscillator) (1)\n010 = FOSC/32\n001 = FOSC/8\n000 = FOSC/2\nNote 1: If the A/D FRC clock source is selected, a delay of one TCY (instruction cycle) is added before the A/D clock starts. This allows the SLEEP instruction to be executed before starting a conversion.",
    "PIC18F6310/6410/8310/8410\nThe analog reference voltage is software-selectable to either the device's positive and negative supply voltage (AVDD and AVSS), or the voltage level on the RA3/AN3/VREF+ and RA2/AN2/VREF- pins.\nA device Reset forces all registers to their Reset state. This forces the A/D module to be turned off and any conversion in progress is aborted.\nThe A/D Converter has a unique feature of being able to operate while the device is in Sleep mode. To operate in Sleep, the A/D conversion clock must be derived from the A/D's internal RC oscillator.\nThe output of the sample and hold is the input into the converter,  which  generates  the  result  via  successive approximation.",
    "PIC18F6310/6410/8310/8410\nEach port pin associated with the A/D Converter can be configured as an analog input or as a digital I/O. The ADRESH and ADRESL registers contain the result of the A/D conversion. When the A/D conversion is complete, the result is loaded into the ADRESH/ADRESL registers,  the  GO/DONE  bit  (ADCON0  register)  is cleared and the A/D Interrupt Flag bit, ADIF, is set. The block diagram of the A/D module is shown in Figure 20-1.\nThe  value  in  the  ADRESH:ADRESL  registers  is  not modified for a Power-on Reset. The ADRESH:ADRESL registers  will  contain  unknown  data  after  a  Power-on Reset.",
    "PIC18F6310/6410/8310/8410\nAfter the A/D module has been configured as desired, the  selected  channel  must  be  acquired  before  the conversion is started. The analog input channels must have  their  corresponding  TRIS  bits  selected  as  an input. To determine acquisition time, see Section 20.1 'A/D Acquisition Requirements' .  After this acquisition  time  has  elapsed,  the  A/D  conversion  can  be started.  An  acquisition  time  can  be  programmed  to occur between setting the GO/DONE bit and the actual start of the conversion.\nThe following steps should be followed to perform an A/D conversion:",
    "PIC18F6310/6410/8310/8410\n1. Configure the A/D module:\n\u00b7 Configure analog pins, voltage reference and digital I/O (ADCON1)\n\u00b7 Select A/D input channel (ADCON0)\n\u00b7 Select A/D acquisition time (ADCON2)\n\u00b7 Select A/D conversion clock (ADCON2)\n\u00b7 Turn on A/D module (ADCON0)\n2. Configure A/D interrupt (if desired):\n\u00b7 Clear ADIF bit\n\u00b7 Set ADIE bit\n\u00b7 Set GIE bit\n3. Wait the required acquisition time (if required).\n4. Start conversion:\n\u00b7 Set GO/DONE bit (ADCON0 register)\n5. Wait for A/D conversion to complete, by either:\n\u00b7 Polling for the GO/DONE bit to be cleared\nOR",
    "PIC18F6310/6410/8310/8410\n\u00b7 Waiting for the A/D interrupt\n6. Read A/D Result registers (ADRESH:ADRESL); clear bit, ADIF, if required.\n7. For next conversion, go to Step 1 or Step 2, as required.  The  A/D  conversion  time  per  bit  is defined  as  TAD.  A  minimum  wait  of  3  TAD  is required before the next acquisition starts.",
    "20.1 A/D Acquisition Requirements\nFor the A/D Converter to meet its specified accuracy, the charge holding capacitor (CHOLD) must be allowed to fully charge to the input channel voltage level. The analog  input  model  is  shown  in  Figure 20-3.  The source  impedance  (RS)  and  the  internal  sampling switch (RSS) impedance directly affect the time required to charge the capacitor, CHOLD. The sampling switch (RSS) impedance varies over the device voltage (VDD). The source impedance affects the offset voltage at the analog input (due to pin leakage current). The maximum  recommended  impedance  for  analog sources is 2.5 k \uf057 .  After the analog input channel is selected (changed), the channel must be sampled for at least the minimum acquisition time before starting a conversion.\nNote:\nWhen  the conversion is started, the holding capacitor is disconnected from the input pin.",
    "EQUATION 20-1:\nACQUISITION TIME\nTACQ, 1 = = Amplifier Settling Time + Holding Capacitor Charging Time + Temperature Coefficient. =, 1 = TAMP + TC + TCOFF",
    "EQUATION 20-2: A/D MINIMUM CHARGING TIME\nVHOLD or, 1 = =. VHOLD or, 2 = (V REF - (V REF /2048)) \u2022 (1 - e (-T C /C HOLD(R IC + RSS + RS)) ). TC, 1 = =. TC, 2 = -(C HOLD)(R IC + RSS + RS) ln(1/2048)",
    "EQUATION 20-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nTACQ = TAMP + TC + TCOFF\nTAMP = 0.2 \uf06d\ns\nTCOFF\n= (Temp - 25 C)(0.02 \uf0b0 \uf06d s/ \uf0b0 C)\n(85 C - 25 C)(0.02 \uf0b0 \uf0b0 \uf06d s/ \uf0b0 C)\n1.2 \uf06d s\nTemperature coefficient is only required for temperatures > 25 C. Below 25 C, TCOFF = 0 ms. \uf0b0 \uf0b0\nTC =\n-(CHOLD)(RIC + RSS + RS) ln(1/2047)\n-(25 pF) (1 k \uf057 + 2 k \uf057 + 2.5 k \uf057 ) ln(0.0004883) 1.05 \uf06d s\nTACQ =\n0.2 \uf06d s + 1 \uf06d s + 1.2 \uf06d s\n2.4 \uf06d s\nTo calculate the minimum acquisition time, Equation 20-1  may be  used.  This  equation  assumes that 1/2 LSb error is used (1024 steps for the A/D). The 1/2 LSb error is the maximum error allowed for the A/D to meet its specified resolution.\nExample 20-3 shows the calculation  of  the  minimum required  acquisition  time,  TACQ.  This  calculation  is based on the following application system assumptions:\nCHOLD",
    "EQUATION 20-3: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\n= 25 pF\nRs\n= 2.5 k \uf057\uf020\nConversion Error\n\uf0a3 1/2 LSb\nVDD\n= 5V \uf0ae Rss = 2 k \uf057\nTemperature\n= 85 C (system max.) \uf0b0",
    "20.2 Selecting and Configuring Automatic Acquisition Time\nThe  ADCON2  register  allows  the  user  to  select  an acquisition time that occurs each time the GO/DONE bit is set. It also gives users the option to use an automatically determined acquisition time. Acquisition time may be set with the ACQT<2:0> bits (ADCON2<5:3>), which provides a range of 2 to 20 TAD.\nWhen the GO/DONE bit is set, the A/D module continues  to  sample  the  input  for  the  selected  acquisition time, then automatically begins a conversion.\nSince the acquisition time is programmed, there may be no need to wait for an acquisition time between selecting a channel and setting the GO/DONE bit. Manual acquisition  is  selected  when  ACQT<2:0> = 000 .  When the GO/DONE bit is set, sampling is stopped and a conversion  begins.  The  user  is  responsible  for  ensuring  the required acquisition time has passed between selecting the desired input channel and setting the GO/DONE bit. This  option  is  also  the  default  Reset  state  of  the ACQT<2:0> bits and is compatible with devices that do not offer programmable acquisition times.",
    "20.3 Selecting the A/D Conversion Clock\nThe A/D conversion time per bit is defined as TAD. The A/D conversion requires 11 TAD per 10-bit conversion. The source of the A/D conversion clock is software-selectable. There are seven possible options for TAD:\n\u00b7 2 TOSC\n\u00b7 4 TOSC\n\u00b7 8 TOSC\n\u00b7 16 TOSC\n\u00b7 32 TOSC\n\u00b7 64 TOSC\n\u00b7 Internal RC Oscillator\nFor correct A/D conversions, the A/D conversion clock (TAD) must be as short as possible, but greater than the minimum TAD (approximately 2 \uf06d s, see Parameter 130 for more information).\nIn either case, when the conversion is completed, the GO/DONE bit is cleared, the ADIF flag is set and the A/D  begins  sampling  the  currently  selected  channel again. If  an  acquisition  time  is  programmed,  there  is nothing to indicate if the acquisition time has ended, or if the conversion has begun.\nTable 20-1 shows the resultant TAD times derived from the  device  operating  frequencies  and  the  A/D  clock source selected.",
    "TABLE 20-1: TAD vs. DEVICE OPERATING FREQUENCIES\n2 T OSC, AD Clock Source (T AD).ADCS<2:0> = 000. 2 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 1.25 MHz. 2 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 666 kHz. 4 T OSC, AD Clock Source (T AD).ADCS<2:0> = 100. 4 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 2.50 MHz. 4 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 1.33 MHz. 8 T OSC, AD Clock Source (T AD).ADCS<2:0> = 001. 8 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 5.00 MHz. 8 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 2.66 MHz. 16 T OSC, AD Clock Source (T",
    "TABLE 20-1: TAD vs. DEVICE OPERATING FREQUENCIES\nAD).ADCS<2:0> = 101. 16 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 10.0 MHz. 16 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 5.33 MHz. 32 T OSC, AD Clock Source (T AD).ADCS<2:0> = 010. 32 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 20.0 MHz. 32 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 10.65 MHz. 64 T OSC, AD Clock Source (T AD).ADCS<2:0> = 110. 64 T OSC, Maximum Device Frequency.PIC18F6X10/8X10 = 40.0 MHz. 64 T OSC, Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 21.33 MHz. RC (3), AD Clock Source (T AD).ADCS<2:0> = x11. RC",
    "TABLE 20-1: TAD vs. DEVICE OPERATING FREQUENCIES\n(3), Maximum Device Frequency.PIC18F6X10/8X10 = 1.00 MHz (1). RC (3), Maximum Device Frequency.PIC18LF6X10/8X10 (4) = 1.00 MHz (2)\nNote\n1: The RC source has a typical TAD time of 4 \uf06d s.\n2: The RC source has a typical TAD time of 6 \uf06d s.\n3: For device frequencies above 1 MHz, the device must be in Sleep for the entire conversion or the A/D accuracy may be out of specification.\n4: Low-power (PIC18LFXXXX) devices only.",
    "20.5 Configuring Analog Port Pins\nThe selection of the automatic acquisition time and A/D conversion  clock  is  determined  in  part  by  the  clock source  and  frequency  while  in  a  power-managed mode.\nIf the A/D is expected to operate while the device is in a power-managed mode, the ACQT<2:0> and ADCS<2:0>  bits  in  ADCON2  should  be  updated  in accordance with the  clock  source  to  be  used  in  that mode. After entering the mode, an A/D acquisition or conversion may be started. Once started, the device should  continue  to  be  clocked  by  the  same  clock source until the conversion has been completed.\nIf  desired,  the  device  may  be  placed  into  the  corresponding Idle mode during the conversion. If the device clock frequency is less than 1 MHz, the A/D RC clock source should be selected.",
    "20.5 Configuring Analog Port Pins\nOperation  in  the  Sleep  mode  requires  the  A/D  FRC clock  to  be  selected.  If  bits,  ACQT<2:0>,  are  set  to ' 000 ' and a conversion is started, the conversion will be delayed one instruction cycle to allow execution of the SLEEP instruction and entry to Sleep mode. The IDLEN bit  (OSCCON<7>)  must  have  already  been  cleared prior to starting the conversion.\nThe ADCON1, TRISA and TRISF registers all configure the A/D port pins. The port pins needed as analog inputs must have their corresponding TRIS bits set (input). If the TRIS bit is cleared (output), the digital output level (VOH or VOL) will be converted.\nThe A/D operation is independent of the state of the CHS<3:0> bits and the TRIS bits.",
    "20.5 Configuring Analog Port Pins\nNote 1: When reading the PORT register, all pins configured as analog input channels will read as cleared (a low level). Pins configured  as  digital  inputs  will  convert  an analog input. Analog levels on a digitally configured input will be accurately converted.\n2: Analog  levels  on  any  pin  defined  as  a digital  input  may  cause  the  digital  input buffer  to  consume  current  out  of  the device's specification limits.",
    "20.6 A/D Conversions\nFigure 20-4 shows the operation of the A/D Converter after the GO bit has been set and the ACQT<2:0> bits are cleared. A conversion is started after the following instruction to allow entry into Sleep mode before the conversion begins.\nFigure 20-5 shows the operation of the A/D Converter after the GO/DONE  bit has been set and the ACQT<2:0> bits are set to ' 010 ', and selecting a 4 TAD acquisition time before the conversion starts.\nAfter  the  A/D  conversion  is  completed  or  aborted,  a 2 TAD wait is required before the next acquisition can be started.  After  this  wait,  acquisition  on  the  selected channel is automatically started.\nNote:, 1 = The GO/DONE bit should NOT be set in the same instruction that turns on the A/D.",
    "20.7 Discharge\nClearing  the  GO/DONE  bit  during  a  conversion  will abort the current conversion. The A/D Result register pair will NOT be updated with the partially completed A/D conversion sample. This means the ADRESH:ADRESL  registers  will  continue  to  contain the value of the last completed conversion (or the last value written to the ADRESH:ADRESL registers).\nThe discharge phase is used to initialize the value of the  capacitor  array.  The  array  is  discharged  before every  sample.  This  feature  helps  to  optimize  the unity-gain  amplifier  as  the  circuit  always  needs  to charge the capacitor array, rather than charge/discharge based on previous measure values.\nFIGURE 20-4: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 000 , TACQ = 0 )\nFIGURE 20-5: A/D CONVERSION TAD CYCLES   (ACQT<2:0> = 010 , TACQ = 4 TAD)",
    "20.8 Use of the CCP2 Trigger\nAn A/D conversion can be started by the 'Special Event Trigger'  of  the  CCP2  module.  This  requires  that  the CCP2M<3:0> bits (CCP2CON<3:0>) be programmed as ' 1011 ' and that the A/D module is enabled (ADON bit is set). When the trigger occurs, the GO/DONE bit will be set, starting the A/D acquisition and conversion, and the Timer1 (or Timer3) counter will be reset to zero. Timer1 (or Timer3) is reset to automatically repeat the A/D acquisition period with minimal software overhead\n(moving  ADRESH/ADRESL  to  the  desired  location). The appropriate analog input channel must be selected and the minimum acquisition period is either timed by the user, or an appropriate TACQ time selected before the  'Special  Event  Trigger'  sets  the  GO/DONE  bit (starts a conversion).\nIf the A/D module is not enabled (ADON is cleared), the 'Special  Event  Trigger'  will  be  ignored  by  the  A/D module,  but  will  still  reset  the  Timer1  (or  Timer3) counter.",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RC1IF. PIR1, Bit 4 = TX1IF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Reset Values on Page = 65. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RC1IE. PIE1, Bit 4 = TX1IE. PIE1, Bit 3 =",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nSSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Reset Values on Page = 65. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RC1IP. IPR1, Bit 4 = TX1IP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Reset Values on Page = 65. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nValues on Page = 65. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 65. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on Page = 65. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nResult Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Reset Values on Page = 64. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte. ADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Reset Values on Page = 64. ADCON0, Bit 7 = -. ADCON0, Bit 6 = -. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2.",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Reset Values on Page = 64. ADCON1, Bit 7 = -. ADCON1, Bit 6 = -. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Reset Values on Page = 64. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = -. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0.",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nADCON2, Reset Values on Page = 64. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Reset Values on Page = 66. TRISA, Bit 7 = TRISA7 (1) TRISA6 (1). TRISA, Bit 6 = TRISA7 (1) TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Reset Values on Page = 66. PORTF, Bit 7 = RF7. PORTF, Bit 6 = RF6. PORTF, Bit 5 =",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nRF5. PORTF, Bit 4 = RF4. PORTF, Bit 3 = RF3. PORTF, Bit 2 = RF2. PORTF, Bit 1 = RF1. PORTF, Bit 0 = RF0. PORTF, Reset Values on Page = 66. TRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register. TRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 = PORTF Data Direction Register. TRISF, Reset Values on Page = 66. LATF, Bit 7 = LATF Output Latch Register. LATF, Bit 6 = LATF Output Latch Register. LATF, Bit 5 = LATF Output Latch Register. LATF, Bit 4 = LATF Output Latch Register. LATF, Bit 3 = LATF Output Latch Register. LATF, Bit 2 = LATF Output Latch Register. LATF, Bit 1 = LATF",
    "TABLE 20-2: REGISTERS ASSOCIATED WITH A/D OPERATION\nOutput Latch Register. LATF, Bit 0 = LATF Output Latch Register. LATF, Reset Values on Page = 66\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used for A/D conversion.\nNote 1:\nThese pins may be configured as port pins depending on the oscillator mode selected.",
    "21.0 COMPARATOR MODULE\nThe analog comparator module contains two comparators  that  can  be  configured  in  a  variety  of ways.  The  inputs  can  be  selected  from  the  analog inputs multiplexed with pins RF3 through RF6, as well as  the  on-chip  voltage  reference  (see Section 22.0 'Comparator Voltage Reference Module' ). The digital outputs (normal or inverted) are available at the pin level and can also be read through the control register.\nThe CMCON  register (Register 21-1) selects the comparator input and output configuration. Block diagrams of the various comparator configurations are shown in Figure 21-1.",
    "REGISTER 21-1: CMCON: COMPARATOR CONTROL REGISTER\nR-0, 1 = R-0. R-0, 2 = R/W-0. R-0, 3 = R/W-0. R-0, 4 = R/W-0. R-0, 5 = R/W-1. R-0, 6 = R/W-1. R-0, 7 = R/W-1. C2OUT, 1 = C1OUT. C2OUT, 2 = C2INV. C2OUT, 3 = C1INV. C2OUT, 4 = CIS. C2OUT, 5 = CM2. C2OUT, 6 = CM1. C2OUT, 7 = CM0\nbit 7\nbit 0",
    "REGISTER 21-1: CMCON: COMPARATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nC2OUT : Comparator 2 Output bit\nWhen C2INV = 0 :\n1 = C2 VIN+ > C2 VIN-\n0 = C2 VIN+ < C2 VIN-\nWhen C2INV = 1 :\n1 = C2 VIN+ < C2 VIN-\n0 = C2 VIN+ > C2 VIN-",
    "bit 6\nC1OUT : Comparator 1 Output bit\nWhen C1INV = 0 :\n1 = C1 VIN+ > C1 VIN-\n0 = C1 VIN+ < C1 VIN-\nWhen C1INV = 1 :\n1 = C1 VIN+ < C1 VIN-\n0 = C1 VIN+ > C1 VIN- )\nbit 5\nC2INV : Comparator 2 Output Inversion bit\n1 = C2 output is inverted\n0 = C2 output is not inverted",
    "bit 4\nC1INV : Comparator 1 Output Inversion bit\n1 = C1 output is inverted\n0 = C1 output is not inverted",
    "bit 3\nCIS : Comparator Input Switch bit\nWhen CM<2:0> = 110 :\n1 = C1 VIN- connects to RF5/AN10\nC2 VIN- connects to RF3/AN8\n0 = C1 VIN- connects to RF6/AN11\nC2 VIN- connects to RF4/AN9",
    "bit 2-0\nCM<2:0> : Comparator Mode bits\nFigure 21-1 shows the Comparator modes and the CM<2:0> bit settings.",
    "21.1 Comparator Configuration\nThere are eight modes of operation for the comparators,  shown  in  Figure 21-1.  Bits,  CM<2:0>,  of  the CMCON register are used to select these modes. The TRISF  register  controls  the data direction of the comparator  pins  for  each  mode.  If  the  Comparator mode is changed, the comparator output level may not be valid for the specified mode change delay shown in Section 27.0 'Electrical Characteristics' .\nNote:\nComparator interrupts should be disabled during a Comparator mode change; otherwise, a false interrupt may occur.",
    "21.2 Comparator Operation\nA single comparator is shown in Figure 21-2, along with the  relationship  between  the  analog  input  levels  and the digital output. When the analog input at VIN+ is less than the analog input, VIN-, the output of the comparator is a digital low level. When the analog input at VIN+ is greater than the analog input, VIN-, the output of  the  comparator is a digital high level.  The shaded areas of the output of the comparator, in Figure 21-2, represent  the  uncertainty  due  to  input  offsets  and response time.",
    "21.3 Comparator Reference\nDepending on the Comparator Operating mode, either an external or internal voltage reference may be used. The analog signal present at VIN- is compared to the signal at VIN+ and the digital output of the comparator is adjusted accordingly (Figure 21-2).\nFIGURE 21-2: SINGLE COMPARATOR",
    "21.3.1 EXTERNAL REFERENCE SIGNAL\nWhen  external voltage references are used, the comparator module can be configured to have the comparators operate from the same, or different reference sources. However, threshold detector applications may require the same reference. The reference signal must be between VSS and VDD and can be applied to either pin of the comparator(s).",
    "21.3.2 INTERNAL REFERENCE SIGNAL\nThe comparator module also allows the selection of an internally  generated voltage reference from the comparator  voltage  reference  module.  This  module  is described in more detail in Section 22.0 'Comparator Voltage Reference Module' .\nThe  internal  reference  is  only  available  in  the  mode where four inputs are multiplexed to two comparators (CM<2:0> = 110 ).  In  this  mode,  the  internal  voltage reference is applied to the VIN+ pin of both comparators.",
    "21.4 Comparator Response Time\nResponse time is the minimum time, after selecting a new  reference  voltage  or  input  source,  before  the comparator output has a valid level. If the internal reference is changed, the maximum delay of the internal voltage reference must be considered when using the comparator outputs. Otherwise, the maximum delay of the  comparators  should  be  used  (see Section 27.0 'Electrical Characteristics' ).",
    "21.5 Comparator Outputs\nThe comparator outputs are read through the CMCON register.  These  bits  are  read-only.  The  comparator outputs may also be directly output to the RF2 and RF1 I/O pins. When enabled, multiplexors in the output path of the RF2 and RF1 pins will switch and the output of each  pin  will  be  the  unsynchronized  output  of  the comparator. The uncertainty of each of the comparators is related to the input offset voltage and the response time given in the specifications. Figure 21-3 shows the comparator output block diagram.\nThe TRISF bits will still function as an output enable/ disable for the RF2 and RF1 pins while in this mode.\nThe polarity of the comparator outputs can be changed using the C2INV and C1INV bits (CMCON<5:4>).\nNote 1: When reading the PORT register, all pins configured as analog inputs will read as a ' 0 '.  Pins  configured as digital inputs  will convert an analog input according to the Schmitt Trigger input specification.\n2: Analog levels on any pin defined as a digital  input  may  cause  the  input  buffer  to consume more current than is specified.",
    "21.6 Comparator Interrupts\nThe comparator interrupt flag is set whenever there is a  change  in  the  output  value  of  either  comparator. Software  will  need  to  maintain  information  about  the status of the output bits, as read from CMCON<7:6>, to determine the actual change that occurred. The CMIF bit  (PIR2<6>)  is  the  Comparator  Interrupt  Flag.  The CMIF bit must be reset by clearing it. Since it is also possible  to  write  a  ' 1 ' to  this  register,  a  simulated interrupt may be initiated.",
    "21.7 Comparator Operation During Sleep\nBoth the CMIE  bit (PIE2<6>)  and  the PEIE  bit (INTCON<6>) must be set to enable the interrupt. In addition, the GIE bit (INTCON<7>) must also be set. If any of these bits are clear, the interrupt is not enabled, though  the  CMIF  bit  will  still  be  set  if  an  interrupt condition occurs.",
    "Note:\nIf a change in the CMCON  register (C1OUT or C2OUT) should occur when a read operation is being executed (start of the Q2 cycle), then the CMIF (PIR registers) interrupt flag may not get set.\nThe user, in the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  CMCON  will  end  the mismatch condition.\nb) Clear flag bit, CMIF.\nA mismatch condition will continue to set flag bit, CMIF. Reading CMCON will end the mismatch condition and allow flag bit, CMIF, to be cleared.",
    "Note:\nWhen a comparator is active and the device is placed in Sleep mode, the comparator remains active and the interrupt  is  functional,  if  enabled.  This  interrupt  will wake-up the device from Sleep mode, when enabled. While  the  comparator  is  powered  up,  higher  Sleep currents than shown in the power-down current specification  will  occur.  Each  operational  comparator will consume  additional  current,  as  shown  in  the comparator specifications. To minimize power consumption while in Sleep mode, turn off the comparators (CM<2:0> = 111 ) before entering Sleep. If the device wakes up from Sleep, the contents of the CMCON register are not affected.",
    "21.8 Effects of a Reset\nA device Reset forces the CMCON register to its Reset state,  causing  the  comparator  module  to  be  in  the Comparator Reset mode (CM<2:0> = 000) . This ensures  that  all  potential  inputs  are  analog  inputs. Device  current  is  minimized  when  analog  inputs  are present at Reset time. The comparators are powered down during the Reset interval.",
    "21.9 Analog Input Connection Considerations\nA  simplified  circuit  for  an  analog  input  is  shown  in Figure 21-4. Since the analog pins are connected to a digital output, they have reverse biased diodes to VDD and VSS. The analog input, therefore, must be between VSS and VDD. If the input voltage deviates  from this range by more than 0.6V in either direction, one of the diodes is forward biased and a latch-up condition may occur.  A  maximum  source  impedance  of  10  k \uf057 is recommended  for  the  analog  sources.  Any  external component connected to an analog input pin, such as a  capacitor  or  a  Zener  diode,  should  have  very  little leakage current.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on Page = 65. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on Page = 65. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 =",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nTMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = -. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 65. PIE2, Bit 7 = OCSFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 65. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 =",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Reset Values on Page = 65. PORTF, Bit 7 = RF7. PORTF, Bit 6 = RF6. PORTF, Bit 5 = RF5. PORTF, Bit 4 = RF4. PORTF, Bit 3 = RF3. PORTF, Bit 2 = RF2. PORTF, Bit 1 = RF1. PORTF, Bit 0 = RF0. PORTF, Reset Values on Page = 66. LATF, Bit 7 = LATF Output Latch Register. LATF, Bit 6 = LATF Output Latch Register. LATF, Bit 5 = LATF Output Latch Register. LATF, Bit 4 = LATF Output Latch Register. LATF, Bit 3 = LATF Output Latch Register. LATF, Bit 2 = LATF Output Latch Register. LATF, Bit 1 = LATF Output Latch",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nRegister. LATF, Bit 0 = LATF Output Latch Register. LATF, Reset Values on Page = 66. TRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register. TRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 = PORTF Data Direction Register. TRISF, Reset Values on Page = 66\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are unused by the comparator module.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "22.0 COMPARATOR VOLTAGE REFERENCE MODULE\nThe comparator voltage reference is a 16-tap resistor ladder  network  that  provides  a  selectable  reference voltage. Although its primary purpose is to provide a reference for the analog comparators, it may also be used independently of them.\nA block diagram is of the module shown in Figure 22-1. The resistor ladder is segmented to provide two ranges of  CVREF  values  and  has  a  power-down  function  to conserve power when the reference is not being used. The module's supply reference can be provided from either device VDD/VSS, or an external voltage reference.",
    "22.1 Configuring the Comparator Voltage Reference\nvoltage, each with 16 distinct levels. The range to be used is selected by the CVRR bit (CVRCON<5>). The primary difference between the ranges is the size of the steps selected by the CVREF selection bits (CVR<3:0>), with one range offering finer resolution. The  equations  used  to  calculate  the  output  of  the Comparator Voltage Reference are as follows:\nIf CVRR = 1 :\nCVREF = ((CVR<3:0>)/24) x CVRSRC\nIf CVRR = 0 :\nCVREF = (CVDD x 1/4) + (((CVR<3:0>)/32) x CVRSRC)\nThe  comparator  reference  supply  voltage  can  come from either VDD and VSS, or the external VREF+ and VREF-  that  are  multiplexed  with  RA2  and  RA3.  The voltage source is selected by the CVRSS bit (CVRCON<4>).\nThe voltage reference module is controlled through the CVRCON  register  (Register 22-1).  The  Comparator Voltage  Reference  provides  two  ranges  of  output",
    "22.1 Configuring the Comparator Voltage Reference\nThe settling time of the comparator voltage reference must be considered when changing the CVREF output  (see  Table 27-3  in Section 27.0  'Electrical Characteristics' ).",
    "REGISTER 22-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nCVREN, R/W-0 = CVROE (1). CVREN, R/W-0 = CVRR. CVREN, R/W-0 = CVRSS. CVREN, R/W-0 = CVR3. CVREN, R/W-0 = CVR2. CVREN, R/W-0 = CVR1. CVREN, R/W-0 = CVR0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 22-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nCVREN : Comparator Voltage Reference Enable bit\n1 = CVREF circuit powered on\n0 = CVREF circuit powered down\nbit 6\nCVROE : Comparator VREF Output Enable bit (1)\n1 = CVREF voltage level is also output on the RF5/AN10/CVREF pin\n0 = CVREF voltage is disconnected from the RF5/AN10/CVREF pin\nbit 5\nCVRR : Comparator VREF Range Selection bit",
    "REGISTER 22-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\n1 = 0 CVRSRC to 0.667 CVRSRC, with CVRSRC/24 step size\n0 = 0.25 CVRSRC to 0.75 CVRSRC, with CVRSRC/32 step size\nbit 4\nCVRSS : Comparator VREF Source Selection bit\n1 = Comparator reference source, CVRSRC = (VREF+) - (VREF-)\n0 = Comparator reference source, CVRSRC = VDD - VSS\nbit 3-0\nCVR<3:0>: Comparator VREF Value Selection bits (0 \uf0a3 (CVR<3:0>) \uf0a3 15)\nWhen CVRR = 1 :\nCVREF = ((CVR<3:0>)/24)   (CVRSRC) \uf0b7\nWhen CVRR = 0 :\nCVREF = (CVRSRC/4) + ((CVR<3:0>)/32)   (CVRSRC) \uf0b7",
    "REGISTER 22-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nNote 1: CVROE overrides the TRISF<5> bit setting if enabled for output; RF5 must also be configured as an input by setting TRISF<5> to ' 1 '.",
    "22.4 Effects of a Reset\nThe full range of voltage reference cannot be realized due to the construction of the module. The transistors on the top and bottom of the resistor ladder network (Figure 22-1) keep CVREF from approaching the reference  source  rails.  The  voltage  reference  is  derived from the reference source; therefore, the CVREF output changes  with  fluctuations  in  that  source.  The  tested absolute  accuracy  of  the  voltage  reference  can  be found in Section 27.0 'Electrical Characteristics' .",
    "22.3 Operation During Sleep\nWhen  the  device  wakes  up  from  Sleep,  through  an interrupt or a Watchdog Timer time-out, the contents of the  CVRCON  register  are  not  affected.  To  minimize current consumption  in Sleep mode,  the  voltage reference should be disabled.\nA  device  Reset  disables  the  voltage  reference  by clearing  bit,  CVREN  (CVRCON<7>).  This  Reset  also disconnects the reference from the RA2 pin by clearing bit, CVROE (CVRCON<6>), and selects the high-voltage range by clearing bit, CVRR (CVRCON<5>). The CVR value select bits are also cleared.",
    "22.5 Connection Considerations\nThe voltage reference module operates independently of the comparator module. The output of the reference generator  may  be  connected  to  the  RF5  pin  if  the TRISF<5>  bit  and  the  CVROE  bit  are  both  set. Enabling the voltage reference output onto the RF5 pin, with  an  input  signal  present,  will  increase  current consumption. Connecting RF5 as a digital output with CVRSS enabled will also increase current consumption.\nThe RF5 pin can be used as a simple D/A output with limited drive capability. Due to the limited current drive capability, a buffer must be used on the voltage reference output for external connections to VREF. Figure 22-2 shows an example buffering technique.",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH THE COMPARATOR VOLTAGE REFERENCE\nCVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = CVRSS. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Reset Values on Page = 65. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Reset Values on Page = 65. TRISF, Bit 7 = PORTF Data Direction Register. TRISF, Bit 6 = PORTF Data Direction Register. TRISF, Bit 5 = PORTF Data Direction Register. TRISF, Bit 4 = PORTF Data Direction Register. TRISF, Bit 3 = PORTF Data Direction Register.",
    "TABLE 22-1: REGISTERS ASSOCIATED WITH THE COMPARATOR VOLTAGE REFERENCE\nTRISF, Bit 2 = PORTF Data Direction Register. TRISF, Bit 1 = PORTF Data Direction Register. TRISF, Bit 0 = PORTF Data Direction Register. TRISF, Reset Values on Page = 66\nLegend: Shaded cells are not used with the comparator voltage reference.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "23.0 HIGH/LOW-VOLTAGE DETECT (HLVD)\nPIC18F6310/6410/8310/8410 devices have a High/Low-Voltage  Detect  module  (HLVD).  This  is  a programmable  circuit  that  allows  the  user  to  specify both  a  device  voltage  trip  point  and  the  direction  of change from that point. If the device experiences an excursion past the trip point in that direction, an interrupt flag is set. If the interrupt is enabled, the program execution  will  branch  to  the  interrupt  vector  address and the software can then respond to the interrupt.\nThe High/Low-Voltage Detect Control register (Register 23-1) completely controls the operation of the HLVD module. This allows the circuitry to be 'turned off' by the user under software control, which minimizes the current consumption for the device.\nThe block diagram for the HLVD module is shown in Figure 23-1.",
    "REGISTER 23-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nVDIRMAG, U-0 = -. VDIRMAG, R-0 = IRVST. VDIRMAG, R/W-0 = HLVDEN. VDIRMAG, R/W-0 = HLVDL3 (1). VDIRMAG, R/W-1 = HLVDL2 (1). VDIRMAG, R/W-0 = HLVDL1 (1). VDIRMAG, R/W-1 = HLVDL0 (1). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 23-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at POR, 1 = '1' = Bit is set. -n = Value at POR, 2 = '0' = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nVDIRMAG: Voltage Direction Magnitude Select bit\n1 = Event occurs when voltage equals or exceeds trip point (HLVDL<3:0>)\n0 = Event occurs when voltage equals or falls below trip point (HLVDL<3:0>)\nbit 6 Unimplemented: Read as ' 0 '\nbit 5\nIRVST: Internal Reference Voltage Stable Flag bit",
    "REGISTER 23-1: HLVDCON: HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER\n1 = Indicates that the voltage detect logic will generate the interrupt flag at the specified voltage range 0 = Indicates that the voltage detect logic will not generate the interrupt flag at the specified voltage\nrange and the HLVD interrupt should not be enabled\nbit 4\nHLVDEN: High/Low-Voltage Detect Power Enable bit\n1 = HLVD is enabled\n0 = HLVD is disabled\nbit 3-0\nHLVDL<3:0>: Voltage Detection Limit bits (1)\n1110 = Maximum setting\n\u2022\n\u2022\n\u2022\n0001 = Minimum setting\nNote 1: HLVDL<3:0> modes that result in a trip point, below the valid operating voltage of the device, are not tested.",
    "PIC18F6310/6410/8310/8410\nThe  module  is  enabled  by  setting  the  HLVDEN  bit. Each  time  that  the  HLVD  module  is  enabled,  the circuitry requires some time to stabilize. The IRVST bit is a read-only bit and is used to indicate when the circuit is  stable.  The module can only generate an interrupt after the circuit is stable and IRVST is set.\nThe VDIRMAG bit determines the overall operation of the module. When VDIRMAG is cleared, the module monitors for drops in VDD below a predetermined set point. When the bit is set, the module monitors for rises in VDD above the set point.",
    "23.1 Operation\nWhen the HLVD module is enabled, a comparator uses an  internally  generated  reference  voltage  as  the  set point.  The  set  point  is  compared  with  the  trip  point, where each node in the resistor divider represents a trip point voltage. The 'trip point' voltage is the voltage level at which the device detects a high or low-voltage event, depending on the configuration of the module. When the supply voltage is equal to the trip point, the voltage tapped off of the resistor array is equal to the internal  reference  voltage  generated  by  the  voltage reference module. The comparator then generates an interrupt signal by setting the HLVDIF bit.\nThe trip point voltage is software programmable to any one  of 16  values. The  trip point is selected  by programming the HLVDL<3:0> bits (HLVDCON<3:0>).",
    "23.1 Operation\nThe HLVD module has an additional feature that allows the user to supply the trip voltage to the module from an external  source.  This  mode  is  enabled  when  bits, HLVDL<3:0>, are set to ' 1111 '. In this state, the comparator  input  is  multiplexed  from  the  external  input  pin, HLVDIN. This  gives  users  flexibility  because  it  allows them to configure the High/Low-Voltage Detect interrupt to occur at any voltage in the valid operating range.\nFIGURE 23-1: HLVD MODULE BLOCK DIAGRAM (WITH EXTERNAL INPUT)",
    "23.2 HLVD Setup\nThe following  steps  are  needed  to  set  up  the  HLVD module:\n1. Disable the module by clearing the HLVDEN bit (HLVDCON<4>).\n2. Write  the  value  to  the  HLVDL<3:0>  bits  that select the desired HLVD trip point.\n3. Set  the  VDIRMAG  bit  to  detect  high  voltage (VDIRMAG = 1 ) or low voltage (VDIRMAG = 0 ).\n4. Enable the HLVD module by setting the HLVDEN bit.\n5. Clear the HLVD interrupt flag (PIR2<2>), which may have been set from a previous interrupt.\n6. Enable  the  HLVD  interrupt,  if  interrupts  are desired,  by  setting  the  HLVDIE  and  GIE  bits (PIE<2> and INTCON<7>). An interrupt will not be generated until the IRVST bit is set.",
    "23.3 Current Consumption\nWhen the module is enabled, the HLVD comparator and voltage divider are enabled and will consume static current.  The total  current  consumption,  when enabled, is specified in electrical specification Parameter D022B.\nDepending on the application, the HLVD module does not need to be operating constantly. To decrease the current  requirements,  the  HLVD  circuitry  may  only need to be enabled for short periods where the voltage is  checked. After doing the check, the HLVD module may be disabled.",
    "23.4 HLVD Start-up Time\nThe  internal  reference  voltage  of  the  HLVD  module, specified in electrical specification Parameter D420B, may be  used  by  other  internal  circuitry,  such  as  the Programmable Brown-out Reset. If the HLVD or other circuits  using  the  voltage  reference  are  disabled  to lower the device's current consumption, the reference voltage circuit will require time to become stable before a low or high-voltage condition can be reliably detected. This start-up time, TIRVST, is an interval that is independent of device clock speed. It is specified in electrical specification Parameter 36 (Table 27-12).\nThe HLVD interrupt flag is not enabled until TIRVST has expired and a stable reference voltage is reached. For this reason, brief excursions beyond the set point may not be detected during this interval. Refer to Figure 23-2 or Figure 23-3.",
    "23.5 Applications\nIn many applications, the ability to detect a drop below, or rise above, a particular threshold is desirable. For example,  the  HLVD  module  could  be  periodically enabled to detect USB attach or detach. This assumes the device is powered by a lower voltage source than the  Universal  Serial  Bus  (USB)  when  detached.  An attach would indicate a High-Voltage Detect from, for example,  3.3V  to  5V  (the  voltage  on  USB)  and  vice versa for a detach. This feature could save a design a few extra components and an attach signal (input pin).\nFIGURE 23-4: TYPICAL LOW-VOLTAGE DETECT APPLICATION\nFor general battery applications, Figure 23-4 shows a possible voltage curve. Over time, the device voltage decreases. When the device voltage reaches voltage, VA, the HLVD logic generates an interrupt at time, TA. The  interrupt  could  cause  the  execution  of  an  ISR, which would allow the application to perform 'housekeeping  tasks'  and  perform  a  controlled  shutdown before  the  device  voltage  exits  the  valid  operating range at TB. The HLVD thus, would give the application a time window, represented by the difference between TA and TB, to safely exit.",
    "23.7 Effects of a Reset\nWhen enabled, the HLVD circuitry continues to operate during  Sleep.  If  the  device  voltage  crosses  the  trip point,  the  HLVDIF  bit  will  be  set  and  the  device  will wake-up  from  Sleep.  Device  execution  will  continue from  the  interrupt  vector  address  if  interrupts  have been globally enabled.\nA device Reset forces all registers to their Reset state. This forces the HLVD module to be turned off.",
    "TABLE 23-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nHLVDCON, Bit 7 = VDIRMAG. HLVDCON, Bit 6 = -. HLVDCON, Bit 5 = IRVST. HLVDCON, Bit 4 = HLVDEN. HLVDCON, Bit 3 = HLVDL3. HLVDCON, Bit 2 = HLVDL2. HLVDCON, Bit 1 = HLVDL1. HLVDCON, Bit 0 = HLVDL0. HLVDCON, Reset Values on Page = 64. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Reset Values on Page = 63. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 =",
    "TABLE 23-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\n-. PIR2, Bit 4 = -. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = HLVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Reset Values on Page = 65. PIE2, Bit 7 = OCSFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = -. PIE2, Bit 4 = -. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = HLVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Reset Values on Page = 65. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = -. IPR2, Bit 4 = -. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = HLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 =",
    "TABLE 23-1: REGISTERS ASSOCIATED WITH HIGH/LOW-VOLTAGE DETECT MODULE\nCCP2IP. IPR2, Reset Values on Page = 65\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are unused by the HLVD module.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "24.0 SPECIAL FEATURES OF THE CPU\nA complete discussion of device Resets and interrupts is available in previous sections of this data sheet.\nPIC18F6310/6410/8310/8410 devices include several features intended to maximize reliability and minimize cost through elimination of external components. These are:\n\u00b7 Oscillator Selection\n\u00b7 Resets:\n-Power-on Reset (POR)\n-Power-up Timer (PWRT)\n-Oscillator Start-up Timer (OST)\n-Brown-out Reset (BOR)\n\u00b7 Interrupts\n\u00b7 Watchdog Timer (WDT)\n\u00b7 Fail-Safe Clock Monitor\n\u00b7 Two-Speed Start-up\n\u00b7 Code Protection\n\u00b7 ID Locations\n\u00b7 In-Circuit Serial Programming (ICSP)\nThe  oscillator  can  be  configured  for  the  application depending on frequency, power, accuracy and cost. All of  the  options  are  discussed  in  detail  in Section 3.0 'Oscillator Configurations' .",
    "24.0 SPECIAL FEATURES OF THE CPU\nIn addition to their Power-up and Oscillator Start-up Timers provided for Resets, PIC18F6310/6410/8310/8410 devices have a Watchdog  Timer, which is either permanently  enabled  via  the  Configuration  bits,  or software controlled (if configured as disabled).\nThe inclusion of an internal RC oscillator also provides the  additional  benefits  of  a  Fail-Safe  Clock  Monitor (FSCM) and Two-Speed Start-up. FSCM provides for background  monitoring  of  the  peripheral  clock  and automatic switchover in the event of its failure. Two-Speed  Start-up  enables  code  to  be  executed almost immediately on start-up, while the primary clock source completes its start-up delays.\nAll  of  these  features  are  enabled  and  configured  by setting the appropriate Configuration register bits.",
    "24.1 Configuration Bits\nThe Configuration bits  can  be  programmed  (read  as ' 0 ') or left unprogrammed (read as ' 1 '), to select various device configurations. These bits are mapped, starting at program memory location, 300000h.\nThe user will note that address, 300000h, is beyond the user program memory space. In fact, it belongs to the configuration memory space (300000h-3FFFFFh), which can only be accessed using table reads.",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\n300001h, File Name = CONFIG1H. 300001h, Bit 7 = IESO. 300001h, Bit 6 = FCMEN. 300001h, Bit 5 = -. 300001h, Bit 4 = -. 300001h, Bit 3 = FOSC3. 300001h, Bit 2 = FOSC2. 300001h, Bit 1 = FOSC1. 300001h, Bit 0 = FOSC0. 300001h, Default/ Unprogrammed Value = 00-- 0111. 300002h, File Name = CONFIG2L. 300002h, Bit 7 = -. 300002h, Bit 6 = -. 300002h, Bit 5 = -. 300002h, Bit 4 = BORV1. 300002h, Bit 3 = BORV0. 300002h, Bit 2 = BOREN1. 300002h, Bit 1 = BOREN0. 300002h, Bit 0 = PWRTEN. 300002h, Default/ Unprogrammed Value = ---1 1111.",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\n300003h, File Name = CONFIG2H. 300003h, Bit 7 = -. 300003h, Bit 6 = -. 300003h, Bit 5 = -. 300003h, Bit 4 = WDTPS3. 300003h, Bit 3 = WDTPS2. 300003h, Bit 2 = WDTPS1. 300003h, Bit 1 = WDTPS0. 300003h, Bit 0 = WDTEN. 300003h, Default/ Unprogrammed Value = ---1 1111. 300004h, File Name = CONFIG3L. 300004h, Bit 7 = WAIT. 300004h, Bit 6 = BW. 300004h, Bit 5 = -. 300004h, Bit 4 = -. 300004h, Bit 3 = -. 300004h, Bit 2 = -. 300004h, Bit 1 = PM1. 300004h, Bit 0 = PM0. 300004h, Default/ Unprogrammed Value = 11-- --11.",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\n300005h, File Name = CONFIG3H. 300005h, Bit 7 = MCLRE. 300005h, Bit 6 = -. 300005h, Bit 5 = -. 300005h, Bit 4 = -. 300005h, Bit 3 = -. 300005h, Bit 2 = LPT1OSC. 300005h, Bit 1 = -. 300005h, Bit 0 = CCP2MX. 300005h, Default/ Unprogrammed Value = 1--- -0-1. 300006h, File Name = CONFIG4L. 300006h, Bit 7 = DEBUG. 300006h, Bit 6 = XINST. 300006h, Bit 5 = -. 300006h, Bit 4 = -. 300006h, Bit 3 = -. 300006h, Bit 2 = -. 300006h, Bit 1 = -. 300006h, Bit 0 = STVREN. 300006h, Default/ Unprogrammed Value = 10-- ---1.",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = -. 300008h, Bit 2 = -. 300008h, Bit 1 = -. 300008h, Bit 0 = CP. 300008h, Default/ Unprogrammed Value = ---- ---1. 30000Ch, File Name = CONFIG7L (1). 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = -. 30000Ch, Bit 2 = -. 30000Ch, Bit 1 = -. 30000Ch, Bit 0 = EBTR. 30000Ch, Default/ Unprogrammed Value = ---- ---1. 3FFFFEh, File Name = DEVID1. 3FFFFEh, Bit",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\n7 = DEV2. 3FFFFEh, Bit 6 = DEV1. 3FFFFEh, Bit 5 = DEV0. 3FFFFEh, Bit 4 = REV4. 3FFFFEh, Bit 3 = REV3. 3FFFFEh, Bit 2 = REV2. 3FFFFEh, Bit 1 = REV1. 3FFFFEh, Bit 0 = REV0. 3FFFFEh, Default/ Unprogrammed Value = 11qx xxxx (2). 3FFFFFh, File Name = DEVID2. 3FFFFFh, Bit 7 = DEV10. 3FFFFFh, Bit 6 = DEV9. 3FFFFFh, Bit 5 = DEV8. 3FFFFFh, Bit 4 = DEV7. 3FFFFFh, Bit 3 = DEV6. 3FFFFFh, Bit 2 = DEV5. 3FFFFFh, Bit 1 = DEV4. 3FFFFFh, Bit 0 = DEV3. 3FFFFFh, Default/ Unprogrammed Value = 0000 qq1q (2)\nLegend:",
    "TABLE 24-1: CONFIGURATION BITS AND DEVICE IDs\nx = unknown, u = unchanged, -= unimplemented, q = value depends on individual device.\nShaded cells are unimplemented, read as ' 0 '.\nNote\n1: Unimplemented in PIC18F6310/6410 devices; maintain this bit set.\n2: See Register 24-9 for DEVID1 values. DEVID registers are read-only and cannot be programmed by the user.",
    "REGISTER 24-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nIESO, R/P-0 = FCMEN. IESO, U-0 = -. IESO, U-0 = -. IESO, R/P-0 = FOSC3. IESO, R/P-1 = FOSC2. IESO, R/P-1 = FOSC1. IESO, R/P-1 = FOSC0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 24-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at erase bit, 1 = '1' = Bit is set. -n = Value at erase bit, 2 = '0' = Bit is cleared. -n = Value at erase bit, 3 = x = Bit is unknown",
    "bit 7 IESO: Internal/External Oscillator Switchover bit\n1 = Oscillator Switchover mode is enabled\n0 = Oscillator Switchover mode is disabled",
    "bit 6\nFCMEN: Fail-Safe Clock Monitor Enable bit\n1 = Fail-Safe Clock Monitor is enabled\n0 = Fail-Safe Clock Monitor is disabled\nbit 5-4 Unimplemented: Read as ' 0 '",
    "bit 3-0 FOSC<3:0>: Oscillator Selection bits\n11xx = External RC oscillator, CLKO function on RA6\n101x = External RC oscillator, CLKO function on RA6\n1001 = Internal oscillator block, CLKO function on RA6, port function on RA7\n1000 = Internal oscillator block, port function on RA6 and RA7\n0111 = External RC oscillator, port function on RA6\n0110 = HS oscillator, PLL is enabled (Clock Frequency = 4 x FOSC1)\n0101 = EC oscillator, CLKO function on RA6\n0100 = EC oscillator, CLKO function on RA6\n0011 = External RC oscillator, CLKO function on RA6\n0010 = HS oscillator\n0001 = XT oscillator\n0000 = LP oscillator",
    "REGISTER 24-2: CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\n-, U-0 = -. -, U-0 = -. -, R/P-1 = BORV1. -, R/P-1 = BORV0. -, R/P-1 = BOREN1 (1). -, R/P-1 = BOREN0 (1). -, R/P-1 = PWRTEN (1). bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value at erase bit\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 7-5 Unimplemented: Read as ' 0 '\nbit 4-3 BORV<1:0>: Brown-out Reset Voltage bits\n11 = Minimum setting\n\u2022\n\u2022\n\u2022\n00 = Maximum setting",
    "bit 2-1 BOREN<1:0> Brown-out Reset Enable bits (1)\n11 = Brown-out Reset is enabled in hardware only (SBOREN is disabled)\n10 = Brown-out Reset is enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)\n10 = Brown-out Reset is enabled and controlled by software (SBOREN is enabled)\n10 = Brown-out Reset is disabled in hardware and software\nbit 0\nPWRTEN: Power-up Timer Enable bit (1)\n1 = PWRT is disabled\n0 = PWRT is enabled\nNote 1: The Power-up Timer (PWRT) is decoupled from Brown-out Reset, allowing these features to be independently controlled.",
    "REGISTER 24-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\n-, U-0 = -. -, U-0 = -. -, R/P-1 = WDTPS3. -, R/P-1 = WDTPS2. -, R/P-1 = WDTPS1. -, R/P-1 = WDTPS0. -, R/P-1 = WDTEN. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "REGISTER 24-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at erase bit, 1 = '1' = Bit is set. -n = Value at erase bit, 2 = '0' = Bit is cleared. -n = Value at erase bit, 3 = x = Bit is unknown",
    "bit 7-5 Unimplemented: Read as ' 0 '\nbit 4-1 WDTPS<3:0>: Watchdog Timer Postscale Select bits\n1111 = 1:32,768\n1110 = 1:16,384\n1101 = 1:8,192\n1100 = 1:4,096\n1011 = 1:2,048\n1010 = 1:1,024\n1001 = 1:512\n1000 = 1:256\n0111 = 1:128\n0110 = 1:64\n0101 = 1:32\n0100 = 1:16\n0011 = 1:8\n0010 = 1:4\n0001 = 1:2\n0000 = 1:1",
    "bit 0 WDTEN: Watchdog Timer Enable bit\n1 = WDT is enabled\n0 = WDT is disabled (control is placed on the SWDTEN bit)",
    "REGISTER 24-4: CONFIG3L: CONFIGURATION REGISTER 3 LOW (BYTE ADDRESS 300004h)\nWAIT, R/P-1 = BW. WAIT, U-0 = -. WAIT, U-0 = -. WAIT, U-0 = -. WAIT, U-0 = -. WAIT, R/P-1 = PM1. WAIT, R/P-1 = PM0. bit 7, R/P-1 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "REGISTER 24-4: CONFIG3L: CONFIGURATION REGISTER 3 LOW (BYTE ADDRESS 300004h)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at erase bit, 1 = '1' = Bit is set. -n = Value at erase bit, 2 = '0' = Bit is cleared. -n = Value at erase bit, 3 = x = Bit is unknown",
    "bit 7 WAIT: External Bus Data Wait Enable bit\n1 = Wait selections are unavailable, device will not wait\n0 = Wait is programmed by the WAIT1 and WAIT0 bits of the MEMCOM register (MEMCOM<5:4>)\nbit 6\nBW: External Bus Data Width Select bit\n1 = 16-bit external bus data width\n0 = 8-bit external bus data width\nbit 5-2\nUnimplemented: Read as ' 0 '\nbit 1-0\nPM<1:0>: Processor Data Memory Mode Select bits\n11 = Microcontroller mode\n10 = Microprocessor mode (1)\n01 = Microcontroller with Boot Block mode (1)\n00 = Extended Microcontroller mode (1)\nNote 1: This mode is only available on PIC18F8310/8410 devices.",
    "REGISTER 24-5: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nR/P-1, 1 = U-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = R/P-0. R/P-1, 6 = U-0. R/P-1, 7 = R/P-1. MCLRE, 1 = -. MCLRE, 2 = -. MCLRE, 3 = -. MCLRE, 4 = -. MCLRE, 5 = LPT1OSC. MCLRE, 6 = -. MCLRE, 7 = CCP2MX. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit",
    "REGISTER 24-5: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\n0\nLegend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value at erase bit\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown",
    "bit 7 MCLRE: MCLR Pin Enable bit\n1 = MCLR pin is enabled; RG5 input pin is disabled\n0 = RG5 input pin is enabled; MCLR is disabled\nbit 6-3 Unimplemented: Read as ' 0 '\nbit 2\nLPT1OSC: Low-Power Timer 1 Oscillator Enable bit\n1 = Timer1 is configured for low-power operation\n0 = Timer1 is configured for higher power operation",
    "bit 1 Unimplemented: Read as '\n0\nbit 0\nCCP2MX: CCP2 MUX bit\nIn Microcontroller Mode only (all devices):\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RE7\nIn Microprocessor, Extended Microcontroller and Microcontroller with Boot Block Modes\n(PIC18F8310/8410 devices only):\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RB3",
    "REGISTER 24-6: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nDEBUG, R/P-0 = XINST. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, U-0 = -. DEBUG, R/P-1 = STVREN. bit 7 bit 0, R/P-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0\nLegend:, 1 = Legend:. R = Readable bit C, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed bit, 1 = u = Unchanged from programmed state\nbit 7",
    "REGISTER 24-6: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nDEBUG: Background Debugger Enable bit\n1 = Background debugger is disabled, RB6 and RB7 are configured as general purpose I/O pins\n0 = Background debugger is enabled, RB6 and RB7 are dedicated to In-Circuit Debug\nbit 6\nXINST: Extended Instruction Set Enable bit\n1 = Instruction set extension and Indexed Addressing mode are enabled\n0 = Instruction set extension and Indexed Addressing mode are disabled (Legacy mode)",
    "bit 5-1\nUnimplemented: Read as ' 0\nbit 0\nSTVREN: Stack Full/Underflow Reset Enable bit\n1 = Stack full/underflow will cause a Reset\n0 = Stack full/underflow will not cause a Reset",
    "REGISTER 24-7: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/C-1 = CP. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/C-1 = bit 0\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed bit, 1 = u = Unchanged from programmed state",
    "bit 7-1 Unimplemented: Read as ' 0\nbit 0\nCP: Code Protection bit\n1 = Program memory block is not code-protected\n0 = Program memory block is code-protected",
    "REGISTER 24-8: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch) (1)\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/C-1 = EBTR (2,3). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/C-1 = bit 7 bit 0\nLegend:, 1 = Legend:. R = Readable bit C = Clearable, 1 = U = Unimplemented bit, read as '0'. -n = Value when device is unprogrammed bit, 1 = u = Unchanged from programmed state",
    "bit 7-1 Unimplemented: Read as ' 0\nbit 0\nEBTR: Table Read Protection bit (2,3)\n1 = Internal program memory block is not protected from table reads executed from external memory block\n0 = Internal program memory block is protected from table reads executed from external memory block\nNote 1: Unimplemented on PIC18F6310/6410 devices; maintain the bit set.\n2: Valid for the entire internal program memory block in Extended Microcontroller mode and for only the boot block (0000h to 07FFh) in Microcontroller with Boot Block mode. This bit has no effect in Microcontroller and Microprocessor modes.\n3: It is recommended to enable the CP bit to protect the block from external read operations.",
    "REGISTER 24-9: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F6310/6410/8310/8410 DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV2 (1), 1 = DEV1 (1). DEV2 (1), 2 = DEV0 (1). DEV2 (1), 3 = REV4. DEV2 (1), 4 = REV3. DEV2 (1), 5 = REV2. DEV2 (1), 6 = REV1. DEV2 (1), 7 = REV0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 24-9: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F6310/6410/8310/8410 DEVICES\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at erase bit, 1 = '1' = Bit is set. -n = Value at erase bit, 2 = '0' = Bit is cleared. -n = Value at erase bit, 3 = x = Bit is unknown\nbit 7-5\nDEV<2:0>: Device ID bits (1)\n110 = PIC18F8310, PIC18F8410\n111 = PIC18F6310, PIC18F6410\nbit 4-0\nREV<4:0>: Revision ID bits\nThese bits are used to indicate the device revision.",
    "REGISTER 24-9: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F6310/6410/8310/8410 DEVICES\n- Note 1: These values for DEV<2:0> may be shared with other devices. The specific device is always identified by using the entire DEV<10:0> bit sequence.",
    "REGISTER 24-10: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F6310/6410/8310/8410 DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV10 (1), 1 = DEV9 (1). DEV10 (1), 2 = DEV8 (1). DEV10 (1), 3 = DEV7 (1). DEV10 (1), 4 = DEV6 (1). DEV10 (1), 5 = DEV5 (1). DEV10 (1), 6 = DEV4 (1). DEV10 (1), 7 = DEV3 (1). bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 24-10: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F6310/6410/8310/8410 DEVICES\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = P = Programmable bit. R = Readable bit, 2 = U = Unimplemented bit, read as '0'. R = Readable bit, 3 = U = Unimplemented bit, read as '0'. -n = Value at erase bit, 1 = '1' = Bit is set. -n = Value at erase bit, 2 = '0' = Bit is cleared. -n = Value at erase bit, 3 = x = Bit is unknown",
    "bit 7-0 DEV<10:3>: Device ID bits\nThese bits are used with the DEV<2:0> bits in the Device ID Register 1 to identify the part number.\n0000 0110 = PIC18F6410/8410 devices\n0000 1011 = PIC18F6310/8310 devices\n- Note 1: These values for DEV<10:3> may be shared with other devices. The specific device is always identified by using the entire DEV<10:0> bit sequence.",
    "24.2 Watchdog Timer (WDT)\nFor PIC18F6310/6410/8310/8410 devices, the WDT is driven  by  the  INTRC  source.  When  the  WDT  is enabled, the clock source is also enabled. The nominal WDT period is 4 ms and has the same stability as the INTRC oscillator.\nThe 4 ms period of the WDT is multiplied by a 16-bit postscaler. Any  output  of  the  WDT  postscaler  is selected by a multiplexer, controlled by bits in Configuration Register 2H. Available periods range from 4 ms to  131.072 seconds  (2.18  minutes).  The  WDT  and postscaler are cleared when any of the following events occur: a SLEEP or CLRWDT instruction is executed, the IRCF  bits  (OSCCON<6:4>)  are  changed  or  a  clock failure has occurred.",
    "24.2 Watchdog Timer (WDT)\nNote 1: The CLRWDT and SLEEP instructions clear  the  WDT  and  postscaler  counts when executed.\n2: Changing  the  setting  of  the  IRCF  bits (OSCCON<6:4>)  clears  the  WDT  and postscaler counts.\n3: When a CLRWDT instruction is executed the postscaler count will be cleared.",
    "24.2.1 CONTROL REGISTER\nRegister 24-11 shows the WDTCON register. This is a readable and writable register, which contains a control bit  that  allows  software  to  override  the  WDT  enable Configuration bit, but only if the Configuration bit has disabled the WDT.",
    "REGISTER 24-11: WDTCON: WATCHDOG TIMER CONTROL REGISTER\n-, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, U-0 = -. -, R/W-0 = SWDTEN (1). bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 0",
    "Legend:\nR = Readable bit\nP = Programmable bit\nU = Unimplemented bit, read as '0'\n-n = Value at erase bit\n'1' = Bit is set\n'0' = Bit is cleared\nx = Bit is unknown\nbit 7-1 Unimplemented : Read as ' 0 '\nbit 0\nSWDTEN: Software Controlled Watchdog Timer Enable bit (1)\n1 = Watchdog Timer is on\n0 = Watchdog Timer is off\nNote 1: This bit has no effect if the Configuration bit, WDTEN, is enabled.",
    "TABLE 24-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nRCON, Bit 7 = IPEN. RCON, Bit 6 = SBOREN. RCON, Bit 5 = -. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Reset Values on Page = 64. WDTCON, Bit 7 = -. WDTCON, Bit 6 = -. WDTCON, Bit 5 = -. WDTCON, Bit 4 = -. WDTCON, Bit 3 = -. WDTCON, Bit 2 = -. WDTCON, Bit 1 = -. WDTCON, Bit 0 = SWDTEN. WDTCON, Reset Values on Page = 64\nLegend:\n- = unimplemented, read as ' 0 '. Shaded cells are not used by the Watchdog Timer.",
    "24.3 Two-Speed Start-up\nThe Two-Speed Start-up feature helps to minimize the latency period from oscillator start-up to code execution by  allowing  the  microcontroller  to  use  the  INTRC oscillator  as  a  clock  source  until  the  primary  clock source is available. It is enabled by setting the IESO Configuration bit.\nTwo-Speed  Start-up  should  be  enabled  only  if  the primary  oscillator  mode  is  LP,  XT,  HS  or  HSPLL (Crystal-Based modes). Other sources do not require a OST  start-up  delay;  for  these,  Two-Speed  Start-up should be disabled.\nWhen enabled, Resets and wake-ups from Sleep mode cause the device to configure itself to run from the internal oscillator block as the clock source, following the time-out of the Power-up Timer after a Power-on Reset is enabled. This allows almost immediate code execution  while  the  primary  oscillator  starts  and  the OST is running. Once the OST times out, the device automatically switches to PRI_RUN mode.",
    "24.3 Two-Speed Start-up\nIn all other power-managed modes, Two-Speed Start-up is not used. The device will be clocked by the currently selected  clock  source  until  the  primary  clock  source becomes  available.  The  setting  of  the  IESO  bit  is ignored.",
    "24.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nWhile using the INTRC  oscillator in Two-Speed Start-up,  the  device  still  obeys  the  normal  command sequences for entering power-managed modes, including serial SLEEP instructions (refer to Section 4.1.2  'Entering  Power-Managed  Modes' ). In  practice,  this  means  that  user  code  can  change the SCS<1:0> bits setting or issue SLEEP instructions  before  the  OST  times  out.  This  would allow an application to briefly wake-up, perform routine  'housekeeping'  tasks  and  return  to  Sleep before  the  device  starts  to  operate  from  the  primary oscillator.\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a higher clock speed by setting bits, IRCF<2:0>, immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting the IRCF<2:0> bits prior to entering Sleep mode.",
    "24.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nUser code can also check if the primary clock source is currently providing the device clocking by checking the status of the OSTS bit (OSCCON<3>). If the bit is set, the primary oscillator is providing the clock. Otherwise, the internal oscillator block is providing the clock during wake-up from Reset or Sleep mode.",
    "24.4 Fail-Safe Clock Monitor\nThe Fail-Safe Clock Monitor (FSCM)  allows the microcontroller to continue operation in the event of an external oscillator failure by automatically switching the device clock to the internal oscillator block. The FSCM function is enabled by setting the FCMEN Configuration bit.\nWhen FSCM is enabled, the INTRC oscillator runs at all times to monitor clocks to peripherals and provide a backup  clock  in  the  event  of  a  clock  failure.  Clock monitoring (shown in Figure 24-3) is accomplished by creating  a  sample  clock  signal,  which  is  the  INTRC output divided by 64. This allows ample time between FSCM sample  clocks  for  a  peripheral  clock  edge  to occur.  The  peripheral  device  clock  and  the  sample clock are presented as inputs to the Clock Monitor latch (CM). The CM is set on the falling edge of the device clock  source,  but  cleared  on  the  rising  edge  of  the sample clock.",
    "FIGURE 24-3: FSCM BLOCK DIAGRAM\nClock  failure  is  tested  for  on  the  falling  edge  of  the sample  clock.  If  a  sample  clock  falling  edge  occurs while CM is still set, a clock failure has been detected (Figure 24-4). This causes the following:\n\u00b7 the FSCM generates an oscillator fail interrupt by setting bit, OSCFIF (PIR2<7>);\n\u00b7 the device clock source is switched to the internal oscillator block (OSCCON is not updated to show the current clock source - this is the Fail-Safe condition); and\n\u00b7 the WDT is reset.\nDuring  switchover,  the  postscaler  frequency  from  the internal oscillator block may not be sufficiently stable for timing-sensitive applications. In these cases, it may be desirable to select another clock configuration and enter an alternate power-managed mode. This can be done to attempt a partial recovery or execute a controlled shutdown. See Section 4.1.2 'Entering Power-Managed Modes' and Section 24.3.1 'Special Considerations for Using Two-Speed Start-up' for more details.",
    "FIGURE 24-3: FSCM BLOCK DIAGRAM\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a higher clock speed by setting bits, IRCF<2:0>, immediately  after  Reset.  For  wake-ups  from  Sleep,  the INTOSC or postscaler clock sources can be selected by setting the IRCF<2:0> bits prior to entering Sleep mode.\nThe FSCM will detect failures of the primary or secondary clock sources only. If  the internal  oscillator  block fails, no failure would be detected, nor would any action be possible.",
    "24.4.1 FSCM AND THE WATCHDOG TIMER\nBoth  the  FSCM  and  the  WDT  are  clocked  by  the INTRC  oscillator.  Since  the  WDT  operates  with  a separate divider and counter, disabling the WDT has no effect on the operation of the INTRC oscillator when the FSCM is enabled.\nAs already noted, the clock source is switched to the INTOSC  clock  when  a  clock  failure is detected. Depending on the frequency selected by the IRCF<2:0> bits, this may mean a substantial change in the  speed  of  code  execution.  If  the  WDT  is  enabled with a small prescale value, a decrease in clock speed allows  a  WDT  time-out  to  occur  and  a  subsequent device Reset. For this reason, Fail-Safe Clock events also reset the WDT and postscaler, allowing it to start timing from when execution speed was changed, and decreasing the likelihood of an erroneous time-out.",
    "24.4.2 EXITING FAIL-SAFE OPERATION\nThe Fail-Safe condition is terminated by either a device Reset  or  by  entering  a  power-managed  mode.  On Reset,  the  controller  starts  the  primary  clock  source specified in Configuration Register 1H  (with any required  start-up  delays  that  are  required  for  the oscillator mode, such as the OST or PLL timer). The INTOSC multiplexer provides the device clock until the primary  clock  source  becomes  ready  (similar  to  a Two-Speed Start-up). The clock source is then switched to the primary clock (indicated by the OSTS bit in the OSCCON  register  becoming  set).  The Fail-Safe Clock Monitor then resumes monitoring the peripheral clock.\nThe  primary  clock  source  may  never  become  ready during start-up. In this case, operation is clocked by the INTOSC multiplexer. The OSCCON register will remain in  its  Reset  state  until  a  power-managed  mode  is entered.",
    "PIC18F6310/6410/8310/8410\nFIGURE 24-4:\nFSCM TIMING DIAGRAM",
    "24.4.4 POR OR WAKE FROM SLEEP\nBy entering a power-managed mode, the clock multiplexer  selects  the  clock  source  selected  by  the OSCCON register. Fail-Safe  Clock  monitoring  of  the power-managed clock source resumes in the power-managed mode.\nIf  an  oscillator  failure  occurs  during  power-managed operation, the subsequent events depend on whether or  not  the  oscillator  failure  interrupt  is  enabled.  If enabled (OSCFIF = 1 ), code execution will be clocked by  the  INTOSC  multiplexer.  An  automatic  transition back to the failed clock source will not occur.\nIf  the interrupt is disabled, the device will not exit the power-managed mode on oscillator failure. Instead, the device will continue to operate as before, but clocked by the INTOSC multiplexer. While in Idle mode, subsequent interrupts will cause the CPU to begin executing instructions while being clocked by the INTOSC multiplexer.",
    "24.4.4 POR OR WAKE FROM SLEEP\nThe FSCM is designed to detect oscillator failure at any point  after  the  device  has  exited  Power-on  Reset (POR) or low-power Sleep mode. When the primary device clock is in EC, RC or INTRC modes, monitoring can begin immediately following these events.\nFor  oscillator  modes  involving  a  crystal  or  resonator (HS,  HSPLL,  LP  or  XT),  the  situation  is  somewhat different.  Since  the  oscillator  may  require  a  start-up time considerably longer than the FCSM sample clock time, a false clock failure may be detected. To prevent this, the internal oscillator block is automatically configured as the device clock and functions until the primary clock  is  stable  (the  OST  and  PLL  timers  have  timed out).  This  is  identical  to  Two-Speed  Start-up  mode. Once the primary clock is stable, the INTRC returns to its role as the FSCM source.",
    "Note:\nThe same logic that prevents false oscillator  failure  interrupts  on  POR,  or wake  from  Sleep,  will  also  prevent  the detection of the oscillator's failure to start at all following these events. This can be avoided by monitoring the OSTS bit and using a timing routine to determine if the oscillator is taking too long to start. Even so,  no  oscillator  failure  interrupt  will  be flagged.\nAs noted in Section 24.3.1 'Special Considerations for Using Two-Speed Start-up' , it is also possible to select another clock configuration and enter an alternate power-managed mode while waiting for the primary clock to become  stable.  When  the new powered-managed mode is selected, the primary clock is disabled.",
    "24.5 Program Verification and Code Protection\nThe  overall  structure  of  the  code  protection  on  the PIC18F6310/6410/8310/8410 Flash devices differs from previous PIC18 devices.\nFor  all  devices  in  the  PIC18FX310/X410  family,  the user  program  memory  is  made  of  a  single  block. Figure 24-5 shows the program memory organization for individual devices. Code protection for this block is controlled by a single bit, CP (CONFIG5L<0>). The CP bit  inhibits  external  reads and writes; it has no direct effect in normal execution mode.",
    "24.5.1 CODE PROTECTION FROM EXTERNAL TABLE READS\nThe  program  memory  may  be  read  to  any  location using the table read instructions. The Device ID and the Configuration registers may be read with the table read instructions.\nEBTR (CONFIG7L<0>), is used to protect the on-chip program  memory  space  from  this  possibility.  Setting EBTR prevents table read commands from executing on any address in the on-chip program memory space.\nEBTR is implemented only on devices with the external memory interface. Its operation also depends on the particular  mode  of  operation  selected.  In  Extended Microcontroller  mode,  programming  EBTR  enables protection  from  external  table  reads  for  the  entire program  memory.  In  Microcontroller  with  Boot  Block mode, only the first 2 Kbytes of on-chip memory (000h to 7FFh) are protected. This is because, only this range of internal program  memory  is  accessible  by  the microcontroller in this operating mode.\nWhen the device is in Micrcontroller or Microprocessor modes, EBTR has no effect on code protection.",
    "24.5.2 CONFIGURATION REGISTER PROTECTION\nFor  devices  with  the  external  memory  interface,  it  is possible  to  execute  a  table  read  from  an  external program memory space and read the contents of the on-chip  memory.  An  additional  code  protection  bit,\nThe  Configuration  registers  can  only  be  written  via ICSP  using  an  external  programmer.  No  separate protection bit is associated with them.",
    "FIGURE 24-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F6310/6410/8310/8410\nProgram memory Block, MEMORY SIZE/DEVICE.Address Range = 000000h 001FFFh. Program memory Block, MEMORY SIZE/DEVICE.16 Kbytes (PIC18F6410/8410) = Program memory Block. Program memory Block, MEMORY SIZE/DEVICE.Address Range = 000000h 003FFFh. Program memory Block, Block Protection.Code Controlled By: = CP, EBTR. Unimplemented Read ' 0 's, MEMORY SIZE/DEVICE.Address Range = . Unimplemented Read ' 0 's, MEMORY SIZE/DEVICE.16 Kbytes (PIC18F6410/8410) = Unimplemented Read ' 0 's. Unimplemented Read ' 0 's, MEMORY SIZE/DEVICE.Address Range = . Unimplemented Read ' 0 's, Block Protection.Code Controlled By: = (Unimplemented Memory Space)",
    "TABLE 24-3: SUMMARY OF CODE PROTECTION REGISTERS\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = -. 300008h, Bit 6 = -. 300008h, Bit 5 = -. 300008h, Bit 4 = -. 300008h, Bit 3 = -. 300008h, Bit 2 = -. 300008h, Bit 1 = -. 300008h, Bit 0 = CP. 30000Ch, File Name = CONFIG7L*. 30000Ch, Bit 7 = -. 30000Ch, Bit 6 = -. 30000Ch, Bit 5 = -. 30000Ch, Bit 4 = -. 30000Ch, Bit 3 = -. 30000Ch, Bit 2 = -. 30000Ch, Bit 1 = -. 30000Ch, Bit 0 = EBTR\nLegend:\nShaded cells are unimplemented.\n* Unimplemented in PIC18F6310/8310 devices; maintain this bit set.",
    "24.8 In-Circuit Debugger\nEight memory locations (200000h-200007h) are designated as ID locations,  where  the  user  can  store checksum or other code identification numbers. These locations are readable during normal execution through the TBLRD instruction.  During  program/verify,  these locations  are  readable  and  writable.  The  ID  locations can be read when the device is code-protected.",
    "24.7 In-Circuit Serial Programming\nPIC18F6310/6410/8310/8410 microcontrollers can be serially programmed while in the end application circuit. This is simply done with two lines for clock and data, and  three  other  lines  for  power,  ground  and  the programming voltage. This allows customers to manufacture boards with unprogrammed devices and then program  the  microcontroller  just  before  shipping  the product. This also allows the most recent firmware or a custom firmware to be programmed.\nWhen the DEBUG Configuration bit is programmed to a ' 0 ', the In-Circuit Debugger functionality is enabled. This function allows simple debugging functions when used with MPLAB \u00ae  IDE. When the microcontroller has this feature enabled, some resources are not available for general use. Table 24-4 shows which resources are required by the background debugger.",
    "TABLE 24-4: DEBUGGER RESOURCES\nI/O Pins:, 1 = RB6, RB7. Stack:, 1 = 2 levels. Program Memory:, 1 = <1 Kbyte. Data Memory:, 1 = <16 bytes\nTo use the In-Circuit Debugger function of the microcontroller, the design must implement In-Circuit Serial Programming  connections  to  MCLR/VPP,  VDD,  VSS, RB7  and  RB6.  This  will  interface  to  the  In-Circuit Debugger module available from Microchip or one of the third party development tool companies.",
    "25.0 INSTRUCTION SET SUMMARY\nPIC18F6310/6410/8310/8410 devices incorporate the standard set of 75 PIC18 core instructions, as well as an extended set of 8 new instructions for the optimization of code that is recursive or that utilizes a software stack.  The  extended  set  is  discussed  later  in  this section.",
    "25.1 Standard Instruction Set\nThe standard PIC18 instruction set adds many enhancements to the previous PIC \u00ae  device instruction sets, while maintaining an easy migration from these PIC  device  instruction  sets.  Most  instructions  are  a single program memory word (16 bits), but there are four  instructions  that  require  two  program  memory locations.\nEach single-word instruction  is  a 16-bit word  divided into an opcode, which specifies the instruction type and one  or  more  operands,  which  further  specify  the operation of the instruction.\nThe instruction set is highly orthogonal and is grouped into four basic categories:\n\u00b7 Byte-oriented operations\n\u00b7 Bit-oriented operations\n\u00b7 Literal operations\n\u00b7 Control operations\nThe PIC18 instruction set summary in Table 25-2 lists byte-oriented , bit-oriented , literal and control operations. Table 25-1 shows the opcode field descriptions.\nMost byte-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The destination of the result (specified by 'd')\n3. The accessed memory (specified by 'a')",
    "25.1 Standard Instruction Set\nThe  file  register  designator,  'f',  specifies  which  file register is to be used by the instruction. The destination designator, 'd', specifies where  the  result of the operation  is  to  be  placed.  If  'd'  is  zero,  the  result  is placed in the WREG register. If 'd' is one, the result is placed in the file register specified in the instruction.\nAll bit-oriented instructions have three operands:\n1. The file register (specified by 'f')\n2. The bit in the file register (specified by 'b')\n3. The accessed memory (specified by 'a')\nThe bit field designator, 'b', selects the number of the bit affected by the operation, while the file register designator, 'f', represents the number of the file in which the bit is located.\nThe literal instructions may use some of the following operands:\n\u00b7 A literal value to be loaded into a file register (specified by 'k')\n\u00b7 The desired FSR register to load the literal value into (specified by 'f')\n\u00b7 No operand required (specified by '-')\nThe control instructions may use some of the following operands:",
    "25.1 Standard Instruction Set\n\u00b7 A program memory address (specified by 'n')\n\u00b7 The mode of the call or return instructions (specified by 's')\n\u00b7 The mode of the table read and table write instructions (specified by 'm')\n\u00b7 No operand required (specified by '-')\nAll instructions  are  a  single  word,  except  for  four double-word instructions. These instructions were made double-word to contain the required information in 32 bits. In the second word, the 4 MSbs are ' 1 's. If this  second  word  is  executed  as  an  instruction  (by itself), it will execute as a NOP .\nAll  single-word  instructions  are  executed  in  a  single instruction cycle, unless a conditional test is true or the program counter is changed as a result of the instruction. In these cases, the execution takes two instruction cycles with the additional instruction cycle(s) executed as a NOP .\nThe double-word instructions execute in two instruction cycles.",
    "25.1 Standard Instruction Set\nOne instruction cycle consists of four oscillator periods. Thus, for an oscillator frequency of 4 MHz, the normal instruction execution time is 1 \uf06d s. If a conditional test is true, or the program counter is changed as a result of an instruction, the instruction  execution  time is  2 \uf06d s. Two-word branch instructions (if true) would take 3 \uf06d s.\nFigure 25-1 shows the general formats that the instructions can have. All examples use the convention 'nnh' to represent a hexadecimal number.\nThe  Instruction  Set  Summary,  shown  in  Table 25-2, lists the standard instructions recognized by the Microchip Assembler (MPASM\u2122).\nSection 25.1.1 'Standard Instruction Set' provides a description of each instruction.",
    "TABLE 25-1: OPCODE FIELD DESCRIPTIONS\na, Description = RAM access bit a = 0 : RAM location in Access RAM (BSR register is ignored) a = 1 : RAM bank is specified by BSR register. bbb, Description = Bit address within an 8-bit file register (0 to 7).. BSR, Description = Bank Select Register. Used to select the current RAM bank.. C, DC, Z,, Description = ALU Status bits: C arry, D igit C arry, Z ero, Ov erflow, N egative.. d, Description = Destination select bit d = 0 : store result in WREG d = 1 : store result in file register f.. dest, Description = Destination: either the WREG register or the specified register file location.. f, Description = 8-bit register file address (00h to FFh), or 2-bit FSR designator (0h to 3h).. f s, Description = 12-bit register file address (000h to FFFh). This is the source address.. f d, Description = 12-bit register file address (000h to FFFh). This is the",
    "TABLE 25-1: OPCODE FIELD DESCRIPTIONS\ndestination address.. GIE, Description = Global interrupt enable bit.. k, Description = Literal field, constant data or label (may be either an 8-bit, 12-bit or a 20-bit value).. label, Description = Label name.. mm, Description = The mode of the TBLPTR register for the table read and table write instructions. Only used with table read and table write instructions:. * *+, Description = No change to register (such as TBLPTR with table reads and writes). Post-Increment register (such as TBLPTR with table reads and writes).. *-, Description = Post-Decrement register (such as TBLPTR with table reads and writes).. +*, Description = Pre-Increment register (such as TBLPTR with table reads and writes).. n, Description = The relative address (2's complement number) for relative branch instructions, or the direct address for call/branch and return instructions.. PC, Description = Program Counter.. PCL, Description = Program Counter Low Byte.. PCH, Description = Program Counter High Byte.. PCLATH, Description",
    "TABLE 25-1: OPCODE FIELD DESCRIPTIONS\n= Program Counter High Byte Latch.. PCLATU, Description = Program Counter Upper Byte Latch.. PD, Description = Power-Down bit.. PRODH, Description = Product of Multiply high byte.. PRODL, Description = Product of Multiply low byte.. s, Description = Fast Call/Return mode select bit s = 0 : do not update into/from shadow registers s = 1 : certain registers loaded into/from shadow registers (Fast mode). TBLPTR, Description = 21-bit Table Pointer (points to a program memory location).. TABLAT, Description = 8-bit Table Latch.. TO, Description = Time-out bit.. TOS, Description = Top-of-Stack.. u, Description = Unused or Unchanged.. WDT, Description = Watchdog Timer.. WREG, Description = Working register (accumulator).. x, Description = Don't care (' 0 ' or ' 1 '). The assembler will generate code with x = 0 . It is the recommended form of use for compatibility with all Microchip software tools.. z s, Description = 7-bit offset value for indirect addressing of register",
    "TABLE 25-1: OPCODE FIELD DESCRIPTIONS\nfiles (source).. z d, Description = 7-bit offset value for indirect addressing of register files (destination).. { }, Description = Optional argument.. [text], Description = Indicates an indexed address.. (text), Description = The contents of text .. [expr]<n>, Description = Specifies bit n of the register indicated by the pointer expr .. \uf0ae, Description = Assigned to.. < >, Description = Register bit field.. italics, Description = User-defined term (font is Courier New).",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nBYTE-ORIENTED OPERATIONS, Mnemonic,.Operands = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Description.Description = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Cycles.Cycles = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Status Affected.Status Affected = BYTE-ORIENTED OPERATIONS. BYTE-ORIENTED OPERATIONS, Notes.Notes = BYTE-ORIENTED OPERATIONS. ADDWF, Mnemonic,.Operands = f, d, a. ADDWF, Description.Description = Add WREG and f. ADDWF, Cycles.Cycles = 1. ADDWF, 16-Bit Instruction Word.MSb = 0010. ADDWF, 16-Bit Instruction Word.MSb = 01da. ADDWF, 16-Bit Instruction Word. = ffff. ADDWF,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.LSb = ffff. ADDWF, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWF, Notes.Notes = 1, 2. ADDWFC, Mnemonic,.Operands = f, d, a. ADDWFC, Description.Description = Add WREG and Carry bit to f. ADDWFC, Cycles.Cycles = 1. ADDWFC, 16-Bit Instruction Word.MSb = 0010. ADDWFC, 16-Bit Instruction Word.MSb = 00da. ADDWFC, 16-Bit Instruction Word. = ffff. ADDWFC, 16-Bit Instruction Word.LSb = ffff. ADDWFC, Status Affected.Status Affected = C, DC, Z, OV, N. ADDWFC, Notes.Notes = 1, 2. ANDWF, Mnemonic,.Operands = f, d, a. ANDWF, Description.Description = AND WREG with f. ANDWF, Cycles.Cycles = 1. ANDWF, 16-Bit Instruction Word.MSb = 0001.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nANDWF, 16-Bit Instruction Word.MSb = 01da. ANDWF, 16-Bit Instruction Word. = ffff. ANDWF, 16-Bit Instruction Word.LSb = ffff. ANDWF, Status Affected.Status Affected = Z, N. ANDWF, Notes.Notes = 1,2. CLRF, Mnemonic,.Operands = f, a. CLRF, Description.Description = Clear f. CLRF, Cycles.Cycles = 1. CLRF, 16-Bit Instruction Word.MSb = 0110. CLRF, 16-Bit Instruction Word.MSb = 101a. CLRF, 16-Bit Instruction Word. = ffff. CLRF, 16-Bit Instruction Word.LSb = ffff. CLRF, Status Affected.Status Affected = Z. CLRF, Notes.Notes = 2. COMF, Mnemonic,.Operands = f, d, a. COMF, Description.Description = Complement f. COMF, Cycles.Cycles = . COMF, 16-Bit Instruction Word.MSb = 0001. COMF, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 11da. COMF, 16-Bit Instruction Word. = ffff. COMF, 16-Bit Instruction Word.LSb = ffff. COMF, Status Affected.Status Affected = Z, N. COMF, Notes.Notes = 1, 2. CPFSEQ, Mnemonic,.Operands = f, a. CPFSEQ, Description.Description = Compare f with WREG, Skip = 1 1. CPFSEQ, Cycles.Cycles = (2 or 3). CPFSEQ, 16-Bit Instruction Word.MSb = 0110. CPFSEQ, 16-Bit Instruction Word.MSb = 001a. CPFSEQ, 16-Bit Instruction Word. = ffff. CPFSEQ, 16-Bit Instruction Word.LSb = ffff. CPFSEQ, Status Affected.Status Affected = None. CPFSEQ, Notes.Notes = 4. CPFSGT, Mnemonic,.Operands = f, a. CPFSGT, Description.Description = Compare f with WREG, Skip > 1. CPFSGT, Cycles.Cycles =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\n(2 or 3). CPFSGT, 16-Bit Instruction Word.MSb = 0110. CPFSGT, 16-Bit Instruction Word.MSb = 010a. CPFSGT, 16-Bit Instruction Word. = ffff. CPFSGT, 16-Bit Instruction Word.LSb = ffff. CPFSGT, Status Affected.Status Affected = None. CPFSGT, Notes.Notes = 4. CPFSLT, Mnemonic,.Operands = f, a. CPFSLT, Description.Description = Compare f with WREG, Skip < 1. CPFSLT, Cycles.Cycles = (2 or 3). CPFSLT, 16-Bit Instruction Word.MSb = 0110. CPFSLT, 16-Bit Instruction Word.MSb = 000a. CPFSLT, 16-Bit Instruction Word. = ffff. CPFSLT, 16-Bit Instruction Word.LSb = ffff. CPFSLT, Status Affected.Status Affected = None. CPFSLT, Notes.Notes = 1, 2. DECF, Mnemonic,.Operands = f, d, a.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nDECF, Description.Description = Decrement f. DECF, Cycles.Cycles = 1. DECF, 16-Bit Instruction Word.MSb = 0000. DECF, 16-Bit Instruction Word.MSb = 01da. DECF, 16-Bit Instruction Word. = ffff. DECF, 16-Bit Instruction Word.LSb = ffff. DECF, Status Affected.Status Affected = C, DC, Z, OV, N. DECF, Notes.Notes = 1, 2, 3, 4. DECFSZ, Mnemonic,.Operands = f, d, a. DECFSZ, Description.Description = Decrement f, Skip if 0. DECFSZ, Cycles.Cycles = 1 (2 or 3). DECFSZ, 16-Bit Instruction Word.MSb = 0010. DECFSZ, 16-Bit Instruction Word.MSb = 11da. DECFSZ, 16-Bit Instruction Word. = ffff. DECFSZ, 16-Bit Instruction Word.LSb = ffff. DECFSZ, Status Affected.Status Affected = None. DECFSZ,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nNotes.Notes = 1, 2, 3, 4. DCFSNZ, Mnemonic,.Operands = f, d, a. DCFSNZ, Description.Description = Decrement f, Skip if Not 0. DCFSNZ, Cycles.Cycles = 1 (2 or 3). DCFSNZ, 16-Bit Instruction Word.MSb = 0100. DCFSNZ, 16-Bit Instruction Word.MSb = 11da. DCFSNZ, 16-Bit Instruction Word. = ffff. DCFSNZ, 16-Bit Instruction Word.LSb = ffff. DCFSNZ, Status Affected.Status Affected = None. DCFSNZ, Notes.Notes = 1, 2. INCF, Mnemonic,.Operands = f, d, a. INCF, Description.Description = Increment f. INCF, Cycles.Cycles = 1. INCF, 16-Bit Instruction Word.MSb = 0010. INCF, 16-Bit Instruction Word.MSb = 10da. INCF, 16-Bit Instruction Word. = ffff. INCF, 16-Bit Instruction Word.LSb =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nffff. INCF, Status Affected.Status Affected = C, DC, Z, OV, N. INCF, Notes.Notes = 1, 2, 3, 4. INCFSZ, Mnemonic,.Operands = f, d, a. INCFSZ, Description.Description = Increment f, Skip if 0. INCFSZ, Cycles.Cycles = 1 (2 or 3). INCFSZ, 16-Bit Instruction Word.MSb = 0011. INCFSZ, 16-Bit Instruction Word.MSb = 11da. INCFSZ, 16-Bit Instruction Word. = ffff. INCFSZ, 16-Bit Instruction Word.LSb = ffff. INCFSZ, Status Affected.Status Affected = None. INCFSZ, Notes.Notes = 4. INFSNZ, Mnemonic,.Operands = f, d, a. INFSNZ, Description.Description = Increment f, Skip if Not 0. INFSNZ, Cycles.Cycles = 1 (2 or 3). INFSNZ, 16-Bit Instruction Word.MSb = 0100. INFSNZ,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\n16-Bit Instruction Word.MSb = 10da. INFSNZ, 16-Bit Instruction Word. = ffff. INFSNZ, 16-Bit Instruction Word.LSb = ffff. INFSNZ, Status Affected.Status Affected = None. INFSNZ, Notes.Notes = 1, 2. IORWF, Mnemonic,.Operands = f, d, a. IORWF, Description.Description = Inclusive OR WREG with f 1. IORWF, Cycles.Cycles = . IORWF, 16-Bit Instruction Word.MSb = 0001. IORWF, 16-Bit Instruction Word.MSb = 00da. IORWF, 16-Bit Instruction Word. = ffff. IORWF, 16-Bit Instruction Word.LSb = ffff. IORWF, Status Affected.Status Affected = Z, N. IORWF, Notes.Notes = 1, 2. MOVF, Mnemonic,.Operands = f, d, a. MOVF, Description.Description = Move f. MOVF, Cycles.Cycles = .",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nMOVF, 16-Bit Instruction Word.MSb = 0101. MOVF, 16-Bit Instruction Word.MSb = 00da. MOVF, 16-Bit Instruction Word. = ffff. MOVF, 16-Bit Instruction Word.LSb = ffff. MOVF, Status Affected.Status Affected = Z, N. MOVF, Notes.Notes = 1. MOVFF, Mnemonic,.Operands = f s , f d. MOVFF, Description.Description = Move f s (source) to 1st word f (destination) 2nd word 1 2. MOVFF, Cycles.Cycles = . MOVFF, 16-Bit Instruction Word.MSb = 1100. MOVFF, 16-Bit Instruction Word.MSb = ffff. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word.LSb = ffff. MOVFF, Status Affected.Status Affected = None. MOVFF, Notes.Notes = . MOVWF, Mnemonic,.Operands = f, a. MOVWF,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nDescription.Description = d Move WREG to f 1. MOVWF, Cycles.Cycles = . MOVWF, 16-Bit Instruction Word.MSb = 1111 0110. MOVWF, 16-Bit Instruction Word.MSb = ffff 111a. MOVWF, 16-Bit Instruction Word. = ffff ffff. MOVWF, 16-Bit Instruction Word.LSb = ffff. MOVWF, Status Affected.Status Affected = . MOVWF, Notes.Notes = . , Mnemonic,.Operands = . , Description.Description = with f. , Cycles.Cycles = . , 16-Bit Instruction Word.MSb = . , 16-Bit Instruction Word.MSb = . , 16-Bit Instruction Word. = ffff. , 16-Bit Instruction Word.LSb = ffff. , Status Affected.Status Affected = None. , Notes.Notes = . MULWF, Mnemonic,.Operands = f, a. MULWF, Description.Description = Multiply WREG. MULWF, Cycles.Cycles = 1.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nMULWF, 16-Bit Instruction Word.MSb = 0000. MULWF, 16-Bit Instruction Word.MSb = 001a. MULWF, 16-Bit Instruction Word. = . MULWF, 16-Bit Instruction Word.LSb = ffff. MULWF, Status Affected.Status Affected = None. MULWF, Notes.Notes = 1, 2. NEGF, Mnemonic,.Operands = f, a f, d, a. NEGF, Description.Description = Negate f. NEGF, Cycles.Cycles = 1. NEGF, 16-Bit Instruction Word.MSb = 0110 0011. NEGF, 16-Bit Instruction Word.MSb = 110a. NEGF, 16-Bit Instruction Word. = ffff. NEGF, 16-Bit Instruction Word.LSb = ffff. NEGF, Status Affected.Status Affected = C, DC, Z, OV, N. NEGF, Notes.Notes = . RLCF RLNCF, Mnemonic,.Operands = f, d, a. RLCF",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nRLNCF, Description.Description = Rotate Left f through Carry. RLCF RLNCF, Cycles.Cycles = 1. RLCF RLNCF, 16-Bit Instruction Word.MSb = 0100. RLCF RLNCF, 16-Bit Instruction Word.MSb = 01da. RLCF RLNCF, 16-Bit Instruction Word. = ffff. RLCF RLNCF, 16-Bit Instruction Word.LSb = ffff. RLCF RLNCF, Status Affected.Status Affected = C, Z, N. RLCF RLNCF, Notes.Notes = 1, 2. , Mnemonic,.Operands = . , Description.Description = Rotate Left f (No Carry). , Cycles.Cycles = 1. , 16-Bit Instruction Word.MSb = . , 16-Bit Instruction Word.MSb = 01da. , 16-Bit Instruction Word. = ffff. , 16-Bit Instruction Word.LSb = ffff. , Status Affected.Status Affected = Z, N. , Notes.Notes = . RRCF,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nMnemonic,.Operands = f, d, a. RRCF, Description.Description = Rotate Right f through Carry. RRCF, Cycles.Cycles = 1. RRCF, 16-Bit Instruction Word.MSb = 0011. RRCF, 16-Bit Instruction Word.MSb = 00da. RRCF, 16-Bit Instruction Word. = ffff. RRCF, 16-Bit Instruction Word.LSb = ffff. RRCF, Status Affected.Status Affected = C, Z, N. RRCF, Notes.Notes = . RRNCF, Mnemonic,.Operands = f, d, a. RRNCF, Description.Description = Rotate Right f (No Carry). RRNCF, Cycles.Cycles = 1. RRNCF, 16-Bit Instruction Word.MSb = 0100. RRNCF, 16-Bit Instruction Word.MSb = 00da. RRNCF, 16-Bit Instruction Word. = ffff. RRNCF, 16-Bit Instruction Word.LSb = ffff. RRNCF, Status Affected.Status Affected = Z,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nN. RRNCF, Notes.Notes = . SETF, Mnemonic,.Operands = f, a. SETF, Description.Description = f. SETF, Cycles.Cycles = 1. SETF, 16-Bit Instruction Word.MSb = 0110. SETF, 16-Bit Instruction Word.MSb = 100a. SETF, 16-Bit Instruction Word. = ffff. SETF, 16-Bit Instruction Word.LSb = ffff. SETF, Status Affected.Status Affected = None. SETF, Notes.Notes = 1, 2. SUBFWB, Mnemonic,.Operands = f, d, a. SUBFWB, Description.Description = Set Subtract f from WREG with Borrow. SUBFWB, Cycles.Cycles = 1. SUBFWB, 16-Bit Instruction Word.MSb = 0101. SUBFWB, 16-Bit Instruction Word.MSb = 01da. SUBFWB, 16-Bit Instruction Word. = ffff. SUBFWB, 16-Bit Instruction Word.LSb = ffff.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nSUBFWB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBFWB, Notes.Notes = . SUBWF, Mnemonic,.Operands = f, d, a. SUBWF, Description.Description = Subtract WREG from f. SUBWF, Cycles.Cycles = 1. SUBWF, 16-Bit Instruction Word.MSb = 0101. SUBWF, 16-Bit Instruction Word.MSb = 11da. SUBWF, 16-Bit Instruction Word. = ffff. SUBWF, 16-Bit Instruction Word.LSb = ffff. SUBWF, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWF, Notes.Notes = 1, 2. SUBWFB, Mnemonic,.Operands = f, d, a. SUBWFB, Description.Description = Subtract WREG from f with Borrow. SUBWFB, Cycles.Cycles = 1. SUBWFB, 16-Bit Instruction Word.MSb = 0101. SUBWFB, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nWord.MSb = 10da. SUBWFB, 16-Bit Instruction Word. = ffff. SUBWFB, 16-Bit Instruction Word.LSb = ffff. SUBWFB, Status Affected.Status Affected = C, DC, Z, OV, N. SUBWFB, Notes.Notes = . SWAPF, Mnemonic,.Operands = f, d, a. SWAPF, Description.Description = Swap Nibbles in f. SWAPF, Cycles.Cycles = 1. SWAPF, 16-Bit Instruction Word.MSb = 0011. SWAPF, 16-Bit Instruction Word.MSb = 10da. SWAPF, 16-Bit Instruction Word. = ffff. SWAPF, 16-Bit Instruction Word.LSb = ffff. SWAPF, Status Affected.Status Affected = None. SWAPF, Notes.Notes = 4. TSTFSZ, Mnemonic,.Operands = f, a. TSTFSZ, Description.Description = Test f, Skip if 0. TSTFSZ, Cycles.Cycles = 1 (2 or 3). TSTFSZ, 16-Bit Instruction Word.MSb",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\n= 0110. TSTFSZ, 16-Bit Instruction Word.MSb = 011a. TSTFSZ, 16-Bit Instruction Word. = ffff. TSTFSZ, 16-Bit Instruction Word.LSb = ffff. TSTFSZ, Status Affected.Status Affected = None. TSTFSZ, Notes.Notes = 1, 2. XORWF, Mnemonic,.Operands = f, d, a. XORWF, Description.Description = Exclusive OR WREG with f. XORWF, Cycles.Cycles = 1. XORWF, 16-Bit Instruction Word.MSb = 0001. XORWF, 16-Bit Instruction Word.MSb = 10da. XORWF, 16-Bit Instruction Word. = ffff. XORWF, 16-Bit Instruction Word.LSb = ffff. XORWF, Status Affected.Status Affected = Z, N. XORWF, Notes.Notes = ",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and, where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP , unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET\n5: Table write instructions are unavailable in 64-pin devices in normal operating modes. See Section 7.4 'Writing to Program Memory Space (PIC18F8310/8410 only)' and Section 7.6 'Writing and Erasing On-Chip Program Memory (ICSP Mode)' for more information.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBIT-ORIENTED OPERATIONS, Mnemonic, Operands. = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Description.Description = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Cycles.Cycles = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, 16-Bit Instruction Word.LSb = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Status Affected.Status Affected = BIT-ORIENTED OPERATIONS. BIT-ORIENTED OPERATIONS, Notes.Notes = BIT-ORIENTED OPERATIONS. BCF, Mnemonic, Operands. = f, b, a. BCF, Description.Description = Bit Clear f 1. BCF, Cycles.Cycles = . BCF, 16-Bit Instruction Word.MSb = 1001. BCF, 16-Bit Instruction Word.MSb = bbba. BCF, 16-Bit Instruction Word.MSb = ffff. BCF, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.LSb = ffff. BCF, Status Affected.Status Affected = None. BCF, Notes.Notes = 1, 2. BSF, Mnemonic, Operands. = f, b, a. BSF, Description.Description = Bit Set f 1. BSF, Cycles.Cycles = . BSF, 16-Bit Instruction Word.MSb = 1000. BSF, 16-Bit Instruction Word.MSb = bbba. BSF, 16-Bit Instruction Word.MSb = ffff. BSF, 16-Bit Instruction Word.LSb = ffff. BSF, Status Affected.Status Affected = None. BSF, Notes.Notes = 1, 2. BTFSC, Mnemonic, Operands. = f, b, a. BTFSC, Description.Description = Bit Test f, Skip if Clear 1. BTFSC, Cycles.Cycles = (2 or 3). BTFSC, 16-Bit Instruction Word.MSb = 1011. BTFSC, 16-Bit Instruction Word.MSb = bbba. BTFSC, 16-Bit Instruction Word.MSb",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= ffff. BTFSC, 16-Bit Instruction Word.LSb = ffff. BTFSC, Status Affected.Status Affected = None. BTFSC, Notes.Notes = 3, 4. BTFSS, Mnemonic, Operands. = f, b, a. BTFSS, Description.Description = Bit Test f, Skip if Set 1. BTFSS, Cycles.Cycles = (2 or 3). BTFSS, 16-Bit Instruction Word.MSb = 1010. BTFSS, 16-Bit Instruction Word.MSb = bbba. BTFSS, 16-Bit Instruction Word.MSb = ffff. BTFSS, 16-Bit Instruction Word.LSb = ffff. BTFSS, Status Affected.Status Affected = None. BTFSS, Notes.Notes = 3, 4. BTG, Mnemonic, Operands. = f, d, a. BTG, Description.Description = Bit Toggle f 1. BTG, Cycles.Cycles = . BTG, 16-Bit Instruction Word.MSb = 0111. BTG, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = bbba. BTG, 16-Bit Instruction Word.MSb = ffff. BTG, 16-Bit Instruction Word.LSb = ffff. BTG, Status Affected.Status Affected = None. BTG, Notes.Notes = 1, 2. CONTROL OPERATIONS, Mnemonic, Operands. = CONTROL OPERATIONS. CONTROL OPERATIONS, Description.Description = CONTROL OPERATIONS. CONTROL OPERATIONS, Cycles.Cycles = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.LSb = CONTROL OPERATIONS. CONTROL OPERATIONS, Status Affected.Status Affected = CONTROL OPERATIONS. CONTROL OPERATIONS, Notes.Notes = CONTROL OPERATIONS. BC, Mnemonic, Operands. = n. BC, Description.Description = Branch if Carry 1. BC, Cycles.Cycles = (2). BC, 16-Bit Instruction Word.MSb = 1110. BC, 16-Bit Instruction Word.MSb = 0010. BC,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n16-Bit Instruction Word.MSb = nnnn. BC, 16-Bit Instruction Word.LSb = nnnn. BC, Status Affected.Status Affected = None. BC, Notes.Notes = . BN, Mnemonic, Operands. = n. BN, Description.Description = Branch if Negative 1. BN, Cycles.Cycles = (2). BN, 16-Bit Instruction Word.MSb = 1110. BN, 16-Bit Instruction Word.MSb = 0110. BN, 16-Bit Instruction Word.MSb = nnnn. BN, 16-Bit Instruction Word.LSb = nnnn. BN, Status Affected.Status Affected = None. BN, Notes.Notes = . BNC, Mnemonic, Operands. = n. BNC, Description.Description = Branch if Not Carry 1. BNC, Cycles.Cycles = (2). BNC, 16-Bit Instruction Word.MSb = 1110. BNC, 16-Bit Instruction Word.MSb = 0011. BNC, 16-Bit Instruction Word.MSb = nnnn. BNC,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n16-Bit Instruction Word.LSb = nnnn. BNC, Status Affected.Status Affected = None. BNC, Notes.Notes = . BNN, Mnemonic, Operands. = n. BNN, Description.Description = Branch if Not Negative 1. BNN, Cycles.Cycles = (2). BNN, 16-Bit Instruction Word.MSb = 1110. BNN, 16-Bit Instruction Word.MSb = 0111. BNN, 16-Bit Instruction Word.MSb = nnnn. BNN, 16-Bit Instruction Word.LSb = nnnn. BNN, Status Affected.Status Affected = None. BNN, Notes.Notes = . BNOV, Mnemonic, Operands. = n. BNOV, Description.Description = Branch if Not Overflow 1. BNOV, Cycles.Cycles = (2). BNOV, 16-Bit Instruction Word.MSb = 1110. BNOV, 16-Bit Instruction Word.MSb = 0101. BNOV, 16-Bit Instruction Word.MSb = nnnn. BNOV, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.LSb = nnnn. BNOV, Status Affected.Status Affected = None. BNOV, Notes.Notes = . BNZ, Mnemonic, Operands. = n. BNZ, Description.Description = Branch if Not Zero 1. BNZ, Cycles.Cycles = (2). BNZ, 16-Bit Instruction Word.MSb = 1110. BNZ, 16-Bit Instruction Word.MSb = 0001. BNZ, 16-Bit Instruction Word.MSb = nnnn. BNZ, 16-Bit Instruction Word.LSb = nnnn. BNZ, Status Affected.Status Affected = None. BNZ, Notes.Notes = . BOV, Mnemonic, Operands. = n. BOV, Description.Description = Branch if Overflow 1. BOV, Cycles.Cycles = (2). BOV, 16-Bit Instruction Word.MSb = 1110. BOV, 16-Bit Instruction Word.MSb = 0100. BOV, 16-Bit Instruction Word.MSb = nnnn. BOV, 16-Bit Instruction Word.LSb =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nnnnn. BOV, Status Affected.Status Affected = None. BOV, Notes.Notes = . BRA, Mnemonic, Operands. = n. BRA, Description.Description = Branch Unconditionally 2. BRA, Cycles.Cycles = . BRA, 16-Bit Instruction Word.MSb = 1101. BRA, 16-Bit Instruction Word.MSb = 0nnn. BRA, 16-Bit Instruction Word.MSb = nnnn. BRA, 16-Bit Instruction Word.LSb = nnnn. BRA, Status Affected.Status Affected = None. BRA, Notes.Notes = . BZ, Mnemonic, Operands. = n. BZ, Description.Description = Branch if Zero 1. BZ, Cycles.Cycles = (2). BZ, 16-Bit Instruction Word.MSb = 1110. BZ, 16-Bit Instruction Word.MSb = 0000. BZ, 16-Bit Instruction Word.MSb = nnnn. BZ, 16-Bit Instruction Word.LSb = nnnn. BZ, Status Affected.Status Affected = None.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nBZ, Notes.Notes = . CALL, Mnemonic, Operands. = n, s. CALL, Description.Description = Call Subroutine 1st word 2. CALL, Cycles.Cycles = . CALL, 16-Bit Instruction Word.MSb = 1110. CALL, 16-Bit Instruction Word.MSb = 110s. CALL, 16-Bit Instruction Word.MSb = kkkk. CALL, 16-Bit Instruction Word.LSb = kkkk. CALL, Status Affected.Status Affected = None. CALL, Notes.Notes = . , Mnemonic, Operands. = . , Description.Description = 2nd word. , Cycles.Cycles = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected.Status Affected = . , Notes.Notes = . CLRWDT, Mnemonic, Operands. = -. CLRWDT, Description.Description = Clear Watchdog Timer 1.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nCLRWDT, Cycles.Cycles = . CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.LSb = 0100. CLRWDT, Status Affected.Status Affected = TO, PD. CLRWDT, Notes.Notes = . DAW, Mnemonic, Operands. = -. DAW, Description.Description = Decimal Adjust WREG 1. DAW, Cycles.Cycles = . DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word.LSb = 0111. DAW, Status Affected.Status Affected = C. DAW, Notes.Notes = . GOTO, Mnemonic, Operands. = n. GOTO, Description.Description = Go to Address 1st word",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n2. GOTO, Cycles.Cycles = . GOTO, 16-Bit Instruction Word.MSb = 1110. GOTO, 16-Bit Instruction Word.MSb = 1111. GOTO, 16-Bit Instruction Word.MSb = kkkk. GOTO, 16-Bit Instruction Word.LSb = kkkk. GOTO, Status Affected.Status Affected = None. GOTO, Notes.Notes = . , Mnemonic, Operands. = . , Description.Description = 2nd word. , Cycles.Cycles = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected.Status Affected = . , Notes.Notes = . NOP, Mnemonic, Operands. = -. NOP, Description.Description = No Operation 1. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = 0000. NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word.LSb = 0000. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = . NOP, Mnemonic, Operands. = -. NOP, Description.Description = No Operation 1. NOP, Cycles.Cycles = . NOP, 16-Bit Instruction Word.MSb = 1111. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word.LSb = xxxx. NOP, Status Affected.Status Affected = None. NOP, Notes.Notes = 4. POP, Mnemonic, Operands. = -. POP, Description.Description = Pop Top of Return Stack (TOS) 1. POP, Cycles.Cycles = . POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.MSb = 0000. POP, 16-Bit Instruction Word.LSb = 0110. POP, Status Affected.Status Affected = None. POP, Notes.Notes = . PUSH, Mnemonic, Operands. = -. PUSH, Description.Description = Push Top of Return Stack (TOS) 1. PUSH, Cycles.Cycles = . PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.LSb = 0101. PUSH, Status Affected.Status Affected = None. PUSH, Notes.Notes = . RCALL, Mnemonic, Operands. = n. RCALL, Description.Description = Relative Call 2. RCALL, Cycles.Cycles = . RCALL, 16-Bit Instruction Word.MSb = 1101. RCALL, 16-Bit Instruction Word.MSb = 1nnn. RCALL, 16-Bit Instruction Word.MSb = nnnn. RCALL, 16-Bit Instruction Word.LSb =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nnnnn. RCALL, Status Affected.Status Affected = None. RCALL, Notes.Notes = . RESET, Mnemonic, Operands. = . RESET, Description.Description = Software Device Reset 1. RESET, Cycles.Cycles = . RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 1111. RESET, 16-Bit Instruction Word.LSb = 1111. RESET, Status Affected.Status Affected = All. RESET, Notes.Notes = . RETFIE, Mnemonic, Operands. = s. RETFIE, Description.Description = Return from Interrupt Enable 2. RETFIE, Cycles.Cycles = . RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0001. RETFIE, 16-Bit Instruction Word.LSb = 000s. RETFIE, Status Affected.Status Affected =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nGIE/GIEH, PEIE/GIEL. RETFIE, Notes.Notes = . RETLW, Mnemonic, Operands. = k. RETLW, Description.Description = Return with Literal in WREG 2. RETLW, Cycles.Cycles = . RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word.MSb = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW, Notes.Notes = . RETURN, Mnemonic, Operands. = s. RETURN, Description.Description = Return from Subroutine 2. RETURN, Cycles.Cycles = . RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = 0001. RETURN, 16-Bit Instruction Word.LSb = 001s. RETURN, Status Affected.Status Affected",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= None. RETURN, Notes.Notes = . SLEEP, Mnemonic, Operands. = -. SLEEP, Description.Description = Go into Standby mode 1. SLEEP, Cycles.Cycles = . SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.LSb = 0011. SLEEP, Status Affected.Status Affected = TO, PD. SLEEP, Notes.Notes = ",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and, where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP , unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n5: Table write instructions are unavailable in 64-pin devices in normal operating modes. See Section 7.4 'Writing to Program Memory Space (PIC18F8310/8410 only)' and Section 7.6 'Writing and Erasing On-Chip Program Memory (ICSP Mode)' for more information.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nLITERAL OPERATIONS, Mnemonic,.Operands = LITERAL OPERATIONS. LITERAL OPERATIONS, Description.Description = LITERAL OPERATIONS. LITERAL OPERATIONS, Cycles.Cycles = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.LSb = LITERAL OPERATIONS. LITERAL OPERATIONS, Status Affected.Status Affected = LITERAL OPERATIONS. LITERAL OPERATIONS, Notes.Notes = LITERAL OPERATIONS. ADDLW, Mnemonic,.Operands = k. ADDLW, Description.Description = Add Literal and WREG. ADDLW, Cycles.Cycles = 1. ADDLW, 16-Bit Instruction Word.MSb = 0000. ADDLW, 16-Bit Instruction Word.MSb = 1111. ADDLW, 16-Bit Instruction Word. = kkkk. ADDLW, 16-Bit Instruction Word.LSb = kkkk. ADDLW, Status Affected.Status Affected = C, DC, Z, OV, N. ADDLW,",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNotes.Notes = . ANDLW, Mnemonic,.Operands = k. ANDLW, Description.Description = AND Literal with WREG. ANDLW, Cycles.Cycles = 1. ANDLW, 16-Bit Instruction Word.MSb = 0000. ANDLW, 16-Bit Instruction Word.MSb = 1011. ANDLW, 16-Bit Instruction Word. = kkkk. ANDLW, 16-Bit Instruction Word.LSb = kkkk. ANDLW, Status Affected.Status Affected = Z, N. ANDLW, Notes.Notes = . IORLW, Mnemonic,.Operands = k. IORLW, Description.Description = Inclusive OR Literal with WREG. IORLW, Cycles.Cycles = 1. IORLW, 16-Bit Instruction Word.MSb = 0000. IORLW, 16-Bit Instruction Word.MSb = 1001. IORLW, 16-Bit Instruction Word. = kkkk. IORLW, 16-Bit Instruction Word.LSb = kkkk. IORLW, Status Affected.Status",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nAffected = Z, N. IORLW, Notes.Notes = . LFSR, Mnemonic,.Operands = f, k. LFSR, Description.Description = Move Literal (12-bit) 2nd word to FSR(f) 1st word. LFSR, Cycles.Cycles = 2. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word.MSb = 1110. LFSR, 16-Bit Instruction Word. = 00ff. LFSR, 16-Bit Instruction Word.LSb = kkkk. LFSR, Status Affected.Status Affected = None. LFSR, Notes.Notes = . MOVLB, Mnemonic,.Operands = k. MOVLB, Description.Description = Move Literal to BSR<3:0>. MOVLB, Cycles.Cycles = 1. MOVLB, 16-Bit Instruction Word.MSb = 1111 0000. MOVLB, 16-Bit Instruction Word.MSb = 0000 0001. MOVLB, 16-Bit Instruction Word. =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nkkkk 0000. MOVLB, 16-Bit Instruction Word.LSb = kkkk kkkk. MOVLB, Status Affected.Status Affected = None. MOVLB, Notes.Notes = . MOVLW, Mnemonic,.Operands = k. MOVLW, Description.Description = Move Literal to WREG. MOVLW, Cycles.Cycles = 1. MOVLW, 16-Bit Instruction Word.MSb = 0000. MOVLW, 16-Bit Instruction Word.MSb = 1110. MOVLW, 16-Bit Instruction Word. = kkkk. MOVLW, 16-Bit Instruction Word.LSb = kkkk. MOVLW, Status Affected.Status Affected = None. MOVLW, Notes.Notes = . MULLW, Mnemonic,.Operands = k. MULLW, Description.Description = Multiply Literal with WREG. MULLW, Cycles.Cycles = 1. MULLW, 16-Bit Instruction Word.MSb = 0000. MULLW, 16-Bit",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nInstruction Word.MSb = 1101. MULLW, 16-Bit Instruction Word. = kkkk. MULLW, 16-Bit Instruction Word.LSb = kkkk. MULLW, Status Affected.Status Affected = None. MULLW, Notes.Notes = . RETLW, Mnemonic,.Operands = k. RETLW, Description.Description = Return with Literal in WREG. RETLW, Cycles.Cycles = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW, Notes.Notes = . SUBLW, Mnemonic,.Operands = k. SUBLW, Description.Description = Subtract WREG from Literal. SUBLW, Cycles.Cycles = 1. SUBLW, 16-Bit Instruction Word.MSb = 0000.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nSUBLW, 16-Bit Instruction Word.MSb = 1000. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, 16-Bit Instruction Word.LSb = kkkk. SUBLW, Status Affected.Status Affected = C, DC, Z, OV, N. SUBLW, Notes.Notes = . XORLW, Mnemonic,.Operands = k. XORLW, Description.Description = Exclusive OR Literal with WREG. XORLW, Cycles.Cycles = 1. XORLW, 16-Bit Instruction Word.MSb = 0000. XORLW, 16-Bit Instruction Word.MSb = 1010. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, 16-Bit Instruction Word.LSb = kkkk. XORLW, Status Affected.Status Affected = Z, N. XORLW, Notes.Notes = . DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Mnemonic,.Operands = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Description.Description",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n= DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Cycles.Cycles = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.LSb = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Status Affected.Status Affected = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS, Notes.Notes = DATA MEMORY \uf0ab PROGRAM MEMORY OPERATIONS. TBLRD*, Mnemonic,.Operands = TBLRD*. TBLRD*, Description.Description = Table Read. TBLRD*, Cycles.Cycles = 2. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word.MSb = 0000. TBLRD*, 16-Bit Instruction Word. = 0000. TBLRD*, 16-Bit Instruction",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nWord.LSb = 1000. TBLRD*, Status Affected.Status Affected = None. TBLRD*, Notes.Notes = . TBLRD*+, Mnemonic,.Operands = TBLRD*+. TBLRD*+, Description.Description = Table Read with Post-Increment. TBLRD*+, Cycles.Cycles = . TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word.MSb = 0000. TBLRD*+, 16-Bit Instruction Word. = 0000. TBLRD*+, 16-Bit Instruction Word.LSb = 1001. TBLRD*+, Status Affected.Status Affected = None. TBLRD*+, Notes.Notes = . TBLRD*-, Mnemonic,.Operands = TBLRD*-. TBLRD*-, Description.Description = Table Read with Post-Decrement. TBLRD*-, Cycles.Cycles = . TBLRD*-, 16-Bit Instruction Word.MSb =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n0000. TBLRD*-, 16-Bit Instruction Word.MSb = 0000. TBLRD*-, 16-Bit Instruction Word. = 0000. TBLRD*-, 16-Bit Instruction Word.LSb = 1010. TBLRD*-, Status Affected.Status Affected = None. TBLRD*-, Notes.Notes = . TBLRD+*, Mnemonic,.Operands = TBLRD+*. TBLRD+*, Description.Description = Table Read with Pre-Increment. TBLRD+*, Cycles.Cycles = . TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word.MSb = 0000. TBLRD+*, 16-Bit Instruction Word. = 0000. TBLRD+*, 16-Bit Instruction Word.LSb = 1011. TBLRD+*, Status Affected.Status Affected = None. TBLRD+*, Notes.Notes = . TBLWT*, Mnemonic,.Operands =",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nTBLWT*. TBLWT*, Description.Description = Table Write. TBLWT*, Cycles.Cycles = 2. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word.MSb = 0000. TBLWT*, 16-Bit Instruction Word. = 0000. TBLWT*, 16-Bit Instruction Word.LSb = 1100. TBLWT*, Status Affected.Status Affected = None. TBLWT*, Notes.Notes = 5. TBLWT*+, Mnemonic,.Operands = TBLWT*+. TBLWT*+, Description.Description = Table Write with Post-Increment. TBLWT*+, Cycles.Cycles = . TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word.MSb = 0000. TBLWT*+, 16-Bit Instruction Word. = 0000. TBLWT*+, 16-Bit Instruction Word.LSb = 1101.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nTBLWT*+, Status Affected.Status Affected = None. TBLWT*+, Notes.Notes = 5. TBLWT*-, Mnemonic,.Operands = TBLWT*-. TBLWT*-, Description.Description = Table Write with Post-Decrement. TBLWT*-, Cycles.Cycles = . TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word.MSb = 0000. TBLWT*-, 16-Bit Instruction Word. = 0000. TBLWT*-, 16-Bit Instruction Word.LSb = 1110. TBLWT*-, Status Affected.Status Affected = None. TBLWT*-, Notes.Notes = 5. TBLWT+*, Mnemonic,.Operands = TBLWT+*. TBLWT+*, Description.Description = Table Write with Pre-Increment. TBLWT+*, Cycles.Cycles = . TBLWT+*, 16-Bit Instruction Word.MSb = 0000.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nTBLWT+*, 16-Bit Instruction Word.MSb = 0000. TBLWT+*, 16-Bit Instruction Word. = 0000. TBLWT+*, 16-Bit Instruction Word.LSb = 1111. TBLWT+*, Status Affected.Status Affected = None. TBLWT+*, Notes.Notes = 5",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is ' 1 ' for a pin configured as input and is driven low by an external device, the data will be written back with a ' 0 '.\n2: If this instruction is executed on the TMR0 register (and, where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If the Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are two-word instructions. The second word of these instructions will be executed as a NOP , unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 25-2: PIC18FXXXX INSTRUCTION SET (CONTINUED)\n5: Table write instructions are unavailable in 64-pin devices in normal operating modes. See Section 7.4 'Writing to Program Memory Space (PIC18F8310/8410 only)' and Section 7.6 'Writing and Erasing On-Chip Program Memory (ICSP Mode)' for more information.\nNote:\nAll PIC18 instructions may take an optional label argument, preceding the instruction mnemonic, for use in symbolic addressing. If a label is used, the instruction format then becomes: {label}    instruction    argument(s)",
    "25.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD literal to W = ADDLW k. Syntax:, ADD literal to W = ADDLW k. Syntax:, ADD literal to W = ADDLW k. Syntax:, ADD literal to W = ADDLW k. Operands:, ADD literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, ADD literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, ADD literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, ADD literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, ADD literal to W = (W) + k \uf0ae W. Operation:, ADD literal to W = (W) + k \uf0ae W. Operation:, ADD literal to W = (W) + k \uf0ae W. Operation:, ADD literal to W = (W) + k \uf0ae W. Status Affected:, ADD literal to W = N, OV, C, DC, Z. Status Affected:, ADD literal to W = N, OV, C, DC, Z. Status Affected:, ADD literal to W = N, OV, C, DC, Z. Status Affected:, ADD literal to W = N, OV, C, DC, Z. Encoding:, ADD",
    "25.1.1 STANDARD INSTRUCTION SET\nliteral to W = 0000. Encoding:, ADD literal to W = 1111. Encoding:, ADD literal to W = kkkk. Encoding:, ADD literal to W = kkkk. Description:, ADD literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Description:, ADD literal to W = The contents of Ware added to the 8-bit literal 'k' and the result is placed in W.. Words:, ADD literal to W = 1. Words:, ADD literal to W = 1. Words:, ADD literal to W = 1. Words:, ADD literal to W = 1. Cycles:, ADD literal to W = 1. Cycles:, ADD literal to W = 1. Cycles:, ADD literal to W = 1. Cycles:, ADD literal to W = 1. Q Cycle",
    "25.1.1 STANDARD INSTRUCTION SET\nActivity:, ADD literal to W = . Q Cycle Activity:, ADD literal to W = . Q Cycle Activity:, ADD literal to W = . Q Cycle Activity:, ADD literal to W = . Q1, ADD literal to W = Q2. Q1, ADD literal to W = Q3. Q1, ADD literal to W = Q3. Q1, ADD literal to W = Q4. Decode, ADD literal to W = Read literal 'k'. Decode, ADD literal to W = Process Data Write. Decode, ADD literal to W = Process Data Write. Decode, ADD literal to W = to W. Example:, ADD literal to W = ADDLW. Example:, ADD literal to W = 15h. Example:, ADD literal to W = 15h. Example:, ADD literal to W = 15h. Before Instruction, ADD literal to W = Before Instruction. Before Instruction, ADD literal to W = . Before Instruction, ADD literal to W = . Before Instruction, ADD literal to W = . W, ADD literal to W = 10h. W, ADD literal to W = . W, ADD literal to W = . W, ADD literal",
    "25.1.1 STANDARD INSTRUCTION SET\nto W = . After Instruction, ADD literal to W = After Instruction. After Instruction, ADD literal to W = . After Instruction, ADD literal to W = . After Instruction, ADD literal to W = . W =, ADD literal to W = 25h. W =, ADD literal to W = . W =, ADD literal to W = . W =, ADD literal to W = ",
    "25.1.1 STANDARD INSTRUCTION SET\nSyntax:, ADD Wto f = ADDWF. Syntax:, ADD Wto f = f {,d {,a}}. Syntax:, ADD Wto f = . Syntax:, ADD Wto f = . Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, ADD Wto f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Operation:, ADD Wto f = (W) + (f) \uf0ae dest. Operation:, ADD Wto f = . Operation:, ADD Wto f = . Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD",
    "25.1.1 STANDARD INSTRUCTION SET\nWto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Encoding:, ADD Wto f = 0010. Encoding:, ADD Wto f = 01da. Encoding:, ADD Wto f = ffff. Encoding:, ADD Wto f = ffff. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd'",
    "25.1.1 STANDARD INSTRUCTION SET\nis ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, ADD Wto f = Add Wto register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, ADD Wto f = Add Wto register 'f'. If",
    "25.1.1 STANDARD INSTRUCTION SET\n'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, ADD Wto f = 1. Words:, ADD Wto f = . Words:, ADD Wto f = . Words:, ADD Wto f = . Cycles:, ADD Wto f = 1. Cycles:, ADD Wto f = . Cycles:, ADD Wto f = . Cycles:, ADD Wto f = ",
    "Q Cycle Activity:\nExample:, Q2.Read register 'f' = ADDWF. Example:, Q3.Process Data = REG, 0, 0. Example:, Q4.Write to destination = . Before Instruction, Q2.Read register 'f' = Before Instruction. Before Instruction, Q3.Process Data = . Before Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 17h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = . After Instruction, Q4.Write to destination = . W, Q2.Read register 'f' = = 0D9h. W, Q3.Process Data = . W, Q4.Write to destination = . REG, Q2.Read register 'f' = = 0C2h. REG, Q3.Process Data = . REG, Q4.Write",
    "Q Cycle Activity:\nto destination = ",
    "PIC18F6310/6410/8310/8410\nADDWFC, 1 = ADDWFC. ADDWFC, 2 = ADD Wand Carry bit to f. ADDWFC, 3 = ADD Wand Carry bit to f. ADDWFC, 4 = ADD Wand Carry bit to f. Syntax:, 1 = Syntax:. Syntax:, 2 = ADDWFC f {,d {,a}}. Syntax:, 3 = ADDWFC f {,d {,a}}. Syntax:, 4 = ADDWFC f {,d {,a}}. Operands:, 1 = Operands:. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1] a \uf0ce\uf020 [0,1]. Operation:, 1 = Operation:. Operation:, 2 = (W) + (f) + (C) \uf0ae dest. Operation:, 3 = (W) + (f) + (C) \uf0ae dest. Operation:, 4 = (W)",
    "PIC18F6310/6410/8310/8410\n+ (f) + (C) \uf0ae dest. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = N,OV, C, DC, Z. Status Affected:, 3 = N,OV, C, DC, Z. Status Affected:, 4 = N,OV, C, DC, Z. Encoding:, 1 = Encoding:. Encoding:, 2 = 0010. Encoding:, 3 = 00da. Encoding:, 4 = ffff ffff. Description:, 1 = Description:. Description:, 2 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See",
    "PIC18F6310/6410/8310/8410\nSection 25.2.3 for details.. Description:, 3 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, 4 = Add W, the Carry flag and data memory location 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 1 = Decode. , 2 = Read register 'f'. , 3 = Process Data. , 4 = Write to destination",
    "PIC18F6310/6410/8310/8410\nSyntax:, AND literal with W = ANDLW. Syntax:, AND literal with W = k. Syntax:, AND literal with W = . Syntax:, AND literal with W = . Operands:, AND literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, AND literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, AND literal with W = . Operands:, AND literal with W = . Operation:, AND literal with W = (W) .AND. k \uf0ae W. Operation:, AND literal with W = (W) .AND. k \uf0ae W. Operation:, AND literal with W = . Operation:, AND literal with W = . Status Affected:, AND literal with W = N, Z. Status Affected:, AND literal with W = . Status Affected:, AND literal with W = . Status Affected:, AND literal with W = . Encoding:, AND literal with W = 0000. Encoding:, AND literal with W = 1011. Encoding:, AND literal with W = kkkk. Encoding:, AND literal with W = kkkk. Description:, AND literal with W = The contents of Ware ANDed",
    "PIC18F6310/6410/8310/8410\nwith the 8-bit literal 'k'. The result is placed in W.. Description:, AND literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Description:, AND literal with W = The contents of Ware ANDed with the 8-bit literal 'k'. The result is placed in W.. Words:, AND literal with W = 1. Words:, AND literal with W = . Words:, AND literal with W = . Words:, AND literal with W = . Cycles:, AND literal with W = 1. Cycles:, AND literal with W = . Cycles:, AND literal with W = . Cycles:, AND literal with W = . Q Cycle Activity:, AND literal with W = . Q Cycle Activity:, AND literal with W = . Q Cycle Activity:, AND literal with W = . Q Cycle Activity:, AND literal with W = . Q1, AND literal with W =",
    "PIC18F6310/6410/8310/8410\nQ2. Q1, AND literal with W = Q3. Q1, AND literal with W = . Q1, AND literal with W = Q4. Decode, AND literal with W = Read literal 'k'. Decode, AND literal with W = Process Data. Decode, AND literal with W = . Decode, AND literal with W = Write to W. Example:, AND literal with W = ANDLW. Example:, AND literal with W = 05Fh. Example:, AND literal with W = . Example:, AND literal with W = . Before Instruction, AND literal with W = Before Instruction. Before Instruction, AND literal with W = . Before Instruction, AND literal with W = . Before Instruction, AND literal with W = . W, AND literal with W = = A3h. W, AND literal with W = . W, AND literal with W = . W, AND literal with W = . After Instruction, AND literal with W = After Instruction. After Instruction, AND literal with W = . After Instruction, AND literal with W = . After Instruction, AND literal with W = . W, AND literal with W =",
    "PIC18F6310/6410/8310/8410\n= 03h. W, AND literal with W = . W, AND literal with W = . W, AND literal with W = ",
    "Example:\nADDWFC\nREG, 0, 1\nBefore Instruction\nCarry bit\n=\n1\nREG\n=\n02h\nW\n=\n4Dh\nAfter Instruction\nCarry bit\n=\n0\nREG\n=\n02h\nW\n=\n50h\nDescription:",
    "PIC18F6310/6410/8310/8410\nSyntax:, AND Wwith f = ANDWF. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Syntax:, AND Wwith f = f {,d {,a}}. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1]. Operands:, AND Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce\uf020 [0,1]. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Operation:, AND Wwith f = (W) .AND. (f) \uf0ae dest. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND",
    "PIC18F6310/6410/8310/8410\nWwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Status Affected:, AND Wwith f = N, Z. Encoding:, AND Wwith f = 0001. Encoding:, AND Wwith f = 01da. Encoding:, AND Wwith f = ffff. Encoding:, AND Wwith f = ffff",
    "Branch if Carry\nThe contents of W are AND'ed with register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\n1\n1\nWords:\nCycles:\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination\nExample:\nANDWF\nBefore Instruction\nW\n=\n17h\nREG\n=\nC2h\nAfter Instruction\nW\n=\n02h\nREG\n=\nC2h\nREG, 0, 0",
    "Branch if Carry\nSyntax:, 1 = Syntax:. Syntax:, 2 = BC n. Syntax:, 3 = BC n. Syntax:, 4 = BC n. Syntax:, 5 = BC n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Carry bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110.",
    "Branch if Carry\nEncoding:, 3 = 0010 nnnn. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description: If the will The 2's added, 1 = Description: If the will The 2's added. Description: If the will The 2's added, 2 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 3 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 4 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will",
    "Branch if Carry\nbe PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 5 = Carry bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity: If Jump:, 1 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 2 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . , 1 = Q1. , 2",
    "Branch if Carry\n= Q2. , 3 = Q3. , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal. , 3 = Process Data. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . , 1 = . , 2 = HERE. , 3 = BC. , 4 = . , 5 = . , 1 = Before Instruction.",
    "Branch if Carry\n, 2 = . , 3 = . , 4 = . , 5 = . PC, 1 = After Instruction. PC, 2 = =. PC, 3 = . PC, 4 = address (HERE). PC, 5 = address (HERE). If, 1 = If Carry. If, 2 = . If, 3 = . If, 4 = . If, 5 = . , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = (HERE. , 1 = . , 2 = . , 3 = . , 4 = 2). , 5 = 2). , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = 0;. , 4 = . , 5",
    "Branch if Carry\n= . , 1 = . , 2 = . , 3 = . , 4 = 12). , 5 = 12). , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. , 1 = Carry. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = 1;. , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = (HERE. , 1 = . , 2 = . , 3 = . , 4 = address. , 5 = address. PC, 1 = . PC, 2 = . PC, 3 = . PC, 4 = . PC, 5 = ",
    "Bit Clear f\nSyntax:\nBCF     f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b \uf0a3 7\na \uf0ce\uf020 [0,1]\nOperation:\n0 \uf0ae f<b>\nStatus Affected:",
    "None\nEncoding:\n1001\nbbba\nffff\nffff\nDescription:\nBit 'b' in register 'f' is cleared.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite\nregister 'f'\nExample:\nBCF\nFLAG_REG,  7, 0\nBefore Instruction FLAG_REG = C7h After Instruction FLAG_REG = 47h",
    "BN\nSyntax:, 1 = Syntax:. Syntax:, 2 = BN n. Syntax:, 3 = BN n. Syntax:, 4 = BN n. Syntax:, 5 = BN n. Syntax:, 6 = BN n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operands:, 6 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 6 = if Negative bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status",
    "BN\nAffected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Status Affected:, 6 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0110. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Encoding:, 6 = . Description:, 1 = Description:. Description:, 2 = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 3 = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 4 = If the Negative bit is ' 1 ', then the program will branch. The",
    "BN\n2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 6 = If the Negative bit is ' 1 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Words:, 6 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 =",
    "BN\n1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Cycles:, 6 = 1(2). Q Cycle Activity: If Jump:, 1 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 2 = . Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . Q Cycle Activity: If Jump:, 6 = . Q1, 1 = . Q1, 2 = Q2. Q1, 3 = . Q1, 4 = Q3. Q1, 5 = Q4. Q1, 6 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = Write to PC. , 6 = . , 1 = No operation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. , 6 = . If No Jump:, 1 = If No Jump:. If No Jump:, 2 = .",
    "BN\nIf No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . If No Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = Q2. , 4 = Q3. , 5 = Q4. , 6 = . , 1 = Decode. , 2 = Read literal 'n'. , 3 = Read literal 'n'. , 4 = Process Data. , 5 = No operation. , 6 = . Example:, 1 = Example:. Example:, 2 = HERE. Example:, 3 = HERE. Example:, 4 = BN Jump. Example:, 5 = . Example:, 6 = . Before Instruction PC =, 1 = Before Instruction PC =. Before Instruction PC =, 2 = Before Instruction PC =. Before Instruction PC =, 3 = address. Before Instruction PC =, 4 = (HERE). Before Instruction PC =, 5 = . Before Instruction PC =, 6 = . After Instruction If Negative, 1 = After Instruction If Negative. After Instruction If Negative, 2 = After Instruction If Negative. After Instruction If Negative, 3 = = =. After Instruction If Negative, 4 = 1; address (Jump)",
    "BN\n0;. After Instruction If Negative, 5 = . After Instruction If Negative, 6 = . PC If Negative = PC =, 1 = PC If Negative = PC =. PC If Negative = PC =, 2 = PC If Negative = PC =. PC If Negative = PC =, 3 = . PC If Negative = PC =, 4 = address (HERE. PC If Negative = PC =, 5 = + 2). PC If Negative = PC =, 6 = ",
    "Branch if Not Carry\nSyntax:, 1 = Syntax:. Syntax:, 2 = BNC n. Syntax:, 3 = BNC n. Syntax:, 4 = BNC n. Syntax:, 5 = BNC n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Carry bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Encoding:, 1 = Encoding:. Encoding:, 2",
    "Branch if Not Carry\n= 1110. Encoding:, 3 = 0011. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Description:, 1 = Description:. Description:, 2 = Description:. Description:, 3 = nnnn If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 4 = nnnn If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = nnnn If the Carry bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the",
    "Branch if Not Carry\nnew address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity: If Jump:, 1 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 2 = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . Q1, 1 = . Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = Write to PC. , 5 = Write to PC. , 1 = No",
    "Branch if Not Carry\noperation. , 2 = No operation. , 3 = No operation. , 4 = No operation. , 5 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q4. , 5 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = No operation. , 5 = No operation. Example:, 1 = . Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . , 1 = . , 2 = HERE. , 3 = BNC. , 4 = Jump. , 5 = Jump. Before, 1 = Instruction PC. Before, 2 = . Before, 3 = . Before, 4 = address (HERE). Before, 5 = address (HERE). After, 1 = Instruction Carry. After, 2 = =. After, 3 = . After, 4 = . After,",
    "Branch if Not Carry\n5 = . If, 1 = Carry. If, 2 = =. If, 3 = . If, 4 = 2). If, 5 = 2). , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = (HERE. , 1 = . , 2 = =. , 3 = 1;. , 4 = . , 5 = . , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = +. , 5 = +. If, 1 = . If, 2 = . If, 3 = . If, 4 = . If, 5 = . , 1 = . , 2 = 0;. , 3 = . , 4 = . , 5 = . , 1 = . , 2 = . , 3 = . , 4 = (Jump). , 5 = (Jump). , 1 = . , 2 = address. , 3 = . , 4 = . , 5 = . =, 1 = =. =, 2 = =.",
    "Branch if Not Carry\n=, 3 = =. =, 4 = =. =, 5 = =. PC, 1 = . PC, 2 = . PC, 3 = . PC, 4 = . PC, 5 = ",
    "Branch if Not Negative\nSyntax:, 1 = BNN n. Syntax:, 2 = BNN n. Syntax:, 3 = BNN n. Syntax:, 4 = BNN n. Syntax:, 5 = BNN n. Operands:, 1 = -128 \uf0a3 n \uf0a3 127. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 2 = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Negative bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5",
    "Branch if Not Negative\n= None. Encoding:, 1 = 1110. Encoding:, 2 = 0111. Encoding:, 3 = nnnn. Encoding:, 4 = nnnn. Encoding:, 5 = . Description:, 1 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 2 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 3 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This",
    "Branch if Not Negative\ninstruction is then a two-cycle instruction.. Description:, 4 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, 5 = If the Negative bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = 1(2). Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Q Cycle Activity: If Jump:, 1 = .",
    "Branch if Not Negative\nQ Cycle Activity: If Jump:, 2 = . Q Cycle Activity: If Jump:, 3 = . Q Cycle Activity: If Jump:, 4 = . Q Cycle Activity: If Jump:, 5 = . Q1, 1 = Q2. Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = . Decode, 1 = Read literal 'n'. Decode, 2 = Read literal 'n'. Decode, 3 = Process Data. Decode, 4 = Write to PC. Decode, 5 = . No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 4 = No operation. No operation, 5 = . If No Jump:, 1 = . If No Jump:, 2 = . If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . Q1, 1 = Q2. Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = Q4. Q1, 5 = . Decode, 1 = Read literal",
    "Branch if Not Negative\n'n'. Decode, 2 = Read literal 'n'. Decode, 3 = Process Data. Decode, 4 = No operation. Decode, 5 = . Example: HERE, 1 = Example: HERE. Example: HERE, 2 = . Example: HERE, 3 = BNN. Example: HERE, 4 = Jump. Example: HERE, 5 = . Before Instruction PC, 1 = Before Instruction PC. Before Instruction PC, 2 = =. Before Instruction PC, 3 = address. Before Instruction PC, 4 = (HERE). Before Instruction PC, 5 = . After Instruction If Negative, 1 = After Instruction If Negative. After Instruction If Negative, 2 = = =. After Instruction If Negative, 3 = 0; address. After Instruction If Negative, 4 = (Jump). After Instruction If Negative, 5 = . If Negative PC, 1 = If Negative PC. If Negative PC, 2 = = =. If Negative PC, 3 = 1; address (HERE. If Negative PC, 4 = + 2). If Negative PC, 5 = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Syntax:, Branch if Not Overflow = BNOV n. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Overflow = -128 \uf0a3 n \uf0a3 127. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0",
    "PIC18F6310/6410/8310/8410\n', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Overflow = if Overflow bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Status Affected:, Branch if Not Overflow = None. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 1110. Encoding:, Branch if Not Overflow = 0101. Encoding:, Branch if Not Overflow = nnnn. Encoding:, Branch if Not Overflow = nnnn. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction..",
    "PIC18F6310/6410/8310/8410\nDescription:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Overflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not",
    "PIC18F6310/6410/8310/8410\nOverflow = If the Overflow bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Words:, Branch if Not Overflow = 1. Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Cycles:, Branch if Not Overflow = 1(2). Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow =",
    "PIC18F6310/6410/8310/8410\n. Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q Cycle Activity: If Jump:, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Write to PC. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. No operation, Branch if Not Overflow = No operation. If No Jump:, Branch if Not Overflow = . If No Jump:, Branch if Not Overflow = . If No",
    "PIC18F6310/6410/8310/8410\nJump:, Branch if Not Overflow = . If No Jump:, Branch if Not Overflow = . If No Jump:, Branch if Not Overflow = . Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q2. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q3. Q1, Branch if Not Overflow = Q4. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Read literal 'n'. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = Process Data. Decode, Branch if Not Overflow = No operation. Example: HERE, Branch if Not Overflow = Example: HERE. Example: HERE, Branch if Not Overflow = . Example: HERE, Branch if Not Overflow = BNOV Jump. Example: HERE, Branch if Not Overflow = BNOV Jump. Example: HERE, Branch if Not Overflow = . Before Instruction PC, Branch if Not Overflow = Before Instruction PC. Before Instruction",
    "PIC18F6310/6410/8310/8410\nPC, Branch if Not Overflow = = address. Before Instruction PC, Branch if Not Overflow = . Before Instruction PC, Branch if Not Overflow = . Before Instruction PC, Branch if Not Overflow = (HERE). If Overflow = PC, Branch if Not Overflow = If Overflow = PC. If Overflow = PC, Branch if Not Overflow = =. If Overflow = PC, Branch if Not Overflow = address (Jump). If Overflow = PC, Branch if Not Overflow = address (Jump). If Overflow = PC, Branch if Not Overflow = . If Overflow = PC, Branch if Not Overflow = If Overflow = PC. If Overflow = PC, Branch if Not Overflow = =. If Overflow = PC, Branch if Not Overflow = address (HERE. If Overflow = PC, Branch if Not Overflow = address (HERE. If Overflow = PC, Branch if Not Overflow = + 2)",
    "PIC18F6310/6410/8310/8410\nSyntax:, BNZ = Syntax:. Syntax:, Branch if Not Zero = BNZ n. Syntax:, Branch if Not Zero = BNZ n. Syntax:, Branch if Not Zero = BNZ n. Syntax:, Branch if Not Zero = BNZ n. Operands:, BNZ = Operands:. Operands:, Branch if Not Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Zero = -128 \uf0a3 n \uf0a3 127. Operands:, Branch if Not Zero = -128 \uf0a3 n \uf0a3 127. Operation:, BNZ = Operation:. Operation:, Branch if Not Zero = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Zero = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Zero = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Operation:, Branch if Not Zero = if Zero bit is ' 0 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:,",
    "PIC18F6310/6410/8310/8410\nBNZ = Status Affected:. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Encoding:, BNZ = Encoding:. Encoding:, Branch if Not Zero = 1110. Encoding:, Branch if Not Zero = 1110. Encoding:, Branch if Not Zero = 0001. Encoding:, Branch if Not Zero = nnnn. Description:, BNZ = Description:. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next",
    "PIC18F6310/6410/8310/8410\ninstruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is ' 0 ', then the program will branch. The 2's complement number '2n' is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, BNZ = Words:. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Cycles:, BNZ = Cycles:. Cycles:, Branch if Not",
    "PIC18F6310/6410/8310/8410\nZero = 1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Q Cycle Activity: If Jump:, BNZ = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:, Branch if Not Zero = . Q Cycle Activity: If Jump:, Branch if Not Zero = . , BNZ = Q1. , Branch if Not Zero = Q2. , Branch if Not Zero = . , Branch if Not Zero = Q3. , Branch if Not Zero = . , BNZ = Decode. , Branch if Not Zero = Read literal 'n'. , Branch if Not Zero = Read literal 'n'. , Branch if Not Zero = Process Data. , Branch if Not Zero = Process Data. , BNZ = No operation. , Branch if Not Zero = No operation. , Branch if Not Zero = No operation. , Branch if Not Zero = No",
    "PIC18F6310/6410/8310/8410\noperation. , Branch if Not Zero = No operation. , BNZ = Q1. , Branch if Not Zero = Q2. , Branch if Not Zero = Q2. , Branch if Not Zero = Q3. , Branch if Not Zero = Q3. , BNZ = Decode. , Branch if Not Zero = Read literal 'n'. , Branch if Not Zero = Read literal 'n'. , Branch if Not Zero = Process Data. , Branch if Not Zero = Process Data. Example:, BNZ = Example:. Example:, Branch if Not Zero = HERE. Example:, Branch if Not Zero = HERE. Example:, Branch if Not Zero = BNZ Jump. Example:, Branch if Not Zero = BNZ Jump. , BNZ = Before Instruction. , Branch if Not Zero = Before Instruction. , Branch if Not Zero = . , Branch if Not Zero = . , Branch if Not Zero = . , BNZ = PC. , Branch if Not Zero = PC. , Branch if Not Zero = = 0; = address (Jump). , Branch if Not Zero = = 0; = address (Jump). , Branch if Not",
    "PIC18F6310/6410/8310/8410\nZero = = 0; = address (Jump). , BNZ = If Zero = PC. , Branch if Not Zero = If Zero = PC. , Branch if Not Zero = 1; = address (HERE +. , Branch if Not Zero = 1; = address (HERE +. , Branch if Not Zero = 1; = address (HERE +",
    "Unconditional Branch\nSyntax:, 1 = BRA n. Syntax:, 2 = BRA n. Syntax:, 3 = BRA n. Syntax:, 4 = BRA n. Operands:, 1 = -1024 \uf0a3 n \uf0a3 1023. Operands:, 2 = -1024 \uf0a3 n \uf0a3 1023. Operands:, 3 = -1024 \uf0a3 n \uf0a3 1023. Operands:, 4 = -1024 \uf0a3 n \uf0a3 1023. Operation:, 1 = (PC) + 2 + 2n \uf0ae PC. Operation:, 2 = (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 1101. Encoding:, 2 = 0nnn. Encoding:, 3 = nnnn. Encoding:, 4 = nnnn. Description:, 1 = Add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC +",
    "Unconditional Branch\n2 + 2n. This instruction is a two-cycle instruction.. Description:, 2 = Add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, 3 = Add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, 4 = Add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 2. Cycles:, 2 = 2. Cycles:, 3 = 2. Cycles:, 4 = 2. Q Cycle Activity:, 1 = Q Cycle Activity:. Q",
    "Unconditional Branch\nCycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. Q1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = . Q1, 4 = Q4. Decode, 1 = Read literal 'n'. Decode, 2 = Read literal 'n'. Decode, 3 = Process Data. Decode, 4 = Write to PC. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 4 = No operation. Example:, 1 = HERE. Example:, 2 = BRA. Example:, 3 = Jump. Example:, 4 = . Before Instruction PC, 1 = =. Before Instruction PC, 2 = address. Before Instruction PC, 3 = (HERE). Before Instruction PC, 4 = . After Instruction PC, 1 = =. After Instruction PC, 2 = address. After Instruction PC, 3 = (Jump). After Instruction PC, 4 = ",
    "Bit Set f\nSyntax:\nBSF    f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b \uf0a3 7\na \uf0ce\uf020 [0,1]\nOperation:\n1 \uf0ae f<b>\nStatus Affected:\nNone\nEncoding:\n1000\nbbba\nffff\nffff\nDescription:\nBit 'b' in register 'f' is set.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write register 'f'\nExample:\nBSF\nFLAG_REG, 7, 1\nBefore Instruction\nFLAG_REG\nAfter Instruction\nFLAG_REG\n=\n=\n0Ah\n8Ah",
    "Bit Test File, Skip if Clear\nSyntax:\nBTFSC   f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b \uf0a3 7\na \uf0ce\uf020 [0,1]\nOperation:\nskip if (f<b>) = 0\nStatus Affected:\nNone\nEncoding:\n1011\nbbba\nffff\nffff\nDescription:\nIf bit 'b' in register 'f' is ' 0 ', then the next instruction is skipped. If bit 'b' is ' 0 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank .\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Bit Test File, Skip if Clear\nSyntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Syntax:, Bit Test File, Skip if Set = BTFSS f, b {,a}. Operands:, Bit Test File, Skip if Set = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b < 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b < 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b < 7 a \uf0ce\uf020 [0,1]. Operands:, Bit Test File, Skip if Set = 0 \uf0a3 f \uf0a3 255 0 \uf0a3 b < 7 a \uf0ce\uf020 [0,1]. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if",
    "Bit Test File, Skip if Clear\n(f<b>) = 1. Operation:, Bit Test File, Skip if Set = skip if (f<b>) = 1. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Status Affected:, Bit Test File, Skip if Set = None. Encoding:, Bit Test File, Skip if Set = 1010. Encoding:, Bit Test File, Skip if Set = bbba. Encoding:, Bit Test File, Skip if Set = ffff. Encoding:, Bit Test File, Skip if Set = ffff. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR",
    "Bit Test File, Skip if Clear\nbank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a",
    "Bit Test File, Skip if Clear\ntwo-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Bit Test File, Skip if Set = If bit 'b' in register 'f' is ' 1 ', then the next instruction is skipped. If bit 'b' is ' 1 ', then the next instruction fetched during the current instruction execution is discarded and a NOP is executed instead, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = 1.",
    "Bit Test File, Skip if Clear\nWords:, Bit Test File, Skip if Set = 1. Words:, Bit Test File, Skip if Set = 1. Cycles:, Bit Test File, Skip if Set = 1(2). Cycles:, Bit Test File, Skip if Set = 1(2). Cycles:, Bit Test File, Skip if Set = 1(2). Cycles:, Bit Test File, Skip if Set = 1(2)",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation",
    "If skip:\nNo operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation",
    "If skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSC\n:\n:\nFLAG, 1, 0\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress\n(TRUE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress (FALSE)\nNote: 3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation\nIf skip:\nNo operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSS\n:\n:\nFLAG, 1, 0\nAfter Instruction, = = . After Instruction, address = . After Instruction, (HERE) = . If FLAG<1> PC, = = = =. If FLAG<1> PC, address = 0; address. If FLAG<1> PC, (HERE) = (FALSE). If FLAG<1> PC, = = = =. If FLAG<1> PC, address = 1; address. If FLAG<1> PC, (HERE) = (TRUE)",
    "Bit Toggle f\nSyntax:\nBTG f, b {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\n0 \uf0a3 b < 7\na \uf0ce\uf020 [0,1]\nOperation:\n(f<b>) \uf0ae f<b>\nStatus Affected:\nNone\nEncoding:\n0111\nbbba\nffff\nffff\nDescription:\nBit 'b' in data memory location 'f' is inverted.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite\nregister 'f'\nExample:\nBTG\nPORTC,\n4, 0\nBefore Instruction:\nPORTC\n=\n0111 0101\n[75h]\nAfter Instruction:\nPORTC\n=\n0110 0101 [65h]",
    "Subroutine Call\nSyntax:\nCALL   k {,s}\nOperands:\n0 \uf0a3 k \uf0a3 1048575\ns \uf0ce\uf020 [0,1]\nOperation:\n(PC) + 4 \uf0ae TOS,\nk\n\uf0ae\nPC<20:1>,\nif s = 1\n(W) \uf0ae WS,\n(STATUS)\n\uf0ae\nSTATUSS,\n(BSR)\n\uf0ae\nBSRS\nStatus Affected:\nNone\nEncoding: 1st word (k<7:0>) 2nd word(k<19:8>)\n1110\n1111\n110s\nk19 kkk\nk 7\nkkk\nkkkk\nkkkk0\nkkkk8\nDescription:\nSubroutine call of entire 2-Mbyte memory range. First, return address (PC + 4) is pushed onto the return stack. If 's' = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If 's' = 0 , no update occurs. Then, the 20-bit value 'k' is loaded into PC<20:1>. CALL is a two-cycle instruction.\nWords:\nCycles:\n2\n2\nQ Cycle Activity:",
    "Subroutine Call\nDecode, Q2 = Read literal 'k'<7:0>,. Decode, Q3 = Push PC to stack. Decode, Q4 = Read literal 'k'<19:8>, Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation",
    "Example:\nHERE\nCALL   THERE,1\nPC, =.After Instruction = =. PC, address. = address. PC, (HERE). = (THERE). TOS, =.After Instruction = =. TOS, address. = address. TOS, (HERE). = (HERE + 4). WS, =.After Instruction = =. WS, address. = W. WS, (HERE). = . BSRS, =.After Instruction = =. BSRS, address. = BSR. BSRS, (HERE). = . STATUSS=, =.After Instruction = STATUSS=. STATUSS=, address. = STATUS. STATUSS=, (HERE). = ",
    "Example:\nSyntax:, 1 = Syntax:. Syntax:, 2 = BZ n. Syntax:, 3 = BZ n. Syntax:, 4 = BZ n. Syntax:, 5 = BZ n. Syntax:, 6 = BZ n. Operands:, 1 = Operands:. Operands:, 2 = -128 \uf0a3 n \uf0a3 127. Operands:, 3 = -128 \uf0a3 n \uf0a3 127. Operands:, 4 = -128 \uf0a3 n \uf0a3 127. Operands:, 5 = -128 \uf0a3 n \uf0a3 127. Operands:, 6 = -128 \uf0a3 n \uf0a3 127. Operation:, 1 = Operation:. Operation:, 2 = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 3 = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 4 = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 5 = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Operation:, 6 = if Zero bit is ' 1 ', (PC) + 2 + 2n \uf0ae PC. Status Affected:, 1 = Status Affected:. Status",
    "Example:\nAffected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Status Affected:, 5 = None. Status Affected:, 6 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 1110. Encoding:, 3 = 0000. Encoding:, 4 = nnnn. Encoding:, 5 = nnnn. Encoding:, 6 = nnnn. Description: If the will The 2's added, 1 = Description: If the will The 2's added. Description: If the will The 2's added, 2 = Zero bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 3 = Zero bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a",
    "Example:\ntwo-cycle instruction.. Description: If the will The 2's added, 4 = Zero bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 5 = Zero bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description: If the will The 2's added, 6 = Zero bit is ' 1 ', then the program branch. complement number '2n' is to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1.",
    "Example:\nWords:, 5 = 1. Words:, 6 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1(2). Cycles:, 3 = 1(2). Cycles:, 4 = 1(2). Cycles:, 5 = 1(2). Cycles:, 6 = 1(2). Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q Cycle Activity:, 5 = . Q Cycle Activity:, 6 = . If Jump:, 1 = If Jump:. If Jump:, 2 = If Jump:. If Jump:, 3 = . If Jump:, 4 = . If Jump:, 5 = . If Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 5 = Q4. , 6 = Q4. , 1 = Decode. , 2 = Read literal 'n'. , 3 = Process Data. , 4 = . , 5 = Write to PC. , 6 = Write to PC. , 1 = No",
    "Example:\noperation. , 2 = No operation. , 3 = No operation. , 4 = . , 5 = No operation. , 6 = No operation. If No Jump:, 1 = If No Jump:. If No Jump:, 2 = If No Jump:. If No Jump:, 3 = . If No Jump:, 4 = . If No Jump:, 5 = . If No Jump:, 6 = . , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 5 = Q4. , 6 = Q4. , 1 = Decode. , 2 = Read literal. , 3 = Process Data. , 4 = . , 5 = No operation. , 6 = No operation. Example:, 1 = . Example:, 2 = . Example:, 3 = . Example:, 4 = . Example:, 5 = . Example:, 6 = . , 1 = . , 2 = HERE. , 3 = BZ. , 4 = Jump. , 5 = . , 6 = . Before, 1 = Instruction. Before, 2 = . Before, 3 = . Before, 4 = . Before, 5 = . Before, 6 = . PC After, 1 =",
    "Example:\nInstruction. PC After, 2 = =. PC After, 3 = address. PC After, 4 = (HERE). PC After, 5 = . PC After, 6 = . If, 1 = Zero. If, 2 = =. If, 3 = . If, 4 = . If, 5 = . If, 6 = . , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = 2). , 6 = 2). , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 6 = . , 1 = . , 2 = . , 3 = address. , 4 = . , 5 = . , 6 = . If, 1 = . If, 2 = . If, 3 = . If, 4 = . If, 5 = . If, 6 = . , 1 = . , 2 = . , 3 = . , 4 = (HERE. , 5 = . , 6 = . , 1 = Zero. , 2 = . , 3 = . , 4 = . , 5 = . , 6 = . , 1 = . , 2 = . , 3 = . , 4 = . , 5 = +. , 6 =",
    "Example:\n+. , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 6 = . , 1 = . , 2 = . , 3 = . , 4 = . , 5 = . , 6 = 1; address. , 1 = . , 2 = =. , 3 = . , 4 = . , 5 = . , 6 = . , 1 = . , 2 = 0;. , 3 = . , 4 = . , 5 = . , 6 = . , 1 = . , 2 = . , 3 = . , 4 = . , 5 = (Jump). , 6 = (Jump). , 1 = PC. , 2 = . , 3 = . , 4 = . , 5 = . , 6 = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Syntax:, Clear f = CLRF f {,a}. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, Clear f = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Operation:, Clear f = 000h \uf0ae f, 1 \uf0ae Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Encoding:, Clear f = 0110. Encoding:, Clear f = 101a. Encoding:, Clear f = ffff.",
    "PIC18F6310/6410/8310/8410\nEncoding:, Clear f = ffff. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the",
    "PIC18F6310/6410/8310/8410\nextended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Clear f = Clears the contents of the specified register. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Clear f = 1. Words:, Clear f = 1. Words:, Clear f = 1. Words:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = 1. Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q1, Clear f = Q2. Q1, Clear f = Q2. Q1, Clear f = Q3.",
    "PIC18F6310/6410/8310/8410\nQ1, Clear f = Q4. Decode, Clear f = Read register 'f'. Decode, Clear f = Read register 'f'. Decode, Clear f = Process Data. Decode, Clear f = Write register 'f'. Example:, Clear f = CLRF. Example:, Clear f = . Example:, Clear f = FLAG_REG,1. Example:, Clear f = . Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h, Clear f = Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h. Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h, Clear f = Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h. Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h, Clear f = Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h. Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h, Clear f = Before Instruction FLAG_REG = 5Ah After Instruction FLAG_REG = 00h",
    "PIC18F6310/6410/8310/8410\nSyntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Syntax:, Clear Watchdog Timer = CLRWDT. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Operation:, Clear Watchdog Timer = 000h \uf0ae WDT, 000h \uf0ae WDT postscaler, 1 \uf0ae TO, 1 \uf0ae PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO,",
    "PIC18F6310/6410/8310/8410\nPD. Status Affected:, Clear Watchdog Timer = TO, PD. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0100. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the post- scaler of the WDT. Status bits, TO and PD, are set..",
    "PIC18F6310/6410/8310/8410\nWords:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q3. Q1, Clear Watchdog Timer = . Q1, Clear Watchdog Timer = Q4. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = Process Data. Decode, Clear Watchdog Timer = . Decode, Clear Watchdog Timer = No operation",
    "Example:\nCLRWDT\nBefore Instruction\nWDT Counter\n=\n?\nAfter Instruction\nWDT Counter\n=\n00h\nWDT Postscaler\n=\n0\nTO\n=\n1\nPD\n=\n1",
    "PIC18F6310/6410/8310/8410\nSyntax:, Complement f = COMF. Syntax:, Complement f = f {,d {,a}}. Syntax:, Complement f = . Syntax:, Complement f = . Operands:, Complement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Complement f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Complement f = . Operands:, Complement f = . Operation:, Complement f = \uf0ae dest ( f ). Operation:, Complement f = \uf0ae dest ( f ). Operation:, Complement f = . Operation:, Complement f = . Status Affected:, Complement f = N, Z. Status Affected:, Complement f = . Status Affected:, Complement f = . Status Affected:, Complement f = . Encoding:, Complement f = 0001. Encoding:, Complement f = 11da. Encoding:, Complement f = ffff. Encoding:, Complement f = ffff. Description:, Complement f = The contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in",
    "PIC18F6310/6410/8310/8410\nW. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Complement f = The contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Complement",
    "PIC18F6310/6410/8310/8410\nf = The contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Complement f = The contents of register 'f' are complemented. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal",
    "PIC18F6310/6410/8310/8410\nOffset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, Complement f = 1. Words:, Complement f = . Words:, Complement f = . Words:, Complement f = . Cycles:, Complement f = 1. Cycles:, Complement f = . Cycles:, Complement f = . Cycles:, Complement f = . Q Cycle Activity:, Complement f = . Q Cycle Activity:, Complement f = . Q Cycle Activity:, Complement f = . Q Cycle Activity:, Complement f = . Q1, Complement f = Q2. Q1, Complement f = Q3. Q1, Complement f = . Q1, Complement f = Q4. Decode, Complement f = register. Decode, Complement f = Read 'f'. Decode, Complement f = Process Data. Decode, Complement f = Write to destination. Example:, Complement f = COMF. Example:, Complement f = REG,. Example:, Complement f = 0,. Example:, Complement f = 0. Before Instruction REG =, Complement f = 13h. Before Instruction REG =, Complement",
    "PIC18F6310/6410/8310/8410\nf = . Before Instruction REG =, Complement f = . Before Instruction REG =, Complement f = . After Instruction REG = W =, Complement f = 13h ECh. After Instruction REG = W =, Complement f = . After Instruction REG = W =, Complement f = . After Instruction REG = W =, Complement f = ",
    "Compare f with W, skip if f = W\nSyntax:\nCPFSEQ    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) - (W),\nskip if (f) = (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n001a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If 'f' = W , then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nskip:, Q2 = skip:. skip:, Q3 = skip:. skip:, Q4 No = skip:. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 No = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 No = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 No = skip and followed by 2-word instruction:. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 No = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 No = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 No = No operation. Example:, Q2 = HERE NEQUAL. Example:,",
    "Q Cycle Activity:\nQ3 = CPFSEQ REG, :. Example:, Q4 No = 0. Before Instruction PC, Q2 = =. Before Instruction PC, Q3 = HERE. Before Instruction PC, Q4 No = . Address W, Q2 = = ?. Address W, Q3 = . Address W, Q4 No = . REG, Q2 = = ?. REG, Q3 = . REG, Q4 No = . After, Q2 = . After, Q3 = . After, Q4 No = . , Q2 = =. , Q3 = . , Q4 No = . Instruction, Q2 = Instruction. Instruction, Q3 = Instruction. Instruction, Q4 No = Instruction. If REG, Q2 = . If REG, Q3 = W;. If REG, Q4 No = . PC, Q2 = =. PC, Q3 = Address (EQUAL). PC, Q4 No = . If REG, Q2 = \uf0b9. If REG, Q3 = W;. If REG, Q4 No = . PC, Q2 = =. PC, Q3 = Address (NEQUAL). PC, Q4 No = \nWords:\nCycles:",
    "Compare f with W, skip if f > W\nSyntax:\nCPFSGT    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) \uf02d\uf020\uf028 W),\nskip if (f) > (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n010a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of the W by performing an unsigned subtraction. If the contents of 'f' are greater than the contents of WREG, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\n1\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = No operation. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:",
    "Q Cycle Activity:\nHERE      CPFSGT REG, 0\nNGREATER  :\nGREATER   :\nBefore Instruction\nPC\n= Address (HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n\uf03e W;\nPC\n= Address (GREATER)\nIf REG\n\uf0a3 W;\nPC\n= Address (NGREATER)",
    "Compare f with W, skip if f < W\nSyntax:\nCPFSLT    f {,a}\nOperands:\n0 \uf0a3 f \uf0a3 255\na \uf0ce [0,1]\nOperation:\n(f) - \uf020\uf028 W),\nskip if (f) < (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n000a\nffff\nffff\nDescription:\nCompares the contents of data memory location 'f' to the contents of W by performing an unsigned subtraction. If the contents of 'f' are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nWords:\n1\nCycles:\n1(2)\nNote: 3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nNo\noperation\nIf skip:\nQ1\nQ2\nQ3\nQ4\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nExample:\nHERE    CPFSLT REG, 1\nNLESS   :\nLESS    :\nBefore Instruction\nPC\n=\nAddress\n(HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n< W;\nPC\n= Address (LESS)\nIf REG\n\uf0b3 W;\nPC\n= Address (NLESS)",
    "PIC18F6310/6410/8310/8410\nSyntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Syntax:, Decimal Adjust WRegister = DAW. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operands:, Decimal Adjust WRegister = None. Operation:, Decimal Adjust WRegister = If [W<3:0> >9] or [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>; If [W<7:4> > 9] or [C = 1 ] then, ( W<7:4>) + 6 \uf0ae W<7:4>, C = \uf020 1 ; else, (W<7:4>) \uf0ae W<7:4>. Operation:, Decimal Adjust WRegister = If [W<3:0> >9] or [DC = 1 ]",
    "PIC18F6310/6410/8310/8410\nthen, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>; If [W<7:4> > 9] or [C = 1 ] then, ( W<7:4>) + 6 \uf0ae W<7:4>, C = \uf020 1 ; else, (W<7:4>) \uf0ae W<7:4>. Operation:, Decimal Adjust WRegister = If [W<3:0> >9] or [DC = 1 ] then, (W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>; If [W<7:4> > 9] or [C = 1 ] then, ( W<7:4>) + 6 \uf0ae W<7:4>, C = \uf020 1 ; else, (W<7:4>) \uf0ae W<7:4>. Operation:, Decimal Adjust WRegister = If [W<3:0> >9] or [DC = 1 ] then,",
    "PIC18F6310/6410/8310/8410\n(W<3:0>) + 6 \uf0ae W<3:0>; else, ( W<3:0>) \uf0ae W<3:0>; If [W<7:4> > 9] or [C = 1 ] then, ( W<7:4>) + 6 \uf0ae W<7:4>, C = \uf020 1 ; else, (W<7:4>) \uf0ae W<7:4>. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Status Affected:, Decimal Adjust WRegister = C. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0000. Encoding:, Decimal Adjust WRegister = 0111. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust",
    "PIC18F6310/6410/8310/8410\nWRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Description:, Decimal Adjust WRegister = DAW adjusts the eight-bit value in W, resulting from the earlier addition of two variables (each in packed BCD format) and produces a correct packed BCD result.. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Words:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Cycles:, Decimal Adjust WRegister = 1. Q Cycle Activity: Q1, Decimal Adjust WRegister = Q2. Q",
    "PIC18F6310/6410/8310/8410\nCycle Activity: Q1, Decimal Adjust WRegister = Q3. Q Cycle Activity: Q1, Decimal Adjust WRegister = Q3. Q Cycle Activity: Q1, Decimal Adjust WRegister = Q4. Decode, Decimal Adjust WRegister = Read register W. Decode, Decimal Adjust WRegister = Process Data. Decode, Decimal Adjust WRegister = Process Data. Decode, Decimal Adjust WRegister = Write W\nQ2\nRead\nQ3\nProcess register 'f'\nData\nExample:\nDECF    CNT,\nBefore Instruction\nCNT\n=\nZ\n=\nAfter Instruction\nCNT\nZ\n=\n=\n1, 0",
    "DECF\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nDecode\nExample 1:\nDAW\nBefore Instruction\nW\n=\nA5h\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n05h\nC\n=\n1\nDC\n=\n0\nExample 2:\nBefore Instruction\nW\n=\nCEh\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n34h\nC\n=\n1\nDC\n=\n0\nDecrement f\nDECF   f {,d {,a}}\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\n(f) - 1 \uf0ae dest\nC, DC, N, OV, Z\n0000\n01da ffff\nffff\nDecrement register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.",
    "DECF\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\n1\n1\n01h\n0\n00h\n1\nQ4\nWrite to destination",
    "PIC18F6310/6410/8310/8410\nSyntax:, Decrement f, skip if 0 = DECFSZ. Syntax:, Decrement f, skip if 0 = f {,d {,a}}. Syntax:, Decrement f, skip if 0 = . Syntax:, Decrement f, skip if 0 = . Operands:, Decrement f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Decrement f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Decrement f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operands:, Decrement f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1]. Operation:, Decrement f, skip if 0 = (f) - 1 \uf0ae dest, skip if result = 0. Operation:, Decrement f, skip if 0 = (f) - 1 \uf0ae dest, skip if result = 0. Operation:, Decrement f, skip if 0 = (f) - 1 \uf0ae dest, skip if result = 0. Operation:, Decrement",
    "PIC18F6310/6410/8310/8410\nf, skip if 0 = (f) - 1 \uf0ae dest, skip if result = 0. Status Affected:, Decrement f, skip if 0 = None. Status Affected:, Decrement f, skip if 0 = None. Status Affected:, Decrement f, skip if 0 = None. Status Affected:, Decrement f, skip if 0 = None. Encoding:, Decrement f, skip if 0 = 0010. Encoding:, Decrement f, skip if 0 = 11da. Encoding:, Decrement f, skip if 0 = ffff. Encoding:, Decrement f, skip if 0 = ffff. Description:, Decrement f, skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is",
    "PIC18F6310/6410/8310/8410\n' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement f, skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement",
    "PIC18F6310/6410/8310/8410\nf, skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement f, skip if 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is",
    "PIC18F6310/6410/8310/8410\ndiscarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Decrement f, skip if 0 = 1. Words:, Decrement f, skip if 0 = 1. Words:, Decrement f, skip if 0 = 1. Words:, Decrement f, skip if 0 = 1. Cycles:, Decrement f, skip if 0 = 1(2). Cycles:, Decrement f, skip if 0 = 1(2). Cycles:, Decrement f, skip if 0 = 1(2). Cycles:, Decrement f, skip if 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:, Q2.Read register 'f' = . If skip:, Q3.Process Data = . If skip:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. If skip and followed instruction:, Q2.Read register 'f' = by 2-word. If skip and followed instruction:, Q3.Process Data = . If skip and followed instruction:, Q4.Write to destination = . Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. No operation,",
    "Q Cycle Activity:\nQ2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register 'f' = HERE. Example:, Q3.Process Data = DCFSNZ TEMP,. Example:, Q4.Write to destination = 1, 0. Before Instruction, Q2.Read register 'f' = Before Instruction. Before Instruction, Q3.Process Data = . Before Instruction, Q4.Write to destination = \nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nSyntax:, Decrement f, skip if not 0 = DCFSNZ. Syntax:, Decrement f, skip if not 0 = f {,d {,a}}. Syntax:, Decrement f, skip if not 0 = . Syntax:, Decrement f, skip if not 0 = . Operands:, Decrement f, skip if not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Decrement f, skip if not 0 = . Operands:, Decrement f, skip if not 0 = . Operands:, Decrement f, skip if not 0 = . Operation:, Decrement f, skip if not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Decrement f, skip if not 0 = (f) - 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Decrement f, skip if not 0 = . Operation:, Decrement f, skip if not 0 = . Status Affected:, Decrement f, skip if not 0 = None. Status Affected:, Decrement f, skip if not 0",
    "Q Cycle Activity:\n= . Status Affected:, Decrement f, skip if not 0 = . Status Affected:, Decrement f, skip if not 0 = . Encoding:, Decrement f, skip if not 0 = 0100. Encoding:, Decrement f, skip if not 0 = 11da. Encoding:, Decrement f, skip if not 0 = ffff. Encoding:, Decrement f, skip if not 0 = ffff. Description:, Decrement f, skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is 1 , the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing",
    "Q Cycle Activity:\nmode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement f, skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is 1 , the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement f, skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next",
    "Q Cycle Activity:\ninstruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is 1 , the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Decrement f, skip if not 0 = The contents of register 'f' are decremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is 1 , the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing",
    "Q Cycle Activity:\nmode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Decrement f, skip if not 0 = 1. Words:, Decrement f, skip if not 0 = . Words:, Decrement f, skip if not 0 = . Words:, Decrement f, skip if not 0 = . Cycles:, Decrement f, skip if not 0 = 1(2). Cycles:, Decrement f, skip if not 0 = . Cycles:, Decrement f, skip if not 0 = . Cycles:, Decrement f, skip if not 0 = \nQ Cycle Activity:",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = skip and followed by 2-word instruction:. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. Example:, Q2 = HERE. Example:, Q3 = DECFSZ",
    "Q Cycle Activity:\nGOTO. Example:, Q4 = CNT, 1, 1 LOOP. Before Instruction PC =, Q2 = Address. Before Instruction PC =, Q3 = (HERE). Before Instruction PC =, Q4 = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Syntax:, Unconditional Branch = GOTO k. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operands:, Unconditional Branch = 0 \uf0a3 k \uf0a3 1048575. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Operation:, Unconditional Branch = k \uf0ae PC<20:1>. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>),",
    "PIC18F6310/6410/8310/8410\nUnconditional Branch = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = 1111 k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = kkkk 0 kkkk 8. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an",
    "PIC18F6310/6410/8310/8410\nunconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2-Mbyte memory range. The 20-bit value 'k' is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = 2. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q Cycle Activity:, Unconditional Branch = Q Cycle Activity:. Q1,",
    "PIC18F6310/6410/8310/8410\nUnconditional Branch = Q2. Q1, Unconditional Branch = Q3. Q1, Unconditional Branch = Q4. Q1, Unconditional Branch = Q4. Decode, Unconditional Branch = Read literal 'k'<7:0>,. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. Decode, Unconditional Branch = Read literal 'k'<19:8>, Write to PC. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. No operation, Unconditional Branch = No operation. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. After Instruction PC = Address, Unconditional Branch = . After Instruction PC = Address, Unconditional Branch = . After Instruction PC = Address,",
    "PIC18F6310/6410/8310/8410\nUnconditional Branch = . After Instruction PC = Address, Unconditional Branch = ",
    "PIC18F6310/6410/8310/8410\nINCF, 1 = INCF. INCF, 2 = Increment f. INCF, 3 = Increment f. INCF, 4 = Increment f. Syntax:, 1 = Syntax:. Syntax:, 2 = INCF f {,d {,a}}. Syntax:, 3 = INCF f {,d {,a}}. Syntax:, 4 = INCF f {,d {,a}}. Operands:, 1 = Operands:. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, 1 = Operation:. Operation:, 2 = (f) + 1 \uf0ae dest. Operation:, 3 = (f) + 1 \uf0ae dest. Operation:, 4 = (f) + 1 \uf0ae dest. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = C, DC,",
    "PIC18F6310/6410/8310/8410\nN, OV, Z. Status Affected:, 3 = C, DC, N, OV, Z. Status Affected:, 4 = C, DC, N, OV, Z. Encoding:, 1 = Encoding:. Encoding:, 2 = 0010. Encoding:, 3 = 10da. Encoding:, 4 = ffff. Description:, 1 = Description:. Description:, 2 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, 3 = The contents of register 'f' are incremented. If 'd' is ' 0 ',",
    "PIC18F6310/6410/8310/8410\nthe result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, 4 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for",
    "PIC18F6310/6410/8310/8410\ndetails.. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 1 = Decode. , 2 = Read register 'f'. , 3 = Process Data. , 4 = ",
    "Example:\nINCF\nCNT, 1, 0\nBefore Instruction\nCNT\n=\nFFh\nZ\n=\n0\nC\n=\n?\nDC\n=\n?\nAfter Instruction\nCNT\n=\n00h\nZ\n=\n1\nC\n=\n1\nDC\n=\n1",
    "PIC18F6310/6410/8310/8410\nSyntax:, Increment f, skip if 0 = INCFSZ. Syntax:, Increment f, skip if 0 = f {,d {,a}}. Syntax:, Increment f, skip if 0 = . Syntax:, Increment f, skip if 0 = . Operands:, Increment f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Increment f, skip if 0 = (f) + 1 \uf0ae dest, skip if result = 0. Operation:, Increment f, skip if 0 = (f) + 1 \uf0ae dest, skip if result = 0. Operation:, Increment f, skip",
    "PIC18F6310/6410/8310/8410\nif 0 = (f) + 1 \uf0ae dest, skip if result = 0. Operation:, Increment f, skip if 0 = (f) + 1 \uf0ae dest, skip if result = 0. Status Affected:, Increment f, skip if 0 = None. Status Affected:, Increment f, skip if 0 = None. Status Affected:, Increment f, skip if 0 = None. Status Affected:, Increment f, skip if 0 = None. Encoding:, Increment f, skip if 0 = 0011. Encoding:, Increment f, skip if 0 = 11da. Encoding:, Increment f, skip if 0 = ffff. Encoding:, Increment f, skip if 0 = ffff. Description:, Increment f, skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched,",
    "PIC18F6310/6410/8310/8410\nis discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Increment f, skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates",
    "PIC18F6310/6410/8310/8410\nin Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Increment f, skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Increment f, skip if 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register",
    "PIC18F6310/6410/8310/8410\n'f'. If the result is ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Increment f, skip if 0 = 1. Words:, Increment f, skip if 0 = 1. Words:, Increment f, skip if 0 = 1. Words:, Increment f, skip if 0 = 1. Cycles:, Increment f, skip if 0 = 1(2). Cycles:, Increment f, skip if 0 = 1(2). Cycles:, Increment f, skip if 0 = 1(2). Cycles:, Increment f, skip if 0 = 1(2)\nNote:",
    "PIC18F6310/6410/8310/8410\n3 cycles if skip and followed by a 2-word instruction.",
    "PIC18F6310/6410/8310/8410\nSyntax:, Increment f, skip if not 0 = INFSNZ. Syntax:, Increment f, skip if not 0 = f {,d {,a}}. Syntax:, Increment f, skip if not 0 = . Syntax:, Increment f, skip if not 0 = . Operands:, Increment f, skip if not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Increment f, skip if not 0 = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Increment f, skip if not 0 = (f) + 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Increment f, skip if not 0 = (f) + 1 \uf0ae dest, skip if result \uf0b9 0.",
    "PIC18F6310/6410/8310/8410\nOperation:, Increment f, skip if not 0 = (f) + 1 \uf0ae dest, skip if result \uf0b9 0. Operation:, Increment f, skip if not 0 = (f) + 1 \uf0ae dest, skip if result \uf0b9 0. Status Affected:, Increment f, skip if not 0 = None. Status Affected:, Increment f, skip if not 0 = None. Status Affected:, Increment f, skip if not 0 = None. Status Affected:, Increment f, skip if not 0 = None. Encoding:, Increment f, skip if not 0 = 0100. Encoding:, Increment f, skip if not 0 = 10da. Encoding:, Increment f, skip if not 0 = ffff. Encoding:, Increment f, skip if not 0 = ffff. Description:, Increment f, skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'.",
    "PIC18F6310/6410/8310/8410\nIf the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing. Description:, Increment f, skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and",
    "PIC18F6310/6410/8310/8410\nthe extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing. Description:, Increment f, skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not ' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing. Description:, Increment f, skip if not 0 = The contents of register 'f' are incremented. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If the result is not",
    "PIC18F6310/6410/8310/8410\n' 0 ', the next instruction, which is already fetched, is discarded and a NOP is executed instead, making it a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing. Words:, Increment f, skip if not 0 = 1. Words:, Increment f, skip if not 0 = 1. Words:, Increment f, skip if not 0 = 1. Words:, Increment f, skip if not 0 = 1. Cycles:, Increment f, skip if not 0 = 1(2). Cycles:, Increment f, skip if not 0 = 1(2). Cycles:, Increment f, skip if not 0 = 1(2). Cycles:, Increment f, skip if not 0 = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "PIC18F6310/6410/8310/8410\nQ Cycle Activity:",
    "PIC18F6310/6410/8310/8410\nskip:, Q2.Read register 'f' = skip:. skip:, Q3.Process Data = skip:. skip:, Q4.Write to destination = skip:. Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. skip and followed by 2-word instruction:, Q2.Read register 'f' = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3.Process Data = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4.Write to destination = skip and followed by 2-word instruction:. Q1, Q2.Read register 'f' = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination =",
    "PIC18F6310/6410/8310/8410\nQ4. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. No operation, Q2.Read register 'f' = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register 'f' = HERE NZERO ZERO. Example:, Q3.Process Data = INCFSZ : :. Example:, Q4.Write to destination = CNT, 1, 0. Before Instruction PC, Q2.Read register 'f' = Before Instruction PC. Before Instruction PC, Q3.Process Data = Before Instruction PC. Before Instruction PC, Q4.Write to destination = Before Instruction PC. , Q2.Read register 'f' = = Address. , Q3.Process Data = (HERE). , Q4.Write to destination = . After Instruction, Q2.Read register 'f' = After Instruction. After Instruction, Q3.Process Data = After Instruction. After Instruction,",
    "PIC18F6310/6410/8310/8410\nQ4.Write to destination = After Instruction. CNT, Q2.Read register 'f' = = CNT + 1. CNT, Q3.Process Data = . CNT, Q4.Write to destination = . If CNT, Q2.Read register 'f' = = 0;. If CNT, Q3.Process Data = . If CNT, Q4.Write to destination = . PC, Q2.Read register 'f' = = Address \uf0b9 0;. PC, Q3.Process Data = (ZERO). PC, Q4.Write to destination = . If CNT PC, Q2.Read register 'f' = = Address. If CNT PC, Q3.Process Data = (NZERO). If CNT PC, Q4.Write to destination = ",
    "Q Cycle Activity:\nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. If skip:, Q2 = . If skip:, Q3 = . If skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. If skip and followed by 2-word instruction:, Q2 = . If skip and followed by 2-word instruction:, Q3 = . If skip and followed by 2-word instruction:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:\nHERE    INFSNZ  REG, 1, 0\nZERO\nNZERO",
    "Q Cycle Activity:\nBefore Instruction, 1 = Before Instruction. Before Instruction, 2 = Before Instruction. PC, 1 = =. PC, 2 = Address (HERE). After Instruction, 1 = After Instruction. After Instruction, 2 = After Instruction. REG, 1 = =. REG, 2 = REG + 1. If REG, 1 = \uf0b9. If REG, 2 = 0;. PC, 1 = =. PC, 2 = Address (NZERO). If REG, 1 = =. If REG, 2 = 0;. PC, 1 = =. PC, 2 = Address (ZERO)",
    "PIC18F6310/6410/8310/8410\nSyntax:, Inclusive OR literal with W = IORLW k. Syntax:, Inclusive OR literal with W = IORLW k. Syntax:, Inclusive OR literal with W = IORLW k. Syntax:, Inclusive OR literal with W = IORLW k. Operands:, Inclusive OR literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Inclusive OR literal with W = 0 \uf0a3 k \uf0a3 255. Operation:, Inclusive OR literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR literal with W = (W) .OR. k \uf0ae W. Operation:, Inclusive OR literal with W = (W) .OR. k \uf0ae W. Status Affected:, Inclusive OR literal with W = N, Z. Status Affected:, Inclusive OR literal with W = N, Z. Status Affected:, Inclusive OR literal with W = N, Z. Status Affected:, Inclusive OR literal with W = N, Z.",
    "PIC18F6310/6410/8310/8410\nEncoding:, Inclusive OR literal with W = 0000. Encoding:, Inclusive OR literal with W = 1001. Encoding:, Inclusive OR literal with W = kkkk. Encoding:, Inclusive OR literal with W = kkkk. Description:, Inclusive OR literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Description:, Inclusive OR literal with W = The contents of Ware ORed with the eight-bit literal 'k'. The result is placed in W.. Words:, Inclusive OR literal with W = 1. Words:, Inclusive OR literal with W = 1. Words:, Inclusive OR literal with W = 1. Words:, Inclusive OR literal with W = 1. Cycles:, Inclusive OR literal with W = 1. Cycles:, Inclusive",
    "PIC18F6310/6410/8310/8410\nOR literal with W = 1. Cycles:, Inclusive OR literal with W = 1. Cycles:, Inclusive OR literal with W = 1. Q Cycle Activity:, Inclusive OR literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR literal with W = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR literal with W = Q Cycle Activity:. Q1, Inclusive OR literal with W = Q2. Q1, Inclusive OR literal with W = Q3. Q1, Inclusive OR literal with W = Q3. Q1, Inclusive OR literal with W = Q4. Decode, Inclusive OR literal with W = Read literal 'k'. Decode, Inclusive OR literal with W = Process Data. Decode, Inclusive OR literal with W = Process Data. Decode, Inclusive OR literal with W = Write to W. Example:, Inclusive OR literal with W = IORLW. Example:, Inclusive OR literal with W = 35h. Example:, Inclusive OR literal with W = . Example:, Inclusive OR literal with W = . Before Instruction,",
    "PIC18F6310/6410/8310/8410\nInclusive OR literal with W = Before Instruction. Before Instruction, Inclusive OR literal with W = . Before Instruction, Inclusive OR literal with W = . Before Instruction, Inclusive OR literal with W = . W, Inclusive OR literal with W = 9Ah. W, Inclusive OR literal with W = . W, Inclusive OR literal with W = . W, Inclusive OR literal with W = . After Instruction, Inclusive OR literal with W = After Instruction. After Instruction, Inclusive OR literal with W = . After Instruction, Inclusive OR literal with W = . After Instruction, Inclusive OR literal with W = . W, Inclusive OR literal with W = BFh. W, Inclusive OR literal with W = . W, Inclusive OR literal with W = . W, Inclusive OR literal with W = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Inclusive OR Wwith f = IORWF. Syntax:, Inclusive OR Wwith f = f {,d {,a}}. Syntax:, Inclusive OR Wwith f = . Syntax:, Inclusive OR Wwith f = . Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Inclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Inclusive OR Wwith f = . Operands:, Inclusive OR Wwith f = . Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \uf0ae dest. Operation:, Inclusive OR Wwith f = . Operation:, Inclusive OR Wwith f = . Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = . Status Affected:, Inclusive OR Wwith f = . Status Affected:, Inclusive OR Wwith f = . Encoding:, Inclusive OR",
    "PIC18F6310/6410/8310/8410\nWwith f = 0001. Encoding:, Inclusive OR Wwith f = 00da. Encoding:, Inclusive OR Wwith f = ffff. Encoding:, Inclusive OR Wwith f = ffff. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register 'f'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is",
    "PIC18F6310/6410/8310/8410\n' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = . Words:, Inclusive OR Wwith f = . Words:, Inclusive OR Wwith f = . Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = . Cycles:, Inclusive OR Wwith f = . Cycles:, Inclusive OR Wwith f = . Q Cycle Activity:, Inclusive OR Wwith f = . Q Cycle Activity:, Inclusive OR Wwith f = . Q Cycle Activity:, Inclusive OR Wwith f = . Q Cycle Activity:, Inclusive OR Wwith f = . Q1, Inclusive OR Wwith f = Q2. Q1, Inclusive OR Wwith f = Q3. Q1, Inclusive OR Wwith f = . Q1, Inclusive OR Wwith f =",
    "PIC18F6310/6410/8310/8410\nQ4. Decode, Inclusive OR Wwith f = Read register 'f'. Decode, Inclusive OR Wwith f = Process Data. Decode, Inclusive OR Wwith f = . Decode, Inclusive OR Wwith f = Write to destination. Example:, Inclusive OR Wwith f = IORWF. Example:, Inclusive OR Wwith f = RESULT, 0,. Example:, Inclusive OR Wwith f = 1. Example:, Inclusive OR Wwith f = . Before Instruction RESULT = 13h, Inclusive OR Wwith f = Before Instruction RESULT = 13h. Before Instruction RESULT = 13h, Inclusive OR Wwith f = . Before Instruction RESULT = 13h, Inclusive OR Wwith f = . Before Instruction RESULT = 13h, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = 91h. W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . After Instruction =, Inclusive OR Wwith f = After Instruction =. After Instruction =, Inclusive OR Wwith f = . After Instruction =, Inclusive OR Wwith f = . After Instruction",
    "PIC18F6310/6410/8310/8410\n=, Inclusive OR Wwith f = . RESULT, Inclusive OR Wwith f = 13h. RESULT, Inclusive OR Wwith f = . RESULT, Inclusive OR Wwith f = . RESULT, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = 93h. W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Syntax:, Load FSR = LFSR f, k. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operands:, Load FSR = 0 \uf0a3 f \uf0a3 2 0 \uf0a3 k \uf0a3 4095. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Operation:, Load FSR = k \uf0ae FSRf. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Status Affected:, Load FSR = None. Encoding:, Load FSR = 1110 1111. Encoding:, Load FSR = 1110 0000. Encoding:, Load",
    "PIC18F6310/6410/8310/8410\nFSR = 00ff k 7 kkk. Encoding:, Load FSR = k 11 kkk kkkk. Description:, Load FSR = The 12-bit literal 'k' is loaded into the file select register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the file select register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the file select register pointed to by 'f'.. Description:, Load FSR = The 12-bit literal 'k' is loaded into the file select register pointed to by 'f'.. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Words:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Cycles:, Load FSR = 2. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q",
    "PIC18F6310/6410/8310/8410\nCycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q Cycle Activity:, Load FSR = Q Cycle Activity:. Q1, Load FSR = Q2. Q1, Load FSR = Q3. Q1, Load FSR = . Q1, Load FSR = Q4. Decode, Load FSR = Read literal 'k' MSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' MSB to FSRfH. Decode, Load FSR = Read literal 'k' LSB. Decode, Load FSR = Process Data. Decode, Load FSR = Process Data. Decode, Load FSR = Write literal 'k' to FSRfL\nExample:\nLFSR 2, 3ABh\nAfter Instruction\nFSR2H\n= 03h\nFSR2L\n=\nABh",
    "PIC18F6310/6410/8310/8410\nSyntax:, Move f = MOVF. Syntax:,  = f {,d {,a}}. Syntax:,  = . Syntax:,  = . Syntax:,  = . Operands:, Move f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:,  = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:,  = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:,  = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:,  = . Operation:, Move f = f \uf0ae dest. Operation:,  = f \uf0ae dest. Operation:,  = f \uf0ae dest. Operation:,  = f \uf0ae dest. Operation:,  = . Status Affected:, Move f = N, Z. Status Affected:,  = N, Z. Status Affected:,  = N, Z. Status Affected:,  = N, Z. Status Affected:,  = . Encoding:, Move f = 0101. Encoding:,  = 00da. Encoding:,  = ffff. Encoding:,",
    "PIC18F6310/6410/8310/8410\n= ffff. Encoding:,  = . Description:, Move f = The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:,",
    "PIC18F6310/6410/8310/8410\n= The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:,",
    "PIC18F6310/6410/8310/8410\n= The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:,",
    "PIC18F6310/6410/8310/8410\n= The contents of register 'f' are moved to a destination dependent upon the status of 'd'. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:,  = . Words:, Move f = 1. Words:,  = 1. Words:,  = 1. Words:,  = 1. Words:,  = . Cycles:, Move f = 1. Cycles:,  = 1. Cycles:,  = 1. Cycles:,  = 1. Cycles:,  = . Q Cycle Activity: Q1 Decode, Move f = Q2. Q Cycle Activity: Q1 Decode,",
    "PIC18F6310/6410/8310/8410\n= Q3. Q Cycle Activity: Q1 Decode,  = . Q Cycle Activity: Q1 Decode,  = Q4. Q Cycle Activity: Q1 Decode,  = . , Move f = Read register 'f'. ,  = Process Data. ,  = . ,  = Write W. ,  = \nExample:\nMOVF   REG, 0, 0\nBefore Instruction\nREG\n= 22h\nW\n= FFh\nAfter Instruction\nREG\n= 22h\nW\n= 22h",
    "PIC18F6310/6410/8310/8410\nSyntax:, Move f to f = MOVFF. Syntax:, Move f to f = f s ,f d. Syntax:, Move f to f = . Syntax:, Move f to f = . Operands:, Move f to f = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operands:, Move f to f = 0 \uf0a3 f s \uf0a3 4095 0 \uf0a3 f d \uf0a3 4095. Operands:, Move f to f = . Operands:, Move f to f = . Operation:, Move f to f = (f s ) \uf0ae f d. Operation:, Move f to f = (f s ) \uf0ae f d. Operation:, Move f to f = . Operation:, Move f to f = . Status Affected:, Move f to f = None. Status Affected:, Move f to f = None. Status Affected:, Move f to f = . Status Affected:, Move f to f = . Encoding:, Move f to f = . Encoding:, Move f to f = . Encoding:, Move f to f = . Encoding:, Move f to f = . 1st word (source), Move",
    "PIC18F6310/6410/8310/8410\nf to f = 1100. 1st word (source), Move f to f = ffff. 1st word (source), Move f to f = ffff. 1st word (source), Move f to f = ffff s. 2nd word (destin.), Move f to f = 1111. 2nd word (destin.), Move f to f = ffff. 2nd word (destin.), Move f to f = ffff. 2nd word (destin.), Move f to f = ffff d\nDescription:\nThe contents of source register 'f s ' are moved to destination register 'f d '. Location of source 'f ' can be anywhere s in the 4096-byte data space (000h to FFFh) and location of destination 'f d ' can also be anywhere from 000h to FFFh.\nEither source or destination can be W (a useful special situation).\nMOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port).",
    "PIC18F6310/6410/8310/8410\nThe MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register",
    "PIC18F6310/6410/8310/8410\nSyntax:, Move literal to low nibble in BSR = MOVLW k. Syntax:, Move literal to low nibble in BSR = MOVLW k. Syntax:, Move literal to low nibble in BSR = MOVLW k. Operands:, Move literal to low nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operands:, Move literal to low nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operands:, Move literal to low nibble in BSR = 0 \uf0a3 k \uf0a3 255. Operation:, Move literal to low nibble in BSR = k \uf0ae BSR. Operation:, Move literal to low nibble in BSR = k \uf0ae BSR. Operation:, Move literal to low nibble in BSR = k \uf0ae BSR. Status Affected:, Move literal to low nibble in BSR = None. Status Affected:, Move literal to low nibble in BSR = None. Status Affected:, Move literal to low nibble in BSR = None. Encoding:, Move literal to low nibble in BSR = 0000. Encoding:, Move literal to low nibble in BSR =",
    "PIC18F6310/6410/8310/8410\n0001. Encoding:, Move literal to low nibble in BSR = kkkk kkkk. Description:, Move literal to low nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move literal to low nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Description:, Move literal to low nibble in BSR = The eight-bit literal 'k' is loaded into the Bank Select Register (BSR). The value of BSR<7:4> always remains ' 0 ', regardless of the value of k 7 :k 4 .. Words:, Move literal to low nibble in BSR = 1. Words:, Move literal to low nibble in BSR = 1. Words:, Move literal",
    "PIC18F6310/6410/8310/8410\nto low nibble in BSR = 1. Cycles:, Move literal to low nibble in BSR = 1. Cycles:, Move literal to low nibble in BSR = 1. Cycles:, Move literal to low nibble in BSR = 1. Q Cycle Activity:, Move literal to low nibble in BSR = . Q Cycle Activity:, Move literal to low nibble in BSR = . Q Cycle Activity:, Move literal to low nibble in BSR = . Q1, Move literal to low nibble in BSR = Q2. Q1, Move literal to low nibble in BSR = Q3. Q1, Move literal to low nibble in BSR = Q4. Decode, Move literal to low nibble in BSR = Read literal 'k'. Decode, Move literal to low nibble in BSR = Process Data. Decode, Move literal to low nibble in BSR = Write literal 'k' to BSR. Example:, Move literal to low nibble in BSR = . Example:, Move literal to low nibble in BSR = 5. Example:, Move",
    "PIC18F6310/6410/8310/8410\nliteral to low nibble in BSR = . , Move literal to low nibble in BSR = MOVLB. , Move literal to low nibble in BSR = . , Move literal to low nibble in BSR = . Before Instruction BSR Register After Instruction BSR Register, Move literal to low nibble in BSR = = =. Before Instruction BSR Register After Instruction BSR Register, Move literal to low nibble in BSR = 02h 05h. Before Instruction BSR Register After Instruction BSR Register, Move literal to low nibble in BSR = \nWords:\n2\nCycles:\n2 (3)\nQ Cycle Activity:\nQ1\nQ2\nQ3\nDecode, 1 = Read register 'f' (src). Decode, 2 = Process Data. Decode, 3 = No operation. Decode, 1 = No operation No dummy read. Decode, 2 = No operation. Decode, 3 = Write register 'f' (dest)\nExample:\nMOVFF   REG1, REG2\nBefore Instruction\nREG1\n=\n33h\nREG2\n=\n11h\nAfter Instruction\nREG1\n=\n33h\nREG2\n=\n33h\nQ4",
    "PIC18F6310/6410/8310/8410\nSyntax:, Move literal to W = MOVLW k. Syntax:, Move literal to W = MOVLW k. Syntax:, Move literal to W = MOVLW k. Syntax:, Move literal to W = MOVLW k. Operands:, Move literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Move literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, Move literal to W = k \uf0ae W. Operation:, Move literal to W = k \uf0ae W. Operation:, Move literal to W = k \uf0ae W. Operation:, Move literal to W = k \uf0ae W. Status Affected:, Move literal to W = None. Status Affected:, Move literal to W = None. Status Affected:, Move literal to W = None. Status Affected:, Move literal to W = None. Encoding:, Move literal to W = 0000. Encoding:, Move literal to W = 1110. Encoding:, Move literal to W = kkkk. Encoding:, Move literal to W =",
    "PIC18F6310/6410/8310/8410\nkkkk. Description:, Move literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move literal to W = The eight-bit literal 'k' is loaded into W.. Description:, Move literal to W = The eight-bit literal 'k' is loaded into W.. Words:, Move literal to W = 1. Words:, Move literal to W = 1. Words:, Move literal to W = 1. Words:, Move literal to W = 1. Cycles:, Move literal to W = 1. Cycles:, Move literal to W = 1. Cycles:, Move literal to W = 1. Cycles:, Move literal to W = 1. Q Cycle Activity:, Move literal to W = Q Cycle Activity:. Q Cycle Activity:, Move literal to W = Q Cycle Activity:. Q Cycle Activity:, Move literal to W = Q Cycle Activity:. Q Cycle Activity:, Move literal to W = Q Cycle Activity:. Q1, Move literal to W =",
    "PIC18F6310/6410/8310/8410\nQ2. Q1, Move literal to W = Q3. Q1, Move literal to W = Q4. Q1, Move literal to W = Q4. Decode, Move literal to W = Read literal 'k'. Decode, Move literal to W = Process Data. Decode, Move literal to W = Write to W. Decode, Move literal to W = Write to W. Example:, Move literal to W = MOVLW. Example:, Move literal to W = 5Ah. Example:, Move literal to W = . Example:, Move literal to W = . After Instruction, Move literal to W = After Instruction. After Instruction, Move literal to W = After Instruction. After Instruction, Move literal to W = After Instruction. After Instruction, Move literal to W = After Instruction",
    "PIC18F6310/6410/8310/8410\nSyntax:, MOVWF = Syntax:. Syntax:, Move Wto f = MOVWF. Syntax:, Move Wto f = f {,a}. Operands:, MOVWF = Operands:. Operands:, Move Wto f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Move Wto f = . Operation:, MOVWF = Operation:. Operation:, Move Wto f = (W) \uf0ae f. Operation:, Move Wto f = . Status Affected:, MOVWF = Status Affected:. Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = . Encoding:, MOVWF = Encoding:. Encoding:, Move Wto f = 0110. Encoding:, Move Wto f = 111a. Description:, MOVWF = Description:. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Move Wto f = Move data from Wto register 'f'. Location 'f' can be anywhere in the 256-byte bank. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, MOVWF = Words:. Words:, Move Wto f = 1. Words:, Move Wto f = . Cycles:, MOVWF = Cycles:. Cycles:, Move Wto f = 1. Cycles:, Move Wto f = . Q Cycle",
    "PIC18F6310/6410/8310/8410\nActivity:, MOVWF = Q Cycle Activity:. Q Cycle Activity:, Move Wto f = . Q Cycle Activity:, Move Wto f = . , MOVWF = Q1. , Move Wto f = Q2. , Move Wto f = Q3. , MOVWF = Decode. , Move Wto f = Read register 'f'. , Move Wto f = Process Data\nExample:\nMOVWF\nREG, 0\nBefore Instruction\nW\n=\n4Fh\nREG\n=\nFFh\nAfter Instruction\nW\n=\n4Fh\nREG\n=\n4Fh",
    "PIC18F6310/6410/8310/8410\nSyntax:, Multiply literal with W = MULLW. Syntax:, Multiply literal with W = k. Syntax:, Multiply literal with W = . Operands:, Multiply literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Multiply literal with W = 0 \uf0a3 k \uf0a3 255. Operands:, Multiply literal with W = 0 \uf0a3 k \uf0a3 255. Operation:, Multiply literal with W = (W) x k \uf0ae PRODH:PRODL. Operation:, Multiply literal with W = (W) x k \uf0ae PRODH:PRODL. Operation:, Multiply literal with W = (W) x k \uf0ae PRODH:PRODL. Status Affected:, Multiply literal with W = None. Status Affected:, Multiply literal with W = None. Status Affected:, Multiply literal with W = None. Encoding:, Multiply literal with W = 0000. Encoding:, Multiply literal with W = 1101 kkkk. Encoding:, Multiply literal with W = kkkk. Description:, Multiply literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'.",
    "PIC18F6310/6410/8310/8410\nThe 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected.. Description:, Multiply literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected.. Description:, Multiply literal with W = An unsigned multiplication is carried out between the contents of Wand the 8-bit literal 'k'. The 16-bit result is placed in PRODH:PRODLregister pair. PRODH contains the high byte. Wis unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected.. Words:,",
    "PIC18F6310/6410/8310/8410\nMultiply literal with W = 1. Words:, Multiply literal with W = 1. Words:, Multiply literal with W = 1. Cycles:, Multiply literal with W = 1. Cycles:, Multiply literal with W = 1. Cycles:, Multiply literal with W = 1. Q Cycle Activity:, Multiply literal with W = . Q Cycle Activity:, Multiply literal with W = . Q Cycle Activity:, Multiply literal with W = . Q1, Multiply literal with W = Q2. Q1, Multiply literal with W = Q3. Q1, Multiply literal with W = Q4. Decode, Multiply literal with W = Read literal 'k'. Decode, Multiply literal with W = Process Data. Decode, Multiply literal with W = Write registers PRODH: PRODL",
    "Example:\nMULLW   0C4h\nBefore Instruction\nW\n=\nE2h\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\nE2h\nPRODH\n=\nADh\nPRODL\n=\n08h",
    "Example:\nSyntax:, Multiply Wwith f = MULWF. Syntax:, Multiply Wwith f = f {,a}. Syntax:, Multiply Wwith f = . Syntax:, Multiply Wwith f = . Operands:, Multiply Wwith f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Multiply Wwith f = . Operands:, Multiply Wwith f = . Operands:, Multiply Wwith f = . Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Operation:, Multiply Wwith f = (W) x (f) \uf0ae PRODH:PRODL. Status Affected:, Multiply Wwith f = None. Status Affected:, Multiply Wwith f = . Status Affected:, Multiply Wwith f = . Status Affected:, Multiply Wwith f = . Encoding:, Multiply Wwith f = 0000. Encoding:, Multiply Wwith",
    "Example:\nf = 001a. Encoding:, Multiply Wwith f = ffff. Encoding:, Multiply Wwith f = ffff. Description:, Multiply Wwith f = An unsigned multiplication is carried out between the contents of Wandthe register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand 'f' are unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95. Description:, Multiply Wwith f = An unsigned multiplication is carried out between the contents of Wandthe register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand 'f' are unchanged. None of the Status flags are affected. Note that",
    "Example:\nneither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95. Description:, Multiply Wwith f = An unsigned multiplication is carried out between the contents of Wandthe register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand 'f' are unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95. Description:, Multiply Wwith f = An unsigned multiplication is carried",
    "Example:\nout between the contents of Wandthe register file location 'f'. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand 'f' are unchanged. None of the Status flags are affected. Note that neither Overflow nor Carry is possible in this operation. A Zero result is possible but not detected. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95. Words:, Multiply Wwith f = 1. Words:, Multiply Wwith f = . Words:, Multiply Wwith f = . Words:, Multiply Wwith f = . Cycles:, Multiply Wwith f = 1. Cycles:, Multiply Wwith f = . Cycles:, Multiply Wwith f = . Cycles:, Multiply Wwith f = . Q Cycle Activity: Q1, Multiply Wwith f = Q2. Q Cycle Activity: Q1, Multiply Wwith f =",
    "Example:\nQ3. Q Cycle Activity: Q1, Multiply Wwith f = . Q Cycle Activity: Q1, Multiply Wwith f = Q4. Decode, Multiply Wwith f = . Decode, Multiply Wwith f = Read register 'f'. Decode, Multiply Wwith f = Process Data. Decode, Multiply Wwith f = Write registers PRODH: PRODL\nExample:\nMULWF   REG, 1\nBefore Instruction\nW\n= C4h\nREG\n=\nB5h\nPRODH\n=\n?\nPRODL\n= ?\nAfter Instruction\nW\n= C4h\nREG\n=\nB5h\nPRODH\n=\n8Ah\nPRODL\n=\n94h",
    "PIC18F6310/6410/8310/8410\nSyntax:, Negate f = NEGF. Syntax:, Negate f = f {,a}. Syntax:, Negate f = . Syntax:, Negate f = . Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operands:, Negate f = 0 \uf0a3 f \uf0a3 255 a \uf0ce [0,1]. Operation:, Negate f = ( f ) + 1 \uf0ae f. Operation:, Negate f = ( f ) + 1 \uf0ae f. Operation:, Negate f = . Operation:, Negate f = . Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:, Negate f = N, OV, C, DC, Z. Encoding:, Negate f = 0110.",
    "PIC18F6310/6410/8310/8410\nEncoding:, Negate f = 110a. Encoding:, Negate f = ffff. Encoding:, Negate f = ffff. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95",
    "PIC18F6310/6410/8310/8410\n(5Fh). See Section 25.2.3 for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Negate f = Location 'f' is negated using two's complement. The result is placed in the data memory location 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3",
    "PIC18F6310/6410/8310/8410\nfor details.. Words:, Negate f = 1. Words:, Negate f = . Words:, Negate f = . Words:, Negate f = . Cycles:, Negate f = 1. Cycles:, Negate f = . Cycles:, Negate f = . Cycles:, Negate f = . Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = . Q Cycle Activity:, Negate f = \nDecode, Q2 = Read register 'f'. Decode, Q3 = Process Data. Decode, Q4 = Write register 'f'",
    "Example:\nNEGF\nREG, 1\nBefore Instruction\nREG\n=\n0011 1010 [3Ah]\nAfter Instruction\nREG\n=\n1100 0110 [C6h]",
    "No Operation\nSyntax:, 1 = NOP. Syntax:, 2 = NOP. Syntax:, 3 = NOP. Syntax:, 4 = NOP. Operands:, 1 = None. Operands:, 2 = None. Operands:, 3 = None. Operands:, 4 = None. Operation:, 1 = No operation. Operation:, 2 = No operation. Operation:, 3 = No operation. Operation:, 4 = No operation. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 0000 1111. Encoding:, 2 = 0000 xxxx. Encoding:, 3 = 0000 xxxx. Encoding:, 4 = 0000 xxxx. Description:, 1 = No operation.. Description:, 2 = No operation.. Description:, 3 = No operation.. Description:, 4 = No operation.. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1.",
    "No Operation\nCycles:, 4 = 1. Q Cycle Activity: Q1, 1 = Q2. Q Cycle Activity: Q1, 2 = Q3. Q Cycle Activity: Q1, 3 = Q3. Q Cycle Activity: Q1, 4 = Q4. Decode, 1 = No operation. Decode, 2 = No operation. Decode, 3 = No operation. Decode, 4 = No operation\nExample:\nNone.",
    "Pop Top of Return Stack\nSyntax:\nPOP\nOperands:\nNone\nOperation:\n(TOS) \uf0ae bit bucket\nStatus Affected:\nNone\nEncoding:\n0000\n0000\n0000\n0110\nDescription:\nThe TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nNo\noperation\nPOP TOS\nvalue\nNo\noperation\nExample:\nPOP GOTO\nNEW\nBefore Instruction\nTOS\n= 0031A2h\nStack (1 level down)\n=\n014332h\nAfter Instruction\nTOS\n= 014332h\nPC\n= NEW",
    "Pop Top of Return Stack\nSyntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Syntax:, Push Top of Return Stack = PUSH. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Operation:, Push Top of Return Stack = (PC + 2) \uf0ae TOS. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return",
    "Pop Top of Return Stack\nStack = 0101. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows implementing a software stack by modifying TOS and then pushing it onto the return stack.. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1.",
    "Pop Top of Return Stack\nWords:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q1, Push Top of Return Stack = Q2. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q4. Decode, Push Top of Return Stack = PUSH PC + 2 onto return stack. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack = No operation. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:,",
    "Pop Top of Return Stack\nPush Top of Return Stack = PUSH. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. Before Instruction, Push Top of Return Stack = Before Instruction. TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack = =. TOS, Push Top of Return Stack = 345Ah. TOS, Push Top of Return Stack = . PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack = 0124h. PC, Push Top of Return Stack = . After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. After Instruction, Push Top of Return Stack = After Instruction. PC, Push Top of Return Stack = PC. PC, Push Top of Return Stack = =. PC, Push Top of Return Stack = 0126h. PC, Push Top of Return Stack = . TOS, Push Top of Return Stack = TOS. TOS, Push Top of Return Stack",
    "Pop Top of Return Stack\n= =. TOS, Push Top of Return Stack = 0126h. TOS, Push Top of Return Stack = . Stack (1 level down), Push Top of Return Stack = Stack (1 level down). Stack (1 level down), Push Top of Return Stack = =. Stack (1 level down), Push Top of Return Stack = 345Ah. Stack (1 level down), Push Top of Return Stack = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Syntax:, Relative Call = RCALL n. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operands:, Relative Call = -1024 \uf0a3 n \uf0a3 1023. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Operation:, Relative Call = (PC) + 2 \uf0ae TOS, (PC) + 2 + 2n \uf0ae PC. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Encoding:, Relative Call = 1101. Encoding:, Relative",
    "PIC18F6310/6410/8310/8410\nCall = 1nnn. Encoding:, Relative Call = nnnn. Encoding:, Relative Call = nnnn. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the",
    "PIC18F6310/6410/8310/8410\nstack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC + 2) is pushed onto the stack. Then, add the 2's complement number '2n' to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Words:, Relative Call = 1. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q Cycle Activity:, Relative",
    "PIC18F6310/6410/8310/8410\nCall = Q Cycle Activity:. Q Cycle Activity:, Relative Call = Q Cycle Activity:. Q1, Relative Call = Q2. Q1, Relative Call = Q3. Q1, Relative Call = . Q1, Relative Call = Q4. Decode, Relative Call = Read literal 'n' Push PC to stack. Decode, Relative Call = Process Data. Decode, Relative Call = . Decode, Relative Call = Write to PC. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = . No operation, Relative Call = No operation",
    "PIC18F6310/6410/8310/8410\nSyntax:, Reset = RESET. Syntax:, Reset = RESET. Syntax:, Reset = RESET. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Encoding:, Reset = 0000. Encoding:, Reset = 0000. Encoding:, Reset = 1111. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Cycles:, Reset = 1.",
    "PIC18F6310/6410/8310/8410\nCycles:, Reset = 1. Cycles:, Reset = 1. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q1, Reset = Q2. Q1, Reset = Q3. Q1, Reset = Q4. Decode, Reset = Start Reset. Decode, Reset = No operation. Decode, Reset = No operation. Example:, Reset = RESET. Example:, Reset = RESET. Example:, Reset = RESET. After Instruction Registers = Flags* =, Reset = Reset Value. After Instruction Registers = Flags* =, Reset = Reset Value. After Instruction Registers = Flags* =, Reset = Reset Value\nExample:\nHERE\nRCALL Jump\nBefore Instruction\nPC = Address (HERE)\nAfter Instruction\nPC =\nAddress\n(Jump)\nTOS =\nAddress\n(HERE + 2)",
    "PIC18F6310/6410/8310/8410\nSyntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Syntax:, Return from Interrupt = RETFIE {s}. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operands:, Return from Interrupt = s \uf0ce [0,1]. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or",
    "PIC18F6310/6410/8310/8410\nPEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Interrupt = (TOS) \uf0ae PC, 1 \uf0ae GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0001. Encoding:, Return from Interrupt = 000s. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by",
    "PIC18F6310/6410/8310/8410\nsetting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding",
    "PIC18F6310/6410/8310/8410\nregisters, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Interrupt = Return from interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If 's' = 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q Cycle Activity:, Return from Interrupt = . Q1, Return from",
    "PIC18F6310/6410/8310/8410\nInterrupt = Q2. Q1, Return from Interrupt = Q3. Q1, Return from Interrupt = Q3. Q1, Return from Interrupt = Q4. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = No operation. Decode, Return from Interrupt = Pop PCfrom stack Set GIEH or GIEL. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation. No operation, Return from Interrupt = No operation\nExample:",
    "RETFIE  1\nAfter Interrupt\nPC\n=\nTOS\nW\n= WS\nBSR\n=\nBSRS\nSTATUS\n= STATUSS\nGIE/GIEH, PEIE/GIEL\n=\n1",
    "RETFIE  1\nSyntax:, Return literal to W = RETLW k. Syntax:, Return literal to W = RETLW k. Syntax:, Return literal to W = RETLW k. Syntax:, Return literal to W = RETLW k. Operands:, Return literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return literal to W = 0 \uf0a3 k \uf0a3 255. Operands:, Return literal to W = 0 \uf0a3 k \uf0a3 255. Operation:, Return literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Operation:, Return literal to W = k \uf0ae W, (TOS) \uf0ae PC, PCLATU, PCLATH are unchanged. Status Affected:, Return literal to W = None. Status Affected:, Return literal to W = None. Status Affected:, Return literal to W = None. Status Affected:, Return literal to",
    "RETFIE  1\nW = None. Encoding:, Return literal to W = 0000. Encoding:, Return literal to W = 1100. Encoding:, Return literal to W = kkkk. Encoding:, Return literal to W = kkkk. Description:, Return literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return literal to W = Wis loaded with the eight-bit literal 'k'. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains",
    "RETFIE  1\nunchanged.. Words:, Return literal to W = 1. Words:, Return literal to W = 1. Words:, Return literal to W = 1. Words:, Return literal to W = 1. Cycles:, Return literal to W = 2. Cycles:, Return literal to W = 2. Cycles:, Return literal to W = 2. Cycles:, Return literal to W = 2. Q Cycle Activity:, Return literal to W = Q Cycle Activity:. Q Cycle Activity:, Return literal to W = Q Cycle Activity:. Q Cycle Activity:, Return literal to W = Q Cycle Activity:. Q Cycle Activity:, Return literal to W = Q Cycle Activity:. Q1, Return literal to W = Q2. Q1, Return literal to W = Q3. Q1, Return literal to W = . Q1, Return literal to W = Q4. Decode, Return literal to W = Read literal 'k'. Decode, Return literal to W = Process Data. Decode, Return literal to W = . Decode, Return literal to W = Pop PCfrom stack, Write to W. No operation, Return literal to W = No operation. No operation, Return",
    "RETFIE  1\nliteral to W = No operation. No operation, Return literal to W = . No operation, Return literal to W = No operation",
    "Example:\n:\nTABLE\n:\n:\nCALL TABLE\n; W contains table\n; offset value\n; W now has\n; table value\nADDWF PCL\n; W = offset\nRETLW k0\n; Begin table\nRETLW k1\n;\nRETLW kn\n; End of table\nBefore Instruction\nW\n= 07h\nAfter Instruction\nW\n=\nvalue of kn",
    "PIC18F6310/6410/8310/8410\nSyntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Syntax:, Return from Subroutine = RETURN {s}. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operands:, Return from Subroutine = s \uf0ce [0,1]. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae",
    "PIC18F6310/6410/8310/8410\nBSR,. Operation:, Return from Subroutine = (TOS) \uf0ae PC; if s = 1 , (WS) \uf0ae W, (STATUSS) \uf0ae STATUS, (BSRS) \uf0ae BSR,. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Status Affected:, Return from Subroutine = None. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0000. Encoding:, Return from Subroutine = 0001. Encoding:, Return from Subroutine = 001s. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Subroutine = Return from",
    "PIC18F6310/6410/8310/8410\nsubroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If 's' = 0 , no update of these registers occurs.. Description:, Return from Subroutine = Return from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If 's'= 1 , the contents of the shadow registers, WS, STATUSS and BSRS, are loaded into their corresponding registers, W, STATUS and BSR. If",
    "PIC18F6310/6410/8310/8410\n's' = 0 , no update of these registers occurs.. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Words:, Return from Subroutine = 1. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Cycles:, Return from Subroutine = 2. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q Cycle Activity:, Return from Subroutine = Q Cycle Activity:. Q1, Return from Subroutine = Q2. Q1, Return from Subroutine = Q3. Q1, Return from Subroutine = . Q1, Return from Subroutine = Q4. Decode, Return from Subroutine = . Decode, Return from Subroutine = No operation. Decode, Return from",
    "PIC18F6310/6410/8310/8410\nSubroutine = Process Data. Decode, Return from Subroutine = Pop PCfrom stack. , Return from Subroutine = No operation. , Return from Subroutine = No operation. , Return from Subroutine = No operation. , Return from Subroutine = No operation\nExample:\nRETURN\nAfter Instruction:\nPC = TOS",
    "Rotate Left f through Carry\nSyntax:\nRLCF     f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\nOperation:\n(f<n>) \uf0ae dest<n + 1>,\n(f<7>) \uf0ae C,\n(C) \uf0ae dest<0>\nStatus Affected:\nC, N, Z\nEncoding:\n0011\n01da\nffff\nffff\nDescription:\nThe contents of register 'f' are rotated one bit to the left through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f'.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination\nExample:",
    "Rotate Left f through Carry\nRLCF\nREG, 0, 0\nBefore Instruction\nREG\n=\n1110 0110\nC\n=\n0\nAfter Instruction\nREG\n=\n1110 0110\nW\n=\n1100 1100\nC\n=\n1\nC\nregister f",
    "PIC18F6310/6410/8310/8410\nSyntax:, Rotate Left f (no carry) = RLNCF. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Syntax:, Rotate Left f (no carry) = f {,d {,a}}. Operands:, Rotate Left f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Left f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Rotate Left f (no carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest<0>. Operation:, Rotate Left f (no carry) =",
    "PIC18F6310/6410/8310/8410\n(f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest<0>. Operation:, Rotate Left f (no carry) = (f<n>) \uf0ae dest<n + 1 >, (f<7>) \uf0ae dest<0>. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Status Affected:, Rotate Left f (no carry) = N, Z. Encoding:, Rotate Left f (no carry) = 0100. Encoding:, Rotate Left f (no carry) = 01da. Encoding:, Rotate Left f (no carry) = ffff. Encoding:, Rotate Left f (no carry) = ffff. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one",
    "PIC18F6310/6410/8310/8410\nbit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed",
    "PIC18F6310/6410/8310/8410\nLiteral Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Left f (no carry) = The contents of register 'f' are rotated one bit to the left. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank",
    "PIC18F6310/6410/8310/8410\nis selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Words:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Cycles:, Rotate Left f (no carry) = 1. Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q Cycle Activity:, Rotate Left f (no carry) = . Q1, Rotate Left f (no carry) = .",
    "PIC18F6310/6410/8310/8410\nQ1, Rotate Left f (no carry) = . Q1, Rotate Left f (no carry) = . Q1, Rotate Left f (no carry) = . , Rotate Left f (no carry) = Q2 Q3 Q4 Read register 'f' Process Data Write to destination. , Rotate Left f (no carry) = Q2 Q3 Q4 Read register 'f' Process Data Write to destination. , Rotate Left f (no carry) = Q2 Q3 Q4 Read register 'f' Process Data Write to destination. , Rotate Left f (no carry) = Q2 Q3 Q4 Read register 'f' Process Data Write to destination. Decode, Rotate Left f (no carry) = RLNCF REG, 1, 0. Decode, Rotate Left f (no carry) = RLNCF REG, 1, 0. Decode, Rotate Left f (no carry) = RLNCF REG, 1, 0. Decode, Rotate Left f (no carry) = RLNCF REG, 1, 0. Before Instruction REG =, Rotate Left f (no carry) = 1010. Before",
    "PIC18F6310/6410/8310/8410\nInstruction REG =, Rotate Left f (no carry) = 1011. Before Instruction REG =, Rotate Left f (no carry) = . Before Instruction REG =, Rotate Left f (no carry) = . After Instruction REG =, Rotate Left f (no carry) = 0101. After Instruction REG =, Rotate Left f (no carry) = 0111. After Instruction REG =, Rotate Left f (no carry) = . After Instruction REG =, Rotate Left f (no carry) = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Syntax:, Rotate Right f through Carry = RRCF f {,d {,a}}. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f through Carry = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f<0>) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry =",
    "PIC18F6310/6410/8310/8410\n(f<n>) \uf0ae dest<n - 1 >, (f<0>) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f<0>) \uf0ae C, (C) \uf0ae dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \uf0ae dest<n - 1 >, (f<0>) \uf0ae C, (C) \uf0ae dest<7>. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Encoding:, Rotate Right f through Carry = 0011. Encoding:, Rotate Right f through Carry = 00da. Encoding:, Rotate Right f through Carry = ffff. Encoding:, Rotate Right f through Carry = ffff. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated",
    "PIC18F6310/6410/8310/8410\none bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f', If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f', If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is",
    "PIC18F6310/6410/8310/8410\nenabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f', If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f through Carry = The contents of register 'f' are rotated one bit to the right through the Carry flag. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f', If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Q Cycle Activity: Q1, Rotate Right f through Carry = Q2. Q Cycle Activity: Q1, Rotate Right f through Carry = . Q Cycle Activity: Q1, Rotate Right f through Carry = . Q Cycle Activity: Q1, Rotate Right f through Carry = . Decode, Rotate Right f through Carry = Read register 'f'.",
    "PIC18F6310/6410/8310/8410\nDecode, Rotate Right f through Carry = Q3 Q4 Process. Decode, Rotate Right f through Carry = Q3 Q4 Process. Decode, Rotate Right f through Carry = Write to. Example:, Rotate Right f through Carry = RRCF. Example:, Rotate Right f through Carry = . Example:, Rotate Right f through Carry = . Example:, Rotate Right f through Carry = . , Rotate Right f through Carry = . , Rotate Right f through Carry = REG, 0,. , Rotate Right f through Carry = 0. , Rotate Right f through Carry = . Before Instruction, Rotate Right f through Carry = Before Instruction. Before Instruction, Rotate Right f through Carry = Before Instruction. Before Instruction, Rotate Right f through Carry = Before Instruction. Before Instruction, Rotate Right f through Carry = Before Instruction. REG C, Rotate Right f through Carry = = 1110 = 0. REG C, Rotate Right f through Carry = 0110. REG C, Rotate Right f through Carry = . REG C, Rotate Right f through Carry = . After Instruction REG W, Rotate Right f through Carry = = 1110 = 0111 0. After Instruction REG W,",
    "PIC18F6310/6410/8310/8410\nRotate Right f through Carry = 0110 0011. After Instruction REG W, Rotate Right f through Carry = . After Instruction REG W, Rotate Right f through Carry = . C, Rotate Right f through Carry = =. C, Rotate Right f through Carry = . C, Rotate Right f through Carry = . C, Rotate Right f through Carry = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Rotate Right f (no carry) = RRNCF f {,d {,a}}. Syntax:, Rotate Right f (no carry) = RRNCF f {,d {,a}}. Syntax:, Rotate Right f (no carry) = RRNCF f {,d {,a}}. Syntax:, Rotate Right f (no carry) = RRNCF f {,d {,a}}. Syntax:, Rotate Right f (no carry) = RRNCF f {,d {,a}}. Operands:, Rotate Right f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f (no carry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Rotate Right f (no",
    "PIC18F6310/6410/8310/8410\ncarry) = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Rotate Right f (no carry) = (f<n>) \uf0ae dest<n - 1>, (f<0>) \uf0ae dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \uf0ae dest<n - 1>, (f<0>) \uf0ae dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \uf0ae dest<n - 1>, (f<0>) \uf0ae dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \uf0ae dest<n - 1>, (f<0>) \uf0ae dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \uf0ae dest<n - 1>, (f<0>) \uf0ae dest<7>. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate",
    "PIC18F6310/6410/8310/8410\nRight f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Encoding:, Rotate Right f (no carry) = 0100. Encoding:, Rotate Right f (no carry) = 00da. Encoding:, Rotate Right f (no carry) = ffff. Encoding:, Rotate Right f (no carry) = ffff. Encoding:, Rotate Right f (no carry) = . Description:, Rotate Right f (no carry) = The contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset",
    "PIC18F6310/6410/8310/8410\nAddressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f (no carry) = The contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f (no carry) = The contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is",
    "PIC18F6310/6410/8310/8410\n' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate Right f (no carry) = The contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Rotate",
    "PIC18F6310/6410/8310/8410\nRight f (no carry) = The contents of register 'f' are rotated one bit to the right. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed back in register 'f'. If 'a' is ' 0 ', the Access Bank will be selected, overriding the BSR value. If 'a' is ' 1 ', then the bank will be selected as per the BSR value. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, Rotate Right f (no carry) = 1. Words:, Rotate Right f (no carry) = 1. Words:, Rotate Right f (no carry) = 1. Words:, Rotate Right f (no carry) = 1. Words:, Rotate Right f (no carry) = 1. Cycles:, Rotate Right f (no carry) = 1. Cycles:, Rotate Right f (no carry) = 1.",
    "PIC18F6310/6410/8310/8410\nCycles:, Rotate Right f (no carry) = 1. Cycles:, Rotate Right f (no carry) = 1. Cycles:, Rotate Right f (no carry) = 1. Q Cycle Activity:, Rotate Right f (no carry) = . Q Cycle Activity:, Rotate Right f (no carry) = . Q Cycle Activity:, Rotate Right f (no carry) = . Q Cycle Activity:, Rotate Right f (no carry) = . Q Cycle Activity:, Rotate Right f (no carry) = . Q1, Rotate Right f (no carry) = Q2. Q1, Rotate Right f (no carry) = Q2. Q1, Rotate Right f (no carry) = Q3. Q1, Rotate Right f (no carry) = Q4. Q1, Rotate Right f (no carry) = . Decode, Rotate Right f (no carry) = Read register 'f'. Decode, Rotate Right f (no carry) = Read register 'f'. Decode, Rotate Right f (no carry) = Process Data. Decode, Rotate Right f (no carry) = Write to destination.",
    "PIC18F6310/6410/8310/8410\nDecode, Rotate Right f (no carry) = . Example 1:, Rotate Right f (no carry) = RRNCF REG,. Example 1:, Rotate Right f (no carry) = RRNCF REG,. Example 1:, Rotate Right f (no carry) = 1, 0. Example 1:, Rotate Right f (no carry) = 1, 0. Example 1:, Rotate Right f (no carry) = . Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. REG, Rotate Right f (no carry) = = 1101. REG, Rotate Right f (no carry) = 0111. REG, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = . After Instruction = 1110, Rotate Right f (no carry) = After Instruction =",
    "PIC18F6310/6410/8310/8410\n1110. After Instruction = 1110, Rotate Right f (no carry) = After Instruction = 1110. After Instruction = 1110, Rotate Right f (no carry) = After Instruction = 1110. After Instruction = 1110, Rotate Right f (no carry) = After Instruction = 1110. After Instruction = 1110, Rotate Right f (no carry) = After Instruction = 1110. REG, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = 1011. REG, Rotate Right f (no carry) = 0. REG, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = . Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. Before Instruction, Rotate Right f (no carry) = Before Instruction. W REG, Rotate Right f (no carry) = = ? =. W REG, Rotate Right f (no carry) = . W REG,",
    "PIC18F6310/6410/8310/8410\nRotate Right f (no carry) = . W REG, Rotate Right f (no carry) = . W REG, Rotate Right f (no carry) = . 1101 0111 After Instruction, Rotate Right f (no carry) = 1101 0111 After Instruction. 1101 0111 After Instruction, Rotate Right f (no carry) = 1101 0111 After Instruction. 1101 0111 After Instruction, Rotate Right f (no carry) = 1101 0111 After Instruction. 1101 0111 After Instruction, Rotate Right f (no carry) = 1101 0111 After Instruction. 1101 0111 After Instruction, Rotate Right f (no carry) = 1101 0111 After Instruction. W, Rotate Right f (no carry) = = 1110. W, Rotate Right f (no carry) = 1011. W, Rotate Right f (no carry) = . W, Rotate Right f (no carry) = . W, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = = 1101. REG, Rotate Right f (no carry) = 0111. REG, Rotate Right f (no carry) = .",
    "PIC18F6310/6410/8310/8410\nREG, Rotate Right f (no carry) = . REG, Rotate Right f (no carry) = ",
    "PIC18F6310/6410/8310/8410\nSETF, 1 = Set f. SETF, 2 = Set f. SETF, 3 = Set f. SETF, 4 = Set f. Syntax:, 1 = SETF f {,a}. Syntax:, 2 = SETF f {,a}. Syntax:, 3 = SETF f {,a}. Syntax:, 4 = SETF f {,a}. Operands:, 1 = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, 2 = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, 3 = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operands:, 4 = 0 \uf0a3 f \uf0a3 255 a \uf0ce\uf020 [0,1]. Operation:, 1 = FFh \uf0ae f. Operation:, 2 = FFh \uf0ae f. Operation:, 3 = FFh \uf0ae f. Operation:, 4 = FFh \uf0ae f. Status Affected:, 1 = None. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = 0110. Encoding:, 2 = 100a. Encoding:, 3 = ffff.",
    "PIC18F6310/6410/8310/8410\nEncoding:, 4 = ffff. Description:, 1 = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, 2 = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, 3 = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Description:, 4 = The contents of the specified register are set to FFh. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See. Words:, 1 = 1. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = 1. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = . Q Cycle Activity:, 2 = . Q Cycle Activity:, 3 = . Q Cycle Activity:, 4 = . Q1, 1 = Q2. Q1, 2 = . Q1, 3 = Q3. Q1, 4 =",
    "PIC18F6310/6410/8310/8410\nQ4. Decode, 1 = register. Decode, 2 = Read 'f'. Decode, 3 = Process Data. Decode, 4 = Write register 'f'. Example: SETF REG,1, 1 = Example: SETF REG,1. Example: SETF REG,1, 2 = Example: SETF REG,1. Example: SETF REG,1, 3 = Example: SETF REG,1. Example: SETF REG,1, 4 = Example: SETF REG,1. Before, 1 = Instruction =. Before, 2 = 5Ah. Before, 3 = . Before, 4 = . REG After Instruction REG, 1 = =. REG After Instruction REG, 2 = FFh. REG After Instruction REG, 3 = . REG After Instruction REG, 4 = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:, Enter Sleep mode = SLEEP. Syntax:,  = . Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:, Enter Sleep mode = None. Operands:,  = . Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:, Enter Sleep mode = 00h \uf0ae WDT, 0 \uf0ae WDT postscaler, 1 \uf0ae TO, 0 \uf0ae PD. Operation:,",
    "PIC18F6310/6410/8310/8410\n= . Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:, Enter Sleep mode = TO, PD. Status Affected:,  = . Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0000. Encoding:, Enter Sleep mode = 0011. Encoding:,",
    "PIC18F6310/6410/8310/8410\n= . Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its post- scaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its post- scaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its post- scaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:, Enter Sleep mode = The Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its post- scaler are cleared. The processor is put into Sleep mode with the oscillator stopped.. Description:,",
    "PIC18F6310/6410/8310/8410\n= . Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:, Enter Sleep mode = 1. Words:,  = . Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:, Enter Sleep mode = 1. Cycles:,  = . Q Cycle Activity:, Enter Sleep mode = Q Cycle Activity:. Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:, Enter Sleep mode = . Q Cycle Activity:,  = . Q1, Enter Sleep mode = Q2. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q3. Q1, Enter Sleep mode = Q4. Q1,  = . Decode, Enter Sleep mode = No operation. Decode, Enter Sleep mode = Process Data. Decode, Enter Sleep mode = Process Data. Decode, Enter Sleep mode = Go to Sleep. Decode,  = \nExample:\nSLEEP\nBefore Instruction\nTO\n=\n?\nPD\n=\n?\nAfter Instruction\nTO\n=",
    "PIC18F6310/6410/8310/8410\n1 \u2020\nPD\n=\n0\n- \u2020   If WDT causes wake-up, this bit is cleared.",
    "PIC18F6310/6410/8310/8410\nSyntax:, Subtract f from Wwith borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith borrow = SUBFWB f {,d {,a}}. Syntax:, Subtract f from Wwith borrow = SUBFWB f {,d {,a}}. Operands:, Subtract f from Wwith borrow = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract f from Wwith borrow = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract f from Wwith borrow = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract f from Wwith borrow = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Subtract f from Wwith borrow = (W) - (f) -",
    "PIC18F6310/6410/8310/8410\n(C) \uf0ae\uf020 dest. Operation:, Subtract f from Wwith borrow = (W) - (f) - (C) \uf0ae\uf020 dest. Operation:, Subtract f from Wwith borrow = (W) - (f) - (C) \uf0ae\uf020 dest. Operation:, Subtract f from Wwith borrow = (W) - (f) - (C) \uf0ae\uf020 dest. Status Affected:, Subtract f from Wwith borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith borrow = N, OV, C, DC, Z. Status Affected:, Subtract f from Wwith borrow = N, OV, C, DC, Z. Encoding:, Subtract f from Wwith borrow = 0101. Encoding:, Subtract f from Wwith borrow = 01da. Encoding:, Subtract f from Wwith borrow = ffff. Encoding:, Subtract f from Wwith borrow = ffff.",
    "PIC18F6310/6410/8310/8410\nDescription:, Subtract f from Wwith borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is '",
    "PIC18F6310/6410/8310/8410\n0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Description:, Subtract f from Wwith borrow = Subtract register 'f' and Carry flag (borrow) from W(2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used. Words:, Subtract f from Wwith borrow = 1. Words:, Subtract f from Wwith borrow = 1. Words:, Subtract f from Wwith borrow = 1. Words:, Subtract f from Wwith borrow = 1. Cycles:, Subtract f from Wwith borrow = 1. Cycles:, Subtract f from Wwith borrow =",
    "PIC18F6310/6410/8310/8410\n1. Cycles:, Subtract f from Wwith borrow = 1. Cycles:, Subtract f from Wwith borrow = 1. Q Cycle Activity: Q1, Subtract f from Wwith borrow = Q2. Q Cycle Activity: Q1, Subtract f from Wwith borrow = Q3. Q Cycle Activity: Q1, Subtract f from Wwith borrow = Q3. Q Cycle Activity: Q1, Subtract f from Wwith borrow = Q4. Decode Example 1:, Subtract f from Wwith borrow = Read register 'f'. Decode Example 1:, Subtract f from Wwith borrow = Process Data. Decode Example 1:, Subtract f from Wwith borrow = Process Data. Decode Example 1:, Subtract f from Wwith borrow = Write to destination. , Subtract f from Wwith borrow = SUBFWB. , Subtract f from Wwith borrow = REG, 1,. , Subtract f from Wwith borrow = 0. , Subtract f from Wwith borrow = . Before Instruction, Subtract",
    "PIC18F6310/6410/8310/8410\nf from Wwith borrow = Before Instruction. Before Instruction, Subtract f from Wwith borrow = Before Instruction. Before Instruction, Subtract f from Wwith borrow = Before Instruction. Before Instruction, Subtract f from Wwith borrow = Before Instruction. REG =, Subtract f from Wwith borrow = 3. REG =, Subtract f from Wwith borrow = . REG =, Subtract f from Wwith borrow = . REG =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = 2. W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = 1. =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = . C, Subtract f from Wwith borrow = . C, Subtract f from Wwith borrow = . C, Subtract f from",
    "PIC18F6310/6410/8310/8410\nWwith borrow = . C, Subtract f from Wwith borrow = . After Instruction =, Subtract f from Wwith borrow = After Instruction =. After Instruction =, Subtract f from Wwith borrow = After Instruction =. After Instruction =, Subtract f from Wwith borrow = After Instruction =. After Instruction =, Subtract f from Wwith borrow = After Instruction =. REG, Subtract f from Wwith borrow = FF. REG, Subtract f from Wwith borrow = . REG, Subtract f from Wwith borrow = . REG, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = 2. W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . C = Z, Subtract f from Wwith borrow = 0. C = Z, Subtract f from Wwith borrow = . C = Z, Subtract f from Wwith borrow = . C = Z, Subtract f from Wwith",
    "PIC18F6310/6410/8310/8410\nborrow = . N =, Subtract f from Wwith borrow = . N =, Subtract f from Wwith borrow = . N =, Subtract f from Wwith borrow = . N =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = 0 1 ; result. =, Subtract f from Wwith borrow = is negative. =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = . Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith borrow = Example 2: SUBFWB REG, 0, 0. Example 2: SUBFWB REG, 0, 0, Subtract f from Wwith borrow = Example 2:",
    "PIC18F6310/6410/8310/8410\nSUBFWB REG, 0, 0. Before Instruction =, Subtract f from Wwith borrow = 2. Before Instruction =, Subtract f from Wwith borrow = . Before Instruction =, Subtract f from Wwith borrow = . Before Instruction =, Subtract f from Wwith borrow = . REG W =, Subtract f from Wwith borrow = 5. REG W =, Subtract f from Wwith borrow = . REG W =, Subtract f from Wwith borrow = . REG W =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = 1. C =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = . After Instruction REG =, Subtract f from Wwith borrow = 2. After Instruction REG =, Subtract f from Wwith borrow = . After Instruction REG =, Subtract f from Wwith borrow = . After Instruction REG =, Subtract f from Wwith borrow = . W =,",
    "PIC18F6310/6410/8310/8410\nSubtract f from Wwith borrow = 3. W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = 1. C =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = 0 0 ;. =, Subtract f from Wwith borrow = result is positive. =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = . Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith borrow = Example 3:",
    "PIC18F6310/6410/8310/8410\nSUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. REG =, Subtract f from Wwith borrow = 1. REG =, Subtract f from Wwith borrow = . REG =, Subtract f from Wwith borrow = . REG =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = 2. W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . C, Subtract f",
    "PIC18F6310/6410/8310/8410\nfrom Wwith borrow = 0. C, Subtract f from Wwith borrow = . C, Subtract f from Wwith borrow = . C, Subtract f from Wwith borrow = . = After Instruction =, Subtract f from Wwith borrow = . = After Instruction =, Subtract f from Wwith borrow = . = After Instruction =, Subtract f from Wwith borrow = . = After Instruction =, Subtract f from Wwith borrow = . REG, Subtract f from Wwith borrow = 0. REG, Subtract f from Wwith borrow = . REG, Subtract f from Wwith borrow = . REG, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = 2. W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . W =, Subtract f from Wwith borrow = . C =, Subtract f from Wwith borrow = 1. C =, Subtract f from Wwith borrow = . C =, Subtract f from",
    "PIC18F6310/6410/8310/8410\nWwith borrow = . C =, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = 1 ;. Z = N, Subtract f from Wwith borrow = result is zero. Z = N, Subtract f from Wwith borrow = . Z = N, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = 0. =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = . =, Subtract f from Wwith borrow = ",
    "PIC18F6310/6410/8310/8410\nSyntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Syntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Syntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Syntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Syntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Syntax: SUBLW k, Subtract Wfrom literal = Syntax: SUBLW k. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020",
    "PIC18F6310/6410/8310/8410\n255. Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255, Subtract Wfrom literal = Operands: 0 \uf0a3\uf020 k \uf0a3\uf020 255. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Operation: k - (W) \uf0ae\uf020 W, Subtract Wfrom literal = Operation: k - (W) \uf0ae\uf020 W. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected: N, OV, C, DC, Z. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected:",
    "PIC18F6310/6410/8310/8410\nN, OV, C, DC, Z. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected: N, OV, C, DC, Z. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected: N, OV, C, DC, Z. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected: N, OV, C, DC, Z. Status Affected: N, OV, C, DC, Z, Subtract Wfrom literal = Status Affected: N, OV, C, DC, Z. Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1. Encoding:",
    "PIC18F6310/6410/8310/8410\n0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1. Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1. Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result",
    "PIC18F6310/6410/8310/8410\nis placed in W. Words: 1. Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1. Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1, Subtract Wfrom literal = Encoding: 0000 1000 kkkk kkkk Description: Wis subtracted from the eight-bit literal 'k'. The result is placed in W. Words: 1. Cycles:, Subtract Wfrom literal = . Cycles:, Subtract Wfrom literal = 1 Q2. Cycles:, Subtract Wfrom literal = . Cycles:, Subtract Wfrom literal = . Cycles:, Subtract Wfrom literal = .",
    "PIC18F6310/6410/8310/8410\nCycles:, Subtract Wfrom literal = . , Subtract Wfrom literal = . , Subtract Wfrom literal = Read. , Subtract Wfrom literal = . , Subtract Wfrom literal = . , Subtract Wfrom literal = Write to. , Subtract Wfrom literal = . Example 1:, Subtract Wfrom literal = Example 1:. Example 1:, Subtract Wfrom literal = Example 1:. Example 1:, Subtract Wfrom literal = Example 1:. Example 1:, Subtract Wfrom literal = Example 1:. Example 1:, Subtract Wfrom literal = Example 1:. Example 1:, Subtract Wfrom literal = Example 1:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle",
    "PIC18F6310/6410/8310/8410\nActivity:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom literal = Q Cycle Activity:. Q1, Subtract Wfrom literal = . Q1, Subtract Wfrom literal = . Q1, Subtract Wfrom literal = Q3. Q1, Subtract Wfrom literal = . Q1, Subtract Wfrom literal = . Q1, Subtract Wfrom literal = Q4. Decode, Subtract Wfrom literal = . Decode, Subtract Wfrom literal = literal 'k'. Decode, Subtract Wfrom literal = . Decode, Subtract Wfrom literal = Process Data. Decode, Subtract Wfrom literal = . Decode, Subtract Wfrom literal = W. SUBLW 02h, Subtract Wfrom literal = SUBLW 02h. SUBLW 02h, Subtract Wfrom literal = SUBLW 02h. SUBLW 02h,",
    "PIC18F6310/6410/8310/8410\nSubtract Wfrom literal = SUBLW 02h. SUBLW 02h, Subtract Wfrom literal = SUBLW 02h. SUBLW 02h, Subtract Wfrom literal = SUBLW 02h. SUBLW 02h, Subtract Wfrom literal = SUBLW 02h. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = 01h. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C,",
    "PIC18F6310/6410/8310/8410\nSubtract Wfrom literal = ?. C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . = After Instruction, Subtract Wfrom literal = = After Instruction. = After Instruction, Subtract Wfrom literal = = After Instruction. = After Instruction, Subtract Wfrom literal = = After Instruction. = After Instruction, Subtract Wfrom literal = = After Instruction. = After Instruction, Subtract Wfrom literal = = After Instruction. = After Instruction, Subtract Wfrom literal = = After Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = 01h. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . C, Subtract Wfrom literal = =. C, Subtract Wfrom literal =",
    "PIC18F6310/6410/8310/8410\n1 0. C, Subtract Wfrom literal = ; result. C, Subtract Wfrom literal = is positive. C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = = =. Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . , Subtract Wfrom literal = . , Subtract Wfrom literal = 0. , Subtract Wfrom literal = . , Subtract Wfrom literal = . , Subtract Wfrom literal = . , Subtract Wfrom literal = . Example 2: SUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Example 2: SUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Example 2:",
    "PIC18F6310/6410/8310/8410\nSUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Example 2: SUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Example 2: SUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Example 2: SUBLW 02h, Subtract Wfrom literal = Example 2: SUBLW 02h. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = 02h. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal",
    "PIC18F6310/6410/8310/8410\n= . W, Subtract Wfrom literal = . C, Subtract Wfrom literal = =. C, Subtract Wfrom literal = ?. C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = 00h. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . C, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom literal = =. C, Subtract Wfrom literal = 1. C, Subtract Wfrom literal = ; result. C, Subtract Wfrom literal = is zero. C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = = =. Z N, Subtract Wfrom literal = 1 0. Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Z N, Subtract Wfrom literal = . Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3: SUBLW 02h. Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3: SUBLW 02h. Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3: SUBLW 02h. Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3:",
    "PIC18F6310/6410/8310/8410\nSUBLW 02h. Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3: SUBLW 02h. Example 3: SUBLW 02h, Subtract Wfrom literal = Example 3: SUBLW 02h. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. Before Instruction, Subtract Wfrom literal = Before Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = 03h. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . C, Subtract Wfrom literal = =. C, Subtract Wfrom literal = ?. C, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. After Instruction, Subtract Wfrom literal = After Instruction. W, Subtract Wfrom literal = =. W, Subtract Wfrom literal = FFh. W, Subtract Wfrom literal = ; (2's complement) ;. W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . W, Subtract Wfrom literal = . C, Subtract Wfrom literal = = =. C, Subtract Wfrom literal = 0 0. C, Subtract Wfrom literal = result. C,",
    "PIC18F6310/6410/8310/8410\nSubtract Wfrom literal = is negative. C, Subtract Wfrom literal = . C, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . Z, Subtract Wfrom literal = . N, Subtract Wfrom literal = =. N, Subtract Wfrom literal = 1. N, Subtract Wfrom literal = . N, Subtract Wfrom literal = . N, Subtract Wfrom literal = . N, Subtract Wfrom literal = ",
    "PIC18F6310/6410/8310/8410\nSyntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Syntax:, Subtract Wfrom f = SUBWF f {,d {,a}}. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract Wfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = 0 \uf0a3\uf020 f \uf0a3\uf020 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Operation:, Subtract Wfrom f = (f) - (W) \uf0ae\uf020 dest. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z.",
    "PIC18F6310/6410/8310/8410\nEncoding:, Subtract Wfrom f = 0101. Encoding:, Subtract Wfrom f = 11da. Encoding:, Subtract Wfrom f = . Encoding:, Subtract Wfrom f = ffff. Encoding:, Subtract Wfrom f = ffff. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is V, the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is V, the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is V, the result is stored back",
    "PIC18F6310/6410/8310/8410\nin register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is V, the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is V, the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is V, the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is V, the result is stored back in register 'f'. If",
    "PIC18F6310/6410/8310/8410\n'a' is ' 0 ', the Access Bank is selected. If 'a' is V, the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Description:, Subtract Wfrom f = Subtract Wfrom register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is V, the result is stored back in register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is V, the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Cycles:, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Q Cycle Activity:, Subtract Wfrom f = . Q Cycle Activity:, Subtract Wfrom f = . Q Cycle Activity:, Subtract Wfrom f = . Q Cycle Activity:, Subtract Wfrom f = . Q Cycle Activity:, Subtract Wfrom f = . Q1, Subtract Wfrom f = Q2. Q1, Subtract Wfrom f = Q2. Q1, Subtract Wfrom f = Q3. Q1, Subtract Wfrom f = Q3. Q1, Subtract Wfrom f = Q4. Decode, Subtract Wfrom f = Read register 'f'. Decode, Subtract Wfrom f = Read register 'f'. Decode, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = Process Data. Decode, Subtract Wfrom f = Process Data. Decode, Subtract Wfrom f = Write to destination. Example 1: SUBWF, Subtract Wfrom f = Example 1: SUBWF. Example 1: SUBWF, Subtract Wfrom f = Example 1: SUBWF. Example 1: SUBWF, Subtract Wfrom f = REG, 1, 0. Example 1: SUBWF, Subtract Wfrom f = REG, 1, 0. Example 1: SUBWF, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. REG, Subtract Wfrom f = = 3. REG, Subtract Wfrom f = . REG, Subtract Wfrom",
    "PIC18F6310/6410/8310/8410\nf = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = =. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . , Subtract Wfrom f = = ?. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . After Instruction 1, Subtract Wfrom f = After Instruction 1. After Instruction 1, Subtract Wfrom f = After Instruction 1. After Instruction 1, Subtract Wfrom f = After Instruction 1. After Instruction 1,",
    "PIC18F6310/6410/8310/8410\nSubtract Wfrom f = After Instruction 1. After Instruction 1, Subtract Wfrom f = After Instruction 1. REG, Subtract Wfrom f = =. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = = 1. C, Subtract Wfrom f = ;. C, Subtract Wfrom f = result is positive. C, Subtract Wfrom f = result is positive. C, Subtract Wfrom f = . Z N, Subtract Wfrom f = = 0 = 0. Z N, Subtract Wfrom f = . Z N, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . 2:, Subtract Wfrom f = . 2:, Subtract Wfrom f = . 2:, Subtract Wfrom f = . 2:, Subtract Wfrom f = . 2:, Subtract Wfrom f = . Example SUBWF, Subtract Wfrom f = Example SUBWF. Example SUBWF, Subtract Wfrom f = Example SUBWF. Example SUBWF, Subtract Wfrom f = REG, 0, 0. Example SUBWF, Subtract Wfrom f = REG, 0, 0. Example SUBWF, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = Before Instruction. REG, Subtract Wfrom f = = 2. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = ?. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . , Subtract Wfrom f = =. , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . , Subtract Wfrom f = . After Instruction, Subtract Wfrom f = After",
    "PIC18F6310/6410/8310/8410\nInstruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. REG, Subtract Wfrom f = = 2. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = = 0. W, Subtract Wfrom f = ;. W, Subtract Wfrom f = is zero. W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = = 1. C, Subtract Wfrom f = result. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . Z N, Subtract",
    "PIC18F6310/6410/8310/8410\nWfrom f = = 1 =. Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = 0. Example 3:, Subtract Wfrom f = REG, 1, 0. Example 3:, Subtract Wfrom f = REG, 1, 0. Example 3:, Subtract Wfrom f = . SUBWF Before Instruction, Subtract Wfrom f = SUBWF Before Instruction. SUBWF Before Instruction, Subtract Wfrom f = SUBWF Before Instruction. SUBWF Before Instruction, Subtract Wfrom f = SUBWF Before Instruction. SUBWF Before Instruction, Subtract Wfrom f = SUBWF Before Instruction. SUBWF Before Instruction, Subtract Wfrom f = SUBWF Before Instruction. REG, Subtract Wfrom",
    "PIC18F6310/6410/8310/8410\nf = = 1. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. C = ? After Instruction, Subtract Wfrom f = C = ? After Instruction. REG, Subtract Wfrom f = = 2. REG, Subtract Wfrom f = FFh. REG, Subtract Wfrom f",
    "PIC18F6310/6410/8310/8410\n= ;(2's complement). REG, Subtract Wfrom f = ;(2's complement). REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = = 0. C, Subtract Wfrom f = ;. C, Subtract Wfrom f = result is negative. C, Subtract Wfrom f = . C, Subtract Wfrom f = . Z N, Subtract Wfrom f = = 0 = 1. Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = ",
    "Subtract W from f with Borrow\nSyntax:\nSUBWFB    f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\nOperation:\n(f) - (W) - (C) \uf0ae\uf020 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0101\n10da\nffff\nffff\nDescription:\nSubtract W and the Carry flag (borrow) from register 'f' (2's complement method). If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:",
    "Subtract W from f with Borrow\n,  = . , Q2 Read.register 'f' = SUBWFB. , Q3 Process.Data = REG, 1, 0. , Q4 Write to.destination = . Before Instruction,  = Before Instruction. Before Instruction, Q2 Read.register 'f' = . Before Instruction, Q3 Process.Data = . Before Instruction, Q4 Write to.destination = . REG,  = =. REG, Q2 Read.register 'f' = 19h. REG, Q3 Process.Data = (0001 1001). REG, Q4 Write to.destination = . W,  = =. W, Q2 Read.register 'f' = 0Dh. W, Q3 Process.Data = (0000 1101). W, Q4 Write to.destination = . C,  = =. C, Q2 Read.register 'f' = 1. C, Q3 Process.Data = . C, Q4 Write to.destination = . After Instruction,  = After Instruction. After Instruction, Q2 Read.register 'f' = . After Instruction, Q3 Process.Data = . After Instruction, Q4 Write to.destination = . REG,",
    "Subtract W from f with Borrow\n= =. REG, Q2 Read.register 'f' = 0Ch. REG, Q3 Process.Data = (0000. REG, Q4 Write to.destination = 1011). W,  = =. W, Q2 Read.register 'f' = 0Dh. W, Q3 Process.Data = (0000. W, Q4 Write to.destination = 1101). C,  = =. C, Q2 Read.register 'f' = 1. C, Q3 Process.Data = . C, Q4 Write to.destination = . Z,  = =. Z, Q2 Read.register 'f' = 0. Z, Q3 Process.Data = . Z, Q4 Write to.destination = . N,  = =. N, Q2 Read.register 'f' = 0. N, Q3 Process.Data = ; result is positive. N, Q4 Write to.destination = ; result is positive. Example 2:,",
    "Subtract W from f with Borrow\n= Example 2:. Example 2:, Q2 Read.register 'f' = SUBWFB. Example 2:, Q3 Process.Data = REG, 0,. Example 2:, Q4 Write to.destination = . Before Instruction,  = Before Instruction. Before Instruction, Q2 Read.register 'f' = . Before Instruction, Q3 Process.Data = . Before Instruction, Q4 Write to.destination = . REG,  = =. REG, Q2 Read.register 'f' = 1Bh. REG, Q3 Process.Data = (0001. REG, Q4 Write to.destination = 1011). W,  = =. W, Q2 Read.register 'f' = 1Ah. W, Q3 Process.Data = (0001. W, Q4 Write to.destination = 1010). C,  = =. C, Q2 Read.register 'f' = 0. C, Q3 Process.Data = . C, Q4 Write to.destination = . After Instruction,",
    "Subtract W from f with Borrow\n= After Instruction. After Instruction, Q2 Read.register 'f' = . After Instruction, Q3 Process.Data = . After Instruction, Q4 Write to.destination = . REG,  = =. REG, Q2 Read.register 'f' = 1Bh. REG, Q3 Process.Data = (0001. REG, Q4 Write to.destination = 1011). W,  = =. W, Q2 Read.register 'f' = 00h. W, Q3 Process.Data = . W, Q4 Write to.destination = . C,  = =. C, Q2 Read.register 'f' = 1. C, Q3 Process.Data = . C, Q4 Write to.destination = . Z,  = =. Z, Q2 Read.register 'f' = 1. Z, Q3 Process.Data = ; result is zero. Z, Q4 Write to.destination = . N,  = =. N, Q2 Read.register 'f' = 0. N, Q3 Process.Data = . N, Q4 Write to.destination = . Example 3:,",
    "Subtract W from f with Borrow\n= Example 3:. Example 3:, Q2 Read.register 'f' = SUBWFB. Example 3:, Q3 Process.Data = REG, 1,. Example 3:, Q4 Write to.destination = . Before Instruction,  = Before Instruction. Before Instruction, Q2 Read.register 'f' = Before Instruction. Before Instruction, Q3 Process.Data = . Before Instruction, Q4 Write to.destination = . REG,  = =. REG, Q2 Read.register 'f' = 03h. REG, Q3 Process.Data = (0000 0011). REG, Q4 Write to.destination = . W,  = =. W, Q2 Read.register 'f' = 0Eh. W, Q3 Process.Data = (0000 1101). W, Q4 Write to.destination = . C,  = =. C, Q2 Read.register 'f' = 1. C, Q3 Process.Data = . C, Q4 Write to.destination = . After Instruction,",
    "Subtract W from f with Borrow\n= After Instruction. After Instruction, Q2 Read.register 'f' = . After Instruction, Q3 Process.Data = . After Instruction, Q4 Write to.destination = . REG,  = =. REG, Q2 Read.register 'f' = F5h. REG, Q3 Process.Data = (1111 0100) ; [2's comp]. REG, Q4 Write to.destination = . W,  = =. W, Q2 Read.register 'f' = 0Eh. W, Q3 Process.Data = (0000 1101). W, Q4 Write to.destination = . C,  = =. C, Q2 Read.register 'f' = 0. C, Q3 Process.Data = . C, Q4 Write to.destination = . Z,  = =. Z, Q2 Read.register 'f' = 0. Z, Q3 Process.Data = . Z, Q4 Write to.destination = . N,",
    "Subtract W from f with Borrow\n= =. N, Q2 Read.register 'f' = 1. N, Q3 Process.Data = ; result is negative. N, Q4 Write to.destination = ",
    "SWAPF\nSwap f\nSyntax:\nSWAPF   f {,d {,a}}\nOperands:\n0 \uf0a3 f \uf0a3 255\nd \uf0ce [0,1]\na \uf0ce [0,1]\nOperation:\n(f<3:0>) \uf0ae dest<7:4>,\n(f<7:4>) \uf0ae dest<3:0>\nStatus Affected:\nNone\nEncoding:\n0011\n10da\nffff\nffff\nDescription:\nThe upper and lower nibbles of register 'f' are exchanged. If 'd' is ' 0 ', the result is placed in W. If 'd' is ' 1 ', the result is placed in register 'f'.\nIf 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination\nExample:\nSWAPF\nREG, 1, 0\nBefore Instruction\nREG",
    "SWAPF\n=\n53h\nAfter Instruction\nREG\n=\n35h",
    "PIC18F6310/6410/8310/8410\nSyntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Syntax:, Table Read = TBLRD ( *; *+; *-; +*). Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*, (TBLPTR) + 1 \uf0ae TBLPTR,.",
    "PIC18F6310/6410/8310/8410\nOperation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*, (TBLPTR) + 1 \uf0ae TBLPTR,. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*, (TBLPTR) + 1 \uf0ae TBLPTR,. Operation:, Table Read = if",
    "PIC18F6310/6410/8310/8410\nTBLRD *, (Prog Mem (TBLPTR)) \uf0ae TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \uf0ae TABLAT, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLRD +*, (TBLPTR) + 1 \uf0ae TBLPTR,. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Status Affected:, Table Read = None. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 10nn nn=0 * =1 *+ =2 *-. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used.",
    "PIC18F6310/6410/8310/8410\nThe TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 :",
    "PIC18F6310/6410/8310/8410\nLeastSignificant Byte of Program Memory. Description:, Table Read = =3 +* This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. TBLPTR[0] = 0 : LeastSignificant Byte of Program Memory. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Cycles:, Table Read = 2. Cycles:, Table Read = . Cycles:, Table Read = . Cycles:, Table Read = . Q Cycle Activity: Q1, Table Read = . Q Cycle Activity: Q1, Table Read = . Q Cycle Activity: Q1, Table Read = . Q Cycle Activity: Q1, Table Read = . Decode, Table Read = Q2 No. Decode, Table Read = Q3. Decode, Table Read =",
    "PIC18F6310/6410/8310/8410\nQ3. Decode, Table Read = Q4 No. , Table Read = operation. , Table Read = No operation. , Table Read = No operation. , Table Read = operation No operation. No operation, Table Read = No operation (Read Program Memory). No operation, Table Read = No operation. No operation, Table Read = No operation. No operation, Table Read = (Write TABLAT)",
    "TBLRD Table Read (Continued)\nExample 1:, 1 = TBLRD. Example 1:, 2 = ;. Example 1:, 3 = . Before Instruction TABLAT, 1 = Before Instruction TABLAT. Before Instruction TABLAT, 2 = =. Before Instruction TABLAT, 3 = 55h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A356h. MEMORY(00A356h), 1 = MEMORY(00A356h). MEMORY(00A356h), 2 = =. MEMORY(00A356h), 3 = 34h. After Instruction TABLAT, 1 = After Instruction TABLAT. After Instruction TABLAT, 2 = =. After Instruction TABLAT, 3 = 34h. TBLPTR, 1 = TBLPTR. TBLPTR, 2 = =. TBLPTR, 3 = 00A357h. Example 2:, 1 = TBLRD +*. Example 2:, 2 = ;. Example 2:, 3 = . Before Instruction, 1 = Before Instruction. Before Instruction, 2 = =. Before Instruction, 3 = AAh. TABLAT",
    "TBLRD Table Read (Continued)\nTBLPTR, 1 = TABLAT TBLPTR. TABLAT TBLPTR, 2 = =. TABLAT TBLPTR, 3 = 01A357h. MEMORY(01A357h), 1 = MEMORY(01A357h). MEMORY(01A357h), 2 = =. MEMORY(01A357h), 3 = 12h. MEMORY(01A358h), 1 = MEMORY(01A358h). MEMORY(01A358h), 2 = =. MEMORY(01A358h), 3 = 34h. After Instruction, 1 = After Instruction. After Instruction, 2 = =. After Instruction, 3 = 34h. TABLAT TBLPTR, 1 = TABLAT TBLPTR. TABLAT TBLPTR, 2 = =. TABLAT TBLPTR, 3 = 01A358h",
    "Status Affected: Encoding:\nSyntax:, 1 = TBLWT ( *; *+; *-; +*). Operands:, 1 = None. Operation:, 1 = if TBLWT*, (TABLAT) \uf0ae Holding Register, TBLPTR - No Change; if TBLWT*+, (TABLAT) \uf0ae Holding Register, (TBLPTR) + 1 \uf0ae TBLPTR; if TBLWT*-, (TABLAT) \uf0ae Holding Register, (TBLPTR) - 1 \uf0ae TBLPTR; if TBLWT+*, (TBLPTR) + 1 \uf0ae TBLPTR, (TABLAT) \uf0ae Holding Register\nNone\n0000, 1 = 0000. 0000, 2 = 0000. 0000, 3 = 11nn nn=0 * =1 *+ =2 *-\nDescription:\nThis instruction uses the 3 LSBs of\nTBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). (Refer to Section 7.0 'Program Memory' for additional details on programming Flash memory.)",
    "Status Affected: Encoding:\nThe TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2-Mbyte address range. The LSb of the TBLPTR selects which byte of the program memory location to access.\nTBLPTR[0] = 0 :\nLeast Significant\nByte of Program\nMemory Word\nTBLPTR[0] = 1 :\nMost Significant\nByte of Program\nMemory Word\nThe TBLWT instruction can modify the value of TBLPTR as follows:\n\u00b7 no change\n\u00b7 post-increment\n\u00b7 post-decrement\n\u00b7 pre-increment\n2\nWords:\n1\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode, 1 = No operation. Decode, 2 = No operation. Decode, 3 = No operation. No operation, 1 = No operation (Read TABLAT). No operation, 2 = No operation. No operation, 3 = No operation (Write to Holding Register )",
    "Status Affected: Encoding:\nExample 1:, Table Write = TBLWT *+;. Example 1:, (Continued) = TBLWT *+;. Example 1:, (Continued) = TBLWT *+;. Before Instruction, Table Write = Before Instruction. Before Instruction, (Continued) = . Before Instruction, (Continued) = . TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A356h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = FFh. After Instructions (table write completion), Table Write = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After Instructions (table write completion). After Instructions (table write completion), (Continued) = After Instructions (table write completion). TABLAT, Table",
    "Status Affected: Encoding:\nWrite = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 55h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 00A357h. HOLDING REGISTER (00A356h), Table Write = HOLDING REGISTER (00A356h). HOLDING REGISTER (00A356h), (Continued) = =. HOLDING REGISTER (00A356h), (Continued) = 55h. Example 2:, Table Write = TBLWT +*;. Example 2:, (Continued) = . Example 2:, (Continued) = . Before Instruction, Table Write = Before Instruction. Before Instruction, (Continued) = . Before Instruction, (Continued) = . TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 34h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Ah. HOLDING REGISTER (01389Ah), Table Write = HOLDING REGISTER",
    "Status Affected: Encoding:\n(01389Ah). HOLDING REGISTER (01389Ah), (Continued) = =. HOLDING REGISTER (01389Ah), (Continued) = FFh. HOLDING REGISTER (01389Bh), Table Write = HOLDING REGISTER (01389Bh). HOLDING REGISTER (01389Bh), (Continued) = =. HOLDING REGISTER (01389Bh), (Continued) = FFh. After Instruction (table write completion), Table Write = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). After Instruction (table write completion), (Continued) = After Instruction (table write completion). TABLAT, Table Write = TABLAT. TABLAT, (Continued) = =. TABLAT, (Continued) = 34h. TBLPTR, Table Write = TBLPTR. TBLPTR, (Continued) = =. TBLPTR, (Continued) = 01389Bh. HOLDING REGISTER (01389Ah), Table Write = HOLDING REGISTER (01389Ah). HOLDING REGISTER (01389Ah), (Continued) = =. HOLDING REGISTER",
    "Status Affected: Encoding:\n(01389Ah), (Continued) = FFh. HOLDING REGISTER (01389Bh), Table Write = HOLDING REGISTER (01389Bh). HOLDING REGISTER (01389Bh), (Continued) = =. HOLDING REGISTER (01389Bh), (Continued) = 34h",
    "Note:\nThe TBLWT instruction is not available in PIC18F6310/6410  devices  (i.e.,  64-pin devices) in normal operating modes. TBLWT can only be used by PIC18F8310/8410 devices with the external memory interface and only when writing to an external memory device. For more information, refer to Section 7.4 'Writing  to  Program  Memory  Space (PIC18F8310/8410 only)' and Section 7.6 'Writing and Erasing On-Chip Program Memory (ICSP Mode)' .\nIf skip:\nQ1\nQ2",
    "PIC18F6310/6410/8310/8410\nSyntax:, Test f, skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, skip if 0 = TSTFSZ f {,a}. Syntax:, Test f, skip if 0 = TSTFSZ f {,a}. Operands:, Test f, skip if 0 = 0 \uf0a3 f \uf0a3 255. Operands:, Test f, skip if 0 = 0 \uf0a3 f \uf0a3 255. Operands:, Test f, skip if 0 = 0 \uf0a3 f \uf0a3 255. Operands:, Test f, skip if 0 = 0 \uf0a3 f \uf0a3 255. , Test f, skip if 0 = a \uf0ce [0,1]. , Test f, skip if 0 = a \uf0ce [0,1]. , Test f, skip if 0 = a \uf0ce [0,1]. , Test f, skip if 0 = a \uf0ce [0,1]. Operation:, Test f, skip if 0 = skip if f = 0. Operation:, Test f, skip if 0 = skip if f = 0. Operation:, Test f, skip if 0 = skip if f",
    "PIC18F6310/6410/8310/8410\n= 0. Operation:, Test f, skip if 0 = skip if f = 0. Status Affected:, Test f, skip if 0 = None. Status Affected:, Test f, skip if 0 = None. Status Affected:, Test f, skip if 0 = None. Status Affected:, Test f, skip if 0 = None. Encoding:, Test f, skip if 0 = 0110. Encoding:, Test f, skip if 0 = 011a. Encoding:, Test f, skip if 0 = ffff. Encoding:, Test f, skip if 0 = ffff\nDescription:\nIf 'f' = 0 , the next instruction, fetched during the current instruction execution, is discarded and a NOP is executed, making this a two-cycle instruction. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank.\nIf 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.",
    "PIC18F6310/6410/8310/8410\nWords:\n1\nCycles:\n1(2)\nNote:",
    "Q Cycle Activity:\nQ1\nDecode\n3 cycles if skip and followed by a 2-word instruction.",
    "Exclusive OR literal with W\nSyntax:\nXORLW   k\nOperands:\n0 \uf0a3\uf020 k \uf0a3\uf020 255\nOperation:\n(W) .XOR. k \uf0ae\uf020 W\nStatus Affected:\nN, Z\nEncoding:\n0000\n1010\nkkkk\nkkkk\nDescription:\nThe contents of W are XORed with the 8-bit literal 'k'. The result is placed in W.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nliteral 'k'\nProcess Data\nWrite to W",
    "Example:\nXORLW\n0AFh\nBefore Instruction\nW\n=\nB5h\nAfter Instruction\nW\n=\n1Ah\nQ3\nQ4\nRead register 'f'\nQ2\nProcess Data\nQ3\nNo\nNo operation\noperation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation\nNo\nQ4\nNo operation\nQ4\nNo operation\nNo operation\nNo operation\nNo operation\nNo operation\nNo operation operation\nExample:\nHERE    TSTFSZ  CNT, 1\nNZERO   :\nZERO    :\nBefore Instruction\nPC\n=\nAddress (HERE)\nAfter Instruction\nIf CNT\n=\n00h,\nPC\n=\nAddress\n(ZERO)\nIf CNT\n\uf0b9\n00h,\nPC\n= Address (NZERO)",
    "PIC18F6310/6410/8310/8410\nSyntax:, Exclusive OR Wwith f = XORWF. Syntax:, Exclusive OR Wwith f = f {,d {,a}}. Syntax:, Exclusive OR Wwith f = . Syntax:, Exclusive OR Wwith f = . Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operands:, Exclusive OR Wwith f = 0 \uf0a3 f \uf0a3 255 d \uf0ce [0,1] a \uf0ce [0,1]. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \uf0ae\uf020 dest. Operation:, Exclusive OR Wwith f = (W) .XOR.",
    "PIC18F6310/6410/8310/8410\n(f) \uf0ae\uf020 dest. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Encoding:, Exclusive OR Wwith f = 0001. Encoding:, Exclusive OR Wwith f = 10da. Encoding:, Exclusive OR Wwith f = ffff. Encoding:, Exclusive OR Wwith f = ffff. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section",
    "PIC18F6310/6410/8310/8410\n25.2.3 for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR",
    "PIC18F6310/6410/8310/8410\nbank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Description:, Exclusive OR Wwith f = Exclusive OR the contents of Wwith register 'f'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in the register 'f'. If 'a' is ' 0 ', the Access Bank is selected. If 'a' is ' 1 ', the BSR is used to select the GPR bank. If 'a' is ' 0 ' and the extended instruction set is enabled, this instruction operates in Indexed Literal Offset Addressing mode whenever f \uf0a3\uf020 95 (5Fh). See Section 25.2.3 for details.. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = . Words:, Exclusive OR Wwith f = . Words:, Exclusive OR Wwith f = . Cycles:, Exclusive OR Wwith f = 1. Cycles:,",
    "PIC18F6310/6410/8310/8410\nExclusive OR Wwith f = . Cycles:, Exclusive OR Wwith f = . Cycles:, Exclusive OR Wwith f = . Q Cycle Activity:, Exclusive OR Wwith f = . Q Cycle Activity:, Exclusive OR Wwith f = . Q Cycle Activity:, Exclusive OR Wwith f = . Q Cycle Activity:, Exclusive OR Wwith f = . Q1, Exclusive OR Wwith f = Q2. Q1, Exclusive OR Wwith f = Q3. Q1, Exclusive OR Wwith f = . Q1, Exclusive OR Wwith f = Q4. Decode, Exclusive OR Wwith f = Read register 'f'. Decode, Exclusive OR Wwith f = Process Data. Decode, Exclusive OR Wwith f = Process Data. Decode, Exclusive OR Wwith f = Write to destination. Example:, Exclusive OR Wwith f = XORWF. Example:, Exclusive OR Wwith f = REG, 1,. Example:, Exclusive OR Wwith f = 0. Example:, Exclusive OR Wwith f = . Before Instruction, Exclusive OR Wwith f = Before Instruction. Before Instruction, Exclusive OR Wwith",
    "PIC18F6310/6410/8310/8410\nf = . Before Instruction, Exclusive OR Wwith f = . Before Instruction, Exclusive OR Wwith f = . REG, Exclusive OR Wwith f = AFh. REG, Exclusive OR Wwith f = . REG, Exclusive OR Wwith f = . REG, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = B5h. W, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = . After Instruction REG W, Exclusive OR Wwith f = 1Ah B5h. After Instruction REG W, Exclusive OR Wwith f = . After Instruction REG W, Exclusive OR Wwith f = . After Instruction REG W, Exclusive OR Wwith f = ",
    "25.2 Extended Instruction Set\nIn addition to the standard 75 instructions of the PIC18 instruction  set,  PIC18F6310/6410/8310/8410  devices also  provide  an  optional  extension  to  the  core  CPU functionality.  The  added  features  include  eight  additional  instructions  that  augment  Indirect  and  Indexed Addressing  operations  and the implementation  of Indexed  Literal  Offset  Addressing  for  many  of  the standard PIC18 instructions.\nThe additional features of the extended instruction set are disabled by default. To enable them, users must set the XINST Configuration bit.\nThe instructions in the extended set can all be classified  as  literal  operations  which  either  manipulate  the File Select Registers, or use them for Indexed Addressing. Two of the instructions, ADDFSR and SUBFSR , each have an additional special instantiation for using FSR2. These  versions  ( ADDULNK and SUBULNK )  allow  for automatic return after execution.\nThe extended instructions are specifically implemented to optimize re-entrant program code (that is, code that is  recursive  or  that  uses  a  software  stack)  written  in high-level languages,  particularly C. Among  other things, they allow users working in high-level languages  to perform  certain operations on  data structures more efficiently. These include:",
    "25.2 Extended Instruction Set\n\u00b7 dynamic allocation and de-allocation of software stack space when entering and leaving subroutines\n\u00b7 Function Pointer invocation\n\u00b7 Software Stack Pointer manipulation\nA summary of the instructions in the extended instruction set is provided in Table 25-3. Detailed descriptions are provided in Section 25.2.2 'Extended Instruction Set' . The  opcode  field  descriptions  in  Table 25-1 (page 298) apply to both the standard and extended PIC18 instruction sets.",
    "Note:\nThe  instruction  set  extension  and  the Indexed  Literal  Offset  Addressing  mode were designed for optimizing applications written in C; the user may likely never use these  instructions  directly  in  assembler. The  syntax  for  these  commands  is  provided as a reference for users who may be reviewing code that has been generated by a compiler.",
    "25.2.1 EXTENDED INSTRUCTION SYNTAX\nMost  of  the  extended  instructions  use  indexed  arguments, using one of the File Select Registers and some offset to specify a source or destination register. When an  argument  for  an  instruction  serves  as  part  of Indexed Addressing, it is enclosed in square brackets ('[ ]'). This is done to indicate that the argument is used as an index or offset. The MPASM Assembler will flag an error if it determines that an index or offset value is not bracketed.\nWhen the extended instruction set is enabled, brackets are also used to indicate index arguments in byte-oriented  and  bit-oriented  instructions.  This  is  in addition  to  other  changes  in  their  syntax.  For  more details, see Section 25.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' .\n- \u00b7 manipulation of variables located in a software stack\nNote:\nIn  the  past,  square  brackets  have  been used to denote optional arguments in the PIC18 and earlier instruction sets. In this text and going forward, optional arguments are denoted by braces ('{ }').",
    "TABLE 25-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nADDFSR,  = f, k. ADDFSR, Description. = Add Literal to FSR. ADDFSR, Cycles. = 1. ADDFSR, 16-Bit Instruction Word.MSb = 1110. ADDFSR, 16-Bit Instruction Word.MSb = 1000. ADDFSR, 16-Bit Instruction Word.MSb = ffkk. ADDFSR, 16-Bit Instruction Word.LSb = kkkk. ADDFSR, Status Affected. = None. ADDULNK,  = k. ADDULNK, Description. = Add Literal to FSR2 and Return. ADDULNK, Cycles. = 2. ADDULNK, 16-Bit Instruction Word.MSb = 1110. ADDULNK, 16-Bit Instruction Word.MSb = 1000. ADDULNK, 16-Bit Instruction Word.MSb = 11kk. ADDULNK, 16-Bit Instruction Word.LSb = kkkk. ADDULNK, Status Affected. = None. CALLW,",
    "TABLE 25-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\n= . CALLW, Description. = Call Subroutine using WREG. CALLW, Cycles. = 2. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0000. CALLW, 16-Bit Instruction Word.MSb = 0001. CALLW, 16-Bit Instruction Word.LSb = 0100. CALLW, Status Affected. = None. MOVSF,  = z s , f d. MOVSF, Description. = Move z s (source) to 1st word f d (destination) 2nd word. MOVSF, Cycles. = 2. MOVSF, 16-Bit Instruction Word.MSb = 1110. MOVSF, 16-Bit Instruction Word.MSb = 1011. MOVSF, 16-Bit Instruction Word.MSb = 0zzz. MOVSF, 16-Bit Instruction Word.LSb = zzzz. MOVSF, Status Affected. = None. MOVSS,",
    "TABLE 25-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\n= z s , z d. MOVSS, Description. = Move z s (source) to 1st word z d (destination) 2nd word. MOVSS, Cycles. = 2. MOVSS, 16-Bit Instruction Word.MSb = 1110. MOVSS, 16-Bit Instruction Word.MSb = 1011 xxxx. MOVSS, 16-Bit Instruction Word.MSb = 1zzz. MOVSS, 16-Bit Instruction Word.LSb = zzzz zzzz. MOVSS, Status Affected. = None. PUSHL,  = k. PUSHL, Description. = Store Literal at FSR2, Decrement FSR2. PUSHL, Cycles. = 1. PUSHL, 16-Bit Instruction Word.MSb = 1110. PUSHL, 16-Bit Instruction Word.MSb = 1010. PUSHL, 16-Bit Instruction Word.MSb = kkkk. PUSHL, 16-Bit Instruction Word.LSb = kkkk. PUSHL, Status Affected. = None. SUBFSR,",
    "TABLE 25-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\n= f, k. SUBFSR, Description. = Subtract Literal from FSR. SUBFSR, Cycles. = 1. SUBFSR, 16-Bit Instruction Word.MSb = 1110. SUBFSR, 16-Bit Instruction Word.MSb = 1001. SUBFSR, 16-Bit Instruction Word.MSb = ffkk. SUBFSR, 16-Bit Instruction Word.LSb = kkkk. SUBFSR, Status Affected. = None. SUBULNK,  = k. SUBULNK, Description. = Subtract Literal from FSR2 and Return. SUBULNK, Cycles. = 2. SUBULNK, 16-Bit Instruction Word.MSb = 1110. SUBULNK, 16-Bit Instruction Word.MSb = 1001. SUBULNK, 16-Bit Instruction Word.MSb = 11kk. SUBULNK, 16-Bit Instruction Word.LSb = kkkk. SUBULNK, Status Affected. = None\nNote:",
    "TABLE 25-3: EXTENSIONS TO THE PIC18 INSTRUCTION SET\nAll PIC18 instructions may take an optional label argument, preceding the instruction mnemonic, for use in symbolic addressing. If a label is used, the instruction syntax then becomes: {label}    instruction    argument(s)",
    "25.2.2 EXTENDED INSTRUCTION SET\nADDFSR\nAdd Literal to FSR\nSyntax:\nADDFSR   f, k\nOperands:\n0 \uf0a3 k \uf0a3 63\nf \uf0ce [0, 1, 2]\nOperation:\nFSR(f) + k \uf0ae FSR(f)\nStatus Affected:\nNone\nEncoding:\n1110\n1000\nffkk\nkkkk\nDescription:\nThe 6-bit literal 'k' is added to the contents of the FSR specified by 'f'.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nliteral 'k'\nProcess\nData\nWrite to\nFSR\nExample:\nADDFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n0422h",
    "25.2.2 EXTENDED INSTRUCTION SET\nSyntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Syntax:, Add Literal to FSR2 and Return = ADDULNK k. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operands:, Add Literal to FSR2 and Return = 0 \uf0a3 k \uf0a3 63. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Operation:, Add Literal to FSR2 and Return = FSR2 + k \uf0ae FSR2, (TOS) \uf0ae\uf020 PC. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Status Affected:, Add Literal to FSR2 and Return = None. Encoding:, Add Literal to FSR2 and Return = 1110. Encoding:, Add Literal",
    "25.2.2 EXTENDED INSTRUCTION SET\nto FSR2 and Return = 1000 11kk. Encoding:, Add Literal to FSR2 and Return = kkkk. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the ADDFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents of FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the ADDFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Description:, Add Literal to FSR2 and Return = The 6-bit literal 'k' is added to the contents",
    "25.2.2 EXTENDED INSTRUCTION SET\nof FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the ADDFSR instruction, where f = 3 (binary ' 11 '); it operates only on FSR2.. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = 1. Words:, Add Literal to FSR2 and Return = 1. Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = 2. Cycles:, Add Literal to FSR2 and Return = 2. Q Cycle Activity:, Add Literal to FSR2 and Return = Q Cycle Activity:. Q Cycle Activity:, Add Literal to FSR2 and Return = Q Cycle Activity:. Q Cycle Activity:, Add Literal to FSR2 and Return = Q Cycle Activity:. Q1, Add Literal to FSR2 and Return = Q2. Q1, Add Literal to FSR2 and Return = Q3. Q1, Add",
    "25.2.2 EXTENDED INSTRUCTION SET\nLiteral to FSR2 and Return = Q4. Decode, Add Literal to FSR2 and Return = Read literal 'k'. Decode, Add Literal to FSR2 and Return = Process Data. Decode, Add Literal to FSR2 and Return = Write to FSR. No Operation, Add Literal to FSR2 and Return = No Operation. No Operation, Add Literal to FSR2 and Return = No Operation. No Operation, Add Literal to FSR2 and Return = No Operation",
    "Example:\nADDULNK 23h\nBefore Instruction, 1 = Before Instruction. , 1 = FSR2. , 1 = PC. After Instruction, 1 = After Instruction. , 1 = FSR2. , 1 = PC",
    "CALLW\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription\nWords:\nCycles:",
    "Subroutine Call Using WREG\nCALLW\nNone\n(PC + 2) \uf0ae TOS,\n(W) \uf0ae PCL,\n(PCLATH)\n\uf0ae\nPCH,\n(PCLATU) \uf0ae PCU\nNone\n0000\n0000\n0001\n0100",
    "Subroutine Call Using WREG\nSyntax:, Move Indexed to f = MOVSF. Syntax:, Move Indexed to f = [z s ], f d. Syntax:, Move Indexed to f = . Syntax:,  = . Operands:, Move Indexed to f = 0 \uf0a3 z s \uf0a3 127 0 \uf0a3 f d \uf0a3 4095. Operands:, Move Indexed to f = 0 \uf0a3 z s \uf0a3 127 0 \uf0a3 f d \uf0a3 4095. Operands:, Move Indexed to f = . Operands:,  = . Operation:, Move Indexed to f = ((FSR2) + z s ) \uf0ae f d. Operation:, Move Indexed to f = ((FSR2) + z s ) \uf0ae f d. Operation:, Move Indexed to f = . Operation:,  = . Status Affected:, Move Indexed to f = None. Status Affected:, Move Indexed to f = . Status Affected:, Move Indexed to f = . Status Affected:,  = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:, Move Indexed to f = . Encoding:,",
    "Subroutine Call Using WREG\n= . 1st word (source), Move Indexed to f = 1110. 1st word (source), Move Indexed to f = 1011. 1st word (source), Move Indexed to f = 0zzz. 1st word (source),  = zzzz s. 2nd word (destin.), Move Indexed to f = 1111. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.), Move Indexed to f = ffff. 2nd word (destin.),  = ffff d\nFirst, the return address (PC + 2) is pushed onto the return stack. Next, the contents of W are written to PCL; the existing value is discarded. Then, the contents of PCLATH and PCLATU are latched into PCH and PCU, respectively. The second cycle is executed as a NOP instruction while the new next instruction is fetched. Unlike CALL , there is no option to update W, STATUS or BSR.\n1\n2\nQ Cycle Activity:",
    "Subroutine Call Using WREG\nDecode, Q2 = Read WREG. Decode, Q3 = Push PC to stack. Decode, Q4 = No operation. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:\nHERE\nCALLW\nBefore Instruction\nPC\n=\naddress (HERE)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nAfter Instruction\nPC\n=\n001006h\nTOS\n=\naddress (HERE + 2)\nPCLATH =\n10h\nPCLATU =\n00h\nW\n=\n06h\nDescription:\nThe contents of the source register are moved to destination register 'f d '. The actual address of the source register is determined by adding the 7-bit literal offset 'z s ' in the first word to the value of FSR2. The address of the destination register is specified by the 12-bit literal 'f d ' in the second word. Both addresses can be anywhere in the 4096-byte data space (000h to FFFh).\nThe MOVSF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.",
    "Subroutine Call Using WREG\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h.\n2\n2\nWords:\nCycles:\nQ Cycle Activity:\nQ1\nQ2\nQ3\nDecode, 1 = Determine source addr. Decode, 2 = Determine source addr. Decode, 3 = Read source reg. Decode, 1 = No operation No dummy read. Decode, 2 = No operation. Decode, 3 = Write register 'f' (dest)\nExample:\nMOVSF   [05h], REG2\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nREG2\n= 11h\nAfter Instruction\nFSR2\n= 80h\nContents\nof 85h\n= 33h\nREG2\n=\n33h\nQ4",
    "Move Indexed to Indexed\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\n1st word (source) 2nd word (dest.)\nDescription\nWords:\nCycles:\nMOVSS   [z s ], [z d ]\n0 \uf0a3 z s \uf0a3 127\n0 \uf0a3 z d \uf0a3 127\n((FSR2) + z s ) \uf0ae ((FSR2) + z d )\nNone\n1110\n1011\n1zzz\n1111\nxxxx xzzz\nzzzzs zzzzd\nThe contents of the source register are moved to the destination register. The addresses of the source and destination registers are determined by adding the 7-bit literal offsets 'z s ' or 'z d ', respectively, to the value of FSR2. Both registers can be located anywhere in the 4096-byte data memory space\n(000h to FFFh).\nThe MOVSS instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nIf the resultant source address points to an indirect addressing register, the value returned will be 00h. If the resultant destination address points to an indirect addressing register, the instruction will execute as a NOP .\n2\n2\nQ Cycle Activity:",
    "Move Indexed to Indexed\nDecode, Q2 = Determine source addr. Decode, Q3 = Determine source addr. Decode, Q4 = Read source reg. Decode, Q2 = Determine dest addr. Decode, Q3 = Determine dest addr. Decode, Q4 = Write to dest reg",
    "Store Literal at FSR2, Decrement FSR2\nSyntax:\nPUSHL k\nOperands:\n0 \uf020\uf0a3\uf020 k \uf0a3 255\nOperation:\nk \uf0ae (FSR2),\nFSR2 - 1 \uf0ae FSR2\nStatus Affected:\nNone\nEncoding:\n1110\n1010\nkkkk\nkkkk\nDescription:\nThe 8-bit literal 'k' is written to the data memory address specified by FSR2. FSR2 is decremented by ' 1 ' after the operation.\nThis instruction allows users to push values onto a software stack.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead 'k'\nProcess\ndata\nWrite to\ndestination\nExample:\nPUSHL 08h\nBefore Instruction\nFSR2H:FSR2L Memory (01ECh)\n= 01ECh\n= 00h\nAfter Instruction\nFSR2H:FSR2L Memory (01ECh)\n=\n01EBh\n=\n08h\nExample:\nMOVSS [05h], [06h]\nBefore Instruction\nFSR2\n=\n80h\nContents\nof 85h\n= 33h\nContents\nof 86h\n= 11h\nAfter Instruction\nFSR2\n= 80h\nContents\nof 85h\n= 33h\nContents\nof 86h\n= 33h",
    "PIC18F6310/6410/8310/8410\nSyntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Syntax:, Subtract Literal from FSR = SUBFSR f, k. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. Operands:, Subtract Literal from FSR = 0 \uf0a3 k \uf0a3 63. , Subtract Literal from FSR = f \uf0ce [ 0, 1, 2 ]. , Subtract Literal from FSR = f \uf0ce [ 0, 1, 2 ]. , Subtract Literal from FSR = f \uf0ce [ 0, 1, 2 ]. , Subtract Literal from FSR = f \uf0ce [ 0, 1, 2 ]. Operation:, Subtract Literal from FSR = FSRf - k \uf0ae FSRf. Operation:, Subtract Literal from FSR =",
    "PIC18F6310/6410/8310/8410\nFSRf - k \uf0ae FSRf. Operation:, Subtract Literal from FSR = FSRf - k \uf0ae FSRf. Operation:, Subtract Literal from FSR = FSRf - k \uf0ae FSRf. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Status Affected:, Subtract Literal from FSR = None. Encoding:, Subtract Literal from FSR = 1110. Encoding:, Subtract Literal from FSR = 1001. Encoding:, Subtract Literal from FSR = ffkk. Encoding:, Subtract Literal from FSR = kkkk. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal",
    "PIC18F6310/6410/8310/8410\nfrom FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Description:, Subtract Literal from FSR = The 6-bit literal 'k' is subtracted from the contents of the FSR specified by 'f'.. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Words:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Cycles:, Subtract Literal from FSR = 1. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:. Q Cycle Activity:, Subtract Literal from FSR = Q Cycle Activity:.",
    "PIC18F6310/6410/8310/8410\nQ1, Subtract Literal from FSR = Q2. Q1, Subtract Literal from FSR = Q3. Q1, Subtract Literal from FSR = . Q1, Subtract Literal from FSR = Q4. Decode, Subtract Literal from FSR = Read register 'f'. Decode, Subtract Literal from FSR = Process Data. Decode, Subtract Literal from FSR = . Decode, Subtract Literal from FSR = Write to destination\nExample:\nSUBFSR 2, 23h\nBefore Instruction\nFSR2\n=\n03FFh\nAfter Instruction\nFSR2\n=\n03DCh",
    "PIC18F6310/6410/8310/8410\nSyntax:, and Return = SUBULNK k. Syntax:, and Return = SUBULNK k. Syntax:, and Return = SUBULNK k. Syntax:, and Return = SUBULNK k. Operands:, and Return = 0 \uf0a3 k \uf0a3 63. Operands:, and Return = 0 \uf0a3 k \uf0a3 63. Operands:, and Return = 0 \uf0a3 k \uf0a3 63. Operands:, and Return = 0 \uf0a3 k \uf0a3 63. Operation:, and Return = FSR2 - k \uf0ae FSR2 (TOS) \uf0ae\uf020 PC. Operation:, and Return = FSR2 - k \uf0ae FSR2 (TOS) \uf0ae\uf020 PC. Operation:, and Return = FSR2 - k \uf0ae FSR2 (TOS) \uf0ae\uf020 PC. Operation:, and Return = FSR2 - k \uf0ae FSR2 (TOS) \uf0ae\uf020 PC. Status Affected:, and Return = None. Status Affected:, and Return = None. Status Affected:, and Return = None. Status Affected:, and Return = None. Encoding:, and Return = 1110. Encoding:, and Return = 1001. Encoding:, and Return = 11kk. Encoding:, and Return = kkkk.",
    "PIC18F6310/6410/8310/8410\nDescription:, and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the SUBFSR instruction,. Description:, and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the SUBFSR instruction,. Description:, and Return = The 6-bit literal 'k' is subtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the SUBFSR instruction,. Description:, and Return = The 6-bit literal 'k' is",
    "PIC18F6310/6410/8310/8410\nsubtracted from the contents of the FSR2. A RETURN is then executed by loading the PC with the TOS. The instruction takes two cycles to execute; a NOP is performed during the second cycle. This may be though of as a special case of the SUBFSR instruction,. Words:, and Return = 1. Words:, and Return = 1. Words:, and Return = 1. Words:, and Return = 1. Cycles:, and Return = 2. Cycles:, and Return = 2. Cycles:, and Return = 2. Cycles:, and Return = 2. Q Cycle Activity:, and Return = Q Cycle Activity:. Q Cycle Activity:, and Return = Q Cycle Activity:. Q Cycle Activity:, and Return = Q Cycle Activity:. Q Cycle Activity:, and Return = Q Cycle Activity:. Q1, and Return = Q2. Q1, and Return = Q3. Q1, and Return = . Q1, and Return = Q4. Decode, and Return = . Decode, and Return = Read register 'f'. Decode, and Return = Process Data. Decode,",
    "PIC18F6310/6410/8310/8410\nand Return = Write to destination. No, and Return = Operation. No, and Return = No Operation. No, and Return = No Operation. No, and Return = No Operation\nExample:\nSUBULNK 23h\nBefore Instruction\nPC, = = =. PC, 03FFh = 0100h. After Instruction FSR2, = = =. After Instruction FSR2, 03FFh = 03DCh. PC, = = =. PC, 03FFh = (TOS)",
    "25.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nNote:\nEnabling the PIC18 instruction set exten- sion  may  cause  legacy  applications  to behave erratically or fail entirely.\nIn addition to eight new commands in the extended set, enabling  the  extended  instruction  set  also  enables Indexed Literal Offset addressing ( Section 6.5.1 'Indexed Addressing with Literal Offset' ). This has a significant impact on the way that many commands of the standard PIC18 instruction set are interpreted.\nWhen the extended set is disabled, addresses embedded in  opcodes  are  treated  as  literal  memory locations:  either  as  a  location  in  the  Access  Bank (a = 0 )  or  in  a  GPR  bank  designated  by  the  BSR (a = 1 ). When the extended instruction set is enabled and a = 0 , however, a file register argument of 5Fh or less is interpreted as an offset from the pointer value in FSR2  and  not  as  a  literal  address.  For  practical purposes, this means that all instructions that use the Access  RAM  bit  as an argument  that is, all byte-oriented  and  bit-oriented  instructions,  or  almost half  of  the  core  PIC18  instructions  -  may  behave differently when the extended instruction set is enabled.",
    "25.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the content of FSR2 is 00h, the boundaries of the Access RAM are essentially remapped to their original values.  This  may  be  useful  in  creating  backward compatible code. If this technique is used, it may be necessary  to  save  the  value  of  FSR2  and  restore  it when moving back and forth between C and assembly routines in order to preserve the Stack Pointer. Users must also keep in mind the syntax requirements of the extended instruction set (see Section 25.2.3.1 'Extended Instruction Syntax with Standard PIC18 Commands' ).\nAlthough the Indexed Literal Offset mode can be very useful  for  dynamic  stack  and  pointer  manipulation,  it can  also  be  very  annoying  if  a  simple  arithmetic operation is carried out on the wrong register. Users who are accustomed to the PIC18 programming must keep in mind that, when the extended instruction set is enabled, register addresses of 5Fh or less are used for Indexed Literal Offset Addressing.\nRepresentative examples of typical byte-oriented and bit-oriented  instructions  in  the  Indexed  Literal  Offset mode are provided on the following page to show how execution is affected. The operand conditions shown in the examples are applicable to all instructions of these types.",
    "25.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nWhen the extended instruction set is enabled, the file register argument 'f' in the standard byte-oriented and bit-oriented commands is replaced with the literal offset value 'k'. As already noted, this occurs only when f is less than or equal to 5Fh. When an offset value is used, it must be indicated by square brackets ('[ ]'). As with the extended instructions, the use of brackets indicates to the compiler that the value is to be interpreted as an index  or  an  offset.  Omitting  the  brackets,  or  using  a value greater than 5Fh within brackets, will generate an error in the MPASM Assembler.\nIf the index argument is properly bracketed for Indexed Literal Offset addressing, the Access RAM argument is never specified; it will automatically be assumed to be ' 0 '. This is in contrast to standard operation (extended instruction set disabled), when 'a' is set on the basis of the  target  address.  Declaring  the  Access  RAM  bit  in this  mode will  also  generate  an  error  in  the  MPASM assembler.\nThe destination argument 'd' functions as before.",
    "25.2.3.1 Extended Instruction Syntax with Standard PIC18 Commands\nIn the latest versions  of the MPASM  assembler, language support for the extended instruction set must be  explicitly  invoked.  This  is  done  with  either  the command  line  option /y ,  or  the  PE  directive  in  the source listing.",
    "25.2.4 CONSIDERATIONS WHEN ENABLING THE EXTENDED INSTRUCTION SET\nIt is important to note that the extensions to the instruction set may not be beneficial to all users. In particular, users who are not writing code that uses a software stack may not benefit from using the extensions to the instruction set.\nAdditionally, the  Indexed  Literal  Offset  Addressing mode may create issues with legacy applications written to PIC18 assembler. This is because instructions in the legacy code may attempt to address registers in the Access Bank below 5Fh. Since these addresses are interpreted as literal offsets to FSR2  when  the instruction  set  extension  is  enabled,  the  application may read or write to the wrong data addresses.\nWhen porting an application to the PIC18F6310/6410/8310/8410,  it  is  very  important  to consider the type of code. A large, re-entrant application that is written in C and would benefit from efficient compilation will do well when using the instruction set extensions.  Legacy  applications  that  heavily  use  the Access Bank will most likely not benefit from using the extended instruction set.",
    "PIC18F6310/6410/8310/8410\nADDWF",
    "ADD W to Indexed (Indexed Literal Offset mode)\nSyntax:\nADDWF      [k] {,d}\nOperands:\n0 \uf0a3 k \uf0a3 95\nd \uf0ce [0,1]\nOperation:\n(W) + ((FSR2) + k) \uf0ae dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0010\n01d0\nkkkk\nkkkk\nDescription:\nThe contents of W are added to the contents of the register indicated by FSR2, offset by the value 'k'. If 'd' is ' 0 ', the result is stored in W. If 'd' is ' 1 ', the result is stored back in register 'f'.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead 'k'\nProcess Data\nWrite to\ndestination",
    "Example:\nADDWF\n[OFST] ,0\nBefore Instruction\nW\n=\n17h\nOFST\n=\n2Ch\nFSR2\n=\n0A00h\nContents\nof 0A2Ch\n= 20h\nAfter Instruction\nW\n=\n37h\nContents\nof 0A2Ch\n=\n20h",
    "Bit Set Indexed (Indexed Literal Offset mode)\nSyntax:\nBSF   [k], b\nOperands:\n0 \uf0a3 f \uf0a3 95\n0 \uf0a3 b \uf0a3 7\nOperation:\n1 \uf0ae ((FSR2) + k)<b>\nStatus Affected:\nNone\nEncoding:\n1000\nbbb0\nkkkk\nkkkk\nDescription:\nBit 'b' of the register indicated by FSR2, offset by the value 'k', is set.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister 'f'\nProcess\nData\nWrite to\ndestination",
    "Example:\nBSF\n[FLAG_OFST], 7\nBefore Instruction\nFLAG_OFST\n= 0Ah\nFSR2\n=\n0A00h\nContents\nof 0A0Ah\n= 55h\nAfter Instruction\nContents\nof 0A0Ah\n= D5h\nSet Indexed",
    "Example:\nSyntax:, (Indexed Literal Offset mode) = SETF [k]. Syntax:, (Indexed Literal Offset mode) = SETF [k]. Syntax:, (Indexed Literal Offset mode) = SETF [k]. Syntax:, (Indexed Literal Offset mode) = SETF [k]. Syntax:, (Indexed Literal Offset mode) = SETF [k]. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operands:, (Indexed Literal Offset mode) = 0 \uf0a3 k \uf0a3 95. Operation:, (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, (Indexed Literal Offset mode) = FFh \uf0ae ((FSR2) + k). Operation:, (Indexed Literal Offset mode) =",
    "Example:\nFFh \uf0ae ((FSR2) + k). Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Status Affected:, (Indexed Literal Offset mode) = None. Encoding:, (Indexed Literal Offset mode) = 0110. Encoding:, (Indexed Literal Offset mode) = 0110. Encoding:, (Indexed Literal Offset mode) = 1000. Encoding:, (Indexed Literal Offset mode) = kkkk. Encoding:, (Indexed Literal Offset mode) = kkkk. Description:, (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, (Indexed Literal Offset mode)",
    "Example:\n= The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Description:, (Indexed Literal Offset mode) = The contents of the register indicated by FSR2, offset by 'k', are set to FFh.. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Words:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Cycles:, (Indexed Literal Offset mode) = 1. Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q Cycle Activity:, (Indexed Literal Offset mode) = . Q1, (Indexed Literal Offset mode) =",
    "Example:\nQ2. Q1, (Indexed Literal Offset mode) = Q2. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q3. Q1, (Indexed Literal Offset mode) = Q4. Decode, (Indexed Literal Offset mode) = Read 'k'. Decode, (Indexed Literal Offset mode) = Read 'k'. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Process Data. Decode, (Indexed Literal Offset mode) = Write register. Example:, (Indexed Literal Offset mode) = SETF. Example:, (Indexed Literal Offset mode) = [OFST]. Example:, (Indexed Literal Offset mode) = [OFST]. Example:, (Indexed Literal Offset mode) = [OFST]. Example:, (Indexed Literal Offset mode) = [OFST]. Before Instruction OFST FSR2, (Indexed Literal Offset mode) = = =. Before Instruction OFST FSR2, (Indexed Literal Offset mode) = 2Ch. Before Instruction OFST FSR2, (Indexed Literal Offset mode) = 2Ch. Before Instruction",
    "Example:\nOFST FSR2, (Indexed Literal Offset mode) = 2Ch. Before Instruction OFST FSR2, (Indexed Literal Offset mode) = 2Ch. Contents of 0A2Ch, (Indexed Literal Offset mode) = =. Contents of 0A2Ch, (Indexed Literal Offset mode) = 0A00h. Contents of 0A2Ch, (Indexed Literal Offset mode) = 0A00h. Contents of 0A2Ch, (Indexed Literal Offset mode) = 0A00h. Contents of 0A2Ch, (Indexed Literal Offset mode) = 0A00h. Contents, (Indexed Literal Offset mode) = . Contents, (Indexed Literal Offset mode) = 00h FFh. Contents, (Indexed Literal Offset mode) = 00h FFh. Contents, (Indexed Literal Offset mode) = 00h FFh. Contents, (Indexed Literal Offset mode) = 00h FFh. After Instruction of 0A2Ch, (Indexed Literal Offset mode) = =. After Instruction of 0A2Ch, (Indexed Literal Offset mode) = . After Instruction of 0A2Ch, (Indexed Literal Offset mode) = . After Instruction of 0A2Ch, (Indexed Literal Offset",
    "Example:\nmode) = . After Instruction of 0A2Ch, (Indexed Literal Offset mode) = ",
    "25.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB IDE TOOLS\nThe latest versions of Microchip's software tools have been designed to fully support the extended instruction set of the PIC18F6310/6410/8310/8410  family of devices.  This  includes  the  MPLAB  C18  compiler, MPASM  assembly  language  and  MPLAB  Integrated Development Environment (IDE).\nWhen selecting a target device for software development, MPLAB IDE will automatically set default Configuration bits for that device. The default setting for the XINST Configuration is ' 0 ', disabling the extended instruction set and Indexed Literal Offset Addressing. For proper execution of applications developed to take advantage of the extended instruction set, XINST must be set during programming.\nTo develop software for the extended instruction set, the user must enable support for the instructions and the Indexed Addressing mode in their language tool(s). Depending on the environment being used, this may be done in several ways:\n\u00b7 A menu option or dialog box within the environment that allows the user to configure the language tool and its settings for the project\n\u00b7 A command line option\n\u00b7 A directive in the source code",
    "25.2.5 SPECIAL CONSIDERATIONS WITH MICROCHIP MPLAB IDE TOOLS\nThese options vary between different compilers, assemblers and development environments. Users are encouraged to review the documentation accompanying their development systems for the appropriate information.",
    "26.0 DEVELOPMENT SUPPORT\nThe  PIC \u00ae   microcontrollers  and  dsPIC \u00ae digital  signal controllers are supported with a full range of software and hardware development tools:",
    "26.1 MPLAB Integrated Development Environment Software\n\u00b7 Integrated Development Environment\n-MPLAB \u00ae  IDE Software\n\u00b7 Compilers/Assemblers/Linkers\n-MPLAB C Compiler for Various Device Families\n-HI-TECH C for Various Device Families\n-MPASM TM  Assembler\n-MPLINK TM  Object Linker/ MPLIB TM  Object Librarian\n-MPLAB Assembler/Linker/Librarian for Various Device Families\n\u00b7 Simulators\n-MPLAB SIM Software Simulator\n\u00b7 Emulators\n-MPLAB REAL ICE\u2122 In-Circuit Emulator\n\u00b7 In-Circuit Debuggers\n-MPLAB ICD 3\n-PICkit\u2122 3 Debug Express\n\u00b7 Device Programmers\n-PICkit\u2122 2 Programmer\n-MPLAB PM3 Device Programmer\n\u00b7 Low-Cost Demonstration/Development Boards, Evaluation Kits, and Starter Kits\nThe MPLAB IDE software brings an ease of software development  previously  unseen  in  the  8/16/32-bit microcontroller market. The MPLAB IDE is a Windows \u00ae operating system-based application that contains:",
    "26.1 MPLAB Integrated Development Environment Software\n\u00b7 A single graphical interface to all debugging tools\n-Simulator\n-Programmer (sold separately)\n-In-Circuit Emulator (sold separately)\n-In-Circuit Debugger (sold separately)\n\u00b7 A full-featured editor with color-coded context\n\u00b7 A multiple project manager\n\u00b7 Customizable data windows with direct edit of contents\n\u00b7 High-level source code debugging\n\u00b7 Mouse over variable inspection\n\u00b7 Drag and drop variables from source to watch windows\n\u00b7 Extensive on-line help\n\u00b7 Integration of select third party tools, such as IAR C Compilers\nThe MPLAB IDE allows you to:\n\u00b7 Edit your source files (either C or assembly)\n\u00b7 One-touch compile or assemble, and download to emulator and simulator tools (automatically updates all project information)\n\u00b7 Debug using:\n-Source files (C or assembly)\n-Mixed C and assembly\n-Machine code\nMPLAB  IDE  supports  multiple  debugging  tools  in  a single development paradigm, from the cost-effective simulators,  through  low-cost  in-circuit  debuggers,  to full-featured  emulators.  This  eliminates  the  learning curve when upgrading to tools with increased flexibility and power.",
    "26.5 MPLINK Object Linker/ MPLIB Object Librarian\nThe MPLAB C Compiler code development systems are complete ANSI C compilers for Microchip's PIC18, PIC24 and PIC32 families of microcontrollers and the dsPIC30 and dsPIC33 families of digital signal controllers. These  compilers  provide  powerful  integration capabilities,  superior  code  optimization  and  ease  of use.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.",
    "26.3 HI-TECH C for Various Device Families\nThe HI-TECH C Compiler code development systems are  complete  ANSI  C  compilers  for  Microchip's  PIC family of microcontrollers and the dsPIC family of digital signal  controllers.  These  compilers  provide  powerful integration  capabilities,  omniscient  code  generation and ease of use.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.\nThe compilers include a macro assembler, linker, preprocessor, and one-step driver, and can run on multiple platforms.",
    "26.4 MPASM Assembler\nThe  MPASM  Assembler  is  a  full-featured,  universal macro assembler for PIC10/12/16/18 MCUs.\nThe MPASM Assembler generates relocatable object files for the MPLINK Object Linker, Intel \u00ae  standard HEX files,  MAP  files  to  detail  memory  usage  and  symbol reference, absolute LST files that contain source lines and  generated  machine  code  and  COFF  files  for debugging.\nThe MPASM Assembler features include:\n\u00b7 Integration into MPLAB IDE projects\n\u00b7 User-defined macros to streamline assembly code\n\u00b7 Conditional assembly for multi-purpose source files\n\u00b7 Directives that allow complete control over the assembly process\nThe  MPLINK  Object  Linker  combines relocatable objects  created  by  the  MPASM  Assembler  and  the MPLAB C18 C Compiler. It can link relocatable objects from  precompiled  libraries,  using  directives  from  a linker script.",
    "26.4 MPASM Assembler\nThe MPLIB Object Librarian manages the creation and modification of library files of precompiled code. When a routine from a library is called from a source file, only the modules that contain that routine will be linked in with  the  application.  This  allows  large  libraries  to  be used efficiently in many different applications.\nThe object linker/library features include:\n\u00b7 Efficient linking of single libraries instead of many smaller files\n\u00b7 Enhanced code maintainability by grouping related modules together\n\u00b7 Flexible creation of libraries with easy module listing, replacement, deletion and extraction",
    "26.6 MPLAB Assembler, Linker and Librarian for Various Device Families\nMPLAB  Assembler  produces  relocatable machine code  from  symbolic  assembly  language  for  PIC24, PIC32 and dsPIC devices. MPLAB C Compiler uses the assembler to produce its object file. The assembler generates  relocatable  object  files  that  can  then  be archived or linked with other relocatable object files and archives to create an executable file. Notable features of the assembler include:\n\u00b7 Support for the entire device instruction set\n\u00b7 Support for fixed-point and floating-point data\n\u00b7 Command line interface\n\u00b7 Rich directive set\n\u00b7 Flexible macro language\n\u00b7 MPLAB IDE compatibility",
    "26.7 MPLAB SIM Software Simulator\nThe  MPLAB  SIM  Software  Simulator  allows  code development in a PC-hosted environment by simulating the PIC MCUs and dsPIC \u00ae  DSCs on an instruction level. On any given instruction, the data areas can be examined or modified and stimuli can be applied from a comprehensive stimulus controller. Registers can be logged to files for further run-time analysis. The trace buffer and logic analyzer display extend the power of the simulator to record and track program execution, actions on I/O, most peripherals and internal registers.\nThe  MPLAB  SIM  Software  Simulator  fully  supports symbolic  debugging  using  the  MPLAB  C Compilers, and  the  MPASM  and  MPLAB  Assemblers.  The  software  simulator  offers  the  flexibility  to  develop  and debug code outside of the hardware laboratory environment, making it an excellent, economical software development tool.",
    "26.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB  REAL  ICE  In-Circuit Emulator System  is Microchip's  next  generation  high-speed  emulator  for Microchip Flash DSC and MCU devices. It debugs and programs PIC \u00ae  Flash MCUs and dsPIC \u00ae  Flash DSCs with the easy-to-use, powerful graphical user interface of the MPLAB Integrated Development Environment (IDE), included with each kit.\nThe emulator is connected to the design engineer's PC using a high-speed USB 2.0 interface and is connected to the target with either a connector compatible with incircuit debugger systems (RJ11) or with the new highspeed,  noise  tolerant,  Low-Voltage  Differential  Signal (LVDS) interconnection (CAT5).",
    "26.8 MPLAB REAL ICE In-Circuit Emulator System\nThe emulator is field upgradable through future firmware downloads  in  MPLAB  IDE.  In  upcoming  releases  of MPLAB IDE, new devices will be supported, and new features will be  added.  MPLAB  REAL  ICE  offers significant advantages over competitive emulators including low-cost, full-speed emulation, run-time variable watches, trace analysis, complex breakpoints, a ruggedized probe interface and long (up to three meters) interconnection cables.",
    "26.9 MPLAB ICD 3 In-Circuit Debugger System\nMPLAB ICD 3 In-Circuit  Debugger  System  is  Microchip's most cost effective high-speed hardware debugger/programmer for Microchip Flash Digital Signal Controller (DSC) and microcontroller (MCU) devices. It debugs and programs PIC \u00ae  Flash microcontrollers and dsPIC \u00ae DSCs with the powerful, yet easyto-use  graphical  user  interface  of  MPLAB  Integrated Development Environment (IDE).\nThe MPLAB ICD 3 In-Circuit Debugger probe is connected to the design engineer's PC using a high-speed USB 2.0 interface and is connected to the target with a connector compatible with the MPLAB ICD 2 or MPLAB REAL ICE systems (RJ-11). MPLAB ICD 3 supports all MPLAB ICD 2 headers.",
    "26.10 PICkit 3 In-Circuit Debugger/ Programmer and PICkit 3 Debug Express\nThe MPLAB PICkit 3 allows debugging and programming of PIC \u00ae  and dsPIC \u00ae  Flash microcontrollers at a most affordable price point using the powerful graphical user interface of the MPLAB Integrated Development Environment (IDE). The MPLAB PICkit 3 is connected to  the  design  engineer's  PC  using  a  full  speed  USB interface  and  can  be  connected  to  the  target  via  an Microchip  debug  (RJ-11)  connector  (compatible  with MPLAB ICD 3 and MPLAB REAL ICE). The connector uses two device I/O pins and the reset line to implement  in-circuit  debugging  and  In-Circuit  Serial  Programming\u2122.\nThe PICkit 3 Debug Express include the PICkit 3, demo board and microcontroller, hookup cables and CDROM with user's guide, lessons, tutorial, compiler and MPLAB IDE software.",
    "26.13 Demonstration/Development Boards, Evaluation Kits, and Starter Kits\nThe PICkit\u2122 2 Development Programmer/Debugger is a low-cost development tool with an easy to use interface for programming and debugging Microchip's Flash families of microcontrollers. The full featured Windows \u00ae   programming  interface  supports  baseline (PIC10F, PIC12F5xx, PIC16F5xx), midrange (PIC12F6xx, PIC16F), PIC18F, PIC24, dsPIC30, dsPIC33, and PIC32 families of 8-bit, 16-bit, and 32-bit microcontrollers, and many Microchip Serial EEPROM products. With Microchip's powerful MPLAB Integrated Development Environment (IDE) the PICkit\u2122 2 enables in-circuit debugging on most PIC \u00ae  microcontrollers.  In-Circuit-Debugging  runs,  halts  and  single steps  the  program  while  the  PIC  microcontroller  is embedded in the application. When halted at a breakpoint, the file registers can be examined and modified.",
    "26.13 Demonstration/Development Boards, Evaluation Kits, and Starter Kits\nThe PICkit 2 Debug Express include the PICkit 2, demo board and microcontroller, hookup cables and CDROM with user's guide, lessons, tutorial, compiler and MPLAB IDE software.",
    "26.12 MPLAB PM3 Device Programmer\nThe MPLAB PM3 Device Programmer is a universal, CE compliant device programmer with programmable voltage verification at VDDMIN and VDDMAX for maximum  reliability.  It  features  a  large  LCD  display (128 x 64) for menus and error messages and a modular,  detachable  socket  assembly  to  support  various package types. The ICSP\u2122 cable assembly is included as a standard item. In Stand-Alone mode, the MPLAB PM3 Device Programmer can read, verify and program PIC devices without a PC connection. It can also set code  protection in this mode.  The  MPLAB  PM3 connects to the host PC via an RS-232 or USB cable. The MPLAB PM3 has high-speed communications and optimized  algorithms  for  quick  programming  of  large memory devices and incorporates an MMC card for file storage and data applications.\nA  wide  variety  of demonstration,  development  and evaluation  boards  for  various  PIC  MCUs  and  dsPIC DSCs allows quick application development on fully functional systems. Most boards include prototyping areas for adding custom circuitry and provide application firmware and source code for examination and modification.",
    "26.12 MPLAB PM3 Device Programmer\nThe boards support a variety of features, including LEDs, temperature sensors, switches, speakers, RS-232 interfaces, LCD displays, potentiometers and additional EEPROM memory.\nThe  demonstration  and  development  boards  can  be used in teaching environments, for prototyping custom circuits and for learning about various microcontroller applications.\nIn addition to the PICDEM\u2122 and dsPICDEM\u2122 demonstration/development board series of circuits, Microchip has a line of evaluation kits and demonstration software for  analog  filter  design,  KEELOQ \u00ae security  ICs,  CAN, IrDA \u00ae ,  PowerSmart  battery  management,  SEEVAL \u00ae evaluation system, Sigma-Delta ADC, flow rate sensing, plus many more.\nAlso available are starter kits that contain everything needed to experience the specified device. This usually includes a single application and debug capability, all on one board.\nCheck the Microchip web page (www.microchip.com) for  the  complete  list  of  demonstration,  development and evaluation kits.",
    "Absolute Maximum Ratings (\u2020)\nAmbient temperature under bias.............................................................................................................-40\u00b0C to +125\u00b0C",
    "Absolute Maximum Ratings (\u2020)\nStorage temperature .............................................................................................................................. -65\u00b0C to +150\u00b0C\nVoltage on any pin with respect to VSS (except VDD, MCLR and RA4) .......................................... -0.3V to (VDD + 0.3V)",
    "Absolute Maximum Ratings (\u2020)\nVoltage on VDD with respect to VSS  .........................................................................................................  -0.3V to +7.5V\nVoltage on MCLR with respect to VSS (Note 2)\n......................................................................................... 0V to +13.25V",
    "Absolute Maximum Ratings (\u2020)\nVoltage on RA4 with respect to Vss............................................................................................................... 0V to +8.5V\nTotal power dissipation (Note 1)",
    "Absolute Maximum Ratings (\u2020)\n...............................................................................................................................1.0W",
    "Absolute Maximum Ratings (\u2020)\nMaximum current out of VSS pin ...........................................................................................................................300 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current into VDD pin ..............................................................................................................................250 mA\nInput clamp current, IIK (VI < 0 or VI > VDD)\n\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e \uf0b1\n20 mA\nOutput clamp current, IOK (VO < 0 or VO > VDD)\n\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e\uf02e \uf0b1\n20 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum output current sunk by any I/O pin..........................................................................................................25 mA\nMaximum output current sourced by any I/O pin ....................................................................................................25 mA",
    "Absolute Maximum Ratings (\u2020)\nMaximum current sunk by all ports .......................................................................................................................200 mA \uf020\nMaximum current sourced by all ports ..................................................................................................................200 mA",
    "Absolute Maximum Ratings (\u2020)\nNote 1: Power dissipation is calculated as follows:\nPdis = VDD x {IDD -\uf0e5 IOH} + \uf0e5 {(VDD - VOH) x IOH} + \uf0e5 (VOL x IOL)\n2: Voltage spikes below VSS at the MCLR/VPP pin, inducing currents greater than 80 mA, may cause latch-up. Thus, a series resistor of 50-100 \uf057 should be used when applying a 'low' level to the MCLR/VPP pin, rather than pulling this pin directly to VSS.\n\u2020 NOTICE: Stresses above those listed under 'Absolute Maximum Ratings' may cause permanent damage to the device. This is a stress rating only and functional operation of the device at those or any other conditions above those indicated in the operation listings of this specification is not implied. Exposure to maximum rating conditions for extended periods may affect device reliability.",
    "PIC18LF6310/6410/8310/8410 (Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18LF6310/6410/8310/8410 (Industrial)\nD001, Symbol = VDD. D001, Characteristic = Supply Voltage. D001, Min = Supply Voltage. D001, Typ = Supply Voltage. D001, Max = Supply Voltage. D001, Units = Supply Voltage. D001, Conditions = Supply Voltage. D001, Symbol = VDD. D001, Characteristic = PIC18LFX310/X410. D001, Min = 2.0. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = . D001, Symbol = VDD. D001, Characteristic = PIC18F6310/6410/8310/8410. D001, Min = 4.2. D001, Typ = -. D001, Max = 5.5. D001, Units = V. D001, Conditions = . D001B, Symbol = AVDD. D001B, Characteristic = Analog Supply Voltage. D001B, Min =",
    "PIC18LF6310/6410/8310/8410 (Industrial)\nVDD - 0.3. D001B, Typ = VDD + 0.3. D001B, Max = -. D001B, Units = V. D001B, Conditions = . D001C, Symbol = AVSS. D001C, Characteristic = AVSS Analog Ground Voltage. D001C, Min = VSS - 0.3. D001C, Typ = VSS + 0.3. D001C, Max = -. D001C, Units = V. D001C, Conditions = . D002, Symbol = VDR. D002, Characteristic = RAM Data Retention Voltage (1). D002, Min = 1.5. D002, Typ = -. D002, Max = -. D002, Units = V. D002, Conditions = . D003, Symbol = VPOR. D003, Characteristic = VDD Start Voltage to Ensure Internal Power-on Reset Signal. D003, Min = -. D003, Typ = -.",
    "PIC18LF6310/6410/8310/8410 (Industrial)\nD003, Max = 0.7. D003, Units = V. D003, Conditions = See Section 5.3 'Power-on Reset (POR)' for details. D004, Symbol = SVDD. D004, Characteristic = VDD Rise Rate to Ensure Internal Power-on Reset Signal. D004, Min = 0.05. D004, Typ = -. D004, Max = -. D004, Units = V/ms. D004, Conditions = See Section 5.3 'Power-on Reset (POR)' for details. D005, Symbol = VBOR. D005, Characteristic = Brown-out Reset Voltage. D005, Min = Brown-out Reset Voltage. D005, Typ = Brown-out Reset Voltage. D005, Max = Brown-out Reset Voltage. D005, Units = Brown-out Reset Voltage. D005, Conditions = Brown-out Reset Voltage. D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 11.",
    "PIC18LF6310/6410/8310/8410 (Industrial)\nD005, Min = 1.96. D005, Typ = 2.06. D005, Max = 2.16. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 10. D005, Min = 2.64. D005, Typ = 2.78. D005, Max = 2.92. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 01 (2). D005, Min = 4.11. D005, Typ = 4.33. D005, Max = 4.55. D005, Units = V. D005, Conditions = . D005, Symbol = VBOR. D005, Characteristic = BORV<1:0> = 00. D005, Min = 4.41. D005, Typ =",
    "PIC18LF6310/6410/8310/8410 (Industrial)\n4.64. D005, Max = 4.87. D005, Units = V. D005, Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote 1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n2: With BOR enabled, full-speed operation (FOSC = 40 MHz) is supported until a BOR occurs. This is valid although VDD may be below the minimum voltage for this frequency.\n27.2 DC Characteristics:",
    "PIC18F6310/6410/8310/8410\nPower-Down and Supply Current",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nPIC18LF6310/6410/8310/8410\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3\n+85\u00b0C for industrial\nPIC18F6310/6410/8310/8410\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\n, Device = Power-Down Current (I PD) (1). , Typ = Power-Down Current (I PD) (1). , Max = Power-Down Current (I PD) (1). , Units = Power-Down Current (I PD) (1). , Conditions = Power-Down Current (I PD) (1). , Conditions = Power-Down Current (I PD) (1). , Device = PIC18LFX310/X410. , Typ = 0.1. , Max = 1.0. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = PIC18LFX310/X410. , Typ = 0.1. , Max = 1.0. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nPIC18LFX310/X410. , Typ = 0.3. , Max = 5.0. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 2.0V ( Sleep mode). , Device = PIC18LFX310/X410. , Typ = 0.1. , Max = 2.0. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = PIC18LFX310/X410. , Typ = 0.1. , Max = 2.0. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V ( Sleep mode). , Device = PIC18LFX310/X410. , Typ = 0.3. , Max = 8.0. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\n3.0V ( Sleep mode). , Device = All devices. , Typ = 0.1. , Max = 2.0. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = All devices. , Typ = 0.1. , Max = 2.0. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = All devices. , Typ = 0.4. , Max = 15. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode). , Device = All devices. , Typ = 11. , Max = 50. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V ( Sleep mode)",
    "Legend:\nShading of rows is to assist in readability of the table.",
    "Note\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "Note\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LF6310/6410/8310/8410\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nPIC18F6310/6410/8310/8410\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nSupply, Device = Current (I DD) (2,3). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . , Device = PIC18LFX310/X410. , Typ = 12. , Max = 26. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 12. , Max = 24. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 12. , Max = 23. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 32. , Max = 50. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = .",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Device = PIC18LFX310/X410. , Typ = 27. , Max = 48. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 22. , Max = 46. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 84. , Max = 134. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 82. , Max = 128. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 72. , Max = 122. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 90. , Max = 145. , Units = \uf06d A. ,",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nConditions = 125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .26. , Max = .8. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .26. , Max = .8. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .26. , Max = .8. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .48. , Max = 1.04. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .44. ,",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nMax = .96. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = .48. , Max = .88. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = .88. , Max = 1.84. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = .88. , Max = 1.76. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = .8. , Max = 1.68. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.25. , Max = 2.2. , Units = mA. , Conditions =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n+125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.6. , Max = 1.7. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.6. , Max = 1.6. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.6. , Max = 1.5. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 1.0. , Max = 2.4. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. ,",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nTyp = 1.0. , Max = 2.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 1.0. , Max = 2.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.0. , Max = 4.2. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.0. , Max = 4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.0. , Max = 3.8. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.7. , Max =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n4.3. , Units = mA. , Conditions = +125\u00b0C. , Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.",
    "Note 1:\nThe power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "Note 1:\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n27.2 DC Characteristics:\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3\n+85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nSupply, Device = Current (I DD) (2,3). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . , Device = PIC18LFX310/X410. , Typ = 2.3. , Max = 6.4. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 2.5. , Max = 6.4. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 2.9. , Max = 8.8. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 3.6. , Max = 8.8. ,",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nUnits = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 3.8. , Max = 8.8. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 4.6. , Max = 12. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 7.4. , Max = 16. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 7.8. , Max = 13. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 9.1. , Max = 29. , Units = \uf06d A. , Conditions =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n+85\u00b0C. , Conditions = . , Device = All devices. , Typ = 21. , Max = 97. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 132. , Max = 450. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 140. , Max = 450. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 152. , Max = 450. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 200. , Max = 600. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n= . , Device = PIC18LFX310/X410. , Typ = 216. , Max = 600. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 252. , Max = 600. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 400. , Max = 990. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 420. , Max = 990. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 440. , Max = 990. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 850. , Max =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n1.2. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 272. , Max = 690. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 280. , Max = 690. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 288. , Max = 690. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 416. , Max = 990. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n432. , Max = 990. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 464. , Max = 990. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = .8. , Max = 1.9. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = .9. , Max = 1.9. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = .9. , Max = 1.9. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.6. , Max = 2.2. , Units = mA. , Conditions",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n= +125\u00b0C. , Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "Legend:\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "27.2 DC Characteristics:\nPower-Down and Supply Current",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Device = PIC18LFX310/X410. , Typ = 250. , Max = 500. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 260. , Max = 500. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 250. , Max = 500. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 550. , Max = 650. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LFX310/X410. , Typ = 480. , Max = 650. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 460. , Max = 650. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.2. , Max = 1.6. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.1. , Max = 1.5. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.0. , Max = 1.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1.5. , Max =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n1.9. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.72. , Max = 2.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.74. , Max = 2.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 0.74. , Max = 2.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LFX310/X410. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 1.3. , Max = 3.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.7. , Max = 6.0. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.6. , Max = 6.0. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 2.5. , Max = 6.0. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ =",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n4.2. , Max = 8. , Units = mA. , Conditions = +125\u00b0C. , Conditions = . , Device = All devices. , Typ = 15. , Max = 35. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 16. , Max = 35. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 16. , Max = 35. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 21. , Max = 40. , Units",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n= mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 30. , Max = 50. , Units = mA. , Conditions = +125\u00b0C. , Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.",
    "Note\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "Note\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n27.2 DC Characteristics:\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3\n+85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3\n+125\u00b0C for extended",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Device = PIC18LFX310/X410. , Typ = 59. , Max = 117. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 59. , Max = 108. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 63. , Max = 104. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 108. , Max = 243. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LFX310/X410. , Typ = 108. , Max = 225. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 117. , Max = 216. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 270. , Max = 432. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 216. , Max = 405. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 270. , Max = 387. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 300. , Max = 430. , Units = \uf06d A. , Conditions",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n= +125\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 234. , Max = 428. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 230. , Max = 405. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 243. , Max = 387. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 378. , Max = 810. , Units = \uf06d A. , Conditions = -40\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 387. , Max = 765.",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 405. , Max = 729. , Units = \uf06d A. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 0.8. , Max = 1.35. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 0.8. , Max = 1.26. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 0.8. , Max = 1.17. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 1. , Max = 1.4. , Units = mA. , Conditions = +125\u00b0C. , Conditions =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n. , Device = All devices. , Typ = 5.4. , Max = 14.4. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 5.6. , Max = 14.4. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 5.9. , Max = 14.4. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 7.3. , Max = 16.2. , Units = mA. , Conditions = -40\u00b0C. , Conditions = . , Device = All devices. , Typ = 8.2. , Max = 16.2. , Units = mA. , Conditions = +25\u00b0C. , Conditions = . , Device = All devices. , Typ = 7.5. , Max =",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n16.2. , Units = mA. , Conditions = +85\u00b0C. , Conditions = . , Device = All devices. , Typ = 19. , Max = 18. , Units = mA. , Conditions = +125\u00b0C. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "Power-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "27.2 DC Characteristics:\nPower-Down and Supply Current",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LF6310/6410/8310/8410 (Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3\nTA\n\uf0a3\n+85\u00b0C for industrial\nPIC18F6310/6410/8310/8410\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = Supply Current (I DD) (2,3). , Max = Supply Current (I DD) (2,3). , Units = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Device = All devices. , Typ = 7.5. , Max = 16. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 7.4. , Max = 15. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V.",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 7.3. , Max = 14. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 10. , Max = 21. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 10. , Max = 20. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nmode). , Device = All devices. , Typ = 9.7. , Max = 19. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHZ, 16 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 17. , Max = 35. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 17. , Max = 35. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 17. , Max = 35. ,",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nUnits = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = -40\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode). , Device = All devices. , Typ = 23. , Max = 40. , Units = mA. , Conditions = +85\u00b0C. , Conditions = VDD = 5.0V.",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n, Conditions = FOSC = 10 MHZ, 40 MHz internal ( PRI_RUN HSPLL mode)\nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.\n27.2 DC Characteristics:\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410",
    "PIC18F6310/6410/8310/8410\nPower-Down and Supply Current\nPIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "PIC18F6310/6410/8310/8410\nSupply, Device = Current (I DD) (2). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . Supply, Conditions = . , Device = PIC18LFX310/X410. , Typ = 13. , Max = 40. , Units = \uf06d A. , Conditions = -10\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 14. , Max = 40. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 16. , Max = 40. , Units = \uf06d A. , Conditions = +70\u00b0C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 34. , Max = 74. , Units = \uf06d A. , Conditions = -10\u00b0C.",
    "PIC18F6310/6410/8310/8410\n, Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 31. , Max = 70. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 28. , Max = 67. , Units = \uf06d A. , Conditions = +70\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 72. , Max = 150. , Units = \uf06d A. , Conditions = -10\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 65. , Max = 150. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 59. , Max = 150. , Units = \uf06d A. , Conditions = +70\u00b0C.",
    "PIC18F6310/6410/8310/8410\n, Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 90. , Max = 170. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 5.5. , Max = 15. , Units = \uf06d A. , Conditions = -10\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 5.8. , Max = 15. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX310/X410. , Typ = 6.1. , Max = 18. , Units = \uf06d A. , Conditions = +70\u00b0C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LFX310/X410. ,",
    "PIC18F6310/6410/8310/8410\nTyp = 8.2. , Max = 30. , Units = \uf06d A. , Conditions = -10\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LFX310/X410. , Typ = 8.6. , Max = 30. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = . , Conditions = . , Device = PIC18LFX310/X410. , Typ = 8.8. , Max = 35. , Units = \uf06d A. , Conditions = +70\u00b0C. , Conditions = . , Conditions = . , Device = All devices. , Typ = 13. , Max = 80. , Units = \uf06d A. , Conditions = -10\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 13. , Max = 80. , Units = \uf06d A. , Conditions = +25\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 13. , Max = 85. , Units = \uf06d A.",
    "PIC18F6310/6410/8310/8410\n, Conditions = +70\u00b0C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 22. , Max = 90. , Units = \uf06d A. , Conditions = +125\u00b0C. , Conditions = VDD = 5.0V. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "PIC18F6310/6410/8310/8410\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "PIC18F6310/6410/8310/8410\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "27.2 DC Characteristics:\nPower-Down and Supply Current PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nPIC18LF6310/6410/8310/8410\n(Industrial)\nPIC18F6310/6410/8310/8410\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "27.2 DC Characteristics:\n, Device = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Typ = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Max = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Units = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). , Conditions = Module Differential Currents ( \uf044 I WDT, \uf044 I BOR, \uf044 I LVD , \uf044 I OSCB, \uf044 I AD). D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 1.7. D022 ( \uf044 I WDT), Max = 4.0. D022 ( \uf044 I WDT), Units = \uf06d A.",
    "27.2 DC Characteristics:\nD022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 2.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.1. D022 ( \uf044 I WDT), Max = 4.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 2.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.6. D022 ( \uf044 I WDT), Max = 5.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 2.0V. D022",
    "27.2 DC Characteristics:\n( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.2. D022 ( \uf044 I WDT), Max = 6.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.4. D022 ( \uf044 I WDT), Max = 6.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ =",
    "27.2 DC Characteristics:\n2.8. D022 ( \uf044 I WDT), Max = 7.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 3.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 2.9. D022 ( \uf044 I WDT), Max = 10.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = -40\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 3.1. D022 ( \uf044 I WDT), Max = 10.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I",
    "27.2 DC Characteristics:\nWDT), Conditions = +25\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 3.3. D022 ( \uf044 I WDT), Max = 13.0. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +85\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = . D022 ( \uf044 I WDT), Device = Watchdog Timer. D022 ( \uf044 I WDT), Typ = 20. D022 ( \uf044 I WDT), Max = 190. D022 ( \uf044 I WDT), Units = \uf06d A. D022 ( \uf044 I WDT), Conditions = +125\u00b0C. D022 ( \uf044 I WDT), Conditions = VDD = 5.0V. D022 ( \uf044 I WDT), Conditions = .",
    "27.2 DC Characteristics:\nD022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 17. D022A ( \uf044 I BOR), Max = 50.0. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D022A ( \uf044 I BOR), Conditions = VDD = 3.0V. D022A ( \uf044 I BOR), Conditions = . D022A ( \uf044 I BOR), Device = Brown-out Reset (4). D022A ( \uf044 I BOR), Typ = 47. D022A ( \uf044 I BOR), Max = 60.0. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I BOR), Conditions = . D022A ( \uf044 I BOR), Device =",
    "27.2 DC Characteristics:\nBrown-out Reset (4). D022A ( \uf044 I BOR), Typ = 90. D022A ( \uf044 I BOR), Max = 200. D022A ( \uf044 I BOR), Units = \uf06d A. D022A ( \uf044 I BOR), Conditions = -40 \uf0b0 C to +125 \uf0b0 C. D022A ( \uf044 I BOR), Conditions = VDD = 5.0V. D022A ( \uf044 I BOR), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 14. D022B ( \uf044 I LVD ), Max = 38.0. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D022B ( \uf044 I LVD ), Conditions = VDD = 2.0V. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B",
    "27.2 DC Characteristics:\n( \uf044 I LVD ), Typ = 18. D022B ( \uf044 I LVD ), Max = 40.0. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D022B ( \uf044 I LVD ), Conditions = VDD = 3.0V. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 21. D022B ( \uf044 I LVD ), Max = 45.0. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Conditions = . D022B ( \uf044 I LVD ), Device = High/Low-Voltage Detect (4). D022B ( \uf044 I LVD ), Typ = 90. D022B ( \uf044 I",
    "27.2 DC Characteristics:\nLVD ), Max = 2000. D022B ( \uf044 I LVD ), Units = \uf06d A. D022B ( \uf044 I LVD ), Conditions = -40 \uf0b0 C to +125 \uf0b0 C. D022B ( \uf044 I LVD ), Conditions = VDD = 5.0V. D022B ( \uf044 I LVD ), Conditions = . D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.0. D025 ( \uf044 I OSCB), Max = 3.5. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = -40 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.1. D025 ( \uf044 I OSCB), Max = 3.5. D025 ( \uf044 I OSCB), Units",
    "27.2 DC Characteristics:\n= \uf06d A. D025 ( \uf044 I OSCB), Conditions = +25 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.1. D025 ( \uf044 I OSCB), Max = 4.5. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = +70 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 2.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.2. D025 ( \uf044 I OSCB), Max = 4.5. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = -40 \uf0b0 C.",
    "27.2 DC Characteristics:\nD025 ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.3. D025 ( \uf044 I OSCB), Max = 4.5. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = +25 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 3.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.2. D025 ( \uf044 I OSCB), Max = 5.5. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = +70 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD =",
    "27.2 DC Characteristics:\n3.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.8. D025 ( \uf044 I OSCB), Max = 6.0. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = -40 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.9. D025 ( \uf044 I OSCB), Max = 6.0. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = +25 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz",
    "27.2 DC Characteristics:\non Timer1 (4). D025 ( \uf044 I OSCB), Device = Timer1 Oscillator. D025 ( \uf044 I OSCB), Typ = 1.9. D025 ( \uf044 I OSCB), Max = 7.0. D025 ( \uf044 I OSCB), Units = \uf06d A. D025 ( \uf044 I OSCB), Conditions = +85 \uf0b0 C. D025 ( \uf044 I OSCB), Conditions = VDD = 5.0V. D025 ( \uf044 I OSCB), Conditions = 32 kHz on Timer1 (4). D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 1.0. D026 ( \uf044 I AD), Max = 3.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -. D026 ( \uf044 I AD), Conditions = VDD = 2.0V VDD = 3.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting, 1.6 \uf06d s \uf0a3 T AD \uf0a3 6.4 \uf06d s. D026 ( \uf044",
    "27.2 DC Characteristics:\nI AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 1.0. D026 ( \uf044 I AD), Max = 4.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -. D026 ( \uf044 I AD), Conditions = . D026 ( \uf044 I AD), Conditions = A/D on, not converting, 1.6 \uf06d s \uf0a3 T AD \uf0a3 6.4 \uf06d s. D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 1.0. D026 ( \uf044 I AD), Max = 8.0. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = -. D026 ( \uf044 I AD), Conditions = VDD = 5.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting, 1.6 \uf06d s \uf0a3 T AD \uf0a3 6.4 \uf06d s. D026 ( \uf044 I AD), Device = A/D Converter. D026 ( \uf044 I AD), Typ = 15.",
    "27.2 DC Characteristics:\nD026 ( \uf044 I AD), Max = 60. D026 ( \uf044 I AD), Units = \uf06d A. D026 ( \uf044 I AD), Conditions = +125 \uf0b0 C. D026 ( \uf044 I AD), Conditions = VDD = 5.0V. D026 ( \uf044 I AD), Conditions = A/D on, not converting, 1.6 \uf06d s \uf0a3 T AD \uf0a3 6.4 \uf06d s\nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "27.2 DC Characteristics:\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS, and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption. The test conditions for all IDD measurements in active operation mode are: OSC1 = external square wave, from rail-to-rail; all I/O pins are tri-stated, pulled to VDD or VSS; MCLR = VDD; WDT is enabled/disabled as specified.",
    "27.2 DC Characteristics:\n3: When operation below -10\u00b0C is expected, use the T1OSC High-Power mode, where LPT1OSC (CONFIG3H<2>) = 0 . When operation will always be above -10\u00b0C, then the low-power Timer1 oscillator may be selected.\n4: BOR and HLVD enable internal band gap reference. With both modules enabled, current consumption will be less than the sum of both specifications.",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nDC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3\uf020 TA \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3\uf020 TA \uf0a3 +125\u00b0C for extended",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nD030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Symbol = VIL. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Characteristic = Input Low Voltage I/O Ports: with TTL Buffer. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Min = VSS - VSS VSS VSS VSS VSS VSS VSS VSS. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Max = 0.15 VDD 0.8 0.2 VDD 0.3 VDD 0.8 0.2",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nVDD 0.3 VDD 0.2 VDD 0.3 0.3. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Units = V V V V V V V V V V. D030 D030A D031 D031A D031B D032 D033 D033A D033B D034, Conditions = VDD < 4.5V 4.5V \uf0a3 VDD \uf0a3\uf020 5.5V I 2 C\u2122enabled SMBus enabled HS, HSPLL modes RC, EC modes (1) XT, LP modes. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C D044, Symbol = VIH. D040 D040A D041 D041A",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nD041B D042 D043 D043A D043B D043C D044, Characteristic = T13CKI Input High Voltage I/O Ports: with TTL Buffer. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C D044, Min = 0.25 VDD + 0.8V 2.0 0.8 VDD 0.7 VDD 2.1 0.8 VDD 0.7 VDD 0.8 VDD. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C D044, Max = VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD VDD. D040 D040A D041 D041A D041B",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nD042 D043 D043A D043B D043C D044, Units = V V V V V V V V V V V. D040 D040A D041 D041A D041B D042 D043 D043A D043B D043C D044, Conditions = VDD < 4.5V 4.5V \uf0a3 VDD \uf0a3\uf020 5.5V I 2 C enabled SMBus enabled HS, HSPLL modes EC mode RC mode (1) XT, LP modes. D060, Symbol = I IL. D060, Characteristic = OSC1 T13CKI Input Leakage Current (2,3) I/O Ports. D060, Min = 1.6 1.6 -. D060, Max = \uf0b1 200 \uf0b1 50. D060, Units = nA nA \uf06d A. D060, Conditions = VDD < 5.5V VSS \u2264 VPIN \u2264 VDD, Pin",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nat VDD < 3V VSS \u2264 VPIN \u2264 VDD, Pin at. , Symbol = . , Characteristic = . , Min = - -. , Max = \uf0b1 1 \uf0b1 1. , Units = . , Conditions = high-impedance high-impedance Vss \uf0a3\uf020 VPIN \uf0a3\uf020 VDD. D061 D063, Symbol = . D061 D063, Characteristic = MCLR OSC1. D061 D063, Min = . D061 D063, Max = . D061 D063, Units = \uf06d A. D061 D063, Conditions = Vss \uf0a3\uf020 VPIN \uf0a3\uf020 VDD. D070, Symbol = I PU I PURB. D070, Characteristic = Weak Pull-up Current PORTB Weak Pull-up Current. D070, Min = 50. D070, Max = 400. D070, Units = \uf06d A. D070, Conditions = VDD = 5V,",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial)\nVPIN = VSS\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nDC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3\uf020 TA \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3\uf020 TA \uf0a3 +125\u00b0C for extended",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nD080, Symbol = VOL. D080, Characteristic = Output Low Voltage I/O Ports. D080, Min = -. D080, Max = 0.6. D080, Units = V. D080, Conditions = I OL = 8.5 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D083, Symbol = . D083, Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D083, Min = -. D083, Max = 0.6. D083, Units = V. D083, Conditions = I OL = 1.6 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D090, Symbol = VOH. D090, Characteristic = Output High Voltage (3) I/O Ports. D090, Min = VDD -",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\n0.7. D090, Max = -. D090, Units = V. D090, Conditions = I OH = -3.0 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D092, Symbol = . D092, Characteristic = OSC2/CLKO (RC, RCIO, EC, ECIO modes). D092, Min = VDD - 0.7. D092, Max = -. D092, Units = V. D092, Conditions = I OH = -1.3 mA, VDD = 4.5V, -40 \uf0b0 C to +85 \uf0b0 C. D100, Symbol = COSC2. D100, Characteristic = Capacitive Loading Specs on Output Pins OSC2 pin. D100, Min = -. D100, Max = 15. D100, Units = pF. D100, Conditions = In XT, HS",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nand LP modes when external clock is used to drive OSC1. D101, Symbol = CIO. D101, Characteristic = All I/O pins and OSC2 (in RC mode). D101, Min = -. D101, Max = 50. D101, Units = pF. D101, Conditions = To meet the AC Timing Specifications. D102, Symbol = CB. D102, Characteristic = SCL, SDA. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = I 2 C\u2122Specification",
    "27.3 DC Characteristics: PIC18F6310/6410/8310/8410 (Industrial, Extended) PIC18LF6310/6410/8310/8410 (Industrial) (Continued)\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC \u00ae  device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.",
    "Standard Operating Conditions (unless otherwise stated)\nDC Characteristics\nOperating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3 +125\u00b0C for extended",
    "Standard Operating Conditions (unless otherwise stated)\nD110, Sym = VPP. D110, Characteristic = Program Flash Memory Voltage on MCLR/VPP pin. D110, Min = 10.0. D110, Typ\u2020 = -. D110, Max = 12.0. D110, Units = V. D110, Conditions = . D113, Sym = I DDP. D113, Characteristic = Supply Current during Programming. D113, Min = -. D113, Typ\u2020 = -. D113, Max = 1. D113, Units = mA. D113, Conditions = . D130, Sym = EP. D130, Characteristic = Cell Endurance. D130, Min = -. D130, Typ\u2020 = 1K. D130, Max = -. D130, Units = E/W. D130, Conditions = -40 \uf0b0 C to +85 \uf0b0 C. D131, Sym = VPR. D131, Characteristic = VDD for Read. D131, Min = VMIN. D131, Typ\u2020 = -.",
    "Standard Operating Conditions (unless otherwise stated)\nD131, Max = 5.5. D131, Units = V. D131, Conditions = VMIN = Minimum operating voltage. D132, Sym = VIE. D132, Characteristic = VDD for Block Erase. D132, Min = 2.75. D132, Typ\u2020 = -. D132, Max = 5.5. D132, Units = V. D132, Conditions = Using ICSP port. D132A, Sym = VIW. D132A, Characteristic = VDD for Externally Timed Erase or Write. D132A, Min = 2.75. D132A, Typ\u2020 = -. D132A, Max = 5.5. D132A, Units = V. D132A, Conditions = Using ICSP port. D132B, Sym = VPEW. D132B, Characteristic = VDD for Self-timed Write. D132B, Min = VMIN. D132B, Typ\u2020 = -. D132B, Max = 5.5. D132B, Units =",
    "Standard Operating Conditions (unless otherwise stated)\nV. D132B, Conditions = VMIN = Minimum operating voltage. D133, Sym = TIE. D133, Characteristic = ICSP\u2122 Block Erase Cycle Time. D133, Min = -. D133, Typ\u2020 = 4. D133, Max = -. D133, Units = ms. D133, Conditions = VDD > 4.5V. D133A, Sym = TIW. D133A, Characteristic = ICSP Erase or Write Cycle Time (externally timed). D133A, Min = 2. D133A, Typ\u2020 = -. D133A, Max = -. D133A, Units = ms. D133A, Conditions = VDD > 4.5V. D133A, Sym = TIW. D133A, Characteristic = Self-Timed Write Cycle Time. D133A, Min = -. D133A, Typ\u2020 = 2. D133A, Max = -. D133A, Units = ms. D133A, Conditions = . D134, Sym =",
    "Standard Operating Conditions (unless otherwise stated)\nTRETD. D134, Characteristic = Characteristic Retention. D134, Min = 40. D134, Typ\u2020 = 100. D134, Max = -. D134, Units = Year. D134, Conditions = Provided no other specifications are violated\n- \u2020 Data in 'Typ' column is at 5.0V, 25\u00b0C unless otherwise stated. These parameters are for design guidance only and are not tested.",
    "TABLE 27-2: COMPARATOR SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C, unless otherwise stated.",
    "TABLE 27-2: COMPARATOR SPECIFICATIONS\nD300, Sym = VIOFF. D300, Characteristics = Input Offset Voltage. D300, Min = -. D300, Typ = \u00b15.0. D300, Max = \u00b110. D300, Units = mV. D300, Comments = . D301, Sym = VICM. D301, Characteristics = Input Common Mode Voltage. D301, Min = 0. D301, Typ = -. D301, Max = VDD - 1.5. D301, Units = V. D301, Comments = . D302, Sym = CMRR. D302, Characteristics = Common Mode Rejection Ratio. D302, Min = 55. D302, Typ = -. D302, Max = -. D302, Units = dB. D302, Comments = . D303, Sym = TRESP. D303, Characteristics = Response Time (1). D303, Min = -. D303, Typ = 150. D303, Max = 400. D303, Units = ns.",
    "TABLE 27-2: COMPARATOR SPECIFICATIONS\nD303, Comments = PIC18 F XXXX. D303A, Sym = . D303A, Characteristics = . D303A, Min = -. D303A, Typ = 150. D303A, Max = 600. D303A, Units = ns. D303A, Comments = PIC18 LF XXXX, VDD = 2.0V. D304, Sym = TMC2OV. D304, Characteristics = Comparator Mode Change to Output Valid. D304, Min = -. D304, Typ = -. D304, Max = 10. D304, Units = \uf06d s. D304, Comments = \n- Note 1: Response time measured with one comparator input at (VDD - 1.5)/2, while the other input transitions from VSS to VDD.",
    "TABLE 27-3: VOLTAGE REFERENCE SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40\u00b0C < TA < +85\u00b0C, unless otherwise stated.",
    "TABLE 27-3: VOLTAGE REFERENCE SPECIFICATIONS\nD310, Sym = VRES. D310, Characteristics = Resolution. D310, Min = VDD /24. D310, Typ = -. D310, Max = VDD /32. D310, Units = LSb. D310, Comments = . D311, Sym = VRAA. D311, Characteristics = Absolute Accuracy. D311, Min = -. D311, Typ = -. D311, Max = 1/4. D311, Units = LSb. D311, Comments = Low Range (CVRR = 1 ). , Sym = . , Characteristics = . , Min = -. , Typ = -. , Max = 1/2. , Units = LSb. , Comments = High Range (CVRR = 0 ). D312, Sym = VRUR. D312, Characteristics = Unit Resistor Value (R). D312, Min = -. D312, Typ = 2k. D312, Max = -. D312, Units = \uf057. D312, Comments = . 310, Sym",
    "TABLE 27-3: VOLTAGE REFERENCE SPECIFICATIONS\n= T SET. 310, Characteristics = Settling Time (1). 310, Min = -. 310, Typ = -. 310, Max = 10. 310, Units = \uf06d s. 310, Comments = \nNote 1: Settling time measured while CVRR = 1 and CVR<3:0> transitions from ' 0000 ' to ' 1111 '.",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 TA \uf0a3 +85\u00b0C for industrial",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0000. D420, Min = 1.80. D420, Typ\u2020 = 1.86. D420, Max = 1.91. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0001. D420, Min = 1.96. D420, Typ\u2020 = 2.06. D420, Max = 2.06. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0010. D420, Min = 2.16. D420, Typ\u2020 = 2.27. D420, Max = 2.38. D420, Units =",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nV. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0011. D420, Min = 2.35. D420, Typ\u2020 = 2.47. D420, Max = 2.59. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0100. D420, Min = 2.43. D420, Typ\u2020 = 2.56. D420, Max = 2.69. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0101. D420, Min = 2.64. D420, Typ\u2020 = 2.78. D420, Max =",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\n2.92. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0110. D420, Min = 2.75. D420, Typ\u2020 = 2.89. D420, Max = 3.03. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 0111. D420, Min = 2.95. D420, Typ\u2020 = 3.10. D420, Max = 3.26. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1000. D420, Min = 3.24. D420, Typ\u2020 =",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\n3.41. D420, Max = 3.58. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1001. D420, Min = 3.43. D420, Typ\u2020 = 3.61. D420, Max = 3.79. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1010. D420, Min = 3.53. D420, Typ\u2020 = 3.72. D420, Max = 3.91. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1011. D420, Min = 3.72.",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Typ\u2020 = 3.92. D420, Max = 4.12. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1100. D420, Min = 3.92. D420, Typ\u2020 = 4.13. D420, Max = 4.34. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1101. D420, Min = 4.11. D420, Typ\u2020 = 4.33. D420, Max = 4.55. D420, Units = V. D420, Conditions = . D420, Symbol = . D420, Characteristic = HLVDVoltageonVDD Transition. D420, Characteristic = LVV = 1110.",
    "TABLE 27-4: HIGH/LOW-VOLTAGE DETECT CHARACTERISTICS\nD420, Min = 4.41. D420, Typ\u2020 = 4.64. D420, Max = 4.87. D420, Units = V. D420, Conditions = . D420B, Symbol = VBG. D420B, Characteristic = Band Gap Reference Voltage Value. D420B, Characteristic = LVV = 1111. D420B, Min = -. D420B, Typ\u2020 = 1.20. D420B, Max = -. D420B, Units = V. D420B, Conditions = HLVDIN input external\n- \u2020 Production tested at TAMB = 25\u00b0C. Specifications over temperature limits ensured by characterization.",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\nThe  timing  parameter  symbols  have  been  created following one of the following formats:",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\nT, 1. TppS2ppS 2. TppS = T. T, 3. T CC: ST 4. Ts = . T, (I C specifications only) (I 2 C specifications only) = . F, 1. TppS2ppS 2. TppS = Frequency. F, 3. T CC: ST 4. Ts = T. F, (I C specifications only) (I 2 C specifications only) = Time. Lowercase letters (pp) and their meanings:, 1. TppS2ppS 2. TppS = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, 3. T CC: ST 4. Ts = . Lowercase letters (pp) and their meanings:, (I C specifications only) (I 2 C specifications only) = . pp, 1. TppS2ppS 2. TppS = pp. pp, 3. T CC: ST 4. Ts = . pp, (I C specifications only) (I 2 C specifications only) = . cc, 1. TppS2ppS 2. TppS = CCP1. cc, 3. T CC: ST 4. Ts =",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\nosc. cc, (I C specifications only) (I 2 C specifications only) = OSC1. ck, 1. TppS2ppS 2. TppS = CLKO. ck, 3. T CC: ST 4. Ts = rd. ck, (I C specifications only) (I 2 C specifications only) = RD. cs, 1. TppS2ppS 2. TppS = CS. cs, 3. T CC: ST 4. Ts = rw. cs, (I C specifications only) (I 2 C specifications only) = RD or WR. di, 1. TppS2ppS 2. TppS = SDI. di, 3. T CC: ST 4. Ts = sc. di, (I C specifications only) (I 2 C specifications only) = SCK. do, 1. TppS2ppS 2. TppS = SDO. do, 3. T CC: ST 4. Ts = ss. do, (I C specifications only) (I 2 C specifications only) = SS. dt, 1. TppS2ppS 2. TppS = Data in. dt, 3. T CC: ST 4. Ts =",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\nt0. dt, (I C specifications only) (I 2 C specifications only) = T0CKI. io, 1. TppS2ppS 2. TppS = I/O port. io, 3. T CC: ST 4. Ts = t1. io, (I C specifications only) (I 2 C specifications only) = T13CKI. mc, 1. TppS2ppS 2. TppS = MCLR. mc, 3. T CC: ST 4. Ts = wr. mc, (I C specifications only) (I 2 C specifications only) = WR. Uppercase letters and their meanings:, 1. TppS2ppS 2. TppS = Uppercase letters and their meanings:. Uppercase letters and their meanings:, 3. T CC: ST 4. Ts = . Uppercase letters and their meanings:, (I C specifications only) (I 2 C specifications only) = . S, 1. TppS2ppS 2. TppS = S. S, 3. T CC: ST 4. Ts = . S, (I C specifications only) (I 2 C specifications only) = . F, 1. TppS2ppS",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\n2. TppS = Fall. F, 3. T CC: ST 4. Ts = P. F, (I C specifications only) (I 2 C specifications only) = Period. H, 1. TppS2ppS 2. TppS = High. H, 3. T CC: ST 4. Ts = R. H, (I C specifications only) (I 2 C specifications only) = Rise. I, 1. TppS2ppS 2. TppS = Invalid (High-impedance). I, 3. T CC: ST 4. Ts = V. I, (I C specifications only) (I 2 C specifications only) = Valid. L, 1. TppS2ppS 2. TppS = Low. L, 3. T CC: ST 4. Ts = Z. L, (I C specifications only) (I 2 C specifications only) = High-impedance. I 2 C only, 1. TppS2ppS 2. TppS = I 2 C only. I 2 C only, 3. T CC: ST 4. Ts = . I 2 C only, (I C specifications only) (I 2 C specifications only) = .",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\nAA, 1. TppS2ppS 2. TppS = output access. AA, 3. T CC: ST 4. Ts = High. AA, (I C specifications only) (I 2 C specifications only) = High. BUF, 1. TppS2ppS 2. TppS = Bus free. BUF, 3. T CC: ST 4. Ts = Low. BUF, (I C specifications only) (I 2 C specifications only) = Low. T CC: ST (I 2 C specifications only), 1. TppS2ppS 2. TppS = T CC: ST (I 2 C specifications only). T CC: ST (I 2 C specifications only), 3. T CC: ST 4. Ts = . T CC: ST (I 2 C specifications only), (I C specifications only) (I 2 C specifications only) = . CC, 1. TppS2ppS 2. TppS = CC. CC, 3. T CC: ST 4. Ts = . CC, (I C specifications only) (I 2 C specifications only) = . HD, 1. TppS2ppS 2. TppS = Hold. HD,",
    "27.4.1 TIMING PARAMETER SYMBOLOGY\n3. T CC: ST 4. Ts = SU. HD, (I C specifications only) (I 2 C specifications only) = Setup. ST, 1. TppS2ppS 2. TppS = ST. ST, 3. T CC: ST 4. Ts = ST. ST, (I C specifications only) (I 2 C specifications only) = ST. DAT, 1. TppS2ppS 2. TppS = DATA input hold. DAT, 3. T CC: ST 4. Ts = STO. DAT, (I C specifications only) (I 2 C specifications only) = Stop condition. STA, 1. TppS2ppS 2. TppS = Start condition. STA, 3. T CC: ST 4. Ts = . STA, (I C specifications only) (I 2 C specifications only) = ",
    "27.4.2 TIMING CONDITIONS\nThe temperature and voltages specified in Table 27-5 apply  to  all timing  specifications  unless  otherwise noted. Figure 27-5 specifies the load conditions for the timing specifications.\nNote:\nBecause of space limitations, the generic terms 'PIC18FXXXX' and\n'PIC18LFXXXX' are used throughout this section to refer to the PIC18F6310/6410/ 8310/8410  and PIC18LF6310/6410/8310/ 8410  families  of  devices  specifically  and only those devices.",
    "TABLE 27-5: TEMPERATURE AND VOLTAGE SPECIFICATIONS - AC\nAC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40\u00b0C\n\uf0a3 TA \uf0a3\uf020 +85\u00b0C for industrial\n-40\u00b0C \uf0a3 TA \uf0a3\uf020 +125\u00b0C for extended\nOperating voltage VDD range as described in DC spec, Section 27.1 and Section 27.3 .\nLF parts operate for industrial temperatures only.",
    "FIGURE 27-5: LOAD CONDITIONS FOR DEVICE TIMING SPECIFICATIONS\nVDD /2 CL RL Pin VSS RL CL, Load Condition 2 = Pin VSS CL",
    "TABLE 27-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n1A, Symbol = FOSC. 1A, Characteristic = External CLKI Frequency (1). 1A, Min = DC DC DC DC DC 0.1 4 4 5 40 32. 1A, Max = 1 25 31.25 40 4 4 25 10 200 - - - -. 1A, Units = MHz MHz kHz MHz MHz MHz MHz MHz kHz ns ns \uf06d s ns ns \uf06d s. 1A, Conditions = XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode EC Oscillator mode RC Oscillator mode XT Oscillator mode HS Oscillator mode HS + PLL Oscillator mode LP Oscillator mode XT, RC Oscillator mode HS Oscillator mode LP Oscillator mode. 1, Symbol = T OSC. 1, Characteristic = External CLKI Period (1) Oscillator Period (1). 1, Min = 1000 25 250 0.25 40 100. 1, Max = - 10 250 250. 1, Units = ns. 1, Conditions = EC Oscillator mode RC Oscillator mode XT Oscillator mode HS",
    "TABLE 27-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nOscillator mode. , Symbol = T CY. , Characteristic = Instruction Cycle Time. , Min = 5 100. , Max = 200 -. , Units = \uf06d s ns. , Conditions = LP Oscillator mode T CY = 4/F OSC, Industrial. 2, Symbol = . 2, Characteristic = (1). 2, Min = 160 30. 2, Max = - - -. 2, Units = ns. 2, Conditions = T CY = 4/F OSC, Extended. 3 4, Symbol = T OSL, T OSH. 3 4, Characteristic = External Clock in (OSC1) High or Low Time External Clock in (OSC1) Rise or Fall Time. 3 4, Min = 2.5 10 - -. 3 4, Max = - 20 50. 3 4, Units = ns \uf06d s ns ns ns. 3 4, Conditions = XT Oscillator mode LP Oscillator mode HS Oscillator mode XT Oscillator mode LP Oscillator mode. , Symbol = T OSR, T OSF. , Characteristic = . , Min = . , Max = . , Units = . ,",
    "TABLE 27-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nConditions = . , Symbol = . , Characteristic = . , Min = -. , Max = 7.5. , Units = ns. , Conditions = HS Oscillator mode\n- Note 1: Instruction cycle period (TCY) equals four times the input oscillator time base period for all configurations except PLL. All specified values are based on characterization data for that particular oscillator type under standard operating conditions with the device executing code. Exceeding these specified limits may result in an unstable oscillator operation and/or higher than expected current consumption. All devices are tested to operate at 'min.' values with an external clock applied to the OSC1/CLKI pin. When an external clock input is used, the 'max.' cycle time limit is 'DC' (no clock) for all devices.",
    "TABLE 27-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF10, Sym = FOSC. F10, Characteristic = Oscillator Frequency Range. F10, Min = 4. F10, Typ\u2020 = -. F10, Max = 10. F10, Units = MHz. F10, Conditions = HS mode only. F11, Sym = FSYS. F11, Characteristic = On-Chip VCO System Frequency. F11, Min = 16. F11, Typ\u2020 = -. F11, Max = 40. F11, Units = MHz. F11, Conditions = HS mode only. F12, Sym = t rc. F12, Characteristic = PLL Start-up Time (Lock Time). F12, Min = -. F12, Typ\u2020 = -. F12, Max = 2. F12, Units = ms. F12, Conditions = . F13, Sym = \uf044 CLK. F13, Characteristic = CLKO Stability (Jitter). F13, Min = -2. F13, Typ\u2020 = -. F13, Max = +2.",
    "TABLE 27-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF13, Units = %. F13, Conditions = \n- \u2020 Data in 'Typ' column is at 5V, 25 C, unless otherwise stated. These parameters are for design guidance \uf0b0 only and are not tested.",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n, PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +/-1.",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n, Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nMHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n-40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n+85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nMHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz,",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 10. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n-40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n(1) = PIC18F6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -2. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 2. , Standard Operating",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nConditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +25\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nT A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18F6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nT A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 5. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n+85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n@Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18F6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +/-1. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nMHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 10. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nT A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nkHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n-40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq =",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\ntemperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nstated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3 V. , PIC18LF6310/6410/8310/8410 (Industrial).PIC18F6310/6410/8310/8410 (Industrial).Device.Accuracy @Freq = 8 MHz, 4 MHz, 2",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nMHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18F6310/6410/8310/8410. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Min.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 26.562. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Typ.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.Standard Operating Conditions Operating temperature.Max.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nkHz, 125 kHz (1) = 35.938. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Units.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = kHz. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended..Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40\u00b0C to +85\u00b0C. , Standard Operating Conditions (unless otherwise stated) Operating temperature -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for",
    "PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nindustrial.(unless otherwise stated) -40\u00b0C \uf0a3 T A \uf0a3 +85\u00b0C for industrial -40\u00b0C \uf0a3 T A \uf0a3 +125\u00b0C for extended.Conditions.Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5 V\n- Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: Frequency calibrated at 25\u00b0C. OSCTUNE register can be used to compensate for temperature drift.\n2: INTRC frequency after calibration.",
    "TABLE 27-9: CLKO AND I/O TIMING REQUIREMENTS\n10, Symbol = T OSH2CKL. 10, Characteristic = OSC1 \uf0ad to CLKO \uf0af. 10, Characteristic = OSC1 \uf0ad to CLKO \uf0af. 10, Min = -. 10, Typ = 75. 10, Max = 200. 10, Units = ns. 10, Conditions = (Note 1). 11, Symbol = T OSH2CKH. 11, Characteristic = OSC1 \uf0ad to CLKO \uf0ad. 11, Characteristic = OSC1 \uf0ad to CLKO \uf0ad. 11, Min = -. 11, Typ = 75. 11, Max = 200. 11, Units = ns. 11, Conditions = (Note 1). 12, Symbol = T CKR. 12, Characteristic = CLKO Rise Time. 12, Characteristic = CLKO Rise Time. 12, Min = -. 12, Typ = 35. 12, Max = 100. 12, Units = ns. 12, Conditions = (Note 1). 13, Symbol = T CKF. 13, Characteristic = CLKO Fall Time. 13, Characteristic = CLKO Fall Time. 13, Min = -. 13, Typ = 35. 13, Max = 100. 13, Units =",
    "TABLE 27-9: CLKO AND I/O TIMING REQUIREMENTS\nns. 13, Conditions = (Note 1). 14, Symbol = T CKL2IO V. 14, Characteristic = CLKO \uf0af to Port Out Valid. 14, Characteristic = CLKO \uf0af to Port Out Valid. 14, Min = -. 14, Typ = -. 14, Max = 0.5 T CY + 20. 14, Units = ns. 14, Conditions = (Note 1). 15, Symbol = TIO V2CKH. 15, Characteristic = Port In Valid before CLKO \uf0ad. 15, Characteristic = Port In Valid before CLKO \uf0ad. 15, Min = 0.25 T CY + 25. 15, Typ = -. 15, Max = -. 15, Units = ns. 15, Conditions = (Note 1). 16, Symbol = T CKH2IO I. 16, Characteristic = Port In Hold after CLKO \uf0ad. 16, Characteristic = Port In Hold after CLKO \uf0ad. 16, Min = 0. 16, Typ = -. 16, Max = -. 16, Units = ns. 16, Conditions = (Note 1). 17, Symbol = T OSH2IO V. 17, Characteristic = OSC1 \uf0ad",
    "TABLE 27-9: CLKO AND I/O TIMING REQUIREMENTS\n(Q1 cycle) to Port Out Valid. 17, Characteristic = OSC1 \uf0ad (Q1 cycle) to Port Out Valid. 17, Min = -. 17, Typ = 50. 17, Max = 150. 17, Units = ns. 17, Conditions = . 18, Symbol = T OSH2IO I. 18, Characteristic = OSC1 \uf0ad (Q2 cycle) to. 18, Characteristic = PIC18 F XXXX. 18, Min = 100. 18, Typ = -. 18, Max = -. 18, Units = ns. 18, Conditions = . 18A, Symbol = . 18A, Characteristic = Port Input Invalid (I/O in hold time). 18A, Characteristic = PIC18 LF XXXX. 18A, Min = 200. 18A, Typ = -. 18A, Max = -. 18A, Units = ns. 18A, Conditions = VDD = 2.0V. 19, Symbol = TIO V2OSH. 19, Characteristic = Port Input Valid to OSC1 \uf0ad\uf020 (I/O in setup time). 19, Characteristic = Port Input Valid to OSC1 \uf0ad\uf020",
    "TABLE 27-9: CLKO AND I/O TIMING REQUIREMENTS\n(I/O in setup time). 19, Min = 0. 19, Typ = -. 19, Max = -. 19, Units = ns. 19, Conditions = . 20, Symbol = TIO R. 20, Characteristic = Port Output Rise Time. 20, Characteristic = PIC18 F XXXX. 20, Min = -. 20, Typ = 10. 20, Max = 25. 20, Units = ns. 20, Conditions = . 20A, Symbol = . 20A, Characteristic = . 20A, Characteristic = PIC18 LF XXXX. 20A, Min = -. 20A, Typ = -. 20A, Max = 60. 20A, Units = ns. 20A, Conditions = VDD = 2.0V. 21, Symbol = TIO F. 21, Characteristic = Port Output Fall Time. 21, Characteristic = PIC18 F XXXX. 21, Min = -. 21, Typ = 10. 21, Max = 25. 21, Units = ns. 21, Conditions = . 21A, Symbol = . 21A, Characteristic = . 21A, Characteristic = PIC18 LF XXXX.",
    "TABLE 27-9: CLKO AND I/O TIMING REQUIREMENTS\n21A, Min = -. 21A, Typ = -. 21A, Max = 60. 21A, Units = ns. 21A, Conditions = VDD = 2.0V. 22\u2020, Symbol = TINP. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Characteristic = INTx pin High or Low Time. 22\u2020, Min = T CY. 22\u2020, Typ = -. 22\u2020, Max = -. 22\u2020, Units = ns. 22\u2020, Conditions = . 23\u2020, Symbol = TRBP. 23\u2020, Characteristic = RB<7:4> Change INTx High or Low Time. 23\u2020, Characteristic = RB<7:4> Change INTx High or Low Time. 23\u2020, Min = T CY. 23\u2020, Typ = -. 23\u2020, Max = -. 23\u2020, Units = ns. 23\u2020, Conditions = \n\u2020 These parameters are asynchronous events not related to any internal clock edges.\nNote 1: Measurements are taken in RC mode, where CLKO output is 4 x TOSC.",
    "TABLE 27-10: PROGRAM MEMORY READ TIMING REQUIREMENTS\n150, Symbol = TadV2alL. 150, Characteristics = Address Out Valid to ALE \uf0af\uf020 (address setup time). 150, Min = 0.25 T CY - 10. 150, Typ = -. 150, Max = -. 150, Units = ns. 151, Symbol = TalL2adl. 151, Characteristics = ALE \uf0af to Address Out Invalid (address hold time). 151, Min = 5. 151, Typ = -. 151, Max = -. 151, Units = ns. 155, Symbol = TalL2oeL. 155, Characteristics = ALE \uf020\uf0af to OE \uf0af. 155, Min = 10. 155, Typ = 0.125 T CY. 155, Max = -. 155, Units = ns. 160, Symbol = TadZ2oeL. 160, Characteristics = AD high-Z to OE \uf0af\uf020 (bus release to OE). 160, Min = 0. 160, Typ = -. 160, Max = -. 160, Units = ns. 161, Symbol = ToeH2adD. 161, Characteristics = OE \uf0ad to AD Driven. 161, Min = 0.125 T CY - 5. 161, Typ = -. 161,",
    "TABLE 27-10: PROGRAM MEMORY READ TIMING REQUIREMENTS\nMax = -. 161, Units = ns. 162, Symbol = TadV2oeH. 162, Characteristics = LS Data Valid before OE \uf0ad\uf020 (data setup time). 162, Min = 20. 162, Typ = -. 162, Max = -. 162, Units = ns. 163, Symbol = ToeH2adl. 163, Characteristics = OE \uf0ad to Data In Invalid (data hold time). 163, Min = 0. 163, Typ = -. 163, Max = -. 163, Units = ns. 164, Symbol = TalH2alL. 164, Characteristics = ALE Pulse Width. 164, Min = -. 164, Typ = T CY. 164, Max = -. 164, Units = ns. 165, Symbol = ToeL2oeH. 165, Characteristics = OE Pulse Width. 165, Min = 0.5 T CY - 5. 165, Typ = 0.5 T CY. 165, Max = -. 165, Units = ns. 166, Symbol = TalH2alH. 166, Characteristics = ALE \uf0ad to ALE \uf0ad (cycle time). 166, Min = -. 166, Typ = 0.25",
    "TABLE 27-10: PROGRAM MEMORY READ TIMING REQUIREMENTS\nT CY. 166, Max = -. 166, Units = ns. 167, Symbol = Tacc. 167, Characteristics = Address Valid to Data Valid. 167, Min = 0.75 T CY - 25. 167, Typ = -. 167, Max = -. 167, Units = ns. 168, Symbol = Toe. 168, Characteristics = OE \uf0af to Data Valid. 168, Min = . 168, Typ = -. 168, Max = 0.5 T CY - 25. 168, Units = ns. 169, Symbol = TalL2oeH. 169, Characteristics = ALE \uf020\uf0af to OE \uf0ad. 169, Min = 0.625 T CY - 10. 169, Typ = -. 169, Max = 0.625 T CY + 10. 169, Units = ns. 171, Symbol = TalH2csL. 171, Characteristics = Chip Enable Active to ALE \uf0af. 171, Min = 0.25 T CY - 20. 171, Typ = -. 171, Max = -. 171, Units = ns. 171A, Symbol = TubL2oeH. 171A, Characteristics = AD Valid to Chip Enable Active. 171A, Min = -.",
    "TABLE 27-10: PROGRAM MEMORY READ TIMING REQUIREMENTS\n171A, Typ = -. 171A, Max = 10. 171A, Units = ns",
    "TABLE 27-11: PROGRAM MEMORY WRITE TIMING REQUIREMENTS\n150, Symbol = TadV2alL. 150, Characteristics = Address Out Valid to ALE \uf0af\uf020 (address setup time). 150, Min = 0.25 T CY - 10. 150, Typ = -. 150, Max = -. 150, Units = ns. 151, Symbol = TalL2adl. 151, Characteristics = ALE \uf0af to Address Out Invalid (address hold time). 151, Min = 5. 151, Typ = -. 151, Max = -. 151, Units = ns. 153, Symbol = TwrH2adl. 153, Characteristics = WRn \uf0ad to Data Out Invalid (data hold time). 153, Min = 5. 153, Typ = -. 153, Max = -. 153, Units = ns. 154, Symbol = TwrL. 154, Characteristics = WRn Pulse Width. 154, Min = 0.5 T CY - 5. 154, Typ = 0.5 T CY. 154, Max = -. 154, Units = ns. 156, Symbol = TadV2wrH. 156, Characteristics = Data Valid before WRn \uf0ad\uf020 (data setup time). 156, Min = 0.5 T CY - 10.",
    "TABLE 27-11: PROGRAM MEMORY WRITE TIMING REQUIREMENTS\n156, Typ = -. 156, Max = -. 156, Units = ns. 157, Symbol = TbsV2wrL. 157, Characteristics = Byte Select Valid before WRn \uf0af\uf020 (byte select setup time). 157, Min = 0.25 T CY. 157, Typ = -. 157, Max = -. 157, Units = ns. 157A, Symbol = TwrH2bsI. 157A, Characteristics = WRn \uf0ad to Byte Select Invalid (byte select hold time). 157A, Min = 0.125 T CY - 5. 157A, Typ = -. 157A, Max = -. 157A, Units = ns. 166, Symbol = TalH2alH. 166, Characteristics = ALE \uf0ad to ALE \uf0ad (cycle time). 166, Min = -. 166, Typ = 0.25 T CY. 166, Max = -. 166, Units = ns. 171, Symbol = TalH2csL. 171, Characteristics = Chip Enable Active to ALE \uf0af. 171, Min = 0.25 T CY - 20. 171, Typ = -. 171, Max = -. 171, Units = ns. 171A, Symbol",
    "TABLE 27-11: PROGRAM MEMORY WRITE TIMING REQUIREMENTS\n= TubL2oeH. 171A, Characteristics = AD Valid to Chip Enable Active. 171A, Min = -. 171A, Typ = -. 171A, Max = 10. 171A, Units = ns",
    "FIGURE 27-11: BROWN-OUT RESET TIMING\nTABLE 27-12: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS",
    "FIGURE 27-11: BROWN-OUT RESET TIMING\n30, Symbol = TMCL. 30, Characteristic = MCLR Pulse Width (low). 30, Min = 2. 30, Typ = -. 30, Max = -. 30, Units = \uf06d s. 30, Conditions = . 31, Symbol = TWDT. 31, Characteristic = Watchdog Timer Time-out Period (no postscaler). 31, Min = 3.4. 31, Typ = 4.1. 31, Max = 4.71. 31, Units = ms. 31, Conditions = . 32, Symbol = T OST. 32, Characteristic = Oscillator Start-up Timer Period. 32, Min = 1024 T OSC. 32, Typ = -. 32, Max = 1024 T OSC. 32, Units = -. 32, Conditions = T OSC = OSC1 period. 33, Symbol = TPWRT. 33, Characteristic = Power-up Timer Period. 33, Min = 55.5. 33, Typ = 65.5. 33, Max = 75. 33, Units = ms. 33, Conditions = . 34, Symbol = T IOZ. 34, Characteristic =",
    "FIGURE 27-11: BROWN-OUT RESET TIMING\nI/O High-Impedance from MCLR Low or Watchdog Timer Reset. 34, Min = -. 34, Typ = 2. 34, Max = -. 34, Units = \uf06d s. 34, Conditions = . 35, Symbol = TBOR. 35, Characteristic = Brown-out Reset Pulse Width. 35, Min = 200. 35, Typ = -. 35, Max = -. 35, Units = \uf06d s. 35, Conditions = VDD \uf0a3 BVDD (see D005). 36, Symbol = TIRVST. 36, Characteristic = Time for Internal Reference Voltage to become stable. 36, Min = -. 36, Typ = 20. 36, Max = 50. 36, Units = \uf06d s. 36, Conditions = . 37, Symbol = TLVD. 37, Characteristic = Low-Voltage Detect Pulse Width. 37, Min = 200. 37, Typ = -. 37, Max = -. 37, Units = \uf06d s. 37, Conditions = VDD \uf0a3 VLVD. 38, Symbol = T CSD. 38, Characteristic = CPU Start-up Time. 38, Min = -. 38, Typ = 10. 38, Max",
    "FIGURE 27-11: BROWN-OUT RESET TIMING\n= -. 38, Units = \uf06d s. 38, Conditions = . 39, Symbol = TIOBST. 39, Characteristic = Time for INTRC Block to stabilize. 39, Min = -. 39, Typ = 1. 39, Max = -. 39, Units = ms. 39, Conditions = ",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n40, Symbol = TT0H. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = No prescaler. 40, Min = 0.5 T CY + 20. 40, Max = -. 40, Units = ns. 40, Conditions = . 40, Symbol = TT0H. 40, Characteristic = . 40, Characteristic = . 40, Characteristic = With prescaler. 40, Min = 10. 40, Max = -. 40, Units = ns. 40, Conditions = . 41, Symbol = TT0L. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = No prescaler. 41, Min = 0.5 T CY + 20. 41, Max = -. 41, Units = ns. 41, Conditions = . 41, Symbol = TT0L. 41, Characteristic = . 41, Characteristic = . 41, Characteristic = With prescaler. 41, Min = 10. 41, Max = -. 41, Units = ns. 41, Conditions = . 42, Symbol =",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nTT0P. 42, Characteristic = T0CKI Period. 42, Characteristic = T0CKI Period. 42, Characteristic = No prescaler. 42, Min = T CY + 10. 42, Max = -. 42, Units = ns. 42, Conditions = . 42, Symbol = TT0P. 42, Characteristic = . 42, Characteristic = . 42, Characteristic = With prescaler. 42, Min = Greater of: 20 ns or (T CY + 40)/N. 42, Max = -. 42, Units = ns. 42, Conditions = N = prescale value (1, 2, 4,..., 256). 45, Symbol = TT1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, no prescaler. 45, Characteristic = Synchronous, no prescaler. 45, Min = 0.5 T CY + 20. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = TT1H. 45, Characteristic = T13CKI High Time. 45, Characteristic =",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nSynchronous, with prescaler. 45, Characteristic = PIC18 F XXXX. 45, Min = 10. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 45, Symbol = TT1H. 45, Characteristic = T13CKI High Time. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 LF XXXX. 45, Min = 25. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = TT1H. 45, Characteristic = . 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 F XXXX. 45, Min = 30. 45, Max = -. 45, Units = ns. 45, Conditions = . 45, Symbol = TT1H. 45, Characteristic = . 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 LF XXXX. 45, Min = 50. 45, Max = -. 45, Units = ns. 45, Conditions = VDD = 2.0V. 46, Symbol =",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nTT1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, no prescaler. 46, Characteristic = Synchronous, no prescaler. 46, Min = 0.5 T CY + 5. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 F XXXX. 46, Min = 10. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T13CKI Low Time. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 LF XXXX. 46, Min = 25. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 46, Symbol = TT1L. 46, Characteristic = . 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 F XXXX.",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n46, Min = 30. 46, Max = -. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = . 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 LF XXXX. 46, Min = 50. 46, Max = -. 46, Units = ns. 46, Conditions = VDD = 2.0V. 47, Symbol = TT1P. 47, Characteristic = T13CKI Input Period. 47, Characteristic = Synchronous. 47, Characteristic = Synchronous. 47, Min = Greater of: 20 ns or (T CY + 40)/N. 47, Max = -. 47, Units = ns. 47, Conditions = N = prescale value (1, 2, 4, 8). 47, Symbol = TT1P. 47, Characteristic = . 47, Characteristic = Asynchronous. 47, Characteristic = Asynchronous. 47, Min = 60. 47, Max = -. 47, Units = ns. 47, Conditions = . , Symbol = FT1. , Characteristic = T13CKI",
    "TABLE 27-13: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nOscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Characteristic = T13CKI Oscillator Input Frequency Range. , Min = DC. , Max = 50. , Units = kHz. , Conditions = . 48, Symbol = T CKE 2TMRI. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Characteristic = Delay from External T13CKI Clock Edge to Timer Increment. 48, Min = 2 T OSC. 48, Max = 7 T OSC. 48, Units = -. 48, Conditions = ",
    "TABLE 27-14: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n50, Symbol = T CCL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = No prescaler. 50, Characteristic = No prescaler. 50, Min = 0.5 T CY + 20. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = T CCL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 F XXXX. 50, Min = 10. 50, Max = -. 50, Units = ns. 50, Conditions = . 50, Symbol = T CCL. 50, Characteristic = CCPxInputLow Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 LF XXXX. 50, Min = 20. 50, Max = -. 50, Units = ns. 50, Conditions = VDD = 2.0V. 51, Symbol = T CCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = No prescaler. 51, Characteristic = No prescaler. 51, Min =",
    "TABLE 27-14: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n0.5 T CY + 20. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = T CCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 F XXXX. 51, Min = 10. 51, Max = -. 51, Units = ns. 51, Conditions = . 51, Symbol = T CCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 LF XXXX. 51, Min = 20. 51, Max = -. 51, Units = ns. 51, Conditions = VDD = 2.0V. 52, Symbol = T CCP. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Min = 3 T CY + 40 N. 52, Max = -. 52, Units = ns. 52, Conditions = N = prescale value (1, 4 or 16). 53, Symbol",
    "TABLE 27-14: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n= T CCR. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = PIC18 F XXXX. 53, Min = -. 53, Max = 25. 53, Units = ns. 53, Conditions = . 53, Symbol = T CCR. 53, Characteristic = . 53, Characteristic = . 53, Characteristic = PIC18 LF XXXX. 53, Min = -. 53, Max = 45. 53, Units = ns. 53, Conditions = VDD = 2.0V. 54, Symbol = T CCF. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = PIC18 F XXXX. 54, Min = -. 54, Max = 25. 54, Units = ns. 54, Conditions = . 54, Symbol = T CCF. 54, Characteristic = . 54, Characteristic = . 54, Characteristic = PIC18 LF XXXX. 54, Min = -. 54, Max = 45. 54, Units = ns. 54, Conditions = VDD =",
    "TABLE 27-14: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n2.0V",
    "FIGURE 27-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n)\nTABLE 27-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )",
    "FIGURE 27-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n70, Symbol = T SS L2SCH, T SS L2SCL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = T CY. 70, Max = -. 70, Units = ns. 70, Conditions = . 73, Symbol = TDI V2SCH, TDI V2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = -. 73, Units = ns. 73, Conditions = . 74, Symbol = T SCH2DI L, T SCL2DI L. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX.",
    "FIGURE 27-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = T SCR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = T SCR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD =",
    "FIGURE 27-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n2.0V. 79, Symbol = T SCF. 79, Characteristic = SCK Output Fall Time. 79, Characteristic = SCK Output Fall Time. 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = T SCH2DOV, T SCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = T SCH2DOV, T SCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V",
    "FIGURE 27-15: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n)\nTABLE 27-16: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1\n)",
    "FIGURE 27-15: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n73, Symbol = TDI V2SCH, TDI V2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 74, Symbol = T SCH2DI L, T SCL2DI L. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units",
    "FIGURE 27-15: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n= ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = T SCR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 F XXXX. 78, Min = -. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = T SCR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 LF XXXX. 78, Min = -. 78, Max = 45. 78, Units = ns. 78, Conditions = VDD = 2.0V. 79, Symbol = T SCF. 79, Characteristic = SCK Output Fall Time. 79, Characteristic = SCK Output Fall Time. 79, Min = -. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = T SCH2DOV, T",
    "FIGURE 27-15: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\nSCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = T SCH2DOV, T SCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 81, Symbol = TDOV2SCH, TDOV2SCL. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Min = T CY. 81, Max = -. 81, Units = ns. 81, Conditions = ",
    "FIGURE 27-16: EXAMPLE SPI SLAVE MODE TIMING (CKE = 0\n)",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n)",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n70, Symbol = T SS L2SCH, T SS L2SCL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = T CY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71, Symbol = T SCH. 71, Characteristic = SCK Input High Time. 71, Characteristic = Continuous. 71, Min = 1.25 T CY + 30. 71, Max = -. 71, Units = ns. 71, Conditions = . 71A, Symbol = T SCH. 71A, Characteristic = SCK Input High Time. 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = -. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = T SCL. 72, Characteristic = SCK Input Low Time. 72, Characteristic = Continuous. 72, Min = 1.25 T CY + 30. 72, Max = -. 72, Units = ns. 72, Conditions = . 72A, Symbol =",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nT SCL. 72A, Characteristic = SCK Input Low Time. 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TDI V2SCH, TDI V2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 20. 73, Max = -. 73, Units = ns. 73, Conditions = . 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 T CY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = T SCH2DI L, T SCL2DI L. 74, Characteristic = Hold Time of",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nSDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX. 75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = T SS H2DOZ. 77, Characteristic = SS \uf0ad to SDO Output High-impedance. 77,",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nCharacteristic = SS \uf0ad to SDO Output High-impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 80, Symbol = T SC H2DOV,. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XXXX. 80, Min = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = T SC H2DOV,. 80, Characteristic = T SC L2 DOV. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 83, Symbol = T SC H2SSH, T SC L2 SS H. 83, Characteristic = SS \uf0ad after SCK Edge. 83, Characteristic = SS \uf0ad after SCK Edge. 83, Min = 1.5 T CY + 40. 83, Max = -. 83, Units = ns. 83, Conditions",
    "TABLE 27-17: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n= \nNote 1:\nRequires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "FIGURE 27-17: EXAMPLE SPI SLAVE MODE TIMING (CKE = 1\n)",
    "TABLE 27-18: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n)\n70, Symbol = T SS L2SCH, T SS L2SCL. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Characteristic = SS \uf0af to SCK \uf0af or SCK \uf0ad Input. 70, Min = T CY. 70, Max = -. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = T SCH. 71 71A, Characteristic = SCK Input High Time. 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 T CY + 30. 71 71A, Max = -. 71 71A, Units = ns. 71 71A, Conditions = . , Symbol = T SCH. , Characteristic = SCK Input High Time. , Characteristic = Single Byte. , Min = 40. , Max = -. , Units = ns. , Conditions = (Note 1). 72, Symbol = T SCL. 72, Characteristic = SCK Input Low Time. 72, Characteristic = Continuous. 72, Min = 1.25 T CY + 30. 72, Max = -. 72, Units = ns. 72, Conditions = . 72A, Symbol = T",
    "TABLE 27-18: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nSCL. 72A, Characteristic = SCK Input Low Time. 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = -. 72A, Units = ns. 72A, Conditions = (Note 1). 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 T CY + 40. 73A, Max = -. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = T SCH2DI L, T SCL2DI L. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 40. 74, Max = -. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XXXX.",
    "TABLE 27-18: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n75, Min = -. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XXXX. 75, Min = -. 75, Max = 45. 75, Units = ns. 75, Conditions = VDD = 2.0V. 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = -. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = T SS H2DOZ. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Characteristic = SS \uf0ad to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 80, Symbol = T SC H2DOV, T SC L2 DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XXXX. 80,",
    "TABLE 27-18: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nMin = -. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = T SC H2DOV, T SC L2 DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XXXX. 80, Min = -. 80, Max = 100. 80, Units = ns. 80, Conditions = VDD = 2.0V. 82, Symbol = T SS L2 DOV. 82, Characteristic = SDO Data Output Valid after SS \uf0af Edge. 82, Characteristic = PIC18 F XXXX. 82, Min = -. 82, Max = 50. 82, Units = ns. 82, Conditions = . 82, Symbol = T SS L2 DOV. 82, Characteristic = SDO Data Output Valid after SS \uf0af Edge. 82, Characteristic = PIC18 LF XXXX. 82, Min = -. 82, Max = 100. 82, Units = ns. 82, Conditions = VDD = 2.0V. 83, Symbol = T SC H2SSH, T SC L2 SS H. 83, Characteristic = SS \uf0ad after",
    "TABLE 27-18: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nSCK Edge. 83, Characteristic = SS \uf0ad after SCK Edge. 83, Min = 1.5 T CY + 40. 83, Max = -. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter #73A.\n2: Only if Parameter #71A and #72A are used.",
    "TABLE 27-19: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\n90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4700. 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. , Symbol = . , Characteristic = . , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 91, Symbol = THD: STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 4000. 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first. , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = clock pulse is generated. 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 4700. 92, Max = -. 92, Units = ns. 92, Conditions = . , Symbol = . ,",
    "TABLE 27-19: I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\nCharacteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = . 93, Symbol = THD: STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 4000. 93, Max = -. 93, Units = ns. 93, Conditions = . , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = -. , Units = . , Conditions = ",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 4.0. 100, Max = -. 100, Units = \uf06d s. 100, Conditions = PIC18FXXXX must operate at a minimum of 1.5 MHz. 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 0.6. 100, Max = -. 100, Units = \uf06d s. 100, Conditions = PIC18FXXXX must operate at a minimum of 10 MHz. 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = MSSP Module. 100, Min = 1.5 T CY. 100, Max = -. 100, Units = . 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 4.7. 101, Max = -. 101, Units = \uf06d s. 101, Conditions = PIC18FXXXX must operate at a minimum of 1.5 MHz. 101, Symbol = TLOW.",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 1.3. 101, Max = -. 101, Units = \uf06d s. 101, Conditions = PIC18FXXXX must operate at a minimum of 10 MHz. 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = MSSP Module. 101, Min = 1.5 T CY. 101, Max = -. 101, Units = . 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic =",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = . 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4.7. 90, Max = -. 90, Units = \uf06d s. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 0.6. 90, Max = -. 90, Units = \uf06d s. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min =",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n4.0. 91, Max = -. 91, Units = \uf06d s. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 0.6. 91, Max = -. 91, Units = \uf06d s. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = \uf06d s. 106, Conditions = . 107, Symbol = T SU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n= (Note 2). 107, Symbol = T SU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 4.7. 92, Max = -. 92, Units = \uf06d s. 92, Conditions = . 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 0.6. 92, Max = -. 92, Units = \uf06d s. 92, Conditions = . 109, Symbol = T AA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = (Note 1). 109, Symbol = T AA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode.",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\n109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = . 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = \uf06d s. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = \uf06d s. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 27-20: I 2 C\u2122 BUS DATA REQUIREMENTS (SLAVE MODE)\nNote 1: As a transmitter, the device must provide this internal minimum delay time to bridge the undefined region (min. 300 ns) of the falling edge of SCL to avoid unintended generation of Start or Stop conditions.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but the requirement, TSU:DAT \uf0b3 250 ns, must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, TR max. + TSU:DAT = 1000 + 250 = 1250 ns (according to the Standard mode I 2 C bus specification), before the SCL line\nis released.",
    "TABLE 27-21: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.",
    "TABLE 27-21: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = T SU: STA. 90, Characteristic = . 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = T SU: STA. 90, Characteristic = . 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 2(T OSC)(BRG + 1).",
    "TABLE 27-21: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = . 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = T SU: STO. 92, Characteristic",
    "TABLE 27-21: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n= Setup Time. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 92, Symbol = T SU: STO. 92, Characteristic = . 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = . 92, Conditions = ns. 93, Symbol = THD: STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD: STO. 93, Characteristic = Hold Time. 93, Characteristic = 400 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = . 93, Symbol = THD: STO. 93, Characteristic =",
    "TABLE 27-21: MASTER SSP I 2 C\u2122 BUS START/STOP BITS REQUIREMENTS\n. 93, Characteristic = 1 MHz mode (1). 93, Min = 2(T OSC)(BRG + 1). 93, Max = -. 93, Units = ns. 93, Conditions = ",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 1 MHz mode (1). 100, Min = 2(T OSC)(BRG + 1). 100, Max = -. 100, Units = ms. 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nTime. 101, Characteristic = 400 kHz mode. 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 1 MHz mode (1). 101, Min = 2(T OSC)(BRG + 1). 101, Max = -. 101, Units = ms. 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = -. 102, Max = 1000. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nand SCL Rise Time. 102, Characteristic = 1 MHz mode (1). 102, Min = -. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = -. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 1 MHz mode (1). 103, Min = -. 103, Max = 100. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\npF. 90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = T SU: STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = -. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 2(T",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nOSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD: STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = -. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD: DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = -. 106, Units = ns. 106, Conditions = . 106, Symbol = THD: DAT.",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = ms. 106, Conditions = . 107, Symbol = T SU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = T SU: DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = -. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 400 kHz mode. 92, Min =",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\n2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 92, Symbol = T SU: STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = -. 92, Units = ms. 92, Conditions = . 109, Symbol = T AA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = -. 109, Max = 3500. 109, Units = ns. 109, Conditions = . 109, Symbol = T AA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = -. 109, Max = 1000. 109, Units = ns. 109, Conditions = . 109, Symbol = T AA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 1 MHz mode (1). 109, Min = -. 109, Max = -. 109, Units = ns. 109, Conditions = . 110,",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nSymbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = -. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = -. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 27-22: MASTER SSP I 2 C\u2122 BUS DATA REQUIREMENTS\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.\n2: A Fast mode I 2 C bus device can be used in a Standard mode I 2 C bus system, but Parameter #107 \uf0b3 250 ns must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, Parameter #102 + Parameter #107 = 1000 + 250 = 1250 ns (for 100 kHz mode,) before the SCL line is released.",
    "TABLE 27-23: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n120, Symbol = T CK H2DTV. 120, Characteristic = SYNC XMIT (MASTER and SLAVE) Clock High to Data Out Valid. 120, Characteristic = PIC18 F XXXX. 120, Min = -. 120, Max = 40. 120, Units = ns. 120, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 100. , Units = ns. , Conditions = VDD = 2.0V. 121, Symbol = T CKRF. 121, Characteristic = Clock Out Rise Time and Fall Time. 121, Characteristic = PIC18 F XXXX. 121, Min = -. 121, Max = 20. 121, Units = ns. 121, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V. 122, Symbol = TDTRF. 122, Characteristic = Data Out Rise Time and Fall Time. 122, Characteristic = PIC18 F XXXX. 122, Min =",
    "TABLE 27-23: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n-. 122, Max = 20. 122, Units = ns. 122, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Max = 50. , Units = ns. , Conditions = VDD = 2.0V",
    "TABLE 27-24: USART SYNCHRONOUS RECEIVE REQUIREMENTS\n125, Symbol = TDTV2CKL. 125, Characteristic = SYNC RCV (MASTER and SLAVE) Data Hold before CKx \uf0af (DTx hold time). 125, Min = 10. 125, Max = -. 125, Units = ns. 125, Conditions = . 126, Symbol = T CKL2DTL. 126, Characteristic = Data Hold after CKx \uf0af (DTx hold time). 126, Min = 15. 126, Max = -. 126, Units = ns. 126, Conditions = ",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nA01, Sym = NR. A01, Characteristic = Resolution. A01, Characteristic = Resolution. A01, Min = -. A01, Typ = -. A01, Max = 10. A01, Units = bit. A01, Conditions = \uf044 VREF \uf0b3 3.0V. A03, Sym = EIL. A03, Characteristic = Integral Linearity Error. A03, Characteristic = Integral Linearity Error. A03, Min = -. A03, Typ = -. A03, Max = <\u00b11. A03, Units = LSb. A03, Conditions = \uf044 VREF \uf0b3 3.0V. A04, Sym = EDL. A04, Characteristic = Differential Linearity Error. A04, Characteristic = Differential Linearity Error. A04, Min = -. A04, Typ = -. A04, Max = <\u00b11. A04, Units",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\n= LSb. A04, Conditions = \uf044 VREF \uf0b3 3.0V. A06, Sym = EOFF. A06, Characteristic = Offset Error. A06, Characteristic = Offset Error. A06, Min = -. A06, Typ = -. A06, Max = <\u00b11. A06, Units = LSb. A06, Conditions = \uf044 VREF \uf0b3 3.0V. A07, Sym = EGN. A07, Characteristic = Gain Error. A07, Characteristic = Gain Error. A07, Min = -. A07, Typ = -. A07, Max = <\u00b11. A07, Units = LSb. A07, Conditions = \uf044 VREF \uf0b3 3.0V. A10, Sym = -. A10, Characteristic = Monotonicity. A10, Characteristic = Monotonicity. A10, Min = Guaranteed (1).",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nA10, Typ = Guaranteed (1). A10, Max = Guaranteed (1). A10, Units = -. A10, Conditions = . A20, Sym = \uf044 VREF. A20, Characteristic = Reference Voltage Range. A20, Characteristic = Reference Voltage Range. A20, Min = 3. A20, Typ = -. A20, Max = AVDD - AVSS. A20, Units = V. A20, Conditions = VDD \uf0b3 3.0V. , Sym = . , Characteristic = (V REFH - VREFL ). , Characteristic = (V REFH - VREFL ). , Min = 1.8. , Typ = -. , Max = VDD - VSS. , Units = V. , Conditions = VDD < 3.0V. A21, Sym = VREFH. A21, Characteristic = Reference Voltage High. A21, Characteristic = Reference Voltage High. A21, Min =",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nAVSS + \uf044 VREF. A21, Typ = -. A21, Max = AVDD. A21, Units = V. A21, Conditions = For 10-bit resolution. A22, Sym = VREFL. A22, Characteristic = Reference Voltage Low. A22, Characteristic = Reference Voltage Low. A22, Min = AVSS. A22, Typ = -. A22, Max = AVDD - \uf044 VREF. A22, Units = V. A22, Conditions = For 10-bit resolution. A25, Sym = VAIN. A25, Characteristic = Analog Input Voltage. A25, Characteristic = Analog Input Voltage. A25, Min = VREFL. A25, Typ = -. A25, Max = VREFH. A25, Units = V. A25, Conditions = . A28, Sym = AVDD. A28, Characteristic = Analog Supply Voltage. A28, Characteristic = Analog Supply Voltage. A28,",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nMin = VDD - 0.3. A28, Typ = -. A28, Max = VDD + 0.3. A28, Units = V. A28, Conditions = . A29, Sym = AVSS. A29, Characteristic = Analog Supply Voltage. A29, Characteristic = Analog Supply Voltage. A29, Min = VSS - 0.3. A29, Typ = -. A29, Max = VSS + 0.3. A29, Units = V. A29, Conditions = . A30, Sym = ZAIN. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Min = -. A30, Typ = -. A30, Max = 2.5. A30, Units = k \uf057. A30, Conditions = . A40, Sym = I AD. A40, Characteristic = A/D Conversion Current (V",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nDD). A40, Characteristic = PIC18 F XXXX. A40, Min = -. A40, Typ = 180. A40, Max = -. A40, Units = \uf06d A. A40, Conditions = Average current consumption when A/D is on (Note 2). , Sym = . , Characteristic = . , Characteristic = PIC18 LF XXXX. , Min = -. , Typ = 90. , Max = -. , Units = \uf06d A. , Conditions = VDD = 2.0V; Average current consumption when A/D is on (Note 2). A50, Sym = I REF. A50, Characteristic = VREF Input Current (Note 3). A50, Characteristic = VREF Input Current (Note 3). A50, Min = - -. A50, Typ = - -. A50, Max = \u00b15 \u00b1150. A50, Units = \uf06d A \uf06d A. A50, Conditions = During VAIN",
    "TABLE 27-25: A/D CONVERTER CHARACTERISTICS: PIC18F6310/6410/8310/8410 (INDUSTRIAL) PIC18LF6310/6410/8310/8410 (INDUSTRIAL)\nacquisition. During A/D conversion cycle.\nNote 1: The A/D conversion result never decreases with an increase in the input voltage and has no missing codes.\n2: When A/D is off, it will not consume any current other than minor leakage current. The power-down current specification includes any such leakage from the A/D module.\n3: VREFH current is from the RA3/AN3/VREF+ pin or AVDD, whichever is selected as the VREFH source. VREFL current is from the RA2/AN2/VREF- pin or AVSS, whichever is selected as the VREFL source.",
    "FIGURE 27-24: A/D CONVERSION TIMING\nIf the A/D clock source is selected as RC, a time of TCY is added before the A/D clock starts.\nNote 1: This allows the SLEEP instruction to be executed.\n2: This is a minimal RC delay (typically 100 ns), which also disconnects the holding capacitor from the analog input.",
    "TABLE 27-26: A/D CONVERSION REQUIREMENTS\n130, Symbol = T AD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = 0.7. 130, Max = 25.0 (1). 130, Units = \uf06d s. 130, Conditions = T OSC based, VREF \uf0b3 3.0V. 130, Symbol = T AD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = 1.4. 130, Max = 25.0 (1). 130, Units = \uf06d s. 130, Conditions = VDD = 2.0V; T OSC based, VREF full range. 130, Symbol = T AD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XXXX. 130, Min = -. 130, Max = 1. 130, Units = \uf06d s. 130, Conditions = A/D RC mode. 130, Symbol = T AD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XXXX. 130, Min = -. 130, Max = 3. 130, Units = \uf06d s. 130,",
    "TABLE 27-26: A/D CONVERSION REQUIREMENTS\nConditions = VDD = 2.0V; A/D RC mode. 131, Symbol = T CNV. 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Characteristic = Conversion Time (not including acquisition time) (Note 2). 131, Min = 11. 131, Max = 12. 131, Units = T AD. 131, Conditions = . 132, Symbol = T ACQ. 132, Characteristic = Acquisition Time (Note 3). 132, Characteristic = Acquisition Time (Note 3). 132, Min = 1.4. 132, Max = -. 132, Units = \uf06d s. 132, Conditions = -40 \uf0b0 C to +85 \uf0b0 C. 135, Symbol = T SWC. 135, Characteristic = Switching Time from Convert \uf0ae Sample. 135, Characteristic = Switching Time from Convert \uf0ae Sample. 135, Min = -. 135, Max = (Note 4). 135, Units = . 135, Conditions = . 137, Symbol = TDIS. 137, Characteristic = Discharge Time. 137, Characteristic = Discharge Time. 137, Min = 0.2. 137, Max = -. 137, Units = \uf06d s. 137, Conditions = ",
    "TABLE 27-26: A/D CONVERSION REQUIREMENTS\nNote 1: The time of the A/D clock period is dependent on the device frequency and the TAD clock divider.\n2: ADRES register may be read on the following TCY cycle.\n3: The time for the holding capacitor to acquire the 'New' input voltage when the voltage changes full scale after the conversion (AVDD to AVSS or AVSS to AVDD). The source impedance ( RS ) on the input channels is 50 \uf057 .\n4: On the following cycle of the device clock.",
    "Legend:\nXX...X\nCustomer-specific information\nY\nYear code (last digit of calendar year)\nYY\nYear code (last 2 digits of calendar year)\nWW\nWeek code (week of January 1 is week '01')\nNNN\nAlphanumeric traceability code\nPb-free JEDEC designator for Matte Tin (Sn)\n*\nThis package is Pb-free. The Pb-free JEDEC designator (     ) 3 e\ncan be found on the outer packaging for this package.\nNote :\nIn the event the full Microchip part number cannot be marked on one line, it will be  carried  over  to  the  next  line,  thus  limiting  the  number  of  available characters for customer-specific information.\n3\ne",
    "28.2 Package Details\nThe following sections give the technical details of the packages.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /##4CH2eb0c8ba15de4cce8fa3c169622f8e93/##46H7a539460a8268e5915c0973dbb05dce1.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /##4CH2eb0c8ba15de4cce8fa3c169622f8e93/##46H7a539460a8268e5915c0973dbb05dce1.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /##4CH2eb0c8ba15de4cce8fa3c169622f8e93/##46H7a539460a8268e5915c0973dbb05dce1. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g36/##40He56442409eb2e77ad61dd1c271fabe6c. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##55H86fa5259cb141e4f33f834c08eacfe53/##49H7d5c40f4f2638829db6b707b7e9400a3.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##4CH2eb0c8ba15de4cce8fa3c169622f8e93/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##4FHabe68123f3cb4e14e0d59c97044fedf7/##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g73.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /##43Hd27e308598cf1f8bcf9e336036f3f448/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /##4FHabe68123f3cb4e14e0d59c97044fedf7/g131. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##55H86fa5259cb141e4f33f834c08eacfe53.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##4FHabe68123f3cb4e14e0d59c97044fedf7. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/##40He56442409eb2e77ad61dd1c271fabe6c.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/##4FHabe68123f3cb4e14e0d59c97044fedf7. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##43Hd27e308598cf1f8bcf9e336036f3f448/g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##43Hd27e308598cf1f8bcf9e336036f3f448/g131",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;#23#23#23/g68/g85/g72/g68/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g38/g75/g68/g80/g73/g72/g85/g86/;#23#23#23/g68/g87/;#23#23#23/g70/g82/g85/g81/g72/g85/g86/;#23#23#23/g68/g85/g72/;#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/##5BH40500acfd45bb67052e9c43dd051a0f4/;#23#23#23/g86/g76/g93/g72/;#23#23#23/g80/g68/g92/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g89/g68/g85/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##43Hd27e308598cf1f8bcf9e336036f3f448/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##40He56442409eb2e77ad61dd1c271fabe6c/##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23/g80/g80/;#23#23#23/g83/g72/g85/;#23#23#23/g86/g76/g71/g72/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##49H7d5c40f4f2638829db6b707b7e9400a3/g48/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g37/g54/g38/##58Hb981034091b194e41ef5193e7127dfd3",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/;#23#23#23/g89/g68/g79/g88/g72/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41/##58Hb981034091b194e41ef5193e7127dfd3",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g88/g86/g88/g68/g79/g79/g92/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g73/g82/g85/;#23#23#23/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/;#23#23#23/g83/g88/g85/g83/g82/g86/g72/g86/;#23#23#23/g82/g81/g79/g92",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##52H929f5141f4575eca8d5e4ef21356227f /##49H7d5c40f4f2638829db6b707b7e9400a3/g37",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g49.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /##52H929f5141f4575eca8d5e4ef21356227f/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /##52H929f5141f4575eca8d5e4ef21356227f/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g49/g88/g80/g69/g72/g85/;#23#23#23/g82/g73/;#23#23#23/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /##52H929f5141f4575eca8d5e4ef21356227f/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g72. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38. /g47/g72/g68/g71/;#23#23#23/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23 /g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/##40He56442409eb2e77ad61dd1c271fabe6c.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##55H86fa5259cb141e4f33f834c08eacfe53/##49H7d5c40f4f2638829db6b707b7e9400a3. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g36/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/;#23#23#23/;#23#23#23, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##4CH2eb0c8ba15de4cce8fa3c169622f8e93/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##4FHabe68123f3cb4e14e0d59c97044fedf7/##49H7d5c40f4f2638829db6b707b7e9400a3. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23 /g53/g40/g41. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g73.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /##43Hd27e308598cf1f8bcf9e336036f3f448/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##49H7d5c40f4f2638829db6b707b7e9400a3/g131. /g41/g82/g82/g87/;#23#23#23/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /##4FHabe68123f3cb4e14e0d59c97044fedf7/g131. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g50/g89/g72/g85/g68/g79/g79/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/g72/g71/;#23#23#23/g51/g68/g70/g78/g68/g74/g72/;#23#23#23/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##55H86fa5259cb141e4f33f834c08eacfe53.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/;#23#23#23/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##4FHabe68123f3cb4e14e0d59c97044fedf7. /g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/##40He56442409eb2e77ad61dd1c271fabe6c.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g47/g72/g68/g71/;#23#23#23/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/##40He56442409eb2e77ad61dd1c271fabe6c/##4FHabe68123f3cb4e14e0d59c97044fedf7. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##43Hd27e308598cf1f8bcf9e336036f3f448/g131.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23/g47/g76/g80/g76/g87/g86 = /g69.",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##40He56442409eb2e77ad61dd1c271fabe6c/g131. /g48/g82/g79/g71/;#23#23#23/g39/g85/g68/g73/g87/;#23#23#23/g36/g81/g74/g79/g72/;#23#23#23/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /##43Hd27e308598cf1f8bcf9e336036f3f448/g131",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23 /g51/g76/g81/;#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g89/g76/g86",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g88/g68/g79/;#23#23#23/g76/g81/g71/g72/g91/;#23#23#23/g73/g72/g68/g87/g88/g85/g72/;#23#23#23/g80/g68/g92/;#23#23#23/g89/g68/g85/g92 /;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23/g69/g88/g87/;#23#23#23/g80/g88/g86/g87/;#23#23#23/g69/g72/;#23#23#23/g79/g82/g70/g68/g87/g72/g71/;#23#23#23/g90/g76/g87/g75/g76/g81/;#23#23#23/g87/g75/g72/;#23#23#23/g75/g68/g87/g70/g75/g72/g71/;#23#23#23/g68/g85/g72/g68/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##40He56442409eb2e77ad61dd1c271fabe6c/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g38/g75/g68/g80/g73/g72/g85/g86/;#23#23#23/g68/g87/;#23#23#23/g70/g82/g85/g81/g72/g85/g86/;#23#23#23/g68/g85/g72/;#23#23#23/g82/g83/g87/g76/g82/g81/g68/g79/##5BH40500acfd45bb67052e9c43dd051a0f4/;#23#23#23/g86/g76/g93/g72/;#23#23#23/g80/g68/g92/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g89/g68/g85/g92\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##43Hd27e308598cf1f8bcf9e336036f3f448/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/;#23#23#23/g39/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g68/g81/g71/;#23#23#23/g40/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g71/g82/;#23#23#23/g81/g82/g87/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g76/g81/g70/g79/g88/g71/g72/;#23#23#23/g80/g82/g79/g71/;#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g48/g82/g79/g71/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g73/g79/g68/g86/g75/;#23#23#23/g82/g85/;#23#23#23/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/;#23#23#23/g86/g75/g68/g79/g79/;#23#23#23/g81/g82/g87/;#23#23#23/g72/g91/g70/g72/g72/g71/;#23#23#23/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##40He56442409eb2e77ad61dd1c271fabe6c/##49H7d5c40f4f2638829db6b707b7e9400a3/;#23#23#23/g80/g80/;#23#23#23/g83/g72/g85/;#23#23#23/g86/g76/g71/g72/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/;#23#23#23/g68/g81/g71/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/;#23#23#23/g83/g72/g85/;#23#23#23/g36/g54/g48/g40/;#23#23#23/g60/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##49H7d5c40f4f2638829db6b707b7e9400a3/g48/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g37/g54/g38/##58Hb981034091b194e41ef5193e7127dfd3",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g37/g68/g86/g76/g70/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/;#23#23#23/g72/g91/g68/g70/g87/;#23#23#23/g89/g68/g79/g88/g72/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g86/g75/g82/g90/g81/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/g86/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g53/g40/g41/##58Hb981034091b194e41ef5193e7127dfd3",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/;#23#23#23/g39/g76/g80/g72/g81/g86/g76/g82/g81/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g88/g86/g88/g68/g79/g79/g92/;#23#23#23/g90/g76/g87/g75/g82/g88/g87/;",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n#23#23#23/g87/g82/g79/g72/g85/g68/g81/g70/g72/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23/g73/g82/g85/;#23#23#23/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/;#23#23#23/g83/g88/g85/g83/g82/g86/g72/g86/;#23#23#23/g82/g81/g79/g92",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74",
    "/g49/g82/g87/g72/g86/##58Hb981034091b194e41ef5193e7127dfd3\n/g38/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##46H7a539460a8268e5915c0973dbb05dce1/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/;#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23#23/##55H86fa5259cb141e4f33f834c08eacfe53/##40He56442409eb2e77ad61dd1c271fabe6c/g37",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "Revision A (June 2004)\nAPPENDIX B:\nDEVICE DIFFERENCES\nOriginal  data  sheet  for  PIC18F6310/6410/8310/8410 devices.",
    "Revision B (May 2007)\nUpdated Electrical Characteristics and packaging diagrams.",
    "Revision C (October 2010)\nChanges  to  electricals  in Section  27.0  'Electrical Characteristics' and  minor  text edits throughout document.",
    "TABLE B-1: DEVICE DIFFERENCES\nProgram Memory (Bytes), PIC18F6310 = 8K. Program Memory (Bytes), PIC18F6410 = 16K. Program Memory (Bytes), PIC18F8310 = 8K. Program Memory (Bytes), PIC18F8410 = 16K. Program Memory (Instructions), PIC18F6310 = 4096. Program Memory (Instructions), PIC18F6410 = 8192. Program Memory (Instructions), PIC18F8310 = 4096. Program Memory (Instructions), PIC18F8410 = 8192. External Memory Interface, PIC18F6310 = No. External Memory Interface, PIC18F6410 = No. External Memory Interface, PIC18F8310 = Yes. External Memory Interface, PIC18F8410 = Yes. I/O Ports, PIC18F6310 = Ports A, B, C, D, E, F, G. I/O Ports, PIC18F6410 = Ports A, B, C, D, E, F, G. I/O Ports, PIC18F8310 = Ports A,",
    "TABLE B-1: DEVICE DIFFERENCES\nB, C, D, E, F, G, H, J. I/O Ports, PIC18F8410 = Ports A, B, C, D, E, F, G, H, J. Packages, PIC18F6310 = 64-Pin TQFP. Packages, PIC18F6410 = 64-Pin TQFP. Packages, PIC18F8310 = 80-Pin TQFP. Packages, PIC18F8410 = 80-Pin TQFP\nThe differences between the devices listed in this data sheet are shown in Table B-1.",
    "APPENDIX C: CONVERSION CONSIDERATIONS\nThis appendix discusses the considerations for converting  from  previous  versions  of  a  device  to  the ones listed in this data sheet. Typically, these changes are due to the differences in the process technology used. An example of this type of conversion is from a PIC16C74A to a PIC16C74B.\nNot Applicable\nAPPENDIX D:\nMIGRATION FROM BASELINE TO ENHANCED DEVICES\nThis section discusses how to migrate from a Baseline device (i.e., PIC16C5X) to an Enhanced MCU device (i.e., PIC18FXXX).\nThe  following  are  the  list  of  modifications  over  the PIC16C5X microcontroller family:\nNot Currently Available",
    "PIC18F6310/6410/8310/8410\nAPPENDIX E:",
    "MIGRATION FROM MID-RANGE TO ENHANCED DEVICES\nAPPENDIX F:",
    "MIGRATION FROM HIGH-END TO ENHANCED DEVICES\nA detailed  discussion of the  differences between  the mid-range  MCU  devices  (i.e.,  PIC16CXXX)  and  the enhanced  devices  (i.e.,  PIC18FXXX)  is  provided  in AN716,  'Migrating  Designs  from  PIC16C74A/74B  to PIC18C442' . The  changes  discussed,  while  device specific,  are  generally  applicable  to  all  mid-range  to enhanced device migrations.\nThis Application Note is available as Literature Number DS00716.\nA  detailed  discussion  of  the  migration  pathway  and differences between the high-end MCU devices (i.e., PIC17CXXX) and the enhanced devices (i.e., PIC18FXXX)  is  provided  in AN726,  'PIC17CXXX  to PIC18CXXX  Migration' . This Application Note is available as Literature Number DS00726.",
    "PIC18F6310/6410/8310/8410\nNOTES:",
    "A\nA/D, 1 = ................................................................................... 255. A/D Converter Interrupt, Configuring ........................................, 1 = ....................... 259. Acquisition Requirements, 1 = 260. ADCON0 Register, 1 = .................................................... 255. ADCON1 Register, 1 =",
    "A\n.................................................... 255. ADCON2 Register, 1 = .................................................... 255. ADRESH Register, 1 = ............................................ 255, 258. ADRESL Register, 1 = .................................................... 255. Analog Port Pins, 1 =",
    "A\n...................................................... 148. Analog Port Pins, Configuring, 1 = .................................. 262. Associated Registers, 1 = ............................................... 264. Calculating the Minimum Required Acquisition Time .............................................., 1 = . , 1 = 260. Configuring the Module, 1 =",
    "A\n............................................ 259. Conversion Clock (T AD) ..........................................., 1 = 261. Conversion Status (GO/DONE Bit), 1 = .......................... 258. Conversions ............................................................., 1 = 263. Converter Characteristics, 1 = ........................................ 387.",
    "A\nDischarge, 1 = ................................................................. 263. Operation in Power-Managed Modes, 1 = ...................... 262. Selecting, Configuring Automatic, 1 = . Acquisition Time .............................................., 1 = 261. Special Event Trigger (CCP) .................................... .........................................., 1",
    "A\n= 264. Use of the CCP2 Trigger, 1 = 264. Absolute Maximum Ratings, 1 = 351. ............................................. AC (Timing) Characteristics, 1 = ............................................. 368. Load Conditions for Device Specifications ..................................................., 1 = Timing 369. Parameter Symbology, 1 = ............................................. 368. Temperature and Voltage Specifications, 1 =",
    "A\n................. 369. Timing Conditions, 1 = .................................................... 369. Access Bank, 1 = ...................................................................... 77. ACKSTAT, 1 = ........................................................................ 207. ACKSTAT Status Flag, 1 =",
    "A\n..................................................... 207. ADCON0 Register, 1 = ............................................................ 255. GO/DONE Bit, 1 = ........................................................... 258. ADCON1 Register, 1 =",
    "A\n............................................................ 255. ADCON2 Register, 1 = ............................................................ 255. ADDFSR, 1 = .......................................................................... 340. ADDLW, 1 =",
    "A\n............................................................................ 303. Addressable Universal Synchronous Asynchronous Receiver Transmitter (AUSART). See AUSART., 1 = ......................................................................... ADDULNK, 1 = 340. ADDWF, 1 =",
    "A\n............................................................................ 303. ADDWFC, 1 = ......................................................................... 304. ADRESH Register, 1 = ............................................................ 255. ADRESL Register",
    "A\n...................................................., 1 = 255, 258. Analog-to-Digital Converter. See, 1 = A/D.. ANDLW, 1 = 304. ANDWF, 1 = ............................................................................ ............................................................................ 305. Assembler, 1 = . MPASM",
    "A\nAssembler, 1 = .................................................. 348. AUSART, 1 = . Asynchronous Mode, 1 = ................................................ 246. Associated Registers, Receive, 1 = ........................ 249. Associated Registers, Transmit, 1 = ....................... 247. Receiver ..........................................................., 1 = 248. Setting up",
    "A\n9-Bit Mode with, 1 = . Address Detect ........................................, 1 = 248. Transmitter, 1 = ....................................................... 246",
    "PIC18F6310/6410/8310/8410\nBaud Rate Generator (BRG), 1 = ................................... 244. Associated Registers, 1 = ....................................... 244. Baud Rate Error, Calculating, 1 = ........................... 244. Baud Rates, Asynchronous Modes, 1 = ................. 245. High Baud Rate Select (BRGH Bit), 1 = ................. 244. Operation in Power-Managed Modes, 1 = .............. 244. Sampling, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 244. Synchronous Master Mode ......................................, 1 = 250. Associated Registers, Receive, 1 = ........................ 252. Associated Registers, Transmit, 1 = ....................... 251. Reception, 1 = ........................................................ 252. Transmission, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................... 250. Synchronous Slave Mode, 1 = ........................................ 253. Associated Registers, Receive, 1 = ........................ 254. Associated Registers, Transmit, 1 = ....................... 253. Reception, 1 = ........................................................ 254. Transmission, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................... 253. Auto-Wake-up on Sync Break Character ........................., 1 = 232",
    "B\nBank Select Register (BSR), 1 = .............................................. 75. Baud Rate Generator ......................................................, 1 = 203. BC ...................................................................................., 1 = 305. BCF, 1 =",
    "B\n................................................................................. 306. BF, 1 = .................................................................................... 207. BF Status Flag, 1 = ................................................................. 207. Block Diagrams, 1 = . 16-Bit",
    "B\nByte Select Mode, 1 = ............................................ 99. 16-Bit Byte Write Mode, 1 = .............................................. 97. 16-Bit Word Write Mode, 1 = ............................................ 98. 8-Bit Multiplexed Mode, 1 = ............................................ 102. A/D, 1 =",
    "B\n........................................................................... 258. Analog Input Model, 1 = .................................................. 259. AUSART Receive, 1 = .................................................... 248. AUSART Transmit, 1 = ................................................... 246.",
    "B\nBaud Rate Generator, 1 = .............................................. 203. Capture Mode Operation, 1 = ......................................... 169. Comparator, 1 = . I/O Operating Modes, 1 = ....................................... 266. Comparator Analog Input Model, 1 = .............................. 269. Comparator Output, 1 =",
    "B\n.................................................. 268. Comparator Voltage Reference, 1 = ............................... 272. Comparator Voltage Reference, 1 = . Output Buffer Example, 1 = .................................... 273. Compare Mode Operation, 1 = ....................................... 171. Device Clock, 1 =",
    "B\n.............................................................. 40. EUSART Receive, 1 = .................................................... 230. EUSART Transmit, 1 = ................................................... 227. External Clock Input, EC Oscillator, 1 = ........................... 36. External Clock Input, HS Oscillator, 1 =",
    "B\n........................... 36. External Power-on Reset Circuit, 1 = . (Slow VDD Power-up) ........................................, 1 = 57. Fail-Safe Clock Monitor, 1 = ........................................... 293. Generic I/O Port Operation, 1 = ...................................... 125. High/Low-Voltage Detect with External Input, 1 = .......... 276. Interrupt Logic, 1 =",
    "B\n.......................................................... 110. MSSP (I 2 C Master Mode), 1 = ........................................ 201. MSSP (I 2 C Mode) ...................................................., 1 = 186. MSSP (SPI Mode), 1 = ................................................... 177. On-Chip Reset Circuit, 1 =",
    "B\n................................................ 55. PIC18F6310/6410, 1 = 12. , 1 = ..................................................... ..................................................... 13. PIC18F8310/8410 PLL (HS Mode) .........................................................., 1 = 37. PORTD",
    "B\nand PORTE (Parallel Slave Port), 1 = ............... 148. PWM Operation (Simplified), 1 = .................................... 173. RC Oscillator Mode, 1 = ................................................... 37",
    "PIC18F6310/6410/8310/8410\nRCIO Oscillator Mode, 1 = ................................................ 37. Reads From Program Memory ..................................................., 1 = .................................. 91. Single Comparator, 1 = 267. Table Read and Table Write Operations, 1 = ................... 89. Timer0 in 16-Bit Mode",
    "PIC18F6310/6410/8310/8410\n.............................................., 1 = 152. Timer0 in 8-Bit Mode ................................................, 1 = 152. Timer1 ......................................................................, 1 = 156. Timer1 (16-Bit Read/Write Mode), 1 = ............................ 156. Timer2, 1 = 162.",
    "PIC18F6310/6410/8310/8410\n...................................................................... Timer3 ......................................................................, 1 = 164. Timer3 (16-Bit Read/Write Mode) Watchdog Timer ......................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n............................ 164. ...................................................................................., 1 = 290. BN, 1 = 306 307. BNC BNN, 1 = .................................................................................. 307. BNOV, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................................................. ............................................................................... 308. BNZ, 1 = .",
    "PIC18F6310/6410/8310/8410\n.................................................................................., 1 = 308. BOR. See Brown-out Reset., 1 = 311. BOV .................................................................................., 1 = 309. BRA",
    "PIC18F6310/6410/8310/8410\n.................................................................................., 1 = . Break Character (12-Bit) Transmit and Receive BRG. See Baud Rate Generator., 1 = .............. 234. Brown-out Reset (BOR) ............................................. Detecting",
    "PIC18F6310/6410/8310/8410\n...................................................................., 1 = 58, 281 58. Disabling in Sleep, 1 = ............................................ 58. Mode Software Enabled ......................................................., 1 = . BSF",
    "PIC18F6310/6410/8310/8410\n.................................................................................., 1 = 58 309. BTFSC, 1 = 310. BTFSS, 1 = ............................................................................. 310. BTG",
    "PIC18F6310/6410/8310/8410\n.................................................................................., 1 = .............................................................................. 311. , 1 =",
    "PIC18F6310/6410/8310/8410\n..................................................................................... 312. BZ, 1 = . C, 1 = . C Compilers MPLAB C18 CALL, 1 = ............................................................. 348",
    "PIC18F6310/6410/8310/8410\n................................................................................ 312 169. Capture (CCP Module) ..................................................... Associated Registers CCP Pin, 1 = 172 169. ............................................... Configuration CCPR2H:CCPR2L, 1 = .",
    "PIC18F6310/6410/8310/8410\n............................................. Registers, 1 = 169. Software Interrupt .................................................... Timer1/Timer3 Mode, 1 = ................................... 170. , 1 = 169. , 1 = 167. Selection ................................ Capture/Compare/PWM (CCP)",
    "PIC18F6310/6410/8310/8410\n........................................, 1 = . Capture Mode. See Capture. CCP Mode and Timer Resources CCPRxH Register ...................................................., 1 = ............................ 168 168. CCPRxL Register ..................................................... Compare Mode. See Compare. Interconnect Configurations, 1 = 168. Module Configuration, 1 = 168 168 313.",
    "PIC18F6310/6410/8310/8410\n..................................... ............................................... ................................................................................, 1 = . CLRF CLRWDT",
    "PIC18F6310/6410/8310/8410\n.........................................................................., 1 = 313. Code Examples 16 x 16 Signed Multiply Routine 16 x 16 Unsigned Multiply Routine 8 x 8 Signed Multiply Routine .................................., 1 = .............................. 108 .......................... 108 107 107. 8 x 8 Unsigned Multiply Routine .............................. Changing Between Capture,",
    "PIC18F6310/6410/8310/8410\n1 = .................... Prescalers Computed GOTO Using an Offset, 1 = 170. ................... Value, 1 = 72. Executing Back to Back Sleep Instructions Fast Register Stack, 1 = ................ 46. .................................................... How to Clear RAM (Bank 1) Using, 1 = 72. Indirect Addressing ........................................................., 1 = 84. Implementing a Real-Time Clock Using a, 1 = . Timer1 Interrupt Service",
    "PIC18F6310/6410/8310/8410\n.................................., 1 = 159. Initializing PORTA ...................................................., 1 = 125",
    "PIC18F6310/6410/8310/8410\nInitializing PORTB, 1 = .................................................... 128. Initializing PORTC, 1 = ................................................... 131. Initializing PORTD, 1 = ................................................... 134. Initializing PORTE, 1 = .................................................... 137.",
    "PIC18F6310/6410/8310/8410\nInitializing PORTF, 1 = .................................................... 140. Initializing PORTG, 1 = ................................................... 142. Initializing PORTH, 1 = ................................................... 144. Initializing PORTJ, 1 = ....................................................",
    "PIC18F6310/6410/8310/8410\n146. Loading the SSPBUF (SSPSR) Register, 1 = ................. 180. Reading a Flash Program Memory Word Saving STATUS, WREG and BSR, 1 = .................. 91. Registers in RAM ............................................., 1 = 124. Code Protection, 1 = ............................................................... 281. COMF",
    "PIC18F6310/6410/8310/8410\n.............................................................................., 1 = 314. Comparator, 1 = ...................................................................... 265. Analog Input Connection Considerations, 1 = ................ 269. Associated Registers, 1 = ............................................... 269.",
    "PIC18F6310/6410/8310/8410\nConfiguration, 1 = ........................................................... 266. Effects of a Reset ...................................................., 1 = 268. Interrupts, 1 = ................................................................. 268. Operation, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 267. Operation During Sleep ...................................................................., 1 = ........................................... 268. Outputs, 1 = 267. Reference, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................ 267. External Signal .................................................., 1 = ................................................ 267. Internal Signal ........................................................, 1 = 267. Response Time, 1 = 267",
    "PIC18F6310/6410/8310/8410\n366. Comparator Specifications ..............................................., 1 = . Comparator Voltage Reference, 1 = ....................................... 271 272. Accuracy and Error .................................................. Associated Registers, 1 = ............................................... 273. Configuring",
    "PIC18F6310/6410/8310/8410\n.............................................................., 1 = 271. Connection Considerations, 1 = ...................................... 272. Effects of a Reset ...................................................., 1 = 272. Operation During Sleep, 1 = ........................................... 272. Compare (CCP Module)",
    "PIC18F6310/6410/8310/8410\n.................................................., 1 = 170. Associated Registers, 1 = ............................................... 172. CCP Pin Configuration, 1 = ............................................. 170. CCPR2 Register, 1 = ...................................................... 170. Software Interrupt Mode, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................... 170. Special Event Trigger, 1 = 165, 170, 264 ................................. .............................. Timer1/Timer3 Mode Selection, 1 = 170. Computed GOTO ............................................................... CONFIG2L (Configuration 2 Low), 1 = 72 283. Configuration Bits, 1 = 281.",
    "PIC18F6310/6410/8310/8410\n............................................................ Configuration Register Protection, 1 = .................................... 295. Conversion Considerations .............................................., 1 = 396. CPFSEQ, 1 = .......................................................................... 314.",
    "PIC18F6310/6410/8310/8410\nCPFSGT, 1 = .......................................................................... 315. CPFSLT, 1 = 315. ........................................................................... Crystal Oscillator/Ceramic Resonator, 1 = ................................ 35. Customer Change Notification Service, 1 =",
    "PIC18F6310/6410/8310/8410\n............................ 409. Customer Notification Service ........................................., 1 = 409. Customer Support, 1 = 409. , 1 = ............................................................",
    "D\nData Addressing Modes ...................................................., 1 = 84. Comparing Addressing Modes with the, 1 = . Extended Instruction Set Enabled, 1 = 87. Direct ........................................................................., 1 = 84. Indexed Literal Offset, 1 = 86. Indirect ......................................................................., 1 = 84. Inherent and Literal",
    "D\n...................................................., 1 = 84",
    "PIC18F6310/6410/8310/8410\nData Memory, 1 = ..................................................................... 75. Access Bank .............................................................., 1 = 77. and the Extended Instruction Set, 1 = ............................... 86. Bank Select Register (BSR) ......................................., 1 = 75. General Purpose Registers",
    "PIC18F6310/6410/8310/8410\n........................................, 1 = 77 .......... Map for PIC18F6310/6410/8310/8410 Devices, 1 = 76. Special Function Registers ........................................ ................................................................................., 1 = 78. DAW DC Characteristics",
    "PIC18F6310/6410/8310/8410\n..........................................................., 1 = 316 363. Power-Down and Supply Current ........................................................., 1 = ............................ 355. Supply Voltage, 1 = 354. DCFSNZ",
    "PIC18F6310/6410/8310/8410\n.........................................................................., 1 = 317. DECF ..............................................................................., 1 = 316. DECFSZ",
    "PIC18F6310/6410/8310/8410\n..........................................................................., 1 = 317. Development Support ......................................................, 1 = 347. Device Differences ..........................................................., 1 = 395. Device Overview, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................................. 9. Features (table) .........................................................., 1 = 11. New Core Features, 1 = ...................................................... 9. Device Reset Timers",
    "PIC18F6310/6410/8310/8410\n.........................................................., 1 = 59 ...................................................... PLL Lock Time-out, 1 = 59. Power-up Timer (PWRT), 1 = ........................................... 59. Time-out Sequence ....................................................",
    "PIC18F6310/6410/8310/8410\nOscillator Start-up, 1 = 59. Device Reset Timer Timer (OST), 1 = ......... 59. Direct Addressing, 1 = ............................................................... 85. E, 1 = . Effect on Standard PIC Instructions, 1 = 344. ................................. Effects of Power-Managed Modes on Various Clock Sources, 1 = ............................................... 43. Electrical Characteristics",
    "PIC18F6310/6410/8310/8410\n.................................................. Enhanced Universal Synchronous Asynchronous, 1 = 351. Receiver Transmitter (EUSART). See EUSART. Equations, 1 = . 16 x 16 Signed Multiplication Algorithm, 1 = ................... 108. 16 x 16 Unsigned Multiplication Algorithm, 1 = ............... 108. A/D Acquisition Time ................................................, 1 = 260. A/D Minimum Charging Time ...................................",
    "PIC18F6310/6410/8310/8410\n..................................................................................., 1 = 260. Errata EUSART, 1 = 7. Asynchronous Mode ................................................, 1 = 226. 12-Bit Break Transmit and Receive, 1 = ................. 234. Associated Registers, Receive ........................ ......................., 1 =",
    "PIC18F6310/6410/8310/8410\n231. Associated Registers, Transmit, 1 = 228 .......................... Auto-Wake-up on Sync Break, 1 = 232. Receiver ........................................................... Setting up 9-Bit Mode with Address Detect, 1 = 229 ..... 229. ......................................................., 1 = 226. Transmitter, 1 = . Baud Rate Generator (BRG), 1 = ....................................",
    "PIC18F6310/6410/8310/8410\n221 ........................................ Associated Registers, 1 = 221. Auto-Baud Rate Detect .................................... Baud Rate Error, Calculating, 1 = 224 221. ........................... Baud Rates, Asynchronous Modes, 1 = ................. 222. High Baud Rate Select (BRGH Bit), 1 = ................. 221. Operation in Power-Managed Modes, 1 = .............. 221. Sampling",
    "PIC18F6310/6410/8310/8410\n.........................................................., 1 = 221. Synchronous Master Mode, 1 = ...................................... 235. Associated Registers, Receive, 1 = ........................ 238. Transmit, 1 = ....................... 236. Associated Registers, Reception ........................................................., 1 = 237. Transmission",
    "PIC18F6310/6410/8310/8410\n..................................................., 1 = 235. Synchronous Slave Mode ........................................, 1 = 239. Associated Registers, Receive, 1 = ........................ 240 ....................... 239. Associated Registers, Transmit, 1 = 240. Reception ......................................................... Transmission, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................... 239",
    "PIC18F6310/6410/8310/8410\nExtended Instruction Set, 1 = . ADDFSR .................................................................., 1 = 340. ADDULNK, 1 = ............................................................... 340. and Using MPLAB IDE Tools, 1 = .................................. 346. CALLW",
    "PIC18F6310/6410/8310/8410\n...................................................................., 1 = 341. Considerations for Use, 1 = ............................................ 344. MOVSF, 1 = .................................................................... 341. MOVSS, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................................... 342. PUSHL, 1 = ..................................................................... 342. SUBFSR, 1 = .................................................................. 343. SUBULNK, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................ 343. External Memory Interface ................................................., 1 = 95. 16-Bit Byte Select Mode, 1 = ............................................ 99. 16-Bit Byte Write Mode, 1 = .............................................. 97. 16-Bit Mode, 1",
    "PIC18F6310/6410/8310/8410\n= ............................................................... 97. 16-Bit Mode Timing ................................................., 1 = 100. 16-Bit Word Write Mode, 1 = ............................................ 98. 8-Bit Mode, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................... 102. 8-Bit Mode Timing, 1 = ................................................... 103. and the Program Memory Modes, 1 = .............................. 96. Associated Registers ..............................................., 1 = . PIC18F8310/8410 External Bus,, 1 = 105. I/O Port Functions",
    "PIC18F6310/6410/8310/8410\n.............................................., 1 = 96. F, 1 = . Fail-Safe Clock Monitor, 1 = ........................................... 281, 293. Interrupts in Power-Managed Modes, 1 = ...................... 294. POR or Wake from Sleep, 1 = ........................................ 294. WDT During Oscillator Failure, 1 = ................................. 293.",
    "PIC18F6310/6410/8310/8410\nFast Register Stack, 1 = ........................................................... 72. Firmware Instructions, 1 = ...................................................... 297. Flash Program Memory, 1 = . Associated Registers, 1 = ................................................. 93. Operation During Code-Protect, 1 = ................................. 92. Reading",
    "PIC18F6310/6410/8310/8410\n....................................................................., 1 = 90. FSCM. See Fail-Safe Clock Monitor., 1 = . G, 1 = . GOTO, 1 = .............................................................................. 318. H, 1 = . Hardware Multiplier, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 107. Introduction, 1 = .............................................................. 107. Operation, 1 = ................................................................. 107. Performance Comparison High/Low-Voltage Detect",
    "PIC18F6310/6410/8310/8410\n................................................., 1 = ........................................ 107 275. Applications, 1 = .............................................................. , 1 = 278. Associated Registers, 1 = ............................................... 279. Characteristics, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 367. Current Consumption, 1 = .............................................. 277. Effects of a Reset, 1 = .................................................... 279. Operation, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 276. During Sleep, 1 = .................................................... 279. Start-up Time, 1 = ................................................... 277. Setup",
    "PIC18F6310/6410/8310/8410\n......................................................................., 1 = 277. Typical Application ..................................................., 1 = 278. HLVD. See High/Low-Voltage Detect., 1 = ............................. 275",
    "I\nI/O Ports, 1 = ........................................................................... 125. I 2 C Mode (MSSP), 1 = . Acknowledge Sequence Timing, 1 = ............................... 210. Associated Registers, 1 = ............................................... 216. Baud Rate Generator, 1 = ............................................... 203. Bus Collision, 1 = . During a Repeated Start",
    "I\nCondition ..................................., 1 = .................. 214. During a Start Condition, 1 = 212. During a Stop Condition ......................................................., 1 = ................................... 215. Clock Arbitration, 1 = 204. Clock Stretching, 1 = ....................................................... 196. 10-Bit Slave Receive Mode (SEN = 1), 1 =",
    "I\n............. 196. 7-Bit Slave Receive Mode (SEN = ......................................................, 1 = 1) ............... 196. Effect of a Reset, 1 = 211. General Call Address Support ............................................., 1 = ................................. 200. I 2 C Clock Rate w/BRG, 1 = 203. Master Mode, 1 =",
    "I\n............................................................ 201. Operation, 1 = ......................................................... 202. Reception ........................................................., 1 = 207. Repeated Start Condition Timing, 1 = ..................... 206. Start Condition, 1 =",
    "I\n................................................. 205. Transmission, 1 = .................................................... 207. Transmit Sequence, 1 = .......................................... 202. Multi-Master Communication, Bus Collision .................................................., 1 = . and Arbitration, 1 = 211",
    "I\n.................................................... Multi-Master Mode, 1 = 211. Operation, 1 = ................................................................. 190. Read/Write Bit Information (R/W Bit), 1 = ............... 190, 191. Registers .................................................................., 1 = 186. Serial Clock (RC3/SCK/SCL), 1 =",
    "I\n................................... 191. Slave Mode, 1 = .............................................................. 190. Addressing, 1 = ....................................................... 190. Reception ......................................................... Sleep Operation, 1 = 191 211. Timing, 1 =",
    "I\n........................................................ Stop Condition, 1 = .............................................. 210. Transmission ............................................................., 1 = ............................................................ 191. ID Locations Idle Modes, 1 = 281, 296. PRI_IDLE, 1 =",
    "I\n................................................................... 51. INCF ................................................................................., 1 = 318. INCFSZ ............................................................................, 1 = 319. In-Circuit Debugger, 1 =",
    "I\n.......................................................... 296. In-Circuit Serial Programming (ICSP), 1 = ...................... 281, 296. Indexed Literal Offset Addressing and Standard PIC18 Instructions, 1 = ............................. 344. Indexed Literal Offset Mode, 1 = ....................................... 86, 344 ........................ Effect on Standard PIC18 Instructions, 1 = 86. Mapping the Access Bank",
    "I\n........................................., 1 = 88. Indirect Addressing, 1 = ............................................................ 85. INFSNZ ............................................................................, 1 = 319. Initialization Conditions for all Registers, 1 = ...................... 63-66. Instruction Cycle",
    "I\n................................................................., 1 = 73. Clocking Scheme, 1 = ....................................................... 73. Instruction Flow/Pipelining .................................................................., 1 =",
    "I\n................................................. 73. Instruction Set, 1 = 297. ADDLW, 1 = .................................................................... 303. ADDWF, 1 = .................................................................... 303. ADDWF (Indexed Literal Offset mode), 1 = .................... 345. ADDWFC, 1 =",
    "I\n................................................................. 304. ANDLW, 1 = .................................................................... 304. ANDWF BC ............................................................................, 1 =",
    "I\n.................................................................... 305 305. BCF, 1 = .......................................................................... 306. BN, 1 = ............................................................................ 306",
    "I\nBNC, 1 = ......................................................................... 307. BNN, 1 = ......................................................................... 307. BNOV, 1 = ...................................................................... 308. BNZ, 1 =",
    "I\n......................................................................... 308. BOV, 1 = ......................................................................... 311. BRA, 1 = ......................................................................... 309. BSF",
    "I\n.........................................................................., 1 = 309. BSF (Indexed Literal Offset mode), 1 = .......................... 345. BTFSC, 1 = ..................................................................... 310. BTFSS, 1 =",
    "I\n..................................................................... 310. BTG, 1 = ......................................................................... 311. BZ ............................................................................, 1 = 312. CALL, 1 =",
    "I\n........................................................................ 312. CLRF, 1 = ....................................................................... 313. COMF ......................................................................, 1 = 314. CPFSGT, 1 =",
    "I\n.................................................................. 315. CPFSLT, 1 = ................................................................... 315. ........................................................................, 1 = 316. DAW, 1 = . DCFSNZ, 1 =",
    "I\n.................................................................. 317. DECF ......................................................................., 1 = 316. DECFSZ, 1 = .................................................................. 317. Extended Instructions, 1 =",
    "I\n.............................................. 339 339. Syntax .............................................................. General Format, 1 = ........................................................ 299. GOTO, 1 = ...................................................................... 318. INCF",
    "I\n........................................................................, 1 = 318. INCFSZ, 1 = .................................................................... 319. IORLW, 1 = ..................................................................... 320. IORWF, 1 =",
    "I\n..................................................................... 320. LFSR, 1 = ....................................................................... 321. MOVF, 1 = ...................................................................... 321. , 1 =",
    "I\n.................................................................... 322. MOVFF MOVLB, 1 = .................................................................... 322. MOVLW, 1 = ................................................................... 323. MOVWF, 1 =",
    "I\n................................................................... 323. MULLW, 1 = .................................................................... 324. MULWF, 1 = .................................................................... 324. NEGF, 1 =",
    "I\n....................................................................... 325. NOP ........................................................................., 1 = 325. Opcode Field Descriptions POP ........................................................................., 1 =",
    "I\n....................................... 298. PUSH, 1 = ....................................................................... 326. RCALL, 1 = ..................................................................... 327. RESET, 1 =",
    "I\n..................................................................... 327. RETFIE, 1 = .................................................................... 328. RETLW, 1 = .................................................................... 328. RETURN, 1 =",
    "I\n.................................................................. 329. RLCF, 1 = ....................................................................... 329. RLNCF, 1 = ..................................................................... 330. RRCF, 1 = 330.",
    "I\n....................................................................... RRNCF, 1 = .................................................................... 331. SETF, 1 = 331. SETF (Indexed Literal Offset, 1 = ....................................................................... mode)",
    "I\n........................ 345. SLEEP ....................................................................., 1 = 332 .................................................................. SUBFWB, 1 = 332 333. SUBLW .................................................................... SUBWF, 1 = 333.",
    "I\n.................................................................... SUBWFB, 1 = ................................................................. 334. SWAPF ...................................................................., 1 = 334",
    "PIC18F6310/6410/8310/8410\nTBLRD, 1 = ..................................................................... 335 ...................................................................... TBLWT, 1 = 336. TSTFSZ, 1 = ................................................................... 337. XORLW, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................................... 337. XORWF, 1 = 338. .................................................................... Summary Table, 1 = ........................................................ 300. INTCON Register",
    "PIC18F6310/6410/8310/8410\n...................................................................., 1 = . RBIF Bit, 1 = 128. INTCON Registers, 1 = 111. ........................................................... Inter-Integrated Circuit. See I 2 C., 1 = . Internal Oscillator Block ....................................................., 1 = 38. Adjustment, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 38. INTIO Modes, 1 = .............................................................. 38. INTOSC Frequency Drift ............................................ INTOSC Output Frequency, 1 = 38 38. OSCTUNE Register",
    "PIC18F6310/6410/8310/8410\n..................................................., 1 = 38. Internal RC Oscillator, 1 = . Use with WDT, 1 = .......................................................... 290. Internet Address, 1 = ............................................................... 409. Interrupt Sources, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................. 281. A/D Conversion Complete ......................................., 1 = 259. Context Saving During Interrupts, 1 = ............................. 124. Interrupt-on-Change (RB7:RB4) ..................................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n.............................. 128. INTx Pin, 1 = 124. PORTB, Interrupt-on-Change, 1 = .................................. 124. TMR0 ......................................................................., 1 = 124. TMR0 Overflow, 1 = ........................................................ 153. TMR1 Overflow",
    "PIC18F6310/6410/8310/8410\n........................................................, 1 = 155 173. TMR2 to PR2 Match (PWM) .................................... Overflow ................................................, 1 = . TMR3, 1 = 163, 165. Interrupts",
    "PIC18F6310/6410/8310/8410\n.......................................................................... Interrupts, Flag, 1 = 109. Interrupt-on-Change (RB7:RB4) Flag (RBIF Bit) ........................................................., 1 = 128. INTOSC, INTRC. See Internal Oscillator Block. IORLW",
    "PIC18F6310/6410/8310/8410\n............................................................................., 1 = 320. IORWF ............................................................................., 1 = 320 ................................................................... 120. IPR Registers, 1",
    "PIC18F6310/6410/8310/8410\n= . L LFSR, 1 = 321. M, 1 = ................................................................................. Master Clear, 1 = 57. (MCLR) ......................................................... Master Synchronous Serial Port (MSSP). See MSSP. Memory Organization, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 67. Data Memory, 1 = ............................................................. 75. Program Memory, 1 = ....................................................... 67. Memory Programming Requirements, 1 = .............................. 365. Microchip Internet Web Site",
    "PIC18F6310/6410/8310/8410\n............................................., 1 = 409. Migration from Baseline to Enhanced Devices, 1 = ................ 396. Migration from High-End to Enhanced Devices, 1 = ............... 397. Migration from Mid-Range to ..............................................................................., 1 = Enhanced Devices ............ 397. MOVF, 1 = 321. MOVFF",
    "PIC18F6310/6410/8310/8410\n............................................................................, 1 = 322. MOVLB ............................................................................, 1 = 322. MOVLW, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................................................... 323. MOVSS ............................................................................, 1 = 342. MOVWF",
    "PIC18F6310/6410/8310/8410\n..........................................................................., 1 = 323. MPLAB ASM30 Assembler, Linker, Librarian MPLAB Integrated Development Environment, 1 = . ..................................................................., 1 = .................. 348. Software, 1 = 347. MPLAB PM3 Device Programmer, 1 =",
    "PIC18F6310/6410/8310/8410\n................................... 350. MPLAB REAL ICE In-Circuit Emulator System, 1 = ................ 349. MPLINK Object Linker/MPLIB Object Librarian, 1 = ............... 348\nMSSP",
    "PIC18F6310/6410/8310/8410\nACK Pulse ....................................................... 190,, 1 = 191. Control Registers (general) ....................................., 1 = 177. I 2 C Mode. See I 2 C Mode. Module Overview ....................................................., 1 = 177. SPI Master/Slave Connection SPI Mode. See SPI Mode., 1 = .................................. 181. SSPBUF",
    "PIC18F6310/6410/8310/8410\n.................................................................. ...................................................................., 1 = 182. SSPSR, 1 = 182. MULLW, 1 = ............................................................................ 324. MULWF, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................................ 324. N, 1 = . NEGF ..............................................................................., 1 = 325. NOP",
    "PIC18F6310/6410/8310/8410\n................................................................................., 1 = 325. O, 1 = . Oscillator, 1 = . Clock Sources, 1 = ........................................................... 40. Selecting the 31 kHz Source, 1 = ............................. 41. Selection Using OSCCON Register Clock Input",
    "PIC18F6310/6410/8310/8410\n.................................................., 1 = .................. 41. External, 1 = 36. RC ............................................................................., 1 = 37. RCIO Mode, 1 = ................................................................ 37",
    "PIC18F6310/6410/8310/8410\n.................................................................... Switching, 1 = 40. Transitions, 1 = ................................................................. 41. Oscillator Configuration, 1 = ..................................................... 35",
    "PIC18F6310/6410/8310/8410\n............................................................................... EC, 1 = 35. ECIO, 1 = .......................................................................... 35. HS",
    "PIC18F6310/6410/8310/8410\n.............................................................................., 1 = 35. HSPLL, 1 = ....................................................................... 35 .............................................. Internal Oscillator Block, 1 = 38. INTIO1, 1 =",
    "PIC18F6310/6410/8310/8410\n....................................................................... 35. INTIO2 .............................................................................., 1 = ....................................................................... 35 35. LP, 1 = . RC, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................................. 35. RCIO, 1 = .......................................................................... 35. XT ..............................................................................,",
    "PIC18F6310/6410/8310/8410\n1 = 35. Oscillator Selection Oscillator Start-up Timer, 1 = .......................................................... 281 43, 281. Oscillator, Timer1 ....................................................., 1 = 155, 165. Oscillator, Timer3, 1 = ............................................................. 163. P, 1 = . Packaging, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................................................ 389. Details, 1 = ...................................................................... 390. Marking, 1 = .................................................................... 389. Parallel Slave Port (PSP)",
    "PIC18F6310/6410/8310/8410\n................................................., 1 = 148. Associated Registers, 1 = ............................................... 150. RE0/RD Pin, 1 = ............................................................. 148. RE1/WR Pin RE2/CS Pin, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................ 148 148. Select (PSPMODE Bit) ............................................, 1 = 148. Instruction Execution, Extended, 1 = 88. PIC18 PIE Registers, 1 = ............................. ................................................................... 117. Pin Functions, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................................................... AVDD, 1 = 30. AVDD, 1 = .......................................................................... 21. AVSS, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................................... 21. AVSS, 1 = .......................................................................... 30 14, 22. OSC1/CLKI/RA7 OSC2/CLKO/RA6, 1 = ..................................................",
    "PIC18F6310/6410/8310/8410\n................................................ 14, 22. RA0/AN0 .............................................................., 1 = 15, 23. RA1/AN1, 1 = .............................................................. 15, 23. , 1 =",
    "PIC18F6310/6410/8310/8410\n................................................... 15, 23. RA2/AN2/VREF- RA3/AN3/VREF+, 1 = .................................................. 15, 23",
    "PIC18F6310/6410/8310/8410\nRA4/T0CKI ..........................................................., 1 = 15, 23. RA5/AN4/HLVDIN ............................................................., 1 = ................................................ 15, 23. RB0/INT0, 1 = 16, 24. RB1/INT1, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................. 16, 24. RB2/INT2, 1 = ............................................................. 16, 24. RB3/INT3, 1 = ................................................................... 16. RB3/INT3/CCP2, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 24. RB4/KBI0, 1 = ............................................................. 16, 24. RB5/KBI1, 1 = ............................................................. 16, 24. RB6/KBI2/PGC, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................... 16, 24. RB7/KBI3/PGD, 1 = .................................................... 16, 24. RC0/T1OSO/T13CKI, 1 = ........................................... 17, 25. RC1/T1OSI/CCP2, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................ 17, 25. RC2/CCP1, 1 = 17, 25. ........................................................... RC3/SCK/SCL, 1 = ..................................................... 17, 25. RC4/SDI/SDA, 1 =",
    "PIC18F6310/6410/8310/8410\n...................................................... 17, 25. RC5/SDO, 1 = ............................................................. 17, 25. RC6/TX1/CK1, 1 = ...................................................... 17, 25. RC7/RX1/DT1",
    "PIC18F6310/6410/8310/8410\n......................................................, 1 = 17, 25. RD0/AD0/PSP0, 1 = .......................................................... 26. RD0/PSP0, 1 = .................................................................. 18. RD1/AD1/PSP1, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 26. RD1/PSP1, 1 = .................................................................. 18. RD2/AD2/PSP2 .................................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 26. RD2/PSP2, 1 = 18. RD3/AD3/PSP3, 1 = .......................................................... 26. RD3/PSP3 .................................................................., 1 = 18. RD4/AD4/PSP4, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 26 18. RD4/PSP4 .................................................................., 1 = .......................................................... 26. RD5/AD5/PSP5 RD5/PSP5",
    "PIC18F6310/6410/8310/8410\n.................................................................., 1 = 18. RD6/AD6/PSP6, 1 = .......................................................... 26. RD6/PSP6 .................................................................., 1 = 18. RD7/AD7/PSP7, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 26. RD7/PSP7, 1 = .................................................................. 18. RE0/AD8/RD, 1 = .............................................................. 27. RE0/RD",
    "PIC18F6310/6410/8310/8410\n...................................................................... RE1/AD9/WR, 1 = 19 ............................................................. 27. , 1 = 19. RE1/WR ....................................................................., 1 = . RE2/AD10/CS RE2/CS, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................ 27 ...................................................................... 19. RE3 ............................................................................, 1 = 19. RE3/AD11, 1 =",
    "PIC18F6310/6410/8310/8410\n.................................................................. 27. RE4 ............................................................................, 1 = 19. RE4/AD12, 1 = .................................................................. 27. RE5",
    "PIC18F6310/6410/8310/8410\n............................................................................, 1 = 19. RE5/AD13, 1 = .................................................................. 27. RE6 ............................................................................, 1 = 19.",
    "PIC18F6310/6410/8310/8410\nRE6/AD14, 1 = .................................................................. 27 19. RE7/CCP2, 1 = .................................................................. RE7/CCP2/AD15, 1 = ....................................................... 27. RF0/AN5",
    "PIC18F6310/6410/8310/8410\n.............................................................., 1 = 20, 28 20, 28. RF1/AN6/C2OUT RF2/AN7/C1OUT, 1 = .................................................. RF3/AN8 .............................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n................................................. 20, 28 20, 28. RF4/AN9, 1 = 20, 28. .............................................................. RF5/AN10/CVREF ............................................................, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................. 20, 28 20, 28. RF6/AN11, 1 = 20, 28. RF7/SS ................................................................ RG0/CCP3, 1 = 21, 29. ..........................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n...................................................... 21, 29. RG1/TX2/CK2, 1 = 29. RG2/RX2/DT2 ......................................................................, 1 = ...................................................... 21, 21, 29. RG3",
    "PIC18F6310/6410/8310/8410\n......................................................................, 1 = 21, 29. RG4, 1 = 21, 29. RG5 ......................................................................, 1 = ................................................... 14, 22. RG5/MCLR/VPP, 1 = ",
    "PIC18F6310/6410/8310/8410\nRH0/AD16, 1 = ................................................................. 29. RH1/AD17, 1 = ................................................................. 29. RH2/AD18, 1 = ................................................................. 29. RH3/AD19, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 29. RH4 ..........................................................................., 1 = 29. RH5 ..........................................................................., 1 = 29. RH6, 1 = 29.",
    "PIC18F6310/6410/8310/8410\n........................................................................... RH7 ..........................................................................., 1 = 29. RJ0/ALE, 1 = .................................................................... 30.",
    "PIC18F6310/6410/8310/8410\nRJ1/OE, 1 = ...................................................................... 30. RJ2/WRL, 1 = ................................................................... 30. RJ3/WRH, 1 = ................................................................... 30.",
    "PIC18F6310/6410/8310/8410\nRJ4/BA0, 1 = .................................................................... 30. RJ5/CE, 1 = ...................................................................... 30. RJ6/LB ......................................................................., 1 = 30.",
    "PIC18F6310/6410/8310/8410\nRJ7/UB, 1 = ...................................................................... 30. VDD ............................................................................, 1 = 21. VDD",
    "PIC18F6310/6410/8310/8410\n............................................................................, 1 = 30. VSS ............................................................................, 1 = 21. VSS",
    "PIC18F6310/6410/8310/8410\n............................................................................, 1 = 30. Pinout I/O Descriptions, 1 = . PIC18F6310/6410, 1 = ..................................................... 14. PIC18F8310/8410, 1 = ..................................................... 22. PIR Registers",
    "PIC18F6310/6410/8310/8410\n..................................................................., 1 = 114. PLL .................................................................................... HSPLL Oscillator, 1 = 37 37. Mode ................................................, 1 =",
    "PIC18F6310/6410/8310/8410\n.............................................. Use with INTOSC, 1 = 37, 38. POP ................................................................................. POR. See Power-on Reset., 1 = 326. PORTA, 1 = . Associated Registers, 1 = ............................................... 127. Functions, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 126. LATA Register, 1 = ......................................................... 125. PORTA Register, 1 = ...................................................... 125. TRISA Register",
    "PIC18F6310/6410/8310/8410\n........................................................, 1 = 125. PORTB, 1 = . Associated Registers, 1 = ............................................... 130. Functions, 1 = ................................................................. 129. LATB Register, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 128. PORTB Register, 1 = ...................................................... 128. RB7:RB4 Interrupt-on-Change Flag (RBIF Bit), 1 = ........ 128. TRISB Register ........................................................, 1 = 128. PORTC, 1 = . Associated Registers, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................... 133. Functions, 1 = ................................................................. 132. LATC Register, 1 = ......................................................... 131. PORTC Register, 1 =",
    "PIC18F6310/6410/8310/8410\n...................................................... 131. RC3/SCK/SCL Pin, 1 = ................................................... 191. TRISC Register, 1 = ........................................................ 131. PORTD",
    "PIC18F6310/6410/8310/8410\n............................................................................, 1 = 148. Associated Registers ................................................................., 1 = ............................................... 136. Functions, 1 = 135. LATD Register, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 134. PORTD Register, 1 = ...................................................... 134. TRISD Register, 1 = ........................................................ 134. PORTE, 1 = . Analog Port Pins",
    "PIC18F6310/6410/8310/8410\n......................................................, 1 = 148. Associated Registers, 1 = ............................................... 139. Functions, 1 = ................................................................. 138. LATE Register, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 137 137. Select (PSPMODE Bit), 1 = .......................... 148. PSP Mode, 1 = . RE0/RD Pin, 1 = ............................................................. 148 148. RE1/WR Pin RE2/CS Pin, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................. 148. ............................................................. TRISE Register, 1 = ........................................................ 137\nPORTF",
    "PIC18F6310/6410/8310/8410\nAssociated Registers, 1 = ............................................... 141. Functions, 1 = 141. ................................................................. LATF Register, 1 = .......................................................... 140. PORTF Register, 1 =",
    "PIC18F6310/6410/8310/8410\n...................................................... 140. TRISF Register, 1 = ........................................................ 140. PORTG, 1 = . Associated Registers, 1 = ............................................... 143. Functions, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 143. LATG Register, 1 = ......................................................... 142. PORTG Register, 1 = ...................................................... 142. TRISG Register, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................................ 142. PORTH, 1 = . Associated Registers ..............................................., 1 = 145. Functions, 1 = ................................................................. 145. LATH Register, 1 =",
    "PIC18F6310/6410/8310/8410\n......................................................... 144. PORTH Register, 1 = ...................................................... 144. TRISH Register, 1 = ........................................................ 144. PORTJ, 1 = . Associated Registers, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................... 147. Functions, 1 = ................................................................. 147. LATJ Register, 1 = .......................................................... 146. PORTJ Register, 1 =",
    "PIC18F6310/6410/8310/8410\n....................................................... 146. TRISJ Register, 1 = ......................................................... 146. Postscaler, WDT, 1 = . Assignment (PSA Bit) .............................................., 1 = 153. Rate Select (T0PS2:T0PS0 Bits) ............................., 1 = 153. Switching Between",
    "PIC18F6310/6410/8310/8410\nTimer0 and WDT ....................................................., 1 = ...................... 153 45. Power-Managed Modes and Multiple Sleep Commands, 1 = .................................. 46. Clock Sources ............................................................, 1 = 45. Clock Transitions, Status Indicators, 1 = ........................... 46. Entering",
    "PIC18F6310/6410/8310/8410\n......................................................................, 1 = 45. Exiting Idle and Sleep Modes, 1 = .................................... 53. by Interrupt ........................................................., 1 = 53. by Reset, 1 =",
    "PIC18F6310/6410/8310/8410\n............................................................. 53. by WDT Time-out ..............................................., 1 = 53. Without an Oscillator Start-up, 1 = Delay .................. 53. Idle Modes .................................................................",
    "PIC18F6310/6410/8310/8410\n................................................................., 1 = 50. Operation Run Modes, 1 = 105 ................................................................. 46. Selecting ...................................................................., 1 = 45. Sleep Mode, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................ 50. Summary (table), 1 = ........................................................ 45. Power-on Reset (POR), 1 = .............................................. 57, 281. Oscillator Start-up Timer (OST), 1 = ................................. 59",
    "PIC18F6310/6410/8310/8410\n............................................ Power-up Timer (PWRT) ...................................................., 1 = 59. Time-out Sequence, 1 = 59. Power-up Delays ................................................................, 1 = 43. Power-up Timer (PWRT) Prescaler, Capture",
    "PIC18F6310/6410/8310/8410\n..........................................................., 1 = ........................................... 43, 281 170. Prescaler, Timer0, 1 = . ............................................................., 1 = 153. Assignment (PSA Bit) .............................................., 1 =",
    "PIC18F6310/6410/8310/8410\n153. Rate Select (T0PS2:T0PS0 Bits), 1 = ............................. 153 153. Switching Between Timer0 and WDT .............................................................., 1 = ....................... Prescaler, TMR2, 1 = 174 70. Program Counter ............................................................... PCL, PCH and PCU, 1 = 70. Registers",
    "PIC18F6310/6410/8310/8410\n................................... PCLATH and PCLATU Registers, 1 = .............................. 70. Program Memory ..............................................................., 1 = 89. , 1 = ......................... 295. Code Protection, from Table Reads ......................................................., 1",
    "PIC18F6310/6410/8310/8410\n= . Control Registers, 1 = 90 ......................... 90. TABLAT (Table Latch) Register TBLPTR (Table Pointer) Register, 1 = ...................... 90. , 1 = 92. Erasing External Memory (PIC18F8X10), 1 = ...................",
    "PIC18F6310/6410/8310/8410\nInstructions, 1 = ................................................................ 74. Two-Word Instructions .........................................................., 1 = ....................................... 74. Interrupt Vector, 1 = 67 ...........................................................",
    "PIC18F6310/6410/8310/8410\nLook-up Tables, 1 = 72. Map and Stack (diagram), 1 = .......................................... 67. Memory Access for PIC18F8310/8410 Modes, 1 = .......... 69. Memory Maps for PIC18FX310/X410 Modes, 1 = ............ 69. PIC18F8310/8410 Memory Modes, 1 = ............................ 68. Reset Vector .............................................................., 1 = 67. Table Reads and Table Writes Writing and",
    "PIC18F6310/6410/8310/8410\nErasing On-Chip Program, 1 = .................................. 89. Memory (ICSP Mode) ........................................ Writing To, 1 = 92. Unexpected Termination, 1 = ................................... 92. Write Verify ........................................................ Writing to Memory Space (PIC18F8X10), 1 = 92 92. Program Memory Modes, 1 = . Extended Microcontroller, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................... 96. Microcontroller, 1 = ........................................................... 96. Microprocessor, 1 = .......................................................... 96. Microprocessor with Boot Block, 1 = ................................ 96. Program Verification and Code Protection, 1 =",
    "PIC18F6310/6410/8310/8410\n...................... 295. Associated Registers ..............................................., 1 = 295. Programming, Device Instructions, 1 = ................................... 297. PSP. See Parallel Slave Port. Pulse-Width Modulation. See, 1 = . PWM PUSH ..............................................................................., 1 = (CCP Module). 326. PUSH and POP Instructions, 1 =",
    "PIC18F6310/6410/8310/8410\n.............................................. 71. PUSHL ............................................................................., 1 = 342. PWM (CCP Module), 1 = ................................................ Associated Registers, 1 = 175. Duty Cycle, 1 = 174.",
    "PIC18F6310/6410/8310/8410\n............................................................... Example Frequencies/Resolutions, 1 = .......................... 174. Period ......................................................................, 1 = 173. Setup for PWM Operation Match ................................................, 1 =",
    "PIC18F6310/6410/8310/8410\n....................................... 174. TMR2 to PR2, 1 = 173. Q Q Clock, 1 = . R, 1 = . RCALL ............................................................................., 1 = 327. RCON Register, 1 = . Bit Status During Initialization, 1 = .................................... 62. Reader Response",
    "PIC18F6310/6410/8310/8410\n............................................................, 1 = 410. Register File ....................................................................... Register File Summary, 1 = 77 79-82. Registers, 1 = . ADCON0 (A/D Control 0), 1 = ......................................... 255. ADCON1 (A/D Control 1), 1 =",
    "PIC18F6310/6410/8310/8410\n......................................... 256. ADCON2 (A/D Control 2), 1 = 257. ......................................... BAUDCON1 (Baud Rate Control 1), 1 = ......................... 220. CCPxCON (Capture/Compare/PWM Control), 1 = ......... 167. CMCON (Comparator Control) ................................, 1 = 265. CONFIG1H (Configuration 1 High Byte)",
    "PIC18F6310/6410/8310/8410\n.........................., 1 = .................. 282. CONFIG2H (Configuration 2 High), 1 = 284. CONFIG3H (Configuration 3 High), 1 = .......................... 286. CONFIG3L (Configuration 3 Low), 1 = ........................... 285. CONFIG4L (Configuration 4 Low), 1 = ........................... 287 287. CONFIG7L (Configuration 7 Low), 1 = ........................... 288. CVRCON (Comparator Voltage,",
    "PIC18F6310/6410/8310/8410\n1 = .......................................... 271. Reference Control), 1 = .............................................. 289. DEVID1 (Device ID 1), 1 = 289. DEVID2 (Device ID 2), 1 = ..............................................",
    "PIC18F6310/6410/8310/8410\nHLVDCON (HLVD Control), 1 = ...................................... 275. INTCON (Interrupt Control), 1 = ...................................... 111. INTCON2 (Interrupt Control 2), 1 = ................................. 112. INTCON3 (Interrupt Control 3), 1 = ................................. 113. IPR1 (Peripheral Interrupt Priority 1), 1 = ........................ 120. IPR2 (Peripheral Interrupt Priority",
    "PIC18F6310/6410/8310/8410\n2), 1 = ........................ 121. IPR3 (Peripheral Interrupt Priority 3), 1 = ........................ 122. MEMCON (Memory Control) ......................................, 1 = 95. OSCCON (Oscillator Control), 1 = .................................... 42. OSCTUNE (Oscillator Tuning) ..................................., 1 = 39. PIE1 (Peripheral Interrupt Enable 1), 1 =",
    "PIC18F6310/6410/8310/8410\n........................ 117. PIE2 (Peripheral Interrupt Enable 2), 1 = ........................ 118. PIE3 (Peripheral Interrupt Enable 3), 1 = ........................ 119. PIR1 (Peripheral Interrupt Request (Flag) 1), 1 = ........... 114. PIR2 (Peripheral Interrupt Request (Flag) 2), 1 = ........... 115. PIR3 (Peripheral Interrupt Request (Flag), 1 = 3) ........... 116. PSPCON (Parallel Slave Port Control) ...................., 1 = 149. RCON (Reset Control)",
    "PIC18F6310/6410/8310/8410\n......................................., 1 = 56, 123. RCSTA2 (AUSART2 Receive Status, 1 = 243 .................. and Control) ..................................................... SSPCON1 (MSSP Control 1,, 1 = SPI Mode) 179. SSPCON2, (I 2 C Mode) SSPSTAT (MSSP Status, I 2 C Mode), 1 = ............................................ 189. , 1 =",
    "PIC18F6310/6410/8310/8410\n............... 187, 188. SSPSTAT (MSSP Status, SPI Mode) T0CON (Timer0 Control) .........................................., 1 = .............. 178, 219 151. T1CON (Timer1 Control), 1 = .......................................... 155. T2CON (Timer2 Control), 1 = .......................................... 161. T3CON (Timer3 Control), 1 = 163.",
    "PIC18F6310/6410/8310/8410\n.......................................... TXSTA1 (EUSART1 Transmit Status and Control) ....................................................., 1 = 218. TXSTA2 (AUSART2 Transmit Status and Control) ..................................................... WDTCON (Watchdog Timer Control), 1 = 242.",
    "PIC18F6310/6410/8310/8410\n............................................................................., 1 = ....................... 291 327. RESET Reset .................................................................................., 1 = 55. MCLR Reset, Normal Operation ................................ MCLR, 1 = 55.",
    "PIC18F6310/6410/8310/8410\nReset, Power Managed Modes, 1 = ...................... 55. Power-on Reset (POR) .............................................. Programmable Brown-out Reset, 1 = 55 55. (BOR), 1 = ..................... RESET Instruction ....................................................., 1 = 55. Stack Full Reset",
    "PIC18F6310/6410/8310/8410\n........................................................., 1 = 55. Stack Underflow Reset .............................................., 1 = 55 55. Watchdog Timer (WDT) Reset .............................................................................., 1 =",
    "PIC18F6310/6410/8310/8410\n.................................... Resets RETFIE ............................................................................, 1 = 281 328. RETLW ............................................................................., 1 = 328. , 1 = 329. RETURN",
    "PIC18F6310/6410/8310/8410\n.......................................................................... Return Address, 1 = . Stack ........................................................ Return Stack Pointer (STKPTR), 1 = 70 ........................................ 71. Revision History",
    "PIC18F6310/6410/8310/8410\n............................................................... ................................................................................, 1 = 395. RLCF, 1 = 329. ............................................................................., 1 = 330.",
    "PIC18F6310/6410/8310/8410\nRLNCF RRCF, 1 = 330. ............................................................................... RRNCF ............................................................................., 1 = 331. Run Modes, 1 = . , 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................... 46. , 1 = .................................................................... 48. , 1 = 46. PRI_RUN, 1 = ................................................................... RC_RUN SEC_RUN, 1 = ",
    "S\nSCK ................................................................................., 1 = 177. SDI ..................................................................................., 1 = 177. SDO",
    "S\n................................................................................., 1 = 177. Serial Clock, SCK, 1 = ............................................................ 177. Serial Data In (SDI), 1 = .......................................................... 177. Serial Data Out (SDO), 1 = 177.",
    "S\n..................................................... Serial Peripheral Interface. See SPI Mode. ................................................................................, 1 = . SETF, 1 = 331. Slave Select (SS), 1 = ............................................................. 177. SLEEP, 1 =",
    "S\n............................................................................. 332. Sleep Mode, 1 = . OSC1 and OSC2 Pin States, 1 = ...................................... 43. Software Simulator (MPLAB SIM), 1 = 349. ................................... Special Event Trigger. See Compare, 1 = . Special Features of the CPU, 1 = ........................................... 281. Special Function Registers, 1 =",
    "S\n................................................ 78. Map, 1 = ............................................................................ 78. SPI Mode (MSSP), 1 = . Associated Registers, 1 = ............................................... 185. Bus Mode Compatibility ...................................................., 1 =",
    "S\n........................................... 185. Effects of a Reset, 1 = 185. Enabling SPI I/O ............................................................, 1 = ...................................................... 181. Master Mode, 1 = 182. Master/Slave Connection, 1 = ......................................... 181. Operation, 1 =",
    "S\n................................................................. 180. Serial Clock, 1 = .............................................................. 177. Serial Data Out, 1 = ........................................................ 177. Slave Mode, 1 =",
    "S\n.............................................................. 183. Slave Select, 1 = ............................................................. 177. Slave Select, 1 = .................................. 183. Synchronization Sleep Operation, 1 = ........................................................ SPI Clock",
    "S\n................................................................., 1 = 185 182. .................................................., 1 = 181. Typical Connection SS ...................................................................................., 1 = 177. SSPOV",
    "S\n............................................................................, 1 = 207. SSPOV Status Flag, 1 = ......................................................... 207. SSPSTAT Register, 1 = . R/W Bit ............................................................, 1 = 190, 191",
    "S\n............................................... Stack Full/Underflow Resets, 1 = 72. Standard Instructions, 1 = ....................................................... 297. SUBFSR, 1 = .......................................................................... 343. SUBFWB, 1 =",
    "S\n......................................................................... 332. SUBLW ............................................................................ SUBULNK, 1 = 333 ........................................................................ 343. SUBWF",
    "S\n............................................................................, 1 = 333. SUBWFB, 1 = ......................................................................... 334. SWAPF, 1 = ............................................................................ 334. T, 1 = . T0CON Register,",
    "S\n1 = . PSA Bit, 1 = .................................................................... 153. T0CS Bit, 1 = .................................................................. 152. T0PS2:T0PS0 Bits, 1 = ................................................... 153. T0SE Bit",
    "S\n.................................................................., 1 = 152. Table Pointer Operations (table), 1 = ........................................ 90. Table Reads/Table Writes, 1 = ................................................. 72. TBLRD, 1 =",
    "S\n............................................................................. 335. TBLWT, 1 = ............................................................................. 336. Time-out in Various Situations (table), 1 = ................................ 59",
    "PIC18F6310/6410/8310/8410\nTimer0 .............................................................................., 1 = 151. 16-Bit Mode Timer Reads and Writes, 1 = ...................... 152. Associated Registers ..............................................., 1 = 153. Clock Source Edge Select (T0SE Bit) ..............................., 1 = ......................",
    "PIC18F6310/6410/8310/8410\n152. Clock Source Select (T0CS Bit) ................................................................., 1 = 152. Operation, 1 = 152. Overflow Interrupt ...................................................., 1 = 153. Prescaler. See Prescaler, Timer0., 1 = . Timer1",
    "PIC18F6310/6410/8310/8410\n.............................................................................., 1 = 155 ............................................ 16-Bit Read/Write Mode, 1 = 157. Associated Registers, 1 = ............................................... 159. Interrupt",
    "PIC18F6310/6410/8310/8410\n...................................................................., 1 = 158. Low-Power Option ..................................................., 1 = 157. Operation, 1 = ................................................................. 156 155,. Oscillator",
    "PIC18F6310/6410/8310/8410\n.........................................................., 1 = 157. Oscillator Layout Considerations, 1 = ............................. 158. Overflow Interrupt ...................................................., 1 = 155. Resetting, Using a Special Event Trigger, 1 = 158. Output (CCP) ................................................... TMR1H Register",
    "PIC18F6310/6410/8310/8410\n......................................................, 1 = 155. ......................................................., 1 = 155. TMR1L Register, 1 = 158. Use as a Real-Time Clock ....................................... Using as a Clock Source .........................................., 1 = 157. Timer2",
    "PIC18F6310/6410/8310/8410\n.............................................................................., 1 = 161. Associated Registers ...................................................................., 1 = ............................................... 162. Interrupt, 1 = 162. Operation",
    "PIC18F6310/6410/8310/8410\n................................................................., 1 = 161. Output ......................................................................, 1 = 162. PR2 Register ............................................................, 1 = 173. TMR2 to PR2 Match Interrupt",
    "PIC18F6310/6410/8310/8410\n.................................., 1 = 173 163. Timer3 .............................................................................. 16-Bit Read/Write Mode ..........................................., 1 = 165. Associated Registers, 1 = ............................................... 165. Operation",
    "PIC18F6310/6410/8310/8410\n.........................................................., 1 = 164. Oscillator, 1 = ................................................................. 163, 165 163,. Overflow Interrupt ............................................, 1 = 165. Special Event Trigger (CCP), 1 = .................................... 165.",
    "PIC18F6310/6410/8310/8410\nTMR3H Register ......................................................, 1 = 163. TMR3L Register Timing Diagrams, 1 = 163. ....................................................... A/D Conversion ........................................................, 1 = 388 .......................................... 210",
    "PIC18F6310/6410/8310/8410\n249. Acknowledge Sequence Asynchronous Reception, 1 = . ................................. Asynchronous Transmission, 1 = 230, 227, 247. ............................ Asynchronous Transmission (Back to Back) ......................................... Automatic Baud Rate, 1 = 227, 247 225. Calculation ............................ Auto-Wake-up Bit (WUE) During Normal Operation ............................................",
    "PIC18F6310/6410/8310/8410\nAuto-Wake-up Bit (WUE) During Sleep, 1 = 233. ................... Baud Rate Generator with Clock BRG Overflow Sequence BRG Reset Due to SDA Arbitration, 1 = 233. Arbitration ......................................... During, 1 = ............ 204 225. Start Condition ................................................. Brown-out Reset (BOR) ..........................................., 1 = 213 375. Bus Collision During a Repeated Start Condition (Case 1)",
    "PIC18F6310/6410/8310/8410\n..........................................., 1 = 214. Bus Collision During a Repeated Start Condition (Case 2) ........................................... Bus Collision During a Start, 1 = 214. Condition (SCL = 0) ........................................., 1 = 213. Bus Collision During a Start, 1 = 212. Condition (SDA Only) ...................................... Bus Collision During a Stop Condition, 1 = 215. (Case, 1 =",
    "PIC18F6310/6410/8310/8410\n....... Bus Collision During a Stop Condition (Case, 1 = . 1) 2), 1 = ...... 215",
    "PIC18F6310/6410/8310/8410\nBus Collision for Transmit and Acknowledge, 1 = .......... 211. Capture/Compare/PWM (All CCP Modules) .........................................................., 1 = ............ 377. CLKO and I/O, 1 = 372. Clock Synchronization, 1 = ............................................. 197. Clock/Instruction Cycle, 1 = .............................................. 73. Example SPI Master Mode (CKE =",
    "PIC18F6310/6410/8310/8410\n0), 1 = ..................... 378. Example SPI Master Mode (CKE = 1), 1 = ..................... 379. Example SPI Slave Mode (CKE = 0), 1 = ....................... 380. Example SPI Slave Mode (CKE = 1) ......................., 1 = 381. External Clock (All Modes Except PLL) ..................., 1 = 370. External Memory Bus for SLEEP (16-Bit Microprocessor Mode) ....................................., 1 = 101. External Memory Bus for SLEEP",
    "PIC18F6310/6410/8310/8410\n(8-Bit Microprocessor Mode) ..................................... External Memory Bus for TBLRD (16-Bit, 1 = 104. Extended Microcontroller Mode) ...................... External Memory Bus for TBLRD (16-Bit, 1 = 100. Microprocessor Mode) ..................................... External Memory Bus for TBLRD (8-Bit, 1 = 100. Extended Microcontroller Mode) ...................... External Memory Bus for TBLRD (8-Bit",
    "PIC18F6310/6410/8310/8410\n....................................., 1 = 103. Microprocessor Mode), 1 = 103. Fail-Safe Clock Monitor ..........................................., 1 = 294. High/Low-Voltage Detect (VDIRMAG = 1), 1 = ............... 278 367. High/Low-Voltage Detect Characteristics ................, 1 = . High/Low-Voltage Detect Operation (VDIRMAG = 0) ............................................... 2, 1 = 277 382. I C",
    "PIC18F6310/6410/8310/8410\nBus Data ............................................................ I 2 C Bus Start/Stop Bits, 1 = ............................................ 382. I 2 C Master Mode (7 or 10-Bit Transmission), 1 = ........... 208. I 2 C Master Mode (7-Bit Reception) ........................., 1 = 209. I 2 C Master Mode First Start Bit ................................, 1 = 205. I 2 C Slave Mode",
    "PIC18F6310/6410/8310/8410\n(10-Bit Reception, SEN = 0) I 2 C Slave Mode (10-Bit Reception, SEN = 1), 1 = .......... 194 .......... 199. I 2 C Slave Mode (10-Bit Transmission) ...................., 1 = 195. 2, 1 = . I C Slave Mode (7-bit Reception, SEN = 0) 2, 1 = ............ 192. I C Slave Mode (7-Bit Reception, SEN = 1) I 2 C Slave Mode (7-Bit Transmission) ......................, 1 = ............ 198. 2, 1 = 193. I C Slave Mode General Call Address Sequence (7 or 10-Bit Address Mode) 2 or Transmit Mode, 1 = ............ 200 ........ 210.",
    "PIC18F6310/6410/8310/8410\nI C Stop Condition Receive Master SSP I 2 C Bus Data, 1 = 384. ....................................... Master SSP I 2 C Bus Start/Stop Bits, 1 = ........................ 384. Parallel Slave Port (PSP) Read (PSP) Write, 1 = ............................... 150 ............................... 149. Parallel Slave Port Program Memory Read, 1 = ............................................ Program Memory Write, 1 = 373",
    "PIC18F6310/6410/8310/8410\n374. PWM Output ............................................................, 1 = ........................................... 173. Repeated Start, 1 = 206. Condition ........................................ Reset, Watchdog Timer (WDT), Oscillator Timer (OST) and Power-up Timer (PWRT), 1 = Start-up ..... 375 234. Send Break Character Sequence Slave Synchronization",
    "PIC18F6310/6410/8310/8410\n............................................. VDD,, 1 = ............................ 183. to, 1 = . Slow Rise Time (MCLR Tied VDD Rise > TPWRT) ............................................, 1 = 61 182. SPI Mode (Master Mode) ........................................ SPI Mode (Slave Mode, CKE =, 1 = 184. 0), 1 = . SPI Mode (Slave Mode, CKE = 1), 1 =",
    "PIC18F6310/6410/8310/8410\n........................... 184. Synchronous Reception (Master Mode,, 1 = ............................ ....................................................., 1 = 237, 252. SREN) ............................., 1 = 235, 250. Synchronous Transmission Synchronous, 1 = 236, 251. Transmission (Through TXEN) ...................................... Time-out Sequence on POR w/PLL Enabled",
    "PIC18F6310/6410/8310/8410\n(MCLR Tied to VDD), 1 = .......................................... 61",
    "PIC18F6310/6410/8310/8410\nTime-out Sequence on Power-up (MCLR Not Tied to VDD, Case 1), 1 = ....................... 60. Time-out Sequence on Power-up (MCLR Not Tied to VDD, Case 2), 1 = ....................... 60. Time-out Sequence on Power-up (MCLR Tied to VDD, VDD Rise TPWRT), 1 = .............. 60. Timer0 and Timer1 External Clock, 1 = .......................... 376. Transition for Entry to PRI_IDLE Mode, 1 = ...................... 51. Transition for Entry to SEC_RUN Mode, 1 =",
    "PIC18F6310/6410/8310/8410\n.................... 47. Transition for Entry to Sleep Mode, 1 = ............................ 50. Transition for Two-Speed Start-up (INTOSC to HSPLL) ........................................., 1 = 292. Transition for Wake From Idle to Run Mode, 1 = .............. 51. Transition for Wake From Sleep (HSPLL), 1 = ................. 50. Transition From RC_RUN Mode to PRI_RUN Mode",
    "PIC18F6310/6410/8310/8410\n................................................., 1 = 49. Transition From SEC_RUN Mode to PRI_RUN Mode (HSPLL) .................................., 1 = 47. Transition to RC_RUN Mode, 1 = 49. ..................................... USART Synchronous Receive (Master/Slave), 1 = ........ 386. USART Synchronous Transmission (Master/Slave)",
    "PIC18F6310/6410/8310/8410\n.................................................., 1 = 386. Timing Diagrams and Specifications A/D Conversion Requirements, 1 = ................................ 388. AC Characteristics Internal RC Accuracy, 1 = ....................................... 371. Capture/Compare/PWM Requirements (All CCP Modules) ..........................................., 1 = 377. CLKO and I/O Requirements, 1 =",
    "PIC18F6310/6410/8310/8410\n................................... 372. Example SPI Mode Requirements (Master Mode, CKE = 0) .................................., 1 = 378. Example SPI Mode Requirements (Master Mode, CKE = 1) .................................., 1 = 379. Example SPI Mode Requirements (Slave Mode, CKE = 0) ...................................., 1 = 380. Example SPI Slave Mode Requirements (CKE = 1), 1 =",
    "PIC18F6310/6410/8310/8410\n.................................. 381. External Clock Requirements, 1 = 370. .................................. I 2 C Bus Data Requirements (Slave Mode), 1 = .............. 383. I 2 C Bus Start/Stop Bits Requirements (Slave Mode) ...................................................., 1 = 382",
    "PIC18F6310/6410/8310/8410\nMaster SSP I 2 C Bus Data Requirements, 1 = 385. Master SSP I 2 C Bus Start/Stop Bits .................................................., 1 = ................. Requirements, 1 = 384. PLL Clock, 1 = ................................................................ 371. Program Memory Read Requirements, 1 = .................... 373. Program Memory Write Requirements, 1 = .................... 374. Reset, Watchdog Timer,",
    "PIC18F6310/6410/8310/8410\nOscillator Start-up, 1 = . Timer, Power-up Timer and Brown-out Reset Requirements ........................................, 1 = 375. Timer0 and Timer1 External Clock Requirements .................................................., 1 = 376. USART Synchronous Receive Requirements, 1 = ......... 386. USART Synchronous Transmission Requirements .................................................., 1 = 386. Top-of-Stack Access, 1 =",
    "PIC18F6310/6410/8310/8410\n.......................................................... 70. TRISE Register, 1 = . PSPMODE Bit, 1 = .......................................................... 148. TSTFSZ, 1 = ........................................................................... 337. Two-Speed Start-up, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................. 281, 292. Two-Word Instructions, 1 = . Example Cases, 1 = .......................................................... 74. TXSTA1 Register ................................................................., 1 = . BRGH Bit, 1 = 221. TXSTA2 Register, 1 = . BRGH Bit, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................. 244. V, 1 = . Voltage Reference Specifications, 1 = .................................... 366. Associated Registers, 1 = ............................................... 291. Control Register, 1 = ....................................................... 290. During Oscillator Failure",
    "PIC18F6310/6410/8310/8410\n.........................................., 1 = 293. Programming Considerations, 1 = .................................. 290. WCOL, 1 = ...................................................... 205, 206, 207, 210. WCOL Status Flag, 1 = ................................... 205, 206, 207, 210. WWWAddress, 1 =",
    "PIC18F6310/6410/8310/8410\n................................................................ 409. WWW, On-Line Support, 1 = ...................................................... 7. X, 1 = . XORLW, 1 = ............................................................................ 337. XORWF, 1 =",
    "PIC18F6310/6410/8310/8410\n........................................................................... 338",
    "CUSTOMER SUPPORT\nMicrochip provides online support via our WWW site at www.microchip.com. This web site is used as a means to make  files and  information  easily available to customers. Accessible by using your favorite Internet browser, the web site contains the following information:\n\u00b7 Product Support - Data sheets and errata, application notes and sample programs, design resources, user's guides and hardware support documents, latest software releases and archived software\n\u00b7 General Technical Support - Frequently Asked Questions (FAQ), technical support requests, online discussion groups, Microchip consultant program member listing\n\u00b7 Business of Microchip - Product selector and ordering guides, latest Microchip press releases, listing of seminars and events, listings of Microchip sales offices, distributors and factory representatives",
    "CUSTOMER CHANGE NOTIFICATION SERVICE\nMicrochip's  customer  notification  service  helps  keep customers current on Microchip products. Subscribers will receive  e-mail  notification  whenever  there  are changes,  updates,  revisions  or  errata  related  to  a specified product family or development tool of interest.\nTo register, access the Microchip web site at www.microchip.com. Under 'Support', click on 'Customer Change Notification' and follow the registration instructions.\nUsers  of  Microchip  products  can  receive  assistance through several channels:\n\u00b7 Distributor or Representative\n\u00b7 Local Sales Office\n\u00b7 Field Application Engineer (FAE)\n\u00b7 Technical Support\n\u00b7 Development Systems Information Line\nCustomers should contact their distributor, representative  or  field  application  engineer  (FAE)  for support. Local sales offices are also available to help customers.  A  listing  of  sales  offices  and  locations  is included in the back of this document.\nTechnical support is available through the web site at: http://support.microchip.com",
    "READER RESPONSE\nIt  is  our  intention  to  provide  you  with  the  best  documentation  possible to ensure  successful  use of your  Microchip product.  If  you  wish  to  provide  your  comments  on  organization,  clarity,  subject  matter,  and  ways  in  which  our documentation  can  better  serve  you,  please  FAX  your  comments  to  the  Technical  Publications  Manager  at (480) 792-4150.\nPlease list the following information, and use this outline to provide us with your comments about this document.\nTO: Technical Publications Manager\nRE: Reader Response\nTotal Pages Sent ________\nFrom: Name\nCompany\nAddress\nCity / State / ZIP / Country\nTelephone: (_______) _________ - _________\nApplication (optional):\nWould you like a reply?       Y         N\nDevice:  PIC18F6310/6410/8310/8410\nLiterature Number:  DS39635C\nQuestions:\nFAX: (______) _________ - _________\n1. What are the best features of this document?\n2. How does this document meet your hardware and software development needs?",
    "READER RESPONSE\n3. Do you find the organization of this document easy to follow? If not, why?\n4. What additions to the document do you think would enhance the structure and subject?\n5. What deletions from the document could be made without affecting the overall usefulness?\n6. Is there any incorrect or misleading information (what and where)?\n7. How would you improve this document?",
    "PIC18F6310/6410/8310/8410 PRODUCT IDENTIFICATION SYSTEM\nTo order or obtain information, e.g., on pricing or delivery, refer to the factory or the listed sales office.\nPART NO.\nX\n/XX",
    "Examples:\nDevice\nXXX Pattern\nDevice\nTemperature Range\nPackage\nPattern\nPackage\nTemperature Range\nPIC18F6310/6410/8310/8410 (1) , PIC18F6310/6410/8310/8410T (2) ; VDD range 4.2V to 5.5V PIC18LF6310/6410/8310/8410 (1) , PIC18LF6310/6410/8310/8410T (2) ; VDD range 2.0V to 5.5V\nI\n=\n-40 C to +85 C (Industrial) \uf0b0 \uf0b0\nE =\n-40 C to +125 C (Extended) \uf0b0 \uf0b0\nPT = TQFP (Thin Quad Flatpack)\nQTP, SQTP, Code or Special Requirements (blank otherwise)\na) PIC18LF6410-I/PT 301 = Industrial temp., TQFP package, Extended VDD limits, QTP pattern #301.\nb) PIC18F8410-I/PT = Industrial temp., TQFP package, normal VDD limits.\nc) PIC18F8410-E/PT = Extended temp., TQFP package, normal VDD limits.\nNote 1:\nF =",
    "Examples:\nStandard Voltage Range\nLF =\nWide Voltage Range\n2: T =\nin tape and reel",
    "AMERICAS\nCorporate Office 2355 West Chandler Blvd. Chandler, AZ 85224-6199 Tel: 480-792-7200 Fax: 480-792-7277 Technical Support:\nhttp://support.microchip.com\nWeb Address:\nwww.microchip.com\nAtlanta Duluth, GA Tel: 678-957-9614 Fax: 678-957-1455",
    "Boston\nWestborough, MA Tel: 774-760-0087 Fax: 774-760-0088",
    "Chicago\nItasca, IL\nTel: 630-285-0071\nFax: 630-285-0075\nCleveland Independence, OH Tel: 216-447-0464 Fax: 216-447-0643\nDallas Addison, TX Tel: 972-818-7423 Fax: 972-818-2924\nDetroit Farmington Hills, MI Tel: 248-538-2250 Fax: 248-538-2260\nKokomo Kokomo, IN Tel: 765-864-8360 Fax: 765-864-8387",
    "Los Angeles\nMission Viejo, CA Tel: 949-462-9523 Fax: 949-462-9608\nSanta Clara Santa Clara, CA Tel: 408-961-6444 Fax: 408-961-6445\nToronto Mississauga, Ontario, Canada Tel: 905-673-0699 Fax: 905-673-6509",
    "ASIA/PACIFIC\nAsia Pacific Office Suites 3707-14, 37th Floor Tower 6, The Gateway Harbour City, Kowloon Hong Kong Tel: 852-2401-1200 Fax: 852-2401-3431\nAustralia - Sydney Tel: 61-2-9868-6733 Fax: 61-2-9868-6755\nChina - Beijing Tel: 86-10-8528-2100 Fax: 86-10-8528-2104\nChina - Chengdu Tel: 86-28-8665-5511 Fax: 86-28-8665-7889",
    "China - Chongqing\nTel: 86-23-8980-9588 Fax: 86-23-8980-9500\nChina - Hong Kong SAR Tel: 852-2401-1200 Fax: 852-2401-3431\nChina - Nanjing Tel: 86-25-8473-2460 Fax: 86-25-8473-2470\nChina - Qingdao Tel: 86-532-8502-7355 Fax: 86-532-8502-7205\nChina - Shanghai Tel: 86-21-5407-5533 Fax: 86-21-5407-5066\nChina - Shenyang Tel: 86-24-2334-2829 Fax: 86-24-2334-2393\nChina - Shenzhen Tel: 86-755-8203-2660 Fax: 86-755-8203-1760\nChina - Wuhan Tel: 86-27-5980-5300 Fax: 86-27-5980-5118\nChina - Xian Tel: 86-29-8833-7252 Fax: 86-29-8833-7256",
    "China - Chongqing\nChina - Xiamen Tel: 86-592-2388138 Fax: 86-592-2388130\nChina - Zhuhai Tel: 86-756-3210040 Fax: 86-756-3210049\nIndia - Bangalore Tel: 91-80-3090-4444 Fax: 91-80-3090-4123\nIndia - New Delhi Tel: 91-11-4160-8631 Fax: 91-11-4160-8632\nIndia - Pune Tel: 91-20-2566-1512 Fax: 91-20-2566-1513\nJapan - Yokohama Tel: 81-45-471- 6166 Fax: 81-45-471-6122",
    "Korea - Daegu\nTel: 82-53-744-4301\nFax: 82-53-744-4302\nKorea - Seoul Tel: 82-2-554-7200 Fax: 82-2-558-5932 or 82-2-558-5934\nMalaysia - Kuala Lumpur Tel: 60-3-6201-9857 Fax: 60-3-6201-9859\nMalaysia - Penang Tel: 60-4-227-8870 Fax: 60-4-227-4068\nPhilippines - Manila Tel: 63-2-634-9065 Fax: 63-2-634-9069",
    "Singapore\nTel: 65-6334-8870 Fax: 65-6334-8850\nTaiwan - Hsin Chu Tel: 886-3-6578-300 Fax: 886-3-6578-370\nTaiwan - Kaohsiung\nTel: 886-7-213-7830\nFax: 886-7-330-9305\nTaiwan - Taipei Tel: 886-2-2500-6610 Fax: 886-2-2508-0102",
    "Thailand - Bangkok\nTel: 66-2-694-1351 Fax: 66-2-694-1350",
    "EUROPE\nAustria - Wels Tel: 43-7242-2244-39 Fax: 43-7242-2244-393 Denmark - Copenhagen Tel: 45-4450-2828 Fax: 45-4485-2829\nFrance - Paris Tel: 33-1-69-53-63-20 Fax: 33-1-69-30-90-79\nGermany - Munich Tel: 49-89-627-144-0 Fax: 49-89-627-144-44",
    "Italy - Milan\nTel: 39-0331-742611 Fax: 39-0331-466781",
    "Netherlands - Drunen\nTel: 31-416-690399 Fax: 31-416-690340\nSpain - Madrid Tel: 34-91-708-08-90 Fax: 34-91-708-08-91\nUK - Wokingham Tel: 44-118-921-5869 Fax: 44-118-921-5820",
    "Mouser Electronics\nAuthorized Distributor\nClick to View Pricing, Inventory, Delivery & Lifecycle Information:\nMicrochip:\nPIC18LF6410-I/PT\u00a0 PIC18LF6310-I/PT\u00a0 PIC18F8410-E/PT\u00a0 PIC18F6310-E/PT\u00a0 PIC18LF8410-I/PT\u00a0 PIC18F8410-I/PT PIC18F8310-I/PT\u00a0 PIC18F6410-I/PT\u00a0 PIC18F6310-I/PT\u00a0 PIC18LF8310-I/PT\u00a0 PIC18F6410-E/PT"
]