[
    "PIC18F2220/2320/4220/4320 Data Sheet\n28/40/44-Pin High-Performance, Enhanced Flash Microcontrollers with 10-Bit A/D and nanoWatt Technology",
    "Note the following details of the code protection feature on Microchip devices:\nGLYPH<149> Microchip products meet the specification contained in their particular Microchip Data Sheet.\nGLYPH<149> Microchip believes that its family of products is one of the most secure families of its kind on the market today, when used in the intended manner and under normal conditions.\nGLYPH<149> There are dishonest and possibly illegal methods used to breach the code protection feature. All of these methods, to our knowledge, require using the Microchip products in a manner outside the operating specifications contained in MicrochipGLYPH<146>s Data Sheets. Most likely, the person doing so is engaged in theft of intellectual property.\nGLYPH<149> Microchip is willing to work with the customer who is concerned about the integrity of their code.\nGLYPH<149> Neither Microchip nor any other semiconductor manufacturer can guarantee the security of their code. Code protection does not mean that we are guaranteeing the product as GLYPH<147>unbreakable.GLYPH<148>",
    "Note the following details of the code protection feature on Microchip devices:\nCode protection is constantly evolving. We at Microchip are committed to continuously improving the code protection features of our products. Attempts to break MicrochipGLYPH<146>s code protection feature may be a violation of the Digital Millennium Copyright Act. If such acts allow unauthorized access to your software or other copyrighted work, you may have a right to sue for relief under that Act.",
    "Note the following details of the code protection feature on Microchip devices:\nInformation  contained  in  this  publication  regarding  device applications and the like is provided only for your convenience and may be superseded by updates. It is your responsibility to ensure  that  your  application  meets  with  your  specifications. MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES  OF  ANY  KIND  WHETHER  EXPRESS  OR IMPLIED, WRITTEN OR ORAL, STATUTORY OR OTHERWISE, RELATED TO THE INFORMATION, INCLUDING  BUT  NOT  LIMITED  TO  ITS CONDITION, QUALITY, PERFORMANCE, MERCHANTABILITY OR FITNESS  FOR  PURPOSE . Microchip  disclaims  all  liability arising  from  this  information  and  its  use.  Use  of  Microchip devices in life support and/or safety applications is entirely at the buyerGLYPH<146>s risk, and the buyer agrees to defend, indemnify and hold  harmless  Microchip  from  any  and  all  damages,  claims, suits,  or  expenses  resulting  from  such  use.  No  licenses  are conveyed, implicitly or otherwise, under any Microchip intellectual property rights.",
    "Trademarks\nThe Microchip name and logo, the Microchip logo, Accuron, dsPIC, KEELOQ, KEELOQ logo, micro ID , MPLAB, PIC, PICmicro, PICSTART, PRO MATE, rfPIC and SmartShunt are registered trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nAmpLab, FilterLab, Linear Active Thermistor, Migratable Memory, MXDEV, MXLAB, SEEVAL, SmartSensor and The Embedded Control Solutions Company are registered trademarks of Microchip Technology Incorporated in the U.S.A.",
    "Trademarks\nAnalog-for-the-Digital Age, Application Maestro, CodeGuard, dsPICDEM, dsPICDEM.net, dsPICworks, dsSPEAK, ECAN, ECONOMONITOR, FanSense, FlexROM, fuzzyLAB, In-Circuit Serial Programming, ICSP, ICEPIC, Mindi, MiWi, MPASM, MPLAB Certified logo, MPLIB, MPLINK, PICkit, PICDEM, PICDEM.net, PICLAB, PICtail, PowerCal, PowerInfo, PowerMate, PowerTool, REAL ICE, rfLAB, Select Mode, Smart Serial, SmartTel, Total Endurance, UNI/O, WiperLock and ZENA are trademarks of Microchip Technology Incorporated in the U.S.A. and other countries.\nSQTP is a service mark of Microchip Technology Incorporated in the U.S.A.\nAll other trademarks mentioned herein are property of their respective companies.\n' 2007, Microchip Technology Incorporated, Printed in the U.S.A., All Rights Reserved.\nPrinted on recycled paper.",
    "Trademarks\nMicrochip received ISO/TS-16949:2002 certification for its worldwide headquarters, design and wafer fabrication facilities in Chandler and Tempe, Arizona; Gresham, Oregon and design centers in California and India. The CompanyGLYPH<146>s quality system processes and procedures are for its PIC fi MCUs and dsPIC fi  DSCs, KEELOQ fi  code hopping devices, Serial EEPROMs, microperipherals, nonvolatile memory and analog products. In addition, MicrochipGLYPH<146>s quality system for the design and manufacture of development systems is ISO 9001:2000 certified.\nQUALITY MANAGEMENT SYSTEM CERTIFIED BY DNV",
    "Peripheral Highlights:\nGLYPH<149> Power-Managed modes:\n-Run: CPU on, peripherals on\n-Idle: CPU off, peripherals on\n-Sleep: CPU off, peripherals off\nGLYPH<149> Power Consumption modes:\n-PRI_RUN: 150 \u03bc A, 1 MHz, 2V\n-PRI_IDLE: 37 \u03bc A, 1 MHz, 2V\n-SEC_RUN: 14 \u03bc A, 32 kHz, 2V\n-SEC_IDLE: 5.8 \u03bc A, 32 kHz, 2V\n-RC_RUN: 110 \u03bc A, 1 MHz, 2V\n-RC_IDLE: 52 \u03bc A, 1 MHz, 2V\n-Sleep: 0.1 \u03bc A, 1 MHz, 2V\nGLYPH<149> Timer1 Oscillator: 1.1 \u03bc A, 32 kHz, 2V\nGLYPH<149> Watchdog Timer: 2.1 \u03bc A\nGLYPH<149> Two-Speed Oscillator Start-up",
    "Oscillators:\nGLYPH<149> Four Crystal modes:\n-LP, XT, HS: up to 25 MHz\n-HSPLL: 4-10 MHz (16-40 MHz internal)\nGLYPH<149> Two External RC modes, Up to 4 MHz\nGLYPH<149> Two External Clock modes, Up to 40 MHz\nGLYPH<149> Internal Oscillator Block:\n-8 user-selectable frequencies: 31 kHz, 125 kHz, 250 kHz, 500 kHz, 1 MHz, 2 MHz, 4 MHz, 8 MHz\n-125 kHz-8 MHz calibrated to 1%\n-Two modes select one or two I/O pins\n-OSCTUNE GLYPH<150> Allows user to shift frequency\nGLYPH<149> Secondary Oscillator using Timer1 @ 32 kHz\nGLYPH<149> Fail-Safe Clock Monitor\n-Allows for safe shutdown if peripheral clock stops\nGLYPH<149> High-Current Sink/Source 25 mA/25 mA\nGLYPH<149> Three External Interrupts\nGLYPH<149> Up to 2 Capture/Compare/PWM (CCP) modules:",
    "Oscillators:\n-Capture is 16-bit, max. resolution is 6.25 ns (TCY/16)\n-Compare is 16-bit, max. resolution is 100 ns (TCY)\n-PWM output: PWM resolution is 1 to 10-bit\nGLYPH<149> Enhanced Capture/Compare/PWM (ECCP) module:\n-One, two or four PWM outputs\n-Selectable polarity\n-Programmable dead time\n-Auto-Shutdown and Auto-Restart\nGLYPH<149> Compatible 10-Bit, Up to 13-Channel Analog-to-Digital Converter (A/D) module with Programmable Acquisition Time\nGLYPH<149> Dual Analog Comparators\nGLYPH<149> Addressable USART module:\n-RS-232 operation using internal oscillator block (no external crystal required)",
    "Special Microcontroller Features:\nGLYPH<149> 100,000 Erase/Write Cycle Enhanced Flash Program Memory Typical\nGLYPH<149> 1,000,000 Erase/Write Cycle Data EEPROM Memory Typical\nGLYPH<149> Flash/Data EEPROM Retention: > 40 Years\nGLYPH<149> Self-Programmable under Software Control\nGLYPH<149> Priority Levels for Interrupts\nGLYPH<149> 8 x 8 Single-Cycle Hardware Multiplier\nGLYPH<149> Extended Watchdog Timer (WDT):\n-Programmable period from 41 ms to 131s\n-2% stability over VDD and Temperature\nGLYPH<149> Single-Supply 5V In-Circuit Serial ProgrammingGLYPH<153> (ICSPGLYPH<153>) via Two Pins\nGLYPH<149> In-Circuit Debug (ICD) via Two Pins\nGLYPH<149> Wide Operating Voltage Range: 2.0V to 5.5V",
    "Special Microcontroller Features:\nPIC18F2220, Program Memory.Flash (bytes) = 4096. PIC18F2220, Program Memory.# Single Word Instructions = 2048. PIC18F2220, Data Memory.SRAM (bytes) = 512. PIC18F2220, Data Memory.EEPROM (bytes) = 256. PIC18F2220, I/O. = 25. PIC18F2220, 10-Bit A/D (ch) = 10. PIC18F2220, CCP/ ECCP.(PWM) = 2/0. PIC18F2220, MSSP.SPI = Y. PIC18F2220, MSSP.Master I 2 CGLYPH<153> = Y. PIC18F2220, USART. = Y. PIC18F2220, Comparators = 2. PIC18F2220, Timers 8/16-bit = 2/3. PIC18F2320, Program Memory.Flash (bytes) = 8192. PIC18F2320, Program Memory.# Single Word Instructions = 4096. PIC18F2320, Data Memory.SRAM",
    "Special Microcontroller Features:\n(bytes) = 512. PIC18F2320, Data Memory.EEPROM (bytes) = 256. PIC18F2320, I/O. = 25. PIC18F2320, 10-Bit A/D (ch) = 10. PIC18F2320, CCP/ ECCP.(PWM) = 2/0. PIC18F2320, MSSP.SPI = Y. PIC18F2320, MSSP.Master I 2 CGLYPH<153> = Y. PIC18F2320, USART. = Y. PIC18F2320, Comparators = 2. PIC18F2320, Timers 8/16-bit = 2/3. PIC18F4220, Program Memory.Flash (bytes) = 4096. PIC18F4220, Program Memory.# Single Word Instructions = 2048. PIC18F4220, Data Memory.SRAM (bytes) = 512. PIC18F4220, Data Memory.EEPROM (bytes) = 256. PIC18F4220, I/O. = 36. PIC18F4220, 10-Bit A/D",
    "Special Microcontroller Features:\n(ch) = 13. PIC18F4220, CCP/ ECCP.(PWM) = 1/1. PIC18F4220, MSSP.SPI = Y. PIC18F4220, MSSP.Master I 2 CGLYPH<153> = Y. PIC18F4220, USART. = Y. PIC18F4220, Comparators = 2. PIC18F4220, Timers 8/16-bit = 2/3. PIC18F4320, Program Memory.Flash (bytes) = 8192. PIC18F4320, Program Memory.# Single Word Instructions = 4096. PIC18F4320, Data Memory.SRAM (bytes) = 512. PIC18F4320, Data Memory.EEPROM (bytes) = 256. PIC18F4320, I/O. = 36. PIC18F4320, 10-Bit A/D (ch) = 13. PIC18F4320, CCP/ ECCP.(PWM) = 1/1. PIC18F4320, MSSP.SPI = Y. PIC18F4320,",
    "Special Microcontroller Features:\nMSSP.Master I 2 CGLYPH<153> = Y. PIC18F4320, USART. = Y. PIC18F4320, Comparators = 2. PIC18F4320, Timers 8/16-bit = 2/3",
    "Table of Contents\n1.0, 1 = Device Overview ........................................................................................................................................................................... 1.0, 2 = 7. 2.0, 1 = Oscillator Configurations",
    "Table of Contents\n............................................................................................................................................................. 2.0, 2 = 19. 3.0, 1 = Power-Managed Modes",
    "Table of Contents\n.............................................................................................................................................................. 3.0, 2 = 29. 4.0, 1 =",
    "Table of Contents\nReset........................................................................................................................................................................................... 4.0, 2 = 43. 5.0, 1 = Memory",
    "Table of Contents\nOrganization.................................................................................................................................................................. 5.0, 2 = 53. 6.0, 1 = Flash Program",
    "Table of Contents\nMemory............................................................................................................................................................... 6.0, 2 = 71. 7.0, 1 = Data EEPROM Memory",
    "Table of Contents\n.............................................................................................................................................................. 7.0, 2 = 81. 8.0, 1 = 8 X 8 Hardware Multiplier",
    "Table of Contents\n............................................................................................................................................................ 8.0, 2 = 85. 9.0, 1 = Interrupts",
    "Table of Contents\n..................................................................................................................................................................................... 9.0, 2 = 87. 10.0, 1 = I/O Ports",
    "Table of Contents\n.................................................................................................................................................................................... 10.0, 2 = 101. 11.0, 1 = Timer0 Module",
    "Table of Contents\n.......................................................................................................................................................................... 11.0, 2 = 117. 12.0, 1 = Timer1 Module",
    "Table of Contents\n.......................................................................................................................................................................... 12.0, 2 = 121. 13.0, 1 = Timer2 Module",
    "Table of Contents\n.......................................................................................................................................................................... 13.0, 2 = 127. 14.0, 1 = Timer3 Module",
    "Table of Contents\n.......................................................................................................................................................................... 14.0, 2 = 129. 15.0, 1 = Capture/Compare/PWM (CCP) Modules",
    "Table of Contents\n.................................................................................................................................. 15.0, 2 = 133. 16.0, 1 = Enhanced Capture/Compare/PWM (ECCP)",
    "Table of Contents\nModule................................................................................................................. 16.0, 2 = 141. 17.0, 1 = Master Synchronous Serial Port (MSSP) Module",
    "Table of Contents\n..................................................................................................................... 17.0, 2 = 155. 18.0, 1 = Addressable Universal Synchronous Asynchronous Receiver Transmitter (USART)............................................................... 18.0, 2 = 195. 19.0, 1 = 10-bit Analog-to-Digital Converter (A/D)",
    "Table of Contents\nModule....................................................................................................................... 19.0, 2 = 211. 20.0, 1 = Comparator",
    "Table of Contents\nModule................................................................................................................................................................... 20.0, 2 = 221. 21.0, 1 = Comparator Voltage Reference",
    "Table of Contents\nModule.................................................................................................................................... 21.0, 2 = 227. 22.0, 1 = Low-Voltage Detect",
    "Table of Contents\n................................................................................................................................................................... 22.0, 2 = 231. 23.0, 1 = Special Features of the",
    "Table of Contents\nCPU..................................................................................................................................................... 23.0, 2 = 237. 24.0, 1 = Instruction Set",
    "Table of Contents\nSummary........................................................................................................................................................... 24.0, 2 = 257. 25.0, 1 = Development",
    "Table of Contents\nSupport................................................................................................................................................................ 25.0, 2 = 301. 26.0, 1 = Electrical Characteristics",
    "Table of Contents\n........................................................................................................................................................... 26.0, 2 = 305. 27.0, 1 = DC and AC Characteristics Graphs and",
    "Table of Contents\nTables........................................................................................................................ 27.0, 2 = 347. 28.0, 1 = Packaging",
    "Table of Contents\nInformation............................................................................................................................................................... 28.0, 2 = 365. Appendix A: Revision",
    "Table of Contents\nHistory............................................................................................................................................................., 1 = Appendix A: Revision",
    "Table of Contents\nHistory.............................................................................................................................................................. Appendix A: Revision",
    "Table of Contents\nHistory............................................................................................................................................................., 2 = 375. Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 1 = Appendix B: Device",
    "Table of Contents\nDifferences.......................................................................................................................................................... Appendix B: Device",
    "Table of Contents\nDifferences........................................................................................................................................................., 2 = 376. Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 1 = Appendix C: Conversion Considerations",
    "Table of Contents\n............................................................................................................................................ Appendix C: Conversion Considerations",
    "Table of Contents\n..........................................................................................................................................., 2 = 377. Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 1 = Appendix D: Migration from Baseline to Enhanced Devices............................................................................................................... Appendix D: Migration from Baseline to Enhanced",
    "Table of Contents\nDevices.............................................................................................................., 2 = 377. Appendix E: Migration from Mid-range to Enhanced Devices............................................................................................................, 1 = Appendix E: Migration from Mid-range to Enhanced",
    "Table of Contents\nDevices............................................................................................................. Appendix E: Migration from Mid-range to Enhanced Devices............................................................................................................, 2 = 378. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 1 = Appendix F: Migration from High-End to Enhanced Devices.............................................................................................................. Appendix F: Migration from High-End to Enhanced",
    "Table of Contents\nDevices............................................................................................................., 2 = 378. Index",
    "Table of Contents\n.................................................................................................................................................................................................., 1 = Index",
    "Table of Contents\n................................................................................................................................................................................................... Index",
    "Table of Contents\n.................................................................................................................................................................................................., 2 = 379. The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 1 = The Microchip Web",
    "Table of Contents\nSite...................................................................................................................................................................... The Microchip Web",
    "Table of Contents\nSite....................................................................................................................................................................., 2 = 389. Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 1 = Customer Change Notification Service",
    "Table of Contents\n............................................................................................................................................... Customer Change Notification Service",
    "Table of Contents\n.............................................................................................................................................., 2 = 389. Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 1 = Customer",
    "Table of Contents\nSupport............................................................................................................................................................................... Customer",
    "Table of Contents\nSupport.............................................................................................................................................................................., 2 = 389. Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................. PIC18F2220/2320/4220/4320 Product Identification System",
    "Table of Contents\n............................................................................................................, 1 = Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................. PIC18F2220/2320/4220/4320 Product Identification System",
    "Table of Contents\n............................................................................................................. Reader",
    "Table of Contents\nResponse.............................................................................................................................................................................. PIC18F2220/2320/4220/4320 Product Identification System",
    "Table of Contents\n............................................................................................................, 2 = 391",
    "TO OUR VALUED CUSTOMERS\nIt is our intention to provide our valued customers with the best documentation possible to ensure successful use of your Microchip products. To this end, we will continue to improve our publications to better suit your needs. Our publications will be refined and enhanced as new volumes and updates are introduced.\nIf you have any questions or comments regarding this publication, please contact the Marketing Communications Department via E-mail at docerrors@mail.microchip.com or fax the Reader Response Form in the back of this data sheet to (480) 792-4150. We welcome your feedback.",
    "Most Current Data Sheet\nTo obtain the most up-to-date version of this data sheet, please register at our Worldwide Web site at:\nhttp://www.microchip.com\nYou can determine the version of a data sheet by examining its literature number found on the bottom outside corner of any page. The last character of the literature number is the version number, (e.g., DS30000A is version A of document DS30000).",
    "Errata\nAn errata sheet, describing minor operational differences from the data sheet and recommended workarounds, may exist for current devices. As device/documentation issues become known to us, we will publish an errata sheet. The errata will specify the revision of silicon and revision of document to which it applies.\nTo determine if an errata sheet exists for a particular device, please check with one of the following:\nGLYPH<149> MicrochipGLYPH<146>s Worldwide Web site; http://www.microchip.com\nGLYPH<149> Your local Microchip sales office (see last page)\nGLYPH<149> The Microchip Corporate Literature Center; U.S. FAX: (480) 792-7277\nWhen contacting a sales office or the literature center, please specify which device, revision of silicon and data sheet (include literature number) you are using.",
    "Customer Notification System\nRegister on our web site at www.microchip.com/cn to receive the most current information on all of our products.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "1.0 DEVICE OVERVIEW\nThis document contains device-specific information for the following devices:\nGLYPH<149> PIC18F2220\nGLYPH<149> PIC18F4220\nGLYPH<149> PIC18F2320\nGLYPH<149> PIC18F4320\nThis family offers the advantages of all PIC18 microcontrollers GLYPH<150> namely, high computational performance at  an  economical  price  with  the  addition  of  highendurance Enhanced Flash program memory. On top of  these  features,  the  PIC18F2220/2320/4220/4320 family  introduces  design  enhancements  that  make these microcontrollers a logical choice for many high-performance, power sensitive applications.",
    "1.1.1 nanoWatt TECHNOLOGY\nAll of the devices in the PIC18F2220/2320/4220/4320 family incorporate a range of features that can significantly  reduce  power  consumption  during  operation. Key items include:\nGLYPH<149> Alternate Run Modes: By clocking the controller from the Timer1 source or the internal oscillator block, power consumption during code execution can be reduced by as much as 90%.\nGLYPH<149> Multiple Idle Modes: The controller can also run with its CPU core disabled, but the peripherals are still active. In these states, power consumption can be reduced even further, to as little as 4%, of normal operation requirements.\nGLYPH<149> On-the-Fly Mode Switching: The power-managed modes are invoked by user code during operation, allowing the user to incorporate power-saving ideas into their applicationGLYPH<146>s software design.\nGLYPH<149> Lower Consumption in Key Modules: The power requirements for both Timer1 and the Watchdog Timer have been reduced by up to 80%, with typical values of 1.8 and 2.2 \u03bc A, respectively.",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nAll of the devices in the PIC18F2220/2320/4220/4320 family  offer  nine  different  oscillator  options,  allowing users a wide range of choices in developing application hardware. These include:\nGLYPH<149> Four Crystal modes using crystals or ceramic resonators.\nGLYPH<149> Two External Clock modes offering the option of using two pins (oscillator input and a divide-by-4 clock output) or one pin (oscillator input with the second pin reassigned as general I/O).\nGLYPH<149> Two External RC Oscillator modes with the same pin options as the External Clock modes.\nGLYPH<149> An internal oscillator block, which provides a 31 kHz INTRC clock and an 8 MHz clock with 6 program selectable divider ratios (4 MHz to 125 kHz) for a total of 8 clock frequencies.\nBesides its availability as a clock source, the internal oscillator block provides a stable reference source that gives the family additional features for robust operation:",
    "1.1.2 MULTIPLE OSCILLATOR OPTIONS AND FEATURES\nGLYPH<149> Fail-Safe Clock Monitor: This option constantly monitors the main clock source against a reference signal provided by the internal oscillator. If a clock failure occurs, the controller is switched to the internal oscillator block, allowing for continued low-speed operation or a safe application shutdown.\nGLYPH<149> Two-Speed Start-up: This option allows the internal oscillator to serve as the clock source from Power-on Reset, or wake-up from Sleep mode, until the primary clock source is available. This allows for code execution during what would otherwise be the clock start-up interval and can even allow an application to perform routine background activities and return to Sleep without returning to full power operation.",
    "1.2 Other Special Features\nGLYPH<149> Memory Endurance: The Enhanced Flash cells for both program memory and data EEPROM are rated to last for many thousands of erase/write cycles GLYPH<150> up to 100,000 for program memory and 1,000,000 for EEPROM. Data retention without refresh is conservatively estimated to be greater than 40 years.\nGLYPH<149> Self-Programmability: These devices can write to their own program memory spaces under internal software control. By using a bootloader routine located in the protected Boot Block at the top of program memory, it becomes possible to create an application that can update itself in the field.\nGLYPH<149> Enhanced CCP Module: In PWM mode, this module provides 1, 2 or 4 modulated outputs for controlling half-bridge and full-bridge drivers. Other features include Auto-Shutdown for disabling PWM outputs on interrupt or other select conditions and Auto-Restart to reactivate outputs once the condition has cleared.",
    "1.2 Other Special Features\nGLYPH<149> Addressable USART: This serial communication module is capable of standard RS-232 operation using the internal oscillator block, removing the need for an external crystal (and its accompanying power requirement) in applications that talk to the outside world.\nGLYPH<149> 10-Bit A/D Converter: This module incorporates programmable acquisition time, allowing for a channel to be selected and a conversion to be initiated without waiting for a sampling period and thus, reduce code overhead.\nGLYPH<149> Extended Watchdog Timer (WDT): This enhanced version incorporates a 16-bit prescaler, allowing a time-out range from 4 ms to over 2 minutes, that is stable across operating voltage and temperature.",
    "1.3 Details on Individual Family Members\n- 3. I/O ports (3 bidirectional ports and 1 input only port  on  PIC18F2X20  devices,  5  bidirectional ports on PIC18F4X20 devices)\nDevices in the PIC18F2220/2320/4220/4320 family are available in 28-pin (PIC18F2X20) and 40/44-pin (PIC18F4X20) packages. Block diagrams for the two groups are shown in Figure 1-1 and Figure 1-2.\nThe devices are differentiated from each other in five ways:\n1. Flash program memory (4 Kbytes for PIC18FX220 devices, 8 Kbytes for PIC18FX320)\n2. A/D channels (10 for PIC18F2X20 devices, 13 for PIC18F4X20 devices)\n4. CCP and Enhanced CCP implementation (PIC18F2X20  devices  have  2  standard  CCP modules, PIC18F4X20 devices have one standard CCP module and one ECCP module)\n5. Parallel Slave Port (present only on PIC18F4X20 devices)",
    "1.3 Details on Individual Family Members\nAll other features for devices in this family are identical. These are summarized in Table 1-1.\nThe pinouts for all devices are listed in Table 1-2 and Table 1-3.",
    "TABLE 1-1: DEVICE FEATURES\nOperating Frequency, PIC18F2220 = DC GLYPH<150> 40 MHz. Operating Frequency, PIC18F2320 = DC GLYPH<150> 40 MHz. Operating Frequency, PIC18F4220 = DC GLYPH<150> 40 MHz. Operating Frequency, PIC18F4320 = DC GLYPH<150> 40 MHz. Program Memory (Bytes), PIC18F2220 = 4096. Program Memory (Bytes), PIC18F2320 = 8192. Program Memory (Bytes), PIC18F4220 = 4096. Program Memory (Bytes), PIC18F4320 = 8192. Program Memory (Instructions), PIC18F2220 = 2048. Program Memory (Instructions), PIC18F2320 = 4096. Program Memory (Instructions), PIC18F4220 = 2048. Program Memory (Instructions), PIC18F4320 = 4096. Data Memory (Bytes), PIC18F2220 = 512. Data Memory (Bytes), PIC18F2320 = 512. Data Memory (Bytes), PIC18F4220 = 512. Data Memory",
    "TABLE 1-1: DEVICE FEATURES\n(Bytes), PIC18F4320 = 512. Data EEPROM Memory (Bytes), PIC18F2220 = 256. Data EEPROM Memory (Bytes), PIC18F2320 = 256. Data EEPROM Memory (Bytes), PIC18F4220 = 256. Data EEPROM Memory (Bytes), PIC18F4320 = 256. Interrupt Sources, PIC18F2220 = 19. Interrupt Sources, PIC18F2320 = 19. Interrupt Sources, PIC18F4220 = 20. Interrupt Sources, PIC18F4320 = 20. I/O Ports, PIC18F2220 = Ports A, B, C (E). I/O Ports, PIC18F2320 = Ports A, B, C (E). I/O Ports, PIC18F4220 = Ports A, B, C, D, E. I/O Ports, PIC18F4320 = Ports A, B, C, D, E. Timers, PIC18F2220 = 4. Timers, PIC18F2320 = 4. Timers, PIC18F4220 = 4. Timers,",
    "TABLE 1-1: DEVICE FEATURES\nPIC18F4320 = 4. Capture/Compare/PWM Modules, PIC18F2220 = 2. Capture/Compare/PWM Modules, PIC18F2320 = 2. Capture/Compare/PWM Modules, PIC18F4220 = 1. Capture/Compare/PWM Modules, PIC18F4320 = 1. Enhanced Capture/ Compare/PWM Modules, PIC18F2220 = 0. Enhanced Capture/ Compare/PWM Modules, PIC18F2320 = 0. Enhanced Capture/ Compare/PWM Modules, PIC18F4220 = 1. Enhanced Capture/ Compare/PWM Modules, PIC18F4320 = 1. Serial Communications, PIC18F2220 = MSSP, Addressable USART. Serial Communications, PIC18F2320 = MSSP, Addressable USART. Serial Communications, PIC18F4220 = MSSP, Addressable USART. Serial Communications, PIC18F4320 = MSSP, Addressable USART. Parallel Communications (PSP), PIC18F2220 = No. Parallel Communications (PSP), PIC18F2320 = No. Parallel Communications",
    "TABLE 1-1: DEVICE FEATURES\n(PSP), PIC18F4220 = Yes. Parallel Communications (PSP), PIC18F4320 = Yes. 10-Bit Analog-to-Digital Module, PIC18F2220 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F2320 = 10 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4220 = 13 Input Channels. 10-Bit Analog-to-Digital Module, PIC18F4320 = 13 Input Channels. Resets (and Delays), PIC18F2220 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F2320 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and Delays), PIC18F4220 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Resets (and",
    "TABLE 1-1: DEVICE FEATURES\nDelays), PIC18F4320 = POR, BOR, RESET Instruction, Stack Full, Stack Underflow (PWRT, OST), MCLR (optional), WDT. Programmable Low-Voltage Detect, PIC18F2220 = Yes. Programmable Low-Voltage Detect, PIC18F2320 = Yes. Programmable Low-Voltage Detect, PIC18F4220 = Yes. Programmable Low-Voltage Detect, PIC18F4320 = Yes. Programmable Brown-out Reset, PIC18F2220 = Yes. Programmable Brown-out Reset, PIC18F2320 = Yes. Programmable Brown-out Reset, PIC18F4220 = Yes. Programmable Brown-out Reset, PIC18F4320 = Yes. Instruction Set, PIC18F2220 = 75 Instructions. Instruction Set, PIC18F2320 = 75 Instructions. Instruction Set, PIC18F4220 = 75 Instructions. Instruction Set, PIC18F4320 = 75 Instructions. Packages, PIC18F2220 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F2320 = 28-Pin SPDIP 28-Pin SOIC. Packages,",
    "TABLE 1-1: DEVICE FEATURES\nPIC18F4220 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN. Packages, PIC18F4320 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN",
    "FIGURE 1-1: PIC18F2220/2320 BLOCK DIAGRAM\nNote 1: Optional multiplexing of CCP2 input/output with RB3 is enabled by selection of the CCPMX2 Configuration bit.\n2: OSC1, OSC2, CLKI and CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 GLYPH<147>Oscillator ConfigurationsGLYPH<148> for additional information.",
    "FIGURE 1-2: PIC18F4220/4320 BLOCK DIAGRAM\nNote\n1: Optional multiplexing of CCP2 input/output with RB3 is enabled by selection of the CCP2MX Configuration bit.\n2: RE3 is available only when the MCLR Resets are disabled.\n3: OSC1, OSC2, CLKI and CLKO are only available in select oscillator modes and when these pins are not being used as digital I/O. Refer to Section 2.0 GLYPH<147>Oscillator ConfigurationsGLYPH<148> for additional information.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nMCLR/VPP, Pin Number.PDIP = 1. MCLR/VPP, Pin Number.SOIC = 1. MCLR/VPP, Pin.Type = . MCLR/VPP, Buffer.Type = . MCLR/VPP, Description = Master Clear (input) or programming voltage (input).. MCLR, Pin Number.PDIP = . MCLR, Pin Number.SOIC = . MCLR, Pin.Type = I. MCLR, Buffer.Type = ST. MCLR, Description = Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP, Pin Number.PDIP = . VPP, Pin Number.SOIC = . VPP, Pin.Type = P. VPP, Buffer.Type = . VPP, Description = Programming voltage input.. OSC1/CLKI/RA7, Pin Number.PDIP = 9. OSC1/CLKI/RA7, Pin Number.SOIC = 9. OSC1/CLKI/RA7, Pin.Type = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nOSC1/CLKI/RA7, Buffer.Type = . OSC1/CLKI/RA7, Description = Oscillator crystal or external clock input.. OSC1, Pin Number.PDIP = . OSC1, Pin Number.SOIC = . OSC1, Pin.Type = I. OSC1, Buffer.Type = ST. OSC1, Description = Oscillator crystal input or external clock source input. ST buffer when configured in RC mode, CMOSotherwise.. CLKI, Pin Number.PDIP = . CLKI, Pin Number.SOIC = . CLKI, Pin.Type = I. CLKI, Buffer.Type = CMOS. CLKI, Description = External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.). RA7, Pin Number.PDIP = . RA7, Pin Number.SOIC = . RA7, Pin.Type = I/O. RA7, Buffer.Type = TTL. RA7, Description = General",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\npurpose I/O pin.. OSC2/CLKO/RA6, Pin Number.PDIP = 10. OSC2/CLKO/RA6, Pin Number.SOIC = 10. OSC2/CLKO/RA6, Pin.Type = . OSC2/CLKO/RA6, Buffer.Type = . OSC2/CLKO/RA6, Description = Oscillator crystal or clock output.. OSC2, Pin Number.PDIP = . OSC2, Pin Number.SOIC = . OSC2, Pin.Type = O. OSC2, Buffer.Type = GLYPH<151>. OSC2, Description = Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. CLKO, Pin Number.PDIP = . CLKO, Pin Number.SOIC = . CLKO, Pin.Type = O. CLKO, Buffer.Type = GLYPH<151>. CLKO, Description = In RC mode, OSC2 pin outputs CLKO which has 1/4 the frequency",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nof OSC1 and denotes the instruction cycle rate.. RA6, Pin Number.PDIP = . RA6, Pin Number.SOIC = . RA6, Pin.Type = I/O. RA6, Buffer.Type = TTL. RA6, Description = General purpose I/O pin.. , Pin Number.PDIP = . , Pin Number.SOIC = . , Pin.Type = . , Buffer.Type = . , Description = PORTA is a bidirectional I/O port.. RA0/AN0, Pin Number.PDIP = 2. RA0/AN0, Pin Number.SOIC = 2. RA0/AN0, Pin.Type = . RA0/AN0, Buffer.Type = . RA0/AN0, Description = . RA0, Pin Number.PDIP = . RA0, Pin Number.SOIC = . RA0, Pin.Type = I/O. RA0, Buffer.Type = TTL. RA0, Description = Digital I/O.. AN0, Pin Number.PDIP = . AN0, Pin",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nNumber.SOIC = . AN0, Pin.Type = I. AN0, Buffer.Type = Analog. AN0, Description = Analog input 0.. RA1/AN1, Pin Number.PDIP = 3. RA1/AN1, Pin Number.SOIC = 3. RA1/AN1, Pin.Type = . RA1/AN1, Buffer.Type = . RA1/AN1, Description = . RA1, Pin Number.PDIP = . RA1, Pin Number.SOIC = . RA1, Pin.Type = I/O. RA1, Buffer.Type = TTL. RA1, Description = Digital I/O.. AN1, Pin Number.PDIP = . AN1, Pin Number.SOIC = . AN1, Pin.Type = I. AN1, Buffer.Type = Analog. AN1, Description = Analog input 1.. RA2/AN2/VREF-/CVREF, Pin Number.PDIP = 4. RA2/AN2/VREF-/CVREF, Pin Number.SOIC = 4.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nRA2/AN2/VREF-/CVREF, Pin.Type = . RA2/AN2/VREF-/CVREF, Buffer.Type = . RA2/AN2/VREF-/CVREF, Description = . RA2, Pin Number.PDIP = . RA2, Pin Number.SOIC = . RA2, Pin.Type = I/O. RA2, Buffer.Type = TTL. RA2, Description = Digital I/O.. AN2, Pin Number.PDIP = . AN2, Pin Number.SOIC = . AN2, Pin.Type = I. AN2, Buffer.Type = Analog. AN2, Description = Analog input 2.. VREF-, Pin Number.PDIP = . VREF-, Pin Number.SOIC = . VREF-, Pin.Type = I. VREF-, Buffer.Type = Analog. VREF-, Description = A/D reference voltage (low) input.. CVREF, Pin Number.PDIP = . CVREF, Pin Number.SOIC = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nCVREF, Pin.Type = O. CVREF, Buffer.Type = Analog. CVREF, Description = Comparator reference voltage output.. RA3/AN3/VREF+, Pin Number.PDIP = 5. RA3/AN3/VREF+, Pin Number.SOIC = 5. RA3/AN3/VREF+, Pin.Type = . RA3/AN3/VREF+, Buffer.Type = . RA3/AN3/VREF+, Description = . RA3, Pin Number.PDIP = . RA3, Pin Number.SOIC = . RA3, Pin.Type = I/O. RA3, Buffer.Type = TTL. RA3, Description = Digital I/O.. AN3, Pin Number.PDIP = . AN3, Pin Number.SOIC = . AN3, Pin.Type = I. AN3, Buffer.Type = Analog. AN3, Description = Analog input 3.. VREF+, Pin Number.PDIP = . VREF+, Pin Number.SOIC = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nVREF+, Pin.Type = I. VREF+, Buffer.Type = Analog. VREF+, Description = A/D reference voltage (high) input.. RA4/T0CKI/C1OUT, Pin Number.PDIP = 6. RA4/T0CKI/C1OUT, Pin Number.SOIC = 6. RA4/T0CKI/C1OUT, Pin.Type = . RA4/T0CKI/C1OUT, Buffer.Type = . RA4/T0CKI/C1OUT, Description = . RA4, Pin Number.PDIP = . RA4, Pin Number.SOIC = . RA4, Pin.Type = I/O. RA4, Buffer.Type = ST/OD. RA4, Description = Digital I/O. Open drain when configured as output.. T0CKI, Pin Number.PDIP = . T0CKI, Pin Number.SOIC = . T0CKI, Pin.Type = I. T0CKI, Buffer.Type = ST. T0CKI, Description = Timer0 external clock input.. C1OUT, Pin",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nNumber.PDIP = . C1OUT, Pin Number.SOIC = . C1OUT, Pin.Type = O. C1OUT, Buffer.Type = GLYPH<151>. C1OUT, Description = Comparator 1 output.. RA5/AN4/SS/LVDIN/C2OUT, Pin Number.PDIP = 7. RA5/AN4/SS/LVDIN/C2OUT, Pin Number.SOIC = 7. RA5/AN4/SS/LVDIN/C2OUT, Pin.Type = . RA5/AN4/SS/LVDIN/C2OUT, Buffer.Type = . RA5/AN4/SS/LVDIN/C2OUT, Description = . RA5, Pin Number.PDIP = . RA5, Pin Number.SOIC = . RA5, Pin.Type = I/O. RA5, Buffer.Type = TTL. RA5, Description = Digital I/O.. AN4, Pin Number.PDIP = . AN4, Pin Number.SOIC = . AN4, Pin.Type = I.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nAN4, Buffer.Type = Analog. AN4, Description = Analog input 4.. SS, Pin Number.PDIP = . SS, Pin Number.SOIC = . SS, Pin.Type = I. SS, Buffer.Type = TTL. SS, Description = SPI slave select input.. LVDIN, Pin Number.PDIP = . LVDIN, Pin Number.SOIC = . LVDIN, Pin.Type = I. LVDIN, Buffer.Type = Analog. LVDIN, Description = Low-Voltage Detect input.. C2OUT, Pin Number.PDIP = . C2OUT, Pin Number.SOIC = . C2OUT, Pin.Type = O. C2OUT, Buffer.Type = GLYPH<151>. C2OUT, Description = Comparator 2 output.. RA6, Pin Number.PDIP = . RA6, Pin Number.SOIC = . RA6, Pin.Type = . RA6, Buffer.Type = . RA6, Description = See the OSC2/CLKO/RA6 pin.. RA7, Pin",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS\nNumber.PDIP = . RA7, Pin Number.SOIC = . RA7, Pin.Type = . RA7, Buffer.Type = . RA7, Description = See the OSC1/CLKI/RA7 pin.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\n- O = Output\nI\n= Input\nP = Power\nOD = Open-drain (no diode to VDD)\nNote 1:\nAlternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n, Pin Number.PDIP = . , Pin Number.SOIC = . , Pin.Type = . , Buffer.Type = . , Description = PORTB is a bidirectional I/O port. PORTB can be software programmed for internal weak pull-ups on all inputs.. RB0/AN12/INT0, Pin Number.PDIP = 21. RB0/AN12/INT0, Pin Number.SOIC = 21. RB0/AN12/INT0, Pin.Type = . RB0/AN12/INT0, Buffer.Type = . RB0/AN12/INT0, Description = . RB0, Pin Number.PDIP = . RB0, Pin Number.SOIC = . RB0, Pin.Type = I/O. RB0, Buffer.Type = TTL. RB0, Description = Digital I/O.. AN12, Pin Number.PDIP = . AN12, Pin Number.SOIC = . AN12, Pin.Type = I. AN12, Buffer.Type = Analog. AN12, Description = Analog input",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n12.. INT0, Pin Number.PDIP = . INT0, Pin Number.SOIC = . INT0, Pin.Type = I. INT0, Buffer.Type = ST. INT0, Description = External interrupt 0.. RB1/AN10/INT1, Pin Number.PDIP = 22. RB1/AN10/INT1, Pin Number.SOIC = 22. RB1/AN10/INT1, Pin.Type = . RB1/AN10/INT1, Buffer.Type = . RB1/AN10/INT1, Description = . RB1, Pin Number.PDIP = . RB1, Pin Number.SOIC = . RB1, Pin.Type = I/O. RB1, Buffer.Type = TTL. RB1, Description = Digital I/O.. AN10, Pin Number.PDIP = . AN10, Pin Number.SOIC = . AN10, Pin.Type = I. AN10, Buffer.Type = Analog. AN10, Description = Analog input 10.. INT1, Pin Number.PDIP =",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. INT1, Pin Number.SOIC = . INT1, Pin.Type = I. INT1, Buffer.Type = ST. INT1, Description = External interrupt 1.. RB2/AN8/INT2, Pin Number.PDIP = 23. RB2/AN8/INT2, Pin Number.SOIC = 23. RB2/AN8/INT2, Pin.Type = . RB2/AN8/INT2, Buffer.Type = . RB2/AN8/INT2, Description = . RB2, Pin Number.PDIP = . RB2, Pin Number.SOIC = . RB2, Pin.Type = I/O. RB2, Buffer.Type = TTL. RB2, Description = Digital I/O.. AN8, Pin Number.PDIP = . AN8, Pin Number.SOIC = . AN8, Pin.Type = I. AN8, Buffer.Type = Analog. AN8, Description = Analog input 8.. INT2, Pin Number.PDIP = . INT2, Pin Number.SOIC = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nINT2, Pin.Type = I. INT2, Buffer.Type = ST. INT2, Description = External interrupt 2.. RB3/AN9/CCP2, Pin Number.PDIP = 24. RB3/AN9/CCP2, Pin Number.SOIC = 24. RB3/AN9/CCP2, Pin.Type = . RB3/AN9/CCP2, Buffer.Type = . RB3/AN9/CCP2, Description = . RB3, Pin Number.PDIP = . RB3, Pin Number.SOIC = . RB3, Pin.Type = I/O. RB3, Buffer.Type = TTL. RB3, Description = Digital I/O.. AN9, Pin Number.PDIP = . AN9, Pin Number.SOIC = . AN9, Pin.Type = I. AN9, Buffer.Type = Analog. AN9, Description = Analog input 9.. CCP2 (1), Pin Number.PDIP = . CCP2 (1), Pin Number.SOIC =",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n. CCP2 (1), Pin.Type = I/O. CCP2 (1), Buffer.Type = ST. CCP2 (1), Description = Capture 2 input, Compare 2 output, PWM2 output.. RB4/AN11/KBI0, Pin Number.PDIP = 25. RB4/AN11/KBI0, Pin Number.SOIC = 25. RB4/AN11/KBI0, Pin.Type = . RB4/AN11/KBI0, Buffer.Type = . RB4/AN11/KBI0, Description = . RB4, Pin Number.PDIP = . RB4, Pin Number.SOIC = . RB4, Pin.Type = I/O. RB4, Buffer.Type = TTL. RB4, Description = Digital I/O.. AN11, Pin Number.PDIP = . AN11, Pin Number.SOIC = . AN11, Pin.Type = I. AN11, Buffer.Type = Analog. AN11, Description = Analog input 11..",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nKBI0, Pin Number.PDIP = . KBI0, Pin Number.SOIC = . KBI0, Pin.Type = I. KBI0, Buffer.Type = TTL. KBI0, Description = Interrupt-on-change pin.. RB5/KBI1/PGM, Pin Number.PDIP = 26. RB5/KBI1/PGM, Pin Number.SOIC = 26. RB5/KBI1/PGM, Pin.Type = . RB5/KBI1/PGM, Buffer.Type = . RB5/KBI1/PGM, Description = . RB5, Pin Number.PDIP = . RB5, Pin Number.SOIC = . RB5, Pin.Type = I/O. RB5, Buffer.Type = TTL. RB5, Description = Digital I/O.. KBI1, Pin Number.PDIP = . KBI1, Pin Number.SOIC = . KBI1, Pin.Type = I. KBI1, Buffer.Type = TTL.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nKBI1, Description = Interrupt-on-change pin.. PGM, Pin Number.PDIP = . PGM, Pin Number.SOIC = . PGM, Pin.Type = I/O. PGM, Buffer.Type = ST. PGM, Description = Low-voltage ICSPGLYPH<153> programming enable pin.. RB6/KBI2/PGC, Pin Number.PDIP = 27. RB6/KBI2/PGC, Pin Number.SOIC = 27. RB6/KBI2/PGC, Pin.Type = . RB6/KBI2/PGC, Buffer.Type = . RB6/KBI2/PGC, Description = . RB6, Pin Number.PDIP = . RB6, Pin Number.SOIC = . RB6, Pin.Type = I/O. RB6, Buffer.Type = TTL. RB6, Description = Digital I/O.. KBI2, Pin Number.PDIP = . KBI2, Pin Number.SOIC = . KBI2, Pin.Type",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= I. KBI2, Buffer.Type = TTL. KBI2, Description = Interrupt-on-change pin.. PGC, Pin Number.PDIP = . PGC, Pin Number.SOIC = . PGC, Pin.Type = I/O. PGC, Buffer.Type = ST. PGC, Description = In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD, Pin Number.PDIP = 28. RB7/KBI3/PGD, Pin Number.SOIC = 28. RB7/KBI3/PGD, Pin.Type = . RB7/KBI3/PGD, Buffer.Type = . RB7/KBI3/PGD, Description = . RB7, Pin Number.PDIP = . RB7, Pin Number.SOIC = . RB7, Pin.Type = I/O. RB7, Buffer.Type = TTL. RB7, Description = Digital I/O.. KBI3, Pin Number.PDIP = . KBI3, Pin",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.SOIC = . KBI3, Pin.Type = I. KBI3, Buffer.Type = TTL. KBI3, Description = Interrupt-on-change pin.. PGD, Pin Number.PDIP = . PGD, Pin Number.SOIC = . PGD, Pin.Type = I/O. PGD, Buffer.Type = ST. PGD, Description = In-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO\n= Output\nP\n= Power\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n- 2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T1CKI, Pin Number.PDIP = 11. RC0/T1OSO/T1CKI, Pin Number.SOIC = 11. RC0/T1OSO/T1CKI, Pin.Type = . RC0/T1OSO/T1CKI, Buffer.Type = . RC0/T1OSO/T1CKI, Description = PORTC is a bidirectional I/O port.. RC0, Pin Number.PDIP = . RC0, Pin Number.SOIC = . RC0, Pin.Type = I/O. RC0, Buffer.Type = ST. RC0, Description = Digital I/O.. T1OSO, Pin Number.PDIP = . T1OSO, Pin Number.SOIC = . T1OSO, Pin.Type = O. T1OSO, Buffer.Type = GLYPH<151>. T1OSO, Description = Timer1 oscillator output.. T1CKI, Pin Number.PDIP = . T1CKI, Pin Number.SOIC = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nT1CKI, Pin.Type = I. T1CKI, Buffer.Type = ST. T1CKI, Description = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.PDIP = 12. RC1/T1OSI/CCP2, Pin Number.SOIC = 12. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer.Type = . RC1/T1OSI/CCP2, Description = . RC1, Pin Number.PDIP = . RC1, Pin Number.SOIC = . RC1, Pin.Type = I/O. RC1, Buffer.Type = ST. RC1, Description = Digital I/O.. T1OSI, Pin Number.PDIP = . T1OSI, Pin Number.SOIC = . T1OSI, Pin.Type = I. T1OSI, Buffer.Type = CMOS. T1OSI, Description = Timer1 oscillator input.. CCP2",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n(2), Pin Number.PDIP = . CCP2 (2), Pin Number.SOIC = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer.Type = ST. CCP2 (2), Description = Capture 2 input, Compare 2 output, PWM2 output.. RC2/CCP1/P1A, Pin Number.PDIP = 13. RC2/CCP1/P1A, Pin Number.SOIC = 13. RC2/CCP1/P1A, Pin.Type = . RC2/CCP1/P1A, Buffer.Type = . RC2/CCP1/P1A, Description = . RC2, Pin Number.PDIP = . RC2, Pin Number.SOIC = . RC2, Pin.Type = I/O. RC2, Buffer.Type = ST. RC2, Description = Digital I/O.. CCP1, Pin Number.PDIP = . CCP1, Pin Number.SOIC = .",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nCCP1, Pin.Type = I/O. CCP1, Buffer.Type = ST. CCP1, Description = Capture 1 input/Compare 1 output/PWM1 output.. P1A, Pin Number.PDIP = . P1A, Pin Number.SOIC = . P1A, Pin.Type = O. P1A, Buffer.Type = GLYPH<151>. P1A, Description = Enhanced CCP1 output.. RC3/SCK/SCL, Pin Number.PDIP = 14. RC3/SCK/SCL, Pin Number.SOIC = 14. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer.Type = . RC3/SCK/SCL, Description = . RC3, Pin Number.PDIP = . RC3, Pin Number.SOIC = . RC3, Pin.Type = I/O. RC3, Buffer.Type = ST. RC3, Description = Digital I/O.. SCK, Pin",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = . SCK, Pin Number.SOIC = . SCK, Pin.Type = I/O. SCK, Buffer.Type = ST. SCK, Description = Synchronous serial clock input/output for SPI mode.. SCL, Pin Number.PDIP = . SCL, Pin Number.SOIC = . SCL, Pin.Type = I/O. SCL, Buffer.Type = ST. SCL, Description = Synchronous serial clock input/output for I 2 CGLYPH<153> mode.. RC4/SDI/SDA, Pin Number.PDIP = 15. RC4/SDI/SDA, Pin Number.SOIC = 15. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer.Type = . RC4/SDI/SDA, Description = . RC4, Pin Number.PDIP = . RC4, Pin Number.SOIC = . RC4, Pin.Type = I/O. RC4, Buffer.Type =",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nST. RC4, Description = Digital I/O.. SDI, Pin Number.PDIP = . SDI, Pin Number.SOIC = . SDI, Pin.Type = I. SDI, Buffer.Type = ST. SDI, Description = SPI data in.. SDA, Pin Number.PDIP = . SDA, Pin Number.SOIC = . SDA, Pin.Type = I/O. SDA, Buffer.Type = ST. SDA, Description = I 2 C data I/O.. RC5/SDO, Pin Number.PDIP = 16. RC5/SDO, Pin Number.SOIC = 16. RC5/SDO, Pin.Type = . RC5/SDO, Buffer.Type = . RC5/SDO, Description = . RC5, Pin Number.PDIP = . RC5, Pin Number.SOIC = . RC5, Pin.Type = I/O. RC5, Buffer.Type = ST. RC5, Description = Digital I/O.. SDO, Pin Number.PDIP",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . SDO, Pin Number.SOIC = . SDO, Pin.Type = O. SDO, Buffer.Type = GLYPH<151>. SDO, Description = SPI data out.. RC6/TX/CK, Pin Number.PDIP = 17. RC6/TX/CK, Pin Number.SOIC = 17. RC6/TX/CK, Pin.Type = . RC6/TX/CK, Buffer.Type = . RC6/TX/CK, Description = . RC6, Pin Number.PDIP = . RC6, Pin Number.SOIC = . RC6, Pin.Type = I/O. RC6, Buffer.Type = ST. RC6, Description = Digital I/O.. TX, Pin Number.PDIP = . TX, Pin Number.SOIC = . TX, Pin.Type = O. TX, Buffer.Type = GLYPH<151>. TX, Description = USART asynchronous transmit.. CK, Pin Number.PDIP = . CK, Pin Number.SOIC = . CK,",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = I/O. CK, Buffer.Type = ST. CK, Description = USART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.PDIP = 18. RC7/RX/DT, Pin Number.SOIC = 18. RC7/RX/DT, Pin.Type = . RC7/RX/DT, Buffer.Type = . RC7/RX/DT, Description = . RC7, Pin Number.PDIP = . RC7, Pin Number.SOIC = . RC7, Pin.Type = I/O. RC7, Buffer.Type = ST. RC7, Description = Digital I/O.. RX, Pin Number.PDIP = . RX, Pin Number.SOIC = . RX, Pin.Type = I. RX, Buffer.Type = ST. RX, Description = USART asynchronous receive.. DT, Pin Number.PDIP = . DT, Pin Number.SOIC = . DT, Pin.Type =",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O. DT, Buffer.Type = ST. DT, Description = USART synchronous data (see related TX/CK).. VSS, Pin Number.PDIP = 8, 19. VSS, Pin Number.SOIC = 8, 19. VSS, Pin.Type = P. VSS, Buffer.Type = GLYPH<151>. VSS, Description = Ground reference for logic and I/O pins.. VDD, Pin Number.PDIP = 20. VDD, Pin Number.SOIC = 20. VDD, Pin.Type = P. VDD, Buffer.Type = GLYPH<151>. VDD, Description = Positive supply for logic and I/O pins.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP\n= Power\nOD = Open-drain (no diode to VDD)\nNote 1:",
    "TABLE 1-2: PIC18F2220/2320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAlternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nMCLR/VPP/RE3 MCLR, Pin Number.PDIP = 1. MCLR/VPP/RE3 MCLR, Pin Number.TQFP = 18. MCLR/VPP/RE3 MCLR, Pin Number.QFN = 18. MCLR/VPP/RE3 MCLR, Pin Type.Pin Type = I. MCLR/VPP/RE3 MCLR, Buffer.Buffer = ST. MCLR/VPP/RE3 MCLR, Type.Type = Master Clear (input) or programming voltage (input). Master Clear (Reset) input. This pin is an active-low Reset to the device.. VPP RE3, Pin Number.PDIP = . VPP RE3, Pin Number.TQFP = . VPP RE3, Pin Number.QFN = . VPP RE3, Pin Type.Pin Type = P I. VPP RE3, Buffer.Buffer = ST. VPP RE3, Type.Type = Programming voltage input. Digital input.. OSC1/CLKI/RA7 OSC1, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nNumber.PDIP = 13. OSC1/CLKI/RA7 OSC1, Pin Number.TQFP = 30. OSC1/CLKI/RA7 OSC1, Pin Number.QFN = 32. OSC1/CLKI/RA7 OSC1, Pin Type.Pin Type = I. OSC1/CLKI/RA7 OSC1, Buffer.Buffer = ST. OSC1/CLKI/RA7 OSC1, Type.Type = Oscillator crystal or external clock input. Oscillator crystal input or external clock source input. ST buffer when configured in RCmode, CMOSotherwise.. CLKI, Pin Number.PDIP = . CLKI, Pin Number.TQFP = . CLKI, Pin Number.QFN = . CLKI, Pin Type.Pin Type = I. CLKI, Buffer.Buffer = CMOS. CLKI, Type.Type = External clock source input. Always associated with pin function OSC1. (See related OSC1/CLKI, OSC2/CLKO pins.).",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nRA7, Pin Number.PDIP = . RA7, Pin Number.TQFP = . RA7, Pin Number.QFN = . RA7, Pin Type.Pin Type = I/O. RA7, Buffer.Buffer = TTL. RA7, Type.Type = General purpose I/O pin.. OSC2/CLKO/RA6 OSC2, Pin Number.PDIP = 14. OSC2/CLKO/RA6 OSC2, Pin Number.TQFP = 31. OSC2/CLKO/RA6 OSC2, Pin Number.QFN = 33. OSC2/CLKO/RA6 OSC2, Pin Type.Pin Type = O. OSC2/CLKO/RA6 OSC2, Buffer.Buffer = GLYPH<151>. OSC2/CLKO/RA6 OSC2, Type.Type = Oscillator crystal or clock output. Oscillator crystal output. Connects to crystal or resonator in Crystal Oscillator mode.. , Pin Number.PDIP = CLKO.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\n, Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = O. , Buffer.Buffer = GLYPH<151>. , Type.Type = In RCmode, OSC2 pin outputs CLKO which has 1/4 the frequency of OSC1 and denotes the instruction cycle rate.. RA6, Pin Number.PDIP = . RA6, Pin Number.TQFP = . RA6, Pin Number.QFN = . RA6, Pin Type.Pin Type = I/O. RA6, Buffer.Buffer = . RA6, Type.Type = General purpose I/O pin.. , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = . , Buffer.Buffer = TTL. , Type.Type = PORTA is a bidirectional I/O port.. RA0/AN0 RA0 AN0, Pin Number.PDIP = 2. RA0/AN0 RA0 AN0, Pin Number.TQFP = 19.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nRA0/AN0 RA0 AN0, Pin Number.QFN = 19. RA0/AN0 RA0 AN0, Pin Type.Pin Type = I/O I. RA0/AN0 RA0 AN0, Buffer.Buffer = TTL Analog. RA0/AN0 RA0 AN0, Type.Type = Digital I/O. Analog input 0.. RA1/AN1 RA1 AN1, Pin Number.PDIP = 3. RA1/AN1 RA1 AN1, Pin Number.TQFP = 20. RA1/AN1 RA1 AN1, Pin Number.QFN = 20. RA1/AN1 RA1 AN1, Pin Type.Pin Type = I/O I. RA1/AN1 RA1 AN1, Buffer.Buffer = TTL Analog. RA1/AN1 RA1 AN1, Type.Type = Digital I/O. Analog input 1.. RA2/AN2/VREF-/CVREF RA2 AN2, Pin Number.PDIP = 4.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nRA2/AN2/VREF-/CVREF RA2 AN2, Pin Number.TQFP = 21. RA2/AN2/VREF-/CVREF RA2 AN2, Pin Number.QFN = 21. RA2/AN2/VREF-/CVREF RA2 AN2, Pin Type.Pin Type = I/O I I. RA2/AN2/VREF-/CVREF RA2 AN2, Buffer.Buffer = TTL Analog Analog. RA2/AN2/VREF-/CVREF RA2 AN2, Type.Type = Digital I/O. Analog input 2. A/D reference voltage (low) input.. CVREF RA3/AN3/VREF+ RA3, Pin Number.PDIP = . CVREF RA3/AN3/VREF+ RA3, Pin Number.TQFP = 22. CVREF RA3/AN3/VREF+ RA3, Pin Number.QFN = . CVREF RA3/AN3/VREF+ RA3, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nType.Pin Type = I/O I. CVREF RA3/AN3/VREF+ RA3, Buffer.Buffer = TTL Analog. CVREF RA3/AN3/VREF+ RA3, Type.Type = Digital I/O. Analog input 3.. RA4/T0CKI/C1OUT RA4 T0CKI, Pin Number.PDIP = 6. RA4/T0CKI/C1OUT RA4 T0CKI, Pin Number.TQFP = 23. RA4/T0CKI/C1OUT RA4 T0CKI, Pin Number.QFN = 23. RA4/T0CKI/C1OUT RA4 T0CKI, Pin Type.Pin Type = I/O. RA4/T0CKI/C1OUT RA4 T0CKI, Buffer.Buffer = ST/OD. RA4/T0CKI/C1OUT RA4 T0CKI, Type.Type = Digital I/O. Open drain when configured as output. Timer0 external clock input.. RA5/AN4/SS/LVDIN/ C2OUT RA5, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nNumber.PDIP = . RA5/AN4/SS/LVDIN/ C2OUT RA5, Pin Number.TQFP = . RA5/AN4/SS/LVDIN/ C2OUT RA5, Pin Number.QFN = . RA5/AN4/SS/LVDIN/ C2OUT RA5, Pin Type.Pin Type = . RA5/AN4/SS/LVDIN/ C2OUT RA5, Buffer.Buffer = TTL. RA5/AN4/SS/LVDIN/ C2OUT RA5, Type.Type = Comparator 1 output. Digital I/O.. AN4, Pin Number.PDIP = . AN4, Pin Number.TQFP = 24. AN4, Pin Number.QFN = 24. AN4, Pin Type.Pin Type = I/O I I. AN4, Buffer.Buffer = TTL. AN4, Type.Type = Analog input 4. SPI slave select input.. SS LVDIN, Pin Number.PDIP = . SS LVDIN, Pin Number.TQFP = . SS",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nLVDIN, Pin Number.QFN = . SS LVDIN, Pin Type.Pin Type = . SS LVDIN, Buffer.Buffer = Analog. SS LVDIN, Type.Type = Low-Voltage Detect input. Comparator 2 output.. , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = I O. , Buffer.Buffer = GLYPH<151>. , Type.Type = . RA6, Pin Number.PDIP = . RA6, Pin Number.TQFP = . RA6, Pin Number.QFN = . RA6, Pin Type.Pin Type = . RA6, Buffer.Buffer = . RA6, Type.Type = See the OSC2/CLKO/RA6. RA7, Pin Number.PDIP = . RA7, Pin Number.TQFP = . RA7, Pin Number.QFN = . RA7, Pin Type.Pin Type = . RA7, Buffer.Buffer = . RA7, Type.Type = pin. See",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nthe OSC1/CLKI/RA7. , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = O. , Buffer.Buffer = . , Type.Type = Comparator reference voltage output.. VREF-, Pin Number.PDIP = . VREF-, Pin Number.TQFP = . VREF-, Pin Number.QFN = . VREF-, Pin Type.Pin Type = . VREF-, Buffer.Buffer = Analog. VREF-, Type.Type = . , Pin Number.PDIP = 5. , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = . , Buffer.Buffer = . , Type.Type = . , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = 22. , Pin Type.Pin Type = . , Buffer.Buffer = . , Type.Type = . AN3 VREF+, Pin Number.PDIP = . AN3",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\nVREF+, Pin Number.TQFP = . AN3 VREF+, Pin Number.QFN = . AN3 VREF+, Pin Type.Pin Type = . AN3 VREF+, Buffer.Buffer = . AN3 VREF+, Type.Type = A/D reference voltage (high) input.. , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = . , Buffer.Buffer = Analog. , Type.Type = . C1OUT, Pin Number.PDIP = 7. C1OUT, Pin Number.TQFP = . C1OUT, Pin Number.QFN = . C1OUT, Pin Type.Pin Type = I. C1OUT, Buffer.Buffer = ST. C1OUT, Type.Type = . , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = I O. , Buffer.Buffer = GLYPH<151>. , Type.Type = . C2OUT, Pin Number.PDIP",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS\n= . C2OUT, Pin Number.TQFP = . C2OUT, Pin Number.QFN = . C2OUT, Pin Type.Pin Type = . C2OUT, Buffer.Buffer = . C2OUT, Type.Type = . , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = . , Buffer.Buffer = Analog. , Type.Type = \nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP = Power\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB0/AN12/INT0, Pin Number.PDIP = 33. RB0/AN12/INT0, Pin Number.TQFP = 8. RB0/AN12/INT0, Pin Number.QFN = 9. RB0/AN12/INT0, Pin.Type = . RB0/AN12/INT0, Buffer.Type = . RB0/AN12/INT0, Description = programmed for internal weak pull-ups on all inputs.. RB0 AN12, Pin Number.PDIP = . RB0 AN12, Pin Number.TQFP = . RB0 AN12, Pin Number.QFN = . RB0 AN12, Pin.Type = I/O. RB0 AN12, Buffer.Type = TTL. RB0 AN12, Description = Digital I/O.. , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin.Type = I. , Buffer.Type = Analog ST. , Description = Analog input 12.. INT0",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB1/AN10/INT1, Pin Number.PDIP = 34. INT0 RB1/AN10/INT1, Pin Number.TQFP = 9. INT0 RB1/AN10/INT1, Pin Number.QFN = 10. INT0 RB1/AN10/INT1, Pin.Type = I. INT0 RB1/AN10/INT1, Buffer.Type = . INT0 RB1/AN10/INT1, Description = External interrupt 0.. RB1, Pin Number.PDIP = . RB1, Pin Number.TQFP = . RB1, Pin Number.QFN = . RB1, Pin.Type = I/O. RB1, Buffer.Type = TTL. RB1, Description = Digital I/O. Analog input. AN10 INT1, Pin Number.PDIP = . AN10 INT1, Pin Number.TQFP = . AN10 INT1, Pin Number.QFN = . AN10 INT1, Pin.Type = I I. AN10 INT1, Buffer.Type = Analog ST.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAN10 INT1, Description = 10. External interrupt 1.. RB2/AN8/INT2, Pin Number.PDIP = 35. RB2/AN8/INT2, Pin Number.TQFP = 10. RB2/AN8/INT2, Pin Number.QFN = 11. RB2/AN8/INT2, Pin.Type = . RB2/AN8/INT2, Buffer.Type = . RB2/AN8/INT2, Description = . RB2, Pin Number.PDIP = . RB2, Pin Number.TQFP = . RB2, Pin Number.QFN = . RB2, Pin.Type = I/O. RB2, Buffer.Type = TTL. RB2, Description = Digital I/O. Analog input 8.. AN8 INT2, Pin Number.PDIP = . AN8 INT2, Pin Number.TQFP = . AN8 INT2, Pin Number.QFN = . AN8 INT2, Pin.Type = I I. AN8 INT2, Buffer.Type = Analog ST.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nAN8 INT2, Description = External interrupt 2.. RB3/AN9/CCP2 RB3, Pin Number.PDIP = 36. RB3/AN9/CCP2 RB3, Pin Number.TQFP = 11. RB3/AN9/CCP2 RB3, Pin Number.QFN = 12. RB3/AN9/CCP2 RB3, Pin.Type = I/O. RB3/AN9/CCP2 RB3, Buffer.Type = . RB3/AN9/CCP2 RB3, Description = . AN9, Pin Number.PDIP = . AN9, Pin Number.TQFP = . AN9, Pin Number.QFN = . AN9, Pin.Type = I. AN9, Buffer.Type = TTL Analog. AN9, Description = Digital I/O. Analog input 9.. CCP2 (1), Pin Number.PDIP = . CCP2 (1), Pin Number.TQFP = . CCP2 (1), Pin Number.QFN = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nCCP2 (1), Pin.Type = I/O. CCP2 (1), Buffer.Type = ST. CCP2 (1), Description = Capture 2 input, Compare 2 output, PWM2 output.. RB4/AN11/KBI0, Pin Number.PDIP = 37. RB4/AN11/KBI0, Pin Number.TQFP = 14. RB4/AN11/KBI0, Pin Number.QFN = 14. RB4/AN11/KBI0, Pin.Type = . RB4/AN11/KBI0, Buffer.Type = TTL. RB4/AN11/KBI0, Description = Digital I/O.. RB4, Pin Number.PDIP = . RB4, Pin Number.TQFP = . RB4, Pin Number.QFN = . RB4, Pin.Type = I/O. RB4, Buffer.Type = Analog. RB4, Description = Analog input 11.. AN11, Pin Number.PDIP = . AN11, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . AN11, Pin Number.QFN = . AN11, Pin.Type = I. AN11, Buffer.Type = TTL. AN11, Description = . KBI0, Pin Number.PDIP = . KBI0, Pin Number.TQFP = . KBI0, Pin Number.QFN = . KBI0, Pin.Type = I. KBI0, Buffer.Type = . KBI0, Description = Interrupt-on-change pin.. RB5/KBI1/PGM, Pin Number.PDIP = 38. RB5/KBI1/PGM, Pin Number.TQFP = 15. RB5/KBI1/PGM, Pin Number.QFN = 15. RB5/KBI1/PGM, Pin.Type = . RB5/KBI1/PGM, Buffer.Type = TTL. RB5/KBI1/PGM, Description = Digital I/O.. RB5, Pin Number.PDIP = . RB5, Pin Number.TQFP = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB5, Pin Number.QFN = . RB5, Pin.Type = I/O. RB5, Buffer.Type = TTL. RB5, Description = Interrupt-on-change pin.. KBI1, Pin Number.PDIP = . KBI1, Pin Number.TQFP = . KBI1, Pin Number.QFN = . KBI1, Pin.Type = I. KBI1, Buffer.Type = ST. KBI1, Description = Low-voltage ICSPGLYPH<153> programming enable. PGM, Pin Number.PDIP = . PGM, Pin Number.TQFP = . PGM, Pin Number.QFN = . PGM, Pin.Type = I/O. PGM, Buffer.Type = . PGM, Description = pin.. RB6/KBI2/PGC, Pin Number.PDIP = 39. RB6/KBI2/PGC, Pin Number.TQFP = 16. RB6/KBI2/PGC, Pin Number.QFN = 16.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRB6/KBI2/PGC, Pin.Type = I/O. RB6/KBI2/PGC, Buffer.Type = TTL. RB6/KBI2/PGC, Description = Digital I/O.. RB6, Pin Number.PDIP = . RB6, Pin Number.TQFP = . RB6, Pin Number.QFN = . RB6, Pin.Type = I. RB6, Buffer.Type = TTL. RB6, Description = Interrupt-on-change pin.. KBI2 PGC, Pin Number.PDIP = . KBI2 PGC, Pin Number.TQFP = . KBI2 PGC, Pin Number.QFN = . KBI2 PGC, Pin.Type = I/O. KBI2 PGC, Buffer.Type = ST. KBI2 PGC, Description = In-Circuit Debugger and ICSP programming clock pin.. RB7/KBI3/PGD, Pin Number.PDIP = 40. RB7/KBI3/PGD, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = 17. RB7/KBI3/PGD, Pin Number.QFN = 17. RB7/KBI3/PGD, Pin.Type = . RB7/KBI3/PGD, Buffer.Type = . RB7/KBI3/PGD, Description = . RB7, Pin Number.PDIP = . RB7, Pin Number.TQFP = . RB7, Pin Number.QFN = . RB7, Pin.Type = I/O. RB7, Buffer.Type = TTL. RB7, Description = Digital I/O.. KBI3, Pin Number.PDIP = . KBI3, Pin Number.TQFP = . KBI3, Pin Number.QFN = . KBI3, Pin.Type = I I/O. KBI3, Buffer.Type = TTL ST. KBI3, Description = Interrupt-on-change pin.. PGD, Pin Number.PDIP = . PGD, Pin Number.TQFP = . PGD, Pin Number.QFN",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\n= . PGD, Pin.Type = . PGD, Buffer.Type = . PGD, Description = In-Circuit Debugger and ICSP programming data pin.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nO\n= Output\nI\n= Input\nP\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.\n= Power",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC0/T1OSO/T1CKI, Pin Number.PDIP = 15. RC0/T1OSO/T1CKI, Pin Number.TQFP = 32. RC0/T1OSO/T1CKI, Pin Number.QFN = 34. RC0/T1OSO/T1CKI, Pin.Type = . RC0/T1OSO/T1CKI, Buffer.Type = . RC0/T1OSO/T1CKI, Description. = . RC0, Pin Number.PDIP = . RC0, Pin Number.TQFP = . RC0, Pin Number.QFN = . RC0, Pin.Type = I/O. RC0, Buffer.Type = ST. RC0, Description. = Digital I/O.. T1OSO, Pin Number.PDIP = . T1OSO, Pin Number.TQFP = . T1OSO, Pin Number.QFN = . T1OSO, Pin.Type = O. T1OSO, Buffer.Type = GLYPH<151>. T1OSO, Description. =",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nTimer1 oscillator output.. T1CKI, Pin Number.PDIP = . T1CKI, Pin Number.TQFP = . T1CKI, Pin Number.QFN = . T1CKI, Pin.Type = I. T1CKI, Buffer.Type = ST. T1CKI, Description. = Timer1/Timer3 external clock input.. RC1/T1OSI/CCP2, Pin Number.PDIP = 16. RC1/T1OSI/CCP2, Pin Number.TQFP = 35. RC1/T1OSI/CCP2, Pin Number.QFN = 35. RC1/T1OSI/CCP2, Pin.Type = . RC1/T1OSI/CCP2, Buffer.Type = . RC1/T1OSI/CCP2, Description. = . RC1, Pin Number.PDIP = . RC1, Pin Number.TQFP = . RC1, Pin Number.QFN = . RC1, Pin.Type = I/O. RC1, Buffer.Type =",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nST. RC1, Description. = Digital I/O.. T1OSI, Pin Number.PDIP = . T1OSI, Pin Number.TQFP = . T1OSI, Pin Number.QFN = . T1OSI, Pin.Type = I. T1OSI, Buffer.Type = CMOS. T1OSI, Description. = Timer1 oscillator input.. CCP2 (2), Pin Number.PDIP = . CCP2 (2), Pin Number.TQFP = . CCP2 (2), Pin Number.QFN = . CCP2 (2), Pin.Type = I/O. CCP2 (2), Buffer.Type = ST. CCP2 (2), Description. = Capture 2 input, Compare 2 output, PWM2 output.. RC2/CCP1/P1A, Pin Number.PDIP = 17. RC2/CCP1/P1A, Pin Number.TQFP = 36. RC2/CCP1/P1A, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = 36. RC2/CCP1/P1A, Pin.Type = . RC2/CCP1/P1A, Buffer.Type = . RC2/CCP1/P1A, Description. = . RC2, Pin Number.PDIP = . RC2, Pin Number.TQFP = . RC2, Pin Number.QFN = . RC2, Pin.Type = I/O. RC2, Buffer.Type = ST. RC2, Description. = Digital I/O.. CCP1, Pin Number.PDIP = . CCP1, Pin Number.TQFP = . CCP1, Pin Number.QFN = . CCP1, Pin.Type = I/O. CCP1, Buffer.Type = ST. CCP1, Description. = Capture 1 input/Compare 1 output/PWM1 output.. P1A, Pin Number.PDIP = . P1A, Pin Number.TQFP = . P1A, Pin Number.QFN = . P1A,",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPin.Type = O. P1A, Buffer.Type = GLYPH<151>. P1A, Description. = Enhanced CCP1 output.. RC3/SCK/SCL, Pin Number.PDIP = 18. RC3/SCK/SCL, Pin Number.TQFP = 37. RC3/SCK/SCL, Pin Number.QFN = 37. RC3/SCK/SCL, Pin.Type = . RC3/SCK/SCL, Buffer.Type = . RC3/SCK/SCL, Description. = . RC3, Pin Number.PDIP = . RC3, Pin Number.TQFP = . RC3, Pin Number.QFN = . RC3, Pin.Type = I/O. RC3, Buffer.Type = ST. RC3, Description. = Digital I/O.. SCK, Pin Number.PDIP = . SCK, Pin Number.TQFP = . SCK, Pin Number.QFN = . SCK, Pin.Type = I/O.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nSCK, Buffer.Type = ST. SCK, Description. = Synchronous serial clock input/output for SPI mode.. SCL, Pin Number.PDIP = . SCL, Pin Number.TQFP = . SCL, Pin Number.QFN = . SCL, Pin.Type = I/O. SCL, Buffer.Type = ST. SCL, Description. = Synchronous serial clock input/output for I 2 CGLYPH<153> mode.. RC4/SDI/SDA, Pin Number.PDIP = 23. RC4/SDI/SDA, Pin Number.TQFP = 42. RC4/SDI/SDA, Pin Number.QFN = 42. RC4/SDI/SDA, Pin.Type = . RC4/SDI/SDA, Buffer.Type = . RC4/SDI/SDA, Description. = . RC4, Pin Number.PDIP = . RC4, Pin Number.TQFP = . RC4, Pin Number.QFN = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC4, Pin.Type = I/O. RC4, Buffer.Type = ST. RC4, Description. = Digital I/O.. SDI, Pin Number.PDIP = . SDI, Pin Number.TQFP = . SDI, Pin Number.QFN = . SDI, Pin.Type = I. SDI, Buffer.Type = ST. SDI, Description. = SPI data in.. SDA, Pin Number.PDIP = . SDA, Pin Number.TQFP = . SDA, Pin Number.QFN = . SDA, Pin.Type = I/O. SDA, Buffer.Type = ST. SDA, Description. = I 2 C data I/O.. RC5/SDO, Pin Number.PDIP = 24. RC5/SDO, Pin Number.TQFP = 43. RC5/SDO, Pin Number.QFN = 43. RC5/SDO, Pin.Type = . RC5/SDO, Buffer.Type = . RC5/SDO, Description. = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC5, Pin Number.PDIP = . RC5, Pin Number.TQFP = . RC5, Pin Number.QFN = . RC5, Pin.Type = I/O. RC5, Buffer.Type = ST. RC5, Description. = Digital I/O.. SDO, Pin Number.PDIP = . SDO, Pin Number.TQFP = . SDO, Pin Number.QFN = . SDO, Pin.Type = O. SDO, Buffer.Type = GLYPH<151>. SDO, Description. = SPI data out.. RC6/TX/CK, Pin Number.PDIP = 25. RC6/TX/CK, Pin Number.TQFP = 44. RC6/TX/CK, Pin Number.QFN = 44. RC6/TX/CK, Pin.Type = . RC6/TX/CK, Buffer.Type = . RC6/TX/CK, Description. = . RC6, Pin Number.PDIP = . RC6, Pin Number.TQFP = . RC6, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.QFN = . RC6, Pin.Type = I/O. RC6, Buffer.Type = ST. RC6, Description. = Digital I/O.. TX, Pin Number.PDIP = . TX, Pin Number.TQFP = . TX, Pin Number.QFN = . TX, Pin.Type = O. TX, Buffer.Type = GLYPH<151>. TX, Description. = USART asynchronous transmit.. CK, Pin Number.PDIP = . CK, Pin Number.TQFP = . CK, Pin Number.QFN = . CK, Pin.Type = I/O. CK, Buffer.Type = ST. CK, Description. = USART synchronous clock (see related RX/DT).. RC7/RX/DT, Pin Number.PDIP = 26. RC7/RX/DT, Pin Number.TQFP = 1. RC7/RX/DT, Pin Number.QFN = 1. RC7/RX/DT, Pin.Type = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRC7/RX/DT, Buffer.Type = . RC7/RX/DT, Description. = . RC7, Pin Number.PDIP = . RC7, Pin Number.TQFP = . RC7, Pin Number.QFN = . RC7, Pin.Type = I/O. RC7, Buffer.Type = ST. RC7, Description. = Digital I/O.. RX, Pin Number.PDIP = . RX, Pin Number.TQFP = . RX, Pin Number.QFN = . RX, Pin.Type = I. RX, Buffer.Type = ST. RX, Description. = USART asynchronous receive.. DT, Pin Number.PDIP = . DT, Pin Number.TQFP = . DT, Pin Number.QFN = . DT, Pin.Type = I/O. DT, Buffer.Type = ST. DT, Description. = USART synchronous data (see related TX/CK).\nLegend:\nTTL = TTL compatible input",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nO = Output\nI\n= Input\nP = Power\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n- 2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD0/PSP0 RD0 PSP0, Pin Number.PDIP = 19. RD0/PSP0 RD0 PSP0, Pin Number.TQFP = 38. RD0/PSP0 RD0 PSP0, Pin Number.QFN = 38. RD0/PSP0 RD0 PSP0, Pin Type.Pin Type = I/O. RD0/PSP0 RD0 PSP0, Buffer Type.Buffer Type = ST TTL. RD0/PSP0 RD0 PSP0, Description.Description = Digital I/O. Parallel Slave Port data.. RD1/PSP1 RD1, Pin Number.PDIP = 20. RD1/PSP1 RD1, Pin Number.TQFP = 39. RD1/PSP1 RD1, Pin Number.QFN = 39. RD1/PSP1 RD1, Pin Type.Pin Type = I/O I/O. RD1/PSP1 RD1, Buffer Type.Buffer Type = ST TTL. RD1/PSP1 RD1,",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nDescription.Description = Digital I/O. Parallel Slave Port data.. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Pin Number.PDIP = 21 22. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Pin Number.TQFP = 40 41. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Pin Number.QFN = 40 41. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Pin Type.Pin Type = I/O I/O I/O. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Buffer Type.Buffer Type = ST TTL ST TTL. RD2/PSP2 RD2 PSP2 RD3/PSP3 RD3, Description.Description = Digital I/O. Parallel Slave Digital I/O. Parallel Slave Port data.. PSP3 RD4/PSP4 RD4, Pin Number.PDIP = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nPSP3 RD4/PSP4 RD4, Pin Number.TQFP = 2. PSP3 RD4/PSP4 RD4, Pin Number.QFN = 2. PSP3 RD4/PSP4 RD4, Pin Type.Pin Type = I/O I/O I/O. PSP3 RD4/PSP4 RD4, Buffer Type.Buffer Type = ST TTL. PSP3 RD4/PSP4 RD4, Description.Description = Digital I/O.. PSP4 RD5/PSP5/P1B, Pin Number.PDIP = 27. PSP4 RD5/PSP5/P1B, Pin Number.TQFP = 3. PSP4 RD5/PSP5/P1B, Pin Number.QFN = 3. PSP4 RD5/PSP5/P1B, Pin Type.Pin Type = I/O I/O. PSP4 RD5/PSP5/P1B, Buffer Type.Buffer Type = ST. PSP4",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRD5/PSP5/P1B, Description.Description = Parallel Slave Port data.. RD5 PSP5 P1B RD6/PSP6/P1C, Pin Number.PDIP = 28. RD5 PSP5 P1B RD6/PSP6/P1C, Pin Number.TQFP = 4. RD5 PSP5 P1B RD6/PSP6/P1C, Pin Number.QFN = 4. RD5 PSP5 P1B RD6/PSP6/P1C, Pin Type.Pin Type = O I/O I/O. RD5 PSP5 P1B RD6/PSP6/P1C, Buffer Type.Buffer Type = TTL GLYPH<151>. RD5 PSP5 P1B RD6/PSP6/P1C, Description.Description = Digital I/O. Parallel Slave Port data. Enhanced CCP1 output.. RD6 PSP6, Pin Number.PDIP = 29. RD6 PSP6, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.TQFP = . RD6 PSP6, Pin Number.QFN = 5. RD6 PSP6, Pin Type.Pin Type = O I/O. RD6 PSP6, Buffer Type.Buffer Type = ST TTL. RD6 PSP6, Description.Description = Digital I/O. Parallel Slave Port data.. P1C RD7, Pin Number.PDIP = 30. P1C RD7, Pin Number.TQFP = 5. P1C RD7, Pin Number.QFN = . P1C RD7, Pin Type.Pin Type = . P1C RD7, Buffer Type.Buffer Type = GLYPH<151>. P1C RD7, Description.Description = Enhanced CCP1 output.. RD7/PSP7/P1D, Pin Number.PDIP = . RD7/PSP7/P1D, Pin Number.TQFP = . RD7/PSP7/P1D, Pin Number.QFN = . RD7/PSP7/P1D, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nType.Pin Type = . RD7/PSP7/P1D, Buffer Type.Buffer Type = ST. RD7/PSP7/P1D, Description.Description = Digital I/O.. PSP7, Pin Number.PDIP = . PSP7, Pin Number.TQFP = . PSP7, Pin Number.QFN = . PSP7, Pin Type.Pin Type = . PSP7, Buffer Type.Buffer Type = . PSP7, Description.Description = . , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = I/O. , Buffer Type.Buffer Type = . , Description.Description = . , Pin Number.PDIP = . , Pin Number.TQFP = . , Pin Number.QFN = . , Pin Type.Pin Type = . , Buffer Type.Buffer Type = TTL. , Description.Description = . P1D, Pin Number.PDIP = . P1D, Pin Number.TQFP = .",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nP1D, Pin Number.QFN = . P1D, Pin Type.Pin Type = O. P1D, Buffer Type.Buffer Type = GLYPH<151>. P1D, Description.Description = Parallel Slave Port data. Enhanced CCP1 output.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\n- O = Output\nI\n= Input\nP\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.\n= Power",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE0/AN5/RD RE0 AN5 RD, Pin Number.PDIP = 8. RE0/AN5/RD RE0 AN5 RD, Pin Number.TQFP = 25. RE0/AN5/RD RE0 AN5 RD, Pin Number.QFN = 25. RE0/AN5/RD RE0 AN5 RD, Pin Type. = I/O I I. RE0/AN5/RD RE0 AN5 RD, Buffer.Type = ST Analog TTL. RE0/AN5/RD RE0 AN5 RD, Description. = PORTE is a bidirectional I/O port. Digital I/O. Analog input 5. Read control for Parallel Slave Port (see also WRand CS pins).. RE1/AN6/WR RE1 AN6 WR, Pin Number.PDIP = 9. RE1/AN6/WR RE1 AN6 WR, Pin Number.TQFP = 26. RE1/AN6/WR RE1 AN6 WR, Pin Number.QFN = 26. RE1/AN6/WR",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nRE1 AN6 WR, Pin Type. = I/O I I. RE1/AN6/WR RE1 AN6 WR, Buffer.Type = ST Analog TTL. RE1/AN6/WR RE1 AN6 WR, Description. = Digital I/O. Analog input 6. Write control for Parallel Slave Port (see CS and RD pins).. RE2/AN7/CS RE2 AN7 CS, Pin Number.PDIP = 10. RE2/AN7/CS RE2 AN7 CS, Pin Number.TQFP = 27. RE2/AN7/CS RE2 AN7 CS, Pin Number.QFN = 27. RE2/AN7/CS RE2 AN7 CS, Pin Type. = I/O I I. RE2/AN7/CS RE2 AN7 CS, Buffer.Type = ST Analog TTL. RE2/AN7/CS RE2 AN7 CS, Description. = Digital I/O. Analog input 7. Chip select control for Parallel Slave Port (see related RD and WR).. RE3, Pin",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nNumber.PDIP = 1. RE3, Pin Number.TQFP = 18. RE3, Pin Number.QFN = 18. RE3, Pin Type. = GLYPH<151>. RE3, Buffer.Type = GLYPH<151>. RE3, Description. = See MCLR/VPP/RE3 pin.. VSS, Pin Number.PDIP = 12, 31. VSS, Pin Number.TQFP = 6, 29. VSS, Pin Number.QFN = 6, 30, 31. VSS, Pin Type. = P. VSS, Buffer.Type = GLYPH<151>. VSS, Description. = Ground reference for logic and I/O pins.. VDD, Pin Number.PDIP = 11, 32. VDD, Pin Number.TQFP = 7, 28. VDD, Pin Number.QFN = 7, 8 29. VDD, Pin Type. = P. VDD, Buffer.Type = GLYPH<151>. VDD, Description. = Positive supply for logic and",
    "TABLE 1-3: PIC18F4220/4320 PINOUT I/O DESCRIPTIONS (CONTINUED)\nI/O pins.. NC, Pin Number.PDIP = GLYPH<151>. NC, Pin Number.TQFP = GLYPH<151>. NC, Pin Number.QFN = 13, 28. NC, Pin Type. = NC. NC, Buffer.Type = NC. NC, Description. = No connect.\nLegend:\nTTL = TTL compatible input\nCMOS= CMOS compatible input or output\nST = Schmitt Trigger input with CMOS levels\nI\n= Input\nO = Output\nP = Power\nOD = Open-drain (no diode to VDD)\nNote 1: Alternate assignment for CCP2 when CCP2MX is cleared.\n2: Default assignment for CCP2 when CCP2MX (CONFIG3H<0>) is set.",
    "2.1 Oscillator Types\nThe  PIC18F2X20  and  PIC18F4X20  devices  can  be operated in ten different oscillator modes. The user can program  the  Configuration  bits,  FOSC3:FOSC0,  in Configuration Register 1H to select one of these ten modes:\n1. LP\nLow-Power Crystal\n2. XT\nCrystal/Resonator\n3. HS\nHigh-Speed Crystal/Resonator\n4. HSPLL\nHigh-Speed Crystal/Resonator with PLL Enabled\n5. RC\nExternal Resistor/Capacitor with\nFOSC/4 Output on RA6\n6. RCIO\nExternal Resistor/Capacitor with I/O on RA6\n7. INTIO1\nInternal Oscillator with FOSC/4 Output on RA6 and I/O on RA7\n8. INTIO2\nInternal Oscillator with I/O on RA6 and RA7\n9. EC\nExternal Clock with FOSC/4 Output\n10. ECIO\nExternal Clock with I/O on RA6",
    "2.2 Crystal Oscillator/Ceramic Resonators\nIn XT, LP, HS or HSPLL Oscillator modes, a crystal or ceramic  resonator  is  connected  to  the  OSC1  and OSC2 pins to establish  oscillation.  Figure 2-1  shows the pin connections.\nThe oscillator design requires the use of a parallel cut crystal.\nNote:, 1 = Use of a series cut crystal may give a fre- quency out of the crystal manufacturers specifications.",
    "FIGURE 2-1:\nCRYSTAL/CERAMIC RESONATOR OPERATION (XT, LP, HS OR HSPLL CONFIGURATION)",
    "Typical Capacitor Values Used:\nXT, Freq = 455 kHz. XT, OSC1 = 56 pF. XT, OSC2 = 56 pF. , Freq = 2.0 MHz. , OSC1 = 47 pF. , OSC2 = 47 pF. , Freq = 4.0 MHz. , OSC1 = 33 pF. , OSC2 = 33 pF. HS, Freq = 8.0 MHz. HS, OSC1 = 27 pF. HS, OSC2 = 27 pF. , Freq = 16.0 MHz. , OSC1 = 22 pF. , OSC2 = 22 pF\nCapacitor values are for design guidance only.\nThese  capacitors  were  tested  with  the  resonators listed below for basic start-up and operation. These values are not optimized .\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee the notes on page 20 for additional information.",
    "Typical Capacitor Values Used:\n455 kHz, Resonators Used: = 4.0 MHz. 2.0 MHz, Resonators Used: = 8.0 MHz. 16.0 MHz, Resonators Used: = 16.0 MHz",
    "CRYSTAL OSCILLATOR\nAn external clock source may also be connected to the OSC1 pin in the HS mode, as shown in Figure 2-2.",
    "CRYSTAL OSCILLATOR\nLP, Crystal Freq.Crystal Freq = 32 kHz. LP, Typical Capacitor Values Tested:.C1 = 33 pF. LP, Typical Capacitor Values Tested:.C2 = 33 pF. LP, Crystal Freq.Crystal Freq = 200 kHz. LP, Typical Capacitor Values Tested:.C1 = 15 pF. LP, Typical Capacitor Values Tested:.C2 = 15 pF. XT, Crystal Freq.Crystal Freq = 1 MHz. XT, Typical Capacitor Values Tested:.C1 = 33 pF. XT, Typical Capacitor Values Tested:.C2 = 33 pF. XT, Crystal Freq.Crystal Freq = 4 MHz. XT, Typical Capacitor Values Tested:.C1 = 27 pF. XT, Typical Capacitor Values Tested:.C2 = 27 pF. HS, Crystal Freq.Crystal Freq = 4 MHz. HS, Typical Capacitor Values Tested:.C1 = 27 pF. HS, Typical Capacitor Values Tested:.C2 = 27 pF. HS, Crystal Freq.Crystal",
    "CRYSTAL OSCILLATOR\nFreq = 8 MHz. HS, Typical Capacitor Values Tested:.C1 = 22 pF. HS, Typical Capacitor Values Tested:.C2 = 22 pF. HS, Crystal Freq.Crystal Freq = 20 MHz. HS, Typical Capacitor Values Tested:.C1 = 15 pF. HS, Typical Capacitor Values Tested:.C2 = 15 pF\nCapacitor values are for design guidance only.\nThese capacitors were tested with the crystals listed below for basic start-up and operation. These values are not optimized.\nDifferent capacitor values may be required to produce acceptable oscillator operation. The user should test the performance of the oscillator over the expected VDD and temperature range for the application.\nSee  the  notes  following  this  table  for  additional information.\n32 kHz, Crystals Used: = 4 MHz. 200 kHz, Crystals Used: = 8 MHz. 1 MHz, Crystals Used: = 20 MHz",
    "CRYSTAL OSCILLATOR\nNote 1: Higher capacitance increases the stability of  the  oscillator,  but  also  increases  the start-up time.\n2: When operating below 3V VDD, or when using certain  ceramic  resonators  at  any voltage, it may be necessary to use the HS mode or switch to a crystal oscillator.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: RS may be required to avoid overdriving crystals with low drive level specification.\n5: Always verify oscillator performance over the  VDD  and  temperature  range  that  is expected for the application.\nFIGURE 2-2: EXTERNAL CLOCK INPUT OPERATION (HS OSC CONFIGURATION)",
    "2.3 HSPLL\nA Phase Locked Loop (PLL) circuit is provided as an option  for  users  who  wish  to  use  a  lower  frequency crystal oscillator circuit, or to clock the device up to its highest rated frequency from a crystal oscillator. This may be useful for customers who are concerned with EMI due to high-frequency crystals.\nThe HSPLL mode makes use of the HS mode oscillator for frequencies up to 10 MHz. A PLL then multiplies the oscillator output frequency by 4 to produce an internal clock frequency up to 40 MHz.\nThe PLL is enabled only when the oscillator Configuration bits are programmed for HSPLL mode. If programmed  for  any  other  mode,  the  PLL  is  not enabled.",
    "2.4 External Clock Input\nThe EC and ECIO Oscillator modes require an external clock source to be connected to the OSC1 pin. There is no  oscillator  start-up  time  required  after  a  Power-on Reset or after an exit from Sleep mode.\nIn  the  EC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic. Figure 2-4 shows the pin connections for the EC Oscillator mode.\nFIGURE 2-4:",
    "EXTERNAL CLOCK INPUT OPERATION\n(EC CONFIGURATION)\nThe ECIO Oscillator mode functions like the EC mode, except that the OSC2 pin becomes an additional general  purpose  I/O  pin.  The  I/O  pin  becomes  bit  6  of PORTA (RA6). Figure 2-5 shows the pin connections for the ECIO Oscillator mode.",
    "2.5 RC Oscillator\nFor timing insensitive applications, the GLYPH<147>RCGLYPH<148> and GLYPH<147>RCIOGLYPH<148> device  options  offer  additional  cost  savings. The RC oscillator frequency is a function of the supply voltage, the resistor (REXT) and capacitor (CEXT) values and the operating temperature. In addition to this, the oscillator frequency will vary from unit to unit due to normal manufacturing variation. Furthermore, the difference in  lead  frame  capacitance  between  package types  will  also  affect  the  oscillation  frequency,  especially for low CEXT values. The user also needs to take into  account  variation  due  to  tolerance  of  external  R and  C  components  used.  Figure 2-6  shows  how  the R/C combination is connected.\nIn  the  RC  Oscillator  mode,  the  oscillator  frequency divided by 4 is available on the OSC2 pin. This signal may be used for test purposes or to synchronize other logic.",
    "FIGURE 2-6: RC OSCILLATOR MODE\nThe RCIO Oscillator mode (Figure 2-7) functions like the RC mode, except that the OSC2 pin becomes an additional general purpose I/O pin. The I/O pin becomes bit 6 of PORTA (RA6).",
    "2.6.1 INTIO MODES\nThe  PIC18F2X20/4X20  devices  include  an  internal oscillator block that generates two independent clock signals.  Either  can  be  used  as  the  systemGLYPH<146>s  clock source.  This  can  eliminate  the  need  for  external oscillator circuits on the OSC1 or OSC2 pins.\nThe main output (INTOSC) is an 8-MHz clock source that can be used to directly drive the system clock. It also drives a post-scaler that can provide a range of clock frequencies from 125 kHz to 4 MHz. The INTOSC  output  is  enabled  when  the  system  clock frequency is set from 125 kHz to 8 MHz.\nThe  other  clock  source  is  the  internal  RC  oscillator (INTRC)  that  provides  a  31-kHz  output.  The  INTRC oscillator is enabled by selecting the internal oscillator block as the system clock source or by enabling any of the following:\nGLYPH<149> Power-up Timer\nGLYPH<149> Fail-Safe Clock Monitor\nGLYPH<149> Watchdog Timer\nGLYPH<149> Two-Speed Start-up",
    "2.6.1 INTIO MODES\nThese  features  are  discussed  in  greater  detail  in Section 23.0 GLYPH<147>Special Features of the CPUGLYPH<148> .\nThe  clock  source  frequency  (INTOSC  direct,  INTRC direct or INTOSC post-scaler) is selected by configuring the IRCF bits of the OSCCON register (Register 2-2).\nUsing  the  internal  oscillator  as  the  clock  source  can eliminate the need for up to two external oscillator pins. This frees the pins to be used for digital I/O.\nTwo configurations are available:\nGLYPH<149> INTIO1 mode GLYPH<150> The OSC2 pin outputs FOSC/4 while OSC1 functions as RA7 for digital input and output.\nGLYPH<149> INTIO2 mode GLYPH<150> OSC1 functions as RA7 and OSC2 functions as RA6, both for digital input and output.",
    "2.6.2 OSCTUNE REGISTER\nThe internal oscillator block is calibrated at the factory to  produce  an  INTOSC  output  frequency  of  approximately 8 MHz. (See parameters F14GLYPH<150>F19 in Table 26-8.)\nThe  INTOSC  frequency  can  be  adjusted  using  the TUN5:TUN1 bits in the OSCTUNE register OSCTUNE<5:1>. OSCTUNE<0> has no effect, but is readable and writable, enabling changes of the INTOSC frequency using two increment or decrement instructions.\nWhen the OSCTUNE register is modified, the INTOSC and INTRC frequencies begin shifting to the new frequency. The INTOSC and INTRC clocks will stabilize at the  new  frequency  within  100 \u03bc s. Code  execution continues during this shift.\nThere is no indication when the shift occurs. Operation of  features  that  depend  on  the  INTRC  clock  source frequency  also  will  be  affected  by  the  change  in frequency.  This  includes  the  WDT,  Fail-Safe  Clock Monitor and peripherals.",
    "2.6.2 OSCTUNE REGISTER\nThe internal oscillatorGLYPH<146>s output can be adjusted in the userGLYPH<146>s application.  This  is  done  by  writing  to  the OSCTUNE register (Register 2-1). The tuning sensitivity is constant throughout the tuning range.",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\nU-0, 1 = U-0. U-0, 2 = R/W-0. U-0, 3 = R/W-0. U-0, 4 = R/W-0. U-0, 5 = R/W-0. U-0, 6 = R/W-0. U-0, 7 = R/W-0. GLYPH<151>, 1 = GLYPH<151>. GLYPH<151>, 2 = TUN5. GLYPH<151>, 3 = TUN4. GLYPH<151>, 4 = TUN3. GLYPH<151>, 5 = TUN2. GLYPH<151>, 6 = TUN1. GLYPH<151>, 7 = TUN0. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 = bit 7 bit",
    "REGISTER 2-1: OSCTUNE: OSCILLATOR TUNING REGISTER\n0. bit 7 bit 0, 7 = bit 7 bit 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145> 1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145>0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5-1\nTUN<5:1>: Frequency Tuning bits GLYPH<150> Adjusts the frequency of INTOSC. Can adjust INTRC, depending on TUNSEL (OSCTUN2<7>)\n011111 = Maximum frequency\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\n000001\n000000 = Center frequency. Oscillator module is running at the calibrated frequency.\n111111\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\n100000 = Minimum frequency bit 0 TUN<0>: A placeholder with no effect on the INTRC frequency. Provided to facilitate incrementation and decrementation of the OSCTUN2 register and adjustment of the INTRC frequency.",
    "2.6.3 OSCTUN2 REGISTER\nThe internal oscillator block is calibrated at the factory to  produce  an  INTRC  output  frequency  of  approximately  31 kHz.  (See  parameters  F20  and  F21  in Table 26-8.)\nIn OSCTUN2, the OSCTUN2<0> bit has no effect, but is readable  and  writable,  enabling  changes  of  the INTRC frequency using two increment or  decrement instructions.\nThe INTRC frequency can be adjusted two ways:\n- GLYPH<149> If TUNSEL (OSCTUN2<7>) is clear GLYPH<150> TUN5:TUN1 in OSCTUNE<5:1> adjusts the INTRC clock frequency and also can adjust the INTOSC clock frequency. (See Register 2-1, OSCTUNE.)\nWhen the OSCTUN2 register is modified, the INTRC frequency will begin shifting to the new frequency, and will stabilize at the new frequency within 100 \u03bc s. Code execution continues during this shift.",
    "2.6.3 OSCTUN2 REGISTER\n- GLYPH<149> If TUNSEL (OSCTUN2<7>) is set GLYPH<150> TUN5:TUN1 in OSCTUN2<5:1> adjusts the INTRC clock frequency without affecting the INTOSC frequency. (See Register 2-2, OSCTUN2.)\nThere is no indication when the shift occurs. Operation of features that depend on the INTRC clock source frequency  also  will  be  affected  by  the  change  in  frequency. This includes the WDT,  Fail-Safe Clock Monitor and peripherals.",
    "REGISTER 2-2: OSCTUN2: INTRC OSCILLATOR TUNING REGISTER\nTUNSEL, U-0 = GLYPH<151>. TUNSEL, R/W-0 = TUN5. TUNSEL, R/W-0 = TUN4. TUNSEL, R/W-0 = TUN3. TUNSEL, R/W-0 = TUN2. TUNSEL, R/W-0 = TUN1. TUNSEL, R/W-0 = TUN0. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 2-2: OSCTUN2: INTRC OSCILLATOR TUNING REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145> 1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145>0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nTUNSEL: Enables tuning of INTRC using OCSTUN2<5:1>\n1 = INTRC adjusted by OSCTUN2<5:1>\n0 = INTRC adjusted by OSCTUNE<5:1>\nbit 6",
    "REGISTER 2-2: OSCTUN2: INTRC OSCILLATOR TUNING REGISTER\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5-1\nTUN<5:1>: Frequency Tuning bits GLYPH<150> Adjusts the frequency of INTRC when TUNSEL is set\n011111 = Maximum frequency\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\n000001\n000000 = Center frequency. Oscillator module is running at the calibrated frequency.\n111111\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\n100000 = Minimum frequency\nbit 0 TUN<0>: A placeholder with no effect on the INTRC frequency. Provided to facilitate incrementation and decrementation of the OSCTUN2 register and adjustment of the INTRC frequency.",
    "2.7 Clock Sources and Oscillator Switching\nLike  previous  PIC18  devices,  the  PIC18F2X20  and PIC18F4X20 devices include a feature that allows the system  clock  source  to  be  switched  from  the  main oscillator to an alternate, low-frequency clock source. PIC18F2X20/4X20  devices  offer  two  alternate  clock sources. When enabled, these give additional options for switching to the various power-managed operating modes.\nEssentially,  there  are  three  clock  sources  for  these devices:\nGLYPH<149> Primary oscillators\nGLYPH<149> Secondary oscillators\nGLYPH<149> Internal oscillator block\nThe primary oscillators include the External Crystal and  Resonator  modes,  the  External  RC  modes,  the External Clock modes and the internal oscillator block. The particular mode is defined on POR by the contents of  Configuration  Register  1H.  The  details  of  these modes are covered earlier in this chapter.\nThe secondary oscillators are those external sources not  connected  to  the  OSC1  or  OSC2  pins.  These sources  may  continue  to  operate  even  after the controller is placed in a power-managed mode.",
    "2.7 Clock Sources and Oscillator Switching\nPIC18F2X20/4X20  devices offer only the Timer1 oscillator as a secondary oscillator. This oscillator, in all power-managed  modes,  is  often  the  time  base  for functions such as a Real-Time Clock (RTC).\nMost often, a 32.768 kHz watch crystal is connected between the RC0/T1OSO/T1CKI and RC1/T1OSI pins. Like the LP Oscillator mode circuit, loading capacitors are also connected from each pin to ground.\nThe Timer1 oscillator is discussed in greater detail in Section 12.2 GLYPH<147>Timer1 OscillatorGLYPH<148> .\nIn addition to being a primary clock source, the internal oscillator  block is  available  as  a  power-managed mode clock source. The INTRC source is also used as the clock source for several special features, such as the WDT and Fail-Safe Clock Monitor.",
    "2.7 Clock Sources and Oscillator Switching\nThe clock sources for the PIC18F2X20/4X20 devices are  shown  in  Figure 2-8.  See Section 12.0  GLYPH<147>Timer1 ModuleGLYPH<148> for further details of the Timer1 oscillator. See Section 23.1 GLYPH<147>Configuration  BitsGLYPH<148> for  Configuration register details.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe  OSCCON  register  (Register 2-3)  controls  several aspects of the system clockGLYPH<146>s operation, both in full-power operation and in power-managed modes.\nThe System Clock Select bits, SCS1:SCS0, select the clock source that is used when the device is operating in power-managed modes. The available clock sources are the primary clock (defined in Configuration Register 1H),  the  secondary  clock  (Timer1  oscillator) and  the  internal  oscillator  block.  The  clock  selection has no effect until a SLEEP instruction is executed and the device enters a power-managed mode of operation.  The  SCS  bits  are  cleared  on  all  forms  of Reset.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe Internal Oscillator Select bits, IRCF2:IRCF0, select the frequency output of the internal oscillator block that is used to drive the system clock. The choices are the INTRC source, the INTOSC source (8 MHz) or one of the six frequencies derived from the INTOSC postscaler (125 kHz to 4 MHz). If the internal oscillator block  is  supplying  the  system  clock,  changing  the states of these bits will have an immediate change on the internal oscillatorGLYPH<146>s output.",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nThe OSTS, IOFS and T1RUN bits indicate which clock source  is  currently  providing  the  system  clock.  The OSTS  indicates  that  the  Oscillator  Start-up  Timer (OST) has timed out and the primary clock is providing the system clock in primary clock modes. The IOFS bit indicates when the internal oscillator block has stabilized  and  is  providing  the  system  clock  in  RC  Clock modes. The T1RUN bit (T1CON<6>) indicates when the Timer1 oscillator is providing the system clock in secondary clock modes. If none of these bits are set, the INTRC is providing the system clock, or the internal oscillator block has just started and is not yet stable.\nThe IDLEN bit controls the selective shutdown of the controllerGLYPH<146>s CPU in power-managed modes. The use of these bits  is  discussed in  more  detail  in Section 3.0 GLYPH<147>Power-Managed ModesGLYPH<148> .",
    "2.7.1 OSCILLATOR CONTROL REGISTER\nNote 1: The Timer1 oscillator must be enabled to select  the  secondary  clock  source.  The Timer1 oscillator is enabled by setting the T1OSCEN bit in the Timer1 Control register  (T1CON<3>). If the Timer1 oscillator is not enabled, then any attempt to set the SCS0 bit will be ignored.\n2: It is recommended that the Timer1 oscillator be operating and stable before executing the SLEEP instruction or a very long  delay  may  occur  while  the  Timer1 oscillator starts.",
    "REGISTER 2-3: OSCCON: OSCILLATOR CONTROL REGISTER\nIDLEN, R/W-0 = IRCF2. IDLEN, R/W-0 = IRCF1. IDLEN, R/W-0 = IRCF0. IDLEN, R (1) = OSTS. IDLEN, R-0 = IOFS. IDLEN, R/W-0 = SCS1. IDLEN, R/W-0 = SCS0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R (1) = bit 7 bit 0. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 2-3: OSCCON: OSCILLATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IDLEN: Idle Enable bit\n1 = Idle mode enabled; CPU core is not clocked in power-managed modes\n0 = Run mode enabled; CPU core is clocked in power-managed modes",
    "bit 6-4\nIRCF2:IRCF0: Internal Oscillator Frequency Select bits\n111 = 8 MHz (8 MHz source drives clock directly)\n110 = 4 MHz\n101 = 2 MHz\n100 = 1 MHz\n011 = 500 kHz\n010 = 250 kHz\n001 = 125 kHz\n000 = 31 kHz (INTRC source drives clock directly)\nbit 3\nOSTS: Oscillator Start-up Time-out Status bit (1)\n1 = Oscillator Start-up Timer time-out has expired; primary oscillator is running\n0 = Oscillator Start-up Timer time-out is running; primary oscillator is not ready\nbit 2 IOFS: INTOSC Frequency Stable bit\n1 = INTOSC frequency is stable\n0 = INTOSC frequency is not stable\nbit 1-0 SCS1:SCS0: System Clock Select bits\n1x = Internal oscillator block (RC modes)\n01 = Timer1 oscillator (Secondary modes) (2)\n00 = Primary oscillator (Sleep and PRI_IDLE modes)",
    "bit 6-4\nNote 1: Depends on state of IESO bit in Configuration Register 1H.\n2: SCS0 may not be set while T1OSCEN (T1CON<3>) is clear.",
    "2.7.2 OSCILLATOR TRANSITIONS\nThe PIC18F2X20/4X20 devices contain circuitry to prevent clocking GLYPH<147>glitchesGLYPH<148> when switching between clock sources. A short pause in the system clock occurs during  the  clock  switch.  The  length  of  this  pause  is between 8 and 9 clock periods of the new clock source. This ensures that the new clock source is stable and that its  pulse  width will  not  be  less  than  the shortest pulse width of the two clock sources.\nIf  the  Sleep  mode  is  selected,  all  clock  sources  are stopped.  Since  all  the  transistor  switching  currents have been stopped, Sleep mode achieves the lowest current consumption  of  the device (only leakage currents).\nClock  transitions  are  discussed  in  greater  detail  in Section 3.1.2 GLYPH<147>Entering Power-Managed ModesGLYPH<148> .",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nWhen  the  device  executes  a SLEEP instruction,  the system  is  switched  to  one  of  the  power-managed modes,  depending  on  the  state  of  the  IDLEN  and SCS1:SCS0  bits of the OSCCON  register. See Section 3.0 GLYPH<147>Power-Managed ModesGLYPH<148> for details.\nWhen PRI_IDLE mode is selected, the designated primary  oscillator  continues  to  run  without  interruption. For  all  other  power-managed  modes,  the  oscillator using the OSC1 pin is disabled. The OSC1 pin (and OSC2 pin, if used by the oscillator) will stop oscillating.\nIn secondary clock modes (SEC_RUN and SEC_IDLE), the Timer1 oscillator is operating and providing the system clock. The Timer1 oscillator may also run in all  power-managed modes if required to clock Timer1 or Timer3.",
    "2.8 Effects of Power-Managed Modes on the Various Clock Sources\nEnabling any on-chip feature that will  operate during Sleep will increase the current consumed during Sleep. The INTRC is required to support WDT operation. The Timer1 oscillator may be operating to support a RealTime Clock. Other features may be operating that do not require a system clock source (i.e., MSSP slave, PSP, INTx pins, A/D conversions and others).",
    "2.9 Power-up Delays\nPower-up delays are controlled by two timers so that no external  Reset  circuitry  is  required  for  most  applications.  The  delays  ensure  that  the  device  is  kept  in Reset until the device power supply is stable under normal circumstances and the primary clock is operating and  stable.  For  additional  information  on  power-up delays,  see Section 4.1  GLYPH<147>Power-on  Reset  (POR)GLYPH<148> through Section 4.5 GLYPH<147>Brown-out Reset (BOR)GLYPH<148> .\nThe first  timer  is  the  Power-up  Timer  (PWRT)  which provides  a  fixed  delay  on  power-up  (parameter  33, Table 26-10), if enabled, in Configuration Register 2L. The  second  timer  is  the  Oscillator  Start-up  Timer (OST), intended to keep the chip in Reset until the crystal oscillator is stable (LP , XT and HS modes). The OST does  this  by  counting  1024  oscillator  cycles  before allowing the oscillator to clock the device.",
    "2.9 Power-up Delays\nIn internal oscillator modes (RC_RUN and RC_IDLE), the internal oscillator block provides the system clock source.  The  INTRC  output  can  be  used  directly  to provide  the  system  clock  and  may  be  enabled  to support  various  special  features,  regardless  of  the power-managed mode (see Section 23.2 GLYPH<147>Watchdog Timer (WDT)GLYPH<148> through Section 23.4 GLYPH<147>Fail-Safe Clock MonitorGLYPH<148> ). The INTOSC output at 8 MHz may be used directly  to  clock  the  system  or  may  be  divided  down first. The INTOSC output is disabled if the system clock is provided directly from the INTRC output.\nWhen  the  HSPLL  Oscillator  mode  is  selected,  the device is kept in Reset for an additional 2 ms, following the HS mode OST delay, so the PLL can lock to the incoming clock frequency.",
    "2.9 Power-up Delays\nThere is a delay of 5 to 10 \u03bc s, following POR, while the controller becomes ready to execute instructions. This delay  runs  concurrently  with  any  other  delays.  This may be the only delay that occurs when any of the EC, RC  or  INTIO  modes  are  used  as  the  primary  clock source.",
    "2.9 Power-up Delays\nTABLE 2-3: OSC1 AND OSC2 PIN STATES IN SLEEP MODE\n\nRC, INTIO1, OSC1 Pin = Floating, external resistor should pull high. RC, INTIO1, OSC2 Pin = At logic low (clock/4 output). RCIO, INTIO2, OSC1 Pin = Floating, external resistor should pull high. RCIO, INTIO2, OSC2 Pin = Configured as PORTA, bit 6. ECIO, OSC1 Pin = Floating, pulled by external clock. ECIO, OSC2 Pin = Configured as PORTA, bit 6. EC, OSC1 Pin = Floating, pulled by external clock. EC, OSC2 Pin = At logic low (clock/4 output). LP, XT, and HS, OSC1 Pin = Feedback inverter disabled at quiescent voltage level. LP, XT, and HS, OSC2 Pin = Feedback inverter disabled at quiescent voltage level\nNote: See Table 4-1 in Section 4.0 GLYPH<147>ResetGLYPH<148> for time-outs due to Sleep and MCLR Reset.",
    "3.0 POWER-MANAGED MODES\nThe PIC18F2X20 and PIC18F4X20 devices offer a total of six operating modes  for more efficient power management (see Table 3-1). These operating modes provide a variety of options for selective power conservation  in  applications  where  resources  may  be limited (i.e., battery-powered devices).\nThere are three categories of power-managed modes:\nFor  PIC18F2X20/4X20  devices,  the  power-managed modes  are  invoked  by  using  the  existing SLEEP instruction. All modes exit to PRI_RUN mode when triggered  by  an  interrupt,  a  Reset,  or  a  WDT  time-out (PRI_RUN  mode  is  the  normal  full-power  execution mode; the CPU and peripherals are clocked by the primary  oscillator  source).  In  addition,  power-managed Run  modes  may  also  exit  to  Sleep  mode  or  their corresponding Idle mode.\nGLYPH<149> Sleep mode\nGLYPH<149> Idle modes\nGLYPH<149> Run modes",
    "3.0 POWER-MANAGED MODES\nThese categories define which portions of the device are clocked and sometimes, what speed. The Run and Idle modes may use any of the three available clock sources (primary, secondary or INTOSC multiplexer); the Sleep mode does not use a clock source.\nThe  clock  switching  feature  offered  in  other  PIC18 devices (i.e., using the Timer1 oscillator in place of the primary oscillator) and the Sleep mode offered by all PIC fi devices (where all system clocks are stopped) are both offered in the PIC18F2X20/4X20 devices (SEC_RUN and Sleep modes, respectively). However, additional  power-managed  modes  are  available  that allow  the  user  greater  flexibility  in  determining  what portions  of  the  device  are  operating.  The  powermanaged  modes  are  event  driven;  that  is,  some specific  event  must  occur  for  the  device  to  enter  or (more particularly) exit these operating modes.",
    "3.1 Selecting Power-Managed Modes\nSelecting a power-managed mode requires deciding if the CPU is to be clocked or not and selecting a clock source. The IDLEN bit controls CPU clocking while the SC1:SCS0 bits select  a  clock  source.  The  individual modes, bit settings, clock sources and affected modules are summarized in Table 3-1.",
    "3.1.1 CLOCK SOURCES\nThe clock source is selected by setting the SCS bits of the OSCCON register. Three clock sources are available for use in power-managed Idle modes: the primary clock (as configured in Configuration Register 1H), the secondary  clock  (Timer1  oscillator)  and  the  internal oscillator block. The secondary and internal oscillator block  sources  are  available  for  the  power-managed modes  (PRI_RUN  mode  is  the  normal  full-power execution mode; the CPU and peripherals are clocked by the primary oscillator source).\n\nTABLE 3-1: POWER-MANAGED MODES",
    "3.1.1 CLOCK SOURCES\nSleep, OSCCON<7,1:0>.IDLEN = 0. Sleep, OSCCON<7,1:0>.SCS1:SCS0 = 00. Sleep, Module Clocking.CPU = Off. Sleep, Module Clocking.Peripherals = Off. Sleep, Available Clock and Oscillator Source.Available Clock and Oscillator Source = None GLYPH<150> All clocks are disabled. PRI_RUN, OSCCON<7,1:0>.IDLEN = 0. PRI_RUN, OSCCON<7,1:0>.SCS1:SCS0 = 00. PRI_RUN, Module Clocking.CPU = Clocked. PRI_RUN, Module Clocking.Peripherals = Clocked. PRI_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary GLYPH<150> LP, XT, HS, HSPLL, RC, EC, INTRC (1) This is the normal full-power execution mode.. SEC_RUN, OSCCON<7,1:0>.IDLEN = 0.",
    "3.1.1 CLOCK SOURCES\nSEC_RUN, OSCCON<7,1:0>.SCS1:SCS0 = 01. SEC_RUN, Module Clocking.CPU = Clocked. SEC_RUN, Module Clocking.Peripherals = Clocked. SEC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary GLYPH<150> Timer1 Oscillator. RC_RUN, OSCCON<7,1:0>.IDLEN = 0. RC_RUN, OSCCON<7,1:0>.SCS1:SCS0 = 1x. RC_RUN, Module Clocking.CPU = Clocked. RC_RUN, Module Clocking.Peripherals = Clocked. RC_RUN, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (1). PRI_IDLE, OSCCON<7,1:0>.IDLEN = 1. PRI_IDLE, OSCCON<7,1:0>.SCS1:SCS0 = 00. PRI_IDLE, Module Clocking.CPU =",
    "3.1.1 CLOCK SOURCES\nOff. PRI_IDLE, Module Clocking.Peripherals = Clocked. PRI_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Primary GLYPH<150> LP, XT, HS, HSPLL, RC, EC. SEC_IDLE, OSCCON<7,1:0>.IDLEN = 1. SEC_IDLE, OSCCON<7,1:0>.SCS1:SCS0 = 01. SEC_IDLE, Module Clocking.CPU = Off. SEC_IDLE, Module Clocking.Peripherals = Clocked. SEC_IDLE, Available Clock and Oscillator Source.Available Clock and Oscillator Source = Secondary GLYPH<150> Timer1 Oscillator. RC_IDLE, OSCCON<7,1:0>.IDLEN = 1. RC_IDLE, OSCCON<7,1:0>.SCS1:SCS0 = 1x. RC_IDLE, Module Clocking.CPU = Off. RC_IDLE, Module Clocking.Peripherals = Clocked. RC_IDLE, Available Clock and",
    "3.1.1 CLOCK SOURCES\nOscillator Source.Available Clock and Oscillator Source = Internal Oscillator Block (1)\nNote 1: Includes INTOSC and INTOSC postscaler, as well as the INTRC source.",
    "3.1.2 ENTERING POWER-MANAGED MODES\nIn  general,  entry,  exit  and  switching  between  powermanaged clock sources requires clock source switching. In each case, the sequence of events is the same.\n- Note 1: Caution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\nAny change in the power-managed mode begins with loading the OSCCON register and executing a SLEEP instruction.  The  SCS1:SCS0  bits  select  one  of  three power-managed clock sources; the primary clock (as defined in Configuration Register 1H), the secondary clock (the Timer1 oscillator) and the internal oscillator block (used in RC modes). Modifying the SCS bits will have no effect until a SLEEP instruction  is  executed. Entry to the power-managed mode is triggered by the execution of a SLEEP instruction.",
    "3.1.2 ENTERING POWER-MANAGED MODES\nFigure 3-5  shows  how  the  system  is  clocked  while switching from the primary clock to the Timer1 oscillator. When the SLEEP instruction is executed, clocks to the  device  are  stopped  at  the  beginning  of  the  next instruction cycle. Eight clock cycles from the new clock source are counted to synchronize with the new clock source.  After  eight  clock  pulses  from  the  new  clock source are counted, clocks from the new clock source resume clocking the system. The actual length of the pause is between eight and nine clock periods from the new  clock  source.  This  ensures  that  the  new  clock source is stable and that its pulse width will not be less than the shortest pulse width of the two clock sources.",
    "3.1.2 ENTERING POWER-MANAGED MODES\nThree bits indicate the current clock source: OSTS and IOFS  in  the  OSCCON  register  and  T1RUN  in  the T1CON register. Only one of these bits will be set while in a power-managed mode other than PRI_RUN. When the OSTS bit is set, the primary clock is providing the system clock. When the IOFS bit is set, the INTOSC output is providing a stable 8 MHz clock source and is providing the system clock. When the T1RUN bit is set, the Timer1 oscillator is providing the system clock. If none of these bits are set, then either the INTRC clock source is clocking the system or the INTOSC source is not yet stable.\nIf the internal oscillator block is configured as the primary clock source in Configuration Register 1H, then both  the  OSTS  and  IOFS  bits  may  be  set  when  in PRI_RUN or PRI_IDLE modes. This indicates that the primary clock (INTOSC output) is generating a stable 8 MHz output.  Entering  a  power-managed RC  mode (same frequency) would clear the OSTS bit.",
    "3.1.2 ENTERING POWER-MANAGED MODES\n- 2: Executing a SLEEP instruction  does  not necessarily  place  the  device  into  Sleep mode;  executing  a SLEEP instruction  is simply a trigger to place the controller into a power-managed mode selected by the OSCCON register, one of which is Sleep mode.",
    "3.1.3 MULTIPLE SLEEP COMMANDS\nThe  power-managed  mode  that  is  invoked  with  the SLEEP instruction is determined by the settings of the IDLEN and SCS bits at the time the instruction is executed.  If  another SLEEP instruction  is  executed,  the device will enter the power-managed mode specified by  these  same  bits  at  that  time.  If  the  bits  have changed, the device will enter the new power-managed mode specified by the new bit settings.",
    "3.1.4 COMPARISONS BETWEEN RUN AND IDLE MODES\nClock source selection for the Run modes is identical to the corresponding Idle modes. When a SLEEP instruction is executed, the SCS bits in the OSCCON register are  used  to  switch  to  a  different  clock  source.  As  a result, if there is a change of clock source at the time a SLEEP instruction is executed, a clock switch will occur.\nIn Idle modes, the CPU is not clocked and is not running. In Run modes, the CPU is clocked and executing code.  This  difference  modifies  the  operation  of  the WDT when it times out. In Idle modes, a WDT time-out results in a wake from power-managed modes. In Run modes, a WDT time-out results in a WDT Reset (see Table 3-2).\nDuring a wake-up from an Idle mode, the CPU starts executing  code  by  entering  the  corresponding  Run mode until the primary clock becomes ready. When the primary clock becomes ready, the clock source is automatically switched to the primary clock. The IDLEN and SCS bits are unchanged during and after the wake-up.",
    "3.1.4 COMPARISONS BETWEEN RUN AND IDLE MODES\nFigure 3-2 shows how the system is clocked during the clock source switch. The example assumes the device was in SEC_IDLE or SEC_RUN mode when a wake is triggered (the primary clock was configured in HSPLL mode).",
    "TABLE 3-2: COMPARISON BETWEEN POWER-MANAGED MODES\nSleep, CPU is Clocked by ... = Not clocked (not running). Sleep, WDT Time-out Causes a ... = Wake-up. Sleep, Peripherals are Clocked by ... = Not clocked. Sleep, Clock During Wake-up (while primary becomes ready) = None or INTOSC multiplexer if Two-Speed Start-up or Fail-Safe Clock Monitor is enabled.. Any Idle mode, CPU is Clocked by ... = Not clocked (not running). Any Idle mode, WDT Time-out Causes a ... = Wake-up. Any Idle mode, Peripherals are Clocked by ... = Primary, Secondaryor INTOSC multiplexer. Any Idle mode, Clock During Wake-up (while primary becomes ready) = Unchanged from Idle mode (CPU operates as in corresponding Run mode).. Any Run mode, CPU is Clocked by ... = Secondary or INTOSC multiplexer. Any Run mode, WDT Time-out Causes a ... = Reset. Any Run mode, Peripherals are Clocked by ... = Secondary or INTOSC multiplexer.",
    "TABLE 3-2: COMPARISON BETWEEN POWER-MANAGED MODES\nAny Run mode, Clock During Wake-up (while primary becomes ready) = Unchanged from Run mode.",
    "3.2 Sleep Mode\nThe power-managed Sleep mode in the PIC18F2X20/ 4X20 devices is identical to that offered in all other PIC microcontrollers.  It  is  entered  by  clearing  the  IDLEN and  SCS1:SCS0  bits  (this  is  the  Reset  state)  and executing the SLEEP instruction. This shuts down the primary  oscillator  and  the  OSTS  bit  is  cleared  (see Figure 3-1).\nThere is one exception to how the IDLEN bit functions. When  all  the  low-power  OSCCON  bits  are  cleared (IDLEN:SCS1:SCS0 = 000 ),  the  device  enters  Sleep mode upon the execution of the SLEEP instruction. This is both the Reset state of the OSCCON register and the setting that selects Sleep mode. This maintains compatibility with other PIC devices that do not offer power-managed modes.",
    "3.2 Sleep Mode\nWhen a wake event occurs in Sleep mode (by interrupt, Reset or WDT time-out), the system will not be clocked until  the  primary  clock  source  becomes  ready  (see Figure 3-2),  or  it  will  be  clocked  from  the  internal oscillator block if either the Two-Speed Start-up or the Fail-Safe Clock Monitor are enabled (see Section 23.0 GLYPH<147>Special  Features  of  the  CPUGLYPH<148> ).  In  either case, the OSTS bit is set when the primary clock is providing the system  clocks.  The  IDLEN  and  SCS  bits  are  not affected by the wake-up.",
    "3.3 Idle Modes\nThe  IDLEN  bit  allows  the  controllerGLYPH<146>s CPU  to  be selectively shut down while the peripherals continue to operate. Clearing IDLEN allows the CPU to be clocked. Setting IDLEN disables clocks to the CPU, effectively stopping  program  execution  (see  Register 2-3).  The peripherals  continue  to  be  clocked  regardless  of  the setting of the IDLEN bit.\nIf the Idle Enable bit, IDLEN (OSCCON<7>), is set to a GLYPH<145> 1 GLYPH<146> when a SLEEP instruction is executed, the peripherals  will  be  clocked  from  the  clock  source selected using the SCS1:SCS0 bits; however, the CPU will  not  be  clocked.  Since  the  CPU  is  not  executing instructions, the only exits from any of the Idle modes are by interrupt, WDT time-out or a Reset.",
    "3.3 Idle Modes\nWhen  a  wake-up  event  occurs,  CPU  execution  is delayed approximately 10 \u03bc s while it becomes ready to execute code. When the CPU begins executing code, it is clocked by the same clock source as was selected in the power-managed mode (i.e., when waking from RC_IDLE mode, the internal oscillator block will clock the CPU and peripherals until the primary clock source becomes ready GLYPH<150>  this  is  essentially RC_RUN mode). This continues until the primary clock source becomes ready.  When  the  primary  clock  becomes  ready,  the OSTS  bit  is  set  and  the  system  clock  source  is switched  to  the  primary  clock  (see  Figure 3-4).  The IDLEN and SCS bits are not affected by the wake-up.\nWhile in any Idle mode or Sleep mode, a WDT time-out will result in a WDT wake-up to full-power operation.",
    "FIGURE 3-1: TIMING TRANSITION FOR ENTRY TO SLEEP MODE\nOSC1, 1 = Q4 Q3 Q2 Q1 Q1",
    "3.3.1 PRI_IDLE MODE\nThis mode is unique among the three low-power Idle modes in that it does not disable the primary system clock. For timing sensitive applications, this allows for the  fastest  resumption  of  device  operation,  with  its more accurate primary clock  source,  since  the  clock source does not have to GLYPH<147>warm upGLYPH<148> or transition from another oscillator.\nWhen  a  wake-up  event  occurs,  the  CPU  is  clocked from  the  primary  clock  source.  A  delay  of  approximately 10 \u03bc s  is  required between the wake-up event and  when  code  execution  starts.  This  is  required  to allow the CPU to become ready to execute instructions. After  the  wake-up,  the  OSTS  bit  remains  set.  The IDLEN and SCS bits are not affected by the wake-up (see Figure 3-4).\nPRI_IDLE mode is entered by setting the IDLEN bit, clearing the SCS bits and executing a SLEEP instruction.  Although  the  CPU  is  disabled,  the  peripherals continue to be clocked from the primary clock source specified in Configuration Register 1H. The OSTS bit remains set in PRI_IDLE mode (see Figure 3-3).",
    "3.3.2 SEC_IDLE MODE\nIn  SEC_IDLE  mode,  the  CPU  is  disabled  but  the peripherals  continue  to  be  clocked  from  the  Timer1 oscillator. This mode is entered by setting the IDLEN bit,  modifying  to  SCS1:SCS0 = 01 and  executing  a SLEEP instruction. When the clock source is switched to  the  Timer1  oscillator  (see  Figure 3-5),  the  primary oscillator is shut down, the OSTS bit is cleared and the T1RUN bit is set.\nNote:",
    "3.3.2 SEC_IDLE MODE\nWhen a wake-up event occurs, the peripherals continue to be clocked from the Timer1 oscillator. After a 10 \u03bc s delay following the wake-up event, the CPU begins executing code, being clocked by the Timer1 oscillator. The microcontroller  operates  in  SEC_RUN  mode  until  the primary clock becomes ready. When the primary clock becomes ready, a clock switch back to the primary clock occurs (see Figure 3-6). When the clock switch is complete, the T1RUN bit is cleared, the OSTS bit is set and the  primary  clock  is  providing  the  system  clock.  The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "3.3.2 SEC_IDLE MODE\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_IDLE mode. If the T1OSCEN bit is not set when trying to set the SCS0 bit (OSCCON<0>), the write to SCS0 will not occur. If  the Timer1  oscillator  is  enabled  but  not  yet running, peripheral clocks will be delayed until the oscillator has started; in such situations,  initial  oscillator  operation  is  far from  stable  and  unpredictable  operation may result.",
    "3.3.3 RC_IDLE MODE\nIn RC_IDLE mode, the CPU is disabled but the peripherals continue to be clocked from the internal oscillator block using the INTOSC multiplexer. This mode allows for controllable power conservation during Idle periods.\nThis mode is entered by setting the IDLEN bit, setting SCS1  (SCS0  is  ignored)  and  executing  a SLEEP instruction.  The  INTOSC multiplexer may be used to select a higher clock frequency by modifying the IRCF bits before executing the SLEEP instruction. When the clock  source  is  switched  to  the  INTOSC  multiplexer (see  Figure 3-7),  the  primary  oscillator  is  shut  down and the OSTS bit is cleared.",
    "3.3.3 RC_IDLE MODE\nIf  the  IRCF  bits  are  set  to  a  non-zero  value  (thus enabling the INTOSC output), the IOFS bit becomes set after the INTOSC output becomes stable, in about 1 ms.  Clocks  to  the  peripherals  continue  while  the INTOSC source stabilizes. If the IRCF bits were previously at a non-zero value before the SLEEP instruction was  executed  and  the  INTOSC  source  was  already stable, the IOFS bit will remain set. If the IRCF bits are all  clear,  the  INTOSC  output  is  not  enabled  and  the IOFS bit will remain clear; there will be no indication of the current clock source.",
    "3.3.3 RC_IDLE MODE\nWhen a wake-up event  occurs,  the  peripherals  continue to be clocked from the INTOSC multiplexer. After a 10 \u03bc s  delay  following  the  wake-up  event,  the  CPU begins executing code, being clocked by the INTOSC multiplexer. The microcontroller operates in RC_RUN mode until the primary clock becomes ready. When the primary clock becomes ready, a clock switch back to the  primary  clock  occurs  (see  Figure 3-8).  When  the clock switch is complete, the IOFS bit is cleared, the OSTS bit is set and the primary clock is providing the system clock. The IDLEN and SCS bits are not affected by the wake-up. The INTRC source will continue to run if  either  the  WDT  or  the  Fail-Safe  Clock  Monitor  is enabled.",
    "3.4 Run Modes\nIf  the  IDLEN bit is clear when a SLEEP instruction is executed, the CPU and peripherals are both clocked from the source selected using the SCS1:SCS0 bits. While these operating modes may not afford the power conservation of Idle or Sleep modes, they do allow the device  to  continue  executing  instructions  by  using  a lower  frequency  clock  source.  RC_RUN  mode  also offers the possibility of executing code at a frequency greater than the primary clock.\nWake-up  from  a  power-managed  Run  mode  can  be triggered by an interrupt, or any Reset, to return to fullpower operation. As the CPU is executing code in Run modes, several additional exits  from  Run  modes  are possible. They include exit to Sleep mode, exit to a corresponding Idle mode, and exit by executing a RESET instruction.  While  the  device  is  in  any  of  the  powermanaged Run modes, a WDT time-out will result in a WDT Reset.",
    "3.4.1 PRI_RUN MODE\nThe PRI_RUN mode is the normal full-power execution mode. If the SLEEP instruction is never executed, the microcontroller operates in this mode (a SLEEP instruction  is  executed  to  enter  all  other  power-managed modes).  All other power-managed  modes  exit  to PRI_RUN mode when an interrupt  or  WDT  time-out occur.\nThere is no entry to PRI_RUN mode. The OSTS bit is set. The IOFS bit may be set if the internal oscillator block is the primary clock source (see Section 2.7.1 GLYPH<147>Oscillator Control RegisterGLYPH<148> ).",
    "3.4.2 SEC_RUN MODE\nThe SEC_RUN mode is the compatible mode to the GLYPH<147>clock switchingGLYPH<148> feature offered in other PIC18 devices.  In  this  mode,  the  CPU  and  peripherals  are clocked from the Timer1 oscillator. This gives users the option of lower power consumption while still using a high-accuracy clock source.\nSEC_RUN mode is entered by clearing the IDLEN bit, setting SCS1:SCS0 = 01 and  executing a SLEEP instruction. The system clock source is switched to the Timer1 oscillator (see Figure 3-9), the primary oscillator is shut down, the T1RUN bit (T1CON<6>) is set and the OSTS bit is cleared.\nNote:",
    "3.4.2 SEC_RUN MODE\nThe  Timer1  oscillator  should  already  be running prior to entering SEC_RUN mode. If the T1OSCEN bit is not set when trying  to  set  the  SCS0  bit,  the  write  to SCS0 will not occur. If the Timer1 oscillator is enabled, but not yet running, system clocks  will  be  delayed  until  the  oscillator has started; in such situations, initial oscillator operation  is  far from  stable  and unpredictable operation may result.\nWhen  a  wake-up  event  occurs,  the  peripherals  and CPU continue to be clocked from the Timer1 oscillator while  the  primary  clock  is  started.  When  the  primary clock becomes ready, a clock switch back to the primary clock occurs (see Figure 3-6). When the clock switch is complete, the T1RUN bit is cleared, the OSTS bit is set and the primary clock is providing the system clock. The IDLEN and SCS bits are not affected by the wake-up; the Timer1 oscillator continues to run.",
    "3.4.2 SEC_RUN MODE\nFirmware can force an exit from SEC_RUN mode. By clearing the T1OSCEN bit (T1CON<3>), an exit from SEC_RUN back to normal full-power operation is triggered.  The  Timer1  oscillator  will  continue  to  run  and provide the system clock even though the T1OSCEN bit is  cleared.  The  primary  clock  is  started.  When  the primary clock becomes ready, a clock switch back to the primary clock occurs (see Figure 3-6). When the clock switch is complete, the Timer1 oscillator is disabled, the T1RUN  bit  is  cleared,  the  OSTS  bit  is  set  and  the primary clock is providing the system clock. The IDLEN and SCS bits are not affected by the wake-up.\nFIGURE 3-9: TIMING TRANSITION FOR ENTRY TO SEC_RUN MODE",
    "3.4.3 RC_RUN MODE\nIn RC_RUN  mode,  the  CPU  and  peripherals  are clocked  from  the  internal  oscillator  block  using  the INTOSC  multiplexer  and  the  primary  clock  is  shut down. When using the INTRC source, this mode provides the best power conservation of all the Run modes while still executing code. It works well for user applications  which  are  not  highly  timing  sensitive  or  do  not require high-speed clocks at all times.\nIf  the  primary  clock  source  is  the  internal  oscillator block (either of the INTIO1 or INTIO2 oscillators), there are no distinguishable differences between PRI_RUN and  RC_RUN  modes  during  execution.  However,  a clock switch delay will occur during entry to, and exit from, RC_RUN mode. Therefore, if the primary clock source  is  the  internal  oscillator  block,  the  use  of RC_RUN mode is not recommended.",
    "3.4.3 RC_RUN MODE\nThis mode is entered by clearing the IDLEN bit, setting SCS1  (SCS0  is  ignored)  and  executing  a SLEEP instruction. The  IRCF  bits may  select the clock frequency  before  the SLEEP instruction  is  executed. When  the  clock  source  is  switched  to  the  INTOSC multiplexer (see Figure 3-10), the primary oscillator is shut down and the OSTS bit is cleared.\nNote:\nCaution should be used when modifying a single IRCF bit. If VDD is less than 3V, it is possible  to  select  a  higher  clock  speed than is supported by the low VDD. Improper  device  operation  may  result  if the VDD/FOSC specifications are violated.\nIf the IRCF bits are all clear, the INTOSC output is not enabled and the IOFS bit will remain clear; there will be no indication of the current clock source. The INTRC source is providing the system clocks.\nIf the  IRCF  bits  are  changed  from  all  clear  (thus enabling the INTOSC output), the IOFS bit becomes set after the INTOSC output becomes stable. Clocks to the system continue while the INTOSC source stabilizes in approximately 1 ms.",
    "3.4.3 RC_RUN MODE\nIf  the  IRCF  bits  were  previously  at  a  non-zero  value before  the SLEEP instruction  was  executed  and  the INTOSC source was already stable, the IOFS bit will remain set.\nThe IRCF bits may be modified at any time to immediately  change  the  system  clock  speed.  Executing  a SLEEP instruction is not required to select a new clock frequency from the INTOSC multiplexer.\nWhen a wake-up event occurs, the system continues to be clocked from the INTOSC multiplexer while the primary clock is started. When the primary clock becomes ready, a clock switch to the primary clock occurs (see Figure 3-8).  When  the  clock  switch  is  complete,  the IOFS bit is cleared, the OSTS bit is set and the primary clock  is  providing  the  system  clock.  The  IDLEN  and SCS bits are not affected by the wake-up. The INTRC source  will  continue  to  run  if  either  the  WDT  or  the Fail-Safe Clock Monitor is enabled.",
    "3.4.4 EXIT TO IDLE MODE\nAn exit from a power-managed Run mode to its corresponding Idle mode is executed by setting the IDLEN bit  and  executing  a SLEEP instruction.  The  CPU  is halted at the beginning of the instruction following the SLEEP instruction. There are no changes to any of the clock  source  status  bits  (OSTS,  IOFS  or  T1RUN). While the CPU is halted, the peripherals continue to be clocked from the previously selected clock source.",
    "3.4.5 EXIT TO SLEEP MODE\nAn  exit  from  a  power-managed  Run  mode  to  Sleep mode is executed by clearing the IDLEN and SCS1:SCS0 bits  and  executing  a SLEEP instruction. The code is no different than the method used to invoke Sleep  mode  from  the  normal  operating  (full  power) mode.\nThe primary clock and internal oscillator block are disabled. The INTRC will continue to operate if the WDT is enabled. The Timer1 oscillator will continue to run, if enabled, in the T1CON register. All clock source status bits are cleared (OSTS, IOFS and T1RUN).",
    "3.5 Wake-up From Power-Managed Modes\nAn exit from any of the power-managed modes is triggered by an interrupt, a Reset, or a WDT time-out. This section  discusses  the  triggers  that  cause  exits  from power-managed modes. The clocking subsystem actions are discussed in each of the power-managed modes (see Section 3.2 GLYPH<147>Sleep ModeGLYPH<148> through Section 3.4 GLYPH<147>Run ModesGLYPH<148> ).\nNote:\nIf  application  code  is  timing  sensitive,  it should wait for the OSTS bit to become set before continuing. Use the interval during the low-power exit sequence (before OSTS is set) to perform timing insensitive GLYPH<147>housekeepingGLYPH<148> tasks.\nDevice  behavior  during  Low-Power  mode  exits  is summarized in Table 3-3.",
    "3.5.1 EXIT BY INTERRUPT\nAny of the available interrupt sources can cause the device to exit a power-managed mode and resume fullpower  operation. To enable this functionality, an interrupt source must be enabled by setting its enable bit  in  one  of  the  INTCON  or  PIE  registers.  The  exit sequence is initiated when the corresponding interrupt flag bit is set. On all exits from Lower Power mode by interrupt,  code  execution  branches  to  the  interrupt vector if the GIE/GIEH bit (INTCON<7>) is set. Otherwise,  code  execution  continues  or  resumes  without branching (see Section 9.0 GLYPH<147>InterruptsGLYPH<148> ).",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nPrimary System Clock (PRI_IDLE mode), Primary System Clock.Primary System Clock = LP, XT, HS. Primary System Clock (PRI_IDLE mode), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). Primary System Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by primary clock and executing instructions.. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Primary System Clock (PRI_IDLE mode), Primary System Clock.Primary System Clock = HSPLL. Primary System Clock (PRI_IDLE mode), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). Primary System Clock (PRI_IDLE mode), Clock Ready Status Bit",
    "ANY IDLE MODE (BY CLOCK SOURCES)\n(OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by primary clock and executing instructions.. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Primary System Clock (PRI_IDLE mode), Primary System Clock.Primary System Clock = EC, RC, INTRC (1). Primary System Clock (PRI_IDLE mode), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). Primary System Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = GLYPH<151>. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by primary clock and executing instructions.. Primary System Clock (PRI_IDLE",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nmode), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Primary System Clock (PRI_IDLE mode), Primary System Clock.Primary System Clock = INTOSC (2). Primary System Clock (PRI_IDLE mode), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). Primary System Clock (PRI_IDLE mode), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = IOFS. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by primary clock and executing instructions.. Primary System Clock (PRI_IDLE mode), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. T1OSC or INTRC (1), Primary System Clock.Primary System Clock = LP, XT, HS. T1OSC or INTRC (1),",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nPower-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST. T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. T1OSC or INTRC (1), Primary System Clock.Primary System Clock = HSPLL. T1OSC or INTRC (1), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST + 2 ms. T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. T1OSC or INTRC (1), Activity During",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nWake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. T1OSC or INTRC (1), Primary System Clock.Primary System Clock = EC, RC, INTRC (1). T1OSC or INTRC (1), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = GLYPH<151>. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. T1OSC or INTRC (1), Activity During",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nWake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. T1OSC or INTRC (1), Primary System Clock.Primary System Clock = INTOSC (2). T1OSC or INTRC (1), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (4). T1OSC or INTRC (1), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = IOFS. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. T1OSC or INTRC (1), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. INTOSC (2), Primary System Clock.Primary System Clock = LP, XT, HS. INTOSC (2),",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nPower-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST. INTOSC (2), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. INTOSC (2), Primary System Clock.Primary System Clock = HSPLL. INTOSC (2), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST + 2 ms. INTOSC (2), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nready.. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. INTOSC (2), Primary System Clock.Primary System Clock = EC, RC, INTRC (1). INTOSC (2), Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). INTOSC (2), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = GLYPH<151>. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. INTOSC (2), Primary System Clock.Primary System Clock = INTOSC (2). INTOSC (2), Power-Managed Mode Exit",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nDelay.Power-Managed Mode Exit Delay = None. INTOSC (2), Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = IOFS. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = CPU and peripherals clocked by selected power-managed mode clock and executing instructions until primary clock source becomes ready.. INTOSC (2), Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Sleep mode, Primary System Clock.Primary System Clock = LP, XT, HS. Sleep mode, Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST. Sleep mode, Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = Not clocked or Two-Speed Start-up (if enabled) until primary clock source becomes ready (3) .. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nReset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Sleep mode, Primary System Clock.Primary System Clock = HSPLL. Sleep mode, Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = OST + 2 ms. Sleep mode, Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = OSTS. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = Not clocked or Two-Speed Start-up (if enabled) until primary clock source becomes ready (3) .. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Sleep mode, Primary System Clock.Primary System Clock = EC, RC, INTRC (1). Sleep mode, Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (5). Sleep mode, Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = GLYPH<151>. Sleep mode, Activity During",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nWake-up from Power-Managed Mode.Exit by Interrupt = Not clocked or Two-Speed Start-up (if enabled) until primary clock source becomes ready (3) .. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .. Sleep mode, Primary System Clock.Primary System Clock = INTOSC (2). Sleep mode, Power-Managed Mode Exit Delay.Power-Managed Mode Exit Delay = 5-10 \u03bc s (4). Sleep mode, Clock Ready Status Bit (OSCCON).Clock Ready Status Bit (OSCCON) = IOFS. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Interrupt = Not clocked or Two-Speed Start-up (if enabled) until primary clock source becomes ready (3) .. Sleep mode, Activity During Wake-up from Power-Managed Mode.Exit by Reset = Not clocked or Two-Speed Start-up (if enabled) (3) .",
    "ANY IDLE MODE (BY CLOCK SOURCES)\nNote 1: In this instance, refers specifically to the INTRC clock source.\n2: Includes both the INTOSC 8 MHz source and postscaler derived frequencies.\n3: Two-Speed Start-up is covered in greater detail in Section 23.3 GLYPH<147>Two-Speed Start-upGLYPH<148> .\n4: Execution continues during the INTOSC stabilization period.\n5: Required delay when waking from Sleep and all Idle modes. This delay runs concurrently with any other required delays (see Section 3.3 GLYPH<147>Idle ModesGLYPH<148> ).",
    "3.5.2 EXIT BY RESET\nNormally, the device is held in Reset by the Oscillator Start-up Timer (OST) until the primary clock (defined in Configuration  Register  1H)  becomes  ready.  At  that time,  the  OSTS  bit  is  set  and  the  device  begins executing code.",
    "3.5.2 EXIT BY RESET\nCode  execution  can  begin  before  the  primary  clock becomes ready. If either the Two-Speed Start-up (see Section 23.3 GLYPH<147>T wo-Speed Start-upGLYPH<148> ) or Fail-Safe Clock  Monitor  (see Section 23.4  GLYPH<147>Fail-Safe Clock MonitorGLYPH<148> )  are  enabled  in  Configuration  Register 1H, the device may begin execution as soon as the Reset source  has  cleared.  Execution is clocked by the INTOSC  multiplexer  driven  by  the  internal  oscillator block. Since the OSCCON register is cleared following all Resets, the INTRC clock source is selected. A higher speed clock may be selected by modifying the IRCF bits in  the  OSCCON register. Execution is clocked by the internal  oscillator  block  until  either  the  primary  clock becomes ready, or a power-managed mode is entered before the primary clock becomes ready; the primary clock is then shut down.",
    "3.5.3 EXIT BY WDT TIME-OUT\nA WDT time-out will cause different actions depending on which power-managed mode the device is in when the time-out occurs.\nIf the device is not executing code (all Idle modes and Sleep mode), the time-out will result in a wake-up from the  power-managed  mode  (see Section 3.2  GLYPH<147>Sleep ModeGLYPH<148> through Section 3.4 GLYPH<147>Run ModesGLYPH<148> ).\nIf  the  device  is  executing  code  (all  Run  modes),  the time-out will result in a WDT Reset (see Section 23.2 GLYPH<147>Watchdog Timer (WDT)GLYPH<148> ).\nThe WDT timer and postscaler are cleared by executing  a SLEEP or CLRWDT instruction,  the  loss  of  a currently selected clock source (if the Fail-Safe Clock Monitor is enabled) and modifying the IRCF bits in the OSCCON register if the internal oscillator block is the system clock source.",
    "3.5.4 EXIT WITHOUT AN OSCILLATOR START-UP DELAY\nCertain  exits  from  power-managed  modes  do  not invoke the OST at all. These are:\nGLYPH<149> PRI_IDLE mode, where the primary clock source is not stopped; and\nGLYPH<149> the primary clock source is not any of the LP, XT, HS or HSPLL modes.\nIn  these cases, the primary clock source either does not  require  an  oscillator  start-up  delay,  since  it  is already  running  (PRI_IDLE),  or  normally  does  not require an oscillator start-up delay (RC, EC and INTIO Oscillator modes).\nHowever, a fixed delay (approximately 10 \u03bc s) following the wake-up event is required when leaving Sleep and Idle modes. This delay is required for the CPU to prepare for execution. Instruction execution resumes on the first clock cycle following this delay.",
    "3.6 INTOSC Frequency Drift\nThe  factory  calibrates  the  internal  oscillator  block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes, which can affect the controller operation in a variety of ways.\nIt is possible to adjust the INTOSC frequency by modifying the value in the OSCTUNE register. This has the side effect that the INTRC clock source frequency is also  affected.  However,  the  features  that  use  the INTRC source often do not require an exact frequency. These features include the Fail-Safe Clock Monitor, the Watchdog  Timer  and  the  RC_RUN/RC_IDLE  modes when the INTRC clock source is selected.\nBeing  able  to  adjust  the  INTOSC  requires  knowing when an adjustment is required, in which direction it should  be  made  and  in  some  cases,  how  large  a change  is  needed.  Three  examples  are  shown  but other techniques may be used.",
    "3.6.1 EXAMPLE GLYPH<150> USART\nAn  adjustment  may  be  indicated  when  the  USART begins  to  generate  framing  errors  or  receives  data with errors while in Asynchronous  mode.  Framing errors indicate that the system clock frequency is too high GLYPH<150> try  decrementing  the  value  in  the  OSCTUNE register to reduce the system clock frequency. Errors in data may suggest that the system clock speed is too low GLYPH<150> increment OSCTUNE.",
    "3.6.2 EXAMPLE GLYPH<150> TIMERS\nThis technique compares system clock speed to some reference clock. Two timers may be used; one timer is clocked  by  the  peripheral  clock,  while  the  other  is clocked  by  a  fixed  reference  source,  such  as  the Timer1 oscillator.\nBoth timers are cleared but the timer clocked by the reference generates interrupts. When an interrupt occurs, the internally clocked timer is read and both timers are cleared. If the internally clocked timer value is greater than  expected,  then  the  internal  oscillator  block  is running too fast GLYPH<150> decrement OSCTUNE.\nA  CCP  module  can  use  free-running  Timer1  (or Timer3), clocked by the internal oscillator block and an external  event  with  a  known  period  (i.e.,  AC  power frequency). The time of the first event is captured in the CCPRxH:CCPRxL registers  and  is  recorded  for  use later.  When  the  second  event  causes  a  capture,  the time of the first event is subtracted from the time of the second event. Since the period of the external event is known,  the  time  difference  between  events  can  be calculated.",
    "3.6.2 EXAMPLE GLYPH<150> TIMERS\nIf the measured  time is much  greater than the calculated time, the internal oscillator block is running too fast GLYPH<150> decrement OSCTUNE. If the measured time is  much  less  than  the  calculated  time,  the  internal oscillator block is running too slow GLYPH<150> increment OSCTUNE.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "4.0 RESET\nThe PIC18F2X20/4X20 devices differentiate between various kinds of Reset:\na) Power-on Reset (POR)\nb) MCLR Reset while executing instructions\nc) MCLR Reset when not executing instructions\nd) Watchdog Timer (WDT) Reset (during execution)\ne) Programmable Brown-out Reset (BOR)\nf) RESET Instruction\ng) Stack Full Reset\nh) Stack Underflow Reset\nMost  registers  are  not  affected  by  a  WDT  wake-up since this is viewed as the resumption of normal operation. Status bits from the RCON register, RI, TO, PD, POR and BOR, are set or cleared differently in different Reset situations as indicated in Table 4-2. These bits are  used  in  software  to  determine  the  nature  of  the Reset. See Table 4-3 for a full description of the Reset states of all registers.\nA simplified block diagram of the on-chip Reset circuit is shown in Figure 4-1.\nThe enhanced MCU devices have a MCLR noise filter in  the  MCLR  Reset  path.  The  filter  will  detect  and ignore small pulses.",
    "4.0 RESET\nMost registers are unaffected by a Reset. Their status is unknown  on  POR  and  unchanged  by  all  other Resets.  The  other  registers  are  forced  to  a  GLYPH<147>Reset stateGLYPH<148> depending on the type of Reset that occurred.\nThe MCLR pin is not driven low by any internal Resets, including the WDT.\nThe MCLR input provided by the MCLR pin can be disabled with the MCLRE bit in Configuration Register 3H (CONFIG3H<7>).  See Section 23.1  GLYPH<147>Configuration BitsGLYPH<148> for more information.",
    "FIGURE 4-1: SIMPLIFIED BLOCK DIAGRAM OF ON-CHIP RESET CIRCUIT\n- 2: See Table 4-1 for time-out situations.",
    "4.1 Power-on Reset (POR)\nA  Power-on  Reset  pulse  is  generated  on-chip  when VDD rise is detected. To take advantage of the POR circuitry, just tie the MCLR pin through a resistor (1k to 10 k \u03a9 ) to VDD. This will eliminate external RC components  usually  needed  to  create  a  Power-on  Reset delay. A  minimum  rise  rate  for VDD  is  specified (parameter D004). For a slow rise time, see Figure 4-2.\nWhen the device starts normal operation (i.e., exits the Reset  condition),  device  operating  parameters  (voltage,  frequency,  temperature,  etc.)  must  be  met  to ensure operation. If these conditions are not met, the device  must  be  held  in  Reset  until  the  operating conditions are met.",
    "EXTERNAL POWER-ON RESET CIRCUIT (FOR SLOW VDD POWER-UP)\nNote 1: External Power-on Reset circuit is required only if the VDD power-up slope is too slow. The diode D helps discharge the capacitor quickly when VDD powers down.\n2: R < 40 k \u03a9 is recommended to make sure that  the  voltage  drop  across  R  does  not violate the deviceGLYPH<146>s electrical specification.\n3: R1 \u2265 1 k \u03a9 will limit any current flowing into MCLR  from  external  capacitor  C,  in  the event of MCLR/VPP pin breakdown, due to Electrostatic Discharge (ESD) or Electrical Overstress (EOS).",
    "4.2 Power-up Timer (PWRT)\nThe Power-up Timer (PWRT) of the PIC18F2X20/4X20 devices  is  an  11-bit  counter,  which  uses  the  INTRC source  as  the  clock  input.  This  yields  a  count  of 2048 x 32 \u03bc s = 65.6 ms. While the PWRT is counting, the device is held in Reset.\nThe power-up time delay depends on the INTRC clock and will vary from chip-to-chip due to temperature and process variation. See DC parameter #33 for details.\nThe  PWRT  is  enabled  by  clearing  Configuration  bit, PWRTEN.",
    "4.3 Oscillator Start-up Timer (OST)\nThe Oscillator Start-up Timer (OST) provides a 1024 oscillator cycle (from OSC1 input) delay after the PWRT delay is over (parameter #33). This ensures that the  crystal  oscillator  or  resonator  has  started  and stabilized.\nThe OST time-out is invoked only for XT, LP, HS and HSPLL modes and only on Power-on Reset, or on exit from most power-managed modes.",
    "4.4 PLL Lock Time-out\nWith  the  PLL  enabled  in  its  PLL  mode,  the  time-out sequence  following a Power-on  Reset  is slightly different from other oscillator modes. A portion of the Power-up Timer is used to provide a fixed time-out that is sufficient for the PLL to lock to the main oscillator frequency. This PLL lock time-out (TPLL) is typically 2 ms and follows the oscillator start-up time-out.",
    "4.5 Brown-out Reset (BOR)\nA  Configuration  bit,  BOREN,  can  disable  (if  clear/ programmed) or enable (if set) the Brown-out Reset circuitry.  If  VDD  falls  below  VBOR  (parameter  D005)  for greater than TBOR (parameter #35), the brown-out situation will reset the chip. A Reset may not occur if VDD falls  below  VBOR  for  less  than  TBOR.  The  chip  will remain in Brown-out Reset until VDD rises above VBOR. If the Power-up Timer is enabled, it will be invoked after VDD  rises  above  VBOR;  it  then  will  keep  the  chip  in Reset for an additional time delay TPWRT (parameter #33).  If  VDD  drops  below  VBOR  while  the  Power-up Timer is running, the chip will go back into a Brown-out Reset and the Power-up Timer will be initialized. Once VDD rises above VBOR, the Power-up Timer will execute the  additional  time  delay.  Enabling  BOR  Reset  does not automatically enable the PWRT.",
    "4.6 Time-out Sequence\nOn  power-up,  the  time-out  sequence  is  as  follows: First, after the POR pulse has cleared, PWRT time-out is invoked (if enabled). Then, the OST is activated. The total time-out will vary based on oscillator configuration and the status of the PWRT. For example, in RC mode with the PWRT disabled, there will be no time-out at all. Figure 4-3, Figure 4-4, Figure 4-5, Figure 4-6 and Figure 4-7 depict time-out sequences on power-up.\nSince the time-outs occur from the POR pulse, if MCLR is kept low long enough, all time-outs will expire. Bringing MCLR  high  will begin execution immediately (Figure 4-5). This is useful for testing purposes or to synchronize more  than one PIC18FXXXX  device operating in parallel.\nTable 4-2 shows the Reset conditions for some Special Function Registers, while Table 4-3 shows the Reset conditions for all the registers.",
    "TABLE 4-1: TIME-OUT IN VARIOUS SITUATIONS\nHSPLL, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC + 2 ms (2). HSPLL, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC + 2 ms (2). HSPLL, Exit from Power-Managed Mode.Exit from Power-Managed Mode = 1024 TOSC + 2 ms (2). HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1) + 1024 TOSC. HS, XT, LP, Power-up (2) and Brown-out.PWRTEN = 1 = 1024 TOSC. HS, XT, LP, Exit from Power-Managed Mode.Exit from Power-Managed Mode = 1024 TOSC. EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). EC, ECIO, Power-up (2) and Brown-out.PWRTEN = 1 =",
    "TABLE 4-1: TIME-OUT IN VARIOUS SITUATIONS\nGLYPH<151>. EC, ECIO, Exit from Power-Managed Mode.Exit from Power-Managed Mode = GLYPH<151>. RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). RC, RCIO, Power-up (2) and Brown-out.PWRTEN = 1 = GLYPH<151>. RC, RCIO, Exit from Power-Managed Mode.Exit from Power-Managed Mode = GLYPH<151>. INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 0 = 66 ms (1). INTIO1, INTIO2, Power-up (2) and Brown-out.PWRTEN = 1 = GLYPH<151>. INTIO1, INTIO2, Exit from Power-Managed Mode.Exit from Power-Managed Mode = GLYPH<151>",
    "TABLE 4-1: TIME-OUT IN VARIOUS SITUATIONS\nNote 1: 66 ms (65.5 ms) is the nominal Power-up Timer (PWRT) delay.\n2: 2 ms is the nominal time required for the 4x PLL to lock.",
    "REGISTER 4-1: RCON REGISTER BITS AND POSITIONS\nR/W-0, 1 = U-0. R/W-0, 2 = U-0. R/W-0, 3 = R/W-1. R/W-0, 4 = R-1. R/W-0, 5 = R-1. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. IPEN, 1 = GLYPH<151>. IPEN, 2 = GLYPH<151>. IPEN, 3 = RI. IPEN, 4 = TO. IPEN, 5 = PD. IPEN, 6 = POR. IPEN, 7 = BOR\nbit 7\nbit 0\nNote: Refer to Section 5.14 GLYPH<147>RCON RegisterGLYPH<148> for bit definitions.",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nPower-on Reset, Program Counter = 0000h. Power-on Reset, RCON Register = 0--1 1100. Power-on Reset, RI = 1. Power-on Reset,  = 1. Power-on Reset, TO PD = 1. Power-on Reset, POR = 0. Power-on Reset, BOR = 0. Power-on Reset, STKFUL = 0. Power-on Reset, STKUNF = 0. RESET Instruction, Program Counter = 0000h. RESET Instruction, RCON Register = 0--0 uuuu. RESET Instruction, RI = 0. RESET Instruction,  = u. RESET Instruction, TO PD = u. RESET Instruction, POR = u. RESET Instruction, BOR = u. RESET Instruction, STKFUL = u. RESET Instruction, STKUNF = u. Brown-out Reset, Program Counter = 0000h. Brown-out Reset, RCON Register = 0--1 11u-. Brown-out Reset, RI = 1. Brown-out Reset,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 1. Brown-out Reset, TO PD = 1. Brown-out Reset, POR = u. Brown-out Reset, BOR = 0. Brown-out Reset, STKFUL = u. Brown-out Reset, STKUNF = u. MCLR Reset during power-managed Run modes, Program Counter = 0000h. MCLR Reset during power-managed Run modes, RCON Register = 0--u 1uuu. MCLR Reset during power-managed Run modes, RI = u. MCLR Reset during power-managed Run modes,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 1. MCLR Reset during power-managed Run modes, TO PD = u. MCLR Reset during power-managed Run modes, POR = u. MCLR Reset during power-managed Run modes, BOR = u. MCLR Reset during power-managed Run modes, STKFUL = u. MCLR Reset during power-managed Run modes, STKUNF = u. MCLR Reset during power-managed Idle modesand Sleep mode, Program Counter = 0000h. MCLR Reset during power-managed Idle modesand Sleep mode, RCON Register = 0--u 10uu. MCLR Reset during power-managed Idle modesand Sleep mode, RI = u. MCLR Reset during power-managed Idle modesand Sleep mode,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 1. MCLR Reset during power-managed Idle modesand Sleep mode, TO PD = 0. MCLR Reset during power-managed Idle modesand Sleep mode, POR = u. MCLR Reset during power-managed Idle modesand Sleep mode, BOR = u. MCLR Reset during power-managed Idle modesand Sleep mode, STKFUL = u. MCLR Reset during power-managed Idle modesand Sleep mode, STKUNF = u. WDT time-out during full power or power-managed Run mode, Program Counter = 0000h. WDT time-out during full power or power-managed Run mode, RCON Register = 0--u 0uuu. WDT time-out during full power or power-managed Run mode, RI = u. WDT time-out during full power or power-managed Run mode,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 0. WDT time-out during full power or power-managed Run mode, TO PD = u. WDT time-out during full power or power-managed Run mode, POR = u. WDT time-out during full power or power-managed Run mode, BOR = u. WDT time-out during full power or power-managed Run mode, STKFUL = u. WDT time-out during full power or power-managed Run mode, STKUNF = u. MCLR Reset during full-power execution, Program Counter = 0000h. MCLR Reset during full-power execution, RCON Register = . MCLR Reset during full-power execution, RI = . MCLR Reset during full-power execution,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= . MCLR Reset during full-power execution, TO PD = u. MCLR Reset during full-power execution, POR = u. MCLR Reset during full-power execution, BOR = u. MCLR Reset during full-power execution, STKFUL = u. MCLR Reset during full-power execution, STKUNF = u. Stack Full Reset (STVREN = 1 ), Program Counter = 0000h. Stack Full Reset (STVREN = 1 ), RCON Register = 0--u uuuu. Stack Full Reset (STVREN = 1 ), RI = u. Stack Full Reset (STVREN = 1 ),",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= u. Stack Full Reset (STVREN = 1 ), TO PD = u. Stack Full Reset (STVREN = 1 ), POR = u. Stack Full Reset (STVREN = 1 ), BOR = u. Stack Full Reset (STVREN = 1 ), STKFUL = 1. Stack Full Reset (STVREN = 1 ), STKUNF = u. Stack Underflow Reset (STVREN = 1 ), Program Counter = 0000h. Stack Underflow Reset (STVREN = 1 ), RCON Register = . Stack Underflow Reset (STVREN = 1 ), RI = . Stack Underflow Reset (STVREN = 1 ),",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= . Stack Underflow Reset (STVREN = 1 ), TO PD = u. Stack Underflow Reset (STVREN = 1 ), POR = u. Stack Underflow Reset (STVREN = 1 ), BOR = u. Stack Underflow Reset (STVREN = 1 ), STKFUL = u. Stack Underflow Reset (STVREN = 1 ), STKUNF = 1. Stack Underflow Error (not an actual Reset, STVREN = 0 ), Program Counter = 0000h. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RCON Register = u--u uuuu. Stack Underflow Error (not an actual Reset, STVREN = 0 ), RI = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ),",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), TO PD = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), POR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), BOR = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKFUL = u. Stack Underflow Error (not an actual Reset, STVREN = 0 ), STKUNF = 1. WDT time-out during power-managed Idle or Sleep modes, Program Counter = PC + 2. WDT time-out during power-managed Idle or Sleep modes, RCON Register = u--u 00uu. WDT time-out during power-managed Idle or Sleep modes, RI = u. WDT time-out during power-managed Idle or Sleep modes,",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\n= 0. WDT time-out during power-managed Idle or Sleep modes, TO PD = 0. WDT time-out during power-managed Idle or Sleep modes, POR = u. WDT time-out during power-managed Idle or Sleep modes, BOR = u. WDT time-out during power-managed Idle or Sleep modes, STKFUL = u. WDT time-out during power-managed Idle or Sleep modes, STKUNF = u. Interrupt exit from power-managed modes, Program Counter = PC + 2. Interrupt exit from power-managed modes, RCON Register = u--u u0uu. Interrupt exit from power-managed modes, RI = u. Interrupt exit from power-managed modes,  = u. Interrupt exit from power-managed modes, TO PD = 0. Interrupt exit from power-managed modes, POR = u. Interrupt exit from power-managed modes, BOR = u. Interrupt exit from power-managed modes, STKFUL = u. Interrupt exit from power-managed modes, STKUNF = u\nLegend:",
    "TABLE 4-2: STATUS BITS, THEIR SIGNIFICANCE AND THE INITIALIZATION CONDITION FOR RCON REGISTER\nu = unchanged, x = unknown, - = unimplemented bit, read as GLYPH<145> 0 GLYPH<146>\nNote 1: When the wake-up is due to an interrupt and the GIEH or GIEL bits are set, the PC is loaded with the interrupt vector (0x000008h or 0x000018h).",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSU, Applicable Devices = 2220. TOSU, Applicable Devices = 2320. TOSU, Applicable Devices = 4220. TOSU, Applicable Devices = 4320. TOSU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. TOSU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. TOSU, Wake-up via WDT or Interrupt = ---0 uuuu (3). TOSH, Applicable Devices = 2220. TOSH, Applicable Devices = 2320. TOSH, Applicable Devices = 4220. TOSH, Applicable Devices = 4320. TOSH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSH, Wake-up via WDT or Interrupt = uuuu uuuu (3).",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nTOSL, Applicable Devices = 2220. TOSL, Applicable Devices = 2320. TOSL, Applicable Devices = 4220. TOSL, Applicable Devices = 4320. TOSL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TOSL, Wake-up via WDT or Interrupt = uuuu uuuu (3). STKPTR, Applicable Devices = 2220. STKPTR, Applicable Devices = 2320. STKPTR, Applicable Devices = 4220. STKPTR, Applicable Devices = 4320. STKPTR, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = uu-0 0000. STKPTR, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 00-0 0000. STKPTR, Wake-up via WDT or Interrupt =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nuu-u uuuu (3). PCLATU, Applicable Devices = 2220. PCLATU, Applicable Devices = 2320. PCLATU, Applicable Devices = 4220. PCLATU, Applicable Devices = 4320. PCLATU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. PCLATU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = ---0 0000. PCLATU, Wake-up via WDT or Interrupt = ---u uuuu. PCLATH, Applicable Devices = 2220. PCLATH, Applicable Devices = 2320. PCLATH, Applicable Devices = 4220. PCLATH, Applicable Devices = 4320. PCLATH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PCLATH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPCLATH, Wake-up via WDT or Interrupt = uuuu uuuu. PCL, Applicable Devices = 2220. PCL, Applicable Devices = 2320. PCL, Applicable Devices = 4220. PCL, Applicable Devices = 4320. PCL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PCL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. PCL, Wake-up via WDT or Interrupt = PC + 2 (2). TBLPTRU, Applicable Devices = 2220. TBLPTRU, Applicable Devices = 2320. TBLPTRU, Applicable Devices = 4220. TBLPTRU, Applicable Devices = 4320. TBLPTRU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0000. TBLPTRU, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = --00",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n0000. TBLPTRU, Wake-up via WDT or Interrupt = --uu uuuu. TBLPTRH, Applicable Devices = 2220. TBLPTRH, Applicable Devices = 2320. TBLPTRH, Applicable Devices = 4220. TBLPTRH, Applicable Devices = 4320. TBLPTRH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRH, Wake-up via WDT or Interrupt = uuuu uuuu. TBLPTRL, Applicable Devices = 2220. TBLPTRL, Applicable Devices = 2320. TBLPTRL, Applicable Devices = 4220. TBLPTRL, Applicable Devices = 4320. TBLPTRL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRL, Power-on Reset,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nBrown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TBLPTRL, Wake-up via WDT or Interrupt = uuuu uuuu. TABLAT, Applicable Devices = 2220. TABLAT, Applicable Devices = 2320. TABLAT, Applicable Devices = 4220. TABLAT, Applicable Devices = 4320. TABLAT, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TABLAT, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TABLAT, Wake-up via WDT or Interrupt = uuuu uuuu. PRODH, Applicable Devices = 2220. PRODH, Applicable Devices = 2320. PRODH, Applicable Devices = 4220. PRODH, Applicable Devices = 4320. PRODH, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = xxxx xxxx. PRODH, Power-on Reset, Brown-out Reset MCLR Resets",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nWDT Reset RESET Instruction Stack Resets = uuuu uuuu. PRODH, Wake-up via WDT or Interrupt = uuuu uuuu. PRODL, Applicable Devices = 2220. PRODL, Applicable Devices = 2320. PRODL, Applicable Devices = 4220. PRODL, Applicable Devices = 4320. PRODL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = xxxx xxxx. PRODL, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. PRODL, Wake-up via WDT or Interrupt = uuuu uuuu. INTCON, Applicable Devices = 2220. INTCON, Applicable Devices = 2320. INTCON, Applicable Devices = 4220. INTCON, Applicable Devices = 4320. INTCON, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 000x. INTCON, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nRESET Instruction Stack Resets = 0000 000u. INTCON, Wake-up via WDT or Interrupt = uuuu uuuu (1). INTCON2, Applicable Devices = 2220. INTCON2, Applicable Devices = 2320. INTCON2, Applicable Devices = 4220. INTCON2, Applicable Devices = 4320. INTCON2, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 -1-1. INTCON2, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 -1-1. INTCON2, Wake-up via WDT or Interrupt = uuuu -u-u (1). INTCON3, Applicable Devices = 2220. INTCON3, Applicable Devices = 2320. INTCON3, Applicable Devices = 4220. INTCON3, Applicable Devices = 4320. INTCON3, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 11-0 0-00. INTCON3,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPower-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = 11-0 0-00. INTCON3, Wake-up via WDT or Interrupt = uu-u u-uu (1). INDF0, Applicable Devices = 2220. INDF0, Applicable Devices = 2320. INDF0, Applicable Devices = 4220. INDF0, Applicable Devices = 4320. INDF0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF0, Wake-up via WDT or Interrupt = N/A. POSTINC0, Applicable Devices = 2220. POSTINC0, Applicable Devices = 2320. POSTINC0, Applicable Devices = 4220. POSTINC0, Applicable Devices = 4320. POSTINC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nN/A. POSTINC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC0, Wake-up via WDT or Interrupt = N/A. POSTDEC0, Applicable Devices = 2220. POSTDEC0, Applicable Devices = 2320. POSTDEC0, Applicable Devices = 4220. POSTDEC0, Applicable Devices = 4320. POSTDEC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC0, Wake-up via WDT or Interrupt = N/A. PREINC0, Applicable Devices = 2220. PREINC0, Applicable Devices = 2320. PREINC0, Applicable Devices = 4220. PREINC0, Applicable Devices = 4320. PREINC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nResets = N/A. PREINC0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PREINC0, Wake-up via WDT or Interrupt = N/A. PLUSW0, Applicable Devices = 2220. PLUSW0, Applicable Devices = 2320. PLUSW0, Applicable Devices = 4220. PLUSW0, Applicable Devices = 4320. PLUSW0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PLUSW0, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PLUSW0, Wake-up via WDT or Interrupt = N/A. FSR0H, Applicable Devices = 2220. FSR0H, Applicable Devices = 2320. FSR0H, Applicable Devices = 4220. FSR0H, Applicable Devices = 4320. FSR0H, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\n---- xxxx. FSR0H, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu. FSR0H, Wake-up via WDT or Interrupt = ---- uuuu. FSR0L, Applicable Devices = 2220. FSR0L, Applicable Devices = 2320. FSR0L, Applicable Devices = 4220. FSR0L, Applicable Devices = 4320. FSR0L, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = xxxx xxxx. FSR0L, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. FSR0L, Wake-up via WDT or Interrupt = uuuu uuuu. WREG, Applicable Devices = 2220. WREG, Applicable Devices = 2320. WREG, Applicable Devices = 4220. WREG, Applicable Devices = 4320. WREG, Power-on Reset,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nBrown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = xxxx xxxx. WREG, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. WREG, Wake-up via WDT or Interrupt = uuuu uuuu. INDF1, Applicable Devices = 2220. INDF1, Applicable Devices = 2320. INDF1, Applicable Devices = 4220. INDF1, Applicable Devices = 4320. INDF1, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF1, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF1, Wake-up via WDT or Interrupt = N/A. POSTINC1, Applicable Devices = 2220. POSTINC1, Applicable Devices = 2320. POSTINC1, Applicable Devices = 4220. POSTINC1, Applicable Devices = 4320. POSTINC1,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nPower-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC1, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC1, Wake-up via WDT or Interrupt = N/A. POSTDEC1 PREINC1 PLUSW1, Applicable Devices = 2220 2220 2220. POSTDEC1 PREINC1 PLUSW1, Applicable Devices = 2320 2320 2320. POSTDEC1 PREINC1 PLUSW1, Applicable Devices = 4220 4220 4220. POSTDEC1 PREINC1 PLUSW1, Applicable Devices = 4320 4320 4320. POSTDEC1 PREINC1 PLUSW1, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A N/A N/A. POSTDEC1 PREINC1 PLUSW1, Power-on Reset, Brown-out Reset MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nN/A N/A. POSTDEC1 PREINC1 PLUSW1, Wake-up via WDT or Interrupt = N/A N/A N/A\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as GLYPH<145> 0 GLYPH<146>, q = value depends on condition.\nShaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-2 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read GLYPH<145> 0 GLYPH<146>.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nFSR1H, Applicable Devices = 2220. FSR1H, Applicable Devices = 2320. FSR1H, Applicable Devices = 4220. FSR1H, Applicable Devices = 4320. FSR1H, Power-on Reset, Brown-out Reset = ---- xxxx. FSR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu. FSR1H, Wake-up via WDT or Interrupt = ---- uuuu. FSR1L, Applicable Devices = 2220. FSR1L, Applicable Devices = 2320. FSR1L, Applicable Devices = 4220. FSR1L, Applicable Devices = 4320. FSR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. FSR1L, Wake-up via WDT or Interrupt = uuuu uuuu. BSR, Applicable Devices = 2220. BSR,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 2320. BSR, Applicable Devices = 4220. BSR, Applicable Devices = 4320. BSR, Power-on Reset, Brown-out Reset = ---- 0000. BSR, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- 0000. BSR, Wake-up via WDT or Interrupt = ---- uuuu. INDF2, Applicable Devices = 2220. INDF2, Applicable Devices = 2320. INDF2, Applicable Devices = 4220. INDF2, Applicable Devices = 4320. INDF2, Power-on Reset, Brown-out Reset = N/A. INDF2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. INDF2, Wake-up via WDT or Interrupt = N/A. POSTINC2, Applicable Devices = 2220. POSTINC2, Applicable Devices = 2320. POSTINC2, Applicable Devices = 4220. POSTINC2, Applicable Devices = 4320. POSTINC2, Power-on Reset, Brown-out Reset",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= N/A. POSTINC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTINC2, Wake-up via WDT or Interrupt = N/A. POSTDEC2, Applicable Devices = 2220. POSTDEC2, Applicable Devices = 2320. POSTDEC2, Applicable Devices = 4220. POSTDEC2, Applicable Devices = 4320. POSTDEC2, Power-on Reset, Brown-out Reset = N/A. POSTDEC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. POSTDEC2, Wake-up via WDT or Interrupt = N/A. PREINC2, Applicable Devices = 2220. PREINC2, Applicable Devices = 2320. PREINC2, Applicable Devices = 4220. PREINC2, Applicable Devices = 4320. PREINC2, Power-on Reset, Brown-out Reset = N/A. PREINC2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PREINC2, Wake-up via",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT or Interrupt = N/A. PLUSW2, Applicable Devices = 2220. PLUSW2, Applicable Devices = 2320. PLUSW2, Applicable Devices = 4220. PLUSW2, Applicable Devices = 4320. PLUSW2, Power-on Reset, Brown-out Reset = N/A. PLUSW2, MCLR Resets WDT Reset RESET Instruction Stack Resets = N/A. PLUSW2, Wake-up via WDT or Interrupt = N/A. FSR2H, Applicable Devices = 2220. FSR2H, Applicable Devices = 2320. FSR2H, Applicable Devices = 4220. FSR2H, Applicable Devices = 4320. FSR2H, Power-on Reset, Brown-out Reset = ---- xxxx. FSR2H, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- uuuu. FSR2H, Wake-up via WDT or Interrupt = ---- uuuu. FSR2L, Applicable Devices = 2220. FSR2L, Applicable Devices =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2320. FSR2L, Applicable Devices = 4220. FSR2L, Applicable Devices = 4320. FSR2L, Power-on Reset, Brown-out Reset = xxxx xxxx. FSR2L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. FSR2L, Wake-up via WDT or Interrupt = uuuu uuuu. STATUS, Applicable Devices = 2220. STATUS, Applicable Devices = 2320. STATUS, Applicable Devices = 4220. STATUS, Applicable Devices = 4320. STATUS, Power-on Reset, Brown-out Reset = ---x xxxx. STATUS, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---u uuuu. STATUS, Wake-up via WDT or Interrupt = ---u uuuu. TMR0H, Applicable Devices = 2220. TMR0H, Applicable Devices = 2320. TMR0H, Applicable Devices = 4220. TMR0H, Applicable Devices = 4320.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTMR0H, Power-on Reset, Brown-out Reset = 0000 0000. TMR0H, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TMR0H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR0L, Applicable Devices = 2220. TMR0L, Applicable Devices = 2320. TMR0L, Applicable Devices = 4220. TMR0L, Applicable Devices = 4320. TMR0L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR0L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR0L, Wake-up via WDT or Interrupt = uuuu uuuu. T0CON, Applicable Devices = 2220. T0CON, Applicable Devices = 2320. T0CON, Applicable Devices = 4220. T0CON, Applicable Devices = 4320. T0CON, Power-on Reset, Brown-out",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nReset = 1111 1111. T0CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. T0CON, Wake-up via WDT or Interrupt = uuuu uuuu. OSCCON, Applicable Devices = 2220. OSCCON, Applicable Devices = 2320. OSCCON, Applicable Devices = 4220. OSCCON, Applicable Devices = 4320. OSCCON, Power-on Reset, Brown-out Reset = 0000 q000. OSCCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 q000. OSCCON, Wake-up via WDT or Interrupt = uuuu qquu. LVDCON, Applicable Devices = 2220. LVDCON, Applicable Devices = 2320. LVDCON, Applicable Devices = 4220. LVDCON, Applicable Devices = 4320. LVDCON, Power-on Reset, Brown-out Reset = --00 0101. LVDCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00 0101. LVDCON,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = --uu uuuu. WDTCON, Applicable Devices = 2220. WDTCON, Applicable Devices = 2320. WDTCON, Applicable Devices = 4220. WDTCON, Applicable Devices = 4320. WDTCON, Power-on Reset, Brown-out Reset = ---- ---0. WDTCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = ---- ---0. WDTCON, Wake-up via WDT or Interrupt = ---- ---u. RCON (4), Applicable Devices = 2220. RCON (4), Applicable Devices = 2320. RCON (4), Applicable Devices = 4220. RCON (4), Applicable Devices = 4320. RCON (4), Power-on Reset, Brown-out Reset = 0--1 11q0. RCON (4), MCLR Resets WDT Reset RESET Instruction Stack Resets = 0--q qquu. RCON (4), Wake-up via WDT or Interrupt",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= u--u qquu. TMR1H, Applicable Devices = 2220. TMR1H, Applicable Devices = 2320. TMR1H, Applicable Devices = 4220. TMR1H, Applicable Devices = 4320. TMR1H, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR1H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR1L, Applicable Devices = 2220. TMR1L, Applicable Devices = 2320. TMR1L, Applicable Devices = 4220. TMR1L, Applicable Devices = 4320. TMR1L, Power-on Reset, Brown-out Reset = xxxx xxxx. TMR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. TMR1L, Wake-up via WDT or Interrupt =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nuuuu uuuu. T1CON, Applicable Devices = 2220. T1CON, Applicable Devices = 2320. T1CON, Applicable Devices = 4220. T1CON, Applicable Devices = 4320. T1CON, Power-on Reset, Brown-out Reset = 0000 0000. T1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = u0uu uuuu. T1CON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR2, Applicable Devices = 2220. TMR2, Applicable Devices = 2320. TMR2, Applicable Devices = 4220. TMR2, Applicable Devices = 4320. TMR2, Power-on Reset, Brown-out Reset = 0000 0000. TMR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. TMR2, Wake-up via WDT or Interrupt = uuuu uuuu. PR2, Applicable Devices = 2220. PR2, Applicable Devices =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n2320. PR2, Applicable Devices = 4220. PR2, Applicable Devices = 4320. PR2, Power-on Reset, Brown-out Reset = 1111 1111. PR2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 1111 1111. PR2, Wake-up via WDT or Interrupt = 1111 1111. T2CON, Applicable Devices = 2220. T2CON, Applicable Devices = 2320. T2CON, Applicable Devices = 4220. T2CON, Applicable Devices = 4320. T2CON, Power-on Reset, Brown-out Reset = -000 0000. T2CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = -000 0000. T2CON, Wake-up via WDT or Interrupt = -uuu uuuu. SSPBUF, Applicable Devices = 2220. SSPBUF, Applicable Devices = 2320. SSPBUF, Applicable Devices = 4220. SSPBUF, Applicable Devices = 4320. SSPBUF, Power-on Reset, Brown-out Reset = xxxx",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nxxxx. SSPBUF, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu uuuu. SSPBUF, Wake-up via WDT or Interrupt = uuuu uuuu. SSPADD, Applicable Devices = 2220. SSPADD, Applicable Devices = 2320. SSPADD, Applicable Devices = 4220. SSPADD, Applicable Devices = 4320. SSPADD, Power-on Reset, Brown-out Reset = 0000 0000. SSPADD, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPADD, Wake-up via WDT or Interrupt = uuuu uuuu. SSPSTAT, Applicable Devices = 2220. SSPSTAT, Applicable Devices = 2320. SSPSTAT, Applicable Devices = 4220. SSPSTAT, Applicable Devices = 4320. SSPSTAT, Power-on Reset, Brown-out Reset = 0000 0000. SSPSTAT, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPSTAT,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = uuuu uuuu. SSPCON1, Applicable Devices = 2220. SSPCON1, Applicable Devices = 2320. SSPCON1, Applicable Devices = 4220. SSPCON1, Applicable Devices = 4320. SSPCON1, Power-on Reset, Brown-out Reset = 0000 0000. SSPCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPCON1, Wake-up via WDT or Interrupt = uuuu uuuu. SSPCON2, Applicable Devices = 2220. SSPCON2, Applicable Devices = 2320. SSPCON2, Applicable Devices = 4220. SSPCON2, Applicable Devices = 4320. SSPCON2, Power-on Reset, Brown-out Reset = 0000 0000. SSPCON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000 0000. SSPCON2, Wake-up via WDT or Interrupt = uuuu uuuu\nLegend:",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nu = unchanged, x = unknown, -= unimplemented bit, read as GLYPH<145> 0 GLYPH<146>, q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-2 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read GLYPH<145> 0 GLYPH<146>.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nADRESH, Applicable Devices = 2220. ADRESH, Applicable Devices = 2320. ADRESH, Applicable Devices = 4220. ADRESH, Applicable Devices = 4320. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, Power-on Reset, Brown-out Reset = xxxx. ADRESH, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. ADRESH, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. ADRESH, Wake-up via WDT or Interrupt = uuuu uuuu. ADRESL, Applicable Devices = 2220. ADRESL, Applicable Devices = 2320. ADRESL, Applicable Devices = 4220. ADRESL, Applicable Devices = 4320. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, Power-on Reset, Brown-out Reset = xxxx. ADRESL, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. ADRESL, MCLR Resets WDT Reset RESET Instruction Stack",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nResets = uuuu. ADRESL, Wake-up via WDT or Interrupt = uuuu uuuu. ADCON0, Applicable Devices = 2220. ADCON0, Applicable Devices = 2320. ADCON0, Applicable Devices = 4220. ADCON0, Applicable Devices = 4320. ADCON0, Power-on Reset, Brown-out Reset = --00. ADCON0, Power-on Reset, Brown-out Reset = 0000. ADCON0, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00. ADCON0, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. ADCON0, Wake-up via WDT or Interrupt = --uu uuuu. ADCON1, Applicable Devices = 2220. ADCON1, Applicable Devices = 2320. ADCON1, Applicable Devices = 4220. ADCON1, Applicable Devices = 4320. ADCON1, Power-on Reset, Brown-out Reset = --00. ADCON1, Power-on Reset, Brown-out Reset =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. ADCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00. ADCON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. ADCON1, Wake-up via WDT or Interrupt = --uu uuuu. ADCON2, Applicable Devices = 2220. ADCON2, Applicable Devices = 2320. ADCON2, Applicable Devices = 4220. ADCON2, Applicable Devices = 4320. ADCON2, Power-on Reset, Brown-out Reset = 0-00. ADCON2, Power-on Reset, Brown-out Reset = 0000. ADCON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0-00. ADCON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. ADCON2, Wake-up via WDT or Interrupt = u-uu uuuu. CCPR1H, Applicable Devices = 2220. CCPR1H, Applicable Devices = 2320. CCPR1H, Applicable Devices = 4220. CCPR1H,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nApplicable Devices = 4320. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, Power-on Reset, Brown-out Reset = xxxx. CCPR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR1H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR1H, Wake-up via WDT or Interrupt = uuuu uuuu. CCPR1L, Applicable Devices = 2220. CCPR1L, Applicable Devices = 2320. CCPR1L, Applicable Devices = 4220. CCPR1L, Applicable Devices = 4320. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, Power-on Reset, Brown-out Reset = xxxx. CCPR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR1L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR1L,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWake-up via WDT or Interrupt = uuuu uuuu. CCP1CON, Applicable Devices = 2220. CCP1CON, Applicable Devices = 2320. CCP1CON, Applicable Devices = 4220. CCP1CON, Applicable Devices = 4320. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, Power-on Reset, Brown-out Reset = 0000. CCP1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. CCP1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = uuuu uuuu. CCP1CON, Applicable Devices = 2220. CCP1CON, Applicable Devices = 2320. CCP1CON, Applicable Devices = 4220. CCP1CON, Applicable Devices = 4320. CCP1CON, Power-on Reset, Brown-out Reset = --00. CCP1CON, Power-on Reset, Brown-out Reset =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. CCP1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00. CCP1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. CCP1CON, Wake-up via WDT or Interrupt = --uu uuuu. CCPR2H, Applicable Devices = 2220. CCPR2H, Applicable Devices = 2320. CCPR2H, Applicable Devices = 4220. CCPR2H, Applicable Devices = 4320. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, Power-on Reset, Brown-out Reset = xxxx. CCPR2H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR2H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR2H, Wake-up via WDT or Interrupt = uuuu uuuu. CCPR2L, Applicable Devices = 2220. CCPR2L, Applicable Devices = 2320.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nCCPR2L, Applicable Devices = 4220. CCPR2L, Applicable Devices = 4320. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, Power-on Reset, Brown-out Reset = xxxx. CCPR2L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR2L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. CCPR2L, Wake-up via WDT or Interrupt = uuuu uuuu. CCP2CON, Applicable Devices = 2220. CCP2CON, Applicable Devices = 2320. CCP2CON, Applicable Devices = 4220. CCP2CON, Applicable Devices = 4320. CCP2CON, Power-on Reset, Brown-out Reset = --00. CCP2CON, Power-on Reset, Brown-out Reset = 0000. CCP2CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = --00. CCP2CON, MCLR Resets WDT Reset",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nRESET Instruction Stack Resets = 0000. CCP2CON, Wake-up via WDT or Interrupt = --uu uuuu. PWM1CON, Applicable Devices = 2220. PWM1CON, Applicable Devices = 2320. PWM1CON, Applicable Devices = 4220. PWM1CON, Applicable Devices = 4320. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, Power-on Reset, Brown-out Reset = 0000. PWM1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. PWM1CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. PWM1CON, Wake-up via WDT or Interrupt = uuuu uuuu. ECCPAS, Applicable Devices = 2220. ECCPAS, Applicable Devices = 2320. ECCPAS, Applicable Devices = 4220. ECCPAS, Applicable Devices = 4320. ECCPAS, Power-on Reset, Brown-out Reset =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n0000. ECCPAS, Power-on Reset, Brown-out Reset = 0000. ECCPAS, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. ECCPAS, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. ECCPAS, Wake-up via WDT or Interrupt = uuuu uuuu. CVRCON, Applicable Devices = 2220. CVRCON, Applicable Devices = 2320. CVRCON, Applicable Devices = 4220. CVRCON, Applicable Devices = 4320. CVRCON, Power-on Reset, Brown-out Reset = 000-. CVRCON, Power-on Reset, Brown-out Reset = 0000. CVRCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 000-. CVRCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. CVRCON, Wake-up via WDT or Interrupt = uuu- uuuu. CMCON, Applicable Devices = 2220. CMCON, Applicable Devices = 2320. CMCON, Applicable Devices =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n4220. CMCON, Applicable Devices = 4320. CMCON, Power-on Reset, Brown-out Reset = 0000. CMCON, Power-on Reset, Brown-out Reset = 0111. CMCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. CMCON, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0111. CMCON, Wake-up via WDT or Interrupt = uuuu uuuu. TMR3H, Applicable Devices = 2220. TMR3H, Applicable Devices = 2320. TMR3H, Applicable Devices = 4220. TMR3H, Applicable Devices = 4320. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, Power-on Reset, Brown-out Reset = xxxx. TMR3H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. TMR3H, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nTMR3H, Wake-up via WDT or Interrupt = uuuu uuuu. TMR3L, Applicable Devices = 2220. TMR3L, Applicable Devices = 2320. TMR3L, Applicable Devices = 4220. TMR3L, Applicable Devices = 4320. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, Power-on Reset, Brown-out Reset = xxxx. TMR3L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. TMR3L, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. TMR3L, Wake-up via WDT or Interrupt = uuuu uuuu. T3CON, Applicable Devices = 2220. T3CON, Applicable Devices = 2320. T3CON, Applicable Devices = 4220. T3CON, Applicable Devices = 4320. T3CON, Power-on Reset, Brown-out Reset = 0000.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nT3CON, Power-on Reset, Brown-out Reset = 0000. T3CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. T3CON, MCLR Resets WDT Reset RESET Instruction Stack Resets = uuuu. T3CON, Wake-up via WDT or Interrupt = uuuu uuuu. SPBRG, Applicable Devices = 2220. SPBRG, Applicable Devices = 2320. SPBRG, Applicable Devices = 4220. SPBRG, Applicable Devices = 4320. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, Power-on Reset, Brown-out Reset = 0000. SPBRG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. SPBRG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. SPBRG, Wake-up via WDT or Interrupt = uuuu uuuu. RCREG, Applicable Devices = 2220. RCREG, Applicable Devices = 2320.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nRCREG, Applicable Devices = 4220. RCREG, Applicable Devices = 4320. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, Power-on Reset, Brown-out Reset = 0000. RCREG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. RCREG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. RCREG, Wake-up via WDT or Interrupt = uuuu uuuu. TXREG, Applicable Devices = 2220. TXREG, Applicable Devices = 2320. TXREG, Applicable Devices = 4220. TXREG, Applicable Devices = 4320. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, Power-on Reset, Brown-out Reset = 0000. TXREG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. TXREG, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. TXREG, Wake-up via WDT or Interrupt",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= uuuu uuuu. TXSTA, Applicable Devices = 2220. TXSTA, Applicable Devices = 2320. TXSTA, Applicable Devices = 4220. TXSTA, Applicable Devices = 4320. TXSTA, Power-on Reset, Brown-out Reset = 0000. TXSTA, Power-on Reset, Brown-out Reset = -010. TXSTA, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. TXSTA, MCLR Resets WDT Reset RESET Instruction Stack Resets = -010. TXSTA, Wake-up via WDT or Interrupt = uuuu -uuu. RCSTA, Applicable Devices = 2220. RCSTA, Applicable Devices = 2320. RCSTA, Applicable Devices = 4220. RCSTA, Applicable Devices = 4320. RCSTA, Power-on Reset, Brown-out Reset = 0000. RCSTA, Power-on Reset, Brown-out Reset = 000x. RCSTA, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. RCSTA, MCLR Resets WDT Reset RESET Instruction Stack Resets =",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n000x. RCSTA, Wake-up via WDT or Interrupt = uuuu uuuu. EEADR, Applicable Devices = 2220. EEADR, Applicable Devices = 2320. EEADR, Applicable Devices = 4220. EEADR, Applicable Devices = 4320. EEADR, Power-on Reset, Brown-out Reset = 0000. EEADR, Power-on Reset, Brown-out Reset = 0000. EEADR, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. EEADR, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. EEADR, Wake-up via WDT or Interrupt = uuuu uuuu. EEDATA, Applicable Devices = 2220. EEDATA, Applicable Devices = 2320. EEDATA, Applicable Devices = 4220. EEDATA, Applicable Devices = 4320. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, Power-on Reset, Brown-out Reset = 0000. EEDATA, MCLR Resets",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nWDT Reset RESET Instruction Stack Resets = 0000. EEDATA, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. EEDATA, Wake-up via WDT or Interrupt = uuuu uuuu. EECON1, Applicable Devices = 2220. EECON1, Applicable Devices = 2320. EECON1, Applicable Devices = 4220. EECON1, Applicable Devices = 4320. EECON1, Power-on Reset, Brown-out Reset = xx-0. EECON1, Power-on Reset, Brown-out Reset = x000. EECON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = uu-0. EECON1, MCLR Resets WDT Reset RESET Instruction Stack Resets = u000. EECON1, Wake-up via WDT or Interrupt = uu-0 u000. EECON2, Applicable Devices = 2220. EECON2, Applicable Devices = 2320. EECON2, Applicable Devices = 4220. EECON2, Applicable Devices = 4320. EECON2, Power-on",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nReset, Brown-out Reset = 0000. EECON2, Power-on Reset, Brown-out Reset = 0000. EECON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. EECON2, MCLR Resets WDT Reset RESET Instruction Stack Resets = 0000. EECON2, Wake-up via WDT or Interrupt = 0000 0000\nLegend:\nu = unchanged, x = unknown, -= unimplemented bit, read as GLYPH<145> 0 GLYPH<146>, q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-2 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read GLYPH<145> 0 GLYPH<146>.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nIPR2, Applicable Devices = 2220. IPR2, Applicable Devices = 2320. IPR2, Applicable Devices = 4220. IPR2, Applicable Devices = 4320. IPR2, Power-on Reset, Brown-out Reset WDT Reset RESET = 11-1 1111. IPR2, MCLR Resets Instruction Stack Resets = 11-1 1111. IPR2, Wake-up via WDT or Interrupt = uu-u uuuu. IPR2,  = . PIR2, Applicable Devices = 2220. PIR2, Applicable Devices = 2320. PIR2, Applicable Devices = 4220. PIR2, Applicable Devices = 4320. PIR2, Power-on Reset, Brown-out Reset WDT Reset RESET = 00-0 0000. PIR2, MCLR Resets Instruction Stack Resets = 00-0 0000. PIR2, Wake-up via WDT or Interrupt = uu-u uuuu (1). PIR2,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . PIE2, Applicable Devices = 2220. PIE2, Applicable Devices = 2320. PIE2, Applicable Devices = 4220. PIE2, Applicable Devices = 4320. PIE2, Power-on Reset, Brown-out Reset WDT Reset RESET = 00-0 0000. PIE2, MCLR Resets Instruction Stack Resets = 00-0 0000. PIE2, Wake-up via WDT or Interrupt = uu-u uuuu. PIE2,  = . IPR1, Applicable Devices = 2220. IPR1, Applicable Devices = 2320. IPR1, Applicable Devices = 4220. IPR1, Applicable Devices = 4320. IPR1, Power-on Reset, Brown-out Reset WDT Reset RESET = 1111 1111. IPR1, MCLR Resets Instruction Stack Resets = 1111 1111. IPR1, Wake-up via WDT or Interrupt = uuuu uuuu. IPR1,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . IPR1, Applicable Devices = 2220. IPR1, Applicable Devices = 2320. IPR1, Applicable Devices = 4220. IPR1, Applicable Devices = 4320. IPR1, Power-on Reset, Brown-out Reset WDT Reset RESET = -111 1111. IPR1, MCLR Resets Instruction Stack Resets = -111 1111. IPR1, Wake-up via WDT or Interrupt = -uuu uuuu. IPR1,  = . PIR1, Applicable Devices = 2220. PIR1, Applicable Devices = 2320. PIR1, Applicable Devices = 4220. PIR1, Applicable Devices = 4320. PIR1, Power-on Reset, Brown-out Reset WDT Reset RESET = 0000 0000. PIR1, MCLR Resets Instruction Stack Resets = 0000 0000. PIR1, Wake-up via WDT or Interrupt = uuuu uuuu (1). PIR1,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . PIR1, Applicable Devices = 2220. PIR1, Applicable Devices = 2320. PIR1, Applicable Devices = 4220. PIR1, Applicable Devices = 4320. PIR1, Power-on Reset, Brown-out Reset WDT Reset RESET = -000 0000. PIR1, MCLR Resets Instruction Stack Resets = -000 0000. PIR1, Wake-up via WDT or Interrupt = -uuu uuuu (1). PIR1,  = . PIE1, Applicable Devices = 2220. PIE1, Applicable Devices = 2320. PIE1, Applicable Devices = 4220. PIE1, Applicable Devices = 4320. PIE1, Power-on Reset, Brown-out Reset WDT Reset RESET = 0000 0000. PIE1, MCLR Resets Instruction Stack Resets = 0000 0000. PIE1, Wake-up via WDT or Interrupt = uuuu uuuu. PIE1,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . PIE1, Applicable Devices = 2220. PIE1, Applicable Devices = 2320. PIE1, Applicable Devices = 4220. PIE1, Applicable Devices = 4320. PIE1, Power-on Reset, Brown-out Reset WDT Reset RESET = -000 0000. PIE1, MCLR Resets Instruction Stack Resets = -000 0000. PIE1, Wake-up via WDT or Interrupt = -uuu uuuu. PIE1,  = . OSCTUNE, Applicable Devices = 2220. OSCTUNE, Applicable Devices = 2320. OSCTUNE, Applicable Devices = 4220. OSCTUNE, Applicable Devices = 4320. OSCTUNE, Power-on Reset, Brown-out Reset WDT Reset RESET = --00 0000. OSCTUNE, MCLR Resets Instruction Stack Resets = --00 0000. OSCTUNE, Wake-up via WDT or Interrupt = --uu uuuu. OSCTUNE,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . OSCTUN2, Applicable Devices = 2220. OSCTUN2, Applicable Devices = 2320. OSCTUN2, Applicable Devices = 4220. OSCTUN2, Applicable Devices = 4320. OSCTUN2, Power-on Reset, Brown-out Reset WDT Reset RESET = 0-00 0000. OSCTUN2, MCLR Resets Instruction Stack Resets = 0-00 0000. OSCTUN2, Wake-up via WDT or Interrupt = u-uu uuuu. OSCTUN2,  = . TRISE, Applicable Devices = 2220. TRISE, Applicable Devices = 2320. TRISE, Applicable Devices = 4220. TRISE, Applicable Devices = 4320. TRISE, Power-on Reset, Brown-out Reset WDT Reset RESET = 0000 -111. TRISE, MCLR Resets Instruction Stack Resets = 0000 -111. TRISE, Wake-up via WDT or Interrupt = uuuu -uuu. TRISE,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . TRISD, Applicable Devices = 2220. TRISD, Applicable Devices = 2320. TRISD, Applicable Devices = 4220. TRISD, Applicable Devices = 4320. TRISD, Power-on Reset, Brown-out Reset WDT Reset RESET = 1111 1111. TRISD, MCLR Resets Instruction Stack Resets = 1111 1111. TRISD, Wake-up via WDT or Interrupt = uuuu uuuu. TRISD,  = . TRISC, Applicable Devices = 2220. TRISC, Applicable Devices = 2320. TRISC, Applicable Devices = 4220. TRISC, Applicable Devices = 4320. TRISC, Power-on Reset, Brown-out Reset WDT Reset RESET = 1111 1111. TRISC, MCLR Resets Instruction Stack Resets = 1111 1111. TRISC, Wake-up via WDT or Interrupt = uuuu uuuu. TRISC,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . TRISB, Applicable Devices = 2220. TRISB, Applicable Devices = 2320. TRISB, Applicable Devices = 4220. TRISB, Applicable Devices = 4320. TRISB, Power-on Reset, Brown-out Reset WDT Reset RESET = 1111 1111. TRISB, MCLR Resets Instruction Stack Resets = 1111 1111. TRISB, Wake-up via WDT or Interrupt = uuuu uuuu. TRISB,  = . TRISA (5), Applicable Devices = 2220. TRISA (5), Applicable Devices = 2320. TRISA (5), Applicable Devices = 4220. TRISA (5), Applicable Devices = 4320. TRISA (5), Power-on Reset, Brown-out Reset WDT Reset RESET = 1111 1111. TRISA (5), MCLR Resets Instruction Stack Resets = 1111 1111 (5). TRISA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). TRISA (5),",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . LATE, Applicable Devices = 2220. LATE, Applicable Devices = 2320. LATE, Applicable Devices = 4220. LATE, Applicable Devices = 4320. LATE, Power-on Reset, Brown-out Reset WDT Reset RESET = ---- -xxx. LATE, MCLR Resets Instruction Stack Resets = ---- -uuu. LATE, Wake-up via WDT or Interrupt = ---- -uuu. LATE,  = . LATD, Applicable Devices = 2220. LATD, Applicable Devices = 2320. LATD, Applicable Devices = 4220. LATD, Applicable Devices = 4320. LATD, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. LATD, MCLR Resets Instruction Stack Resets = uuuu uuuu. LATD, Wake-up via WDT or Interrupt = uuuu uuuu. LATD,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . LATC, Applicable Devices = 2220. LATC, Applicable Devices = 2320. LATC, Applicable Devices = 4220. LATC, Applicable Devices = 4320. LATC, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. LATC, MCLR Resets Instruction Stack Resets = uuuu uuuu. LATC, Wake-up via WDT or Interrupt = uuuu uuuu. LATC,  = . LATB, Applicable Devices = 2220. LATB, Applicable Devices = 2320. LATB, Applicable Devices = 4220. LATB, Applicable Devices = 4320. LATB, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. LATB, MCLR Resets Instruction Stack Resets = uuuu uuuu. LATB, Wake-up via WDT or Interrupt = uuuu uuuu. LATB,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . LATA (5), Applicable Devices = 2220. LATA (5), Applicable Devices = 2320. LATA (5), Applicable Devices = 4220. LATA (5), Applicable Devices = 4320. LATA (5), Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. LATA (5), MCLR Resets Instruction Stack Resets = uuuu uuuu (5). LATA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). LATA (5),  = . PORTE, Applicable Devices = 2220. PORTE, Applicable Devices = 2320. PORTE, Applicable Devices = 4220. PORTE, Applicable Devices = 4320. PORTE, Power-on Reset, Brown-out Reset WDT Reset RESET = ---- xxxx. PORTE, MCLR Resets Instruction Stack Resets = ---- xxxx. PORTE, Wake-up via WDT or Interrupt = ---- uuuu. PORTE,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . PORTD, Applicable Devices = 2220. PORTD, Applicable Devices = 2320. PORTD, Applicable Devices = 4220. PORTD, Applicable Devices = 4320. PORTD, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. PORTD, MCLR Resets Instruction Stack Resets = uuuu uuuu. PORTD, Wake-up via WDT or Interrupt = uuuu uuuu. PORTD,  = . PORTC, Applicable Devices = 2220. PORTC, Applicable Devices = 2320. PORTC, Applicable Devices = 4220. PORTC, Applicable Devices = 4320. PORTC, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. PORTC, MCLR Resets Instruction Stack Resets = uuuu uuuu. PORTC, Wake-up via WDT or Interrupt = uuuu uuuu. PORTC,",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\n= . PORTB, Applicable Devices = 2220. PORTB, Applicable Devices = 2320. PORTB, Applicable Devices = 4220. PORTB, Applicable Devices = 4320. PORTB, Power-on Reset, Brown-out Reset WDT Reset RESET = xxxx xxxx. PORTB, MCLR Resets Instruction Stack Resets = uuuu uuuu. PORTB, Wake-up via WDT or Interrupt = uuuu uuuu. PORTB,  = . PORTA (5), Applicable Devices = 2220. PORTA (5), Applicable Devices = 2320. PORTA (5), Applicable Devices = 4220. PORTA (5), Applicable Devices = 4320. PORTA (5), Power-on Reset, Brown-out Reset WDT Reset RESET = xx0x 0000. PORTA (5), MCLR Resets Instruction Stack Resets = uu0u 0000 (5). PORTA (5), Wake-up via WDT or Interrupt = uuuu uuuu (5). PORTA (5),  = \nLegend:",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nu = unchanged, x = unknown, -= unimplemented bit, read as GLYPH<145> 0 GLYPH<146>, q = value depends on condition. Shaded cells indicate conditions do not apply for the designated device.",
    "TABLE 4-3: INITIALIZATION CONDITIONS FOR ALL REGISTERS (CONTINUED)\nNote 1: One or more bits in the INTCONx or PIRx registers will be affected (to cause wake-up).\n2: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the PC is loaded with the interrupt vector (0008h or 0018h).\n3: When the wake-up is due to an interrupt and the GIEL or GIEH bit is set, the TOSU, TOSH and TOSL are updated with the current value of the PC. The STKPTR is modified to point to the next location in the hardware stack.\n4: See Table 4-2 for Reset value for specific condition.\n5: Bits 6 and 7 of PORTA, LATA and TRISA are enabled, depending on the oscillator mode selected. When not enabled as PORTA pins, they are disabled and read GLYPH<145> 0 GLYPH<146>.",
    "FIGURE 4-3: TIME-OUT SEQUENCE ON POWER-UP (MCLR TIED TO VDD, VDD RISE < TPWRT)\nTPWRT\nTOST\nVDD\nMCLR\nInternal POR\nPWRT Time-out\nOST Time-out\nInternal Reset\nFIGURE 4-4:",
    "TIME-OUT SEQUENCE ON POWER-UP (MCLR NOT TIED TO VDD): CASE 1\nTPWRT\nTOST\nVDD\nMCLR\nInternal POR\nPWRT Time-out\nOST Time-out\nInternal Reset",
    "FIGURE 4-7: TIME-OUT SEQUENCE ON POR W/ PLL ENABLED (MCLR TIED TO VDD)\nTPWRT\nTOST\nVDD\nMCLR\nInternal POR\nPWRT Time-out\nOST Time-out\nInternal Reset\nPLL Time-out\nTPLL\nNote:\nTOST = 1024 clock cycles.\nTPLL \u2248 2 ms max. First three stages of the PWRT timer.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "5.0 MEMORY ORGANIZATION\nThere  are  three  memory  types  in  enhanced  MCU devices. These memory types are:\nGLYPH<149> Program Memory\nGLYPH<149> Data RAM\nGLYPH<149> Data EEPROM\nData and program memory use separate busses which allow for concurrent access of these types.\nAdditional detailed information for Flash program memory  and  data  EEPROM  is  provided  in Section 6.0 GLYPH<147>Flash Program  MemoryGLYPH<148> and Section 7.0  GLYPH<147>Data EEPROM MemoryGLYPH<148> , respectively.\nFIGURE 5-1: PROGRAM MEMORY MAP AND STACK FOR PIC18F2220/4220",
    "5.1 Program Memory Organization\nA 21-bit program counter is capable of addressing the 2-Mbyte program memory space. Accessing a location between the physically implemented memory and the 2-Mbyte address will cause a read of all GLYPH<145> 0 GLYPH<146> s  (a NOP instruction).\nThe PIC18F2220 and PIC18F4220 each have 4 Kbytes of Flash memory and can store up to 2,048 single-word instructions.\nThe PIC18F2320 and PIC18F4320 each have 8 Kbytes of Flash memory and can store up to 4,096 single-word instructions.\nThe Reset vector address is at 0000h and the interrupt vector addresses are at 0008h and 0018h.\nThe Program Memory Maps for PIC18F2220/4220 and PIC18F2320/4320  devices  are  shown  in  Figure 5-1 and Figure 5-2, respectively.\nFIGURE 5-2: PROGRAM MEMORY MAP AND STACK FOR PIC18F2320/4320",
    "5.2 Return Address Stack\nThe return address stack allows any combination of up to  31  program  calls  and  interrupts  to  occur.  The  PC (Program Counter) is pushed onto the stack when a CALL or RCALL instruction is executed or an interrupt is Acknowledged. The PC value is pulled off the stack on a RETURN, RETLW or a RETFIE instruction. PCLATU and PCLATH are not affected by any of the RETURN or CALL instructions.\nThe stack operates as a 31-word by 21-bit RAM and a 5-bit Stack Pointer, with the Stack Pointer initialized to 00000b after all Resets. There is no RAM associated with Stack Pointer, 00000b . This is only a Reset value. During a CALL type instruction, causing a push onto the stack,  the  Stack  Pointer  is  first  incremented  and  the RAM location pointed to by the Stack Pointer is written with  the  contents  of  the  PC  (already  pointing  to  the instruction following the CALL ). During a RETURN type instruction, causing a pop from the stack, the contents of  the  RAM  location  pointed  to  by  the  STKPTR  are transferred  to  the  PC  and  then  the  Stack  Pointer  is decremented.",
    "5.2 Return Address Stack\nThe stack space is not part of either program or data space. The Stack Pointer is readable and writable and the address on the top of the stack is readable and writable  through  the  top-of-stack  Special  File  Registers. Data can also be pushed to, or popped from, the stack using the top-of-stack SFRs. Status bits indicate if the stack is full, has overflowed or underflowed.",
    "5.2.1 TOP-OF-STACK ACCESS\nThe top of the stack is  readable  and writable. Three register  locations,  TOSU, TOSH and TOSL, hold the contents  of  the stack  location pointed  to by  the STKPTR  register  (Figure 5-3).  This  allows  users  to implement a software stack if necessary. After a CALL, RCALL or interrupt, the software can read the pushed value by reading the TOSU, TOSH and TOSL registers. These values can be placed on a user-defined software stack.  At  return  time,  the  software  can  replace  the TOSU, TOSH and TOSL and do a return.",
    "5.2.2 RETURN STACK POINTER (STKPTR)\nThe STKPTR register (Register 5-1) contains the Stack Pointer value, the STKFUL (Stack Full) status bit and the STKUNF (Stack Underflow) status bits. The value of  the  Stack Pointer can be 0 through 31. The Stack Pointer increments before values are pushed onto the stack and decrements after values are popped off the stack. At Reset, the Stack Pointer value will be zero. The user may read and write the Stack Pointer value. This  feature  can  be  used  by  a  Real-Time  Operating System for return stack maintenance.\nAfter the PC is pushed onto the stack 31 times (without popping any values off the stack), the STKFUL bit is set.  The  STKFUL  bit  is  cleared  by  software  or  by  a POR.",
    "5.2.2 RETURN STACK POINTER (STKPTR)\nThe action that takes place when the stack becomes full depends on the state of the STVREN (Stack Overflow Reset Enable) Configuration bit. (Refer to Section 23.1 GLYPH<147>Configuration BitsGLYPH<148> for a description of the device  Configuration  bits.) If STVREN  is  set (default),  the  31st push  will  push the (PC  +  2)  value onto  the  stack,  set  the  STKFUL  bit  and  reset  the device. The STKFUL bit will remain set and the Stack Pointer will be set to zero.\nIf STVREN is cleared, the STKFUL bit will be set on the 31st push and the Stack Pointer will increment to 31. Any additional pushes will not overwrite the 31st push, and STKPTR will remain at 31.\nWhen  the  stack  has  been  popped  enough  times  to unload the stack, the next pop will return a value of zero to  the  PC  and sets the STKUNF bit, while the Stack Pointer remains at zero. The STKUNF bit will remain set until cleared by software or a POR occurs.",
    "Note:\nThe user must disable the global interrupt enable bits while accessing the stack to prevent inadvertent stack corruption.\nReturning a value of zero to the PC on an underflow has the effect of vectoring the program  to  the  Reset  vector,  where  the stack conditions can be verified and appropriate actions can be taken. This is not the same as a Reset, as the contents of the SFRs are not affected.",
    "STKPTR: STACK POINTER REGISTER\nSTKFUL (1), R/C-0 = STKUNF (1). STKFUL (1), U-0 = GLYPH<151>. STKFUL (1), R/W-0 = SP4. STKFUL (1), R/W-0 = SP3. STKFUL (1), R/W-0 = SP2. STKFUL (1), R/W-0 = SP1. STKFUL (1), R/W-0 = SP0. bit 7 bit 0, R/C-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "STKPTR: STACK POINTER REGISTER\nLegend:, 1 = C = Clearable bit. Legend:, 2 = . Legend:, 3 = . R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nSTKFUL:\nStack Full Flag bit (1)\n1 = Stack became full or overflowed\n0 = Stack has not become full or overflowed\nbit 6\nSTKUNF: Stack Underflow Flag bit (1)\n1 = Stack underflow occurred\n0 = Stack underflow did not occur\nbit 5",
    "STKPTR: STACK POINTER REGISTER\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4-0\nSP4:SP0: Stack Pointer Location bits\nNote 1: Bit 7 and bit 6 are cleared by user software or by a POR.",
    "5.2.4 STACK FULL/UNDERFLOW RESETS\nSince the Top-of-Stack (TOS) is readable and writable, the ability to push values onto the stack and pull values off the stack, without disturbing normal program execution, is a desirable option. To push the current PC value onto  the  stack,  a PUSH instruction  can  be  executed. This will increment the Stack Pointer and load the current PC value onto the stack. TOSU, TOSH and TOSL can then be modified to place data or a return address on the stack.\nThe ability to pull the TOS value off of the stack and replace  it  with  the  value  that  was  previously  pushed onto the stack, without disturbing normal execution, is achieved by using the POP instruction. The POP instruction  discards  the  current  TOS  by  decrementing  the Stack  Pointer.  The  previous  value  pushed  onto  the stack then becomes the TOS value.",
    "5.2.4 STACK FULL/UNDERFLOW RESETS\nThese Resets are enabled by programming the STVREN bit in Configuration  Register  4L.  When  the STVREN bit is cleared, a full or underflow condition will set  the  appropriate  STKFUL  or  STKUNF  bit  but  not cause a device Reset. When the STVREN bit is set, a full or  underflow  condition  will  set  the  appropriate STKFUL  or  STKUNF  bit  and  then  cause  a  device Reset. The STKFUL or STKUNF bits are cleared by the user software or a POR Reset.",
    "5.4 PCL, PCLATH and PCLATU\nA GLYPH<147>fast returnGLYPH<148> option is available for interrupts. A Fast Register Stack is provided for the STATUS, WREG and BSR registers and are only one in depth. The stack is not readable or writable and is loaded with the current value of the corresponding register when the processor vectors for an interrupt. The values in the registers are then  loaded  back  into  the  working  registers  if  the RETFIE, FAST instruction is used to return from the interrupt.\nAll interrupt sources will push values into the stack registers. If both  low  and  high-priority  interrupts are enabled, the stack registers cannot be used reliably to return from low-priority interrupts. If a high-priority interrupt occurs while servicing a low-priority interrupt, the stack register values stored by the low-priority interrupt will be overwritten. Users must save the key registers in software during a low-priority interrupt.\nIf interrupt priority is not used, all interrupts may use the Fast Register Stack for returns from interrupt.",
    "5.4 PCL, PCLATH and PCLATU\nIf no interrupts are used, the Fast Register Stack can be used to restore the STATUS, WREG and BSR registers at the end of a subroutine call. To use the Fast Register Stack  for  a  subroutine  call,  a CALL label, FAST instruction  must  be  executed  to  save  the  STATUS, WREG and BSR registers to the Fast Register Stack. A RETURN, FAST instruction is then executed to restore these registers from the Fast Register Stack.\nExample 5-1 shows a source code example that uses the Fast  Register  Stack during  a  subroutine call  and return.",
    "CODE EXAMPLE\nCALL SUB1, FAST, 1 = ;STATUS, WREG, BSR ;SAVED IN FAST REGISTER ;STACK. SUB1 \u2022, 1 = . RETURN FAST, 1 = ;RESTORE VALUES SAVED. , 1 = ;IN FAST REGISTER STACK\nThe Program Counter (PC) specifies the address of the instruction  to  fetch  for  execution.  The  PC  is  21-bits wide. The low byte, known as the PCL register, is both readable and writable. The high byte, or PCH register, contains the PC<15:8> bits and is not directly readable or writable. Updates to the PCH register may be performed through the PCLATH register. The upper byte is called PCU. This register contains the PC<20:16> bits and is not directly readable or writable. Updates to the PCU register may be performed through the PCLATU register.",
    "CODE EXAMPLE\nThe contents of PCLATH and PCLATU will be transferred  to  the  program  counter  by  any  operation  that writes PCL. Similarly, the upper two bytes of the program  counter  will  be  transferred  to  PCLATH  and PCLATU by an operation that reads PCL. This is useful for  computed  offsets  to  the  PC  (see Section 5.8.1 GLYPH<147>Computed GOTO GLYPH<148> ).\nThe PC addresses bytes in the program memory. To prevent the PC from becoming misaligned with word instructions, the LSB of PCL is fixed to a value of GLYPH<145> 0 GLYPH<146>. The PC  increments by 2 to address sequential instructions in the program memory.\nThe CALL, RCALL, GOTO and  program  branch instructions write to the program counter directly. For these instructions, the contents of PCLATH  and PCLATU are not transferred to the program counter.",
    "5.5 Clocking Scheme/Instruction Cycle\nThe clock  input  (from  OSC1)  is  internally  divided  by four to generate four non-overlapping quadrature clocks, namely Q1, Q2, Q3 and Q4. Internally, the Program  Counter  (PC)  is  incremented  every  Q1,  the instruction  is  fetched  from  the  program  memory  and latched into the instruction register in Q4. The instruction is decoded and executed during the following Q1 through Q4. The clocks and instruction execution flow are shown in Figure 5-4.",
    "5.6 Instruction Flow/Pipelining\nAn GLYPH<147>Instruction  CycleGLYPH<148>  consists  of  four  Q  cycles  (Q1, Q2, Q3 and Q4). The instruction fetch and execute are pipelined such that  fetch takes  one instruction cycle, while  decode  and  execute  take  another  instruction cycle. However, due to the pipelining, each instruction effectively  executes  in  one  cycle.  If  an  instruction causes the  program counter to  change (e.g., GOTO ), then two cycles are required to complete the instruction (Example 5-2).\nA fetch cycle begins with the Program Counter (PC) incrementing in Q1.\nIn the execution cycle, the fetched instruction is latched into  the  GLYPH<147>Instruction  RegisterGLYPH<148>  (IR)  in  cycle  Q1.  This instruction  is  then  decoded  and  executed  during  the Q2, Q3 and Q4 cycles. Data memory is read during Q2 (operand  read)  and  written  during  Q4  (destination write).",
    "EXAMPLE 5-2: INSTRUCTION PIPELINE FLOW\n1. MOVLW 55h, TCY0 = Fetch 1. 1. MOVLW 55h, TCY1 = Execute 1. 1. MOVLW 55h, TCY2 = . 1. MOVLW 55h, TCY3 = . 1. MOVLW 55h, TCY4 = . 1. MOVLW 55h, TCY5 = . 2. MOVWF PORTB, TCY0 = . 2. MOVWF PORTB, TCY1 = Fetch 2. 2. MOVWF PORTB, TCY2 = Execute 2. 2. MOVWF PORTB, TCY3 = . 2. MOVWF PORTB, TCY4 = . 2. MOVWF PORTB, TCY5 = . 3. BRA, TCY0 = . 3. BRA, TCY1 = . 3. BRA, TCY2 = Fetch 3. 3. BRA, TCY3 = Execute 3. 3. BRA, TCY4 = . 3. BRA, TCY5 = . 4. BSF, TCY0 = BIT3 (Forced",
    "EXAMPLE 5-2: INSTRUCTION PIPELINE FLOW\nNOP). 4. BSF, TCY1 = . 4. BSF, TCY2 = . 4. BSF, TCY3 = Fetch 4. 4. BSF, TCY4 = Flush ( NOP ). 4. BSF, TCY5 = . 5. Instruction @ address SUB_1, TCY0 = 5. Instruction @ address SUB_1. 5. Instruction @ address SUB_1, TCY1 = . 5. Instruction @ address SUB_1, TCY2 = . 5. Instruction @ address SUB_1, TCY3 = . 5. Instruction @ address SUB_1, TCY4 = Fetch SUB_1. 5. Instruction @ address SUB_1, TCY5 = Execute SUB_1\nAll instructions are single cycle, except for any program branches. These take two cycles since the fetch instruction is GLYPH<147>flushedGLYPH<148> from the pipeline while the new instruction is being fetched and then executed.",
    "5.7 Instructions in Program Memory\nThe program memory is addressed in bytes. Instructions are stored as two bytes or four bytes in program memory. The Least Significant Byte of an instruction word is always stored in a program memory location with an even address (LSB = 0 ). Figure 5-5 shows an example of how instruction words are stored in the program memory. To maintain alignment with instruction boundaries, the PC increments in steps of 2 and the LSB  will  always  read  GLYPH<145> 0 GLYPH<146> (see Section 5.4  GLYPH<147>PCL, PCLATH and PCLATUGLYPH<148> ).",
    "5.7 Instructions in Program Memory\nThe CALL and GOTO instructions have the absolute program memory address embedded into the instruction. Since instructions are always stored on word boundaries,  the  data  contained  in  the  instruction  is  a  word address.  The  word  address  is  written  to  PC<20:1>, which accesses the desired byte address in program memory. Instruction  #2  in  Figure 5-5  shows  how  the instruction GLYPH<145> GOTO 000006h GLYPH<146>   is  encoded in the program memory. Program branch instructions, which encode a relative  address offset,  operate  in  the  same  manner. The offset value stored in a branch instruction represents the number of single-word instructions that the PC  will  be  offset  by. Section 24.0  GLYPH<147>Instruction  Set SummaryGLYPH<148> provides  further  details  of  the  instruction set.",
    "FIGURE 5-5: INSTRUCTIONS IN PROGRAM MEMORY\nProgram Memory\nByte Locations\n\u2192\nInstruction 1:\nInstruction 2:\nMOVLW\n055h\nGOTO\n000006h\nInstruction 3:",
    "FIGURE 5-5: INSTRUCTIONS IN PROGRAM MEMORY\n, LSB = 0 = . , Word Address \u2193 = 000000h. , LSB = 0 = . , Word Address \u2193 = 000002h. , LSB = 0 = . , Word Address \u2193 = 000004h. , LSB = 0 = . , Word Address \u2193 = 000006h. 0Fh, LSB = 0 = 55h. 0Fh, Word Address \u2193 = 000008h. EFh, LSB = 0 = 03h. EFh, Word Address \u2193 = 00000Ah. F0h, LSB = 0 = 00h. F0h, Word Address \u2193 = 00000Ch. C1h, LSB = 0 = 23h. C1h, Word Address \u2193 = 00000Eh. F4h, LSB = 0 = 56h. F4h, Word Address \u2193 = 000010h. , LSB = 0 = . , Word Address \u2193 = 000012h. , LSB = 0 = . , Word Address \u2193 = 000014h\nMOVFF\n123h, 456h",
    "5.7.1 TWO-WORD INSTRUCTIONS\nPIC18F2X20/4X20 devices have four two-word instructions: MOVFF, CALL, GOTO and LFSR . The second word of these instructions has the 4 MSBs set to GLYPH<145> 1 GLYPH<146> s and is decoded as a NOP instruction. The lower 12 bits of  the  second  word  contain  data  to  be  used  by  the instruction.  If  the  first  word  of  the  instruction  is  executed, the data in the second word is accessed. If the second word of the instruction is executed by itself (first word was skipped), it will execute as a NOP . This action is necessary when the two-word instruction is preceded by a conditional instruction that results in a skip operation.  A program example that demonstrates this concept is shown in Example 5-3. Refer to Section 24.0 GLYPH<147>Instruction  Set SummaryGLYPH<148> for further details of the instruction set.",
    "EXAMPLE 5-3: TWO-WORD INSTRUCTIONS\n0110 0110, CASE 1:.Source Code = TSTFSZ. 0110 0110, CASE 1:.Source Code = ; is RAM location 0?. 1100 0001 0010, CASE 1:.Source Code = MOVFF. 1100 0001 0010, CASE 1:.Source Code = ; No, skip this word. 1111 0100 0101, CASE 1:.Source Code = . 1111 0100 0101, CASE 1:.Source Code = ; Execute this word as a NOP. 0010 0100 0000, CASE 1:.Source Code = ADDWF. 0010 0100 0000, CASE 1:.Source Code = ; continue code",
    "CASE 2:\nObject Code\n0110 0110 0000 0000\n1100 0001 0010 0011\n1111 0100 0101 0110\n0010 0100 0000 0000\nSource Code\nTSTFSZ\nREG1\nMOVFF\nADDWF\nREG1, REG2\nREG3\n; is RAM location 0?\n; Yes, execute this word\n; 2nd word of instruction\n; continue code",
    "5.8 Look-up Tables\nLook-up tables are implemented two ways:\nGLYPH<149> Computed GOTO\nGLYPH<149> Table Reads",
    "5.8.1 COMPUTED GOTO\nA computed GOTO is accomplished by adding an offset to  the  program  counter.  An  example  is  shown  in Example 5-4.\nA look-up table can be formed  with an ADDWF  PCL instruction and a group of RETLW  0xnn instructions. WREG is loaded with an offset into the  table  before executing a call to that table. The first instruction of the called routine is the ADDWF PCL instruction. The next instruction executed will be one of the RETLW  0xnn instructions that returns the value 0xnn to the calling function.\nThe offset  value  (in  WREG)  specifies  the  number  of bytes  that  the  program  counter  should  advance  and should be multiples of 2 (LSB = 0 ).\nIn  this  method,  only  one  data  byte  may  be  stored  in each  instruction  location  and  room  on  the  return address stack is required.",
    "EXAMPLE 5-4: COMPUTED GOTO USING AN OFFSET VALUE\n, 1 = MOVFW CALL. , 2 = OFFSET TABLE. ORG, 1 = 0xnn00. ORG, 2 = . TABLE, 1 = ADDWF. TABLE, 2 = PCL. TABLE, 1 = RETLW. TABLE, 2 = 0xnn. TABLE, 1 = RETLW. TABLE, 2 = 0xnn. TABLE, 1 = RETLW. TABLE, 2 = 0xnn",
    "5.8.2 TABLE READS/TABLE WRITES\nA  better  method  of  storing  data  in  program  memory allows two bytes of data to be stored in each instruction location.\nLook-up table data may be stored two bytes per program word by using table reads and writes. The Table Pointer (TBLPTR) specifies the byte address and the Table  Latch  (TABLAT)  contains  the  data  that  is  read from, or written to program memory. Data is transferred to/from program memory, one byte at a time.\nThe  Table  Read/Table  Write  operation  is  discussed further in Section 6.1 GLYPH<147>T able Reads  and  Table WritesGLYPH<148> .",
    "5.9 Data Memory Organization\nThe data memory is implemented as static RAM. Each register  in  the  data  memory  has  a  12-bit  address, allowing up to 4096 bytes of data memory. Figure 5-6 shows the data memory organization for the PIC18F2X20/4X20 devices.\nThe  data  memory  map  is  divided  into  as  many  as 16 banks that contain 256 bytes each. The lower 4 bits of the Bank Select Register (BSR<3:0>) select which bank will be accessed. The upper 4 bits of the BSR are not implemented.",
    "5.9 Data Memory Organization\nThe data memory contains Special Function Registers (SFR)  and  General  Purpose  Registers  (GPR).  The SFRs are used for control and status of the controller and peripheral functions, while GPRs are used for data storage and scratch pad operations in the userGLYPH<146>s application. The SFRs start at the last location of Bank 15 (FFFh) and extend towards F80h. Any remaining space beyond the SFRs in the bank may be implemented as GPRs. GPRs start at the first location of Bank 0 and grow upwards. Any read of an unimplemented location will read as GLYPH<145> 0 GLYPH<146> s.\nThe entire data memory may be accessed directly or indirectly. Direct addressing may require the use of the BSR register. Indirect addressing requires the use of a File Select Register (FSRn) and a corresponding Indirect  File  Operand (INDFn). Each FSR holds a 12-bit address value that can be used to access any location in the data memory  map  without banking. See Section 5.12  GLYPH<147>Indirect  Addressing,  INDF  and  FSR RegistersGLYPH<148> for indirect addressing details.",
    "5.9 Data Memory Organization\nThe instruction  set  and  architecture  allow  operations across all banks. This may be accomplished by indirect addressing or by the use of the MOVFF instruction. The MOVFF instruction  is  a  two-word/two-cycle  instruction that moves a value from one register to another.\nTo  ensure  that  commonly  used  registers  (SFRs  and select  GPRs)  can  be  accessed  in  a  single  cycle, regardless of the current BSR values, an Access Bank is implemented. A segment of Bank 0 and a segment of Bank  15  comprise  the  Access  RAM. Section 5.10 GLYPH<147>Access BankGLYPH<148> provides a detailed description of the Access RAM.",
    "5.9.1 GENERAL PURPOSE REGISTER FILE\nEnhanced MCU devices may have banked memory in the GPR area. GPRs are not initialized by a Power-on Reset and are unchanged on all other Resets.\nData RAM is available for use as GPR registers by all instructions.  The  second  half  of  Bank  15  (F80h  to FFFh) contains SFRs. All other banks of data memory contain GPRs, starting with Bank 0.",
    "5.9.2 SPECIAL FUNCTION REGISTERS\nThe Special Function  Registers (SFRs) are registers used by the CPU and peripheral modules for controlling the desired operation of the device. These registers are implemented as static RAM. A list of these registers is given in Table 5-1 and Table 5-2.\nGLYPH<147>coreGLYPH<148> are described in this section, while those related to the operation of the peripheral features are described in the section of that peripheral feature.\nThe SFRs are typically distributed among the peripherals whose functions they control.\nThe SFRs can be classified into two sets: those associated with the GLYPH<147>coreGLYPH<148> function and those related to the peripheral  functions.  Those  registers  related  to  the\nThe unused SFR locations will be unimplemented and read as GLYPH<145> 0 GLYPH<146> s.",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nFFFh, Name = TOSU. FFFh, Address = FDFh. FFFh, Name = INDF2 (2). FFFh, Address = FBFh. FFFh, Name = CCPR1H. FFFh, Address = F9Fh. FFFh, Name = IPR1. FFEh, Name = TOSH. FFEh, Address = FDEh. FFEh, Name = POSTINC2 (2). FFEh, Address = FBEh. FFEh, Name = CCPR1L. FFEh, Address = F9Eh. FFEh, Name = PIR1. FFDh, Name = TOSL. FFDh, Address = FDDh. FFDh, Name = POSTDEC2 (2). FFDh, Address = FBDh. FFDh, Name = CCP1CON. FFDh, Address = F9Dh. FFDh, Name = PIE1. FFCh, Name = STKPTR. FFCh, Address = FDCh. FFCh, Name = PREINC2",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\n(2). FFCh, Address = FBCh. FFCh, Name = CCPR2H. FFCh, Address = F9Ch. FFCh, Name = GLYPH<151>. FFBh, Name = PCLATU. FFBh, Address = FDBh. FFBh, Name = PLUSW2 (2). FFBh, Address = FBBh. FFBh, Name = CCPR2L. FFBh, Address = F9Bh. FFBh, Name = OSCTUNE. FFAh, Name = PCLATH. FFAh, Address = FDAh. FFAh, Name = FSR2H. FFAh, Address = FBAh. FFAh, Name = CCP2CON. FFAh, Address = F9Ah. FFAh, Name = OSCTUN2. FF9h, Name = PCL. FF9h, Address = FD9h. FF9h, Name = FSR2L. FF9h, Address = FB9h. FF9h, Name = GLYPH<151>. FF9h, Address",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\n= F99h. FF9h, Name = GLYPH<151>. FF8h, Name = TBLPTRU. FF8h, Address = FD8h. FF8h, Name = STATUS. FF8h, Address = FB8h. FF8h, Name = GLYPH<151>. FF8h, Address = F98h. FF8h, Name = GLYPH<151>. FF7h, Name = TBLPTRH. FF7h, Address = FD7h. FF7h, Name = TMR0H. FF7h, Address = FB7h. FF7h, Name = PWM1CON (1). FF7h, Address = F97h. FF7h, Name = GLYPH<151>. FF6h, Name = TBLPTRL. FF6h, Address = FD6h. FF6h, Name = TMR0L. FF6h, Address = FB6h. FF6h, Name = ECCPAS",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\n(1). FF6h, Address = F96h. FF6h, Name = TRISE (1). FF5h, Name = TABLAT. FF5h, Address = FD5h. FF5h, Name = T0CON. FF5h, Address = FB5h. FF5h, Name = CVRCON. FF5h, Address = F95h. FF5h, Name = TRISD (1). FF4h, Name = PRODH. FF4h, Address = FD4h. FF4h, Name = GLYPH<151>. FF4h, Address = FB4h. FF4h, Name = CMCON. FF4h, Address = F94h. FF4h, Name = TRISC. FF3h, Name = PRODL. FF3h, Address = FD3h. FF3h, Name = OSCCON. FF3h, Address = FB3h. FF3h, Name = TMR3H. FF3h, Address =",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nF93h. FF3h, Name = TRISB. FF2h, Name = INTCON. FF2h, Address = FD2h. FF2h, Name = LVDCON. FF2h, Address = FB2h. FF2h, Name = TMR3L. FF2h, Address = F92h. FF2h, Name = TRISA. FF1h, Name = INTCON2. FF1h, Address = FD1h. FF1h, Name = WDTCON. FF1h, Address = FB1h. FF1h, Name = T3CON. FF1h, Address = F91h. FF1h, Name = GLYPH<151>. FF0h, Name = INTCON3. FF0h, Address = FD0h. FF0h, Name = RCON. FF0h, Address = FB0h. FF0h, Name = GLYPH<151>. FF0h, Address = F90h. FF0h, Name =",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nGLYPH<151>. FEFh, Name = INDF0 (2). FEFh, Address = FCFh. FEFh, Name = TMR1H. FEFh, Address = FAFh. FEFh, Name = SPBRG. FEFh, Address = F8Fh. FEFh, Name = GLYPH<151>. FEEh, Name = POSTINC0 (2). FEEh, Address = FCEh. FEEh, Name = TMR1L. FEEh, Address = FAEh. FEEh, Name = RCREG. FEEh, Address = F8Eh. FEEh, Name = GLYPH<151>. FEDh, Name = POSTDEC0 (2). FEDh, Address = FCDh. FEDh, Name = T1CON. FEDh, Address = FADh. FEDh, Name = TXREG. FEDh, Address = F8Dh. FEDh, Name = LATE (1). FECh, Name = PREINC0 (2).",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nFECh, Address = FCCh. FECh, Name = TMR2. FECh, Address = FACh. FECh, Name = TXSTA. FECh, Address = F8Ch. FECh, Name = LATD (1). FEBh, Name = PLUSW0 (2). FEBh, Address = FCBh. FEBh, Name = PR2. FEBh, Address = FABh. FEBh, Name = RCSTA. FEBh, Address = F8Bh. FEBh, Name = LATC. FEAh, Name = FSR0H. FEAh, Address = FCAh. FEAh, Name = T2CON. FEAh, Address = FAAh. FEAh, Name = GLYPH<151>. FEAh, Address = F8Ah. FEAh, Name = LATB. FE9h, Name = FSR0L. FE9h, Address = FC9h. FE9h, Name = SSPBUF. FE9h, Address = FA9h. FE9h, Name = EEADR.",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nFE9h, Address = F89h. FE9h, Name = LATA. FE8h, Name = WREG. FE8h, Address = FC8h. FE8h, Name = SSPADD. FE8h, Address = FA8h. FE8h, Name = EEDATA. FE8h, Address = F88h. FE8h, Name = GLYPH<151>. FE7h, Name = INDF1 (2). FE7h, Address = FC7h. FE7h, Name = SSPSTAT. FE7h, Address = FA7h. FE7h, Name = EECON2. FE7h, Address = F87h. FE7h, Name = GLYPH<151>. FE6h, Name = POSTINC1 (2). FE6h, Address = FC6h. FE6h, Name = SSPCON1. FE6h, Address = FA6h. FE6h, Name = EECON1. FE6h, Address = F86h.",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nFE6h, Name = GLYPH<151>. FE5h, Name = POSTDEC1 (2). FE5h, Address = FC5h. FE5h, Name = SSPCON2. FE5h, Address = FA5h. FE5h, Name = GLYPH<151>. FE5h, Address = F85h. FE5h, Name = GLYPH<151>. FE4h, Name = PREINC1 (2). FE4h, Address = FC4h. FE4h, Name = ADRESH. FE4h, Address = FA4h. FE4h, Name = GLYPH<151>. FE4h, Address = F84h. FE4h, Name = PORTE (1). FE3h, Name = PLUSW1 (2). FE3h, Address = FC3h. FE3h, Name = ADRESL. FE3h, Address = FA3h. FE3h, Name = GLYPH<151>. FE3h, Address =",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nF83h. FE3h, Name = PORTD (1). FE2h, Name = FSR1H. FE2h, Address = FC2h. FE2h, Name = ADCON0. FE2h, Address = FA2h. FE2h, Name = IPR2. FE2h, Address = F82h. FE2h, Name = PORTC. FE1h, Name = FSR1L. FE1h, Address = FC1h. FE1h, Name = ADCON1. FE1h, Address = FA1h. FE1h, Name = PIR2. FE1h, Address = F81h. FE1h, Name = PORTB. FE0h, Name = BSR. FE0h, Address = FC0h. FE0h, Name = ADCON2. FE0h, Address = FA0h. FE0h, Name = PIE2. FE0h, Address = F80h. FE0h, Name = PORTA\nLegend:",
    "TABLE 5-1: SPECIAL FUNCTION REGISTER MAP FOR PIC18F2X20/4X20 DEVICES\nGLYPH<151> = Unimplemented registers, read as GLYPH<145> 0 GLYPH<146>.\nNote 1: This register is not available on PIC18F2X20 devices.\n2: This is not a physical register.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nTOSU, Bit 7 = GLYPH<151>. TOSU, Bit 6 = GLYPH<151>. TOSU, Bit 5 = GLYPH<151>. TOSU, Bit 4 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 3 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 2 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 1 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Bit 0 = Top-of-Stack Upper Byte (TOS<20:16>). TOSU, Value on POR, BOR = ---0 0000. TOSU, Details on page: = 46, 54. TOSH, Bit 7 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 6 = Top-of-Stack High Byte (TOS<15:8>). TOSH,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nBit 5 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 4 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 3 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 2 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 1 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Bit 0 = Top-of-Stack High Byte (TOS<15:8>). TOSH, Value on POR, BOR = 0000 0000. TOSH, Details on page: = 46, 54. TOSL, Bit 7 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 6 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 5 = Top-of-Stack Low Byte (TOS<7:0>).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nTOSL, Bit 4 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 3 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 2 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 1 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Bit 0 = Top-of-Stack Low Byte (TOS<7:0>). TOSL, Value on POR, BOR = 0000 0000. TOSL, Details on page: = 46, 54. STKPTR, Bit 7 = STKFUL. STKPTR, Bit 6 = STKUNF. STKPTR, Bit 5 = GLYPH<151>. STKPTR, Bit 4 = Return Stack Pointer. STKPTR, Bit 3 = Return Stack Pointer. STKPTR, Bit 2 = Return Stack Pointer. STKPTR, Bit 1 = Return Stack Pointer.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nSTKPTR, Bit 0 = Return Stack Pointer. STKPTR, Value on POR, BOR = 00-0 0000. STKPTR, Details on page: = 46, 55. PCLATU, Bit 7 = GLYPH<151>. PCLATU, Bit 6 = GLYPH<151>. PCLATU, Bit 5 = bit 21 (3). PCLATU, Bit 4 = Holding Register for PC<20:16>. PCLATU, Bit 3 = Holding Register for PC<20:16>. PCLATU, Bit 2 = Holding Register for PC<20:16>. PCLATU, Bit 1 = Holding Register for PC<20:16>. PCLATU, Bit 0 = Holding Register for PC<20:16>. PCLATU, Value on POR, BOR = ---0 0000. PCLATU, Details on page: = 46, 56. PCLATH, Bit 7 = Holding Register for PC<15:8>. PCLATH, Bit 6 = Holding Register for",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nPC<15:8>. PCLATH, Bit 5 = Holding Register for PC<15:8>. PCLATH, Bit 4 = Holding Register for PC<15:8>. PCLATH, Bit 3 = Holding Register for PC<15:8>. PCLATH, Bit 2 = Holding Register for PC<15:8>. PCLATH, Bit 1 = Holding Register for PC<15:8>. PCLATH, Bit 0 = Holding Register for PC<15:8>. PCLATH, Value on POR, BOR = 0000 0000. PCLATH, Details on page: = 46, 56. PCL, Bit 7 = PC Low Byte (PC<7:0>). PCL, Bit 6 = PC Low Byte (PC<7:0>). PCL, Bit 5 = PC Low Byte (PC<7:0>). PCL, Bit 4 = PC Low Byte (PC<7:0>). PCL, Bit 3 = PC Low Byte (PC<7:0>). PCL, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n2 = PC Low Byte (PC<7:0>). PCL, Bit 1 = PC Low Byte (PC<7:0>). PCL, Bit 0 = PC Low Byte (PC<7:0>). PCL, Value on POR, BOR = 0000 0000. PCL, Details on page: = 46, 56. TBLPTRU, Bit 7 = GLYPH<151>. TBLPTRU, Bit 6 = GLYPH<151>. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n(TBLPTR<20:16>). TBLPTRU, Value on POR, BOR = --00 0000. TBLPTRU, Details on page: = 46, 74. TBLPTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 6 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBLPTRH, Bit 0 = Program Memory Table Pointer High Byte",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n(TBLPTR<15:8>). TBLPTRH, Value on POR, BOR = 0000 0000. TBLPTRH, Details on page: = 46, 74. TBLPTRL, Bit 7 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer Low Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer Low Byte",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n(TBLPTR<7:0>). TBLPTRL, Value on POR, BOR = 0000 0000. TBLPTRL, Details on page: = 46, 74. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3 = Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on POR, BOR = 0000 0000. TABLAT, Details on page: = 46, 74. PRODH, Bit 7 = Product Register High Byte. PRODH, Bit 6 = Product Register High Byte. PRODH, Bit 5 = Product Register High Byte. PRODH, Bit 4 = Product Register High Byte. PRODH, Bit 3 = Product Register High Byte. PRODH, Bit 2 = Product Register High Byte. PRODH, Bit 1 = Product Register High",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nByte. PRODH, Bit 0 = Product Register High Byte. PRODH, Value on POR, BOR = xxxx xxxx. PRODH, Details on page: = 46, 85. PRODL, Bit 7 = Product Register Low Byte. PRODL, Bit 6 = Product Register Low Byte. PRODL, Bit 5 = Product Register Low Byte. PRODL, Bit 4 = Product Register Low Byte. PRODL, Bit 3 = Product Register Low Byte. PRODL, Bit 2 = Product Register Low Byte. PRODL, Bit 1 = Product Register Low Byte. PRODL, Bit 0 = Product Register Low Byte. PRODL, Value on POR, BOR = xxxx xxxx. PRODL, Details on page: = 46, 85. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nINTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000 000x. INTCON, Details on page: = 46, 89. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = GLYPH<151>. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = GLYPH<151>. INTCON2, Bit 0 = RBIP. INTCON2, Value on POR, BOR = 1111 -1-1. INTCON2, Details on page: = 46, 90. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = GLYPH<151>. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151>. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 11-0 0-00. INTCON3, Details on page: = 46, 91. INDF0, Bit 7 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 6 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 5 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 4 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 3 = Uses contents of FSR0 to address data memory GLYPH<150> value",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nof FSR0 not changed (not a physical register). INDF0, Bit 2 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 1 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Bit 0 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 not changed (not a physical register). INDF0, Value on POR, BOR = n/a. INDF0, Details on page: = 46, 66. POSTINC0, Bit 7 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 6 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nregister). POSTINC0, Bit 5 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 4 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 3 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 2 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 1 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-incremented (not a physical register). POSTINC0, Bit 0 = Uses contents of FSR0 to address data memory GLYPH<150>",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nvalue of FSR0 post-incremented (not a physical register). POSTINC0, Value on POR, BOR = n/a. POSTINC0, Details on page: = 46, 66. POSTDEC0, Bit 7 = . POSTDEC0, Bit 6 = . POSTDEC0, Bit 5 = . POSTDEC0, Bit 4 = . POSTDEC0, Bit 3 = . POSTDEC0, Bit 2 = . POSTDEC0, Bit 1 = . POSTDEC0, Bit 0 = . POSTDEC0, Value on POR, BOR = n/a. POSTDEC0, Details on page: = 46, 66. PREINC0, Bit 7 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 6 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nPREINC0, Bit 5 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 4 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 3 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 2 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 1 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 post-decremented (not a physical register). PREINC0, Bit 0 = Uses contents of FSR0 to address data memory GLYPH<150> value of",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nFSR0 post-decremented (not a physical register). PREINC0, Value on POR, BOR = n/a. PREINC0, Details on page: = 46, 66. PLUSW0, Bit 7 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 pre-incremented (not a physical register) Uses contents. PLUSW0, Bit 6 = of FSR0 to. PLUSW0, Bit 5 = address data. PLUSW0, Bit 4 = memory. PLUSW0, Bit 3 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 pre-incremented (not a physical register) Uses contents. PLUSW0, Bit 2 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 pre-incremented (not a physical register) Uses contents. PLUSW0, Bit 1 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\npre-incremented (not a physical register) Uses contents. PLUSW0, Bit 0 = Uses contents of FSR0 to address data memory GLYPH<150> value of FSR0 pre-incremented (not a physical register) Uses contents. PLUSW0, Value on POR, BOR = n/a. PLUSW0, Details on page: = 46, 66. FSR0H, Bit 7 = GLYPH<151>. FSR0H, Bit 6 = GLYPH<151>. FSR0H, Bit 5 = GLYPH<151>. FSR0H, Bit 4 = GLYPH<151>. FSR0H, Bit 3 = GLYPH<150> value of FSR0 offset by W(not a physical register) Indirect Data. FSR0H, Bit 2 = Memory Address. FSR0H, Bit 1 = Pointer. FSR0H, Bit 0 = High. FSR0H, Value on POR, BOR = ---- 0000. FSR0H, Details on",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\npage: = 46, 66. FSR0L, Bit 7 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 6 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 5 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 4 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 3 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 2 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 1 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Bit 0 = Indirect Data Memory Address Pointer 0 Low Byte. FSR0L, Value on POR, BOR = xxxx xxxx. FSR0L, Details on page: = 46, 66. WREG, Bit 7 = Working Register. WREG, Bit 6 = Working Register. WREG, Bit 5 = Working Register. WREG, Bit 4 = Working Register. WREG, Bit 3 = Working Register. WREG, Bit 2 = Working Register. WREG, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n1 = Working Register. WREG, Bit 0 = Working Register. WREG, Value on POR, BOR = xxxx xxxx. WREG, Details on page: = 46. INDF1, Bit 7 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 6 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 5 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 4 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 3 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 2 = Uses",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\ncontents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 1 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Bit 0 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 not changed (not a physical register). INDF1, Value on POR, BOR = n/a. INDF1, Details on page: = 46, 66. POSTINC1, Bit 7 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 6 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 5 = Uses contents of FSR1 to address data memory",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 4 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 3 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 2 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 1 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register). POSTINC1, Bit 0 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-incremented (not a physical register).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nPOSTINC1, Value on POR, BOR = n/a. POSTINC1, Details on page: = 46, 66. POSTDEC1, Bit 7 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 6 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 5 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 4 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 3 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nregister). POSTDEC1, Bit 2 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 1 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Bit 0 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 post-decremented (not a physical register). POSTDEC1, Value on POR, BOR = n/a. POSTDEC1, Details on page: = 46, 66. PREINC1, Bit 7 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 6 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n(not a physical register). PREINC1, Bit 5 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 4 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 3 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 2 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 1 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Bit 0 = Uses contents of FSR1 to address data memory",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<150> value of FSR1 pre-incremented (not a physical register). PREINC1, Value on POR, BOR = n/a. PREINC1, Details on page: = 46, 66. PLUSW1, Bit 7 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 6 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 5 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 4 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 3 = Uses contents of FSR1 to address data memory GLYPH<150> value of",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nFSR1 offset by W(not a physical register). PLUSW1, Bit 2 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 1 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Bit 0 = Uses contents of FSR1 to address data memory GLYPH<150> value of FSR1 offset by W(not a physical register). PLUSW1, Value on POR, BOR = n/a. PLUSW1, Details on page: = 46, 66. FSR1H, Bit 7 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 6 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n1 High. FSR1H, Bit 5 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 4 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 3 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 2 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 1 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Bit 0 = GLYPH<151> GLYPH<151> GLYPH<151>",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151> Indirect Data Memory Address Pointer 1 High. FSR1H, Value on POR, BOR = ---- 0000. FSR1H, Details on page: = 47, 66. FSR1L, Bit 7 = Indirect Data GLYPH<151>. FSR1L, Bit 6 = Memory Address. FSR1L, Bit 5 = Pointer GLYPH<151>. FSR1L, Bit 4 = 1 Low Byte GLYPH<151> Bank. FSR1L, Bit 3 = . FSR1L, Bit 2 = . FSR1L, Bit 1 = . FSR1L, Bit 0 = . FSR1L, Value on POR, BOR = xxxx xxxx. FSR1L, Details on page: = 47, 66. BSR, Bit 7 = GLYPH<151> Select Register. BSR, Bit 6 = GLYPH<151> Select Register. BSR, Bit 5 = GLYPH<151> Select Register. BSR, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151> Select Register. BSR, Bit 3 = GLYPH<151> Select Register. BSR, Bit 2 = GLYPH<151> Select Register. BSR, Bit 1 = GLYPH<151> Select Register. BSR, Bit 0 = GLYPH<151> Select Register. BSR, Value on POR, BOR = ---- 0000. BSR, Details on page: = 47, 65. INDF2, Bit 7 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 6 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 5 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 4 = Uses contents of FSR2 to address data memory GLYPH<150>",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nvalue of FSR2 not changed (not a physical register). INDF2, Bit 3 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 2 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 1 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Bit 0 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 not changed (not a physical register). INDF2, Value on POR, BOR = n/a. INDF2, Details on page: = 47, 66. POSTINC2, Bit 7 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nPOSTINC2, Bit 6 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 5 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 4 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 3 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 2 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Bit 1 = Uses contents of FSR2 to address data memory GLYPH<150> value of",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nFSR2 post-incremented (not a physical register). POSTINC2, Bit 0 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-incremented (not a physical register). POSTINC2, Value on POR, BOR = n/a. POSTINC2, Details on page: = 47, 66. POSTDEC2, Bit 7 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 6 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 5 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 4 = Uses contents of FSR2 to address data memory",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 3 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 2 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 1 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Bit 0 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 post-decremented (not a physical register). POSTDEC2, Value on POR, BOR = n/a. POSTDEC2, Details on page: = 47, 66. PREINC2, Bit 7 = Uses contents of FSR2 to",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\naddress data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 6 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 5 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 4 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 3 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 2 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nPREINC2, Bit 1 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Bit 0 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 pre-incremented (not a physical register). PREINC2, Value on POR, BOR = n/a. PREINC2, Details on page: = 47, 66. PLUSW2, Bit 7 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 6 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 5 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 4",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n= Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 3 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 2 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 1 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Bit 0 = Uses contents of FSR2 to address data memory GLYPH<150> value of FSR2 offset by W(not a physical register). PLUSW2, Value on POR, BOR = n/a. PLUSW2, Details on page: = 47, 66. FSR2H, Bit 7 = GLYPH<151> GLYPH<151>",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 6 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 5 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 4 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 3 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 2 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 1 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Bit 0 = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> Indirect Data Memory Address Pointer 2 High. FSR2H, Value on POR, BOR = . FSR2H, Details on page: = . FSR2L, Bit 7 = . FSR2L, Bit 6 = . FSR2L, Bit 5 = . FSR2L, Bit 4 = . FSR2L, Bit 3 = . FSR2L, Bit 2 = . FSR2L, Bit 1 = . FSR2L, Bit 0 = . FSR2L, Value on POR, BOR = ---- 0000. FSR2L, Details on page: = 47, 66 47, 66. STATUS TMR0H, Bit 7 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151>",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nGLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 6 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 5 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 4 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 3 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 2 = Indirect Data Memory Address Pointer 2",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nLow Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 1 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Bit 0 = Indirect Data Memory Address Pointer 2 Low Byte GLYPH<151> GLYPH<151> GLYPH<151> N OV Z DC C Timer0 Register High Byte. STATUS TMR0H, Value on POR, BOR = xxxx xxxx ---x xxxx 0000 0000. STATUS TMR0H, Details on page: = 47, 68 47, 119. TMR0L, Bit 7 = Timer0 Register Low Byte. TMR0L, Bit 6 = Timer0 Register Low Byte. TMR0L, Bit 5 = Timer0 Register Low Byte. TMR0L, Bit 4 = Timer0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nRegister Low Byte. TMR0L, Bit 3 = Timer0 Register Low Byte. TMR0L, Bit 2 = Timer0 Register Low Byte. TMR0L, Bit 1 = Timer0 Register Low Byte. TMR0L, Bit 0 = Timer0 Register Low Byte. TMR0L, Value on POR, BOR = xxxx xxxx. TMR0L, Details on page: = 47, 119. T0CON, Bit 7 = . T0CON, Bit 6 = . T0CON, Bit 5 = . T0CON, Bit 4 = . T0CON, Bit 3 = . T0CON, Bit 2 = . T0CON, Bit 1 = . T0CON, Bit 0 = . T0CON, Value on POR, BOR = . T0CON, Details on page: = . , Bit 7 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 6 = TMR0ON T08BIT",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\nT0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 5 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 4 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 3 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 2 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 1 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Bit 0 = TMR0ON T08BIT T0CS T0SE PSA T0PS2 T0PS1 T0PS0. , Value on POR, BOR",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n= 1111 1111. , Details on page: = 47, 117\nLegend:\n- x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n1: RA6 and associated bits are configured as port pins in RCIO, ECIO and INTIO2 (with port function on RA6) Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other oscillator modes.\n2: RA7 and associated bits are configured as port pins in INTIO2 Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other modes.\n3: Bit 21 of the PC is only available in Test mode and Serial Programming modes.\n4: If PBADEN = 0 , PORTB<4:0> are configured as digital inputs and read unknown and if PBADEN = 1 , PORTB<4:0> are configured as analog inputs and read as GLYPH<145> 0 GLYPH<146> following a Reset.\n5: These registers and/or bits are not implemented on the PIC18F2X20 devices and read as 0x00.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320)\n6: The RE3 port bit is available as an input only pin only in 40-pin devices when Master Clear functionality is disabled (CONFIG3H<7> = 0 ).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nOSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 = IRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0 0000. OSCCON, Value on POR, BOR = q000. OSCCON, Details on page: = 27, 47. LVDCON, Bit 7 = GLYPH<151>. LVDCON, Bit 6 = GLYPH<151>. LVDCON, Bit 5 = IRVST. LVDCON, Bit 4 = LVDEN. LVDCON, Bit 3 = LVDL3. LVDCON, Bit 2 = LVDL2. LVDCON, Bit 1 = LVDL1 LVDL0. LVDCON, Bit 0 = --00. LVDCON, Value on POR, BOR",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= 0101. LVDCON, Details on page: = 47, 233. WDTCON, Bit 7 = GLYPH<151>. WDTCON, Bit 6 = GLYPH<151>. WDTCON, Bit 5 = GLYPH<151>. WDTCON, Bit 4 = GLYPH<151>. WDTCON, Bit 3 = GLYPH<151>. WDTCON, Bit 2 = GLYPH<151>. WDTCON, Bit 1 = GLYPH<151> SWDTEN. WDTCON, Bit 0 = ---. WDTCON, Value on POR, BOR = ---0. WDTCON, Details on page: = 47, 247. RCON, Bit 7 = IPEN. RCON, Bit 6 = GLYPH<151>. RCON, Bit 5 = GLYPH<151>. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR BOR.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nRCON, Bit 0 = 0--1. RCON, Value on POR, BOR = 11q0. RCON, Details on page: = 45, 69, 98. TMR1H Timer1 Register High Byte, Bit 7 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 6 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 5 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 4 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 3 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 2 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 1 = TMR1H Timer1 Register High Byte. TMR1H Timer1 Register High Byte, Bit 0 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nxxxx. TMR1H Timer1 Register High Byte, Value on POR, BOR = xxxx. TMR1H Timer1 Register High Byte, Details on page: = 47, 125. TMR1L Timer1 Register Low Byte, Bit 7 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 6 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 5 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 4 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 3 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 2 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low Byte, Bit 1 = TMR1L Timer1 Register Low Byte. TMR1L Timer1 Register Low",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nByte, Bit 0 = xxxx. TMR1L Timer1 Register Low Byte, Value on POR, BOR = xxxx. TMR1L Timer1 Register Low Byte, Details on page: = 47, 125. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS TMR1ON. T1CON, Bit 0 = 0000. T1CON, Value on POR, BOR = 0000. T1CON, Details on page: = 47, 121. TMR2 Timer2 Register, Bit 7 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 6 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 5 = TMR2",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nTimer2 Register. TMR2 Timer2 Register, Bit 4 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 3 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 2 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 1 = TMR2 Timer2 Register. TMR2 Timer2 Register, Bit 0 = 0000. TMR2 Timer2 Register, Value on POR, BOR = 0000. TMR2 Timer2 Register, Details on page: = 47, 127. PR2 Timer2 Period Register, Bit 7 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 6 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 5 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 4 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 3 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 2 = PR2 Timer2 Period",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nRegister. PR2 Timer2 Period Register, Bit 1 = PR2 Timer2 Period Register. PR2 Timer2 Period Register, Bit 0 = 1111. PR2 Timer2 Period Register, Value on POR, BOR = 1111. PR2 Timer2 Period Register, Details on page: = 47, 127. T2CON, Bit 7 = GLYPH<151>. T2CON, Bit 6 = TOUTPS3. T2CON, Bit 5 = TOUTPS2. T2CON, Bit 4 = TOUTPS1. T2CON, Bit 3 = TOUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1 T2CKPS0. T2CON, Bit 0 = -000. T2CON, Value on POR, BOR = 0000. T2CON, Details on page: = 47, 127. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 7 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nBuffer/Transmit Register, Bit 6 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 5 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 4 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 3 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 2 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 1 = SSPBUF MSSP Receive Buffer/Transmit Register. SSPBUF MSSP Receive Buffer/Transmit Register, Bit 0 = xxxx. SSPBUF MSSP Receive Buffer/Transmit Register, Value on POR, BOR = xxxx. SSPBUF MSSP Receive Buffer/Transmit Register, Details on page: = 47, 156, 164. SSPADD MSSP Address Register in I 2",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nCGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 7 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 6 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 5 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nMSSP Baud Rate Reload Register in I 2 C Master mode., Bit 4 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 3 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 2 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n2 C Master mode., Bit 1 = SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode.. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Bit 0 = 0000. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Value on POR, BOR = 0000. SSPADD MSSP Address Register in I 2 CGLYPH<153> Slave mode. MSSP Baud Rate Reload Register in I 2 C Master mode., Details on page: = 47, 164. SSPSTAT, Bit 7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= R/W. SSPSTAT, Bit 1 = UA BF. SSPSTAT, Bit 0 = 0000. SSPSTAT, Value on POR, BOR = 0000. SSPSTAT, Details on page: = 47, 156, 165. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 = SSPM2. SSPCON1, Bit 1 = SSPM1 SSPM0. SSPCON1, Bit 0 = 0000. SSPCON1, Value on POR, BOR = 0000. SSPCON1, Details on page: = 47, 157, 166. SSPCON2, Bit 7 = GCEN. SSPCON2, Bit 6 = ACKSTAT. SSPCON2, Bit 5 = ACKDT. SSPCON2, Bit 4 = ACKEN.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nSSPCON2, Bit 3 = RCEN. SSPCON2, Bit 2 = PEN. SSPCON2, Bit 1 = RSEN SEN. SSPCON2, Bit 0 = 0000. SSPCON2, Value on POR, BOR = 0000. SSPCON2, Details on page: = 47, 167. ADRESH A/D Result Register High Byte, Bit 7 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 6 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 5 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 4 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 3 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 2 = ADRESH A/D Result Register High Byte. ADRESH A/D Result Register High Byte, Bit 1 = ADRESH A/D",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nResult Register High Byte. ADRESH A/D Result Register High Byte, Bit 0 = xxxx. ADRESH A/D Result Register High Byte, Value on POR, BOR = xxxx. ADRESH A/D Result Register High Byte, Details on page: = 48, 220. ADRESL A/D Result Register Low Byte, Bit 7 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 6 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 5 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 4 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 3 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 2 = ADRESL A/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 1 = ADRESL",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nA/D Result Register Low Byte. ADRESL A/D Result Register Low Byte, Bit 0 = xxxx. ADRESL A/D Result Register Low Byte, Value on POR, BOR = xxxx. ADRESL A/D Result Register Low Byte, Details on page: = 48, 220. ADCON0, Bit 7 = GLYPH<151>. ADCON0, Bit 6 = GLYPH<151>. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS2. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0 GO/DONE. ADCON0, Bit 1 = ADON. ADCON0, Bit 0 = --00. ADCON0, Value on POR, BOR = 0000. ADCON0, Details on page: = 48, 211. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1 PCFG0. ADCON1, Bit 0 = --00. ADCON1, Value on POR, BOR = 0qqq. ADCON1, Details on page: = 48, 212. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = GLYPH<151>. ADCON2, Bit 5 = ACQT2. ADCON2, Bit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1 ADCS0. ADCON2, Bit 0 = 0-00. ADCON2, Value on POR, BOR = 0000. ADCON2, Details on page: = 48, 213. CCPR1H Capture/Compare/PWM Register 1 High",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nByte, Bit 7 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 6 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 5 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 4 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 3 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 2 = CCPR1H Capture/Compare/PWM Register 1 High Byte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 1 = CCPR1H Capture/Compare/PWM Register 1 High",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nByte. CCPR1H Capture/Compare/PWM Register 1 High Byte, Bit 0 = xxxx. CCPR1H Capture/Compare/PWM Register 1 High Byte, Value on POR, BOR = xxxx. CCPR1H Capture/Compare/PWM Register 1 High Byte, Details on page: = 48, 134. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 7 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 6 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 5 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 4 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nByte, Bit 3 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 2 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 1 = CCPR1L Capture/Compare/PWM Register 1 Low Byte. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Bit 0 = xxxx. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Value on POR, BOR = xxxx. CCPR1L Capture/Compare/PWM Register 1 Low Byte, Details on page: = 48, 134. CCP1CON, Bit 7 = P1M1 (5). CCP1CON, Bit 6 = P1M0 (5). CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1 CCP1M0. CCP1CON, Bit 0 = 0000. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Details on page: = 48, 133, 141. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 7 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 6 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 5 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 4 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nCapture/Compare/PWM Register 2 High Byte, Bit 3 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 2 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 1 = CCPR2H Capture/Compare/PWM Register 2 High Byte. CCPR2H Capture/Compare/PWM Register 2 High Byte, Bit 0 = xxxx. CCPR2H Capture/Compare/PWM Register 2 High Byte, Value on POR, BOR = xxxx. CCPR2H Capture/Compare/PWM Register 2 High Byte, Details on page: = 48, 134. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 7 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 6 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nCCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 5 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 4 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 3 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 2 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 1 = CCPR2L Capture/Compare/PWM Register 2 Low Byte. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Bit 0 = xxxx. CCPR2L Capture/Compare/PWM Register 2 Low Byte,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nValue on POR, BOR = xxxx. CCPR2L Capture/Compare/PWM Register 2 Low Byte, Details on page: = 48, 134. CCP2CON, Bit 7 = GLYPH<151>. CCP2CON, Bit 6 = GLYPH<151>. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0 --00. CCP2CON, Value on POR, BOR = 0000. CCP2CON, Details on page: = 48, 133. PWM1CON (5), Bit 7 = PRSEN. PWM1CON (5), Bit 6 = PDC6. PWM1CON (5), Bit 5 = PDC5.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nPWM1CON (5), Bit 4 = PDC4. PWM1CON (5), Bit 3 = PDC3. PWM1CON (5), Bit 2 = PDC2. PWM1CON (5), Bit 1 = PDC1. PWM1CON (5), Bit 0 = PDC0 0000. PWM1CON (5), Value on POR, BOR = 0000. PWM1CON (5), Details on page: = 48, 149. ECCPAS (5), Bit 7 = ECCPASE. ECCPAS (5), Bit 6 = ECCPAS2. ECCPAS (5), Bit 5 = ECCPAS1. ECCPAS (5), Bit 4 = ECCPAS0. ECCPAS (5), Bit 3 = PSSAC1. ECCPAS (5), Bit 2 = PSSAC0. ECCPAS (5), Bit 1 = PSSBD1. ECCPAS",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n(5), Bit 0 = PSSBD0 0000. ECCPAS (5), Value on POR, BOR = 0000. ECCPAS (5), Details on page: = 48, 150. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = GLYPH<151>. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1 CVR0. CVRCON, Bit 0 = 000-. CVRCON, Value on POR, BOR = 0000. CVRCON, Details on page: = 48, 227. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nCMCON, Bit 0 = CM0 0000. CMCON, Value on POR, BOR = 0111. CMCON, Details on page: = 48, 221. TMR3H Timer3 Register High Byte, Bit 7 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 6 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 5 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 4 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 3 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 2 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 1 = TMR3H Timer3 Register High Byte. TMR3H Timer3 Register High Byte, Bit 0 = xxxx.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nTMR3H Timer3 Register High Byte, Value on POR, BOR = xxxx. TMR3H Timer3 Register High Byte, Details on page: = 48, 131. TMR3L Timer3 Register Low Byte, Bit 7 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 6 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 5 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 4 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 3 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 2 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 1 = TMR3L Timer3 Register Low Byte. TMR3L Timer3 Register Low Byte, Bit 0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= xxxx. TMR3L Timer3 Register Low Byte, Value on POR, BOR = xxxx. TMR3L Timer3 Register Low Byte, Details on page: = 48, 131. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS TMR3ON. T3CON, Bit 0 = 0000. T3CON, Value on POR, BOR = 0000. T3CON, Details on page: = 48, 129. SPBRG USART Baud Rate Generator, Bit 7 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 6 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nGenerator, Bit 5 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 4 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 3 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 2 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 1 = SPBRG USART Baud Rate Generator. SPBRG USART Baud Rate Generator, Bit 0 = 0000. SPBRG USART Baud Rate Generator, Value on POR, BOR = 0000. SPBRG USART Baud Rate Generator, Details on page: = 48, 198. RCREG USART Receive Register, Bit 7 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 6 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 5 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 4",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= RCREG USART Receive Register. RCREG USART Receive Register, Bit 3 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 2 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 1 = RCREG USART Receive Register. RCREG USART Receive Register, Bit 0 = 0000. RCREG USART Receive Register, Value on POR, BOR = 0000. RCREG USART Receive Register, Details on page: = 48, 204, 203. TXREG USART Transmit Register, Bit 7 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 6 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 5 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 4 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 3 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 2 = TXREG USART Transmit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nRegister. TXREG USART Transmit Register, Bit 1 = TXREG USART Transmit Register. TXREG USART Transmit Register, Bit 0 = 0000. TXREG USART Transmit Register, Value on POR, BOR = 0000. TXREG USART Transmit Register, Details on page: = 48, 202, 203. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT TX9D. TXSTA, Bit 0 = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Details on page: = 48, 196. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nFERR. RCSTA, Bit 1 = OERR RX9D. RCSTA, Bit 0 = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Details on page: = 48, 197\nLegend: x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n1: RA6 and associated bits are configured as port pins in RCIO, ECIO and INTIO2 (with port function on RA6) Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other oscillator modes.\n2: RA7 and associated bits are configured as port pins in INTIO2 Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other modes.\n3: Bit 21 of the PC is only available in Test mode and Serial Programming modes.\n4: If PBADEN = 0 , PORTB<4:0> are configured as digital inputs and read unknown and if PBADEN = 1 , PORTB<4:0> are configured as analog inputs and read as GLYPH<145> 0 GLYPH<146> following a Reset.\n5: These registers and/or bits are not implemented on the PIC18F2X20 devices and read as 0x00.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n6: The RE3 port bit is available as an input only pin only in 40-pin devices when Master Clear functionality is disabled (CONFIG3H<7> = 0 ).",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nEEADR, Bit 7 = EEPROM Address Register. EEADR, Bit 6 = EEPROM Address Register. EEADR, Bit 5 = EEPROM Address Register. EEADR, Bit 4 = EEPROM Address Register. EEADR, Bit 3 = EEPROM Address Register. EEADR, Bit 2 = EEPROM Address Register. EEADR, Bit 1 = EEPROM Address Register. EEADR, Bit 0 = EEPROM Address Register. EEADR, Value on POR, BOR = 0000 0000. EEADR, Details on page: = 48, 81. EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register. EEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data Register. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n0 = EEPROM Data Register. EEDATA, Value on POR, BOR = 0000 0000. EEDATA, Details on page: = 48, 84. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Value on POR, BOR = 0000 0000. EECON2, Details on page: = 48, 72, 81.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nEECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = GLYPH<151>. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Value on POR, BOR = xx-0 x000. EECON1, Details on page: = 48, 73, 82. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR = 11-1 1111. IPR2, Details",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\non page: = 49, 97. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR = 00-0 0000. PIR2, Details on page: = 49, 93. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR = 00-0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n0000. PIE2, Details on page: = 49, 95. IPR1, Bit 7 = PSPIP (5). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111 1111. IPR1, Details on page: = 49, 96. PIR1, Bit 7 = PSPIF (5). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nTMR1IF. PIR1, Value on POR, BOR = 0000 0000. PIR1, Details on page: = 49, 92. PIE1, Bit 7 = PSPIE (5). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000 0000. PIE1, Details on page: = 49, 94. OSCTUNE, Bit 7 = GLYPH<151>. OSCTUNE, Bit 6 = GLYPH<151>. OSCTUNE, Bit 5 = TUN5. OSCTUNE, Bit 4 = TUN4. OSCTUNE, Bit 3 = TUN3. OSCTUNE, Bit 2 = TUN2. OSCTUNE, Bit 1 = TUN1. OSCTUNE, Bit 0",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n= TUN0. OSCTUNE, Value on POR, BOR = --00 0000. OSCTUNE, Details on page: = 23, 49. TRISE (5), Bit 7 = IBF. TRISE (5), Bit 6 = OBF. TRISE (5), Bit 5 = IBOV. TRISE (5), Bit 4 = PSPMODE. TRISE (5), Bit 3 = GLYPH<151>. TRISE (5), Bit 2 = Data Direction bits for PORTE. TRISE (5), Bit 1 = Data Direction bits for PORTE. TRISE (5), Bit 0 = Data Direction bits for PORTE. TRISE (5), Value on POR, BOR = 0000 -111. TRISE (5), Details on page: = 49, 112. TRISD (5), Bit 7 = Data Direction Control Register for PORTD. TRISD (5), Bit 6 = Data Direction Control Register for PORTD. TRISD (5), Bit 5 = Data Direction Control Register for PORTD.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nTRISD (5), Bit 4 = Data Direction Control Register for PORTD. TRISD (5), Bit 3 = Data Direction Control Register for PORTD. TRISD (5), Bit 2 = Data Direction Control Register for PORTD. TRISD (5), Bit 1 = Data Direction Control Register for PORTD. TRISD (5), Bit 0 = Data Direction Control Register for PORTD. TRISD (5), Value on POR, BOR = 1111 1111. TRISD (5), Details on page: = 49, 110. TRISC, Bit 7 = Data Direction Control Register for PORTC. TRISC, Bit 6 = Data Direction Control Register for PORTC. TRISC, Bit 5 = Data Direction Control Register for PORTC. TRISC, Bit 4 = Data Direction Control Register for PORTC. TRISC, Bit 3 = Data Direction Control Register for PORTC. TRISC, Bit 2 = Data Direction Control Register for PORTC. TRISC, Bit 1 = Data Direction Control Register for PORTC. TRISC, Bit 0 = Data Direction Control Register for",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nPORTC. TRISC, Value on POR, BOR = 1111 1111. TRISC, Details on page: = 49, 108. TRISB, Bit 7 = Data Direction Control Register for PORTB. TRISB, Bit 6 = Data Direction Control Register for PORTB. TRISB, Bit 5 = Data Direction Control Register for PORTB. TRISB, Bit 4 = Data Direction Control Register for PORTB. TRISB, Bit 3 = Data Direction Control Register for PORTB. TRISB, Bit 2 = Data Direction Control Register for PORTB. TRISB, Bit 1 = Data Direction Control Register for PORTB. TRISB, Bit 0 = Data Direction Control Register for PORTB. TRISB, Value on POR, BOR = 1111 1111. TRISB, Details on page: = 49, 106. TRISA, Bit 7 = TRISA7 (2). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = Data Direction Control Register for PORTA. TRISA, Bit 4 = Data Direction Control Register for PORTA. TRISA, Bit 3 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nData Direction Control Register for PORTA. TRISA, Bit 2 = Data Direction Control Register for PORTA. TRISA, Bit 1 = Data Direction Control Register for PORTA. TRISA, Bit 0 = Data Direction Control Register for PORTA. TRISA, Value on POR, BOR = 1111 1111. TRISA, Details on page: = 49, 103. LATE (5), Bit 7 = GLYPH<151>. LATE (5), Bit 6 = GLYPH<151>. LATE (5), Bit 5 = GLYPH<151>. LATE (5), Bit 4 = GLYPH<151>. LATE (5), Bit 3 = GLYPH<151>. LATE (5), Bit 2 = Read/Write PORTE Data Latch. LATE (5), Bit 1 = Read/Write PORTE Data Latch. LATE (5), Bit 0 = Read/Write PORTE Data Latch. LATE (5), Value on POR, BOR = ---- -xxx. LATE (5), Details on page: = 49,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n113. LATD (5), Bit 7 = Read/Write PORTD Data Latch. LATD (5), Bit 6 = Read/Write PORTD Data Latch. LATD (5), Bit 5 = Read/Write PORTD Data Latch. LATD (5), Bit 4 = Read/Write PORTD Data Latch. LATD (5), Bit 3 = Read/Write PORTD Data Latch. LATD (5), Bit 2 = Read/Write PORTD Data Latch. LATD (5), Bit 1 = Read/Write PORTD Data Latch. LATD (5), Bit 0 = Read/Write PORTD Data Latch. LATD (5), Value on POR, BOR = xxxx xxxx. LATD (5), Details on page: = 49, 110. LATC, Bit 7 = Read/Write PORTC Data Latch. LATC, Bit 6 = Read/Write PORTC Data Latch. LATC, Bit 5 = Read/Write PORTC Data Latch. LATC, Bit 4 =",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nRead/Write PORTC Data Latch. LATC, Bit 3 = Read/Write PORTC Data Latch. LATC, Bit 2 = Read/Write PORTC Data Latch. LATC, Bit 1 = Read/Write PORTC Data Latch. LATC, Bit 0 = Read/Write PORTC Data Latch. LATC, Value on POR, BOR = xxxx xxxx. LATC, Details on page: = 49, 108. LATB, Bit 7 = Read/Write PORTB Data Latch. LATB, Bit 6 = Read/Write PORTB Data Latch. LATB, Bit 5 = Read/Write PORTB Data Latch. LATB, Bit 4 = Read/Write PORTB Data Latch. LATB, Bit 3 = Read/Write PORTB Data Latch. LATB, Bit 2 = Read/Write PORTB Data Latch. LATB, Bit 1 = Read/Write PORTB Data Latch. LATB, Bit 0 = Read/Write PORTB Data Latch. LATB, Value on POR, BOR = xxxx xxxx.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nLATB, Details on page: = 49, 106. LATA, Bit 7 = LATA<7> (2). LATA, Bit 6 = LATA<6> (1). LATA, Bit 5 = Read/Write PORTA Data Latch. LATA, Bit 4 = Read/Write PORTA Data Latch. LATA, Bit 3 = Read/Write PORTA Data Latch. LATA, Bit 2 = Read/Write PORTA Data Latch. LATA, Bit 1 = Read/Write PORTA Data Latch. LATA, Bit 0 = Read/Write PORTA Data Latch. LATA, Value on POR, BOR = xxxx xxxx. LATA, Details on page: = 49, 103. PORTE (5), Bit 7 = GLYPH<151>. PORTE (5), Bit 6 = GLYPH<151>. PORTE (5), Bit 5 = GLYPH<151>. PORTE (5), Bit 4 = GLYPH<151>. PORTE (5), Bit 3 = RE3 (6). PORTE",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n(5), Bit 2 = Read PORTE pins, Write PORTE Data Latch. PORTE (5), Bit 1 = Read PORTE pins, Write PORTE Data Latch. PORTE (5), Bit 0 = Read PORTE pins, Write PORTE Data Latch. PORTE (5), Value on POR, BOR = ---- qxxx. PORTE (5), Details on page: = 49, 113. PORTD (5), Bit 7 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 6 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 5 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 4 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 3 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 2 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Bit 1 = Read PORTD pins, Write PORTD Data Latch. PORTD",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n(5), Bit 0 = Read PORTD pins, Write PORTD Data Latch. PORTD (5), Value on POR, BOR = xxxx xxxx. PORTD (5), Details on page: = 49, 110. PORTC, Bit 7 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 6 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 5 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 4 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 3 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 2 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 1 = Read PORTC pins, Write PORTC Data Latch. PORTC, Bit 0 = Read PORTC pins, Write PORTC Data Latch. PORTC, Value on POR, BOR = xxxx xxxx. PORTC, Details on page: = 49, 108. PORTB, Bit 7 = Read PORTB pins, Write PORTB Data",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nLatch (4). PORTB, Bit 6 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 5 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 4 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 3 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 2 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 1 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Bit 0 = Read PORTB pins, Write PORTB Data Latch (4). PORTB, Value on POR, BOR = xxxx xxxx. PORTB, Details on page: = 49, 106. PORTA, Bit 7 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 6 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA,",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\nBit 5 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 4 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 3 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 2 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 1 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Bit 0 = RA7 (2) RA6 (1) Read PORTA pins, Write PORTA Data Latch. PORTA, Value on POR, BOR = xx0x 0000. PORTA, Details on page: = 49, 103\nLegend: x = unknown, u = unchanged, - = unimplemented, q = value depends on condition\nNote",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n1: RA6 and associated bits are configured as port pins in RCIO, ECIO and INTIO2 (with port function on RA6) Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other oscillator modes.\n2: RA7 and associated bits are configured as port pins in INTIO2 Oscillator mode only and read as GLYPH<145> 0 GLYPH<146> in all other modes.\n3: Bit 21 of the PC is only available in Test mode and Serial Programming modes.\n4: If PBADEN = 0 , PORTB<4:0> are configured as digital inputs and read unknown and if PBADEN = 1 , PORTB<4:0> are configured as analog inputs and read as GLYPH<145> 0 GLYPH<146> following a Reset.\n5: These registers and/or bits are not implemented on the PIC18F2X20 devices and read as 0x00.",
    "TABLE 5-2: REGISTER FILE SUMMARY (PIC18F2220/2320/4220/4320) (CONTINUED)\n6: The RE3 port bit is available as an input only pin only in 40-pin devices when Master Clear functionality is disabled (CONFIG3H<7> = 0 ).",
    "5.10 Access Bank\nThe  Access  Bank  is  an  architectural  enhancement which is very useful for C compiler code optimization. The techniques used by the C compiler may also be useful for programs written in assembly.\nThis data memory region can be used for:\nGLYPH<149> Intermediate computational values\nGLYPH<149> Local variables of subroutines\nGLYPH<149> Faster context saving/switching of variables\nGLYPH<149> Common variables\nGLYPH<149> Faster evaluation/control of SFRs (no banking)\nThe Access Bank is comprised of the last 128 bytes in Bank  15  (SFRs)  and  the  first  128  bytes  in  Bank  0. These two sections will be referred to as Access RAM High  and  Access  RAM  Low,  respectively.  Figure 5-6 indicates the Access RAM areas.\nA bit in the instruction word specifies if the operation is to occur in the bank specified by the BSR register or in the Access Bank. This bit is denoted as the GLYPH<145>aGLYPH<146> bit (for access bit).",
    "5.10 Access Bank\nWhen  forced  in  the  Access  Bank  (a  = 0 ),  the  last address  in  Access  RAM  Low  is  followed  by  the  first address in Access RAM High. Access RAM High maps the Special Function Registers, so these registers can be  accessed  without  any  software  overhead.  This  is useful for testing status flags and modifying control bits.",
    "5.11 Bank Select Register (BSR)\nThe need for a large general purpose memory space dictates a RAM banking scheme. The data memory is partitioned into as many as sixteen banks. When using direct addressing, the BSR should be configured for the desired bank.\nBSR<3:0> holds  the  upper  4  bits  of  the  12-bit  RAM address. The BSR<7:4> bits will always read GLYPH<145> 0 GLYPH<146> s and writes will have no effect (see Figure 5-7).\nA MOVLB instruction has been provided in the instruction set to assist in selecting banks.\nIf the currently selected bank is not implemented, any read will return all GLYPH<145> 0 GLYPH<146> s and all writes are ignored. The STATUS register bits will be set/cleared as appropriate for the instruction performed.\nEach  Bank  extends  up  to  FFh  (256  bytes).  All  data memory is implemented as static RAM.\nA MOVFF instruction ignores the BSR since the 12-bit addresses are embedded into the instruction word.",
    "5.11 Bank Select Register (BSR)\nSection 5.12  GLYPH<147>Indirect  Addressing,  INDF  and  FSR RegistersGLYPH<148> provides a description of indirect addressing which allows linear addressing of the entire RAM space.",
    "FIGURE 5-7: DIRECT ADDRESSING\nNote\n1: For register file map detail, see Table 5-1.\n2: The access bit of the instruction can be used to force an override of the selected bank (BSR<3:0>) to the registers of the Access Bank.\n3: The MOVFF instruction embeds the entire 12-bit address in the instruction.",
    "5.12 Indirect Addressing, INDF and FSR Registers\nIndirect Addressing is a mode of addressing data memory, where the data memory address in the instruction is not fixed. An FSR register is used as a pointer to the data memory location that is to be read or written. Since this pointer is in RAM, the contents can be modified by the program. This can be useful for data tables in the data  memory  and  for  software  stacks.  Figure 5-8 shows how the fetched instruction is modified prior to being executed.\nIndirect  Addressing  is  possible  by  using  one  of  the INDF registers. Any instruction using the INDF register actually  accesses  the  register  pointed  to  by  the  File Select Register, FSR. Reading the INDF register itself, indirectly (FSR = 0 ), will read 00h. Writing to the INDF register indirectly, results in a no operation. The FSR register  contains  a  12-bit  address  which  is  shown  in Figure 5-9.\nThe INDFn register is not a physical register. Addressing INDFn  actually  addresses  the  register  whose address is contained in the FSRn register (FSRn is a pointer); this is indirect addressing.",
    "5.12 Indirect Addressing, INDF and FSR Registers\nExample 5-5 shows a simple use of indirect addressing to clear the RAM in Bank 1 (locations 100h-1FFh) in a minimum number of instructions.",
    "EXAMPLE 5-5: HOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nNEXT, 1 = LFSR CLRF. NEXT, 2 = FSR0,0x100 POSTINC0. NEXT, 3 = ; ; Clear INDF ; register then ; inc pointer. , 1 = BTFSS. , 2 = FSR0H, 1. , 3 = ; All done with ; Bank1?. , 1 = GOTO. , 2 = NEXT. , 3 = ; NO, clear next. CONTINUE, 1 = . CONTINUE, 2 = . CONTINUE, 3 = ; YES, continue\nThere  are  three  Indirect  Addressing  registers.  To address the entire data memory space (4096 bytes), these registers are 12 bits wide. To store the 12 bits of addressing information, two 8-bit registers are required:\n1. FSR0: composed of FSR0H:FSR0L\n2. FSR1: composed of FSR1H:FSR1L\n3. FSR2: composed of FSR2H:FSR2L",
    "EXAMPLE 5-5: HOW TO CLEAR RAM (BANK 1) USING INDIRECT ADDRESSING\nIn  addition,  there  are  registers  INDF0,  INDF1  and INDF2, which are not physically implemented. Reading or writing to these registers activates Indirect Addressing  with  the  value  in  the  corresponding  FSR  register being the address of the data. If an instruction writes a value to INDF0, the value will be written to the address pointed to by FSR0H:FSR0L. A read from INDF1 reads the data from the address pointed to by FSR1H:FSR1L. INDFn can be used in code anywhere an operand can be used.\nIf  INDF0,  INDF1  or  INDF2  are  read  indirectly  via  an FSR,  all  GLYPH<145> 0 GLYPH<146> s are  read  (zero  bit  is  set).  Similarly,  if INDF0, INDF1 or INDF2 are written to indirectly, the operation will be equivalent to a NOP instruction and the Status bits are not affected.",
    "5.12.1 INDIRECT ADDRESSING OPERATION\nEach  FSR  register  has  an  INDF  register  associated with it, plus four additional register addresses. Performing  an  operation  using  one  of  these  five  registers determines  how  the  FSR  will  be  modified  during indirect addressing.\nWhen data access is performed using one of the five INDFn  locations,  the  address  selected  will  configure the FSRn register to:",
    "5.12.1 INDIRECT ADDRESSING OPERATION\nGLYPH<149> Do nothing to FSRn after an indirect access (no change) GLYPH<150> INDFn\nGLYPH<149> Auto-decrement FSRn after an indirect access (post-decrement) GLYPH<150> POSTDECn\nGLYPH<149> Auto-increment FSRn after an indirect access (post-increment) GLYPH<150> POSTINCn\nGLYPH<149> Auto-increment FSRn before an indirect access (pre-increment) GLYPH<150> PREINCn\nGLYPH<149> Use the value in the WREG register as an offset to FSRn. Do not modify the value of the WREG or the FSRn register after an indirect access (no change) GLYPH<150> PLUSWn",
    "5.12.1 INDIRECT ADDRESSING OPERATION\nWhen  using  the  auto-increment  or  auto-decrement features, the effect on the FSR is not reflected in the STATUS register. For example, if the indirect address causes the FSR to equal GLYPH<145> 0 GLYPH<146>, the Z bit will not be set.\nAuto-incrementing or auto-decrementing an FSR affects all 12 bits. That is, when FSRnL overflows from an increment, FSRnH will be incremented automatically.\nAdding these features allows the FSRn to be used as a Stack Pointer, in addition to its use for table operations in data memory.\nEach FSR has an address associated with it that performs an indexed indirect access. When a data access to this INDFn location (PLUSWn) occurs, the FSRn is configured to add the signed value in the WREG register and the value in FSR to form the address before an indirect  access.  The  FSR  value is  not  changed.  The WREG offset range is -128 to +127.",
    "5.12.1 INDIRECT ADDRESSING OPERATION\nIf an FSR register contains a value that points to one of the INDFn, an indirect read will read 00h (zero bit is set) while  an  indirect  write  will  be  equivalent  to  a NOP (Status bits are not affected).\nIf an Indirect Addressing write is performed when the target  address  is  an  FSRnH  or  FSRnL  register,  the data is  written  to  the  FSR  register  but  no  pre-  or post-increment/decrement is performed.",
    "5.13 STATUS Register\nThe STATUS register, shown in Register 5-2, contains the arithmetic status of the ALU. The STATUS register can be the operand for any instruction as with any other register. If the STATUS register is the destination for an instruction that affects the Z, DC, C, OV or N bits, then the write to these five bits is disabled. These bits are set or cleared according to the device logic. Therefore, the result  of  an  instruction  with  the  STATUS  register  as destination may be different than intended.\nFor example, CLRF STATUS will clear the upper three bits and set the Z bit.   This leaves the STATUS register as 000u u1uu (where u = unchanged).\nIt  is  recommended,  therefore,  that  only BCF,  BSF, SWAPF,  MOVFF and MOVWF instructions are used to alter the STATUS register, because these instructions do not affect the Z, C, DC, OV or N bits in the STATUS register. For other instructions not affecting any Status bits (see Table 24-2).\nNote:\nThe C and DC bits operate as a borrow and digit borrow bit respectively, in subtraction.",
    "REGISTER 5-2: STATUS REGISTER\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/W-x = N. GLYPH<151>, R/W-x = OV. GLYPH<151>, R/W-x = Z. GLYPH<151>, R/W-x = DC (1). GLYPH<151>, R/W-x = C (2)\nbit 7\nbit 0",
    "REGISTER 5-2: STATUS REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 4\nN: Negative bit\nThis bit is used for signed arithmetic (2GLYPH<146>s complement). It indicates whether the result was negative (ALU MSB = 1 ).\n1 = Result was negative\n0 = Result was positive",
    "bit 3 OV: Overflow bit\nThis bit is used for signed arithmetic (2GLYPH<146>s complement). It indicates an overflow of the 7-bit magnitude which causes the sign bit (bit 7 of the result) to change state.\n1 = Overflow occurred for signed arithmetic (in this arithmetic operation)\n0 = No overflow occurred\nZ: Zero bit\n1 = The result of an arithmetic or logic operation is zero\n0 = The result of an arithmetic or logic operation is not zero",
    "bit 1 DC: Digit Carry/Borrow bit\n(1)\nFor ADDWF ADDLW SUBLW , , and SUBWF instructions:\n1 = A carry-out from the 4th low-order bit of the result occurred\n0 = No carry-out from the 4th low-order bit of the result\nC: Carry/Borrow bit (2)\nFor ADDWF ADDLW SUBLW , , and SUBWF instructions:\n1 = A carry-out from the Most Significant bit of the result occurred\n0 = No carry-out from the Most Significant bit of the result occurred\nNote 1: For Borrow, the polarity is reversed. A subtraction is executed by adding the 2GLYPH<146>s complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either bit 4 or bit 3 of the source register.\n2: For Borrow, the polarity is reversed. A subtraction is executed by adding the 2GLYPH<146>s complement of the second operand. For rotate ( RRF RLF , ) instructions, this bit is loaded with either the high or low-order bit of the source register.",
    "bit 2\nbit 0",
    "5.14 RCON Register\nThe Reset Control (RCON) register contains flag bits that  allow  differentiation  between  the  sources  of  a device Reset. These flags include the TO, PD, POR, BOR and RI bits. This register is readable and writable.\nNote 1: If the  BOREN  Configuration  bit  is  set (Brown-out Reset enabled), the BOR bit is GLYPH<145> 1 GLYPH<146> on a Power-on Reset. After a Brownout Reset has occurred, the BOR bit will be cleared and must be set by firmware to indicate the occurrence of the next Brown-out Reset.\n2: It is recommended that the POR bit be set after a Power-on Reset has been detected  so  that  subsequent  Power-on Resets may be detected.",
    "REGISTER 5-3: RCON: RESET CONTROL REGISTER\nIPEN, U-0 = GLYPH<151>. IPEN, U-0 = GLYPH<151>. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 = POR. IPEN, R/W-0 = BOR. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 5-3: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)",
    "bit 4\nRI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a Brown-out Reset occurs)",
    "Watchdog Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred",
    "bit 2 PD: Power-down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Cleared by execution of the SLEEP instruction",
    "bit 1\nPOR: Power-on Reset Status bit\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)",
    "bit 0\nBOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "6.0 FLASH PROGRAM MEMORY\nThe Flash program memory is readable, writable and erasable during normal operation over the entire VDD range.\nThe program memory space is 16 bits wide while the data RAM space is 8 bits wide. Table reads and table writes move data between these two memory spaces through an 8-bit register (TABLAT).\nA read from program memory is executed on one byte at a time. A write to program memory is executed on blocks of 8 bytes at a time. Program memory is erased in blocks of 64 bytes at a time. A bulk erase operation may not be issued from user code.\nWhile writing or erasing program memory, instruction fetches  cease  until  the  operation  is  complete.  The program memory cannot be accessed during the write or erase, therefore, code cannot execute. An internal programming timer terminates program memory writes and erases.\nA value written to program memory does not need to be a valid instruction. Executing  a  program  memory location  that  forms  an  invalid  instruction  results  in  a NOP .",
    "6.1 Table Reads and Table Writes\nIn order to read and write program memory, there are two operations that allow the processor to move bytes between  the  program  memory  space  and  the  data RAM:\nGLYPH<149> Table Read ( TBLRD )\nGLYPH<149> Table Write ( TBLWT )",
    "FIGURE 6-1: TABLE READ OPERATION\nTable  read  operations  retrieve  data  from  program memory  and  place  it  into  TABLAT  in  the  data  RAM space. Figure 6-1 shows the operation of a table read with program memory and data RAM.\nTable write operations store data from TABLAT in the data memory space into holding registers in program memory.  The  procedure  to  write  the  contents  of  the holding  registers  into  program  memory  is  detailed  in Section 6.5  GLYPH<147>Writing  to  Flash  Program  MemoryGLYPH<148> . Figure 6-2  shows  the  operation  of  a  table  write  with program memory and data RAM.\nTable operations work with byte entities. A table block containing data, rather than program instructions, is not required to be word aligned. Therefore, a table block can start and end at any byte address. If a table write is being used  to  write  executable  code  into  program  memory, program  instructions will need  to  be word-aligned (TBLPTRL<0> = 0 ).\nThe  EEPROM  on-chip  timer  controls  the  write  and erase times. The write and erase voltages are generated by an on-chip charge pump rated to operate over the  voltage  range  of  the  device  for  byte  or  word operations.",
    "6.2 Control Registers\nSeveral control registers are used in conjunction with the TBLRD and TBLWT instructions. These include the:\nGLYPH<149> EECON1 register\nGLYPH<149> EECON2 register\nThe WREN bit enables and disables erase and write operations. When set, erase and write operations are allowed. When clear, erase and write operations are disabled GLYPH<150> the WR bit cannot be set while the WREN bit is clear. This process helps to prevent accidental writes to memory due to errant (unexpected) code execution.\nGLYPH<149> TABLAT register\nGLYPH<149> TBLPTR registers",
    "6.2.1 EECON1 AND EECON2 REGISTERS\nEECON1 is the control register for memory accesses.\nEECON2 is not a physical register. Reading EECON2 will read  all GLYPH<145> 0 GLYPH<146> s. The  EECON2  register  is  used exclusively in the memory write and erase sequences.\nControl bit, EEPGD, determines if the access will be to program  or  data  EEPROM  memory.  When  clear, operations  will  access  the  data  EEPROM  memory. When set, program memory is accessed.\nControl bit, CFGS, determines if the access will be to the Configuration registers or to program memory/data EEPROM memory. When set, subsequent operations access Configuration registers. When CFGS is clear, the  EEPGD bit selects  either  program  Flash  or  data EEPROM memory.\nThe FREE bit controls program memory erase operations. When the FREE bit is set, the erase operation is initiated  on  the  next  WR  command.  When  FREE  is clear, only writes are enabled.",
    "6.2.1 EECON1 AND EECON2 REGISTERS\nFirmware should keep the WREN bit clear at all times except when starting erase or write operations. Once firmware  has  set  the  WR  bit,  the  WREN  bit  may  be cleared.  Clearing  the  WREN  bit  will  not  affect  the operation in progress.\nThe WRERR bit is set when a write operation is interrupted  by  a  Reset.  In  these  situations,  the  user  can check the WRERR bit and rewrite the location. It will be necessary  to  reload  the  data  and  address  registers (EEDATA and EEADR) as these registers have cleared as a result of the Reset.\nControl  bits,  RD  and  WR,  start  read  and  erase/write operations, respectively. These bits are set by firmware and  cleared  by  hardware  at  the  completion  of  the operation.\nThe  RD  bit  cannot  be  set  when  accessing  program memory (EEPGD = 1 ). Program memory is read using table read instructions. See Section 6.3 GLYPH<147>Reading the Flash Program MemoryGLYPH<148> regarding table reads.\nNote:\nInterrupt flag bit, EEIF in the PIR2 register, is set when the write is complete. It must be cleared in software.",
    "REGISTER 6-1: EECON1: DATA EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = GLYPH<151>. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7 bit 0, R/W-x = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-x = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/S-0 = bit 7 bit 0. bit 7 bit 0, R/S-0 = bit 7 bit 0",
    "REGISTER 6-1: EECON1: DATA EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Settable bit. Legend:, 2 = . Legend:, 3 = . R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory",
    "bit 6\nCFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 5 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4\nFREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write-only",
    "bit 3 WRERR: EEPROM Error Flag bit\n(1)\n1 = A write operation was prematurely terminated (any Reset during self-timed programming)\n0 = The write operation completed normally",
    "bit 2 WREN: Write Enable bit\n1 = Allows write cycles to Flash program/data EEPROM\n0 = Inhibits write cycles to Flash program/data EEPROM",
    "bit 1\nWR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle completed",
    "bit 0 RD: Read Control bit\n1 = Initiates a memory read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 .)\n0 = Read completed\nNote 1: When a WRERR occurs, the EEPGD and CFGS bits are not cleared. This allows tracing of the error condition.",
    "6.2.4 TABLE POINTER BOUNDARIES\nThe Table Latch (TABLAT) is an 8-bit register mapped into the SFR space. The Table Latch register is used to hold 8-bit data during data transfers between program memory and data RAM.",
    "6.2.3 TBLPTR GLYPH<150> T ABLE POINTER REGISTER\nThe Table Pointer (TBLPTR) register addresses a byte within the program memory. The TBLPTR is comprised of three SFR registers: Table Pointer Upper Byte, Table Pointer High Byte and Table Pointer Low Byte (TBLPTRU:TBLPTRH:TBLPTRL).  These  three  registers join  to  form a  22-bit  wide  pointer.  The  low-order 21 bits allow the device to address up to 2 Mbytes of program  memory  space.  Setting  the  22nd  bit  allows access to the Device ID, the user ID and the Configuration bits.\nTBLPTR is  used  in  reads,  writes  and  erases  of  the Flash program memory.\nWhen a TBLRD is  executed,  all  22  bits  of  the  Table Pointer determine which byte is read from program or configuration memory into TABLAT.",
    "6.2.3 TBLPTR GLYPH<150> T ABLE POINTER REGISTER\nWhen a TBLWT is executed, the three LSbs of the Table Pointer  (TBLPTR<2:0>)  determine  which  of  the  eight program memory holding registers is written to. When the timed write to program memory (long write) begins, the 19 MSbs of the TBLPTR (TBLPTR<21:3>) will determine which program memory block of 8 bytes is written to  (TBLPTR<2:0>  are  ignored).  For  more  detail,  see Section 6.5 GLYPH<147>Writing to Flash Program MemoryGLYPH<148> .\nThe Table Pointer, TBLPTR, is used by the TBLRD and TBLWT instructions. These instructions can update the TBLPTR in one of four ways based on the table operation. These operations are shown in Table 6-1. These operations  on  the  TBLPTR  only  affect  the  low-order 21 bits.",
    "6.2.3 TBLPTR GLYPH<150> T ABLE POINTER REGISTER\nWhen an erase of program memory is executed, the 16 MSbs of the Table Pointer (TBLPTR<21:6>) point to the  64-byte  block  that  will  be  erased.  The  Least Significant bits (TBLPTR<5:0>) are ignored.\nFigure 6-3 describes the relevant boundaries of TBLPTR based on Flash program memory operations.",
    "TABLE 6-1: TABLE POINTER OPERATIONS WITH TBLRD AND TBLWT INSTRUCTIONS\nTBLRD* TBLWT*, Operation on Table Pointer = TBLPTR is not modified. TBLRD*+ TBLWT*+, Operation on Table Pointer = TBLPTR is incremented after the read/write. TBLRD*- TBLWT*-, Operation on Table Pointer = TBLPTR is decremented after the read/write. TBLRD+* TBLWT+*, Operation on Table Pointer = TBLPTR is incremented before the read/write",
    "6.3 Reading the Flash Program Memory\nThe TBLRD instruction  is  used  to  retrieve  data  from program  memory  and  place  it  into  data  RAM.  Table reads from program memory are performed one byte at a time.\nThe internal program memory is typically organized by words. The Least Significant bit of the address selects between the high and low bytes of the word. Figure 6-4 shows  the  interface  between  the  internal  program memory and the TABLAT.\nTBLPTR points to a byte address in program space. Executing a TBLRD instruction places the byte pointed to into TABLAT. In addition, TBLPTR can be modified automatically for the next table read operation.",
    "EXAMPLE 6-1: READING A FLASH PROGRAM MEMORY WORD\n, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. , 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. , 3 = ; Load TBLPTR with the base ; address of the word. READ_WORD, 1 = . READ_WORD, 2 = . READ_WORD, 3 = . , 1 = TBLRD*+ MOVFW MOVWF. , 2 = . , 3 = ; read into TABLAT and increment TBLPTR. , 1 = . , 2 = TABLAT. , 3 = ; get data. , 1 = . , 2 = WORD_EVEN. , 3 = . , 1 = TBLRD*+. , 2 = . , 3 = ; read into TABLAT and increment TBLPTR. , 1 = MOVFW. , 2 = TABLAT. , 3 = ; get data. , 1 = MOVWF. , 2 = WORD_ODD. , 3 = ",
    "6.4 Erasing Flash Program Memory\nThe minimum erase block size is 32 words or 64 bytes under  firmware  control.  Only  through  the  use  of  an external  programmer,  or  through  ICSP  control,  can larger blocks of program memory be bulk erased. Word erase in Flash memory is not supported.\nWhen  initiating  an  erase  sequence  from  the  microcontroller itself, a block of 64 bytes of program memory is erased. The Most Significant 16 bits of the TBLPTR<21:6>  point  to the block being erased; TBLPTR<5:0> are ignored.\nThe EECON1 register commands the erase operation. The EEPGD bit must be set to point to the Flash program memory. The CFGS bit must be clear to access program  Flash  and  data  EEPROM  memory.  The WREN bit must be set to enable write operations. The FREE bit is set to select an erase operation. The WR bit is set as part of the required instruction sequence (as shown in Example 6-2) and starts the actual erase operation.  It  is  not  necessary  to  load  the  TABLAT register with any data as it is ignored.\nFor protection, the write initiate sequence  using EECON2 must be used.",
    "6.4.1 FLASH PROGRAM MEMORY ERASE SEQUENCE\nThe sequence of events for erasing a block of internal program memory location is:\n1. Load Table Pointer  with  address  of  row  being erased.\n2. Set the EECON1 register for the erase operation:\nGLYPH<149> set EEPGD bit to point to program memory;\nGLYPH<149> clear the CFGS bit to access program memory;\nGLYPH<149> set WREN bit to enable writes;\nGLYPH<149> set FREE bit to enable the erase.\n3. Disable interrupts.\n4. Write 55h to EECON2.\n5. Write AAh to EECON2.\n6. Set  the  WR  bit.  This  will  begin  the  row  erase cycle.\n7. The  CPU  will  stall  for  duration  of  the  erase (about 2 ms using internal timer).\n8. Execute a NOP .\n9. Re-enable interrupts.\nA long write is necessary for erasing the internal Flash. Instruction  execution  is  halted  while  in  a  long  write cycle. The long write will be terminated by the internal programming timer.",
    "EXAMPLE 6-2: ERASING A FLASH PROGRAM MEMORY ROW\nERASE_ROW, 1 = MOVLW MOVWF MOVLW MOVWF MOVLW MOVWF. ERASE_ROW, 2 = CODE_ADDR_UPPER TBLPTRU CODE_ADDR_HIGH TBLPTRH CODE_ADDR_LOW TBLPTRL. ERASE_ROW, 3 = ; load TBLPTR with the base ; address of the memory block. ERASE_ROW, 1 = BSF BSF. ERASE_ROW, 2 = EECON1,EEPGD EECON1,WREN. ERASE_ROW, 3 = ; point to Flash program memory ; enable write to memory. ERASE_ROW, 1 = BSF. ERASE_ROW, 2 = EECON1,FREE. ERASE_ROW, 3 = ; enable Row Erase operation. ERASE_ROW, 1 = BCF. ERASE_ROW, 2 = INTCON,GIE. ERASE_ROW, 3 = ; disable interrupts. ERASE_ROW, 1 = MOVLW. ERASE_ROW, 2 = 55h. ERASE_ROW, 3 = . , 1 = MOVWF. , 2 =",
    "EXAMPLE 6-2: ERASING A FLASH PROGRAM MEMORY ROW\nEECON2. , 3 = ; write 55H. , 1 = MOVLW. , 2 = AAh. , 3 = . Sequence, 1 = MOVWF. Sequence, 2 = EECON2. Sequence, 3 = ; write AAH. Sequence, 1 = BSF. Sequence, 2 = EECON2,WR. Sequence, 3 = ; start erase (CPU stall). Sequence, 1 = BSF. Sequence, 2 = INTCON,GIE. Sequence, 3 = ; re-enable interrupts. , 1 = . , 2 = . , 3 = ",
    "6.5 Writing to Flash Program Memory\nThe  programming  block  size  is  4  words  or  8  bytes. Word or byte programming is not supported.\nTable writes are used internally to load the holding registers needed to program the Flash memory. There are 8 holding registers used  by  the table writes for programming.\nSince the Table Latch (TABLAT) is only a single byte, the TBLWT instruction has to be executed 8 times for each  programming  operation.  All  of  the  table  write operations will essentially be short writes because only the holding registers are written. At the end of updating 8 registers, the EECON1 register must be written to, to start the programming operation with a long write.\nThe long write is necessary for programming the internal Flash. Instruction execution is halted while in a long write  cycle.  The  long  write  will  be  terminated  by  the internal programming timer.",
    "6.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\nThe sequence of events for programming an internal program memory location should be:",
    "6.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\n1. Read 64 bytes into RAM.\n2. Update data values in RAM as necessary.\n3. Load Table Pointer with address being erased.\n4. Do the row erase procedure (see Section 6.4.1 GLYPH<147>Flash Program Memory Erase SequenceGLYPH<148> ).\n5. Load  Table  Pointer  with  address  of  first  byte being written.\n6. Write the first 8 bytes into the holding registers with auto-increment.\n7. Set the EECON1 register for the write operation:\nGLYPH<149> set EEPGD bit to point to program memory;\nGLYPH<149> clear the CFGS bit to access program memory;\nGLYPH<149> set WREN bit to enable byte writes.\n8. Disable interrupts.\n9. Write 55h to EECON2.\n10. Write AAh to EECON2.\n11. Set the WR bit. This will begin the write cycle.\n12. The CPU will stall for duration of the write (about 2 ms using internal timer).\n13. Execute a NOP .\n14. Re-enable interrupts.\n15. Repeat  steps  6-14  seven  times,  to  write  64 bytes.",
    "6.5.1 FLASH PROGRAM MEMORY WRITE SEQUENCE\n16. Verify the memory (table read).\nThis procedure will require about 18 ms to update one row of 64 bytes of memory. An example of the required code is given in Example 6-3.",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\n, MOVLW = MOVWF. , D'64 = COUNTER. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = BUFFER_ADDR_HIGH. , ; = ;. , number of bytes in erase block = point to buffer. , MOVLW = MOVWF. , D'64 = FSR0H. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = BUFFER_ADDR_LOW. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = FSR0L. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = CODE_ADDR_UPPER. , ; = ;. , number of bytes in erase block = Load TBLPTR with the base. , MOVLW = MOVWF. , D'64 = TBLPTRU. , ; = ;. ,",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nnumber of bytes in erase block = address of the memory block. , MOVLW = MOVLW. , D'64 = CODE_ADDR_HIGH. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = TBLPTRH. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = CODE_ADDR_LOW. , ; = ;. , number of bytes in erase block = 6 LSB = 0. , MOVLW = MOVWF. , D'64 = TBLPTRL. , ; = . , number of bytes in erase block = . READ_BLOCK, MOVLW = . READ_BLOCK, D'64 = . READ_BLOCK, ; = . READ_BLOCK, number of bytes in erase block = . , MOVLW = TBLRD*+. , D'64 = . , ; = ;. , number of bytes in erase block = read into TABLAT, and inc. , MOVLW =",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nMOVFW. , D'64 = TABLAT. , ; = ;. , number of bytes in erase block = get data. , MOVLW = MOVWF. , D'64 = POSTINC0. , ; = . , number of bytes in erase block = ; store data and increment FSR0. , MOVLW = DECFSZ. , D'64 = COUNTER. , ; = ;. , number of bytes in erase block = done?. , MOVLW = GOTO. , D'64 = READ_BLOCK. , ; = ;. , number of bytes in erase block = repeat. MODIFY_WORD, MOVLW = . MODIFY_WORD, D'64 = . MODIFY_WORD, ; = . MODIFY_WORD, number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = DATA_ADDR_HIGH. , ; = ;. , number of bytes in erase block = point to buffer. , MOVLW = MOVWF. , D'64 = FSR0H. , ; = . , number of bytes",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nin erase block = . , MOVLW = MOVLW. , D'64 = DATA_ADDR_LOW. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = FSR0L. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = NEW_DATA_LOW. , ; = ;. , number of bytes in erase block = update buffer word and increment FSR0. , MOVLW = MOVWF. , D'64 = POSTINC0. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = NEW_DATA_HIGH. , ; = ;. , number of bytes in erase block = update buffer word. ERASE_BLOCK, MOVLW = MOVWF. ERASE_BLOCK, D'64 = . ERASE_BLOCK, ; = . ERASE_BLOCK, number of bytes in erase block = . , MOVLW =",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nMOVLW. , D'64 = CODE_ADDR_UPPER. , ; = ;. , number of bytes in erase block = load TBLPTR with the base. , MOVLW = MOVWF. , D'64 = TBLPTRU. , ; = ;. , number of bytes in erase block = address of the memory block. , MOVLW = MOVLW. , D'64 = CODE_ADDR_HIGH. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = TBLPTRH. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = CODE_ADDR_LOW. , ; = ;. , number of bytes in erase block = 6 LSB = 0. , MOVLW = MOVWF. , D'64 = TBLPTRL. , ; = . , number of bytes in erase block = . , MOVLW = BCF. , D'64 = EECON1,CFGS. ,",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\n; = ;. , number of bytes in erase block = point to PROG/EEPROM memory. , MOVLW = BSF. , D'64 = EECON1,EEPGD. , ; = ;. , number of bytes in erase block = point to Flash program memory. , MOVLW = BSF. , D'64 = EECON1,WREN. , ; = ;. , number of bytes in erase block = enable write to memory. , MOVLW = BSF. , D'64 = EECON1,FREE. , ; = ;. , number of bytes in erase block = enable Row Erase operation. , MOVLW = BCF. , D'64 = INTCON,GIE. , ; = ;. , number of bytes in erase block = disable interrupts. , MOVLW = MOVLW. , D'64 = 55h. , ; = ;. , number of bytes in erase block = Required sequence. , MOVLW = MOVWF. , D'64 = EECON2. , ; = ;. , number of bytes in erase block = write",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\n55H. , MOVLW = MOVLW. , D'64 = AAh. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = EECON2. , ; = ;. , number of bytes in erase block = write AAH. , MOVLW = BSF. , D'64 = EECON1,WR. , ; = ;. , number of bytes in erase block = start erase (CPU stall). , MOVLW = NOP. , D'64 = . , ; = . , number of bytes in erase block = . , MOVLW = BSF. , D'64 = INTCON,GIE. , ; = ;. , number of bytes in erase block = re-enable interrupts. WRITE_BUFFER_BACK, MOVLW = . WRITE_BUFFER_BACK, D'64 = . WRITE_BUFFER_BACK, ; = . WRITE_BUFFER_BACK, number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = 8. , ; =",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\n;. , number of bytes in erase block = number of write buffer groups of 8 bytes. , MOVLW = MOVWF. , D'64 = COUNTER_HI. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = BUFFER_ADDR_HIGH. , ; = ;. , number of bytes in erase block = point to buffer. , MOVLW = MOVWF. , D'64 = FSR0H. , ; = . , number of bytes in erase block = . , MOVLW = MOVLW. , D'64 = BUFFER_ADDR_LOW. , ; = . , number of bytes in erase block = . , MOVLW = MOVWF. , D'64 = FSR0L. , ; = . , number of bytes in erase block = . PROGRAM_LOOP, MOVLW = . PROGRAM_LOOP, D'64 = . PROGRAM_LOOP, ; = . PROGRAM_LOOP, number of bytes in erase block = . , MOVLW = MOVLW. ,",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nD'64 = 8. , ; = ;. , number of bytes in erase block = number of bytes in holding register. , MOVLW = MOVWF. , D'64 = COUNTER. , ; = . , number of bytes in erase block = . WRITE_WORD_TO_HREGS, MOVLW = . WRITE_WORD_TO_HREGS, D'64 = . WRITE_WORD_TO_HREGS, ; = . WRITE_WORD_TO_HREGS, number of bytes in erase block = . , MOVLW = MOVFW. , D'64 = POSTINC0. , ; = ;. , number of bytes in erase block = get low byte of buffer data and increment FSR0. , MOVLW = MOVWF. , D'64 = TABLAT. , ; = ;. , number of bytes in erase block = present data to table latch. , MOVLW = TBLWT+*. , D'64 = . , ; = ;. , number of bytes in erase block = short write to internal TBLWT holding register,",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY\nincrement TBLPTR. , MOVLW = DECFSZ GOTO. , D'64 = COUNTER WRITE_WORD_TO_HREGS. , ; = ;. , number of bytes in erase block = loop until buffers are full",
    "EXAMPLE 6-3: WRITING TO FLASH PROGRAM MEMORY (CONTINUED)\nPROGRAM_MEMORY, 1 = PROGRAM_MEMORY. , 1 = BCF. , 1 = MOVLW. , 1 = MOVWF. , 1 = MOVLW. , 1 = BSF. , 1 = . , 1 = BSF DECFSZ. , 1 = GOTO. , 1 = BCF",
    "6.5.2 WRITE VERIFY\nDepending  on  the  application,  good  programming practice may dictate that the value written to the memory should be verified against the original value. This should be used in applications where excessive writes can stress bits near the specification limit.",
    "6.5.3 UNEXPECTED TERMINATION OF WRITE OPERATION\nIf a write is terminated by an unplanned event, such as loss  of  power  or  an  unexpected  Reset,  the  memory location just programmed should be verified and reprogrammed  if  needed.  The  WRERR  bit  is  set  when  a write operation is interrupted by a MCLR Reset, or a WDT  Time-out  Reset,  during  normal  operation.  In these situations, users can check the WRERR bit and rewrite the location.",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nTBLPTRU, Bit 7 = GLYPH<151>. TBLPTRU, Bit 6 = GLYPH<151>. TBLPTRU, Bit 5 = bit 21. TBLPTRU, Bit 4 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 3 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 2 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 1 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Bit 0 = Program Memory Table Pointer Upper Byte (TBLPTR<20:16>). TBLPTRU, Value on: POR, BOR = --00 0000. TBLPTRU, Value on all other Resets = --00 0000. TBPLTRH, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 6 = Program Memory Table Pointer High Byte",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\n(TBLPTR<15:8>). TBPLTRH, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<15:8>). TBPLTRH, Value on: POR, BOR = 0000 0000. TBPLTRH, Value on all other Resets = 0000 0000. TBLPTRL, Bit 7 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 6 = Program Memory Table Pointer High Byte",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\n(TBLPTR<7:0>). TBLPTRL, Bit 5 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 4 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 3 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 2 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 1 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Bit 0 = Program Memory Table Pointer High Byte (TBLPTR<7:0>). TBLPTRL, Value on: POR, BOR = 0000 0000. TBLPTRL, Value on all other Resets = 0000 0000. TABLAT, Bit 7 = Program Memory Table Latch. TABLAT, Bit 6 = Program Memory Table Latch. TABLAT, Bit 5 = Program Memory Table Latch. TABLAT, Bit 4 = Program Memory Table Latch. TABLAT, Bit 3",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\n= Program Memory Table Latch. TABLAT, Bit 2 = Program Memory Table Latch. TABLAT, Bit 1 = Program Memory Table Latch. TABLAT, Bit 0 = Program Memory Table Latch. TABLAT, Value on: POR, BOR = 0000 0000. TABLAT, Value on all other Resets = 0000 0000. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INTE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INTF. INTCON, Bit 0 = RBIF. INTCON, Value on: POR, BOR = 0000 000x. INTCON, Value on all other Resets = 0000 000u. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register).",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nEECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Value on: POR, BOR = GLYPH<151> GLYPH<151>. EECON2, Value on all other Resets = GLYPH<151> GLYPH<151>. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = GLYPH<151>. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Value on: POR, BOR =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nxx-0 x000. EECON1, Value on all other Resets = uu-0 u000. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on: POR, BOR = 11-1 1111. IPR2, Value on all other Resets = ---1 1111. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 =",
    "TABLE 6-2: REGISTERS ASSOCIATED WITH PROGRAM FLASH MEMORY\nCCP2IF. PIR2, Value on: POR, BOR = 00-0 0000. PIR2, Value on all other Resets = ---0 0000. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on: POR, BOR = 00-0 0000. PIE2, Value on all other Resets = ---0 0000\nLegend:\nx = unknown, u = unchanged, r = reserved, - = unimplemented, read as GLYPH<145> 0 GLYPH<146> .\nShaded cells are not used during Flash/EEPROM access.",
    "6.6 Flash Program Operation During Code Protection\nSee Section 23.0  GLYPH<147>Special  Features  of  the  CPUGLYPH<148> ( Section 23.5 GLYPH<147>Program Verification and Code ProtectionGLYPH<148> ) for details on  code  protection  of  Flash program memory.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "7.0 DATA EEPROM MEMORY\nThe data EEPROM is readable and writable during normal  operation  over  the  entire  VDD  range.  The  data memory  is  not  directly  mapped  in  the  register  file space. Instead, it is  indirectly  addressed through  the Special Function Registers (SFR).\nThere  are  four  SFRs  used  to  read  and  write  the program and data EEPROM memory. These registers are:\nGLYPH<149> EECON1\nGLYPH<149> EECON2\nGLYPH<149> EEDATA\nGLYPH<149> EEADR\nThe EEPROM data memory allows byte read and write. When interfacing to the data memory block, EEDATA holds the 8-bit data for read/write and EEADR holds the address  of  the  EEPROM  location  being  accessed. These devices have 256 bytes of data EEPROM with an address range from 00h to FFh.",
    "7.0 DATA EEPROM MEMORY\nThe EEPROM data memory is rated for high erase/write cycle endurance. A byte write automatically erases the location and writes the new data (erase-before-write). The write time is controlled by an on-chip timer. The write time will  vary with voltage and temperature, as well as from chip to chip. Please refer to parameter D122 (Table 26-1 in Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> ) for exact limits.",
    "7.1 EEADR\nThe address register can address  256  bytes of data EEPROM.",
    "7.2 EECON1 and EECON2 Registers\nEECON1 is the control register for memory accesses.\nEECON2 is not a physical register. Reading EECON2 will read  all GLYPH<145> 0 GLYPH<146> s. The  EECON2  register  is  used exclusively in the memory write and erase sequences.\nControl bit EEPGD determines if the access will be to program or data EEPROM memory. When clear, operations will access the data EEPROM memory. When set, program memory is accessed.\nControl bit, CFGS, determines if the access will be to the Configuration registers or to program memory/data EEPROM memory. When set, subsequent operations access Configuration registers. When CFGS is clear, the  EEPGD bit  selects  either  Flash program  or  data EEPROM memory.\nThe WREN bit enables and disables erase and write operations. When set, erase and write operations are allowed. When clear, erase and write operations are disabled; the WR bit cannot be set while the WREN bit is  clear.  This  mechanism helps to prevent accidental writes  to  memory  due  to  errant  (unexpected)  code execution.",
    "7.2 EECON1 and EECON2 Registers\nFirmware should keep the WREN bit clear at all times except when starting erase or write operations. Once firmware  has  set  the  WR  bit,  the  WREN  bit  may  be cleared.  Clearing  the  WREN  bit  will  not  affect  the operation in progress.\nThe WRERR bit is set when a write operation is interrupted  by  a  Reset.  In  these  situations,  the  user  can check the WRERR bit and rewrite the location. It is necessary  to reload the data and  address  registers (EEDATA  and  EEADR),  as  these  registers have cleared as a result of the Reset.\nControl  bits,  RD  and  WR,  start  read  and  erase/write operations, respectively. These bits are set by firmware and  cleared  by  hardware  at  the  completion  of  the operation.\nThe  RD  bit  cannot  be  set  when  accessing  program memory (EEPGD = 1 ). Program memory is read using table read instructions. See Section 6.1 GLYPH<147>Table Reads and Table WritesGLYPH<148> regarding table reads.",
    "Note:\nInterrupt flag bit, EEIF in the PIR2 register, is set when write is complete. It must be cleared in software.",
    "EECON1: DATA EEPROM CONTROL REGISTER 1\nEEPGD, R/W-x = CFGS. EEPGD, U-0 = GLYPH<151>. EEPGD, R/W-0 = FREE. EEPGD, R/W-x = WRERR (1). EEPGD, R/W-0 = WREN. EEPGD, R/S-0 = WR. EEPGD, R/S-0 = RD. bit 7, R/W-x = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-x = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/S-0 = bit 7. bit 7, R/S-0 = bit 0",
    "EECON1: DATA EEPROM CONTROL REGISTER 1\nLegend:, 1 = S = Settable bit. Legend:, 2 = . Legend:, 3 = . R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 EEPGD: Flash Program or Data EEPROM Memory Select bit\n1 = Access Flash program memory\n0 = Access data EEPROM memory\nCFGS: Flash Program/Data EEPROM or Configuration Select bit\n1 = Access Configuration or Calibration registers\n0 = Access Flash program or data EEPROM memory",
    "bit 5 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4 FREE: Flash Row Erase Enable bit\n1 = Erase the program memory row addressed by TBLPTR on the next WR command (cleared by completion of erase operation)\n0 = Perform write-only\nWRERR:\nEEPROM Error Flag bit\n(1)\n1 = A write operation was prematurely terminated (MCLR or WDT Reset during self-timed erase or program operation)\n0 = The write operation completed normally",
    "bit 2 WREN: Erase/Write Enable bit\n1 = Allows write cycles\n0 = Inhibits write cycles",
    "bit 1 WR: Write Control bit\n1 = Initiates a data EEPROM erase/write cycle or a program memory erase cycle or write cycle (The operation is self-timed and the bit is cleared by hardware once write is complete. The WR bit can only be set (not cleared) in software.)\n0 = Write cycle is completed",
    "bit 0 RD: Read Control bit\n1 = Initiates a memory read (Read takes one cycle. RD is cleared in hardware. The RD bit can only be set (not cleared) in software. RD bit cannot be set when EEPGD = 1 .)\n0 = Read completed\nNote 1: When a WRERR occurs, the EEPGD or FREE bits are not cleared. This allows tracing of the error condition.",
    "bit 6\nbit 3",
    "7.3 Reading the Data EEPROM Memory\nTo read a data memory location, the user must write the address to the EEADR register, clear the EEPGD control  bit  (EECON1<7>)  and  then  set  control  bit,  RD (EECON1<0>). The data is available for the very next instruction  cycle;  therefore,  the  EEDATA register can be read by the next instruction. EEDATA will hold this value until another read operation or until it is written to by the user (during a write operation).",
    "7.4 Writing to the Data EEPROM Memory\nTo write an EEPROM data location, the address must first  be  written  to  the  EEADR  register  and  the  data written  to  the  EEDATA  register.  The  sequence  in Example 7-2 must be followed to initiate the write cycle.\nThe write will not begin if this sequence is not exactly followed (write 55h to EECON2, write AAh to EECON2, then  set  WR  bit)  for  each  byte.  It  is  strongly  recommended that interrupts be disabled during this code segment.\nAdditionally, the WREN bit in EECON1 must be set to enable  writes.  This  mechanism  prevents  accidental writes to data EEPROM due to unexpected code execution (i.e., runaway programs). The WREN bit should be  kept  clear  at  all  times  except  when  updating  the EEPROM. The WREN bit is not cleared by hardware.\nAfter  a  write  sequence  has  been  initiated,  EECON1, EEADR and EEDATA cannot be modified. The WR bit will be inhibited from being set unless the WREN bit is set. The WREN bit must be set on a previous instruction. Both WR and WREN cannot be set with the same instruction.",
    "7.4 Writing to the Data EEPROM Memory\nAt  the  completion  of  the  write  cycle,  the  WR  bit  is cleared in hardware and the EEPROM Interrupt Flag bit (EEIF) is set. The user may either enable this interrupt or poll this bit. EEIF must be cleared by software.",
    "7.5 Write Verify\nDepending  on  the  application,  good  programming practice may dictate that the value written to the memory should be verified against the original value. This should be used in applications where excessive writes can stress bits near the specification limit.",
    "7.6 Protection Against Spurious Write\nThere are conditions when the device may not want to write to the data EEPROM memory. To protect against spurious EEPROM writes, various mechanisms have been built-in. On power-up, the WREN bit is cleared. Also,  the  Power-up  Timer  (72 ms  duration)  prevents EEPROM write.\nThe write initiate sequence and the WREN bit together help  prevent  an  accidental  write  during  brown-out, power glitch, or software malfunction.",
    "EXAMPLE 7-1: DATA EEPROM READ\nMOVLW, 1 = DATA_EE_ADDR. MOVLW, 2 = ;. MOVWF, 1 = EEADR. MOVWF, 2 = ; Data Memory Address to read. BCF, 1 = EECON1, EEPGD. BCF, 2 = ; Point to DATA memory. BSF, 1 = EECON1, RD. BSF, 2 = ; EEPROM Read. MOVF, 1 = EEDATA, W. MOVF, 2 = ; W = EEDATA",
    "EXAMPLE 7-2: DATA EEPROM WRITE\n, 1 = MOVLW MOVWF MOVLW MOVWF BCF BSF. , 2 = DATA_EE_ADDR EEADR DATA_EE_DATA EEDATA EECON1, EEPGD EECON1, WREN INTCON, GIE. , 3 = ; ; Data Memory Address to write. Required Sequence, 1 = . Required Sequence, 2 = EECON2. Required Sequence, 3 = ; Write. Required Sequence, 1 = MOVLW MOVLW. Required Sequence, 2 = 55h AAh. Required Sequence, 3 = ; ; Point to ;. Required Sequence, 1 = . Required Sequence, 2 = . Required Sequence, 3 = ; Data Memory Value to write. Required Sequence, 1 = . Required Sequence, 2 = . Required Sequence, 3 = ; Enable writes. Required Sequence, 1 = BCF. Required Sequence, 2 = . Required Sequence, 3 = ; Disable Interrupts. Required Sequence, 1 = MOVWF. Required Sequence, 2 = . Required Sequence, 3 = 55h. , 1 = . , 2 = . , 3 = ;. , 1 = MOVWF.",
    "EXAMPLE 7-2: DATA EEPROM WRITE\n, 2 = EECON2. , 3 = ; Write AAh. , 1 = BSF. , 2 = EECON1, WR. , 3 = ; Set WR bit to begin write. , 1 = BSF. , 2 = INTCON, GIE. , 3 = ; Enable Interrupts. , 1 = SLEEP. , 2 = . , 3 = ; Wait for interrupt to signal write complete. , 1 = BCF. , 2 = EECON1, WREN. , 3 = ; Disable writes. , 1 = . , 2 = . , 3 = ",
    "7.8 Using the Data EEPROM\nData EEPROM memory has its own code-protect bits in Configuration  Words.  External  read  and  write  operations  are  disabled  if  either  of  these  mechanisms  are enabled.\nThe microcontroller itself can both read and write to the internal Data EEPROM regardless of the state of the code-protect Configuration bit. Refer to Section 23.0 GLYPH<147>Special Features of the CPUGLYPH<148> for additional information.\nThe data EEPROM is a high-endurance, byte addressable array that has been optimized for the storage of frequently  changing  information  (e.g.,  program  variables or other data that are updated often). Frequently changing values will typically be updated more often than  specification  D124  or  D124A.  If  this  is  not  the case,  an  array  refresh  must  be  performed.  For  this reason,  variables  that  change  infrequently  (such  as constants,  IDs,  calibration,  etc.)  should  be  stored  in Flash program memory.\nA  simple  data  EEPROM  refresh  routine  is  shown  in Example 7-3.",
    "7.8 Using the Data EEPROM\nNote:, 1 = If data EEPROM is only used to store constants and/or data that changes rarely, an array refresh is likely not required. See specification D124 or D124A.",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INTE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INTF. INTCON, Bit 0 = RBIF. INTCON, Value on: POR, BOR = 0000 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. EEADR, Bit 7 = EEPROM Address Register. EEADR, Bit 6 = EEPROM Address Register. EEADR, Bit 5 = EEPROM Address Register. EEADR, Bit 4 = EEPROM Address Register. EEADR, Bit 3 = EEPROM Address Register. EEADR, Bit 2 = EEPROM Address Register. EEADR, Bit 1 = EEPROM Address Register. EEADR, Bit 0 = EEPROM Address Register. EEADR, Value on: POR, BOR =",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\n0000 0000. EEADR, Value on all other Resets = 0000. EEADR, Value on all other Resets = 0000. EEDATA, Bit 7 = EEPROM Data Register. EEDATA, Bit 6 = EEPROM Data Register. EEDATA, Bit 5 = EEPROM Data Register. EEDATA, Bit 4 = EEPROM Data Register. EEDATA, Bit 3 = EEPROM Data Register. EEDATA, Bit 2 = EEPROM Data Register. EEDATA, Bit 1 = EEPROM Data Register. EEDATA, Bit 0 = EEPROM Data Register. EEDATA, Value on: POR, BOR = 0000 0000. EEDATA, Value on all other Resets = 0000. EEDATA, Value on all other Resets = 0000. EECON2, Bit 7 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 6 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 5 = EEPROM Control Register 2 (not a physical register).",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nEECON2, Bit 4 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 3 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 2 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 1 = EEPROM Control Register 2 (not a physical register). EECON2, Bit 0 = EEPROM Control Register 2 (not a physical register). EECON2, Value on: POR, BOR = GLYPH<151>. EECON2, Value on all other Resets = GLYPH<151>. EECON2, Value on all other Resets = GLYPH<151>. EECON1, Bit 7 = EEPGD. EECON1, Bit 6 = CFGS. EECON1, Bit 5 = GLYPH<151>. EECON1, Bit 4 = FREE. EECON1, Bit 3 = WRERR. EECON1, Bit 2 = WREN. EECON1, Bit 1 = WR. EECON1, Bit 0 = RD. EECON1, Value",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\non: POR, BOR = xx-0 x000. EECON1, Value on all other Resets = uu-0. EECON1, Value on all other Resets = u000. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on: POR, BOR = 11-1 1111. IPR2, Value on all other Resets = ---1. IPR2, Value on all other Resets = 1111. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF.",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nPIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on: POR, BOR = 00-0 0000. PIR2, Value on all other Resets = ---0. PIR2, Value on all other Resets = 0000. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on: POR, BOR = 00-0 0000. PIE2, Value on all other Resets = ---0. PIE2, Value on all other Resets = 0000\nLegend:",
    "TABLE 7-1: REGISTERS ASSOCIATED WITH DATA EEPROM MEMORY\nx = unknown, u = unchanged, r = reserved, -= unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used during Flash/EEPROM access.",
    "8.1 Introduction\nAn 8 x 8 hardware multiplier is included in the ALU of the PIC18F2X20/4X20 devices. By making the multiply a hardware operation, it completes in a single instruction  cycle.  This  is  an  unsigned  multiply  that  gives  a 16-bit result. The result is stored into the 16-bit product register pair (PRODH:PRODL). The multiplier does not affect any flags in the STATUS register.\nMaking the 8 x 8 multiplier execute in a single-cycle gives the following advantages:\nGLYPH<149> Higher computational throughput\nGLYPH<149> Reduces code size requirements for multiply algorithms\nThe performance increase allows the device to be used in  applications  previously  reserved  for  Digital  Signal Processors.\nTable 8-1 shows a performance comparison between enhanced  devices  using  the  single-cycle  hardware multiply and performing the same function without the hardware multiply.",
    "8.2 Operation\nExample 8-1  shows  the  sequence  to  do  an  8  x  8 unsigned  multiply.  Only  one  instruction  is  required when one argument of the multiply is already loaded in the WREG register.\nExample 8-2 shows the sequence to do an 8 x 8 signed multiply. To account for the sign bits of the arguments, each argumentGLYPH<146>s  Most  Significant  bit  (MSb)  is  tested and the appropriate subtractions are done.",
    "EXAMPLE 8-1: 8 x 8 UNSIGNED MULTIPLY ROUTINE\nMOVF\nARG1, W\n;\nMULWF\nARG2\n; ARG1 * ARG2 ->\n;   PRODH:PRODL",
    "EXAMPLE 8-2: 8 x 8 SIGNED MULTIPLY ROUTINE\nMOVF MULWF, 1 = ARG1, W ARG2. MOVF MULWF, 2 = ; ARG1 * ARG2 -> ; PRODH:PRODL. BTFSC, 1 = ARG2, SB PRODH, F. BTFSC, 2 = ; Test Sign Bit. SUBWF, 1 = . SUBWF, 2 = ; PRODH = PRODH. MOVF BTFSC SUBWF, 1 = ARG2, W ARG1, SB PRODH, F. MOVF BTFSC SUBWF, 2 = ; Test Sign Bit ; PRODH = PRODH ; - ARG2",
    "TABLE 8-1: PERFORMANCE COMPARISON\n8 x 8 unsigned, Multiply Method = Without hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 13. 8 x 8 unsigned, Cycles (Max). = 69. 8 x 8 unsigned, Time.@40 MHz = 6.9 \u03bc s. 8 x 8 unsigned, Time.@10 MHz = 27.6 \u03bc s. 8 x 8 unsigned, Time.@4MHz = 69 \u03bc s. 8 x 8 unsigned, Multiply Method = Hardware multiply. 8 x 8 unsigned, Program Memory (Words). = 1. 8 x 8 unsigned, Cycles (Max). = 1. 8 x 8 unsigned, Time.@40 MHz = 100 ns. 8 x 8 unsigned, Time.@10 MHz = 400 ns. 8 x 8 unsigned, Time.@4MHz = 1 \u03bc s. 8 x 8 signed, Multiply Method = Without hardware multiply. 8 x 8 signed, Program Memory (Words). = 33. 8 x 8 signed, Cycles (Max). = 91. 8 x 8 signed, Time.@40 MHz = 9.1 \u03bc s. 8 x 8 signed, Time.@10 MHz = 36.4",
    "TABLE 8-1: PERFORMANCE COMPARISON\n\u03bc s. 8 x 8 signed, Time.@4MHz = 91 \u03bc s. 8 x 8 signed, Multiply Method = Hardware multiply. 8 x 8 signed, Program Memory (Words). = 6. 8 x 8 signed, Cycles (Max). = 6. 8 x 8 signed, Time.@40 MHz = 600 ns. 8 x 8 signed, Time.@10 MHz = 2.4 \u03bc s. 8 x 8 signed, Time.@4MHz = 6 \u03bc s. 16 x 16 unsigned, Multiply Method = Without hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 21. 16 x 16 unsigned, Cycles (Max). = 242. 16 x 16 unsigned, Time.@40 MHz = 24.2 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 96.8 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 242 \u03bc s. 16 x 16 unsigned, Multiply Method = Hardware multiply. 16 x 16 unsigned, Program Memory (Words). = 28. 16 x 16 unsigned, Cycles (Max). = 28. 16 x 16 unsigned, Time.@40",
    "TABLE 8-1: PERFORMANCE COMPARISON\nMHz = 2.8 \u03bc s. 16 x 16 unsigned, Time.@10 MHz = 11.2 \u03bc s. 16 x 16 unsigned, Time.@4MHz = 28 \u03bc s. 16 x 16 signed, Multiply Method = Without hardware multiply. 16 x 16 signed, Program Memory (Words). = 52. 16 x 16 signed, Cycles (Max). = 254. 16 x 16 signed, Time.@40 MHz = 25.4 \u03bc s. 16 x 16 signed, Time.@10 MHz = 102.6 \u03bc s. 16 x 16 signed, Time.@4MHz = 254 \u03bc s. 16 x 16 signed, Multiply Method = Hardware multiply. 16 x 16 signed, Program Memory (Words). = 35. 16 x 16 signed, Cycles (Max). = 40. 16 x 16 signed, Time.@40 MHz = 4.0 \u03bc s. 16 x 16 signed, Time.@10 MHz = 16.0 \u03bc s. 16 x 16 signed, Time.@4MHz = 40 \u03bc s",
    "PIC18F2220/2320/4220/4320\nExample 8-3  shows  the  sequence  to  do  a  16  x  16 unsigned  multiply.  Equation 8-1  shows  the  algorithm that is used. The 32-bit result is stored in four registers, RES3:RES0.\nEQUATION 8-2:\n16 x 16 SIGNED MULTIPLICATION ALGORITHM",
    "EQUATION 8-1:\n16 x 16 UNSIGNED MULTIPLICATION ALGORITHM\nRES3:RES0\n=\nARG1H:ARG1L   ARG2H:ARG2L \u2022\n=\n(ARG1H   ARG2H   2 16 ) + \u2022 \u2022\n(ARG1H   ARG2L   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2H   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2L) \u2022",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2L -> PRODH:PRODL. MOVFF, 1 = PRODH,. MOVFF, 2 = RES1. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES0. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2H -> PRODH:PRODL.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVFF, 1 = PRODH,. MOVFF, 2 = RES3. MOVFF, 3 = ;. MOVFF, 4 = . MOVFF, 1 = PRODL,. MOVFF, 2 = RES2. MOVFF, 3 = ;. MOVFF, 4 = . MOVF, 1 = ARG1L,. MOVF, 2 = W. MOVF, 3 = . MOVF, 4 = . MULWF, 1 = ARG2H. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1L * ARG2H -> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,. ADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nMOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . MOVF, 1 = ARG1H,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . MULWF, 1 = ARG2L. MULWF, 2 = . MULWF, 3 = ; ;. MULWF, 4 = ARG1H * ARG2L -> PRODH:PRODL. MOVF, 1 = PRODL,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = . ADDWF, 1 = RES1,.",
    "EXAMPLE 8-3: 16 x 16 UNSIGNED MULTIPLY ROUTINE\nADDWF, 2 = F. ADDWF, 3 = ;. ADDWF, 4 = Add cross. MOVF, 1 = PRODH,. MOVF, 2 = W. MOVF, 3 = ;. MOVF, 4 = products. ADDWFC, 1 = RES2,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = . CLRF, 1 = WREG. CLRF, 2 = . CLRF, 3 = ;. CLRF, 4 = . ADDWFC, 1 = RES3,. ADDWFC, 2 = F. ADDWFC, 3 = ;. ADDWFC, 4 = \nExample 8-4  shows  the  sequence  to  do  a  16  x  16 signed  multiply.  Equation 8-2  shows  the  algorithm used.  The  32-bit  result  is  stored  in  four  registers, RES3:RES0. To account for the sign bits of the arguments, each argument pairsGLYPH<146> Most Significant bit (MSb) is tested and the appropriate subtractions are done.",
    "RES3:RES0\n= ARG1H:ARG1L   ARG2H:ARG2L \u2022\n=\n(ARG1H   ARG2H   2 16 ) +\n\u2022\n\u2022\n(ARG1H   ARG2L   2 8 ) + \u2022 \u2022\n(ARG1L   ARG2H \u2020 2 8 ) +\n\u2022\n(ARG1L   ARG2L) + \u2022\n(-1 \u2022 ARG2H<7>   ARG1H:ARG1L   2 16 ) + \u2022 \u2022\n(-1 \u2022 ARG1H<7>   ARG2H:ARG2L   2 16 ) \u2022 \u2022",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\nMULWF, ARG1L, = ARG2L. MULWF, W = . MULWF,  = ;. MULWF,  = ARG1L * ARG2L -> PRODH:PRODL. MOVFF, ARG1L, = PRODH,. MOVFF, W = RES1. MOVFF,  = ;. MOVFF,  = . MOVFF, ARG1L, = PRODL,. MOVFF, W = RES0. MOVFF,  = ;. MOVFF,  = . MOVF MULWF, ARG1L, = ARG1H, ARG2H. MOVF MULWF, W = W. MOVF MULWF,  = ;. MOVF MULWF,  = ARG1H * ARG2H -> PRODH:PRODL. MOVFF, ARG1L, = PRODH,. MOVFF, W = RES3. MOVFF,  = ; ;. MOVFF,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . MOVFF, ARG1L, = PRODL,. MOVFF, W = RES2. MOVFF,  = . MOVFF,  = . MOVF MULWF MOVF, ARG1L, = ARG1L, ARG2H. MOVF MULWF MOVF, W = W. MOVF MULWF MOVF,  = ; ;. MOVF MULWF MOVF,  = . ADDWF, ARG1L, = PRODL, RES1,. ADDWF, W = F. ADDWF,  = ;. ADDWF,  = ARG1L * ARG2H -> PRODH:PRODL. MOVF, ARG1L, = PRODH,. MOVF, W = W. MOVF,  = ;. MOVF,  = products. ADDWFC, ARG1L, = WREG RES3, F. ADDWFC, W = W F. ADDWFC,  = . ADDWFC,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= Add cross. CLRF, ARG1L, = RES2,. CLRF, W = . CLRF,  = ;. CLRF,  = . ADDWFC, ARG1L, = . ADDWFC, W = . ADDWFC,  = ;. ADDWFC,  = . , ARG1L, = . , W = . ,  = ;. ,  = . , ARG1L, = . , W = . ,  = ;. ,  = . MOVF MULWF, ARG1L, = ARG1H, ARG2L. MOVF MULWF, W = W. MOVF MULWF,  = ; ; ;. MOVF MULWF,  = ARG1H * ARG2L -> PRODH:PRODL. ADDWF, ARG1L, = RES1,. ADDWF, W = F. ADDWF,  = . ADDWF,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= Add cross. MOVF CLRF, ARG1L, = PRODH,. MOVF CLRF, W = W. MOVF CLRF,  = ; ; ;. MOVF CLRF,  = products. ADDWFC, ARG1L, = RES2, WREG. ADDWFC, W = F. ADDWFC,  = ;. ADDWFC,  = . ADDWFC ;, ARG1L, = RES3,. ADDWFC ;, W = F. ADDWFC ;,  = ;. ADDWFC ;,  = ARG2H:ARG2L neg?. BTFSS BRA, ARG1L, = ARG2H, SIGN_ARG1. BTFSS BRA, W = 7. BTFSS BRA,  = ; ;. BTFSS BRA,  = no, check ARG1. MOVF, ARG1L, = ARG1L,. MOVF, W = W. MOVF,  = ;. MOVF,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= . SUBWF, ARG1L, = RES2. SUBWF, W = . SUBWF,  = . SUBWF,  = . MOVF ;, ARG1L, = ARG1H,. MOVF ;, W = . MOVF ;,  = . MOVF ;,  = ARG1H:ARG1L neg? no, done. , ARG1L, = . , W = . ,  = ;. ,  = . SUBWFB, ARG1L, = . SUBWFB, W = W. SUBWFB,  = ;. SUBWFB,  = . SIGN_ARG1 BTFSS, ARG1L, = RES3 ARG1H,. SIGN_ARG1 BTFSS, W = 7. SIGN_ARG1 BTFSS,  = ; ;. SIGN_ARG1 BTFSS,  = . SUBWF, ARG1L, = RES2. SUBWF, W = . SUBWF,  = . SUBWF,  = . , ARG1L, = . , W = . ,",
    "EXAMPLE 8-4: 16 x 16 SIGNED MULTIPLY ROUTINE\n= ;. ,  = . , ARG1L, = ARG2H,. , W = W. ,  = . ,  = . MOVF, ARG1L, = . MOVF, W = . MOVF,  = . MOVF,  = . SUBWFB, ARG1L, = RES3. SUBWFB, W = . SUBWFB,  = ;. SUBWFB,  = . ;, ARG1L, = . ;, W = . ;,  = . ;,  = . CONT_CODE, ARG1L, = . CONT_CODE, W = . CONT_CODE,  = . CONT_CODE,  = . :, ARG1L, = . :, W = . :,  = . :,  = ",
    "9.0 INTERRUPTS\nThe PIC18F2320/4320 devices have multiple interrupt sources  and  an  interrupt  priority  feature  that  allows each  interrupt  source  to  be  assigned  a  high-priority level or a low-priority level. The high-priority interrupt vector is at 000008h and the low-priority interrupt vector  is  at  000018h.  High-priority  interrupt  events  will interrupt  any  low-priority  interrupts  that  may  be  in progress.\nWhen  the  IPEN  bit  is  cleared  (default  state),  the interrupt priority feature is disabled and interrupts are compatible with PIC fi  mid-range devices. In Compatibility  mode,  the  interrupt  priority  bits  for  each  source have  no  effect.  INTCON<6>  is  the  PEIE  bit  which enables/disables all peripheral interrupt sources. INTCON<7> is the GIE bit which enables/disables all interrupt  sources.  All  interrupts  branch  to  address 000008h in Compatibility mode.\nThere  are  ten  registers  which  are  used  to  control interrupt operation. These registers are:",
    "9.0 INTERRUPTS\nGLYPH<149> RCON\nGLYPH<149> INTCON\nGLYPH<149> INTCON2\nGLYPH<149> INTCON3\nGLYPH<149> PIR1, PIR2\nGLYPH<149> PIE1, PIE2\nGLYPH<149> IPR1, IPR2\nIt is  recommended  that  the  Microchip  header  files supplied with MPLAB fi  IDE be used for the symbolic bit names in these registers. This allows the assembler/ compiler to automatically take care of the placement of these bits within the specified register.\nIn  general,  each  interrupt  source  has  three  bits  to control its operation. The functions of these bits are:\nGLYPH<149> Flag bit to indicate that an interrupt event occurred\nGLYPH<149> Enable bit that allows program execution to branch to the interrupt vector address when the flag bit is set\nGLYPH<149> Priority bit to select high priority or low priority (most interrupt sources have priority bits)",
    "9.0 INTERRUPTS\nThe interrupt priority feature is enabled by setting the IPEN bit (RCON<7>). When  interrupt priority is enabled,  there  are  two  bits  which  enable  interrupts globally. Setting the GIEH bit (INTCON<7>) enables all interrupts  that  have  the  priority  bit  set  (high  priority). Setting  the  GIEL  bit  (INTCON<6>)  enables  all  interrupts  that  have  the  priority  bit  cleared  (low  priority). When  the  interrupt  flag,  enable  bit  and  appropriate global interrupt enable bit are set, the interrupt will vector immediately  to  address  000008h  or  000018h, depending on the  priority  bit  setting.  Individual  interrupts  can  be  disabled  through  their  corresponding enable bits.\nWhen an interrupt is responded to, the global interrupt enable bit is cleared to disable further interrupts. If the IPEN bit is cleared, this is the GIE bit. If interrupt priority levels are used, this will be either the GIEH or GIEL bit. High-priority  interrupt  sources  can  interrupt  a  lowpriority interrupt. Low-priority interrupts are not processed while high-priority interrupts are in progress.",
    "9.0 INTERRUPTS\nThe return address is pushed onto the stack and the PC  is loaded with the interrupt vector address (000008h or 000018h). Once in the Interrupt Service Routine,  the  source(s)  of  the  interrupt  can  be  determined by polling the  interrupt  flag  bits.  The  interrupt flag bits must be cleared in software before re-enabling interrupts to avoid recursive interrupts.\nThe GLYPH<147>return  from  interruptGLYPH<148>  instruction, RETFIE ,  exits the interrupt routine and sets the GIE bit (GIEH or GIEL if priority levels are used) which re-enables interrupts.\nFor external interrupt events, such as the INTx pins or the PORTB input change interrupt, the interrupt latency will be  three  to  four  instruction  cycles.  The  exact latency is the same for one or two-cycle instructions. Individual  interrupt  flag  bits  are  set  regardless  of  the status of their corresponding enable bit or the GIE bit.\nNote:\nDo not use the MOVFF instruction to modify any of the interrupt control registers while any interrupt  is  enabled.  Doing  so  may cause erratic microcontroller behavior.",
    "PIC18F2220/2320/4220/4320\nFIGURE 9-1:\nINTERRUPT LOGIC",
    "9.1 INTCON Registers\nNote:\nThe  INTCON  registers  are  readable  and  writable registers which contain various enable, priority and flag bits.\nInterrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the global enable  bit.  User  software  should  ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 9-1: INTCON: INTERRUPT CONTROL REGISTER\nGIE/GIEH, R/W-0 = PEIE/GIEL. GIE/GIEH, R/W-0 = TMR0IE. GIE/GIEH, R/W-0 = INT0IE. GIE/GIEH, R/W-0 = RBIE. GIE/GIEH, R/W-0 = TMR0IF. GIE/GIEH, R/W-0 = INT0IF. GIE/GIEH, R/W-x = RBIF (1). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-x = bit 0",
    "REGISTER 9-1: INTCON: INTERRUPT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 GIE/GIEH: Global Interrupt Enable bit\nWhen IPEN = 0 :\n1 = Enables all unmasked interrupts\n0 = Disables all interrupts",
    "When IPEN = 1 :\n1 = Enables all high-priority interrupts\n0 = Disables all high-priority interrupts",
    "When IPEN = 0 :\n1 = Enables all unmasked peripheral interrupts\n0 = Disables all peripheral interrupts",
    "When IPEN = 1 :\n1 = Enables all low-priority peripheral interrupts\n0 = Disables all low-priority peripheral interrupts",
    "bit 5 TMR0IE: TMR0 Overflow Interrupt Enable bit\n1 = Enables the TMR0 overflow interrupt\n0 = Disables the TMR0 overflow interrupt",
    "bit 4 INT0IE: INT0 External Interrupt Enable bit\n1 = Enables the INT0 external interrupt\n0 = Disables the INT0 external interrupt",
    "bit 3 RBIE: RB Port Change Interrupt Enable bit\n1 = Enables the RB port change interrupt\n0 = Disables the RB port change interrupt",
    "bit 2\nTMR0IF: TMR0 Overflow Interrupt Flag bit\n1 = TMR0 register has overflowed (must be cleared in software)\n0 = TMR0 register did not overflow",
    "bit 1 INT0IF:\nINT0 External Interrupt Flag bit\n1 = The INT0 external interrupt occurred (must be cleared in software)\n0 = The INT0 external interrupt did not occur\nbit 0 RBIF: RB Port Change Interrupt Flag bit (1)\n1 = At least one of the RB7:RB4 pins changed state (must be cleared in software)\n0 = None of the RB7:RB4 pins have changed state\n- Note 1: A mismatch condition will continue to set this bit. Reading PORTB will end the mismatch condition and allow the bit to be cleared.",
    "REGISTER 9-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nRBPU, R/W-1 = INTEDG0. RBPU, R/W-1 = INTEDG1. RBPU, R/W-1 = INTEDG2. RBPU, U-0 = GLYPH<151>. RBPU, R/W-1 = TMR0IP. RBPU, U-0 = GLYPH<151>. RBPU, R/W-1 = RBIP. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-1 = bit 7 bit 0",
    "REGISTER 9-2: INTCON2: INTERRUPT CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nRBPU: PORTB Pull-up Enable bit\n1 = All PORTB pull-ups are disabled\n0 = PORTB pull-ups are enabled by individual port latch values\nbit 6\nINTEDG0: External Interrupt 0 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 5\nINTEDG1: External Interrupt 1 Edge Select bit",
    "REGISTER 9-2: INTCON2: INTERRUPT CONTROL REGISTER 2\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 4 INTEDG2: External Interrupt 2 Edge Select bit\n1 = Interrupt on rising edge\n0 = Interrupt on falling edge\nbit 3 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 2\nTMR0IP: TMR0 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>",
    "bit 0\nRBIP: RB Port Change Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote:\nInterrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the global enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "REGISTER 9-3: INTCON3: INTERRUPT CONTROL REGISTER 3\nINT2IP, R/W-1 = INT1IP. INT2IP, U-0 = GLYPH<151>. INT2IP, R/W-0 = INT2IE. INT2IP, R/W-0 = INT1IE. INT2IP, U-0 = GLYPH<151>. INT2IP, R/W-0 = INT2IF. INT2IP, R/W-0 = INT1IF. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as GLYPH<145>0GLYPH<146>\n-n = Value at POR\nGLYPH<145>1GLYPH<146> = Bit is set\nGLYPH<145> 0GLYPH<146> = Bit is cleared\nx = Bit is unknown",
    "bit 7\nINT2IP: INT2 External Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 6\nINT1IP: INT1 External Interrupt Priority bit\n1 = High priority\n0 = Low priority",
    "bit 5\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4\nINT2IE: INT2 External Interrupt Enable bit\n1 = Enables the INT2 external interrupt\n0 = Disables the INT2 external interrupt\nbit 3\nINT1IE: INT1 External Interrupt Enable bit\n1 = Enables the INT1 external interrupt\n0 = Disables the INT1 external interrupt",
    "bit 2 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 1\nINT2IF: INT2 External Interrupt Flag bit\n1 = The INT2 external interrupt occurred (must be cleared in software)\n0 = The INT2 external interrupt did not occur",
    "bit 0\nINT1IF: INT1 External Interrupt Flag bit\n1 = The INT1 external interrupt occurred (must be cleared in software)\n0 = The INT1 external interrupt did not occur\nNote:\nInterrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the global enable bit. User software should ensure the appropriate interrupt flag bits are clear prior to enabling an interrupt. This feature allows for software polling.",
    "9.2 PIR Registers\nThe PIR registers contain the individual flag bits for the peripheral interrupts. Due to the number of peripheral interrupt  sources,  there  are  two  Peripheral  Interrupt Flag registers (PIR1, PIR2).\nNote 1: Interrupt flag bits are set when an interrupt condition occurs regardless of the state of its corresponding enable bit or the global enable bit, GIE (INTCON<7>).\n2: User software should ensure the appropriate interrupt flag bits are cleared prior to enabling  an  interrupt  and  after  servicing that interrupt.",
    "REGISTER 9-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nPSPIF (1), R/W-0 = ADIF. PSPIF (1), R-0 = RCIF. PSPIF (1), R-0 = TXIF. PSPIF (1), R/W-0 = SSPIF. PSPIF (1), R/W-0 = CCP1IF. PSPIF (1), R/W-0 = TMR2IF. PSPIF (1), R/W-0 = TMR1IF. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\n(1)\nbit 7 PSPIF: Parallel Slave Port Read/Write Interrupt Flag bit\n1 = A read or a write operation has taken place (must be cleared in software)\n0 = No read or write has occurred\nbit 6 ADIF: A/D Converter Interrupt Flag bit",
    "REGISTER 9-4: PIR1: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 1\n1 = An A/D conversion completed (must be cleared in software)\n0 = The A/D conversion is not complete\nbit 5\nRCIF: USART Receive Interrupt Flag bit\n1 = The USART receive buffer, RCREG, is full (cleared when RCREG is read)\n0 = The USART receive buffer is empty\nbit 4 TXIF:\nUSART Transmit Interrupt Flag bit\n1 = The USART transmit buffer, TXREG, is empty (cleared when TXREG is written)\n0 = The USART transmit buffer is full\nbit 3\nSSPIF: Master Synchronous Serial Port Interrupt Flag bit\n1 = The transmission/reception is complete (must be cleared in software)\n0 = Waiting to transmit/receive",
    "bit 2 CCP1IF:\nCCP1 Interrupt Flag bit\nCapture mode:\n1 = A TMR1 register capture occurred (must be cleared in software)\n0 = No TMR1 register capture occurred",
    "Compare mode:\n1 = A TMR1 register compare match occurred (must be cleared in software)\n0 = No TMR1 register compare match occurred\nPWM mode:\nUnused in this mode.\nbit 1 TMR2IF: TMR2 to PR2 Match Interrupt Flag bit\n1 = TMR2 to PR2 match occurred (must be cleared in software)\n0 = No TMR2 to PR2 match occurred",
    "bit 0\nTMR1IF: TMR1 Overflow Interrupt Flag bit\n1 = TMR1 register overflowed (must be cleared in software)\n0 = TMR1 register did not overflow\nNote 1: This bit is reserved on PIC18F2X20 devices; always maintain this bit clear.",
    "REGISTER 9-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nOSCFIF, R/W-0 = CMIF. OSCFIF, U-0 = GLYPH<151>. OSCFIF, R/W-0 = EEIF. OSCFIF, R/W-0 = BCLIF. OSCFIF, R/W-0 = LVDIF. OSCFIF, R/W-0 = TMR3IF. OSCFIF, R/W-0 = CCP2IF. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-5: PIR2: PERIPHERAL INTERRUPT REQUEST (FLAG) REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 OSCFIF: Oscillator Fail Interrupt Flag bit\n1 = System oscillator failed, clock input has changed to INTOSC (must be cleared in software)\n0 =\nSystem clock operating\nbit 6\nCMIF: Comparator Interrupt Flag bit\n1 = Comparator input has changed (must be cleared in software)\n0 = Comparator input has not changed",
    "bit 5 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4\nEEIF: Data EEPROM/Flash Write Operation Interrupt Flag bit\n1 = The write operation is complete (must be cleared in software)\n0 = The write operation is not complete or has not been started",
    "bit 3 BCLIF: Bus Collision Interrupt Flag bit\n1 = A bus collision has occurred (must be cleared in software)\n0 = No bus collision occurred",
    "bit 2\nLVDIF: Low-Voltage Detect Interrupt Flag bit\n1 = A low-voltage condition occurred (must be cleared in software)\n0 = The device voltage is above the Low-Voltage Detect trip point",
    "bit 1 TMR3IF: TMR3 Overflow Interrupt Flag bit\n1 = TMR3 register overflowed (must be cleared in software)\n0 = TMR3 register did not overflow",
    "Capture mode:\n1 = A TMR1 or TMR3 register capture occurred (must be cleared in software)\n0 = No TMR1 or TMR3 register capture occurred",
    "Compare mode:\n1 = A TMR1 or TMR3 register compare match occurred (must be cleared in software)\n0 = No TMR1 or TMR3 register compare match occurred",
    "PWM mode:\nUnused in this mode.",
    "9.3 PIE Registers\nThe PIE registers contain the individual enable bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Enable registers (PIE1, PIE2). When IPEN = 0 , the PEIE bit must be set to enable any of these peripheral interrupts.",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nR/W-0, 1 = R/W-0. R/W-0, 2 = R/W-0. R/W-0, 3 = R/W-0. R/W-0, 4 = R/W-0. R/W-0, 5 = R/W-0. R/W-0, 6 = R/W-0. R/W-0, 7 = R/W-0. PSPIE (1), 1 = ADIE. PSPIE (1), 2 = RCIE. PSPIE (1), 3 = TXIE. PSPIE (1), 4 = SSPIE. PSPIE (1), 5 = CCP1IE. PSPIE (1), 6 = TMR2IE. PSPIE (1), 7 = TMR1IE. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPSPIE: Parallel Slave Port Read/Write Interrupt Enable bit (1)\n1 = Enables the PSP read/write interrupt\n0 = Disables the PSP read/write interrupt\nbit 6\nADIE: A/D Converter Interrupt Enable bit\n1 = Enables the A/D interrupt\n0 = Disables the A/D interrupt\nbit 5",
    "REGISTER 9-6: PIE1: PERIPHERAL INTERRUPT ENABLE REGISTER 1\nRCIE: USART Receive Interrupt Enable bit\n1 = Enables the USART receive interrupt\n0 = Disables the USART receive interrupt\nbit 4\nTXIE: USART Transmit Interrupt Enable bit\n1 = Enables the USART transmit interrupt\n0 = Disables the USART transmit interrupt\nbit 3\nSSPIE: Master Synchronous Serial Port Interrupt Enable bit\n1 = Enables the MSSP interrupt\n0 = Disables the MSSP interrupt\nbit 2\nCCP1IE: CCP1 Interrupt Enable bit\n1 = Enables the CCP1 interrupt\n0 = Disables the CCP1 interrupt\nbit 1\nTMR2IE: TMR2 to PR2 Match Interrupt Enable bit\n1 = Enables the TMR2 to PR2 match interrupt\n0 = Disables the TMR2 to PR2 match interrupt\nbit 0\nTMR1IE: TMR1 Overflow Interrupt Enable bit\n1 = Enables the TMR1 overflow interrupt\n0 = Disables the TMR1 overflow interrupt\nNote 1: This bit is reserved on PIC18F2X20 devices; always maintain this bit clear.",
    "REGISTER 9-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nOSCFIE, R/W-0 = CMIE. OSCFIE, U-0 = GLYPH<151>. OSCFIE, R/W-0 = EEIE. OSCFIE, R/W-0 = BCLIE. OSCFIE, R/W-0 = LVDIE. OSCFIE, R/W-0 = TMR3IE. OSCFIE, R/W-0 = CCP2IE. bit 7, R/W-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "REGISTER 9-7: PIE2: PERIPHERAL INTERRUPT ENABLE REGISTER 2\nbit 7, 1 = OSCFIE: Oscillator Fail Interrupt Enable bit. bit 6, 1 = CMIE: Comparator Interrupt Enable bit 1 = Enabled = Disabled. bit 5, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. , 1 = 1 = Enabled 0 = Disabled BCLIE: Bus Collision Interrupt Enable bit. bit 3, 1 = 1 = Enabled 0 = Disabled. bit 2, 1 = LVDIE: Low-Voltage Detect Interrupt Enable 1 = Enabled = Disabled. bit 1, 1 = TMR3IE: TMR3 Overflow Interrupt 1 = Enabled 0 = Disabled CCP2IE: CCP2 Interrupt. bit 0, 1 = Enable bit 1 = Enabled\n0 = Disabled",
    "9.4 IPR Registers\nThe IPR registers contain the individual priority bits for the peripheral interrupts. Due to the number of peripheral interrupt sources, there are two Peripheral Interrupt Priority registers (IPR1, IPR2). Using the priority bits requires that the Interrupt Priority Enable (IPEN) bit be set.",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nPSPIP (1), R/W-1 = ADIP. PSPIP (1), R/W-1 = RCIP. PSPIP (1), R/W-1 = TXIP. PSPIP (1), R/W-1 = SSPIP. PSPIP (1), R/W-1 = CCP1IP. PSPIP (1), R/W-1 = TMR2IP. PSPIP (1), R/W-1 = TMR1IP. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPSPIP: Parallel Slave Port Read/Write Interrupt Priority bit (1)\n1 = High priority\n0 = Low priority\nbit 6\nADIP: A/D Converter Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 5\nRCIP: USART Receive Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 4",
    "REGISTER 9-8: IPR1: PERIPHERAL INTERRUPT PRIORITY REGISTER 1\nTXIP: USART Transmit Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 3\nSSPIP: Master Synchronous Serial Port Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 2\nCCP1IP: CCP1 Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 1\nTMR2IP: TMR2 to PR2 Match Interrupt Priority bit\n1 = High priority\n0 = Low priority\nbit 0\nTMR1IP: TMR1 Overflow Interrupt Priority bit\n1 = High priority\n0 = Low priority\nNote 1: This bit is reserved on PIC18F2X20 devices; always maintain this bit set.",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nOSCFIP, R/W-1 = CMIP. OSCFIP, U-0 = GLYPH<151>. OSCFIP, R/W-1 = EEIP. OSCFIP, R/W-1 = BCLIP. OSCFIP, R/W-1 = LVDIP. OSCFIP, R/W-1 = TMR3IP. OSCFIP, R/W-1 = CCP2IP. bit 7, R/W-1 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "REGISTER 9-9: IPR2: PERIPHERAL INTERRUPT PRIORITY REGISTER 2\nbit 7, 1 = OSCFIP: Oscillator Fail Interrupt Priority bit. bit 6, 1 = CMIP: Comparator Interrupt Priority bit 1 = High priority 0 = Low priority. bit 5, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. 3, 1 = 0 = Low priority BCLIP: Bus Collision Interrupt Priority bit 1 = High priority. bit, 1 = 0 = Low priority. bit 2, 1 = LVDIP: Low-Voltage Detect Interrupt Priority bit 1 = High priority 0 = Low priority. , 1 = CCP2IP: CCP2 Interrupt Priority bit 1 = High priority. bit 0, 1 = 0 = Low priority",
    "9.5 RCON Register\nThe RCON register contains bits used to determine the cause  of  the  last  Reset  or  wake-up  from  powermanaged  mode.  RCON  also  contains  the  bit  that enables interrupt priorities (IPEN).",
    "REGISTER 9-10: RCON: RESET CONTROL REGISTER\nIPEN, U-0 = GLYPH<151>. IPEN, U-0 = GLYPH<151>. IPEN, R/W-1 = RI. IPEN, R-1 = TO. IPEN, R-1 = PD. IPEN, R/W-0 = POR. IPEN, R/W-0 = BOR. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 9-10: RCON: RESET CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 IPEN: Interrupt Priority Enable bit\n1 = Enable priority levels on interrupts\n0 = Disable priority levels on interrupts (PIC16CXXX Compatibility mode)",
    "bit 6-5 Unimplemented: Read as GLYPH<145> 0\nGLYPH<146>\nbit 4\nRI: RESET Instruction Flag bit\n1 = The RESET instruction was not executed (set by firmware only)\n0 = The RESET instruction was executed causing a device Reset (must be set in software after a\nBrown-out Reset occurs)",
    "bit 3 TO: Watchdog Time-out Flag bit\n1 = Set by power-up, CLRWDT instruction or SLEEP instruction\n0 = A WDT time-out occurred",
    "bit 2 PD:\nPower-Down Detection Flag bit\n1 = Set by power-up or by the CLRWDT instruction\n0 = Cleared by execution of the SLEEP instruction",
    "bit 1 POR:\nPower-on Reset Status bit\n1 = A Power-on Reset has not occurred (set by firmware only)\n0 = A Power-on Reset occurred (must be set in software after a Power-on Reset occurs)",
    "bit 0 BOR: Brown-out Reset Status bit\n1 = A Brown-out Reset has not occurred (set by firmware only)\n0 = A Brown-out Reset occurred (must be set in software after a Brown-out Reset occurs)",
    "9.6 INTx Pin Interrupts\nExternal  interrupts  on  the  RB0/INT0,  RB1/INT1  and RB2/INT2 pins are edge triggered: either rising if the corresponding INTEDGx bit is set in the INTCON2 register, or falling if the INTEDGx bit is clear. When a valid edge appears on the RBx/INTx pin, the corresponding flag bit, INTxIF, is set. This interrupt can be disabled by clearing the corresponding enable bit, INTxIE. Flag bit, INTxIF,  must  be  cleared  in  software  in  the  Interrupt Service  Routine  before  re-enabling  the  interrupt.  All external interrupts (INT0, INT1 and INT2) can wake-up the  processor  from  the  power-managed  modes  if  bit INTxIE  was  set  prior  to  going  into  power-managed modes. If the global interrupt enable bit GIE is set, the processor will branch to the interrupt vector following wake-up.",
    "9.6 INTx Pin Interrupts\nInterrupt priority for INT1 and INT2 is determined by the  value  contained  in  the  Interrupt  Priority  bits, INT1IP  (INTCON3<6>)  and  INT2IP  (INTCON3<7>). There  is  no  priority  bit  associated  with  INT0.  It  is always a high-priority interrupt source.",
    "9.7 TMR0 Interrupt\nIn 8-bit mode  (which  is  the  default),  an  overflow (FFh \u2192 00h)  in  the  TMR0  register  will  set  flag  bit TMR0IF. In 16-bit mode, an overflow (FFFFh \u2192 0000h) in the TMR0H:TMR0L registers will set flag bit TMR0IF. The interrupt can be enabled/disabled by setting/clearing enable bit, TMR0IE (INTCON<5>). Interrupt priority for Timer0 is determined by the value contained in the interrupt priority bit, TMR0IP  (INTCON2<2>).  See Section 11.0 GLYPH<147>Timer0  ModuleGLYPH<148> for  further  details  on the Timer0 module.",
    "SAVING STATUS, WREG AND BSR REGISTERS IN RAM\nMOVWF MOVFF MOVFF ;, 1 = W_TEMP. MOVWF MOVFF MOVFF ;, 2 = ; W_TEMP is in virtual bank. , 1 = STATUS, STATUS_TEMP. , 2 = ; STATUS_TEMP located anywhere. , 1 = BSR, BSR_TEMP. , 2 = ; BSR_TMEP located anywhere. ; USER ;, 1 = ISR CODE. ; USER ;, 2 = . MOVFF, 1 = BSR_TEMP, BSR. MOVFF, 2 = ; Restore BSR. MOVF, 1 = W_TEMP, W. MOVF, 2 = ; Restore WREG. MOVFF, 1 = STATUS_TEMP, STATUS. MOVFF, 2 = ; Restore STATUS",
    "9.8 PORTB Interrupt-on-Change\nAn input change on PORTB<7:4> sets flag bit, RBIF (INTCON<0>). The interrupt can be enabled/disabled by  setting/clearing  enable  bit,  RBIE  (INTCON<3>). Interrupt  priority  for  PORTB  interrupt-on-change  is determined  by  the  value  contained  in  the  interrupt priority bit, RBIP (INTCON2<0>).",
    "9.9 Context Saving During Interrupts\nDuring interrupts, the return PC address is saved on the stack. Additionally, the WREG, STATUS and BSR registers are saved on the Fast Return Stack. If a fast return  from  interrupt  is  not  used  (See Section 5.3 GLYPH<147>Fast Register StackGLYPH<148> ), the user may need to save the WREG,  STATUS  and  BSR  registers  on  entry  to  the Interrupt  Service  Routine.  Depending  on  the  userGLYPH<146>s application, other registers may also need to be saved. Example 9-1 saves and restores the WREG, STATUS and BSR registers during an Interrupt Service Routine.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "10.0 I/O PORTS\nDepending on the device selected and features enabled, there are up to five ports available. Some pins of the I/O ports are multiplexed with an alternate function from the peripheral features on the device. In general, when a peripheral is enabled, that pin may not be used as a general purpose I/O pin.\nEach port has three registers for its operation. These registers are:\nGLYPH<149> TRIS register (Data Direction register)\nGLYPH<149> PORT register (reads the levels on the pins of the device)\nGLYPH<149> LAT register (Data Latch)\nThe Data Latch (LAT register) is useful for read-modifywrite  operations  on  the  value  that  the  I/O  pins  are driving.\nA  simplified  model  of  a  generic  I/O  port  without  the interfaces to other peripherals is shown in Figure 10-1.",
    "FIGURE 10-1: GENERIC I/O PORT OPERATION\nNote 1: I/O pins have diode protection to VDD and VSS.",
    "10.1 PORTA, TRISA and LATA Registers\nPORTA is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISA.  Setting  a TRISA bit (= 1 ) will make the corresponding PORTA pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISA bit (= 0 ) will make the corresponding PORTA pin an output (i.e., put the contents of the output latch on the selected pin).\nReading the  PORTA register reads the  status of  the pins, whereas writing to it, will write to the port latch.\nThe Data Latch register (LATA) is also memory mapped. Read-modify-write operations on the LATA register read and write the latched output value for PORTA.",
    "10.1 PORTA, TRISA and LATA Registers\nThe  RA4  pin  is  multiplexed  with  the  Timer0  module clock  input  and  one  of  the  comparator  outputs  to become  the  RA4/T0CKI/C1OUT  pin.  Pins  RA6  and RA7 are multiplexed with the main oscillator pins; they are enabled as oscillator or I/O pins by the selection of the main oscillator in Configuration Register 1H (see Section 23.1 GLYPH<147>Configuration BitsGLYPH<148> for details). When they are not used as port pins, RA6 and RA7 and their associated TRIS and LAT bits are read as GLYPH<145> 0 GLYPH<146>.",
    "10.1 PORTA, TRISA and LATA Registers\nThe  other  PORTA  pins  are  multiplexed  with  analog inputs, the analog VREF+ and VREF- inputs and the comparator voltage reference output. The operation of pins, RA3:RA0 and RA5, as A/D converter inputs is selected by clearing/setting the control bits in the ADCON1 register (A/D Control Register 1). Pins RA0 through RA5 may also be used as comparator inputs or outputs by setting the appropriate bits in the CMCON register.\nNote:, 1 = On a Power-on Reset, RA5 and RA3:RA0 are configured as analog inputs and read as GLYPH<145> 0 GLYPH<146>. RA4 is configured as a digital input.\nThe RA4/T0CKI/C1OUT pin is a Schmitt Trigger input and an open-drain output. All other PORTA pins have TTL input levels and full CMOS output drivers.\nThe TRISA register controls the direction of the RA pins even when they are being used as analog inputs. The user  must  ensure  the  bits  in  the  TRISA  register  are maintained set when using them as analog inputs.",
    "EXAMPLE 10-1: INITIALIZING PORTA\nCLRF, 1 = PORTA. CLRF, 2 = ; ; ;. CLRF, 3 = Initialize PORTA by clearing output data latches. CLRF, 1 = LATA. CLRF, 2 = ; ;. CLRF, 3 = Alternate method to clear output data latches. MOVLW MOVWF MOVLW, 1 = 0x0F ADCON1 0xCF. MOVLW MOVWF MOVLW, 2 = ; ; ; ;. MOVLW MOVWF MOVLW, 3 = Set all A/D pins as digital I/O pins Value used to initialize data direction. MOVWF, 1 = TRISA. MOVWF, 2 = ; ;. MOVWF, 3 = Set RA<3:0> as inputs RA<5:4> as outputs",
    "BLOCK DIAGRAM OF RA3:RA0 AND RA5 PINS\nFIGURE 10-4:",
    "TABLE 10-1: PORTA FUNCTIONS\nRA0/AN0, Bit# = bit 0. RA0/AN0, Buffer = TTL. RA0/AN0, Function = Input/output or analog input.. RA1/AN1, Bit# = bit 1. RA1/AN1, Buffer = TTL. RA1/AN1, Function = Input/output or analog input.. RA2/AN2/VREF-/CVREF, Bit# = bit 2. RA2/AN2/VREF-/CVREF, Buffer = TTL. RA2/AN2/VREF-/CVREF, Function = Input/output, analog input, VREF- or comparator VREF output.. RA3/AN3/VREF+, Bit# = bit 3. RA3/AN3/VREF+, Buffer = TTL. RA3/AN3/VREF+, Function = Input/output, analog input or VREF+.. RA4/T0CKI/C1OUT, Bit# = bit 4. RA4/T0CKI/C1OUT, Buffer = ST. RA4/T0CKI/C1OUT, Function",
    "TABLE 10-1: PORTA FUNCTIONS\n= Input/output, external clock input for Timer0 or Comparator 1 output. Output is open-drain type.. RA5/AN4/SS/LVDIN/C2OUT, Bit# = bit 5. RA5/AN4/SS/LVDIN/C2OUT, Buffer = TTL. RA5/AN4/SS/LVDIN/C2OUT, Function = Input/output, analog input, slave select input for Master Synchronous Serial Port, Low-Voltage Detect input or Comparator 2 output.. OSC2/CLKO/RA6, Bit# = bit 6. OSC2/CLKO/RA6, Buffer = TTL. OSC2/CLKO/RA6, Function = OSC2, clock output or I/O pin.. OSC1/CLKI/RA7, Bit# = bit 7. OSC1/CLKI/RA7, Buffer = TTL. OSC1/CLKI/RA7, Function = OSC1, clock input or I/O pin.\nLegend: TTL = TTL input, ST = Schmitt Trigger input",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR, BOR = xx0x. PORTA, Value on POR, BOR = 0000. PORTA, Value on all other Resets = uu0u 0000. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = LATA Data Latch Register. LATA, Bit 4 = LATA Data Latch Register. LATA, Bit 3 = LATA Data Latch Register. LATA, Bit 2 = LATA Data Latch Register. LATA, Bit 1 = LATA Data Latch Register. LATA, Bit 0 = LATA Data Latch Register. LATA, Value on POR, BOR = xxxx. LATA, Value on POR, BOR =",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nxxxx. LATA, Value on all other Resets = uuuu uuuu. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Value on POR, BOR = 1111. TRISA, Value on POR, BOR = 1111. TRISA, Value on all other Resets = 1111 1111. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 =",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nPCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00. ADCON1, Value on POR, BOR = 0000 --00. ADCON1, Value on all other Resets = 0000. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Value on POR, BOR = 0000. CMCON, Value on POR, BOR = 0111 0000. CMCON, Value on all other Resets = 0111. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = GLYPH<151>. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2.",
    "TABLE 10-2: SUMMARY OF REGISTERS ASSOCIATED WITH PORTA\nCVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR, BOR = 000-. CVRCON, Value on POR, BOR = 0000. CVRCON, Value on all other Resets = 000- 0000\nLegend:\nx = unknown, u = unchanged, - = unimplemented locations read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by PORTA.\nNote 1: RA7:RA6 and their associated latch and data direction bits are enabled as I/O pins based on oscillator configuration; otherwise, they are read as GLYPH<145> 0 GLYPH<146>.",
    "10.2 PORTB, TRISB and LATB Registers\nPORTB is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISB.  Setting  a TRISB bit (= 1 )  will  make the corresponding PORTB pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISB bit (= 0 ) will make the corresponding PORTB pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATB)  is also memory mapped.  Read-modify-write  operations  on  the  LATB register  read  and  write  the  latched  output  value  for PORTB.",
    "10.2 PORTB, TRISB and LATB Registers\nCLRF, 10-2: = PORTB. CLRF,  = ; ;. CLRF, INITIALIZING PORTB = Initialize PORTB by clearing output data latches. CLRF, 10-2: = LATB. CLRF,  = ; ; ;. CLRF, INITIALIZING PORTB = Alternate method to clear output data latches. MOVLW MOVWF MOVLW, 10-2: = 0x07 ADCON1 0xCF. MOVLW MOVWF MOVLW,  = ; ; ;. MOVLW MOVWF MOVLW, INITIALIZING PORTB = Set RB<4:0> as digital I/O pins. MOVWF, 10-2: = TRISB. MOVWF,  = ; ; ;. MOVWF, INITIALIZING PORTB = Set RB<3:0> as inputs RB<5:4> as outputs RB<7:6> as inputs",
    "10.2 PORTB, TRISB and LATB Registers\nEach of the PORTB pins has a weak internal pull-up. A single control bit can turn on all the pull-ups. This is performed  by  clearing  bit  RBPU  (INTCON2<7>).  The weak pull-up is automatically turned off when the port pin  is configured  as  an  output.  The  pull-ups  are disabled on a Power-on Reset.\nNote:, 1 = On a Power-on Reset, RB4:RB0 are con- figured as analog inputs by default and read as GLYPH<145> 0 GLYPH<146> ; RB7:RB5 are configured as digital inputs.. , 1 = By programming the Configuration bit, PBADEN (CONFIG3H<1>), RB4:RB0 will alternatively be configured as digital inputs on POR.",
    "10.2 PORTB, TRISB and LATB Registers\nFour of the PORTB pins (RB7:RB4) have an interrupton-change feature. Only pins configured as inputs can cause  this  interrupt  to  occur  (i.e.,  any  RB7:RB4  pin configured as an output is excluded from the interrupton-change comparison). The input pins (of RB7:RB4) are  compared  with  the  old  value  latched  on  the  last read of PORTB. The GLYPH<147>mismatchGLYPH<148> outputs of RB7:RB4 are ORGLYPH<146>ed  together  to  generate the RB  Port  Change Interrupt with Flag bit, RBIF (INTCON<0>).\nThis  interrupt  can  wake  the  device  from  Sleep.  The user,  in  the  Interrupt  Service  Routine,  can  clear  the interrupt in the following manner:\na) Any  read  or  write  of  PORTB  (except  with  the MOVFF  (ANY),  PORTB instruction).  This  will end the mismatch condition.\nb) Clear flag bit RBIF.\nA mismatch condition will continue to set flag bit RBIF. Reading PORTB will end the mismatch condition and allow flag bit RBIF to be cleared.",
    "10.2 PORTB, TRISB and LATB Registers\nThe interrupt-on-change  feature  is  recommended  for wake-up on key depression operation and operations where PORTB is only used for the interrupt-on-change feature. Polling of PORTB is not recommended while using the interrupt-on-change feature.\nRB3  can  be  configured  by  the  Configuration  bit, CCP2MX, as the alternate peripheral pin for the CCP2 module (CCP2MX = 0 ).",
    "FIGURE 10-6: BLOCK DIAGRAM OF RB7:RB5 PINS\nNote 1: I/O pins have diode protection to VDD and VSS.\n- 2: To enable weak pull-ups, set the appropriate TRIS bit(s) and clear the RBPU bit (INTCON2<7>).",
    "BLOCK DIAGRAM OF RB4 PIN\nNote 1: I/O pins have diode protection to VDD and VSS.\nNote 1: I/O pins have diode protection to VDD and VSS.\n2: To enable weak pull-ups, set the appropriate TRIS bit(s) and clear the RBPU bit (INTCON2<7>).\n2: To enable weak pull-ups, set the appropriate TRIS bit(s) and clear the RBPU bit (INTCON2<7>).",
    "TABLE 10-3: PORTB FUNCTIONS\nRB0/AN12/INT0, Bit# = bit 0. RB0/AN12/INT0, Buffer = TTL (1) /ST (2). RB0/AN12/INT0, Function = Input/output pin, analog input or external interrupt input 0. Internal software programmable weak pull-up.. RB1/AN10/INT1, Bit# = bit 1. RB1/AN10/INT1, Buffer = TTL (1) /ST (2). RB1/AN10/INT1, Function = Input/output pin, analog input or external interrupt input 1. Internal software programmable weak pull-up.. RB2/AN8/INT2, Bit# = bit 2. RB2/AN8/INT2, Buffer = TTL (1) /ST (2). RB2/AN8/INT2, Function = Input/output pin, analog input or external interrupt input 2. Internal software programmable weak pull-up.. RB3/AN9/CCP2, Bit# = bit 3. RB3/AN9/CCP2, Buffer = TTL (1) /ST",
    "TABLE 10-3: PORTB FUNCTIONS\n(3). RB3/AN9/CCP2, Function = Input/output pin or analog input. Capture 2 input/Compare 2 output/ PWM output when CCP2MX Configuration bit is set (4) . Internal software programmable weak pull-up.. RB4/AN11/KBI0, Bit# = bit 4. RB4/AN11/KBI0, Buffer = TTL. RB4/AN11/KBI0, Function = Input/output pin (with interrupt-on-change) or analog input. Internal software programmable weak pull-up.. RB5/KBI1/PGM, Bit# = bit 5. RB5/KBI1/PGM, Buffer = TTL/ST (5). RB5/KBI1/PGM, Function = Input/output pin (with interrupt-on-change). Internal software programmable weak pull-up. Low-voltage ICSPGLYPH<153> enable pin.. RB6/KBI2/PGC, Bit# = bit 6. RB6/KBI2/PGC, Buffer = TTL/ST (5).",
    "TABLE 10-3: PORTB FUNCTIONS\nRB6/KBI2/PGC, Function = Input/output pin (with interrupt-on-change). Internal software programmable weak pull-up. Serial programming clock.. RB7/KBI3/PGD, Bit# = bit 7. RB7/KBI3/PGD, Buffer = TTL/ST (5). RB7/KBI3/PGD, Function = Input/output pin (with interrupt-on-change). Internal software programmable weak pull-up. Serial programming data.\nLegend:\nTTL = TTL input, ST = Schmitt Trigger input\nNote 1: This buffer is a TTL input when configured as digital I/O.\n2: This buffer is a Schmitt Trigger input when configured as the external interrupt.\n3: This buffer is a Schmitt Trigger input when configured as the CCP2 input.\n4: A device Configuration bit selects which I/O pin the CCP2 pin is multiplexed on.\n5: This buffer is a Schmitt Trigger input when used in Serial Programming mode.",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nPORTB, Bit 7 = RB7. PORTB, Bit 6 = RB6. PORTB, Bit 5 = RB5. PORTB, Bit 4 = RB4. PORTB, Bit 3 = RB3. PORTB, Bit 2 = RB2. PORTB, Bit 1 = RB1. PORTB, Bit 0 = RB0. PORTB, Value on POR, BOR = xxxx. PORTB, Value on POR, BOR = xxxx. PORTB, Value on all other Resets = uuuu. PORTB, Value on all other Resets = uuuu. LATB, Bit 7 = LATB Data Latch Register. LATB, Bit 6 = LATB Data Latch Register. LATB, Bit 5 = LATB Data Latch Register. LATB, Bit 4 = LATB Data Latch Register. LATB, Bit 3 = LATB Data Latch Register. LATB, Bit 2 = LATB Data Latch Register. LATB, Bit 1 = LATB Data Latch Register. LATB, Bit 0 = LATB Data Latch Register. LATB,",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nValue on POR, BOR = xxxx. LATB, Value on POR, BOR = xxxx. LATB, Value on all other Resets = uuuu. LATB, Value on all other Resets = uuuu. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB Data Direction Register. TRISB, Value on POR, BOR = 1111. TRISB, Value on POR, BOR = 1111. TRISB, Value on all other Resets = 1111. TRISB, Value on all other Resets = 1111. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\n4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. INTCON2, Bit 7 = RBPU. INTCON2, Bit 6 = INTEDG0. INTCON2, Bit 5 = INTEDG1. INTCON2, Bit 4 = INTEDG2. INTCON2, Bit 3 = GLYPH<151>. INTCON2, Bit 2 = TMR0IP. INTCON2, Bit 1 = GLYPH<151>. INTCON2, Bit 0 = RBIP. INTCON2, Value on POR, BOR = 1111. INTCON2, Value on POR, BOR = -1-1. INTCON2, Value on all other Resets = 1111. INTCON2, Value",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\non all other Resets = -1-1. INTCON3, Bit 7 = INT2IP. INTCON3, Bit 6 = INT1IP. INTCON3, Bit 5 = GLYPH<151>. INTCON3, Bit 4 = INT2IE. INTCON3, Bit 3 = INT1IE. INTCON3, Bit 2 = GLYPH<151>. INTCON3, Bit 1 = INT2IF. INTCON3, Bit 0 = INT1IF. INTCON3, Value on POR, BOR = 11-0. INTCON3, Value on POR, BOR = 0-00. INTCON3, Value on all other Resets = 11-0. INTCON3, Value on all other Resets = 0-00. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2.",
    "TABLE 10-4: SUMMARY OF REGISTERS ASSOCIATED WITH PORTB\nADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00. ADCON1, Value on POR, BOR = 0000. ADCON1, Value on all other Resets = --00. ADCON1, Value on all other Resets = 0000\nLegend: x = unknown, u = unchanged, GLYPH<151> = unimplemented locations read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by PORTB.",
    "10.3 PORTC, TRISC and LATC Registers\nPORTC is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISC.  Setting a TRISC bit (= 1 )  will  make the corresponding PORTC pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISC bit (= 0 ) will make the corresponding PORTC pin an output (i.e., put the contents of the output latch on the selected pin).\nThe  Data  Latch  register (LATC)  is  also memory mapped.  Read-modify-write  operations  on  the  LATC register  read  and  write  the  latched  output  value  for PORTC.\nPORTC is multiplexed with several peripheral functions (Table 10-5). The pins have Schmitt Trigger input buffers. RC1 is normally configured by Configuration bit, CCP2MX (CONFIG3H<0>), as the default peripheral pin of the CCP2 module (default/erased state, CCP2MX = 1 ).\nNote:\nOn  a  Power-on  Reset,  these  pins  are configured as digital inputs.",
    "10.3 PORTC, TRISC and LATC Registers\nThe  contents  of  the  TRISC  register  are  affected  by peripheral  overrides.  Reading  TRISC  always  returns the current contents even though a peripheral device may be overriding one or more of the pins.",
    "EXAMPLE 10-3: INITIALIZING PORTC\nCLRF, 1 = PORTC. CLRF, 2 = ; Initialize PORTC by ; clearing output ; data latches. CLRF, 1 = LATC. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0xCF. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RC<3:0> as inputs ; RC<5:4> as outputs ; RC<7:6> as inputs\nWhen  enabling  peripheral  functions,  care  should  be taken in defining TRIS bits for each PORTC pin. Some peripherals override the TRIS bit to make a pin an output, while other peripherals override the TRIS bit to make a pin an input. The user should refer to the corresponding peripheral section for the correct TRIS bit settings.",
    "TABLE 10-5: PORTC FUNCTIONS\nRC0/T1OSO/T1CKI, Bit# = bit 0. RC0/T1OSO/T1CKI, Buffer Type = ST. RC0/T1OSO/T1CKI, Function = Input/output port pin or Timer1 oscillator output/Timer1 clock input.. RC1/T1OSI/CCP2, Bit# = bit 1. RC1/T1OSI/CCP2, Buffer Type = ST. RC1/T1OSI/CCP2, Function = Input/output port pin, Timer1 oscillator input or Capture 2 input/ Compare 2 output/PWM output when CCP2MX Configuration bit is disabled.. RC2/CCP1/P1A (1), Bit# = bit 2. RC2/CCP1/P1A (1), Buffer Type = ST. RC2/CCP1/P1A (1), Function = Input/output port pin, Capture 1 input/Compare 1 output/PWM1 output or Enhanced PWM output A (1) .. RC3/SCK/SCL, Bit# = bit",
    "TABLE 10-5: PORTC FUNCTIONS\n3. RC3/SCK/SCL, Buffer Type = ST. RC3/SCK/SCL, Function = RC3 can also be the synchronous serial clock for both SPI and I 2 CGLYPH<153> modes.. RC4/SDI/SDA, Bit# = bit 4. RC4/SDI/SDA, Buffer Type = ST. RC4/SDI/SDA, Function = RC4 can also be the SPI data in (SPI mode) or data I/O (I 2 C mode).. RC5/SDO, Bit# = bit 5. RC5/SDO, Buffer Type = ST. RC5/SDO, Function = Input/output port pin or Master Synchronous Serial Port data output.. RC6/TX/CK, Bit# = bit 6. RC6/TX/CK, Buffer Type = ST. RC6/TX/CK, Function = Input/output port pin, addressable USART asynchronous transmit or addressable USART synchronous clock.. RC7/RX/DT, Bit# = bit 7.",
    "TABLE 10-5: PORTC FUNCTIONS\nRC7/RX/DT, Buffer Type = ST. RC7/RX/DT, Function = Input/output port pin, addressable USART asynchronous receive or addressable USART synchronous data.\nLegend: ST = Schmitt Trigger input\nNote 1: Enhanced PWM output is available only on PIC18F4X20 devices.",
    "TABLE 10-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nPORTC, Bit 7 = RC7. PORTC, Bit 6 = RC6. PORTC, Bit 5 = RC5. PORTC, Bit 4 = RC4. PORTC, Bit 3 = RC3. PORTC, Bit 2 = RC2. PORTC, Bit 1 = RC1. PORTC, Bit 0 = RC0. PORTC, Value on POR, BOR = xxxx. PORTC, Value on POR, BOR = xxxx. PORTC, Value on all other Resets = uuuu. PORTC, Value on all other Resets = uuuu. LATC, Bit 7 = LATC Data Latch Register. LATC, Bit 6 = LATC Data Latch Register. LATC, Bit 5 = LATC Data Latch Register. LATC, Bit 4 = LATC Data Latch Register. LATC, Bit 3 = LATC Data Latch Register. LATC, Bit 2 = LATC Data Latch Register. LATC, Bit 1 = LATC Data Latch Register. LATC, Bit 0 = LATC Data Latch Register. LATC, Value on POR, BOR = xxxx. LATC, Value on POR,",
    "TABLE 10-6: SUMMARY OF REGISTERS ASSOCIATED WITH PORTC\nBOR = xxxx. LATC, Value on all other Resets = uuuu. LATC, Value on all other Resets = uuuu. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111. TRISC, Value on POR, BOR = 1111. TRISC, Value on all other Resets = 1111. TRISC, Value on all other Resets = 1111\nLegend: x = unknown, u = unchanged",
    "10.4 PORTD, TRISD and LATD Registers\nNote:, 1 = PORTD is only available on PIC18F4X20 devices.\nPORTD is an 8-bit wide, bidirectional port. The corresponding Data Direction register is  TRISD.  Setting a TRISD bit (= 1 )  will  make the corresponding PORTD pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISD bit (= 0 ) will make the corresponding PORTD pin an output (i.e., put the contents of the output latch on the selected pin).\nThe Data Latch register (LATD) is also memory mapped. Read-modify-write operations on the LATD register read and write the latched output value for PORTD.\nAll pins on PORTD are implemented with Schmitt Trigger input buffers. Each pin is individually configurable as an input or output.",
    "10.4 PORTD, TRISD and LATD Registers\nThree of the PORTD pins are multiplexed with outputs P1B, P1C and P1D of the Enhanced CCP module. The operation  of  these  additional  PWM  output  pins  is covered in greater detail in Section 16.0 GLYPH<147>Enhanced Capture/Compare/PWM (ECCP) ModuleGLYPH<148> .\nPORTD can also be configured as an 8-bit wide microprocessor port (Parallel Slave Port) by setting control bit,  PSPMODE  (TRISE<4>).  In  this  mode,  the  input buffers  are  TTL.  See Section 10.6  GLYPH<147>Parallel  Slave PortGLYPH<148> for  additional  information on the Parallel Slave Port (PSP).\nNote:, 1 = When the enhanced PWM mode is used with either dual or quad outputs, the PSP functions of PORTD are automatically disabled.",
    "EXAMPLE 10-4: INITIALIZING PORTD\nCLRF, 1 = PORTD. CLRF, 2 = ; Initialize PORTD by ; clearing output ; data latches. CLRF, 1 = LATD. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW, 1 = 0xCF. MOVLW, 2 = ; Value used to ; initialize data ; direction. MOVWF, 1 = TRISD. MOVWF, 2 = : Set RD<3:0> as inputs ; RD<5:4> as outputs ; RD<7:6> as inputs\nNote:, 1 = On a Power-on Reset, these pins are configured as digital inputs.",
    "TABLE 10-7: PORTD FUNCTIONS\nRD0/PSP0, Bit# = bit 0. RD0/PSP0, Buffer Type = ST/TTL (1). RD0/PSP0, Function = Input/output port pin or Parallel Slave Port bit 0.. RD1/PSP1, Bit# = bit 1. RD1/PSP1, Buffer Type = ST/TTL (1). RD1/PSP1, Function = Input/output port pin or Parallel Slave Port bit 1.. RD2/PSP2, Bit# = bit 2. RD2/PSP2, Buffer Type = ST/TTL (1). RD2/PSP2, Function = Input/output port pin or Parallel Slave Port bit 2.. RD3/PSP3, Bit# = bit 3. RD3/PSP3, Buffer Type = ST/TTL (1). RD3/PSP3, Function = Input/output port pin or Parallel Slave Port bit 3.. RD4/PSP4, Bit# = bit 4. RD4/PSP4, Buffer Type = ST/TTL (1).",
    "TABLE 10-7: PORTD FUNCTIONS\nRD4/PSP4, Function = Input/output port pin or Parallel Slave Port bit 4.. RD5/PSP5/P1B, Bit# = bit 5. RD5/PSP5/P1B, Buffer Type = ST/TTL (1). RD5/PSP5/P1B, Function = Input/output port pin, Parallel Slave Port bit 5 or Enhanced PWMoutput P1B.. RD6/PSP6/P1C, Bit# = bit 6. RD6/PSP6/P1C, Buffer Type = ST/TTL (1). RD6/PSP6/P1C, Function = Input/output port pin, Parallel Slave Port bit 6 or Enhanced PWMoutput P1C.. RD7/PSP7/P1D, Bit# = bit 7. RD7/PSP7/P1D, Buffer Type = ST/TTL (1). RD7/PSP7/P1D, Function = Input/output port pin, Parallel Slave Port bit 7 or Enhanced PWMoutput P1D.",
    "TABLE 10-7: PORTD FUNCTIONS\nLegend: ST = Schmitt Trigger input, TTL = TTL input\nNote 1: Input buffers are Schmitt Triggers when in I/O mode and TTL buffers when in Parallel Slave Port mode.",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nPORTD, Bit 7 = RD7. PORTD, Bit 6 = RD6. PORTD, Bit 5 = RD5. PORTD, Bit 4 = RD4. PORTD, Bit 3 = RD3. PORTD, Bit 2 = RD2. PORTD, Bit 1 = RD1. PORTD, Bit 0 = RD0. PORTD, Value on POR, BOR = xxxx. PORTD, Value on POR, BOR = xxxx. PORTD, Value on all other Resets = uuuu. PORTD, Value on all other Resets = uuuu. LATD, Bit 7 = LATD Data Latch Register. LATD, Bit 6 = LATD Data Latch Register. LATD, Bit 5 = LATD Data Latch Register. LATD, Bit 4 = LATD Data Latch Register. LATD, Bit 3 = LATD Data Latch Register. LATD, Bit 2 = LATD Data Latch Register. LATD, Bit 1 = LATD Data Latch Register. LATD, Bit 0 = LATD Data Latch Register. LATD,",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nValue on POR, BOR = xxxx. LATD, Value on POR, BOR = xxxx. LATD, Value on all other Resets = uuuu. LATD, Value on all other Resets = uuuu. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Value on POR, BOR = 1111. TRISD, Value on POR, BOR = 1111. TRISD, Value on all other Resets = 1111. TRISD, Value on all other Resets = 1111. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE,",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\nBit 3 = GLYPH<151>. TRISE, Bit 2 = PORTE Data Direction bits. TRISE, Bit 1 = PORTE Data Direction bits. TRISE, Bit 0 = PORTE Data Direction bits. TRISE, Value on POR, BOR = 0000. TRISE, Value on POR, BOR = -111. TRISE, Value on all other Resets = 0000. TRISE, Value on all other Resets = -111. CCP1CON, Bit 7 = P1M1. CCP1CON, Bit 6 = P1M0. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Value on all other Resets",
    "TABLE 10-8: SUMMARY OF REGISTERS ASSOCIATED WITH PORTD\n= 0000. CCP1CON, Value on all other Resets = 0000\nLegend: x = unknown, u = unchanged,   = unimplemented, read as GLYPH<145> -0\nGLYPH<146>. Shaded cells are not used by PORTD.",
    "EXAMPLE 10-5: INITIALIZING PORTE\nPORTE  is  available  only  in  PIC18F4X20  devices. PIC18F2X20 devices always will read back 0x00 from PORTE.\nFor PIC18F4X20 devices, PORTE is a 4-bit wide port. Three  pins  (RE0/AN5/RD,  RE1/AN6/WR  and  RE2/ AN7/CS) are individually configurable as inputs or outputs.  These  pins  have  Schmitt  Trigger  input  buffers. When selected as an analog input, these pins will read as GLYPH<145> 0 GLYPH<146> s.\nThe corresponding  Data  Direction  register  is  TRISE. Setting a TRISE bit (= 1 ) will make the corresponding PORTE pin an input (i.e., put the corresponding output driver in a high-impedance mode). Clearing a TRISE bit (= 0 ) will make the corresponding PORTE pin an output (i.e., put the contents of the output latch on the selected pin).\nTRISE controls the direction of the RE pins even when they are being used as analog inputs. The user must make sure to keep the pins configured as inputs when using them as analog inputs.",
    "EXAMPLE 10-5: INITIALIZING PORTE\nNote:, 1 = On a Power-on Reset, RE2:RE0 are configured as analog inputs.\nThe upper four bits of the TRISE register also control the operation of the Parallel Slave Port. Their operation is explained in Register 10-1.\nThe  Data  Latch  register (LATE)  is also memory mapped.  Read-modify-write  operations  on  the  LATE register  read  and  write  the  latched  output  value  for PORTE.\nThe fourth pin of PORTE (MCLR/VPP/RE3) is an input only pin. Its operation is controlled by the MCLRE Configuration bit in Configuration Register 3H (CONFIG3H<7>). When selected as a port pin (MCLRE = 0 ), it functions as a digital input only pin; as such, it does not have TRIS or LAT bits associated with its  operation.  Otherwise,  it  functions  as  the  deviceGLYPH<146>s Master Clear input. In  either  configuration,  RE3  also functions  as  the  programming  voltage  input  during programming.\nNote:, 1 = On a Power-on Reset, RE3 is enabled as a digital input only if Master Clear functionality is disabled.",
    "EXAMPLE 10-5: INITIALIZING PORTE\nCLRF, 1 = PORTE. CLRF, 2 = ; Initialize PORTE by ; clearing output ; data latches. CLRF, 1 = LATE. CLRF, 2 = ; Alternate method ; to clear output ; data latches. MOVLW MOVWF MOVLW, 1 = 0x0A ADCON1 0x03. MOVLW MOVWF MOVLW, 2 = ; Configure A/D ; for digital inputs ; Value used to ; initialize data. MOVWF, 1 = TRISC. MOVWF, 2 = ; Set RE<0> as inputs ; RE<1> as outputs ; RE<2> as inputs",
    "FIGURE 10-13: BLOCK DIAGRAM OF RE2:RE0 PINS\nNote 1: I/O pins have diode protection to VDD and VSS.",
    "REGISTER 10-1: TRISE REGISTER\nIBF, R-0 = OBF. IBF, R/W-0 = IBOV. IBF, R/W-0 = PSPMODE. IBF, U-0 = GLYPH<151>. IBF, R/W-1 = TRISE2. IBF, R/W-1 = TRISE1. IBF, R/W-1 = TRISE0. bit 7, R-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, U-0 = . bit 7, R/W-1 = . bit 7, R/W-1 = . bit 7, R/W-1 = bit 0",
    "REGISTER 10-1: TRISE REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nIBF: Input Buffer Full Status bit\n1 = A word has been received and waiting to be read by the CPU\n0 = No word has been received\nbit 6\nOBF : Output Buffer Full Status bit\n1 = The output buffer still holds a previously written word\n0 = The output buffer has been read\nbit 5\nIBOV : Input Buffer Overflow Detect bit (in Microprocessor mode)",
    "REGISTER 10-1: TRISE REGISTER\n1 = A write occurred when a previously input word has not been read (must be cleared in software)\n0 = No overflow occurred\nbit 4\nPSPMODE : Parallel Slave Port Mode Select bit\n1 = Parallel Slave Port mode\n0 = General Purpose I/O mode\nbit 3 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 2\nTRISE2 : RE2 Direction Control bit\n1 = Input\n0 = Output\nbit 1\nTRISE1 : RE1 Direction Control bit\n1 = Input\n0 = Output\nbit 0\nTRISE0 : RE0 Direction Control bit\n1 = Input\n0 = Output",
    "TABLE 10-9: PORTE FUNCTIONS\nRE0/AN5/RD, Bit# = bit 0. RE0/AN5/RD, Buffer Type = ST/TTL (1). RE0/AN5/RD, Function = Input/output port pin, analog input or read control input in Parallel Slave Port mode. For RD (PSP Control mode): 1 = PSP is Idle 0 = Read operation. Reads PORTD register (if chip selected).. RE1/AN6/WR, Bit# = bit 1. RE1/AN6/WR, Buffer Type = ST/TTL (1). RE1/AN6/WR, Function = Input/output port pin, analog input or write control input in Parallel Slave Port mode. For WR (PSP Control mode): 1 = PSP is Idle 0 = Write operation. Writes PORTD register (if chip selected).. RE2/AN7/CS, Bit# = bit 2. RE2/AN7/CS, Buffer Type = ST/TTL (1). RE2/AN7/CS, Function = Input/output port pin, analog input or chip select control input in Parallel Slave Port mode. For CS",
    "TABLE 10-9: PORTE FUNCTIONS\n(PSP Control mode): 1 = PSP is Idle 0 = External device is selected. MCLR/VPP/RE3 (2), Bit# = bit 3. MCLR/VPP/RE3 (2), Buffer Type = ST. MCLR/VPP/RE3 (2), Function = Input only port pin or programming voltage input (if MCLR is disabled); Master Clear input or programming voltage input (if MCLR is enabled).\n- Legend:\nST = Schmitt Trigger input, TTL = TTL input\nNote\n1: Input buffers are Schmitt Triggers when in I/O mode and TTL buffers when in Parallel Slave Port mode.\n2: The RE3 port bit is available as an input-only pin only in 40-pin devices and when Master Clear functionality is disabled (CONFIG3H<7>= 0 ).",
    "TABLE 10-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nPORTE, Bit 7 = GLYPH<151>. PORTE, Bit 6 = GLYPH<151>. PORTE, Bit 5 = GLYPH<151>. PORTE, Bit 4 = GLYPH<151>. PORTE, Bit 3 = RE3 (1). PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Value on POR, BOR = ---- qxxx. PORTE, Value on all other Resets = ---- quuu. LATE, Bit 7 = GLYPH<151>. LATE, Bit 6 = GLYPH<151>. LATE, Bit 5 = GLYPH<151>. LATE, Bit 4 = GLYPH<151>. LATE, Bit 3 = GLYPH<151>. LATE, Bit 2 = LATE Data Latch Register. LATE, Bit 1 = LATE Data Latch Register. LATE, Bit 0 = LATE Data Latch Register. LATE, Value on POR, BOR = ---- -xxx. LATE, Value on all other Resets = ---- -uuu. TRISE,",
    "TABLE 10-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nBit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = GLYPH<151>. TRISE, Bit 2 = PORTE Data Direction bits. TRISE, Bit 1 = PORTE Data Direction bits. TRISE, Bit 0 = PORTE Data Direction bits. TRISE, Value on POR, BOR = 0000 -111. TRISE, Value on all other Resets = 0000 -111. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00 0000. ADCON1, Value on all other Resets = --00 0000",
    "TABLE 10-10: SUMMARY OF REGISTERS ASSOCIATED WITH PORTE\nLegend: x = unknown, u = unchanged,   = unimplemented, read as GLYPH<145> -0 GLYPH<146>, q = value depends on condition. Shaded cells are not used by PORTE.\nNote 1: The RE3 port bit is available as an input-only pin only in 40-pin devices and when Master Clear functionality is disabled (CONFIG3H<7>= ). 0",
    "10.6 Parallel Slave Port\nNote:\nThe Parallel Slave Port is only available on PIC18F4X20 devices.\nThe timing for  the control  signals  in  Write  and  Read modes  is  shown  in  Figure 10-16  and  Figure 10-17, respectively.\nIn addition to its function as a general I/O port, PORTD can also operate as an 8-bit wide Parallel Slave Port (PSP) or microprocessor port. PSP operation is controlled  by  the  4  upper  bits  of  the  TRISE  register (Register 10-1). Setting control bit, PSPMODE (TRISE<4>),  enables  PSP  operation,  as  long  as  the Enhanced CCP module is not operating in dual output or quad output PWM mode. In Slave mode, the port is asynchronously readable and writable by the external world.",
    "10.6 Parallel Slave Port\nThe  PSP  can  directly  interface  to  an  8-bit  microprocessor data bus. The external microprocessor can read or write the PORTD latch as an 8-bit latch. Setting the  control  bit,  PSPMODE,  enables  the  PORTE  I/O pins to become control inputs for the microprocessor port. When set, port pin RE0 is the RD input, RE1 is the WR input and RE2 is the CS (Chip Select) input. For this functionality, the corresponding data direction bits of  the  TRISE  register  (TRISE<2:0>)  must  be  configured  as  inputs  (set).  The  A/D  port  configuration  bits PFCG3:PFCG0 (ADCON1<3:0>) must also be set to GLYPH<145> 1010 GLYPH<146>.\nA write to the PSP occurs when both the CS and WR lines are first detected low and ends when either are detected high. The PSPIF and IBF flag bits are both set when the write ends.",
    "10.6 Parallel Slave Port\nA read from the PSP occurs when both the CS and RD lines are first detected low. The data in PORTD is read out and the OBF bit is set. If the user writes new data to PORTD to set OBF, the data is immediately read out; however, the OBF bit is not set.\nWhen either the CS or RD lines are detected high, the PORTD pins return to the input state and the PSPIF bit is set.  User  applications  should  wait  for  PSPIF  to  be  set before servicing the PSP; when this happens, the IBF and OBF bits can be polled and the appropriate action taken.",
    "PORTD AND PORTE BLOCK DIAGRAM\n(PARALLEL SLAVE PORT)",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nPORTD, Bit 7 = Port Data Latch when written; Port pins when read. PORTD, Bit 6 = Port Data Latch when written; Port pins when read. PORTD, Bit 5 = Port Data Latch when written; Port pins when read. PORTD, Bit 4 = Port Data Latch when written; Port pins when read. PORTD, Bit 3 = Port Data Latch when written; Port pins when read. PORTD, Bit 2 = Port Data Latch when written; Port pins when read. PORTD, Bit 1 = Port Data Latch when written; Port pins when read. PORTD, Bit 0 = Port Data Latch when written; Port pins when read. PORTD, Value on POR, BOR = xxxx. PORTD, Value on POR, BOR = xxxx. PORTD, Value on all other Resets = uuuu. PORTD, Value on all other Resets = uuuu. LATD, Bit 7 = LATD Data Latch bits. LATD, Bit 6 = LATD Data Latch bits. LATD, Bit 5 = LATD Data Latch bits. LATD, Bit 4 = LATD Data",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nLatch bits. LATD, Bit 3 = LATD Data Latch bits. LATD, Bit 2 = LATD Data Latch bits. LATD, Bit 1 = LATD Data Latch bits. LATD, Bit 0 = LATD Data Latch bits. LATD, Value on POR, BOR = xxxx. LATD, Value on POR, BOR = xxxx. LATD, Value on all other Resets = uuuu. LATD, Value on all other Resets = uuuu. TRISD, Bit 7 = PORTD Data Direction bits. TRISD, Bit 6 = PORTD Data Direction bits. TRISD, Bit 5 = PORTD Data Direction bits. TRISD, Bit 4 = PORTD Data Direction bits. TRISD, Bit 3 = PORTD Data Direction bits. TRISD, Bit 2 = PORTD Data Direction bits. TRISD, Bit 1 = PORTD Data Direction bits. TRISD, Bit 0 = PORTD Data Direction bits. TRISD, Value on POR, BOR = 1111. TRISD, Value on POR, BOR = 1111. TRISD, Value",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\non all other Resets = 1111. TRISD, Value on all other Resets = 1111. PORTE, Bit 7 = GLYPH<151>. PORTE, Bit 6 = GLYPH<151>. PORTE, Bit 5 = GLYPH<151>. PORTE, Bit 4 = GLYPH<151>. PORTE, Bit 3 = RE3. PORTE, Bit 2 = RE2. PORTE, Bit 1 = RE1. PORTE, Bit 0 = RE0. PORTE, Value on POR, BOR = ----. PORTE, Value on POR, BOR = qxxx. PORTE, Value on all other Resets = ----. PORTE, Value on all other Resets = quuu. LATE, Bit 7 = GLYPH<151>. LATE, Bit 6 = GLYPH<151>. LATE, Bit 5 = GLYPH<151>. LATE, Bit 4 = GLYPH<151>. LATE, Bit 3 = GLYPH<151>. LATE, Bit 2 = LATE Data Latch bits. LATE, Bit 1 = LATE Data Latch bits. LATE, Bit 0 = LATE Data Latch",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nbits. LATE, Value on POR, BOR = ----. LATE, Value on POR, BOR = -xxx. LATE, Value on all other Resets = ----. LATE, Value on all other Resets = -uuu. TRISE, Bit 7 = IBF. TRISE, Bit 6 = OBF. TRISE, Bit 5 = IBOV. TRISE, Bit 4 = PSPMODE. TRISE, Bit 3 = GLYPH<151>. TRISE, Bit 2 = PORTE Data Direction bits. TRISE, Bit 1 = PORTE Data Direction bits. TRISE, Bit 0 = PORTE Data Direction bits. TRISE, Value on POR, BOR = 0000. TRISE, Value on POR, BOR = -111. TRISE, Value on all other Resets = 0000. TRISE, Value on all other Resets = -111. INTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IF. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 =",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nRBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE. PIE1, Bit",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\n6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other",
    "TABLE 10-11: REGISTERS ASSOCIATED WITH PARALLEL SLAVE PORT\nResets = 1111. IPR1, Value on all other Resets = 1111. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00. ADCON1, Value on POR, BOR = 0000. ADCON1, Value on all other Resets = --00. ADCON1, Value on all other Resets = 0000\nGLYPH<146>. Shaded cells are not used by the Parallel Slave Port.\nLegend: x = unknown, u = unchanged,   = unimplemented, read as GLYPH<145> -0",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "11.0 TIMER0 MODULE\nThe Timer0 module has the following features:\n- GLYPH<149> Software selectable as an 8-bit or 16-bit timer/counter\nFigure 11-1  shows  a  simplified  block  diagram  of  the Timer0 module in 8-bit mode and Figure 11-2 shows a simplified block diagram of the Timer0 module in 16-bit mode.\nGLYPH<149> Readable and writable\nGLYPH<149> Dedicated 8-bit software programmable prescaler\nGLYPH<149> Clock source selectable to be external or internal\nGLYPH<149> Interrupt-on-overflow from FFh to 00h in 8-bit mode and FFFFh to 0000h in 16-bit mode\nGLYPH<149> Edge select for external clock",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nTMR0ON, R/W-1 = T08BIT. TMR0ON, R/W-1 = T0CS. TMR0ON, R/W-1 = T0SE. TMR0ON, R/W-1 = PSA. TMR0ON, R/W-1 = T0PS2. TMR0ON, R/W-1 = T0PS1. TMR0ON, R/W-1 = T0PS0. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 11-1: T0CON: TIMER0 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 TMR0ON: Timer0 On/Off Control bit\n1 = Enables Timer0\n0 = Stops Timer0",
    "bit 6\nT08BIT : Timer0 8-Bit/16-Bit Control bit\n1 = Timer0 is configured as an 8-bit timer/counter\n0 = Timer0 is configured as a 16-bit timer/counter\nbit 5 T0CS : Timer0 Clock Source Select bit\n1 = Transition on T0CKI pin\n0 = Internal instruction cycle clock (CLKO)",
    "bit 4 T0SE : Timer0 Source Edge Select bit\n1 = Increment on high-to-low transition on T0CKI pin\n0 = Increment on low-to-high transition on T0CKI pin",
    "bit 3 PSA : Timer0 Prescaler Assignment bit\n1 = TImer0 prescaler is not assigned. Timer0 clock input bypasses prescaler.\n0 = Timer0 prescaler is assigned. Timer0 clock input comes from prescaler output.",
    "bit 2-0\nT0PS2:T0PS0 : Timer0 Prescaler Select bits\n111 = 1:256 Prescale value\n110 = 1:128 Prescale value\n101 = 1:64   Prescale value\n100 = 1:32   Prescale value\n011 = 1:16   Prescale value\n010\n= 1:8     Prescale value\n001 = 1:4     Prescale value\n000 = 1:2     Prescale value\nThe T0CON register (Register 11-1) is a readable and writable register that controls all the aspects of Timer0, including the prescale selection.",
    "11.1 Timer0 Operation\nTimer0 can operate as a timer or as a counter.\nTimer  mode  is  selected  by  clearing  the  T0CS  bit.  In Timer mode, the Timer0 module will increment every instruction cycle (without prescaler). If the TMR0 register is written, the increment is inhibited for the following two instruction cycles. The user can work around this by writing an adjusted value to the TMR0 register.\nCounter mode is selected by setting the T0CS bit. In Counter mode, Timer0 will increment, either on every rising  or  falling  edge  of  pin  RA4/T0CKI/C1OUT.  The incrementing edge is determined by the Timer0 Source Edge Select bit (T0SE). Clearing the T0SE bit selects the rising edge.\nWhen an external clock input is used for Timer0, it must meet certain requirements. The requirements ensure the external clock can be synchronized with the internal phase clock (TOSC). Also, there is a delay in the actual incrementing of Timer0 after synchronization.",
    "11.2 Prescaler\nAn 8-bit counter is available as a prescaler for the Timer0 module. The prescaler is not readable or writable.\nThe PSA  and T0PS2:T0PS0  bits determine the prescaler assignment and prescale ratio.\nClearing bit PSA will assign the prescaler to the Timer0 module. When the prescaler is assigned to the Timer0 module,  prescale  values  of  1:2,  1:4,...,  1:256  are selectable.\nWhen assigned to the Timer0 module, all instructions writing to the TMR0 register (e.g., CLRF TMR0, MOVWF TMR0, BSF TMR0, x ....etc.) will clear the prescaler count.\nNote:",
    "11.2.1 SWITCHING PRESCALER ASSIGNMENT\nThe  prescaler  assignment  is  fully  under  software control  (i.e.,  it can  be  changed  GLYPH<147>on-the-flyGLYPH<148> during program execution).",
    "11.3 Timer0 Interrupt\nThe  TMR0  interrupt  is  generated  when  the  TMR0 register  overflows from  FFh  to  00h in 8-bit  mode, or FFFFh to 0000h in 16-bit mode. This overflow sets the TMR0IF bit. The interrupt can be masked by clearing the  TMR0IE  bit.  The  TMR0IF  bit  must  be  cleared  in software by the Timer0  module  Interrupt Service Routine  before  re-enabling  this  interrupt.  The  TMR0 interrupt  cannot  awaken  the  processor  from  Sleep mode, since the timer requires clock cycles, even when T0CS is set.",
    "11.4 16-Bit Mode Timer Reads and Writes\nTMR0H  is  not  the  high  byte  of  the  timer/counter  in 16-bit  mode  but  is  actually  a  buffered  version  of  the high byte of Timer0 (refer to Figure 11-2). The high byte of the Timer0 counter/timer is not directly readable nor writable.  TMR0H is  updated  with  the  contents  of  the high byte of Timer0 during a read of TMR0L. This provides the ability to read all 16 bits of Timer0, without having to verify that the read of the high and low byte were valid, due to a rollover between successive reads of the high and low byte.\nA write to the high byte of Timer0 must also take place through the TMR0H Buffer register. Timer0 high byte is updated  with  the  contents  of  TMR0H  when  a  write occurs to TMR0L. This allows all 16 bits of Timer0 to be updated at once.\nWriting  to  TMR0  when  the  prescaler  is assigned to Timer0 will clear the prescaler count  but  will  not  change  the  prescaler assignment.",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nTMR0L, Bit 7 = Timer0 Low Byte Register. TMR0L, Bit 6 = Timer0 Low Byte Register. TMR0L, Bit 5 = Timer0 Low Byte Register. TMR0L, Bit 4 = Timer0 Low Byte Register. TMR0L, Bit 3 = Timer0 Low Byte Register. TMR0L, Bit 2 = Timer0 Low Byte Register. TMR0L, Bit 1 = Timer0 Low Byte Register. TMR0L, Bit 0 = Timer0 Low Byte Register. TMR0L, Value on POR, BOR = xxxx. TMR0L, Value on all other Resets = xxxx. TMR0L, Value on all other Resets = uuuu. TMR0L, Value on all other Resets = uuuu. TMR0H, Bit 7 = Timer0 High Byte Register. TMR0H, Bit 6 = Timer0 High Byte Register. TMR0H, Bit 5 = Timer0 High Byte Register. TMR0H, Bit 4 = Timer0 High Byte",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nRegister. TMR0H, Bit 3 = Timer0 High Byte Register. TMR0H, Bit 2 = Timer0 High Byte Register. TMR0H, Bit 1 = Timer0 High Byte Register. TMR0H, Bit 0 = Timer0 High Byte Register. TMR0H, Value on POR, BOR = 0000. TMR0H, Value on all other Resets = 0000. TMR0H, Value on all other Resets = 0000. TMR0H, Value on all other Resets = 0000. INTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on all other Resets = 000x. INTCON, Value on all other",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nResets = 0000. INTCON, Value on all other Resets = 000u. T0CON, Bit 7 = TMR0ON. T0CON, Bit 6 = T08BIT. T0CON, Bit 5 = T0CS. T0CON, Bit 4 = T0SE. T0CON, Bit 3 = PSA. T0CON, Bit 2 = T0PS2. T0CON, Bit 1 = T0PS1. T0CON, Bit 0 = T0PS0. T0CON, Value on POR, BOR = 1111 1111. T0CON, Value on all other Resets = . T0CON, Value on all other Resets = 1111. T0CON, Value on all other Resets = 1111. TRISA, Bit 7 = RA7 (1). TRISA, Bit 6 = RA6 (1). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 =",
    "TABLE 11-1: REGISTERS ASSOCIATED WITH TIMER0\nPORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Value on POR, BOR = 1111 1111. TRISA, Value on all other Resets = 1111. TRISA, Value on all other Resets = . TRISA, Value on all other Resets = 1111\nLegend: x = unknown, u = unchanged, -= unimplemented locations read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by Timer0.\nNote 1: RA6 and RA7 are enabled as I/O pins depending on the oscillator mode selected in Configuration Word 1H.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "12.0 TIMER1 MODULE\nThe  Timer1  module  timer/counter  has  the  following features:\n- GLYPH<149> 16-bit timer/counter (two 8-bit registers: TMR1H and TMR1L)\nRegister 12-1 details the Timer1 Control register. This register  controls  the  operating  mode  of  the  Timer1 module and contains the Timer1 Oscillator Enable bit (T1OSCEN).  Timer1  can  be  enabled  or  disabled  by setting or clearing control bit, TMR1ON (T1CON<0>).\nGLYPH<149> Readable and writable (both registers)\nGLYPH<149> Internal or external clock select\nGLYPH<149> Interrupt-on-overflow from FFFFh to 0000h\nGLYPH<149> Reset from CCP module Special Event Trigger\nGLYPH<149> Status of system clock operation",
    "12.0 TIMER1 MODULE\nThe Timer1 oscillator can be used as a secondary clock source in power-managed modes. When the T1RUN bit is set, the Timer1 oscillator is providing the system clock. If the Fail-Safe Clock Monitor is enabled and the Timer1 oscillator fails while providing the system clock, polling the T1RUN bit will indicate whether the clock is being provided by the Timer1 oscillator or another source.\nFigure 12-1 is a simplified block diagram of the Timer1 module.\nTimer1 can also be used to provide Real-Time Clock (RTC) functionality to applications with only a minimal addition of external components and code overhead.",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nRD16, R-0 = T1RUN. RD16, R/W-0 = T1CKPS1. RD16, R/W-0 = T1CKPS0. RD16, R/W-0 = T1OSCEN. RD16, R/W-0 = T1SYNC. RD16, R/W-0 = TMR1CS. RD16, R/W-0 = TMR1ON. bit 7 bit 0, R-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nbit 7, Legend:.-n = Value at POR = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of Timer1 in one 16-bit operation. bit 7, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of Timer1 in one 16-bit operation. bit 7, R = Readable bit. = RD16: 16-Bit Read/Write Mode Enable bit 1 = Enables register read/write of Timer1 in one 16-bit operation. bit 6, Legend:.-n = Value at POR = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1 oscillator 0 = Device clock is derived from another source. bit 6, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1 oscillator 0 = Device clock is derived from another source. bit",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\n6, R = Readable bit. = T1RUN: Timer1 System Clock Status bit 1 = Device clock is derived from Timer1 oscillator 0 = Device clock is derived from another source. bit 5-4, Legend:.-n = Value at POR = T1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 5-4, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = T1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale value. bit 5-4, R = Readable bit. = T1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits 11 = 1:8 Prescale value 10 = 1:4 Prescale value 01 = 1:2 Prescale",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nvalue. bit 3, Legend:.-n = Value at POR = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 3, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 3, R = Readable bit. = T1OSCEN: Timer1 Oscillator Enable bit 1 = Timer1 oscillator is enabled 0 = Timer1 oscillator is shut off. bit 2, Legend:.-n = Value at POR = T1SYNC: Timer1 External Clock Input Synchronization Select bit When TMR1CS = 1 (External Clock): 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 2, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nset = T1SYNC: Timer1 External Clock Input Synchronization Select bit When TMR1CS = 1 (External Clock): 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 2, R = Readable bit. = T1SYNC: Timer1 External Clock Input Synchronization Select bit When TMR1CS = 1 (External Clock): 1 = Do not synchronize external clock input 0 = Synchronize external clock input. bit 1, Legend:.-n = Value at POR = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from RC0/T1OSO/T13CKI pin (on the rising edge). bit 1, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from",
    "REGISTER 12-1: T1CON: TIMER1 CONTROL REGISTER\nRC0/T1OSO/T13CKI pin (on the rising edge). bit 1, R = Readable bit. = This bit is ignored. Timer1 uses the internal clock when TMR1CS = 0 . TMR1CS: Timer1 Clock Source Select bit 1 = External clock from RC0/T1OSO/T13CKI pin (on the rising edge). bit 0, Legend:.-n = Value at POR = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1. bit 0, W=Writable bit.GLYPH<145>1GLYPH<146> = Bit is set = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1. bit 0, R = Readable bit. = TMR1ON: Timer1 On bit 1 = Enables Timer1 0 = Stops Timer1",
    "12.1 Timer1 Operation\nTimer1 can operate in one of these modes:\n- GLYPH<149> As a timer\nWhen TMR1CS = 0 , Timer1 increments every instruction cycle. When TMR1CS = 1 , Timer1 increments on every  rising  edge  of  the  external  clock  input,  or  the Timer1 oscillator, if enabled.\nGLYPH<149> As a synchronous counter\nGLYPH<149> As an asynchronous counter\nThe operating mode is determined by the Clock Select bit, TMR1CS (T1CON<1>).\nWhen the Timer1 oscillator is enabled (T1OSCEN is set),  the  RC1/T1OSI/CCP2  and  RC0/T1OSO/T1CKI pins become inputs. The TRISC1:TRISC0 values are ignored and the pins read as GLYPH<145> 0 GLYPH<146> .",
    "12.1 Timer1 Operation\nTimer1 also has an internal GLYPH<147>Reset inputGLYPH<148>. This Reset can be generated by the CCP module (see Section 15.4.4 GLYPH<147>Special Event TriggerGLYPH<148> ).",
    "FIGURE 12-2: TIMER1 BLOCK DIAGRAM: 16-BIT READ/WRITE MODE\nNote 1: When enable bit T1OSCEN is cleared, the inverter and feedback resistor are turned off. This eliminates power drain.",
    "12.2 Timer1 Oscillator\nA  crystal  oscillator  circuit  is  built-in  between  pins, T1OSI  (input)  and  T1OSO  (amplifier  output).  It  is enabled by setting control bit, T1OSCEN (T1CON<3>). The oscillator is a low-power oscillator rated for 32 kHz crystals. It will continue  to  run  during  all powermanaged modes. The circuit for a typical LP oscillator is shown in Figure 12-3. Table 12-1 shows the capacitor selection for the Timer1 oscillator.\nThe user must provide a software time delay to ensure proper start-up of the Timer1 oscillator.",
    "TABLE 12-1: CAPACITOR SELECTION FOR THE  TIMER  OSCILLATOR (2,3,4)\nLP, Freq = 32 kHz. LP, C1 = 22 pF (1). LP, C2 = 22 pF (1)\nNote 1: Microchip suggests this value as a starting point in validating the oscillator circuit.\n2: Higher capacitance increases the stability of  the  oscillator  but  also  increases  the start-up time.\n3: Since each resonator/crystal has its own characteristics,  the  user  should  consult the resonator/crystal manufacturer for appropriate values of external components.\n4: Capacitor values are for design guidance only.",
    "12.3 Timer1 Oscillator Layout Considerations\nThe  Timer1  oscillator  circuit  draws  very  little  power during operation. Due to the low-power nature of the oscillator, it may also be sensitive to rapidly changing signals in close proximity.\nThe oscillator circuit, shown in Figure 12-3, should be located  as  close  as  possible  to  the  microcontroller. There should be no circuits passing within the oscillator circuit boundaries other than VSS or VDD.\nIf a high-speed circuit must be located near the oscillator (such as the CCP1 pin in output compare or PWM mode, or the primary oscillator using the OSC2 pin), a grounded  guard  ring  around  the  oscillator  circuit,  as shown in Figure 12-4, may be helpful when used on a single-sided PCB or in addition to a ground plane.",
    "12.4 Timer1 Interrupt\nThe TMR1 register pair (TMR1H:TMR1L) increments from  0000h  to  FFFFh  and  rolls  over  to  0000h.  The Timer1 interrupt, if enabled, is generated on overflow which is latched in interrupt flag bit, TMR1IF (PIR1<0>). This interrupt can be enabled/disabled by setting/clearing  Timer1  interrupt  enable  bit,  TMR1IE (PIE1<0>).\nA write to the high byte of Timer1 must also take place through the TMR1H Buffer register. Timer1 high byte is updated  with  the  contents  of  TMR1H  when  a  write occurs to TMR1L. This allows a user to write all 16 bits to both the high and low bytes of Timer1 at once.",
    "12.5 Resetting Timer1 Using a CCP Trigger Output\nIf the CCP module is configured in Compare mode to generate a GLYPH<147>Special Event TriggerGLYPH<148> (CCP1M3:CCP1M0 = 1011 ), this signal will reset Timer1 and start an A/D conversion if the A/D module is enabled (see Section 15.4.4  GLYPH<147>Special Event  TriggerGLYPH<148> for more information).\nNote:\nThe Special Event Triggers from the CCP1 module  will not set interrupt flag bit, TMR1IF (PIR1<0>).\nTimer1 must be configured for either Timer or Synchronized Counter mode to take advantage of this feature. If  Timer1  is  running  in  Asynchronous  Counter mode, this Reset operation may not work.\nIn  the  event  that  a  write  to  Timer1  coincides  with  a Special  Event  Trigger  from  CCP1,  the write will  take precedence.\nIn this mode  of  operation,  the  CCPR1H:CCPR1L register pair effectively becomes the period register for Timer1.",
    "12.6 Timer1 16-Bit Read/Write Mode\nTimer1 can be configured for 16-bit reads and writes (see Figure 12-2). When the RD16 control bit (T1CON<7>) is set, the address for TMR1H is mapped to a buffer register for the high byte of Timer1. A read from TMR1L will load the contents of the high byte of Timer1 into the Timer1 high byte buffer. This provides the user with the ability to accurately read all 16 bits of Timer1 without having to determine whether a read of the high byte, followed by a read of the low byte, is valid due to a rollover between reads.\nThe high byte of Timer1 is not directly readable or writable in this mode. All reads and writes must take place through the Timer1 High Byte Buffer register. Writes to TMR1H  do  not  clear the Timer1 prescaler. The prescaler is only cleared on writes to TMR1L.",
    "12.7 Using Timer1 as a Real-Time Clock\nAdding an external LP oscillator to Timer1 (such as the one  described  in Section 12.2  GLYPH<147>Timer1  OscillatorGLYPH<148> above), gives users the option to include RTC functionality to their applications. This is accomplished with an inexpensive watch crystal to provide an accurate time base and several lines of application code to calculate the time. When operating in Sleep mode and using a battery  or  supercapacitor  as  a  power  source,  it  can completely  eliminate  the  need  for  a  separate  RTC device and battery backup.\nThe  application code  routine, RTCisr , shown  in Example 12-1, demonstrates a simple method  to increment a counter at one-second intervals using an Interrupt Service Routine. Incrementing the TMR1 register pair to overflow, triggers the interrupt and calls the routine, which increments the seconds counter by one; additional counters for minutes and hours are incremented as the previous counter overflow.",
    "12.7 Using Timer1 as a Real-Time Clock\nSince the register pair is 16 bits wide, counting up to overflow the register directly from a 32.768 kHz clock would  take  2  seconds.  To  force  the  overflow  at  the required one-second intervals, it is necessary to preload  it;  the  simplest  method  is  to  set  the  MSbit  of TMR1H with a BSF instruction.  Note that the TMR1L register  is  never  preloaded  or  altered;  doing  so  may introduce cumulative error over many cycles.\nFor this method to be accurate, Timer1 must operate in Asynchronous mode and the Timer1 overflow interrupt must be enabled (PIE1<0> = 1 ) as shown in the routine, RTCinit .  The  Timer1  oscillator  must  also  be enabled and running at all times.",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nRTCinit, 1 = . RTCinit, 2 = . RTCinit, 3 = . RTCinit, 4 = . , 1 = MOVLW MOVWF CLRF MOVLW MOVWF. , 2 = 0x80 TMR1H TMR1L. , 3 = ;. , 4 = Preload TMR1 register pair. , 1 = . , 2 = . , 3 = ;. , 4 = for 1 second overflow. , 1 = . , 2 = bGLYPH<146>00001111GLYPH<146> T1OSC. , 3 = ; ;. , 4 = Configure for external clock, Asynchronous operation, external oscillator. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Initialize timekeeping registers. , 1 = CLRF MOVLW. , 2 = mins .12. , 3 = ;. , 4 = . , 1 = MOVWF. , 2 = hours. , 3 = . , 4 = . , 1",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n= BSF RETURN. , 2 = PIE1, TMR1IE. , 3 = ;. , 4 = Enable Timer1 interrupt. RTCisr, 1 = . RTCisr, 2 = . RTCisr, 3 = . RTCisr, 4 = . , 1 = BSF. , 2 = TMR1H,7. , 3 = ;. , 4 = Preload for 1 sec overflow. , 1 = BCF. , 2 = PIR1,TMR1IF. , 3 = ;. , 4 = Clear interrupt flag. , 1 = INCF. , 2 = secs,F. , 3 = ;. , 4 = Increment seconds. , 1 = MOVLW CPFSGT. , 2 = .59 secs. , 3 = ;. , 4 = 60 seconds elapsed?. , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No, done. , 1 = CLRF. , 2 = secs. , 3 = ;. , 4 = Clear seconds. , 1 = INCF. , 2 =",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\nmins,F. , 3 = ;. , 4 = Increment minutes. , 1 = MOVLW. , 2 = .59. , 3 = ;. , 4 = 60 minutes elapsed?. , 1 = CPFSGT. , 2 = mins. , 3 = . , 4 = . , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No, done. , 1 = CLRF. , 2 = mins. , 3 = ;. , 4 = clear minutes. , 1 = INCF. , 2 = hours,F .23. , 3 = ;. , 4 = Increment hours. , 1 = MOVLW CPFSGT. , 2 = hours. , 3 = ;. , 4 = 24 hours elapsed?. , 1 = RETURN. , 2 = . , 3 = ;. , 4 = No, done. , 1 = MOVLW. , 2 = .01. , 3 = ;. , 4 = Reset hours to 1. , 1 = MOVWF. , 2 = hours. , 3 = . , 4 =",
    "EXAMPLE 12-1: IMPLEMENTING A REAL-TIME CLOCK USING A TIMER1 INTERRUPT SERVICE\n. , 1 = RETURN. , 2 = . , 3 = ;. , 4 = Done",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR all = 0000. INTCON, Value on POR, BOR all = 000x. INTCON, Value on other Resets = 0000. INTCON, Value on other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nall = 0000. PIR1, Value on POR, BOR all = 0000. PIR1, Value on other Resets = 0000. PIR1, Value on other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR all = 0000. PIE1, Value on POR, BOR all = 0000. PIE1, Value on other Resets = 0000. PIE1, Value on other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR all = 1111. IPR1, Value on POR, BOR all = 1111. IPR1, Value on other Resets = 1111. IPR1, Value on other Resets = 1111. TMR1L, Bit 7 = Timer1 Low Byte Register. TMR1L, Bit 6 = Timer1 Low Byte Register. TMR1L, Bit 5 = Timer1 Low Byte Register. TMR1L, Bit 4 = Timer1 Low Byte Register. TMR1L, Bit 3 = Timer1 Low Byte Register. TMR1L, Bit 2 = Timer1 Low Byte Register. TMR1L, Bit 1 = Timer1 Low Byte Register. TMR1L, Bit 0 = Timer1 Low Byte Register. TMR1L, Value on POR, BOR all = xxxx. TMR1L, Value on POR, BOR all =",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\nxxxx. TMR1L, Value on other Resets = uuuu. TMR1L, Value on other Resets = uuuu. TMR1H, Bit 7 = Timer1 High Byte Register. TMR1H, Bit 6 = Timer1 High Byte Register. TMR1H, Bit 5 = Timer1 High Byte Register. TMR1H, Bit 4 = Timer1 High Byte Register. TMR1H, Bit 3 = Timer1 High Byte Register. TMR1H, Bit 2 = Timer1 High Byte Register. TMR1H, Bit 1 = Timer1 High Byte Register. TMR1H, Bit 0 = Timer1 High Byte Register. TMR1H, Value on POR, BOR all = xxxx. TMR1H, Value on POR, BOR all = xxxx. TMR1H, Value on other Resets = uuuu. TMR1H, Value on other Resets = uuuu. T1CON, Bit 7 = RD16. T1CON, Bit 6",
    "TABLE 12-2: REGISTERS ASSOCIATED WITH TIMER1 AS A TIMER/COUNTER\n= T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR all = 0000. T1CON, Value on POR, BOR all = 0000. T1CON, Value on other Resets = u0uu. T1CON, Value on other Resets = uuuu\nLegend: x = unknown, u = unchanged, -= unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by the Timer1 module.\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "13.1 Timer2 Operation\nThe Timer2 module timer has the following features:\nGLYPH<149> 8-bit Timer register (TMR2)\nGLYPH<149> 8-bit Period register (PR2)\nGLYPH<149> Readable and writable (both registers)\nGLYPH<149> Software programmable prescaler (1:1, 1:4, 1:16)\nGLYPH<149> Software programmable postscaler (1:1 to 1:16)\nGLYPH<149> Interrupt on TMR2 match with PR2\nGLYPH<149> MSSP module optional use of TMR2 output to generate clock shift",
    "13.1 Timer2 Operation\nTimer2  can  be  used  as  the  PWM  time  base  for  the PWM mode of the CCP module. The TMR2 register is readable  and  writable  and  is  cleared  on  any  device Reset. The input clock (FOSC/4) has a prescale option of 1:1, 1:4 or 1:16, selected by control bits, T2CKPS1:T2CKPS0 (T2CON<1:0>). The match output  of  TMR2  goes  through  a  4-bit  postscaler  (which gives  a  1:1  to  1:16  scaling  inclusive)  to  generate  a TMR2 interrupt (latched in flag bit, TMR2IF (PIR1<1>)).",
    "13.1 Timer2 Operation\nTimer2 has a control register shown in Register 13-1. TMR2 can be shut-off by clearing control bit, TMR2ON (T2CON<2>), to minimize power consumption. Figure 13-1 is a simplified block diagram of the Timer2 module. Register 13-1 shows the Timer2 Control register. The prescaler and postscaler selection of Timer2 are controlled by this register.\nThe  prescaler  and  postscaler  counters  are  cleared when any of the following occurs:\nGLYPH<149> A write to the TMR2 register\nGLYPH<149> A write to the T2CON register\nGLYPH<149> Any device Reset (Power-on Reset, MCLR Reset, Watchdog Timer Reset or Brown-out Reset)\nTMR2 is not cleared when T2CON is written.",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\nGLYPH<151>, R/W-0 = TOUTPS3. GLYPH<151>, R/W-0 = TOUTPS2. GLYPH<151>, R/W-0 = TOUTPS1. GLYPH<151>, R/W-0 = TOUTPS0. GLYPH<151>, R/W-0 = TMR2ON. GLYPH<151>, R/W-0 = T2CKPS1. GLYPH<151>, R/W-0 = T2CKPS0. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 13-1: T2CON: TIMER2 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 6-3\nTOUTPS3:TOUTPS0 : Timer2 Output Postscale Select bits\n0000 = 1:1 Postscale\n0001 = 1:2 Postscale\nGLYPH<149>\nGLYPH<149>\nGLYPH<149>\n1111 = 1:16 Postscale\nbit 2\nTMR2ON : Timer2 On bit\n1 = Timer2 is on\n0 = Timer2 is off\nbit 1-0\nT2CKPS1:T2CKPS0 : Timer2 Clock Prescale Select bits\n00 = Prescaler is 1\n01 = Prescaler is 4\n1x = Prescaler is 16",
    "13.3 Output of TMR2\nThe Timer2 module has an 8-bit Period register, PR2. Timer2 increments from 00h until it matches PR2 and then resets to 00h on the next increment cycle. PR2 is a readable and writable register. The PR2 register is initialized to FFh upon Reset.\nThe output of TMR2 (before the postscaler) is fed to the Synchronous Serial Port module which optionally uses it to generate the shift clock.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000 000x. INTCON, Value on all other Resets = 0000 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000 0000. PIR1, Value on all other Resets = 0000 0000.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nPIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000 0000. PIE1, Value on all other Resets = 0000 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111 1111. IPR1, Value on all other Resets = 1111 1111.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nTMR2, Bit 7 = Timer2 Module Register. TMR2, Bit 6 = Timer2 Module Register. TMR2, Bit 5 = Timer2 Module Register. TMR2, Bit 4 = Timer2 Module Register. TMR2, Bit 3 = Timer2 Module Register. TMR2, Bit 2 = Timer2 Module Register. TMR2, Bit 1 = Timer2 Module Register. TMR2, Bit 0 = Timer2 Module Register. TMR2, Value on POR, BOR = 0000 0000. TMR2, Value on all other Resets = 0000 0000. T2CON, Bit 7 = GLYPH<151>. T2CON, Bit 6 = TOUTPS3. T2CON, Bit 5 = TOUTPS2. T2CON, Bit 4 = TOUTPS1. T2CON, Bit 3 = TOUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nT2CON, Value on POR, BOR = -000 0000. T2CON, Value on all other Resets = -000 0000. PR2, Bit 7 = Timer2 Period Register. PR2, Bit 6 = Timer2 Period Register. PR2, Bit 5 = Timer2 Period Register. PR2, Bit 4 = Timer2 Period Register. PR2, Bit 3 = Timer2 Period Register. PR2, Bit 2 = Timer2 Period Register. PR2, Bit 1 = Timer2 Period Register. PR2, Bit 0 = Timer2 Period Register. PR2, Value on POR, BOR = 1111 1111. PR2, Value on all other Resets = 1111 1111. OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 = IRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0.",
    "TABLE 13-1: REGISTERS ASSOCIATED WITH TIMER2 AS A TIMER/COUNTER\nOSCCON, Value on POR, BOR = 0000 qq00. OSCCON, Value on all other Resets = 0000 qq00\nLegend: x = unknown, u = unchanged, -= unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by the Timer2 module.\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X2 devices; always maintain these bits clear.",
    "14.0 TIMER3 MODULE\nFigure 14-1 is a simplified block diagram of the Timer3 module.\nThe  Timer3  module  timer/counter  has  the  following features:\nGLYPH<149> 16-bit timer/counter (two 8-bit registers: TMR3H and TMR3L)\nGLYPH<149> Readable and writable (both registers)\nGLYPH<149> Internal or external clock select\nGLYPH<149> Interrupt-on-overflow from FFFFh to 0000h\nGLYPH<149> Reset from CCP module trigger\nRegister 14-1 shows the Timer3 Control register. This register  controls  the  operating  mode  of  the  Timer3 module and sets the CCP clock source.\nRegister 12-1 shows the Timer1 Control register. This register  controls  the  operating  mode  of  the  Timer1 module,  as  well  as  contains  the  Timer1  Oscillator Enable bit (T1OSCEN) which can be a clock source for Timer3.",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nRD16, R/W-0 = T3CCP2. RD16, R/W-0 = T3CKPS1. RD16, R/W-0 = T3CKPS0. RD16, R/W-0 = T3CCP1. RD16, R/W-0 = T3SYNC. RD16, R/W-0 = TMR3CS. RD16, R/W-0 = TMR3ON. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 14-1: T3CON: TIMER3 CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nRD16: 16-Bit Read/Write Mode Enable bit\n1 = Enables register read/write of Timer3 in one 16-bit operation\n0 = Enables register read/write of Timer3 in two 8-bit operations",
    "bit 6, 3\nT3CCP2:T3CCP1: Timer3 and Timer1 to CCPx Enable bits\n1x = Timer3 is the capture/compare clock source for both CCP modules\n01 = Timer3 is the capture/compare clock source for CCP2;\nTimer1 is the capture/compare clock source for CCP1\n00 = Timer1 is the capture/compare clock source for both CCP modules\nbit 5-4\nT3CKPS1:T3CKPS0: Timer3 Input Clock Prescale Select bits\n11 = 1:8 Prescale value\n10 = 1:4 Prescale value\n01 = 1:2 Prescale value\n00 = 1:1 Prescale value",
    "bit 2\nT3SYNC: Timer3 External Clock Input Synchronization Control bit\n(Not usable if the device clock comes from Timer1/Timer3.)\nWhen TMR3CS = 1 :\n1 = Do not synchronize external clock input\n0 = Synchronize external clock input\nWhen TMR3CS = 0 :\nThis bit is ignored. Timer3 uses the internal clock when TMR3CS = 0 .\nbit 1\nTMR3CS:\nTimer3 Clock Source Select bit\n1 = External clock input from Timer1 oscillator or T13CKI (on the rising edge after the first falling edge)\n0 = Internal clock (FOSC/4)",
    "bit 0 TMR3ON: Timer3 On bit\n1 = Enables Timer3\n0 = Stops Timer3",
    "14.1 Timer3 Operation\nTimer3 can operate in one of these modes:\n- GLYPH<149> As a timer\nWhen TMR3CS = 0 , Timer3 increments every instruction cycle. When TMR3CS = 1 , Timer3 increments on every rising edge of the Timer1 external clock input or the Timer1 oscillator if enabled.\nGLYPH<149> As a synchronous counter\nGLYPH<149> As an asynchronous counter\nThe operating mode is determined by the clock select bit, TMR3CS (T3CON<1>).\nWhen the Timer1 oscillator is enabled (T1OSCEN is set),  the  RC1/T1OSI/CCP2  and  RC0/T1OSO/T1CKI pins become inputs. That is, the TRISC1:TRISC0 value is ignored and the pins are read as GLYPH<145> 0 GLYPH<146>.",
    "14.1 Timer3 Operation\nTimer3 also has an internal  GLYPH<147>Reset  inputGLYPH<148>.  This  Reset can be generated by the CCP module (see Section 15.4.4 GLYPH<147>Special Event TriggerGLYPH<148> ).",
    "FIGURE 14-1: TIMER3 BLOCK DIAGRAM\nNote 1: When enable bit T1OSCEN is cleared, the inverter and feedback resistor are turned off. This eliminates power drain.",
    "14.2 Timer1 Oscillator\nThe Timer1 oscillator may be used as the clock source for Timer3. The Timer1 oscillator is enabled by setting the T1OSCEN (T1CON<3>) bit. The oscillator is a lowpower oscillator rated for 32 kHz crystals. See Section 12.2 GLYPH<147>Timer1 OscillatorGLYPH<148> for further details.",
    "14.4 Resetting Timer3 Using a CCP Trigger Output\nIf  the  CCP  module  is  configured  in  Compare  mode to generate a GLYPH<147>S pecial Event TriggerGLYPH<148> (CCP1M3:CCP1M0  = 1011 ), this signal  will  reset Timer3. See Section 15.4.4 GLYPH<147>Special Event TriggerGLYPH<148> for more information.",
    "Note:\nThe TMR3 register pair (TMR3H:TMR3L) increments from  0000h  to  FFFFh  and  rolls  over  to  0000h.  The TMR3 interrupt, if  enabled,  is  generated  on  overflow which is latched in interrupt flag bit, TMR3IF (PIR2<1>). This interrupt can be enabled/disabled by setting/clearing  TMR3  Interrupt  Enable  bit,  TMR3IE (PIE2<1>).\nThe Special Event Triggers from the CCP module  will not set interrupt flag bit, TMR3IF (PIR1<0>).\nTimer3 must be configured for either Timer or Synchronized Counter mode to take advantage of this feature. If  Timer3  is  running  in  Asynchronous  Counter mode, this Reset operation may not work. In the event that a write to Timer3 coincides with a Special Event Trigger from CCP1, the write will take precedence. In this mode of operation, the CCPR1H:CCPR1L  register  pair effectively becomes the period register for Timer3.",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR all = 0000. INTCON, Value on POR, BOR all = 000x. INTCON, Value on other Resets = 0000. INTCON, Value on other Resets = 000u. PIR2, Bit 7 = OSCIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR all",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\n= 00-0. PIR2, Value on POR, BOR all = 0000. PIR2, Value on other Resets = 00-0. PIR2, Value on other Resets = 0000. PIE2, Bit 7 = OSCIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR all = 00-0. PIE2, Value on POR, BOR all = 0000. PIE2, Value on other Resets = 00-0. PIE2, Value on other Resets = 0000. IPR2, Bit 7 = OSCIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP.",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nIPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR all = 11-1. IPR2, Value on POR, BOR all = 1111. IPR2, Value on other Resets = 11-1. IPR2, Value on other Resets = 1111. TMR3L, Bit 7 = Timer3 Low Byte Register. TMR3L, Bit 6 = Timer3 Low Byte Register. TMR3L, Bit 5 = Timer3 Low Byte Register. TMR3L, Bit 4 = Timer3 Low Byte Register. TMR3L, Bit 3 = Timer3 Low Byte Register. TMR3L, Bit 2 = Timer3 Low Byte Register. TMR3L, Bit 1 = Timer3 Low Byte Register. TMR3L, Bit 0 = Timer3 Low Byte Register. TMR3L, Value on POR, BOR all = xxxx. TMR3L, Value on POR,",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nBOR all = xxxx. TMR3L, Value on other Resets = uuuu. TMR3L, Value on other Resets = uuuu. TMR3H, Bit 7 = Timer3 High Byte Register. TMR3H, Bit 6 = Timer3 High Byte Register. TMR3H, Bit 5 = Timer3 High Byte Register. TMR3H, Bit 4 = Timer3 High Byte Register. TMR3H, Bit 3 = Timer3 High Byte Register. TMR3H, Bit 2 = Timer3 High Byte Register. TMR3H, Bit 1 = Timer3 High Byte Register. TMR3H, Bit 0 = Timer3 High Byte Register. TMR3H, Value on POR, BOR all = xxxx. TMR3H, Value on POR, BOR all = xxxx. TMR3H, Value on other Resets = uuuu. TMR3H, Value on other Resets = uuuu. T1CON, Bit 7 = RD16.",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nT1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR all = 0000. T1CON, Value on POR, BOR all = 0000. T1CON, Value on other Resets = u0uu. T1CON, Value on other Resets = uuuu. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 = T3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 =",
    "TABLE 14-1: REGISTERS ASSOCIATED WITH TIMER3 AS A TIMER/COUNTER\nTMR3ON. T3CON, Value on POR, BOR all = 0000. T3CON, Value on POR, BOR all = 0000. T3CON, Value on other Resets = uuuu. T3CON, Value on other Resets = uuuu\nLegend: x = unknown, u = unchanged, -= unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by the Timer3 module.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "15.0 CAPTURE/COMPARE/PWM (CCP) MODULES\nThe standard  CCP (Capture/Compare/PWM) module contains a 16-bit register that can operate as a 16-bit Capture register, a 16-bit Compare register or a PWM Master/Slave  Duty  Cycle  register.  Table 15-1  shows the  timer  resources  required  for  each  of  the  CCP module modes.\nThe operation of CCP1 is identical to that of CCP2, with the exception of the Special Event Trigger. Therefore, operation of a CCP module is described with respect to CCP1  except  where  noted.  Table 15-2  shows  the interaction of the CCP modules.\nIn 28-pin devices, both CCP1 and CCP2 function  as  standard  CCP  modules.  In 40-pin devices, CCP1 is implemented as an Enhanced CCP module, offering additional capabilities in PWM mode. Capture and  Compare  modes  are  identical  in  all modules regardless of the device.\nPlease see Section 16.0 GLYPH<147>Enhanced Capture/Compare/PWM  (ECCP)  ModuleGLYPH<148> for  a  discussion  of  the  enhanced PWM capabilities of the CCP1 module.",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/W-0 = DCxB1. GLYPH<151>, R/W-0 = DCxB0. GLYPH<151>, R/W-0 = CCPxM3. GLYPH<151>, R/W-0 = CCPxM2. GLYPH<151>, R/W-0 = CCPxM1. GLYPH<151>, R/W-0 = CCPxM0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 15-1: CCPxCON: CCPx CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5-4\nDCxB1:DCxB0 : PWM Duty Cycle Bit 1 and Bit 0 for CCPx Module\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:\nThese bits are the two LSbs (bit 1 and bit 0) of the 10-bit PWM duty cycle. The eight MSbs of the duty cycle are found in CCPR1L.\nCCPxM3:CCPxM0 : CCPx Mode Select bits\n0000 = Capture/Compare/PWM disabled (resets CCPx module)",
    "bit 7-6 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\n0001 = Reserved\n0010 = Compare mode: toggle output on match (CCPxIF bit is set)\n0011 = Reserved\n0100 = Capture mode: every falling edge\n0101 = Capture mode: every rising edge\n0110 = Capture mode: every 4th rising edge\n0111 = Capture mode: every 16th rising edge\n1000 = Compare mode: initialize CCPx pin low; on compare match, force CCPx pin high (CCPxIF bit is set)\n1001 = Compare mode: initialize CCPx pin high; on compare match, force CCPx pin low (CCPxIF bit is set)\n1010 = Compare mode: generate software interrupt on compare match (CCPxIF bit is set, CCPx pin operates as a port pin for input and output)\n1011 = Compare mode: trigger special event (CCPxIF bit is set)\n11xx = PWM mode",
    "bit 3-0\nNote:",
    "15.2 CCP2 Module\nCapture/Compare/PWM Register 1 (CCPR1) is comprised of two 8-bit registers: CCPR1L (low byte) and CCPR1H (high byte). The CCP1CON register controls the operation of CCP1. All are readable and writable.\nTABLE 15-1: CCP MODE - TIMER RESOURCE\nCapture/Compare/PWM Register 2 (CCPR2) is comprised of two 8-bit registers: CCPR2L (low byte) and CCPR2H (high byte). The CCP2CON register controls the operation of CCP2. All are readable and writable.\nCCP2  functions  identically  to  CCP1  except  for  the enhanced PWM modes offered by CCP2\nCapture Compare PWM, Timer Resource = Timer1 or Timer3 Timer1 or Timer3 Timer2",
    "TABLE 15-2: INTERACTION OF TWO CCP MODULES\nCapture, CCPy Mode = Capture. Capture, Interaction = TMR1 or TMR3 time base. Time base can be different for each CCP.. Capture, CCPy Mode = Compare. Capture, Interaction = The compare could be configured for the Special Event Trigger which clears either TMR1 or TMR3 depending upon which time base is used.. Compare, CCPy Mode = Compare. Compare, Interaction = The compare(s) could be configured for the Special Event Trigger which clears TMR1 or TMR3 depending upon which time base is used.. PWM, CCPy Mode = PWM. PWM, Interaction = The PWMs will have the same frequency and update rate (TMR2 interrupt).. PWM, CCPy Mode = Capture. PWM, Interaction = None.. PWM, CCPy Mode = Compare. PWM, Interaction = None.",
    "15.3 Capture Mode\nIn Capture mode, CCPR1H:CCPR1L captures the 16-bit value of the TMR1 or TMR3 registers when an event occurs on pin RC2/CCP1/P1A. An event is defined as one of the following:\nGLYPH<149> every falling edge\nGLYPH<149> every rising edge\nGLYPH<149> every 4th rising edge\nGLYPH<149> every 16th rising edge\nThe event is selected by control bits, CCP1M3:CCP1M0 (CCP1CON<3:0>). When a capture is made, the interrupt request flag bit, CCP1IF (PIR1<2>), is set; it must be cleared in software. If another capture occurs before the value in register CCPR1 is read, the old captured value is overwritten by the new captured value.",
    "15.3.1 CCP PIN CONFIGURATION\nIn  Capture  mode,  the  RC2/CCP1/P1A pin should be configured as an input by setting the TRISC<2> bit.\nNote:, 1 = If the RC2/CCP1/P1A is configured as an output, a write to the port can cause a capture condition.",
    "15.3.2 TIMER1/TIMER3 MODE SELECTION\nThe timers that are to be used with the capture feature (either Timer1 and/or Timer3) must be running in Timer mode  or  Synchronized  Counter  mode.  In  Asynchronous  Counter  mode,  the  capture  operation  may  not work. The timer to be used with each CCP module is selected in the T3CON register.",
    "15.3.3 SOFTWARE INTERRUPT\nWhen the Capture mode is changed, a false capture interrupt may be generated. The user should keep bit CCP1IE (PIE1<2>) clear to avoid false interrupts and should clear the flag bit, CCP1IF, following any such change in operating mode.",
    "15.3.4 CCP PRESCALER\nThere  are  four  prescaler  settings  specified  by  bits CCP1M3:CCP1M0.  Whenever  the  CCP  module  is turned off, or the CCP module is not in Capture mode, the prescaler counter is cleared. This means that any Reset will clear the prescaler counter.\nSwitching from one capture prescaler to another may generate an interrupt. Also, the prescaler counter will not be cleared, therefore, the first capture may be from a non-zero prescaler. Example 15-1 shows the recommended method for switching between capture prescalers.  This  example  also  clears  the  prescaler counter and will not generate the GLYPH<147>falseGLYPH<148> interrupt.",
    "EXAMPLE 15-1: CHANGING BETWEEN CAPTURE PRESCALERS\nCLRF MOVLW, 1 = ; Turn CCP module off ; Load WREG with the ; new prescaler mode ; value and CCP ON. MOVWF, 1 = . , 1 = ; Load CCP1CON with ; this value",
    "15.4.2 TIMER1/TIMER3 MODE SELECTION\nIn Compare mode, the 16-bit CCPR1 (CCPR2) register value is constantly compared against either the TMR1 register  pair  value,  or  the  TMR3  register  pair value.  When  a  match  occurs,  the  RC2/CCP1/P1A (RC1/T1OSI/CCP2) pin:\nGLYPH<149> Is driven high\nGLYPH<149> Is driven low\nGLYPH<149> Toggles output (high-to-low or low-to-high)\nGLYPH<149> Remains unchanged (interrupt only)\nThe action on the pin is based on the value of control bits,  CCP1M3:CCP1M0  (CCP2M3:CCP2M0).  At  the same time, interrupt flag bit, CCP1IF (CCP2IF), is set.",
    "15.4.1 CCP PIN CONFIGURATION\nThe user must configure the CCPx pin as an output by clearing the appropriate TRISC bit.\nTimer1 and/or Timer3 must be running in Timer mode, or Synchronized Counter mode, if the CCP module is using the compare feature. In Asynchronous Counter mode, the compare operation may not work.",
    "15.4.3 SOFTWARE INTERRUPT MODE\nWhen generate software interrupt is chosen, the CCP1 pin is not affected. Only a CCP interrupt is generated (if enabled).",
    "15.4.4 SPECIAL EVENT TRIGGER\nIn this mode, an internal hardware trigger is generated which may be used to initiate an action.\nThe Special Event Trigger output of CCP1 resets the TMR1 register pair. This allows the CCPR1 register to effectively be a 16-bit programmable Period register for Timer1.\nNote:, 1 = Clearing the CCP1CON register will force the RC2/CCP1/P1A compare output latch to the default low level. This is not the PORTC I/O data latch.\nThe special trigger  output  of  CCP2  resets  either  the TMR1 or TMR3 register pair.  Additionally,  the  CCP2 Special Event Trigger will start an A/D conversion if the A/D module is enabled.\nNote:, 1 = The Special Event Trigger from the CCP2 module will not set the Timer1 or Timer3 interrupt flag bits.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR,",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBOR = 0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nIPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111. TRISC, Value on POR, BOR = 1111. TRISC, Value on all other Resets = 1111. TRISC, Value on all other Resets =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n1111. TMR1L, Bit 7 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 6 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 5 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 4 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 3 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 2 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 1 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Bit 0 = Holding Register for the Least Significant Byte of the 16-bit TMR1 Register. TMR1L, Value on POR, BOR = xxxx.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR1L, Value on POR, BOR = xxxx. TMR1L, Value on all other Resets = uuuu. TMR1L, Value on all other Resets = uuuu. TMR1H, Bit 7 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 6 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 5 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 4 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 3 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 2 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Bit 1 = Holding Register for the Most Significant Byte of the 16-bit TMR1",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nRegister. TMR1H, Bit 0 = Holding Register for the Most Significant Byte of the 16-bit TMR1 Register. TMR1H, Value on POR, BOR = xxxx. TMR1H, Value on POR, BOR = xxxx. TMR1H, Value on all other Resets = uuuu. TMR1H, Value on all other Resets = uuuu. T1CON, Bit 7 = RD16. T1CON, Bit 6 = T1RUN. T1CON, Bit 5 = T1CKPS1. T1CON, Bit 4 = T1CKPS0. T1CON, Bit 3 = T1OSCEN. T1CON, Bit 2 = T1SYNC. T1CON, Bit 1 = TMR1CS. T1CON, Bit 0 = TMR1ON. T1CON, Value on POR, BOR = 0000. T1CON, Value on POR, BOR = 0000. T1CON, Value on all other Resets = uuuu.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nT1CON, Value on all other Resets = uuuu. CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on all other Resets = uuuu.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nCCPR1L, Value on all other Resets = uuuu. CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on all other Resets =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nuuuu. CCPR1H, Value on all other Resets = uuuu. CCP1CON, Bit 7 = GLYPH<151>. CCP1CON, Bit 6 = GLYPH<151>. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = --00. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Value on all other Resets = --00. CCP1CON, Value on all other Resets = 0000. CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 6 = Capture/Compare/PWM Register 2",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n(LSB). CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Value on POR, BOR = xxxx. CCPR2L, Value on POR, BOR = xxxx. CCPR2L, Value on all other Resets = uuuu. CCPR2L, Value on all other Resets = uuuu. CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 6 = Capture/Compare/PWM Register",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n2 (MSB). CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Value on POR, BOR = xxxx. CCPR2H, Value on POR, BOR = xxxx. CCPR2H, Value on all other Resets = uuuu. CCPR2H, Value on all other Resets = uuuu. CCP2CON, Bit 7 = GLYPH<151>. CCP2CON, Bit 6 = GLYPH<151>. CCP2CON, Bit 5",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n= DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Value on POR, BOR = --00. CCP2CON, Value on POR, BOR = 0000. CCP2CON, Value on all other Resets = --00. CCP2CON, Value on all other Resets = 0000. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR,",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nBOR = 00-0. PIR2, Value on POR, BOR = 0000. PIR2, Value on all other Resets = 00-0. PIR2, Value on all other Resets = 0000. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR = 00-0. PIE2, Value on POR, BOR = 0000. PIE2, Value on all other Resets = 00-0. PIE2, Value on all other Resets = 0000. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\n3 = BCLIP. IPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR = 11-1. IPR2, Value on POR, BOR = 1111. IPR2, Value on all other Resets = 11-1. IPR2, Value on all other Resets = 1111. TMR3L, Bit 7 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 6 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 5 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 4 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 3 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register.",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nTMR3L, Bit 2 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 1 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Bit 0 = Holding Register for the Least Significant Byte of the 16-bit TMR3 Register. TMR3L, Value on POR, BOR = xxxx. TMR3L, Value on POR, BOR = xxxx. TMR3L, Value on all other Resets = uuuu. TMR3L, Value on all other Resets = uuuu. TMR3H, Bit 7 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 6 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 5 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 4 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nHolding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 3 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 2 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 1 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Bit 0 = Holding Register for the Most Significant Byte of the 16-bit TMR3 Register. TMR3H, Value on POR, BOR = xxxx. TMR3H, Value on POR, BOR = xxxx. TMR3H, Value on all other Resets = uuuu. TMR3H, Value on all other Resets = uuuu. T3CON, Bit 7 = RD16. T3CON, Bit 6 = T3CCP2. T3CON, Bit 5 = T3CKPS1. T3CON, Bit 4 =",
    "TABLE 15-3: REGISTERS ASSOCIATED WITH CAPTURE, COMPARE, TIMER1 AND TIMER3\nT3CKPS0. T3CON, Bit 3 = T3CCP1. T3CON, Bit 2 = T3SYNC. T3CON, Bit 1 = TMR3CS. T3CON, Bit 0 = TMR3ON. T3CON, Value on POR, BOR = 0000. T3CON, Value on POR, BOR = 0000. T3CON, Value on all other Resets = uuuu. T3CON, Value on all other Resets = uuuu\nLegend:\nx = unknown, u = unchanged,   = unimplemented, read as GLYPH<145> -0 GLYPH<146>. Shaded cells are not used by Capture and Timer1.\nNote 1: These bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "15.5 PWM Mode\nIn Pulse Width Modulation (PWM) mode, the CCP1 pin produces up to a 10-bit resolution PWM output. Since the CCP1 pin is multiplexed with the PORTC data latch, the TRISC<2> bit must be cleared to make the CCP1 pin an output.\nNote:, 1 = Clearing the CCP1CON register will force the CCP1 PWM output latch to the default low level. This is not the PORTC I/O data latch.\nFigure 15-3  shows  a  simplified  block  diagram  of  the CCP module in PWM mode.\nFor a step-by-step procedure on how to set up the CCP module for PWM  operation, see Section 15.5.3 GLYPH<147>Setup for PWM OperationGLYPH<148> .",
    "FIGURE 15-3: SIMPLIFIED PWM BLOCK DIAGRAM\nA PWM output (Figure 15-4) has a time base ( period ) and  a  time  that  the  output  is  high  ( duty  cycle ).  The frequency  of  the  PWM  is  the  inverse  of  the  period (1/period).",
    "15.5.1 PWM PERIOD\nThe  PWM  period  is  specified  by  writing  to  the  PR2 register. The PWM period can be calculated using the following equation.",
    "EQUATION 15-1:\nPWM Period   = [(PR2) + 1] GLYPH<149> 4 GLYPH<149> T OSC GLYPH<149> (TMR2 Prescale Value)\nPWM frequency is defined as 1/[PWM period]. When TMR2 is equal to PR2, the following three events occur on the next increment cycle:\nGLYPH<149> TMR2 is cleared\nGLYPH<149> The CCP1 pin is set (if PWM duty cycle = 0%, the CCP1 pin will not be set)\nGLYPH<149> The PWM duty cycle is copied from CCPR1L into CCPR1H\nNote:\nThe Timer2 postscaler (see Section 13.0 GLYPH<147>Timer2 ModuleGLYPH<148> ) is not  used  in  the determination of the PWM frequency. The postscaler could be used to have a servo update rate at a different frequency than the PWM output.",
    "15.5.2 PWM DUTY CYCLE\nThe  PWM  duty  cycle  is  specified  by  writing  to  the CCPR1L register and to the CCP1CON<5:4> bits. Up to 10-bit resolution is available. The CCPR1L contains the eight MSbs and the CCP1CON<5:4> contains the two LSbs. This 10-bit value is represented by CCPR1L:CCP1CON<5:4>.  The  PWM  duty  cycle  is calculated by the following equation.",
    "EQUATION 15-2:\nPWM Duty Cycle = (CCPR1L:CCP1CON<5:4>) GLYPH<149> TOSC GLYPH<149> (TMR2 Prescale V alue)\nCCPR1L and CCP1CON<5:4> can be written to at any time  but  the  duty  cycle  value  is  not  copied  into CCPR1H until a match between PR2 and TMR2 occurs (i.e., the period is complete). In PWM mode, CCPR1H is a read-only register.",
    "PIC18F2220/2320/4220/4320\nThe  CCPR1H  register  and  a  2-bit  internal  latch  are used  to  double-buffer the PWM  duty  cycle.  This double-buffering is essential for glitchless PWM operation. When the CCPR1H and 2-bit latch match TMR2, concatenated with an internal 2-bit Q clock or two bits of the TMR2 prescaler, the CCP1 pin is cleared. The maximum  PWM  resolution  (bits)  for  a  given  PWM frequency is given by the following equation.",
    "EQUATION 15-3:\n<!-- formula-not-decoded -->",
    "15.5.3 SETUP FOR PWM OPERATION\nThe following steps should be taken when configuring the CCP module for PWM operation:\n1. Set the PWM period by writing to the PR2 register.\n2. Set  the  PWM  duty  cycle  by  writing  to  the CCPR1L register and the CCP1CON<5:4> bits.\n3. Make the CCP1 pin an output by clearing the TRISC<2> bit.\n4. Set the TMR2 prescale value and enable Timer2 by writing to T2CON.\n5. Configure the CCP1 module for PWM operation.\nNote:\nIf the PWM duty cycle value is longer than the PWM period, the CCP1 pin will not be cleared.",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\nTimer Prescaler (1, 4, 16), 2.44 kHz = 16. Timer Prescaler (1, 4, 16), 9.77 kHz = 4. Timer Prescaler (1, 4, 16), 39.06 kHz = 1. Timer Prescaler (1, 4, 16), 156.25 kHz = 1. Timer Prescaler (1, 4, 16), 312.50 kHz = 1. Timer Prescaler (1, 4, 16), 416.67 kHz = 1. PR2 Value, 2.44 kHz = FFh. PR2 Value, 9.77 kHz = FFh. PR2 Value, 39.06 kHz = FFh. PR2 Value, 156.25 kHz = 3Fh. PR2 Value, 312.50 kHz = 1Fh. PR2 Value, 416.67 kHz = 17h. Maximum Resolution (bits), 2.44 kHz = 10. Maximum Resolution (bits), 9.77 kHz = 10. Maximum Resolution (bits), 39.06 kHz = 10. Maximum Resolution (bits), 156.25 kHz =",
    "TABLE 15-4: EXAMPLE PWM FREQUENCIES AND RESOLUTIONS AT 40 MHz\n8. Maximum Resolution (bits), 312.50 kHz = 7. Maximum Resolution (bits), 416.67 kHz = 6.58",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on all other Resets = 000x 0000. INTCON, Value on all other Resets = 000u. INTCON,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000 0000. PIR1, Value on all other Resets = 0000. PIR1,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000 0000. PIE1, Value on all other Resets = 0000. PIE1,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111 1111. IPR1, Value on all other Resets = 1111. IPR1,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111. TRISC, Value on all other Resets = 1111 1111. TRISC, Value on all other Resets = 1111. TRISC,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . TMR2, Bit 7 = Timer2 Module Register. TMR2, Bit 6 = Timer2 Module Register. TMR2, Bit 5 = Timer2 Module Register. TMR2, Bit 4 = Timer2 Module Register. TMR2, Bit 3 = Timer2 Module Register. TMR2, Bit 2 = Timer2 Module Register. TMR2, Bit 1 = Timer2 Module Register. TMR2, Bit 0 = Timer2 Module Register. TMR2, Value on POR, BOR = 0000. TMR2, Value on all other Resets = 0000 0000. TMR2, Value on all other Resets = 0000. TMR2,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . PR2, Bit 7 = Timer2 Module Period Register. PR2, Bit 6 = Timer2 Module Period Register. PR2, Bit 5 = Timer2 Module Period Register. PR2, Bit 4 = Timer2 Module Period Register. PR2, Bit 3 = Timer2 Module Period Register. PR2, Bit 2 = Timer2 Module Period Register. PR2, Bit 1 = Timer2 Module Period Register. PR2, Bit 0 = Timer2 Module Period Register. PR2, Value on POR, BOR = 1111. PR2, Value on all other Resets = 1111 1111. PR2, Value on all other Resets = 1111. PR2,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . T2CON, Bit 7 = GLYPH<151>. T2CON, Bit 6 = TOUTPS3. T2CON, Bit 5 = TOUTPS2. T2CON, Bit 4 = TOUTPS1. T2CON, Bit 3 = TOUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000. T2CON, Value on all other Resets = 0000 -000. T2CON, Value on all other Resets = 0000. T2CON,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCPR1L, Bit 7 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 6 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 5 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 4 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 3 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 2 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 1 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Bit 0 = Capture/Compare/PWM Register 1 (LSB). CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on all other Resets = xxxx uuuu. CCPR1L, Value on all other Resets = uuuu. CCPR1L,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCPR1H, Bit 7 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 6 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 5 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 4 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 3 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 2 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 1 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Bit 0 = Capture/Compare/PWM Register 1 (MSB). CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on all other Resets = xxxx uuuu. CCPR1H, Value on all other Resets = uuuu. CCPR1H,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCP1CON, Bit 7 = GLYPH<151>. CCP1CON, Bit 6 = GLYPH<151>. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = --00. CCP1CON, Value on all other Resets = 0000 --00. CCP1CON, Value on all other Resets = 0000. CCP1CON,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCPR2L, Bit 7 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 6 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 5 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 4 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 3 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 2 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 1 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Bit 0 = Capture/Compare/PWM Register 2 (LSB). CCPR2L, Value on POR, BOR = xxxx. CCPR2L, Value on all other Resets = xxxx uuuu. CCPR2L, Value on all other Resets = uuuu. CCPR2L,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCPR2H, Bit 7 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 6 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 5 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 4 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 3 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 2 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 1 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Bit 0 = Capture/Compare/PWM Register 2 (MSB). CCPR2H, Value on POR, BOR = xxxx. CCPR2H, Value on all other Resets = xxxx uuuu. CCPR2H, Value on all other Resets = uuuu. CCPR2H,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . CCP2CON, Bit 7 = GLYPH<151>. CCP2CON, Bit 6 = GLYPH<151>. CCP2CON, Bit 5 = DC2B1. CCP2CON, Bit 4 = DC2B0. CCP2CON, Bit 3 = CCP2M3. CCP2CON, Bit 2 = CCP2M2. CCP2CON, Bit 1 = CCP2M1. CCP2CON, Bit 0 = CCP2M0. CCP2CON, Value on POR, BOR = --00. CCP2CON, Value on all other Resets = 0000 --00. CCP2CON, Value on all other Resets = 0000. CCP2CON,",
    "TABLE 15-5: REGISTERS ASSOCIATED WITH PWM AND TIMER2\n= . OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 = IRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0000. OSCCON, Value on all other Resets = qq00 0000. OSCCON, Value on all other Resets = qq00. OSCCON,  = \nLegend: x = unknown, u = unchanged, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used by PWM and Timer2.\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "PIC18F2220/2320/4220/4320\nNOTES:\nbit 5-4",
    "16.0 ENHANCED CAPTURE/ COMPARE/PWM (ECCP) MODULE\nNote:\nThe ECCP (Enhanced Capture/ Compare/ PWM) module is only available on\nPIC18F4X20 devices.\nThe ECCP module differs from the CCP with the addition of an enhanced PWM mode which allows for 2 or 4 output channels, user-selectable polarity, dead band control  and  automatic  shutdown  and  restart.  These features are discussed in detail in Section 16.4 GLYPH<147>Enhanced PWM ModeGLYPH<148> .\nIn 40  and  44-pin  devices, the CCP1  module  is implemented as a standard CCP module with enhanced PWM capabilities. Operation of the Capture, Compare and standard single output PWM modes is described  in Section 15.0  GLYPH<147>Capture/Compare/PWM (CCP) ModulesGLYPH<148> . Discussion in that section relating to PWM  frequency  and  duty  cycle  also  apply  to  the enhanced PWM mode.",
    "16.0 ENHANCED CAPTURE/ COMPARE/PWM (ECCP) MODULE\nThe control register for CCP1 is shown in Register 16-1. It  differs  from  the  CCP1CON  register  of  PIC18F2X20 devices in that the two Most  Significant bits are implemented to control enhanced PWM functionality.",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES)\nP1M1, R/W-0 = P1M0. P1M1, R/W-0 = DC1B1. P1M1, R/W-0 = DC1B0. P1M1, R/W-0 = CCP1M3. P1M1, R/W-0 = CCP1M2. P1M1, R/W-0 = CCP1M1. P1M1, R/W-0 = CCP1M0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "Legend:\nR = Readable bit\nW = Writable bit\nU = Unimplemented bit, read as GLYPH<145>0GLYPH<146>\n-n = Value at POR\nGLYPH<145>1GLYPH<146> = Bit is set\nGLYPH<145> 0GLYPH<146> = Bit is cleared\nx = Bit is unknown",
    "bit 7-6 P1M1:P1M0: PWM Output Configuration bits\nIf CCP1M3:CCP1M2 = 00 01 10 , , (Capture, Compare or disabled):\nxx = P1A assigned as Capture/Compare input; P1B, P1C, P1D assigned as port pins\nIf CCP1M3:CCP1M2 = 11 (PWM modes):\n00 = Single output: P1A modulated; P1B, P1C, P1D assigned as port pins\n01 = Full-bridge output forward: P1D modulated; P1A active; P1B, P1C inactive\n10 = Half-bridge output: P1A, P1B modulated with dead-band control; P1C, P1D assigned as port pins\n11 = Full-bridge output reverse: P1B modulated; P1C active; P1A, P1D inactive\nDC1B1:DC1B0 : PWM Duty Cycle Least Significant bits\nCapture mode:\nUnused.\nCompare mode:\nUnused.\nPWM mode:",
    "bit 7-6 P1M1:P1M0: PWM Output Configuration bits\nThese bits are the two LSbs of the 10-bit PWM duty cycle. The eight MSbs of the duty cycle are found in CCPR1L.",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES) (CONTINUED)\nbit 3-0 CCP1M3:CCP1M0: ECCP Mode Select bits\n0000 = Capture/Compare/PWM off (resets ECCP module)\n0001 = Unused (reserved)\n0010 = Compare mode, toggle output on match (CCP1IF bit is set)\n0011 = Unused (reserved)\n0100 = Capture mode, every falling edge\n0101 = Capture mode, every rising edge\n0110 = Capture mode, every 4th rising edge\n0111 = Capture mode, every 16th rising edge\n1000 = Compare mode, set output on match (CCP1IF bit is set)\n1001 = Compare mode, clear output on match (CCP1IF bit is set)\n1010 = Compare mode, generate software interrupt on match (CCP1IF bit is set, CCP1 pin operates as a port pin for input and output)\n1011 = Compare mode, trigger special event (CCP1IF bit is set, ECCP resets TMR1or TMR2 and starts an A/D conversion if the A/D module is enabled)",
    "REGISTER 16-1: CCP1CON: ECCP CONTROL REGISTER (40/44-PIN DEVICES) (CONTINUED)\n1100 = PWM mode, P1A, P1C active-high, P1B, P1D active-high\n1101 = PWM mode, P1A, P1C active-high, P1B, P1D active-low\n1110 = PWM mode, P1A, P1C active-low, P1B, P1D active-high\n1111 = PWM mode, P1A, P1C active-low, P1B, P1D active-low\nIn addition to the expanded functions of the CCP1CON register, the ECCP module has two additional registers associated with enhanced PWM operation and Auto-Shutdown features:",
    "16.2 Capture and Compare Modes\nGLYPH<149> PWM1CON\nGLYPH<149> ECCPAS\nAll other registers associated with the ECCP module are identical to those used for the CCP1  module  in PIC18F2X20 devices, including register and individual bit names. Likewise, the timer assignments and interactions between the two CCP modules are identical, regardless of whether CCP1 is a standard or enhanced module.",
    "16.1 ECCP Outputs\nThe Enhanced CCP module may have up to four outputs depending on the selected operating mode. These outputs, designated P1A through P1D, are multiplexed with I/O pins on PORTC and PORTD. The pin assignments are summarized in Table 16-1.\nThe Capture and Compare modes of the ECCP module are identical in operation to that of CCP1, as discussed in Section 15.3  GLYPH<147>Capture  ModeGLYPH<148> and Section 15.4 GLYPH<147>Compare  ModeGLYPH<148> .  No  changes  are  required  when moving between these modules on PIC18F2X20 and PIC18F4X20 devices.",
    "16.3 Standard PWM Mode\nWhen configured  in  Single  Output  mode,  the  ECCP module  functions  identically  to  the  standard  CCP module in PWM mode, as described in Section 15.4 GLYPH<147>Compare ModeGLYPH<148> .\nNote:\nTo configure I/O pins as PWM outputs, the proper PWM mode  must  be  selected  by  setting  the  P1Mx  and CCP1Mx  bits  (CCP1CON<7:6>  and  <3:0>,  respectively).  The  appropriate  TRISC  and  TRISD  direction bits for the port pins must also be set as outputs.\nWhen setting up single output PWM operations, users are free to use either of the processes described in Section 15.5.3 GLYPH<147>Setup for  PWM  OperationGLYPH<148> or Section 16.4.7 GLYPH<147> Setup for PWM OperationGLYPH<148> . The latter is more generic but will work for either single or multi output PWM.",
    "TABLE 16-1: PIN ASSIGNMENTS FOR VARIOUS ECCP MODES\nCompatible CCP, CCP1CON Configuration = 00xx11xx. Compatible CCP, RC2 = CCP1. Compatible CCP, RD5 = RD5/PSP5. Compatible CCP, RD6 = RD6/PSP6. Compatible CCP, RD7 = RD7/PSP7. Dual PWM, CCP1CON Configuration = 10xx11xx. Dual PWM, RC2 = P1A. Dual PWM, RD5 = P1B. Dual PWM, RD6 = RD6/PSP6. Dual PWM, RD7 = RD6/PSP6. Quad PWM, CCP1CON Configuration = x1xx11xx. Quad PWM, RC2 = P1A. Quad PWM, RD5 = P1B. Quad PWM, RD6 = P1C. Quad PWM, RD7 = P1D\nLegend: x = DonGLYPH<146>t care. Shaded cells indicate pin assignments not used by ECCP in a given mode.\nNote",
    "TABLE 16-1: PIN ASSIGNMENTS FOR VARIOUS ECCP MODES\n1: TRIS register values must be configured appropriately.\n2: With ECCP in Dual or Quad PWM mode, the PSP input/output control of PORTD is overridden by P1B, P1C and P1D.",
    "16.4 Enhanced PWM Mode\nThe Enhanced PWM mode provides additional PWM output options for a broader range of control applications. The module is an upwardly compatible version of the standard CCP module and offers up to four outputs, designated P1A through P1D. Users are also able to select  the  polarity  of  the  signal  (either  active-high  or active-low). The moduleGLYPH<146>s output mode and polarity are configured by setting the P1M1:P1M0 and CCP1M3:CCP1M0  bits  of  the  CCP1CON  register (CCP1CON<7:6> and CCP1CON<3:0>, respectively).\nwaveforms  do  not  exactly  match  the  standard  PWM waveforms but are instead offset by one full instruction cycle (4 TOSC).\nAs  before,  the  user  must  manually  configure  the appropriate TRISD bits for output.",
    "16.4.1 PWM OUTPUT CONFIGURATIONS\nThe P1M1:P1M0 bits in the CCP1CON register allow one of four configurations:\nGLYPH<149> Single Output\nGLYPH<149> Half-Bridge Output\nFigure 16-1 shows a simplified block diagram of PWM operation. All control registers are double-buffered and are loaded at the beginning of a new PWM cycle (the period boundary when Timer2 resets) in order to prevent glitches on any of the outputs. The exception is the PWM Delay register, ECCP1DEL, which is loaded at either the duty cycle boundary or the boundary period (whichever comes first). Because of the buffering, the module waits until the assigned timer resets instead of starting immediately. This means that enhanced PWM\nGLYPH<149> Full-Bridge Output, Forward mode\nGLYPH<149> Full-Bridge Output, Reverse mode\nThe Single Output mode is the Standard PWM mode discussed  in Section 15.5  GLYPH<147>PWM  ModeGLYPH<148> .  The  HalfBridge and Full-Bridge Output modes are covered in detail in the sections that follow.",
    "16.4.1 PWM OUTPUT CONFIGURATIONS\nThe general relationship of the outputs in all configurations is summarized in Figure 16-2.",
    "FIGURE 16-2: PWM OUTPUT RELATIONSHIPS (ACTIVE-HIGH STATE)\n00, CCP1CON <7:6> = (Single Output). 00, SIGNAL = P1A Modulated. 00, 0 = Delay (1). 00,  = Delay (1). 00, PR2+1 = . 10, CCP1CON <7:6> = (Half-Bridge). 10, SIGNAL = P1A Modulated P1B Modulated. 10, 0 = . 10,  = . 10, PR2+1 = . 01, CCP1CON <7:6> = (Full-Bridge, Forward). 01, SIGNAL = P1A Active. 01, 0 = . 01,  = . 01, PR2+1 = . 11, CCP1CON <7:6> = . 11, SIGNAL = P1B Inactive P1C Inactive. 11, 0 = . 11,  = . 11, PR2+1 = . , CCP1CON <7:6> = (Full-Bridge, Reverse). , SIGNAL = P1D Modulated P1A Inactive. , 0 = . ,",
    "FIGURE 16-2: PWM OUTPUT RELATIONSHIPS (ACTIVE-HIGH STATE)\n= . , PR2+1 = . , CCP1CON <7:6> = . , SIGNAL = P1B Modulated P1C Active. , 0 = . ,  = . , PR2+1 = ",
    "FIGURE 16-3: PWM OUTPUT RELATIONSHIPS (ACTIVE-LOW STATE)\n00, CCP1CON = (Single Output). 00, SIGNAL = P1A Modulated. 00, 0 = . 00,  = . 10, CCP1CON = (Half-Bridge). 10, SIGNAL = P1A Modulated P1B Modulated. 10, 0 = Delay (1). 10,  = Delay (1). 01, CCP1CON = (Full-Bridge, Forward). 01, SIGNAL = P1A Active. 01, 0 = . 01,  = . , CCP1CON = . , SIGNAL = P1B Inactive P1C Inactive. , 0 = . ,  = . 11, CCP1CON = (Full-Bridge,. 11, SIGNAL = P1D Modulated. 11, 0 = . 11,  = . , CCP1CON = Reverse). , SIGNAL = P1A Inactive P1B Modulated P1C Active. , 0 = . ,  = ",
    "Relationships:\nGLYPH<149> Period = 4 * TOSC * (PR2 + 1) * (TMR2 Prescale Value)\nGLYPH<149> Duty Cycle = TOSC * (CCPR1L<7:0>:CCP1CON<5:4>) * (TMR2 Prescale Value)\nGLYPH<149> Delay = 4 * TOSC * (PWM1CON<6:0>)\nNote 1: Dead band delay is programmed using the PWM1CON register (see Section 16.4.4 GLYPH<147>Programmable Dead-Band DelayGLYPH<148> ).",
    "16.4.2 HALF-BRIDGE MODE\nIn the Half-Bridge Output mode, two pins are used as outputs to drive push-pull loads. The PWM output signal is output on the RC2/CCP1/P1A pin, while the complementary PWM output signal is output on the RD5/ PSP5/P1B pin (Figure 16-4). This mode can be used for half-bridge applications, as shown in Figure 16-5, or for full-bridge applications where four power switches are being modulated with two PWM signals.\nIn  Half-Bridge Output mode, the programmable dead band  delay  can  be  used  to  prevent  shoot-through current in half-bridge power devices. The value of bits PDC6:PDC0  sets  the  number  of  instruction  cycles before the output is driven active. If the value is greater than the duty cycle, the corresponding output remains inactive  during  the  entire  cycle.  See Section 16.4.4 GLYPH<147>Programmable Dead-Band DelayGLYPH<148> for more details of the dead band delay operations.",
    "HALF-BRIDGE PWM OUTPUT\nNote 1: At this time, the TMR2 register is equal to the PR2 register.\n2: Output signals are shown as active-high.\nSince the P1A and P1B outputs are multiplexed with the  PORTC<2>  and  PORTD<5>  data  latches,  the TRISC<2>  and  TRISD<5>  bits  must  be  cleared  to configure P1A and P1B as outputs.",
    "16.4.3 FULL-BRIDGE MODE\nIn Full-Bridge Output mode, four pins are used as outputs; however, only two outputs are active at a time. In the Forward mode, pin RC2/CCP1/P1A is continuously active  and  pin  RD7/PSP7/P1D  is  modulated.  In  the Reverse  mode,  RD6/PSP6/P1C  pin  is  continuously active and RD5/PSP5/P1B pin is modulated. These are illustrated in Figure 16-6.\nP1A, P1B, P1C and P1D outputs are multiplexed with the  PORTC<2> and PORTD<5:7> data latches. The TRISC<2> and TRISD<5:7> bits  must  be  cleared  to make the P1A, P1B, P1C and P1D pins output.\nFIGURE 16-6: FULL-BRIDGE PWM OUTPUT",
    "16.4.3 FULL-BRIDGE MODE\nP1A (2), FORWARD MODE. = . P1A (2), FORWARD MODE.Period = . P1A (2), FORWARD MODE. = . P1A (2), FORWARD MODE. = . , FORWARD MODE. = Duty Cycle. , FORWARD MODE.Period = . , FORWARD MODE. = . , FORWARD MODE. = . P1B (2), FORWARD MODE. = . P1B (2), FORWARD MODE.Period = . P1B (2), FORWARD MODE. = . P1B (2), FORWARD MODE. = . P1C (2), FORWARD MODE. = . P1C (2), FORWARD MODE.Period = . P1C (2), FORWARD MODE. = . P1C (2), FORWARD MODE. = . P1D (2), FORWARD MODE. = . P1D (2), FORWARD MODE.Period = . P1D (2), FORWARD MODE. = . P1D (2), FORWARD MODE. = . , FORWARD MODE. = (1). , FORWARD MODE.Period = . , FORWARD MODE. =",
    "16.4.3 FULL-BRIDGE MODE\n(1). , FORWARD MODE. = . REVERSE, FORWARD MODE. = . REVERSE, FORWARD MODE.Period = . REVERSE, FORWARD MODE. = . REVERSE, FORWARD MODE. = . , FORWARD MODE. = Cycle. , FORWARD MODE.Period = . , FORWARD MODE. = . , FORWARD MODE. = . MODE, FORWARD MODE. = MODE. MODE, FORWARD MODE.Period = MODE. MODE, FORWARD MODE. = MODE. MODE, FORWARD MODE. = MODE. , FORWARD MODE. = . , FORWARD MODE.Period = Period. , FORWARD MODE. = . , FORWARD MODE. = . , FORWARD MODE. = Duty. , FORWARD MODE.Period = . , FORWARD MODE. = . , FORWARD MODE. = . P1A (2), FORWARD MODE. = . P1A (2), FORWARD MODE.Period = . P1A (2), FORWARD MODE. = . P1A (2), FORWARD MODE. = . P1B (2), FORWARD MODE. = . P1B (2), FORWARD MODE.Period = . P1B (2), FORWARD MODE. = . P1B (2), FORWARD MODE. =",
    "16.4.3 FULL-BRIDGE MODE\n. P1C (2), FORWARD MODE. = . P1C (2), FORWARD MODE.Period = . P1C (2), FORWARD MODE. = . P1C (2), FORWARD MODE. = . (2), FORWARD MODE. = . (2), FORWARD MODE.Period = . (2), FORWARD MODE. = . (2), FORWARD MODE. = . P1D, FORWARD MODE. = . P1D, FORWARD MODE.Period = . P1D, FORWARD MODE. = . P1D, FORWARD MODE. = . , FORWARD MODE. = (1). , FORWARD MODE.Period = . , FORWARD MODE. = (1). , FORWARD MODE. = . Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high., FORWARD MODE. = Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high.. Note 1: At this time, the TMR2 register is equal to the PR2",
    "16.4.3 FULL-BRIDGE MODE\nregister. Note 2: Output signal is shown as active-high., FORWARD MODE.Period = Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high.. Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high., FORWARD MODE. = Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high.. Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high., FORWARD MODE. = Note 1: At this time, the TMR2 register is equal to the PR2 register. Note 2: Output signal is shown as active-high.",
    "16.4.3.1 Direction Change in Full-Bridge Mode\nIn  the  Full-Bridge  Output  mode,  the  P1M1  bit  in  the CCP1CON register allows users to control the forward/ reverse direction. When  the application firmware changes  this  direction  control  bit,  the  module  will assume the new direction on the next PWM cycle.\nJust before the end of the current PWM period, the modulated outputs (P1B and P1D) are placed in their inactive state, while the unmodulated outputs (P1A and P1C) are switched to drive in the opposite direction. This occurs in a  time  interval  of  4  TOSC  *  (Timer2  Prescale  Value) before the next PWM  period  begins.  The  Timer2 prescaler  will  be  either  1,  4  or  16,  depending  on  the value  of  the  T2CKPS  bit  (T2CON<1:0>).  During  the interval from the switch of the unmodulated outputs to the beginning of the next period, the modulated outputs (P1B  and  P1D)  remain  inactive.  This  relationship  is shown in Figure 16-8.",
    "16.4.3.1 Direction Change in Full-Bridge Mode\nNote that in the Full-Bridge Output mode, the ECCP module does not provide any dead band delay. In general,  since only one output is modulated at all times, dead band delay is not required. However, there is a situation where a dead band delay might be required. This situation occurs  when  both  of  the  following conditions are true:\n1. The direction of the PWM output changes when the duty cycle of the output is at or near 100%.\n2. The turn-off time of the power switch, including the  power  device  and  driver  circuit,  is  greater than the turn-on time.",
    "16.4.3.1 Direction Change in Full-Bridge Mode\nFigure 16-9 shows an example where the PWM direction changes from forward to reverse at a near 100% duty  cycle.  At  time  t1,  the  outputs  P1A  and  P1D become inactive, while output P1C becomes active. In this  example,  since  the  turn-off  time  of  the  power devices is longer than the turn-on time, a shoot-through current may flow through power devices QC and QD (see  Figure 16-7)  for  the  duration  of  GLYPH<145>tGLYPH<146>.  The  same phenomenon will occur to power devices QA and QB for PWM direction change from reverse to forward.\nIf changing PWM direction at high duty cycle is required for  an  application,  one  of  the  following  requirements must be met:\n1. Reduce PWM  for a PWM  period before changing directions.\n2. Use switch drivers that can drive the switches off faster than they can drive them on.\nOther  options  to  prevent  shoot-through  current  may exist.",
    "FIGURE 16-8: PWM DIRECTION CHANGE\nNote 1: The direction bit in the CCP1 Control register (CCP1CON<7>) is written any time during the PWM cycle.\n2: When changing directions, the P1A and P1C signals switch before the end of the current PWM cycle at intervals of 4 TOSC, 16 TOSC or 64 TOSC, depending on the Timer2 prescaler value. The modulated P1B and P1D signals are inactive at this time.",
    "16.4.4 PROGRAMMABLE DEAD-BAND DELAY\nIn  half-bridge  applications,  where  all  power  switches are modulated at the PWM frequency at all times, the power switches normally require more time to turn off than  to  turn  on.  If  both  the  upper  and  lower  power switches are switched at the same time (one turned on and the other turned off), both switches may be on for a short period of time until one switch completely turns off. During this brief interval, a very high current ( shootthrough current ) may flow through both power switches,  shorting  the  bridge  supply.  To  avoid  this potentially destructive shoot-through current from flowing  during  switching,  turning  on  either  of  the  power switches is normally delayed to allow the other switch to completely turn off.",
    "16.4.4 PROGRAMMABLE DEAD-BAND DELAY\nA shutdown event can be caused by either of the two comparator modules or the INT0 pin (or any combination of these three sources). The comparators may be used to monitor a voltage input proportional to a current being  monitored  in  the  bridge  circuit.  If  the  voltage exceeds  a  threshold,  the  comparator  switches  state and triggers a shutdown. Alternatively, a digital signal on the INT0 pin can also trigger a shutdown. The autoshutdown feature can be disabled by not selecting any auto-shutdown sources. The auto-shutdown sources to be used are selected using the ECCPAS2:ECCPAS0 bits (ECCPAS<6:4>).\nIn  the  Half-Bridge  Output  mode,  a  digitally  programmable  dead  band  delay  is  available  to  avoid  shootthrough  current  from  destroying  the  bridge  power switches. The delay occurs at the signal transition from the non-active state to the active state. See Figure 16-4 for illustration. The lower seven bits of the PWM1CON register (Register 16-2) set the delay period in terms of microcontroller instruction cycles (TCY or 4 TOSC).",
    "16.4.5 ENHANCED PWM AUTO-SHUTDOWN\nWhen a shutdown occurs, the output pins  are  asynchronously placed in their shutdown states, specified by the PSSAC1:PSSAC0 and PSSBD1:PSSBD0 bits (ECCPAS<3:0>).  Each  pin  pair  (P1A/P1C  and  P1B/ P1D) may be set to drive high, drive low or be tri-stated (not driving). The ECCPASE bit (ECCPAS<7>) is also set to hold the enhanced  PWM  outputs  in  their shutdown states.\nThe ECCPASE bit is set by hardware when a shutdown event occurs. If automatic restarts are not enabled, the ECCPASE bit is cleared by firmware when the cause of the shutdown clears. If automatic restarts are enabled, the  ECCPASE  bit  is  automatically  cleared  when  the cause of the auto-shutdown has cleared.",
    "16.4.5 ENHANCED PWM AUTO-SHUTDOWN\nWhen  the  ECCP  is  programmed  for  any  of  the enhanced PWM modes, the active output pins may be configured for auto-shutdown. Auto-shutdown immediately  places  the  enhanced  PWM  output  pins  into  a defined shutdown state when  a shutdown event occurs.\nIf the ECCPASE bit is set when a PWM period begins, the PWM outputs remain in their shutdown state for that entire PWM period. When the ECCPASE bit is cleared, the PWM outputs will return to normal operation at the beginning of the next PWM period.\nNote:\nWriting  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.",
    "REGISTER 16-2: PWM1CON: PWM CONFIGURATION REGISTER\nPRSEN, R/W-0 = PDC6. PRSEN, R/W-0 = PDC5. PRSEN, R/W-0 = PDC4. PRSEN, R/W-0 = PDC3. PRSEN, R/W-0 = PDC2. PRSEN, R/W-0 = PDC1. PRSEN, R/W-0 = PDC0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-2: PWM1CON: PWM CONFIGURATION REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nPRSEN: PWM Restart Enable bit\n1 = Upon auto-shutdown, the ECCPASE bit clears automatically once the shutdown event goes away; the PWM restarts automatically\n0 = Upon auto-shutdown, ECCPASE must be cleared in software to restart the PWM",
    "PWM Delay Count bits\nDelay time, in number of FOSC/4 (4 * TOSC) cycles, between the scheduled time when a PWM signal should transition to active and the actual time it transitions active.",
    "REGISTER 16-3: ECCPAS: ENHANCED CAPTURE/COMPARE/PWM AUTO-SHUTDOWN CONTROL REGISTER\nECCPASE, R/W-0 = ECCPAS2. ECCPASE, R/W-0 = ECCPAS1. ECCPASE, R/W-0 = ECCPAS0. ECCPASE, R/W-0 = PSSAC1. ECCPASE, R/W-0 = PSSAC0. ECCPASE, R/W-0 = PSSBD1. ECCPASE, R/W-0 = PSSBD0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 16-3: ECCPAS: ENHANCED CAPTURE/COMPARE/PWM AUTO-SHUTDOWN CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nECCPASE: ECCP Auto-Shutdown Event Status bit\n1 = A shutdown event has occurred; ECCP outputs are in shutdown state\n0 = ECCP outputs are operating\nbit 6-4\nECCPAS<2:0>: ECCP Auto-Shutdown Source Select bits",
    "REGISTER 16-3: ECCPAS: ENHANCED CAPTURE/COMPARE/PWM AUTO-SHUTDOWN CONTROL REGISTER\n000 = Auto-shutdown is disabled\n001 = Comparator 1 output\n010 = Comparator 2 output\n011 = Either Comparator 1 or 2\n100 = INT0\n101 = INT0 or Comparator 1\n110 = INT0 or Comparator 2\n111 = INT0 or Comparator 1 or Comparator 2\nbit 3-2\nPSSAC<1:0>: Pin A and C Shutdown State Control bits\n00 = Drive Pins A and C to GLYPH<145> 0 GLYPH<146>\n01 = Drive Pins A and C to GLYPH<145> 1 GLYPH<146>\n1x = Pins A and C tri-state",
    "bit 1-0\nPSSBD<1:0>: Pin B and D Shutdown State Control bits\n00 = Drive Pins B and D to GLYPH<145> 0 GLYPH<146>\n01 = Drive Pins B and D to GLYPH<145> 1 GLYPH<146>\n1x = Pins B and D tri-state",
    "16.4.5.1 Auto-Shutdown and Automatic Restart\nThe auto-shutdown feature can be configured to allow automatic restarts of the module following a shutdown event. This is enabled by setting the PRSEN bit of the PWM1CON register (PWM1CON<7>).\nIn Shutdown mode with PRSEN = 1 (Figure 16-10), the ECCPASE bit will remain set for as long as the cause of the shutdown continues. When the shutdown condition clears, the ECCPASE bit is cleared. If PRSEN = 0 (Figure 16-11), once a shutdown condition occurs, the ECCPASE bit will remain set until it is cleared by firmware. Once ECCPASE is cleared, the enhanced PWM will resume at the beginning of the next PWM period.\nNote: Writing  to  the  ECCPASE  bit  is  disabled while a shutdown condition is active.\nIndependent  of  the  PRSEN  bit  setting,  if  the  autoshutdown source is one of the comparators, the shutdown condition is a level. The ECCPASE bit cannot be cleared as long as the cause of the shutdown persists.",
    "16.4.5.1 Auto-Shutdown and Automatic Restart\nThe Auto-Shutdown mode can be forced by writing a GLYPH<145> 1 GLYPH<146> to the ECCPASE bit.",
    "16.4.6 START-UP CONSIDERATIONS\nWhen the ECCP module is used in the PWM mode, the application hardware must use the proper external pullup and/or pull-down resistors on the PWM output pins. When the microcontroller is released from Reset, all of the I/O pins are in the high-impedance state. The external circuits must keep the power switch devices in the off state until the microcontroller drives the I/O pins with the proper signal levels or activates the PWM output(s).\nThe  CCP1M1:CCP1M0  bits  (CCP1CON<1:0>)  allow the user to choose whether the PWM output signals are active-high or active-low for each pair of PWM output pins (P1A/P1C and P1B/P1D). The PWM output polarities must be selected before the PWM pins are configured  as  outputs.  Changing  the  polarity  configuration while the PWM pins are configured as outputs is not recommended  since  it  may  result  in  damage  to  the application circuits.",
    "16.4.6 START-UP CONSIDERATIONS\nThe P1A, P1B, P1C and P1D output latches may not be in the proper states when the PWM module is initialized. Enabling the PWM pins for output at the same time as the ECCP module may cause damage to the application circuit. The ECCP module must be enabled in the proper output mode and complete a full PWM cycle before configuring the PWM pins as outputs. The completion of a full PWM cycle is indicated by the TMR2IF bit being set as the second PWM period begins.\nFIGURE 16-10:\nPWM AUTO-SHUTDOWN (PRSEN =  , AUTO-RESTART ENABLED)\n1",
    "16.4.7 SETUP FOR PWM OPERATION\nThe following steps should be taken when configuring the ECCP module for PWM operation:",
    "16.4.8 OPERATION IN POWER-MANAGED MODES\n1. Configure  the  PWM  pins  P1A  and  P1B  (and P1C and P1D, if used) as inputs by setting the corresponding TRISC and TRISD bits.\n2. Set the PWM period by loading the PR2 register.\n3. Configure  the  ECCP  module  for  the  desired PWM  mode  and  configuration  by  loading  the CCP1CON register with the appropriate values:\nGLYPH<149> Select one of the available output configurations and direction with the P1M1:P1M0 bits.\nGLYPH<149> Select the polarities of the PWM output signals with the CCP1M3:CCP1M0 bits.\n4. Set the PWM duty cycle by loading the CCPR1L register and CCP1CON<5:4> bits.\n5. For Half-Bridge Output mode, set the dead band delay  by  loading  PWM1CON<6:0>  with  the appropriate value.\n6. If auto-shutdown operation is required, load the ECCPAS register:",
    "16.4.8 OPERATION IN POWER-MANAGED MODES\nGLYPH<149> Select the auto-shutdown sources using the ECCPAS<2:0> bits.\nGLYPH<149> Select the shutdown states of the PWM output pins using PSSAC1:PSSAC0 and PSSBD1:PSSBD0 bits.\nGLYPH<149> Set the ECCPASE bit (ECCPAS<7>).\nGLYPH<149> Configure the comparators using the CMCON register.\nGLYPH<149> Configure the comparator inputs as analog inputs.\n7. If auto-restart  operation  is  required,  set  the PRSEN bit (PWM1CON<7>).\n8. Configure and start TMR2:\nGLYPH<149> Clear the TMR2 interrupt flag bit by clearing the TMR2IF bit (PIR1<1>).\nGLYPH<149> Set the TMR2 prescale value by loading the T2CKPS bits (T2CON<1:0>).",
    "16.4.8 OPERATION IN POWER-MANAGED MODES\nGLYPH<149> Enable Timer2 by setting the TMR2ON bit (T2CON<2>).\n9. Enable  PWM outputs after  a  new  PWM  cycle has started:\nGLYPH<149> Wait until TMR2 overflows (TMR2IF bit is set).\nGLYPH<149> Enable the CCP1/P1A, P1B, P1C and/or P1D pin outputs by clearing the respective TRISC and TRISD bits.\nGLYPH<149> Clear the ECCPASE bit (ECCPAS<7>).\nIn Sleep mode, all clock sources are disabled. Timer2 will not increment and the state of the module will not change. If the ECCP pin is driving a value, it will continue to drive that value. When the device wakes up, it will continue from this state. If Two-Speed Start-ups are enabled,  the  initial  start-up  frequency  from  INTOSC and the postscaler may not be stable immediately.\nIn PRI_IDLE mode, the primary clock will continue to clock the ECCP module without change.",
    "16.4.8 OPERATION IN POWER-MANAGED MODES\nIn all other power-managed  modes,  the  selected power-managed mode clock will clock Timer2. Other power-managed  mode  clocks  will most likely be different than the primary clock frequency.",
    "16.4.8.1 OPERATION WITH FAIL-SAFE CLOCK MONITOR\nIf the Fail-Safe Clock Monitor is enabled (CONFIG1H<6>  is  programmed),  a  clock  failure  will force  the  device  into  the  power-managed  RC_RUN mode and the OSCFIF bit (PIR2<7>) will be set. The ECCP will then be clocked from the internal oscillator clock source which may  have a different clock frequency  than  the  primary  clock.  By  loading  the IRCF2:IRCF0  bits  on  Resets,  the  user  can  obtain  a frequency higher than the default INTRC clock source in the event of a clock failure.\nSee the previous section for additional details.",
    "16.4.9 EFFECTS OF A RESET\nBoth  Power-on  and  subsequent  Resets  will  force  all ports  to  Input  mode  and  the  CCP  registers  to  their Reset states.\nThis forces the Enhanced CCP module to reset to a state compatible with the standard CCP module.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. RCON, Bit 7 = IPEN. RCON, Bit 6 = GLYPH<151>. RCON, Bit 5 = GLYPH<151>. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. RCON, Value on POR, BOR = 0--1. RCON, Value on POR, BOR =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\n11q0. RCON, Value on all other Resets = 0--q. RCON, Value on all other Resets = qquu. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nTMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. TMR2, Bit 7 = Timer2 Module Register. TMR2, Bit 6 = Timer2 Module",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nRegister. TMR2, Bit 5 = Timer2 Module Register. TMR2, Bit 4 = Timer2 Module Register. TMR2, Bit 3 = Timer2 Module Register. TMR2, Bit 2 = Timer2 Module Register. TMR2, Bit 1 = Timer2 Module Register. TMR2, Bit 0 = Timer2 Module Register. TMR2, Value on POR, BOR = 0000. TMR2, Value on POR, BOR = 0000. TMR2, Value on all other Resets = 0000. TMR2, Value on all other Resets = 0000. PR2, Bit 7 = Timer2 Module Period Register. PR2, Bit 6 = Timer2 Module Period Register. PR2, Bit 5 = Timer2 Module Period Register. PR2, Bit 4 = Timer2 Module Period Register. PR2, Bit 3 = Timer2 Module Period Register. PR2, Bit 2 = Timer2 Module Period Register. PR2, Bit 1 = Timer2 Module Period Register. PR2, Bit 0 = Timer2 Module Period Register. PR2, Value on",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nPOR, BOR = 1111. PR2, Value on POR, BOR = 1111. PR2, Value on all other Resets = 1111. PR2, Value on all other Resets = 1111. T2CON, Bit 7 = GLYPH<151>. T2CON, Bit 6 = TOUTPS3. T2CON, Bit 5 = TOUTPS2. T2CON, Bit 4 = TOUTPS1. T2CON, Bit 3 = TOUTPS0. T2CON, Bit 2 = TMR2ON. T2CON, Bit 1 = T2CKPS1. T2CON, Bit 0 = T2CKPS0. T2CON, Value on POR, BOR = -000. T2CON, Value on POR, BOR = 0000. T2CON, Value on all other Resets = -000. T2CON, Value on all other Resets = 0000. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nTRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111. TRISC, Value on POR, BOR = 1111. TRISC, Value on all other Resets = 1111. TRISC, Value on all other Resets = 1111. TRISD, Bit 7 = PORTD Data Direction Register. TRISD, Bit 6 = PORTD Data Direction Register. TRISD, Bit 5 = PORTD Data Direction Register. TRISD, Bit 4 = PORTD Data Direction Register. TRISD, Bit 3 = PORTD Data Direction Register. TRISD, Bit 2 = PORTD Data Direction Register. TRISD, Bit 1 = PORTD Data Direction Register. TRISD, Bit 0 = PORTD Data Direction Register. TRISD, Value on POR, BOR = 1111. TRISD, Value on POR, BOR = 1111. TRISD, Value on all other",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nResets = 1111. TRISD, Value on all other Resets = 1111. CCPR1H, Bit 7 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 6 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 5 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 4 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 3 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 2 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 1 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Bit 0 = Enhanced Capture/Compare/PWM Register 1 High Byte. CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on POR, BOR = xxxx. CCPR1H, Value on all other Resets = uuuu. CCPR1H, Value on",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nall other Resets = uuuu. CCPR1L, Bit 7 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 6 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 5 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 4 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 3 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 2 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 1 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Bit 0 = Enhanced Capture/Compare/PWM Register 1 Low Byte. CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on POR, BOR = xxxx. CCPR1L, Value on all other Resets = uuuu. CCPR1L, Value on all other Resets =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nuuuu. CCP1CON, Bit 7 = P1M1. CCP1CON, Bit 6 = P1M0. CCP1CON, Bit 5 = DC1B1. CCP1CON, Bit 4 = DC1B0. CCP1CON, Bit 3 = CCP1M3. CCP1CON, Bit 2 = CCP1M2. CCP1CON, Bit 1 = CCP1M1. CCP1CON, Bit 0 = CCP1M0. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Value on POR, BOR = 0000. CCP1CON, Value on all other Resets = 0000. CCP1CON, Value on all other Resets = 0000. ECCPAS, Bit 7 = ECCPASE. ECCPAS, Bit 6 = ECCPAS2. ECCPAS, Bit 5 = ECCPAS1. ECCPAS, Bit 4 = ECCPAS0. ECCPAS, Bit 3 = PSSAC1. ECCPAS, Bit 2 =",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nPSSAC0. ECCPAS, Bit 1 = PSSBD1. ECCPAS, Bit 0 = PSSBD0. ECCPAS, Value on POR, BOR = 0000. ECCPAS, Value on POR, BOR = 0000. ECCPAS, Value on all other Resets = 0000. ECCPAS, Value on all other Resets = 0000. PWM1CON, Bit 7 = PRSEN. PWM1CON, Bit 6 = PDC6. PWM1CON, Bit 5 = PDC5. PWM1CON, Bit 4 = PDC4. PWM1CON, Bit 3 = PDC3. PWM1CON, Bit 2 = PDC2. PWM1CON, Bit 1 = PDC1. PWM1CON, Bit 0 = PDC0. PWM1CON, Value on POR, BOR = 0000. PWM1CON, Value on POR, BOR = 0000. PWM1CON, Value on all other Resets = 0000.",
    "TABLE 16-2: REGISTERS ASSOCIATED WITH ENHANCED PWM AND TIMER2\nPWM1CON, Value on all other Resets = 0000. OSCCON, Bit 7 = IDLEN. OSCCON, Bit 6 = IRCF2. OSCCON, Bit 5 = IRCF1. OSCCON, Bit 4 = IRCF0. OSCCON, Bit 3 = OSTS. OSCCON, Bit 2 = IOFS. OSCCON, Bit 1 = SCS1. OSCCON, Bit 0 = SCS0. OSCCON, Value on POR, BOR = 0000. OSCCON, Value on POR, BOR = q000. OSCCON, Value on all other Resets = 0000. OSCCON, Value on all other Resets = q000\nLegend:\nx = unknown, u = unchanged, -= unimplemented, read as GLYPH<145> 0 GLYPH<146>.\nShaded cells are not used by the ECCP module in enhanced PWM mode.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "17.1 Master SSP (MSSP) Module Overview\nThe Master Synchronous Serial Port (MSSP) module is a serial interface useful for communicating with other peripheral or microcontroller devices. These peripheral devices may be serial EEPROMs, shift registers, display drivers, A/D converters, etc. The MSSP module can operate in one of two modes:\nGLYPH<149> Serial Peripheral Interface (SPI)\nGLYPH<149> Inter-Integrated Circuit (I 2 C)\n-Full Master mode\n-Slave mode (with general address call)\nThe  I 2 C  interface  supports  the  following  modes  in hardware:\nGLYPH<149> Master mode\nGLYPH<149> Multi-Master mode\nGLYPH<149> Slave mode",
    "17.2 Control Registers\nThe  MSSP  module  has  three  associated  registers. These  include  a  status  register  (SSPSTAT)  and  two control registers (SSPCON1 and SSPCON2). The use of these registers and their individual Configuration bits differ  significantly,  depending  on  whether  the  MSSP module is operated in SPI or I 2 C mode.\nAdditional  details  are  provided  under  the  individual sections.",
    "17.3 SPI Mode\nThe SPI mode allows 8 bits of data to be synchronously transmitted and  received, simultaneously. All four modes of SPI are supported. To accomplish communication, typically three pins are used:\nGLYPH<149> Serial Data Out (SDO) GLYPH<150> RC5/SDO\nGLYPH<149> Serial Data In (SDI) GLYPH<150> RC4/SDI/SDA\nGLYPH<149> Serial Clock (SCK) GLYPH<150> RC3/SCK/SCL\nAdditionally, a fourth pin may be used when in a Slave mode of operation:\n- GLYPH<149> Slave Select (SS) GLYPH<150> RA5/AN4/SS/LVDIN/C2OUT\nRegister 17-1 shows the block diagram of the MSSP module when operating in SPI mode.",
    "17.3.1 REGISTERS\nThe  MSSP  module  has  four  registers  for  SPI  mode operation. These are:\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.\nGLYPH<149> MSSP Control Register 1 (SSPCON1)\nGLYPH<149> MSSP Status Register (SSPSTAT)\nGLYPH<149> Serial Receive/Transmit Buffer (SSPBUF)\nGLYPH<149> MSSP Shift Register (SSPSR) GLYPH<150> Not directly accessible\nSSPCON1 and SSPSTAT are the control and status registers in SPI mode operation. The SSPCON1 register is readable and writable. The lower six bits of the SSPSTAT  are  read-only.  The  upper  two  bits  of  the SSPSTAT are read/write.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.",
    "17.3.1 REGISTERS\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nR/W-0, 1 = R/W-0. R/W-0, 2 = R-0. R/W-0, 3 = R-0. R/W-0, 4 = R-0. R/W-0, 5 = R-0. R/W-0, 6 = R-0. R/W-0, 7 = R-0. SMP, 1 = CKE. SMP, 2 = D/A. SMP, 3 = P. SMP, 4 = S. SMP, 5 = R/W. SMP, 6 = UA. SMP, 7 = BF. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 17-1: SSPSTAT: MSSP STATUS REGISTER (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Sample bit\nSPI Master mode:\n1 = Input data sampled at end of data output time\n0 = Input data sampled at middle of data output time\nSPI Slave mode:\nSMP must be cleared when SPI is used in Slave mode.\nbit 6\nCKE: SPI Clock Edge Select bit\nWhen CKP = 0 :\n1 = Data transmitted on rising edge of SCK\n0 = Data transmitted on falling edge of SCK",
    "When CKP = 1 :\n1 = Data transmitted on falling edge of SCK\n0 = Data transmitted on rising edge of SCK",
    "bit 5\nD/A: Data/Address bit\nUsed in I 2 C mode only.",
    "bit 4\nP: Stop bit\nUsed in I 2 C mode only.\nbit 3\nS: Start bit\nUsed in I 2 C mode only.",
    "bit 2 R/W:\nRead/Write Information bit\nUsed in I 2 C mode only.",
    "bit 1\nUA: Update Address bit\nUsed in I 2 C mode only.\nbit 0 BF: Buffer Full Status bit (Receive mode only)\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty\nbit 3-0",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nWCOL, R/W-0 = SSPOV (1). WCOL, R/W-0 = SSPEN (2). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3 (3). WCOL, R/W-0 = SSPM2 (3). WCOL, R/W-0 = SSPM1 (3). WCOL, R/W-0 = SSPM0 (3). bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-2: SSPCON1: MSSP CONTROL REGISTER 1 (SPI MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit (Transmit mode only)\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision\n(1)",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nSPI Slave mode:\n1 = A new byte is received while the SSPBUF register is still holding the previous data. In case of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user must read the SSPBUF, even if only transmitting data, to avoid setting overflow (must be cleared in software).\n0 = No overflow",
    "bit 5 SSPEN: Master Synchronous Serial Port Enable bit\n(2)\n1 = Enables serial port and configures SCK, SDO, SDI and SS as serial port pins\n0 = Disables serial port and configures these pins as I/O port pins",
    "bit 4 CKP: Clock Polarity Select bit\n1 = Idle state for clock is a high level\n0 = Idle state for clock is a low level\nSSPM3:SSPM0: Master Synchronous Serial Port Mode Select bits (3)\n0101 = SPI Slave mode, clock = SCK pin, SS pin control disabled, SS can be used as I/O pin\n0100 = SPI Slave mode, clock = SCK pin, SS pin control enabled\n0011 = SPI Master mode, clock = TMR2 output/2\n0010 = SPI Master mode, clock = FOSC/64\n0001 = SPI Master mode, clock = FOSC/16\n0000 = SPI Master mode, clock = FOSC/4\nNote 1: In Master mode, the overflow bit is not set since each new reception (and transmission) is initiated by writing to the SSPBUF register.\n2: When the MSSP is enabled in SPI mode, these pins must be properly configured as input or output.\n3: Bit combinations not specifically listed here are either reserved or implemented in I 2 CGLYPH<153> mode only.",
    "17.3.2 OPERATION\nWhen initializing the SPI, several options need to be specified. This is done by programming the appropriate control  bits  (SSPCON1<5:0>  and  SSPSTAT<7:6>). These control bits allow the following to be specified:\nSSPBUF register during transmission/reception of data will  be  ignored  and  the  Write  Collision  Detect  bit, WCOL  (SSPCON1<7>),  will  be  set.  User  software must clear the WCOL bit so that it can be determined if the following write(s) to the SSPBUF register completed successfully.\nGLYPH<149> Master mode (SCK is the clock output)\nGLYPH<149> Slave mode (SCK is the clock input)\nGLYPH<149> Clock Polarity (Idle state of SCK)\nGLYPH<149> Data Input Sample Phase (middle or end of data output time)\nGLYPH<149> Clock Edge (output data on rising/falling edge of SCK)\nGLYPH<149> Clock Rate (Master mode only)\nGLYPH<149> Slave Select mode (Slave mode only)",
    "17.3.2 OPERATION\nThe MSSP consists of a Transmit/Receive Shift register  (SSPSR)  and  a  Buffer  register  (SSPBUF).  The SSPSR shifts the data in and out of the device, MSb first. The SSPBUF holds the data that was written to the SSPSR until the received data is ready. Once the 8 bits of data have been received, that byte is moved to the SSPBUF register. Then the Buffer Full Detect bit, BF (SSPSTAT<0>), and the interrupt flag bit, SSPIF, are set. This double-buffering of the received data (SSPBUF) allows the next byte to start reception before reading the data that was just received. Any write to the",
    "17.3.2 OPERATION\nWhen the application software is expecting to receive valid data, the SSPBUF should be read before the next byte of data to transfer is written to the SSPBUF. Buffer Full bit,  BF (SSPSTAT<0>), indicates when SSPBUF has been loaded with the received data (transmission is complete). When the SSPBUF is read, the BF bit is cleared. This data may be irrelevant if the SPI is only a transmitter.  Generally,  the  MSSP  interrupt  is  used  to determine when the transmission/reception has completed. The SSPBUF must be read and/or written. If the interrupt method is not going to be used, then software polling can be done to ensure that a write collision does not  occur.  Example 17-1  shows  the  loading  of  the SSPBUF (SSPSR) for data transmission.\nThe SSPSR is not directly readable or writable and can only be accessed by addressing the SSPBUF register. Additionally,  the  MSSP  Status  register  (SSPSTAT) indicates the various status conditions.",
    "EXAMPLE 17-1: LOADING THE SSPBUF (SSPSR) REGISTER\nLOOP, 1 = BTFSS BRA. LOOP, 2 = SSPSTAT, BF LOOP. LOOP, 3 = ;Has data been received(transmit complete)? ;No. , 1 = MOVF. , 2 = SSPBUF, W. , 3 = ;WREG reg = contents of SSPBUF. , 1 = MOVWF. , 2 = RXDATA. , 3 = ;Save in user RAM, if data is meaningful. , 1 = MOVF. , 2 = TXDATA, W. , 3 = ;W reg = contents of TXDATA. , 1 = MOVWF. , 2 = SSPBUF. , 3 = ;New data to xmit",
    "17.3.3 ENABLING SPI I/O\nTo  enable  the  serial  port,  MSSP  Enable  bit,  SSPEN (SSPCON1<5>), must be set. To reset or reconfigure SPI  mode,  clear the SSPEN  bit,  re-initialize the SSPCON registers and then set the SSPEN bit. This configures the SDI, SDO, SCK and SS pins as serial port pins. For the pins to behave as the serial port function,  some must have their data direction bits (in the TRIS register) appropriately programmed. That is:\nGLYPH<149> SDI must have TRISC<4> bit cleared\nGLYPH<149> SDO must have TRISC<5> bit cleared\nGLYPH<149> SCK (Master mode) must have TRISC<3> bit cleared\nGLYPH<149> SCK (Slave mode) must have TRISC<3> bit set\nGLYPH<149> SS must have TRISA<5> bit set",
    "17.3.4 TYPICAL CONNECTION\nRegister 17-2 shows a typical connection between two microcontrollers. The  master controller (Processor 1) initiates the data transfer by sending the SCK signal. Data is shifted out of both shift registers on their programmed clock edge and latched on the opposite edge of the clock. Both processors should be programmed to the same Clock Polarity (CKP), then both controllers would  send  and  receive  data  at  the  same  time. Whether  the  data  is  meaningful  (or  dummy  data) depends  on  the  application  software.  This  leads  to three scenarios for data transmission:\nGLYPH<149> Master sends data GLYPH<150> Slave sends dummy data\nGLYPH<149> Master sends data GLYPH<150> Slave sends data\nGLYPH<149> Master sends dummy data GLYPH<150> Slave sends data\nAny serial port function that is not desired may be overridden by programming the corresponding data direction (TRIS) register to the opposite value.",
    "17.3.5 MASTER MODE\nThe master can initiate the data transfer at any time because it controls the SCK. The master determines when  the  slave (Processor 2, Figure 17-2) is to broadcast data by the software protocol.\nIn  Master  mode,  the  data  is  transmitted/received  as soon as the SSPBUF register is written to. If the SPI is only  going  to  receive,  the  SDO  output  could  be  disabled (programmed as an input). The SSPSR register will continue to shift in the signal present on the SDI pin at the programmed  clock  rate.  As  each  byte is received, it will be loaded into the SSPBUF register as if  a  normal  received  byte  (interrupts  and  status  bits appropriately  set).  This  could  be  useful  in  receiver applications as a GLYPH<147>Line Activity MonitorGLYPH<148> mode.\nThe clock polarity is selected by appropriately programming  the  CKP  bit  (SSPCON1<4>).  This  then,  would give waveforms for SPI communication, as shown in",
    "17.3.5 MASTER MODE\nFigure 17-3,  Figure 17-5  and  Figure 17-6,  where  the MSB is transmitted first. In Master mode, the SPI clock rate (bit rate) is user-programmable to be one of the following:\nGLYPH<149> FOSC/4 (or TCY)\nGLYPH<149> FOSC/16 (or 4 GLYPH<149> T CY)\nGLYPH<149> FOSC/64 (or 16 GLYPH<149> T CY)\nGLYPH<149> (Timer2 output)/2\nThe  maximum  data  rate  is  approximately  3.0 Mbps, limited by timing requirements (see Table 26-14 through Table 26-17).\nFigure 17-3  shows  the  waveforms  for  Master  mode. When the CKE bit is set, the SDO data is valid before there is a clock edge on SCK. The change of the input sample is shown based on the state of the SMP bit. The time  when  the  SSPBUF  is  loaded  with  the  received data is shown.",
    "17.3.6 SLAVE MODE\nIn Slave mode, the data is transmitted and received as the external clock pulses appear on SCK. When the last bit is latched, the SSPIF interrupt flag bit is set.\nWhile in Slave mode, the external clock is supplied by the external clock source on the SCK pin. This external clock must meet the minimum high and low times as specified in the electrical specifications.\nWhile in power-managed modes, the slave can transmit/receive data. When a byte is received, the device will wake-up from power-managed modes.",
    "17.3.7 SLAVE SELECT CONTROL\nis tri-stated, even if in the middle of a transmitted byte. External pull-up/pull-down resistors may be desirable, depending on the application.\nNote 1: When the SPI is in Slave mode with SS pin control enabled (SSPCON1<3:0> = 0100 ), the SPI module will reset when the SS pin is set high.\n2: If the SPI is used in Slave mode with CKE set,  then  the  SS  pin  control  must  be enabled.\nWhen the SPI module resets, SSPSR is cleared. This can be done by either driving the SS pin to a high level or clearing the SSPEN bit.\nThe SS pin allows a master controller to select one of several  slave  controllers  for  communications  in  systems with more than one slave. The SPI must be in Slave mode with SS pin control enabled (SSPCON1<3:0> = 04h). The SS pin is configured for input  by  setting  TRISA<5>.  When the  SS  pin  is  low, transmission and reception are enabled and the SDO pin is driven. When the SS pin goes high, the SDO pin",
    "17.3.7 SLAVE SELECT CONTROL\nTo emulate two-wire communication, the SDO pin can be connected to the SDI pin. When the SPI needs to operate as a receiver the SDO pin can be configured as an input.  This  disables  transmissions from  the  SDO. The SDI can always be left as an input (SDI function) since it cannot create a bus conflict.",
    "PIC18F2220/2320/4220/4320\nFIGURE 17-6:\nSPI MODE WAVEFORM (SLAVE MODE WITH CKE =\n)\n1",
    "17.3.8 MASTER IN POWER-MANAGED MODES\nIn Master mode, module clocks may be operating at a different speed than when in full-power mode, or in the case of the power-managed Sleep mode, all clocks are halted.\nIn most power-managed modes, a clock is provided to  the  peripherals  and  is  derived  from  the  primary clock source, the secondary clock (Timer1 oscillator at 32.768 kHz) or the internal oscillator block (one of eight frequencies between 31 kHz and 8 MHz). See Section 2.7 GLYPH<147>Clock Sources and Oscillator SwitchingGLYPH<148> for additional information.\nIn  most cases, the speed that the master clocks SPI data is not important; however, this should be evaluated for each system.\nIf MSSP interrupts are enabled, they can wake the controller from a power-managed mode when the master completes  sending  data.  If  an  exit  from  a  powermanaged mode is not desired, MSSP interrupts should be disabled.",
    "17.3.8 MASTER IN POWER-MANAGED MODES\nIf  the  Sleep  mode  is  selected,  all  module  clocks  are halted and the transmission/reception will pause until the  device  wakes  from  the  power-managed  mode. After the device returns to full-power mode, the module will resume transmitting and receiving data.",
    "17.3.8.1 Slave in Power-Managed Modes\nIn Slave mode, the SPI Transmit/Receive Shift register operates asynchronously to the device. This allows the device to be placed in any power-managed mode and data to be shifted into the SPI Transmit/Receive Shift register. When all 8 bits have been received, the MSSP interrupt flag bit will be set and if MSSP interrupts are enabled, will wake the device from a power-managed mode.",
    "17.3.9 EFFECTS OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.3.10 BUS MODE COMPATIBILITY\nTable 17-1 shows the compatibility between the standard  SPI  modes  and  the  states  of  the  CKP  and CKE control bits.",
    "TABLE 17-1: SPI BUS MODES\n0, 0, Control Bits State.CKP = 0. 0, 0, Control Bits State.CKE = 1. 0, 1, Control Bits State.CKP = 0. 0, 1, Control Bits State.CKE = 0. 1, 0, Control Bits State.CKP = 1. 1, 0, Control Bits State.CKE = 1. 1, 1, Control Bits State.CKP = 1. 1, 1, Control Bits State.CKE = 0\nThere is also an SMP bit which controls when the data is sampled.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nPIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP.",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nIPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. TRISC, Bit 7 = PORTC Data Direction Register. TRISC, Bit 6 = PORTC Data Direction Register. TRISC, Bit 5 = PORTC Data Direction Register. TRISC, Bit 4 = PORTC Data Direction Register. TRISC, Bit 3 = PORTC Data Direction Register. TRISC, Bit 2 = PORTC Data Direction Register. TRISC, Bit 1 = PORTC Data Direction Register. TRISC, Bit 0 = PORTC Data Direction Register. TRISC, Value on POR, BOR = 1111. TRISC, Value on POR, BOR = 1111. TRISC, Value on all other Resets = 1111. TRISC, Value on all other Resets = 1111. SSPBUF, Bit 7 = MSSP Receive Buffer/Transmit",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nRegister. SSPBUF, Bit 6 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 5 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 4 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 3 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 2 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 1 = MSSP Receive Buffer/Transmit Register. SSPBUF, Bit 0 = MSSP Receive Buffer/Transmit Register. SSPBUF, Value on POR, BOR = xxxx. SSPBUF, Value on POR, BOR = xxxx. SSPBUF, Value on all other Resets = uuuu. SSPBUF, Value on all other Resets = uuuu. SSPCON1, Bit 7 = WCOL. SSPCON1, Bit 6 = SSPOV. SSPCON1, Bit 5 = SSPEN. SSPCON1, Bit 4 = CKP. SSPCON1, Bit 3 = SSPM3. SSPCON1, Bit 2 =",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\nSSPM2. SSPCON1, Bit 1 = SSPM1. SSPCON1, Bit 0 = SSPM0. SSPCON1, Value on POR, BOR = 0000. SSPCON1, Value on POR, BOR = 0000. SSPCON1, Value on all other Resets = 0000. SSPCON1, Value on all other Resets = 0000. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = PORTA Data Direction Register. TRISA, Bit 4 = PORTA Data Direction Register. TRISA, Bit 3 = PORTA Data Direction Register. TRISA, Bit 2 = PORTA Data Direction Register. TRISA, Bit 1 = PORTA Data Direction Register. TRISA, Bit 0 = PORTA Data Direction Register. TRISA, Value on POR, BOR = --11. TRISA, Value on POR, BOR = 1111. TRISA, Value on all other Resets = --11. TRISA, Value on all other Resets = 1111. SSPSTAT, Bit",
    "TABLE 17-2: REGISTERS ASSOCIATED WITH SPI OPERATION\n7 = SMP. SSPSTAT, Bit 6 = CKE. SSPSTAT, Bit 5 = D/A. SSPSTAT, Bit 4 = P. SSPSTAT, Bit 3 = S. SSPSTAT, Bit 2 = R/W. SSPSTAT, Bit 1 = UA. SSPSTAT, Bit 0 = BF. SSPSTAT, Value on POR, BOR = 0000. SSPSTAT, Value on POR, BOR = 0000. SSPSTAT, Value on all other Resets = 0000. SSPSTAT, Value on all other Resets = 0000\nLegend: x = unknown, u = unchanged,   = unimplemented, read as GLYPH<145> -0 GLYPH<146>. Shaded cells are not used by the MSSP in SPI mode.\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "17.4.1 REGISTERS\nThe MSSP module in I 2 C  mode  fully  implements  all master and slave functions (including general call support) and provides interrupts on Start and Stop bits in hardware to determine a free bus (multi-master function).  The  MSSP  module  implements  the  standard mode  specifications, as well as 7-bit and  10-bit addressing.\nTwo pins are used for data transfer:\nGLYPH<149> Serial Clock (SCL) GLYPH<150> RC3/SCK/SCL\nGLYPH<149> Serial Data (SDA) GLYPH<150> RC4/SDI/SDA\nThe user must configure these pins as inputs using the TRISC<4:3> bits.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C MODE)\nThe MSSP module has six registers for I 2 C operation. These are:\nGLYPH<149> MSSP Control Register 1 (SSPCON1)\nGLYPH<149> MSSP Control Register 2 (SSPCON2)\nGLYPH<149> MSSP Status Register (SSPSTAT)\nGLYPH<149> Serial Receive/Transmit Buffer (SSPBUF)\nGLYPH<149> MSSP Shift Register (SSPSR) GLYPH<150> Not directly accessible\nGLYPH<149> MSSP Address Register (SSPADD)\nSSPCON1, SSPCON2 and SSPSTAT are the control and  status  registers in I 2 C mode  operation.  The SSPCON1 and SSPCON2 registers are readable and writable.  The  lower  six  bits  of  the  SSPSTAT  are read-only.  The  upper  two  bits  of  the  SSPSTAT  are read/write.\nSSPSR is the shift register used for shifting data in or out. SSPBUF is the buffer register to which data bytes are written to or read from.",
    "FIGURE 17-7: MSSP BLOCK DIAGRAM (I 2 C MODE)\nSSPADD  register  holds  the  slave  device  address when  the  MSSP  is  configured  in  I 2 C  Slave  mode. When  the  MSSP  is  configured  in  Master  mode,  the lower  seven  bits  of  SSPADD  act  as  the  Baud  Rate Generator reload value.\nIn receive operations, SSPSR and SSPBUF together create a double-buffered receiver. When  SSPSR receives a complete byte, it is transferred to SSPBUF and the SSPIF interrupt is set.\nDuring  transmission,  the  SSPBUF  is  not  doublebuffered. A write to SSPBUF will write to both SSPBUF and SSPSR.",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 CGLYPH<153> MODE)\nSMP, R/W-0 = CKE. SMP, R-0 = D/A. SMP, R-0 = P (1). SMP, R-0 = S (2). SMP, R-0 = R/W. SMP, R-0 = UA. SMP, R-0 = BF. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 0",
    "REGISTER 17-3: SSPSTAT: MSSP STATUS REGISTER (I 2 CGLYPH<153> MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SMP: Slew Rate Control bit\nIn Master or Slave mode:\n1 = Slew rate control disabled\n0 = Slew rate control enabled",
    "bit 6 CKE: SMBus Select bit\nIn Master or Slave mode:\n1 = Enable SMBus specific inputs\n0 = Disable SMBus specific inputs",
    "In Master mode:\nReserved.",
    "In Slave mode:\n1 = Indicates that the last byte received or transmitted was data\n0 = Indicates that the last byte received or transmitted was address\nbit 4",
    "P: Stop bit (1)\n1 = Indicates that a Stop bit has been detected last\n0 = Stop bit was not detected last",
    "bit 3 S: Start bit\n(2)\n1 = Indicates that a Start bit has been detected last\n0 = Start bit was not detected last",
    "bit 2\nR/W: Read/Write bit Information (I 2 C mode only)",
    "In Slave mode: (3)\n1 = Read\n0 = Write",
    "In Master mode: (4)\n1 = Transmit is in progress\n0 = Transmit is not in progress\nbit 1\nUA: Update Address bit (10-Bit Slave mode only)\n1 = Indicates that the user needs to update the address in the SSPADD register\n0 = Address does not need to be updated",
    "In Transmit mode:\n1 = Data transmit in progress (does not include the ACK and Stop bits), SSPBUF is full\n0 = Data transmit complete (does not include the ACK and Stop bits), SSPBUF is empty",
    "In Receive mode:\n1 = Receive complete, SSPBUF is full\n0 = Receive not complete, SSPBUF is empty\nNote 1: This bit is cleared on Reset when SSPEN is cleared or a Start bit has been detected.\n2: This bit is cleared on Reset when SSPEN is cleared or a Stop bit has been detected.\n3: This bit holds the R/W bit information following the last address match. This bit is only valid from the address match to the next Start bit, Stop bit or not ACK bit.\n4: ORing this bit with the SSPCON2 bits, SEN, RSEN, PEN, RCEN or ACKEN will indicate if the MSSP is in Idle mode.",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 CGLYPH<153> MODE)\nWCOL, R/W-0 = SSPOV. WCOL, R/W-0 = SSPEN (1). WCOL, R/W-0 = CKP. WCOL, R/W-0 = SSPM3 (2). WCOL, R/W-0 = SSPM2 (2). WCOL, R/W-0 = SSPM1 (2). WCOL, R/W-0 = SSPM0 (2). bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 17-4: SSPCON1: MSSP CONTROL REGISTER 1 (I 2 CGLYPH<153> MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 WCOL: Write Collision Detect bit\nIn Master Transmit mode:\n1 = A  write  to  the  SSPBUF  register  was  attempted  while  the  I 2 C  conditions  were  not  valid  for  a transmission to be started (must be cleared in software)\n0 = No collision",
    "In Slave Transmit mode:\n1 = The SSPBUF register is written while it is still transmitting the previous word (must be cleared in software)\n0 = No collision\nIn Receive mode (Master or Slave modes):\nThis is a GLYPH<147>donGLYPH<146>t careGLYPH<148> bit.",
    "bit 6 SSPOV: Receive Overflow Indicator bit\nIn Receive mode:\n1 = A byte is received while the SSPBUF register is still holding the previous byte (must be cleared in software)\n0 = No overflow\nIn Transmit mode:\nThis is a GLYPH<147>donGLYPH<146>t careGLYPH<148> bit in Transmit mode.",
    "bit 5 SSPEN: Master Synchronous Serial Port Enable bit\n(1)\n1 = Enables the serial port and configures the SDA and SCL pins as the serial port pins\n0 = Disables serial port and configures these pins as I/O port pins",
    "bit 4 CKP: SCK Release Control bit\nIn Slave mode:\n1 = Release clock\n0 = Holds clock low (clock stretch), used to ensure data setup time\nIn Master mode:\nUnused in this mode.\nSSPM3:SSPM0: Master Synchronous Serial Port Mode Select bits (2)\n1111 = I 2 C Slave mode, 10-bit address with Start and Stop bit interrupts enabled\n1110 = I 2 C Slave mode, 7-bit address with Start and Stop bit interrupts enabled\n1011 = I 2 C Firmware Controlled Master mode (slave Idle)\n1000 = I 2 C Master mode, clock = FOSC/(4 * (SSPADD + 1))\n0111 = I 2 C Slave mode, 10-bit address (2)\n0110 = I 2 C Slave mode, 7-bit address (2)\nNote 1: When enabled, the SDA and SCL pins must be properly configured as input or output.\n2: Bit combinations not specifically listed here are either reserved or implemented in SPI mode only.\nbit 3-0",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 CGLYPH<153> MODE)\nGCEN, R/W-0 = ACKSTAT. GCEN, R/W-0 = ACKDT (1). GCEN, R/W-0 = ACKEN. GCEN, R/W-0 = RCEN. GCEN, R/W-0 = PEN. GCEN, R/W-0 = RSEN. GCEN, R/W-0 = SEN. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 0",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 CGLYPH<153> MODE)\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nGCEN: General Call Enable bit (Slave mode only)\n1 = Enable interrupt when a general call address (0000h) is received in the SSPSR\n0 = General call address disabled\nbit 6\nACKSTAT: Acknowledge Status bit (Master Transmit mode only)",
    "REGISTER 17-5: SSPCON2: MSSP CONTROL REGISTER 2 (I 2 CGLYPH<153> MODE)\n1 = Acknowledge was not received from slave\n0 = Acknowledge was received from slave",
    "bit 5\nACKDT: Acknowledge Data bit (Master Receive mode only) (1)\n1 = Not Acknowledge\n0 = Acknowledge\nbit 4\nACKEN: Acknowledge Sequence Enable bit (Master Receive mode only)\n1 = Initiate Acknowledge sequence on SDA and SCL pins and transmit ACKDT data bit. Automatically cleared by hardware.\n0 = Acknowledge sequence Idle\nbit 3\nRCEN: Receive Enable bit (Master Receive mode only)\n1 = Enables Receive mode for I 2 C\n0 = Receive Idle\nbit 2 PEN: Stop Condition Enable bit (Master mode only)\n1 = Initiate Stop condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Stop condition Idle\nbit 1 RSEN: Repeated Start Condition Enabled bit (Master mode only)\n1 = Initiate Repeated Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Repeated Start condition Idle",
    "bit 0\nSEN: Start Condition Enabled/Stretch Enabled bit",
    "In Master mode:\n1 = Initiate Start condition on SDA and SCL pins. Automatically cleared by hardware.\n0 = Start condition Idle",
    "In Slave mode:\n1 = Clock stretching is enabled for both Slave Transmit and Slave Receive (stretch enabled)\n0 = Clock stretching is disabled\nNote 1: Value that will be transmitted when the user initiates an Acknowledge sequence at the end of a receive.",
    "17.4.3.1 Addressing\nThe  MSSP  module  functions  are  enabled  by  setting MSSP Enable bit, SSPEN (SSPCON1<5>).\nThe SSPCON1 register allows control of the I 2 C operation. Four mode selection bits (SSPCON1<3:0>) allow one of the following I 2 C modes to be selected:\nGLYPH<149> I 2 C Master mode, clock = FOSC/(4 * (SSPADD + 1))\nGLYPH<149> I 2 C Slave mode (7-bit address)\nGLYPH<149> I 2 C Slave mode (10-bit address)\nGLYPH<149> I 2 C Slave mode (7-bit address), with Start and Stop bit interrupts enabled\nGLYPH<149> I 2 C Slave mode (10-bit address), with Start and Stop bit interrupts enabled\nGLYPH<149> I 2 C Firmware Controlled Master mode, slave is Idle",
    "17.4.3.1 Addressing\nSelection  of  any  I 2 C  mode,  with  the  SSPEN  bit  set, forces the SCL and SDA pins to be open-drain, provided these pins are programmed to inputs by setting the appropriate TRISC bits. To ensure proper operation of  the  module,  pull-up  resistors  must  be  provided externally to the SCL and SDA pins.",
    "17.4.3 SLAVE MODE\nIn Slave mode, the SCL and SDA pins must be configured as inputs (TRISC<4:3> set). The MSSP module will override the input state with the output data when required (slave-transmitter).\nThe I 2 C Slave mode hardware will always generate an interrupt  on  an  address  match.  Through  the  mode select  bits,  the  user  can  also  choose  to  interrupt  on Start and Stop bits.\nWhen an address is matched, or the data transfer after an address match is received, the hardware automatically will generate the Acknowledge (ACK) pulse and load  the  SSPBUF  register  with  the  received  value currently in the SSPSR register.\nAny combination of the following conditions will cause the MSSP module not to give this ACK pulse:\nGLYPH<149> The Buffer Full bit, BF (SSPSTAT<0>), was set before the transfer was received.\nGLYPH<149> The overflow bit, SSPOV (SSPCON1<6>), was set before the transfer was received.",
    "17.4.3 SLAVE MODE\nIn  this  case,  the  SSPSR register value is not loaded into the SSPBUF but bit SSPIF (PIR1<3>) is set. The BF bit is cleared by reading the SSPBUF register, while bit SSPOV is cleared by software.\nThe SCL clock input must have a minimum high and low for proper operation. The high and low times of the I 2 C  specification,  as  well  as  the  requirement  of  the MSSP module, are shown in timing parameter #100 and parameter #101.\nOnce the MSSP module has been enabled, it waits for a Start condition to occur. Following the Start condition, the 8 bits are shifted into the SSPSR register. All incoming bits are sampled with the rising edge of the clock (SCL) line. The value of register SSPSR<7:1> is compared  to  the  value  of  the  SSPADD  register.  The address is compared on the falling edge of the eighth clock (SCL) pulse. If the addresses match and the BF and SSPOV bits are clear, the following events occur:",
    "17.4.3 SLAVE MODE\n1. The  SSPSR  register  value  is  loaded  into  the SSPBUF register.\n2. The Buffer Full bit, BF, is set.\n3. An ACK pulse is generated.\n4. MSSP Interrupt  Flag  bit,  SSPIF  (PIR1<3>),  is set  (interrupt  is  generated  if  enabled)  on  the falling edge of the ninth SCL pulse.\nIn 10-Bit Addressing mode, two address bytes need to be received by the slave. The five Most Significant bits (MSbs) of the first address byte specify if this is a 10-bit address. Bit R/W (SSPSTAT<2>) must specify a write so  the  slave  device  will  receive  the  second  address byte. For a 10-bit address, the first byte would equal GLYPH<145> 11110  A9  A8  0 GLYPH<146> , where GLYPH<145> A9 GLYPH<146> and GLYPH<145> A8 GLYPH<146> are the two MSbs  of  the  address.  The  sequence  of  events  for 10-bit addressing is as follows, with steps 7 through 9 for the slave-transmitter:",
    "17.4.3 SLAVE MODE\n1. Receive first (high) byte of address (bits SSPIF, BF and bit UA (SSPSTAT<1>) are set).\n2. Update the SSPADD register with second (low) byte of Address (clears bit, UA, and releases the SCL line).\n3. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n4. Receive  second  (low)  byte  of  address  (bits, SSPIF, BF and UA, are set).\n5. Update the SSPADD register with the first (high) byte of address. If match releases SCL line, this will clear bit, UA.\n6. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.\n7. Receive Repeated Start condition.\n8. Receive first (high) byte of address (bits, SSPIF and BF, are set).\n9. Read the SSPBUF register (clears bit, BF) and clear flag bit, SSPIF.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the address byte is clear and an address  match  occurs,  the  R/W  bit  of  the  SSPSTAT register is cleared. The received address is loaded into the  SSPBUF  register  and  the  SDA  line  is  held  low (ACK).\nWhen the address byte overflow condition exists, then the no Acknowledge (ACK) pulse is given. An overflow condition is defined as either bit, BF (SSPSTAT<0>), is set or bit, SSPOV (SSPCON1<6>), is set.\nAn MSSP interrupt is generated for each data transfer byte.  Flag  bit,  SSPIF  (PIR1<3>),  must  be  cleared  in software. The SSPSTAT register is used to determine the status of the byte.",
    "17.4.3.3 Transmission\nIf SEN is enabled (SSPCON2<0> = 1 ), RC3/SCK/SCL will  be  held  low  (clock  stretch)  following  each  data transfer.  The  clock  must  be  released  by  setting  bit, CKP (SSPCON1<4>). See Section 17.4.4 GLYPH<147>Clock StretchingGLYPH<148> for more detail.",
    "17.4.3.3 Transmission\nWhen the R/W bit of the incoming address byte is set and  an  address  match  occurs,  the  R/W  bit  of  the SSPSTAT  register  is  set.  The  received  address  is loaded into the SSPBUF register. The ACK pulse will be sent on the ninth bit and pin RC3/SCK/SCL is held low  regardless  of  SEN  (see Section 17.4.4  GLYPH<147>Clock StretchingGLYPH<148> for  more detail). By stretching the clock, the master will be unable to assert another clock pulse until the slave is done preparing the transmit data. The transmit data must be loaded into the SSPBUF register which also loads the SSPSR register. Then the RC3/ SCK/SCL pin should be enabled by setting bit, CKP (SSPCON1<4>). The eight data bits are shifted out on the falling edge of the SCL input. This ensures that the SDA  signal is valid during the SCL  high time (Figure 17-9).",
    "17.4.3.3 Transmission\nThe ACK pulse from the master-receiver is latched on the rising edge of the ninth SCL input pulse. If the SDA line is  high (not ACK), then the data transfer is complete.  In  this  case,  when  the  ACK  is  latched  by  the slave, the slave logic is reset (resets SSPSTAT register) and the slave monitors for another occurrence of the Start bit. If the SDA line was low (ACK), the next transmit data must be loaded into the SSPBUF register. Again,  the  RC3/SCK/SCL  pin  must  be  enabled  by setting bit, CKP.\nAn MSSP interrupt is generated for each data transfer byte. The SSPIF bit must be cleared in software and the SSPSTAT register is used to determine the status of the byte. The SSPIF bit is set on the falling edge of the ninth clock pulse.",
    "17.4.4 CLOCK STRETCHING\nBoth 7 and 10-bit Slave modes implement automatic clock stretching during a transmit sequence.",
    "17.4.4.3 Clock Stretching for 7-Bit Slave Transmit Mode\nThe SEN bit (SSPCON2<0>) allows clock stretching to be  enabled  during  receives.  Setting  SEN  will  cause the  SCL  pin  to  be  held  low  at  the  end  of  each  data receive sequence.",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nIn 7-Bit Slave Receive mode, on the falling edge of the ninth clock at the end of the ACK sequence if the BF bit is set, the CKP bit in the SSPCON1 register is automatically  cleared,  forcing  the  SCL  output  to  be  held  low. The CKP being cleared to GLYPH<145> 0 GLYPH<146> will  assert  the  SCL line low. The CKP bit must be set in the userGLYPH<146>s ISR before reception  is  allowed  to  continue.  By  holding  the  SCL line low, the user has time to service the ISR and read the contents of the SSPBUF before the master device can initiate another receive sequence. This will prevent buffer overruns from occurring (see Figure 17-13).",
    "17.4.4.1 Clock Stretching for 7-Bit Slave Receive Mode (SEN = 1 )\nNote 1: If the  user  reads  the  contents  of  the SSPBUF  before  the  falling  edge  of  the ninth clock, thus clearing the BF bit, the CKP  bit  will  not  be  cleared  and  clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit. The user should be careful to clear the BF bit in the ISR before the next receive sequence in order to prevent an overflow condition.",
    "17.4.4.2 Clock Stretching for 10-Bit Slave Receive Mode (SEN = 1 )\nIn  10-Bit  Slave  Receive  mode,  during  the  address sequence,  clock  stretching  automatically  takes  place but the CKP bit is not cleared. During this time, if the UA bit is set after the ninth clock, clock stretching is initiated. The UA bit is set after receiving the upper byte of the 10-bit address and following the receive of the second  byte  of  the  10-bit  address  with  the  R/W  bit cleared  to  GLYPH<145> 0 GLYPH<146> . The  release  of  the  clock  line  occurs upon updating SSPADD. Clock stretching will occur on each  data  receive  sequence  as  described  in  7-bit mode.",
    "Note:\nIf the user polls the UA bit and clears it by updating the SSPADD register before the falling edge of the ninth clock occurs and if the user hasnGLYPH<146>t cleared the BF bit by reading the SSPBUF register before that time, then the CKP bit will still NOT be asserted low.  Clock  stretching  on  the  basis  of  the state  of  the  BF  bit  only  occurs  during  a data sequence, not an address sequence.\n7-Bit Slave Transmit mode implements clock stretching by clearing the CKP bit after the falling edge of the ninth clock if the BF bit is clear. This occurs regardless of the state of the SEN bit.\nThe userGLYPH<146>s ISR must set the CKP bit before transmission  is  allowed  to  continue.  By  holding  the  SCL  line low, the user has time to service the ISR and load the contents of the SSPBUF before the master device can initiate another transmit sequence (see Figure 17-9).",
    "Note:\nNote 1: If the user loads the contents of SSPBUF, setting the BF bit before the falling edge of the  ninth  clock,  the  CKP  bit  will  not  be cleared and clock stretching will not occur.\n2: The  CKP  bit  can  be  set  in  software regardless of the state of the BF bit.",
    "17.4.4.4 Clock Stretching for 10-Bit Slave Transmit Mode\nIn 10-Bit Slave Transmit mode, clock stretching is controlled during the first two address sequences by the state of the UA bit, just as it is in 10-Bit Slave Receive mode. The first two addresses are followed by a third address sequence which contains the high-order bits of the 10-bit address and the R/W bit set to GLYPH<145> 1 GLYPH<146>. After the third address sequence is performed, the UA bit is not  set,  the  module  is  now  configured  in  Transmit mode and clock stretching is controlled by the BF flag as in 7-Bit Slave Transmit mode (see Figure 17-11).",
    "17.4.4.5 Clock Synchronization and the CKP bit (SEN = 1 )\nThe SEN bit is also used to synchronize writes to the CKP bit. If a user clears the CKP bit, the SCL output is forced to GLYPH<145> 0 GLYPH<146> . When the SEN bit is set to GLYPH<145> 1 GLYPH<146> , setting the CKP bit  will  not  assert  the  SCL  output  low  until  the SCL  output  is already sampled  low. If the user attempts to drive SCL low, the CKP bit will not assert the SCL line until an external I 2 C master device has already  asserted  the  SCL  line.  The  SCL  output  will remain  low  until  the  CKP  bit  is  set  and  all  other devices  on  the  I 2 C  bus  have  deasserted  SCL.  This ensures that a write to the CKP bit will not violate the minimum high time requirement for SCL (see Figure 17-12).",
    "17.4.4.5 Clock Synchronization and the CKP bit (SEN = 1 )\nNote:, 1 = If the SEN bit is GLYPH<145> 0 GLYPH<146>, clearing the CKP bit will result in immediately driving the SCL output to GLYPH<145> 0 GLYPH<146> regardless of the current state.",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nThe addressing procedure for the I 2 C bus is such that the  first  byte  after  the  Start  condition  usually  determines which device will be the slave addressed by the master.  The  exception  is  the  general  call  address, which can address all devices. When this address is used,  all  devices  should,  in  theory,  respond  with  an Acknowledge.\nThe  general  call  address  is  one  of  eight  addresses reserved for specific purposes by the I 2 C protocol. It consists of all GLYPH<145> 0 GLYPH<146> s with R/W = 0 .\nThe  general  call  address  is  recognized  when  the General Call Enable bit (GCEN) is enabled (SSPCON2<7> set). Following a Start bit detect, 8 bits are shifted into the SSPSR and the address is compared against the SSPADD. It is also compared to the general call address and fixed in hardware.\nIf  the  general  call  address  matches,  the  SSPSR  is transferred to the SSPBUF, the BF flag bit is set (eighth bit) and on the falling edge of the ninth bit (ACK bit), the SSPIF interrupt flag bit is set.",
    "17.4.5 GENERAL CALL ADDRESS SUPPORT\nWhen the interrupt is serviced, the source for the interrupt  can  be  checked  by  reading  the  contents  of  the SSPBUF. The value can be used to determine if the address was device specific or a general call address.\nIn 10-bit mode, the SSPADD is required to be updated for the second half of the address to match and the UA bit is set (SSPSTAT<1>). If the general call address is sampled when the GCEN bit is set while the slave is configured in 10-Bit Addressing mode, then the second half of the address is not necessary, the UA bit will not be set and the slave will begin receiving data after the Acknowledge (Figure 17-15).",
    "17.4.6 MASTER MODE\nMaster  mode  is  enabled  by  setting  and  clearing  the appropriate SSPM bits in SSPCON1 and by setting the SSPEN bit. In Master mode, the SCL and SDA lines are manipulated by the MSSP hardware.\nMaster  mode  of  operation  is  supported  by  interrupt generation on the detection of the Start and Stop conditions. The Stop (P) and Start (S) bits are cleared from a Reset or when the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit is set or the bus is Idle, with both the S and P bits clear.\nIn Firmware  Controlled Master mode,  user  code conducts  all  I 2 C  bus  operations  based  on  Start  and Stop bit conditions.\nOnce  Master  mode  is  enabled,  the  user  has  six options.\n1. Assert a Start condition on SDA and SCL.\n2. Assert a Repeated Start condition on SDA and SCL.\n3. Write to the SSPBUF register initiating transmission of data/address.\n4. Configure the I 2 C port to receive data.\n5. Generate an Acknowledge condition at the end of a received byte of data.\n6. Generate a Stop condition on SDA and SCL.",
    "Note:\nThe  MSSP  module,  when  configured  in I 2 C Master mode, does not allow queueing of  events.  For  instance,  the  user  is  not allowed  to  initiate  a  Start  condition  and immediately write the SSPBUF register to initiate transmission before the Start condition is complete. In this case, the SSPBUF will not be written to and the WCOL bit will be  set, indicating that a write to the SSPBUF did not occur.\nThe following events will cause MSSP Interrupt Flag bit, SSPIF, to be set (MSSP interrupt if enabled):\nGLYPH<149> Start Condition\nGLYPH<149> Stop Condition\nGLYPH<149> Data Transfer Byte Transmitted/Received\nGLYPH<149> Acknowledge Transmit\nGLYPH<149> Repeated Start",
    "17.4.6.1 I 2 C Master Mode Operation\nA typical transmit sequence would go as follows:\nThe  master  device  generates  all  of  the  serial  clock pulses and the Start and Stop conditions.   A transfer is ended with a Stop condition or with a Repeated Start condition.  Since the Repeated Start condition is also the beginning of the next serial transfer, the I 2 C bus will not be released.\nIn Master  Transmitter  mode,  serial  data  is  output through SDA, while SCL outputs the serial clock. The first byte transmitted contains the slave address of the receiving device (7 bits) and the Read/Write (R/W) bit. In this case, the R/W bit will be logic GLYPH<145> 0 GLYPH<146>.  Serial data is transmitted 8 bits at a time. After each byte is transmitted,  an  Acknowledge  bit  is  received.  Start  and  Stop conditions are output to indicate the beginning and the end of a serial transfer.",
    "17.4.6.1 I 2 C Master Mode Operation\nIn Master Receive mode, the first byte transmitted contains  the  slave  address  of  the  transmitting  device (7 bits) and the R/W bit. In this case, the R/W bit will be logic GLYPH<145> 1 GLYPH<146>. Thus, the first byte transmitted is a 7-bit slave address  followed  by  a  GLYPH<145> 1 GLYPH<146> to  indicate  the  receive  bit. Serial data is received via SDA, while SCL outputs the serial clock. Serial data is received 8 bits at a time. After each byte is received, an Acknowledge bit is transmitted.  Start  and  Stop  conditions  indicate  the  beginning and end of transmission.\nThe  Baud  Rate  Generator  used  for  the  SPI  mode operation is used to set the SCL clock frequency for either 100 kHz, 400 kHz or 1 MHz I 2 C operation. See Section 17.4.7 GLYPH<147>Baud RateGLYPH<148> for more detail.",
    "17.4.6.1 I 2 C Master Mode Operation\n1. The user generates a Start condition by setting the Start enable bit, SEN (SSPCON2<0>).\n2. SSPIF is set. The MSSP module will wait the required  start  time  before  any  other  operation takes place.\n3. The  user  loads  the  SSPBUF  with  the  slave address to transmit.\n4. Address is shifted out the SDA pin until all 8 bits are transmitted.\n5. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n6. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.\n7. The user loads the SSPBUF with eight bits of data.\n8. Data is shifted out the SDA pin until all 8 bits are transmitted.\n9. The MSSP module shifts in the ACK bit from the slave device and  writes its value into the SSPCON2 register (SSPCON2<6>).\n10. The MSSP module generates an interrupt at the end of the ninth clock cycle by setting the SSPIF bit.",
    "17.4.6.1 I 2 C Master Mode Operation\n11. The user generates a Stop condition by setting the Stop Enable bit, PEN (SSPCON2<2>).\n12. Interrupt is generated once the Stop condition is complete.",
    "17.4.7 BAUD RATE\nIn I 2 C Master mode, the Baud Rate Generator (BRG) reload  value  is  placed  in  the  lower  7  bits  of  the SSPADD  register (Register 17-17). When  a  write occurs to SSPBUF, the Baud Rate Generator will automatically begin counting. The BRG counts down to GLYPH<145> 0 GLYPH<146> and  stops  until  another  reload  has  taken  place.  The BRG count is decremented twice per instruction cycle (TCY) on the Q2 and Q4 clocks. In I 2 C Master mode, the BRG is reloaded automatically.\nOnce the given operation is complete (i.e., transmission of the last data bit is followed by ACK), the internal clock will automatically stop counting and the SCL pin will remain in its last state.",
    "17.4.7.1 Baud Rate Generation in Power-Managed Modes\nWhen  the  device  is  operating  in  a  power-managed mode, the clock source to the Baud Rate Generator may  change  frequency  or  stop,  depending  on  the power-managed mode and clock source selected.\nIn most  power  modes,  the  Baud  Rate  Generator continues to be clocked but may be clocked from the primary clock (selected in a Configuration Word), the secondary clock (Timer1 oscillator  at 32.768  kHz) or the internal oscillator  block  (one  of  eight  frequencies between   31 kHz and 8 MHz). If the Sleep mode is selected,  all  clocks  are  stopped  and  the  Baud  Rate Generator will not be clocked.\nTable 17-3 demonstrates clock rates based on instruction  cycles  and  the  BRG  value  loaded  into SSPADD.",
    "TABLE 17-3: I 2 C CLOCK RATE W/BRG\n40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 18h. 40 MHz, FSCL (2) (2 Rollovers of BRG) = 400 kHz (1). 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 1Fh. 40 MHz, FSCL (2) (2 Rollovers of BRG) = 312.5 kHz. 40 MHz, FCY = 10 MHz. 40 MHz, FCY * 2 = 20 MHz. 40 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 63h. 40 MHz, FSCL (2) (2 Rollovers of BRG) = 100 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 09h. 16 MHz, FSCL (2)",
    "TABLE 17-3: I 2 C CLOCK RATE W/BRG\n(2 Rollovers of BRG) = 400 kHz (1). 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 0Bh. 16 MHz, FSCL (2) (2 Rollovers of BRG) = 308 kHz. 16 MHz, FCY = 4 MHz. 16 MHz, FCY * 2 = 8 MHz. 16 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 27h. 16 MHz, FSCL (2) (2 Rollovers of BRG) = 100 kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 02h. 4 MHz, FSCL (2) (2 Rollovers of BRG) = 333 kHz (1). 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) =",
    "TABLE 17-3: I 2 C CLOCK RATE W/BRG\n09h. 4 MHz, FSCL (2) (2 Rollovers of BRG) = 100kHz. 4 MHz, FCY = 1 MHz. 4 MHz, FCY * 2 = 2 MHz. 4 MHz, SSPADD VALUE (See Register 17-4, Mode 1000) = 00h. 4 MHz, FSCL (2) (2 Rollovers of BRG) = 1 MHz (1)\nNote 1: The I 2 C interface does not conform to the 400 kHz I 2 C specification (which applies to rates greater than 100 kHz) in all details, but may be used with care where higher rates are required by the application.\n2: Actual clock rate will depend on bus conditions. Bus capacitance can increase rise time and extend the low time of the clock period, reducing the effective clock frequency (see Section 17.4.7.2 GLYPH<147>Clock ArbitrationGLYPH<148> ).",
    "17.4.7.2 Clock Arbitration\nClock arbitration occurs when the master, during any receive,  transmit  or  Repeated  Start/Stop  condition, deasserts  the  SCL  pin  (SCL  allowed  to  float  high). When the SCL pin is allowed to float high, the Baud Rate  Generator  (BRG)  is  suspended  from  counting until the SCL pin is actually sampled high. When the\nSCL pin is sampled high, the Baud Rate Generator is reloaded  with  the  contents  of  SSPADD<6:0>  and begins counting. This ensures that the SCL high time will always be at least one BRG rollover count in the event that the clock is held low by an external device (Figure 17-18).",
    "17.4.8 I 2 C MASTER MODE START CONDITION TIMING\nTo  initiate  a  Start  condition,  the  user  sets  the  Start Condition Enable bit, SEN (SSPCON2<0>). If the SDA and SCL pins are sampled high, the Baud Rate Generator  is  reloaded  with  the  contents  of  SSPADD<6:0> and starts its count. If SCL and SDA are both sampled high when the Baud Rate Generator times out (TBRG), the SDA pin is driven low. The action of the SDA being driven low while SCL is high is the Start condition and causes the S bit (SSPSTAT<3>) to be set. Following this, the Baud Rate Generator is reloaded with the contents of SSPADD<6:0> and resumes its count. When the Baud Rate Generator times out (TBRG), the SEN bit (SSPCON2<0>)  will be automatically cleared by hardware,  the  Baud  Rate  Generator  is  suspended, leaving the SDA line held low and the Start condition is complete.",
    "Note:\nIf,  at the beginning of the Start condition, the SDA and SCL pins are already sampled low or if during the Start condition, the SCL line is sampled low before the SDA line  is  driven  low,  a  bus  collision  occurs, the Bus Collision Interrupt Flag, BCLIF, is set, the Start condition is aborted and the I 2 C module is reset into its Idle state.",
    "17.4.8.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Start sequence is in progress, the WCOL is set and the contents of the buffer are unchanged (the write doesnGLYPH<146>t occur).",
    "Note:\nBecause queueing of events is not allowed,  writing  to  the  lower  5  bits  of SSPCON2  is  disabled until the Start condition is complete.",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nA Repeated Start condition occurs when the RSEN bit (SSPCON2<1>) is programmed high and the I 2 C logic module is in the Idle state. When the RSEN bit is set, the SCL pin is asserted low. When the SCL pin is sampled low, the Baud Rate Generator is loaded with the contents of SSPADD<5:0> and begins counting. The SDA pin is released (brought high) for one Baud Rate Generator count (TBRG). When the Baud Rate Generator times out, if SDA is sampled high, the SCL pin will be deasserted (brought high). When SCL is sampled high,  the  Baud  Rate  Generator  is  reloaded  with  the contents of SSPADD<6:0> and begins counting. SDA and  SCL  must  be  sampled  high  for  one  TBRG.  This action  is  then  followed  by  assertion  of  the  SDA  pin (SDA = 0 ) for one TBRG",
    "17.4.9 I 2 C MASTER MODE REPEATED START CONDITION TIMING\nwhile SCL is high. Following this, the RSEN bit (SSPCON2<1>) will be automatically cleared  and  the  Baud  Rate  Generator  will  not  be reloaded, leaving the SDA pin held low. As soon as a Start condition is detected on the SDA and SCL pins, the S bit (SSPSTAT<3>) will be set. The SSPIF bit will not be set until the Baud Rate Generator has timed out.\nNote 1: If  RSEN is programmed while any other event is in progress, it will not take effect.\n2: A bus collision during the Repeated Start condition occurs if:\nGLYPH<149> SDA is sampled low when SCL goes from low-to-high.\nGLYPH<149> SCL goes low before SDA is asserted low. This may indicate that another master is attempting to transmit a data GLYPH<145> 1 GLYPH<146>.",
    "FIGURE 17-20: REPEAT START CONDITION WAVEFORM\nImmediately  following  the  SSPIF  bit  getting  set,  the user may write the SSPBUF with the 7-bit address in 7-bit mode, or the default first address in 10-bit mode. After the first eight bits are transmitted and an ACK is received, the user may then transmit an additional eight bits of address (10-bit mode) or eight bits of data (7-bit mode).",
    "17.4.9.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Repeated Start sequence is in progress, the WCOL is set and the contents  of  the  buffer  are  unchanged  (the  write  doesnGLYPH<146>t occur).\nNote:, 1 = Because queueing of events is not allowed, writing of the lower 5 bits of SSPCON2 is disabled until the Repeated Start condition is complete.",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nTransmission  of  a  data  byte,  a  7-bit  address  or  the other half of a 10-bit address is accomplished by simply writing a value to the SSPBUF register. This action will set the Buffer Full Flag bit, BF, and allow the Baud Rate Generator to begin counting and start the next transmission. Each bit of address/data will be shifted out onto the SDA pin after the falling edge of SCL is asserted (see data hold time specification  parameter #106). SCL is held low for one Baud Rate Generator rollover count (TBRG). Data should be valid before SCL is  released  high  (see  data  setup  time  specification parameter #107). When the SCL pin is released high, it is  held  that  way  for  TBRG.  The  data  on  the  SDA  pin must  remain  stable  for  that  duration  and  some  hold time after the next falling edge of SCL. After the eighth bit is shifted out (the falling edge of the eighth clock), the BF flag is cleared and the master releases SDA. This  allows  the  slave  device  being  addressed",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nto respond with an ACK bit, during the ninth bit time, if an address match occurred or if data was received properly. The status of ACK is written into the ACKDT bit on the falling edge of the ninth clock. If the master receives an Acknowledge, the Acknowledge Status bit, ACKSTAT, is cleared; if not, the bit is set. After the ninth clock, the SSPIF bit is set and the master clock (Baud Rate Generator) is suspended until the next data byte is loaded into the SSPBUF, leaving SCL low and SDA unchanged (Figure 17-21).",
    "17.4.10 I 2 C MASTER MODE TRANSMISSION\nAfter the write to the SSPBUF, each bit of address will be shifted out on the falling edge of SCL until all seven address bits and the R/W bit are completed. On the falling edge of the eighth clock, the master will deassert the  SDA  pin,  allowing  the  slave  to  respond  with  an Acknowledge. On the falling edge of the ninth clock, the master will sample the SDA pin to see if the address was recognized by a slave. The status of the ACK bit is loaded into the ACKSTAT status bit (SSPCON2<6>). Following the falling edge of the ninth clock transmission of the address, the SSPIF is set, the BF flag is cleared and the Baud Rate Generator is turned off until another write to the SSPBUF takes place, holding SCL low and allowing SDA to float.",
    "17.4.10.1 BF Status Flag\nIn  Transmit  mode,  the  BF  bit  (SSPSTAT<0>)  is  set when the CPU writes to SSPBUF and is cleared when all 8 bits are shifted out.",
    "17.4.10.2 WCOL Status Flag\nIf  the  user  writes  the  SSPBUF  when  a  transmit  is already in progress (i.e., SSPSR is still shifting out a data byte), the WCOL is set and the contents of the buffer are unchanged (the write doesnGLYPH<146>t occur).\nWCOL must be cleared in software.",
    "17.4.10.3 ACKSTAT Status Flag\nIn Transmit mode, the ACKSTAT bit (SSPCON2<6>) is cleared  when  the  slave  has  sent  an  Acknowledge (ACK = 0 ) and is set when the slave does not Acknowledge (ACK = 1 ). A slave sends an Acknowledge when it has recognized its address (including a general call) or when the slave has properly received its data.",
    "17.4.11 I 2 C MASTER MODE RECEPTION\nMaster mode reception is enabled by programming the Receive Enable bit, RCEN (SSPCON2<3>).\nNote:\nThe MSSP module must be in an Idle state before the RCEN bit is set or the RCEN bit will be disregarded.\nThe Baud Rate Generator begins counting and on each rollover, the state of the SCL pin changes (high-to-low/ low-to-high) and data is shifted into the SSPSR. After the falling edge of the eighth clock, the receive enable flag is automatically  cleared,  the  contents  of  the SSPSR are loaded into the SSPBUF, the BF flag bit is set,  the  SSPIF  flag  bit  is  set  and  the  Baud  Rate Generator  is  suspended  from  counting,  holding  SCL low. The MSSP is now in Idle state, awaiting the next command. When the buffer is read by the CPU, the BF flag  bit  is  automatically  cleared.  The  user  can  then send an Acknowledge bit at the end of reception by setting the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>).",
    "17.4.11.1 BF Status Flag\nIn receive operation, the BF bit is set when an address or data byte is loaded into SSPBUF from SSPSR. It is cleared when the SSPBUF register is read.",
    "17.4.11.2 SSPOV Status Flag\nIn receive operation, the SSPOV bit is set when 8 bits are  received  into  the  SSPSR  and  the  BF  flag  bit  is already set from a previous reception.",
    "17.4.11.3 WCOL Status Flag\nIf the  user  writes  the  SSPBUF  when  a  receive  is already in progress (i.e., SSPSR is still shifting in a data byte), the WCOL bit is set and the contents of the buffer are unchanged (the write doesnGLYPH<146>t occur).",
    "17.4.13 STOP CONDITION TIMING\nAn  Acknowledge  sequence  is  enabled  by  setting  the Acknowledge Sequence Enable bit, ACKEN (SSPCON2<4>).  When  this  bit  is  set,  the  SCL  pin  is pulled low and the contents of the Acknowledge data bit are presented on the SDA pin. If the user wishes to generate an Acknowledge, then the ACKDT bit should be cleared. If not, the user should set the ACKDT bit before starting  an  Acknowledge  sequence.  The  Baud  Rate Generator then counts for one rollover period (TBRG) and the SCL pin is deasserted (pulled high). When the SCL pin  is  sampled  high  (clock  arbitration),  the  Baud  Rate Generator counts for TBRG. The SCL pin is then pulled low.  Following  this,  the  ACKEN  bit  is  automatically cleared, the Baud Rate Generator is turned off and the MSSP module then goes into Idle mode (Figure 17-23).",
    "17.4.12.1 WCOL Status Flag\nIf the user writes the SSPBUF when an Acknowledge sequence is  in  progress,  then  WCOL  is  set  and  the contents of the buffer are unchanged (the write doesnGLYPH<146>t occur).\nA Stop bit is asserted on the SDA pin at the end of a receive/transmit by setting the Stop Sequence Enable bit,  PEN  (SSPCON2<2>).  At  the  end  of  a  receive/ transmit, the SCL line is held low after the falling edge of the ninth clock. When the PEN bit is set, the master will assert the SDA line low. When the SDA line is sampled  low,  the  Baud  Rate  Generator  is  reloaded  and counts  down  to  0.  When  the  Baud  Rate  Generator times out, the SCL pin will  be brought  high  and one TBRG (Baud Rate Generator rollover count) later, the SDA pin will be deasserted. When the SDA pin is sampled high while SCL is high, the P bit (SSPSTAT<4>) is set. A TBRG later, the PEN bit is cleared and the SSPIF bit is set (Figure 17-24).",
    "17.4.13.1 WCOL Status Flag\nIf the user writes the SSPBUF when a Stop sequence is in progress, then the WCOL bit is set and the contents  of  the  buffer  are  unchanged  (the  write  doesnGLYPH<146>t occur).",
    "17.4.14 POWER-MANAGED MODE OPERATION\nWhile in  any  power-managed  mode, the  I 2 C  module can receive addresses or data and when an address match  or  complete  byte  transfer  occurs,  wake  the processor from Sleep (if the MSSP  interrupt is enabled).",
    "17.4.15 EFFECT OF A RESET\nA Reset disables the MSSP module and terminates the current transfer.",
    "17.4.16 MULTI-MASTER MODE\nIn Multi-Master mode, the interrupt generation on the detection of the  Start  and  Stop  conditions  allows  the determination of when the bus is free. The Stop (P) and Start  (S)  bits  are  cleared  from  a  Reset  or  when  the MSSP module is disabled. Control of the I 2 C bus may be taken when the P bit (SSPSTAT<4>) is set or the bus is idle with both the S and P bits clear. When the bus is busy, enabling the MSSP interrupt will generate the interrupt when the Stop condition occurs.\nIn multi-master operation, the SDA line must be monitored  for  arbitration  to  see  if  the  signal  level  is  the expected  output  level.  This  check  is  performed  in hardware with the result placed in the BCLIF bit.\nThe states where arbitration can be lost are:\nGLYPH<149> Address Transfer\nGLYPH<149> Data Transfer\nGLYPH<149> A Start Condition\nGLYPH<149> A Repeated Start Condition\nGLYPH<149> An Acknowledge Condition",
    "17.4.16 MULTI-MASTER MODE\nMulti-Master mode support is achieved by bus arbitration. When the master outputs address/data bits onto the SDA pin, arbitration takes place when the master outputs  a  GLYPH<145> 1 GLYPH<146> on  SDA  by  letting  SDA  float  high  and another master asserts a GLYPH<145> 0 GLYPH<146>.  When the SCL pin floats high,  data  should  be  stable.  If  the  expected  data  on SDA is a GLYPH<145> 1 GLYPH<146> and the data sampled on the SDA pin = 0 , then a bus collision has taken place. The master will set the Bus Collision Interrupt Flag, BCLIF, and reset the I 2 C port to its Idle state (Figure 17-25).\nIf  a  transmit  was  in  progress  when  the  bus  collision occurred,  the  transmission  is  halted,  the  BF  flag  is cleared, the SDA and SCL lines are deasserted and the SSPBUF can be written to. When the user services the bus collision Interrupt Service Routine, and if the I 2 C bus  is  free,  the  user  can  resume  communication  by asserting a Start condition.",
    "17.4.16 MULTI-MASTER MODE\nIf a Start, Repeated Start, Stop or Acknowledge condition was in progress when the bus collision occurred, the condition is aborted, the SDA and SCL lines are deasserted, and the respective control bits in the SSPCON2 register are  cleared.  When  the  user  services  the  bus  collision Interrupt Service Routine, and if the I 2 C bus is free, the user  can  resume  communication  by  asserting  a  Start condition.\nThe master will continue to monitor the SDA and SCL pins. If a Stop condition occurs, the SSPIF bit will be set.\nA write  to  the  SSPBUF  will  start  the  transmission  of data  at  the  first  data  bit  regardless  of  where  the transmitter left off when the bus collision occurred.\nIn  Multi-Master  mode,  the  interrupt  generation  on  the detection of Start and Stop conditions allows the determination of when the bus is free. Control of the I C bus can 2 be taken when the P bit is set in the SSPSTAT register or the bus is Idle and the S and P bits are cleared.",
    "17.4.17.1 Bus Collision During a Start Condition\nDuring a Start condition, a bus collision occurs if:\na) SDA or SCL is sampled low at the beginning of the Start condition (Figure 17-26).\nb) SCL is sampled low before SDA is asserted low (Figure 17-27).\nIf  the  SDA  pin  is  sampled  low  during  this  count,  the BRG  is  reset  and  the  SDA  line  is  asserted  early (Figure 17-28). If, however, a GLYPH<145> 1 GLYPH<146> is sampled on the SDA pin, the SDA pin is asserted low at the end of the BRG count. The Baud Rate Generator is then reloaded and counts down to 0 and during this time, if the SCL pins are sampled as GLYPH<145> 0 GLYPH<146>, a bus collision does not occur. At the end of the BRG count, the SCL pin is asserted low.\nDuring a Start  condition,  both the  SDA  and the  SCL pins are monitored.\nIf the SDA pin is already low or the SCL pin is already low, then all of the following occur:",
    "17.4.17.1 Bus Collision During a Start Condition\nGLYPH<149> The Start condition is aborted\nGLYPH<149> The BCLIF flag is set\nGLYPH<149> The MSSP module is reset to its Idle state (Figure 17-26)\nThe Start condition begins with the SDA and SCL pins deasserted. When the SDA pin is sampled high, the Baud  Rate  Generator  is  loaded  from  SSPADD<6:0> and counts down to 0. If the SCL pin is sampled low while SDA is high, a bus collision occurs because it is assumed that another master is attempting to drive a data GLYPH<145> 1 GLYPH<146>  during the Start condition.\nThe reason that bus collision is not a factor during a Start condition is that no two bus masters can assert a Start condition at the exact  same  time.  Therefore,  one  master will  always  assert  SDA  before  the  other. This condition does not cause a bus collision  because  the  two  masters  must  be allowed  to  arbitrate  the  first  address  following the Start condition. If the address is the same, arbitration must be allowed to continue  into  the  data  portion,  Repeated Start or Stop conditions.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nDuring  a  Repeated  Start  condition,  a  bus  collision occurs if:\n- a) A low level is sampled on SDA when SCL goes from low level to high level.\nIf SDA is low, a bus collision has occurred (i.e., another master is attempting to transmit a data GLYPH<145> 0 GLYPH<146> , Figure 17-29). If SDA is sampled high, the BRG is reloaded and begins counting. If SDA goes from high-to-low before the BRG times  out,  no  bus  collision  occurs  because  no  two masters can assert SDA at exactly the same time.\n- b) SCL goes low before SDA is asserted low, indicating  that  another  master  is  attempting  to transmit a data GLYPH<145> 1 GLYPH<146>.\nWhen the user deasserts SDA and the pin is allowed to float high, the BRG is loaded with SSPADD<6:0> and counts down to 0. The SCL pin is then deasserted and when sampled high, the SDA pin is sampled.",
    "17.4.17.2 Bus Collision During a Repeated Start Condition\nIf SCL goes from high-to-low before the BRG times out and SDA has not already been asserted, a bus collision occurs.  In  this  case,  another  master  is  attempting  to transmit a data GLYPH<145> 1 GLYPH<146>   during the Repeated Start condition (see Figure 17-30).\nIf at the end of the BRG time-out, both SCL and SDA are still high, the SDA pin is driven low and the BRG is reloaded and begins counting. At the end of the count regardless of the status of the SCL pin, the SCL pin is driven low and the Repeated Start condition is complete.",
    "17.4.17.3 Bus Collision During a Stop Condition\nBus collision occurs during a Stop condition if:\na) After  the  SDA  pin  has  been  deasserted  and allowed to float high, SDA is sampled low after the BRG has timed out.\nb) After the SCL pin is deasserted, SCL is sampled low before SDA goes high.\nThe  Stop  condition  begins  with  SDA  asserted  low. When SDA is sampled low, the SCL pin is allowed to float. When the pin is sampled high (clock arbitration), the Baud Rate Generator is loaded with SSPADD<6:0> and counts down to 0. After the BRG times out, SDA is sampled. If  SDA is  sampled low, a bus collision has occurred. This is due to another master attempting to drive a data GLYPH<145> 0 GLYPH<146>  (Register 17-31). If the SCL pin is sampled low before SDA is allowed to float high, a bus collision  occurs. This is another case of another master attempting to drive a data GLYPH<145> 0 GLYPH<146>  (Figure 17-32).",
    "FIGURE 17-31: BUS COLLISION DURING A STOP CONDITION (CASE 1)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nSDA asserted low\nSDA sampled low after TBRG, set BCLIF\nGLYPH<145> 0 GLYPH<146>\nGLYPH<145>\n0\nGLYPH<146>",
    "FIGURE 17-32: BUS COLLISION DURING A STOP CONDITION (CASE 2)\nSDA\nSCL\nBCLIF\nPEN\nP\nSSPIF\nTBRG\nTBRG\nTBRG\nAssert SDA\nSCL goes low before SDA goes high, set BCLIF\nGLYPH<145> 0 GLYPH<146>\nGLYPH<145> 0 GLYPH<146>",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "18.0 ADDRESSABLE UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (USART)\nThe  Universal  Synchronous  Asynchronous  Receiver Transmitter (USART) module is one of the two serial I/O modules available in the PIC18F2X20/4X20 family of microcontrollers. (USART is also known as a Serial Communications Interface or SCI.) The USART can be configured as a full-duplex asynchronous system that can  communicate  with  peripheral  devices,  such  as CRT terminals and personal computers, or it can be configured as a half-duplex synchronous system that can communicate with peripheral devices, such as A/D or D/A integrated circuits, serial EEPROMs, etc.\nThe USART can be configured in the following modes:\nGLYPH<149> Asynchronous (full-duplex)\nGLYPH<149> Synchronous GLYPH<150> Master (half-duplex)\nGLYPH<149> Synchronous GLYPH<150> Slave (half-duplex)",
    "18.0 ADDRESSABLE UNIVERSAL SYNCHRONOUS ASYNCHRONOUS RECEIVER TRANSMITTER (USART)\nThe RC6/TX/CK and RC7/RX/DT pins must be configured as shown for use with the Universal Synchronous Asynchronous Receiver Transmitter:\nGLYPH<149> SPEN (RCSTA<7>) bit must be set (= 1 )\nGLYPH<149> TRISC<7> bit must be set (= 1 )\nGLYPH<149> TRISC<6> bit must be cleared (= 0 )\nRegister 18-1 shows the Transmit Status and Control register (TXSTA) and Register 18-2 shows the Receive Status and Control register (RCSTA).",
    "18.1 Asynchronous Operation in Power-Managed Modes\nThe USART may operate in Asynchronous mode while the peripheral clocks are being provided by the internal oscillator block. This mode makes it possible to remove the crystal or resonator that is commonly connected as the primary clock on the OSC1 and OSC2 pins.\nThe factory calibrates the internal oscillator block output (INTOSC) for 8 MHz. However, this frequency may drift as VDD or temperature changes and this directly affects the asynchronous baud rate. Two methods may be used to adjust the baud rate clock, but both require a reference clock source of some kind.\nThe  first (preferred) method  uses  the  OSCTUNE register to adjust the INTOSC output back to 8 MHz. Adjusting the value in the OSCTUNE register allows for fine resolution changes to the system clock source (see Section 3.6  GLYPH<147>INTOSC Frequency  DriftGLYPH<148> for more information).\nThe other method adjusts the value in the Baud Rate Generator since there may be not be fine enough resolution  when  adjusting  the  Baud  Rate  Generator  to compensate  for  a  gradual  change  in  the  peripheral clock frequency.",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nCSRC, R/W-0 = TX9. CSRC, R/W-0 = TXEN (1). CSRC, R/W-0 = SYNC. CSRC, U-0 = GLYPH<151>. CSRC, R/W-0 = BRGH. CSRC, R-1 = TRMT. CSRC, R/W-0 = TX9D. bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R-1 = . bit 7, R/W-0 = bit 0",
    "REGISTER 18-1: TXSTA: TRANSMIT STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 CSRC: Clock Source Select bit\nAsynchronous mode:\nDonGLYPH<146>t care.\nSynchronous mode:\n1 = Master mode (clock generated internally from BRG)\n0 = Slave mode (clock from external source)",
    "bit 6\nTX9: 9-Bit Transmit Enable bit\n1 = Selects 9-bit transmission\n0 = Selects 8-bit transmission",
    "bit 5\nTXEN: Transmit Enable bit (1)\n1 = Transmit enabled\n0 = Transmit disabled\nbit 4 SYNC: EUSART Mode Select bit\n1 = Synchronous mode\n0 = Asynchronous mode",
    "bit 3 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 2\nBRGH: High Baud Rate Select bit\nAsynchronous mode:\n1 = High speed\n0 = Low speed\nSynchronous mode:\nUnused in this mode.\nbit 1\nTRMT: Transmit Shift Register Status bit\n1 = TSR empty\n0 = TSR full",
    "bit 0 TX9D: 9th bit of Transmit Data\nCan be address/data bit or a parity bit.\nNote 1: SREN/CREN overrides TXEN in Sync mode.",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nSPEN, R/W-0 = RX9. SPEN, R/W-0 = SREN. SPEN, R/W-0 = CREN. SPEN, R/W-0 = ADDEN. SPEN, R-0 = FERR. SPEN, R-0 = OERR. SPEN, R-x = RX9D. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R-x = bit 0",
    "REGISTER 18-2: RCSTA: RECEIVE STATUS AND CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 SPEN: Serial Port Enable bit\n1 = Serial port enabled (configures RX/DT and TX/CK pins as serial port pins)\n0 = Serial port disabled (held in Reset)",
    "bit 6 RX9: 9-Bit Receive Enable bit\n1 = Selects 9-bit reception\n0 = Selects 8-bit reception",
    "bit 5 SREN: Single Receive Enable bit\nAsynchronous mode:\nDonGLYPH<146>t care.",
    "Synchronous mode GLYPH<150> Master:\n1 = Enables single receive\n0 = Disables single receive\nThis bit is cleared after reception is complete.\nSynchronous mode GLYPH<150> Slave:\nDonGLYPH<146>t care.",
    "bit 4\nCREN: Continuous Receive Enable bit\nAsynchronous mode:\n1 = Enables receiver\n0 = Disables receiver",
    "Synchronous mode:\n1 = Enables continuous receive until enable bit, CREN, is cleared (CREN overrides SREN)\n0 = Disables continuous receive\nbit 3\nADDEN: Address Detect Enable bit\nAsynchronous mode 9-bit (RX9 = 1 ):\n1 = Enables address detection, enables interrupt and loads the receive buffer when RSR<8> is set\n0 = Disables address detection, all bytes are received and ninth bit can be used as parity bit",
    "bit 2 FERR: Framing Error bit\n1 = Framing error (can be updated by reading RCREG register and receiving next valid byte)\n0 = No framing error",
    "bit 1\nOERR: Overrun Error bit\n1 = Overrun error (can be cleared by clearing bit CREN)\n0 = No overrun error",
    "bit 0\nRX9D: 9th bit of Received Data\nThis can be address/data bit or a parity bit and must be calculated by user firmware.",
    "18.2 USART Baud Rate Generator (BRG)\nThe BRG  supports both the Asynchronous and Synchronous modes of the USART. It is a dedicated 8-bit Baud  Rate  Generator.  The  SPBRG  register controls  the  period  of  a  free-running  8-bit  timer.  In Asynchronous mode, bit BRGH (TXSTA<2>) also controls the baud rate. In Synchronous mode, bit BRGH is ignored. Table 18-1 shows the formula for computation of the baud rate for different USART modes which only apply in Master mode (internal clock).\nGiven  the  desired  baud  rate  and  FOSC,  the  nearest integer value for the SPBRG register can be calculated using the formula in Table 18-1. From this, the error in baud rate can be determined.\nExample 18-1 shows the calculation of the baud rate error for the following conditions:\nGLYPH<149> FOSC = 16 MHz\nGLYPH<149> Desired Baud Rate = 9600\nGLYPH<149> BRGH = 0\nGLYPH<149> SYNC = 0",
    "18.2 USART Baud Rate Generator (BRG)\nIt  may  be  advantageous  to  use  the  high  baud  rate (BRGH = 1 ), even for slower baud clocks, because the FOSC/(16 (X + 1)) equation can reduce the baud rate error in some cases.\nWriting a new value to the SPBRG register causes the BRG timer to be reset (or cleared). This ensures the BRG  does  not  wait for a timer overflow before outputting the new baud rate.",
    "18.2.1 POWER-MANAGED MODE OPERATION\nThe system clock is used to generate the desired baud rate; however, when  a  power-managed  mode  is entered, the clock source may be operating at a different frequency than in PRI_RUN mode. In Sleep mode, no  clocks  are  present  and  in  PRI_IDLE,  the  primary clock source continues to provide clocks to the baud rate generator;  however,  in  other  power-managed modes, the clock frequency will probably change. This may require the value in SPBRG to be adjusted.",
    "18.2.2 SAMPLING\nThe data on the RC7/RX/DT pin is sampled three times by a majority detect circuit to determine if a high or a low level is present at the RX pin.",
    "EXAMPLE 18-1: CALCULATING BAUD RATE ERROR\nDesired Baud Rate, 1 = = FOSC/(64 (X + 1)). Solving for X:, 1 = . X, 1 = = ((FOSC/Desired Baud Rate)/64) GLYPH<150> 1 ((16000000/9600)/64) GLYPH<150> 1. X, 1 = =. X, 1 = = [25.042] = 25. Calculated Baud Rate, 1 = = 16000000/(64 (25 + 1)) = 9615. Error, 1 = = (Calculated Baud Rate GLYPH<150> Desired Baud Rate). Desired Baud Rate, 1 = = (9615 GLYPH<150> 9600)/9600 = 0.16%",
    "TABLE 18-1: BAUD RATE FORMULA\n0 (Asynchronous) 1 (Synchronous), BRGH = 0 (Low Speed) = Baud Rate = FOSC/(64 (X + 1)) Baud Rate = FOSC/(4 (X + 1)). 0 (Asynchronous) 1 (Synchronous), BRGH = 1 (High Speed) = Baud Rate = FOSC/(16 (X + 1)) N/A\nLegend: X = value in SPBRG (0 to 255)",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nTXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000 -010. TXSTA, Value on all other Resets = 0000 -010. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000 000x. RCSTA, Value on all other Resets = 0000 000x. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG,",
    "TABLE 18-2: REGISTERS ASSOCIATED WITH BAUD RATE GENERATOR\nBit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000 0000. SPBRG, Value on all other Resets = 0000 0000\nLegend: x = unknown, - = unimplemented, read as GLYPH<145> 0 GLYPH<146> . Shaded cells are not used by the BRG.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n0.3, FOSC = 40.000 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 40.000 MHz.% Error = GLYPH<151>. 0.3, FOSC = 40.000 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 20.000 MHz.% Error = GLYPH<151>. 0.3, FOSC = 20.000 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 16.000 MHz.Actual Rate (K) = 0.98. 0.3, FOSC = 16.000 MHz.% Error = 225.52. 0.3, FOSC = 16.000 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.Actual Rate (K) = 0.61. 0.3, FOSC = 10.000 MHz.% Error = 103.45. 0.3, FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 1.2, FOSC = 40.000 MHz.Actual Rate (K) = GLYPH<151>. 1.2, FOSC = 40.000 MHz.% Error = GLYPH<151>. 1.2, FOSC = 40.000 MHz.SPBRG value (decimal) = GLYPH<151>. 1.2, FOSC = 20.000 MHz.Actual Rate (K) = 1.22. 1.2, FOSC = 20.000 MHz.% Error = 1.73. 1.2, FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 1.2, FOSC = 16.000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 16.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.% Error = 0.16. 1.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 207. 1.2, FOSC = 10.000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 10.000 MHz.% Error = 0.16. 1.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 2.4, FOSC = 40.000 MHz.Actual Rate (K) = 2.44. 2.4, FOSC = 40.000 MHz.% Error = 1.73. 2.4, FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 20.000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 20.000 MHz.% Error = 0.16. 2.4, FOSC = 20.000 MHz.SPBRG value (decimal) = 129.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n2.4, FOSC = 16.000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 16.000 MHz.% Error = 0.16. 2.4, FOSC = 16.000 MHz.SPBRG value (decimal) = 103. 2.4, FOSC = 10.000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 10.000 MHz.% Error = 0.16. 2.4, FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 9.6, FOSC = 40.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 40.000 MHz.% Error = 0.16. 9.6, FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 9.6, FOSC = 20.000 MHz.Actual Rate (K) = 9.47. 9.6, FOSC = 20.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.% Error = -1.36. 9.6, FOSC = 20.000 MHz.SPBRG value (decimal) = 32. 9.6, FOSC = 16.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 16.000 MHz.% Error = 0.16. 9.6, FOSC = 16.000 MHz.SPBRG value (decimal) = 25. 9.6, FOSC = 10.000 MHz.Actual Rate (K) = 9.77. 9.6, FOSC = 10.000 MHz.% Error = 1.73. 9.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 15. 19.2, FOSC = 40.000 MHz.Actual Rate (K) = 18.94. 19.2, FOSC = 40.000 MHz.% Error = -1.36. 19.2, FOSC = 40.000 MHz.SPBRG value (decimal) = 32.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n19.2, FOSC = 20.000 MHz.Actual Rate (K) = 19.53. 19.2, FOSC = 20.000 MHz.% Error = 1.73. 19.2, FOSC = 20.000 MHz.SPBRG value (decimal) = 15. 19.2, FOSC = 16.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 16.000 MHz.% Error = 0.16. 19.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 12. 19.2, FOSC = 10.000 MHz.Actual Rate (K) = 19.53. 19.2, FOSC = 10.000 MHz.% Error = 1.73. 19.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 38.4, FOSC = 40.000 MHz.Actual Rate (K) = 39.06. 38.4, FOSC = 40.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.% Error = 1.73. 38.4, FOSC = 40.000 MHz.SPBRG value (decimal) = 15. 38.4, FOSC = 20.000 MHz.Actual Rate (K) = 39.06. 38.4, FOSC = 20.000 MHz.% Error = 1.73. 38.4, FOSC = 20.000 MHz.SPBRG value (decimal) = 7. 38.4, FOSC = 16.000 MHz.Actual Rate (K) = 35.71. 38.4, FOSC = 16.000 MHz.% Error = -6.99. 38.4, FOSC = 16.000 MHz.SPBRG value (decimal) = 6. 38.4, FOSC = 10.000 MHz.Actual Rate (K) = 39.06. 38.4, FOSC = 10.000 MHz.% Error = 1.73. 38.4, FOSC = 10.000 MHz.SPBRG value (decimal) = 3.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n57.6, FOSC = 40.000 MHz.Actual Rate (K) = 56.82. 57.6, FOSC = 40.000 MHz.% Error = -1.36. 57.6, FOSC = 40.000 MHz.SPBRG value (decimal) = 10. 57.6, FOSC = 20.000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 20.000 MHz.% Error = 8.51. 57.6, FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 57.6, FOSC = 16.000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 16.000 MHz.% Error = 8.51. 57.6, FOSC = 16.000 MHz.SPBRG value (decimal) = 3. 57.6, FOSC = 10.000 MHz.Actual Rate (K) = 52.08. 57.6, FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n10.000 MHz.% Error = -9.58. 57.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 76.8, FOSC = 40.000 MHz.Actual Rate (K) = 78.13. 76.8, FOSC = 40.000 MHz.% Error = 1.73. 76.8, FOSC = 40.000 MHz.SPBRG value (decimal) = 7. 76.8, FOSC = 20.000 MHz.Actual Rate (K) = 78.13. 76.8, FOSC = 20.000 MHz.% Error = 1.73. 76.8, FOSC = 20.000 MHz.SPBRG value (decimal) = 3. 76.8, FOSC = 16.000 MHz.Actual Rate (K) = 83.33. 76.8, FOSC = 16.000 MHz.% Error = 8.51. 76.8, FOSC = 16.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n2. 76.8, FOSC = 10.000 MHz.Actual Rate (K) = 78.13. 76.8, FOSC = 10.000 MHz.% Error = 1.73. 76.8, FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 96.0, FOSC = 40.000 MHz.Actual Rate (K) = 89.29. 96.0, FOSC = 40.000 MHz.% Error = -6.99. 96.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 6. 96.0, FOSC = 20.000 MHz.Actual Rate (K) = 104.17. 96.0, FOSC = 20.000 MHz.% Error = 8.51. 96.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 96.0, FOSC = 16.000 MHz.Actual Rate (K) = GLYPH<151>. 96.0,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nFOSC = 16.000 MHz.% Error = GLYPH<151>. 96.0, FOSC = 16.000 MHz.SPBRG value (decimal) = GLYPH<151>. 96.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 96.0, FOSC = 10.000 MHz.% Error = GLYPH<151>. 96.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 40.000 MHz.Actual Rate (K) = 125.00. 115.2, FOSC = 40.000 MHz.% Error = 8.51. 115.2, FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 115.2, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 115.2, FOSC = 20.000 MHz.% Error =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nGLYPH<151>. 115.2, FOSC = 20.000 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 16.000 MHz.Actual Rate (K) = 125.00. 115.2, FOSC = 16.000 MHz.% Error = 8.51. 115.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 1. 115.2, FOSC = 10.000 MHz.Actual Rate (K) = 78.13. 115.2, FOSC = 10.000 MHz.% Error = -32.18. 115.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 250.0, FOSC = 40.000 MHz.Actual Rate (K) = 208.33. 250.0, FOSC = 40.000 MHz.% Error = -16.67. 250.0, FOSC = 40.000 MHz.SPBRG value (decimal)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n= 2. 250.0, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 20.000 MHz.% Error = GLYPH<151>. 250.0, FOSC = 20.000 MHz.SPBRG value (decimal) = . 250.0, FOSC = 16.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 16.000 MHz.% Error = 0.00. 250.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 0. 250.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 10.000 MHz.% Error = GLYPH<151>. 250.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>. 300.0, FOSC = 40.000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n(K) = 312.50. 300.0, FOSC = 40.000 MHz.% Error = 4.17. 300.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 1. 300.0, FOSC = 20.000 MHz.Actual Rate (K) = 312.50. 300.0, FOSC = 20.000 MHz.% Error = 4.17. 300.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 0. 300.0, FOSC = 16.000 MHz.Actual Rate (K) = GLYPH<151>. 300.0, FOSC = 16.000 MHz.% Error = GLYPH<151>. 300.0, FOSC = 16.000 MHz.SPBRG value (decimal) = GLYPH<151>. 300.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 300.0, FOSC = 10.000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.% Error = GLYPH<151>. 300.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>. 625.0, FOSC = 40.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 40.000 MHz.% Error = 0.00. 625.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 0. 625.0, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 625.0, FOSC = 20.000 MHz.% Error = GLYPH<151>. 625.0, FOSC = 20.000 MHz.SPBRG value (decimal) = GLYPH<151>. 625.0, FOSC = 16.000 MHz.Actual Rate (K) = GLYPH<151>. 625.0, FOSC = 16.000 MHz.% Error = GLYPH<151>.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n625.0, FOSC = 16.000 MHz.SPBRG value (decimal) = GLYPH<151>. 625.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 625.0, FOSC = 10.000 MHz.% Error = GLYPH<151>. 625.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n0.3, FOSC = 8.000000 MHz.Actual Rate (K) = 0.49. 0.3, FOSC = 8.000000 MHz.% Error = 62.76. 0.3, FOSC = 8.000000 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 7.159090 MHz.Actual Rate (K) = 0.44. 0.3, FOSC = 7.159090 MHz.% Error = 45.65. 0.3, FOSC = 7.159090 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 5.068800 MHz.Actual Rate (K) = 0.31. 0.3, FOSC = 5.068800 MHz.% Error = 3.13. 0.3, FOSC = 5.068800 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 4.000000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.Actual Rate (K) = 0.30. 0.3, FOSC = 4.000000 MHz.% Error = 0.16. 0.3, FOSC = 4.000000 MHz.SPBRG value (decimal) = 207. 1.2, FOSC = 8.000000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 8.000000 MHz.% Error = 0.16. 1.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 103. 1.2, FOSC = 7.159090 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 7.159090 MHz.% Error = 0.23. 1.2, FOSC = 7.159090 MHz.SPBRG value (decimal) = 92. 1.2, FOSC = 5.068800 MHz.Actual Rate (K) = 1.20.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n1.2, FOSC = 5.068800 MHz.% Error = 0.00. 1.2, FOSC = 5.068800 MHz.SPBRG value (decimal) = 65. 1.2, FOSC = 4.000000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 4.000000 MHz.% Error = 0.16. 1.2, FOSC = 4.000000 MHz.SPBRG value (decimal) = 51. 2.4, FOSC = 8.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 8.000000 MHz.% Error = 0.16. 2.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 51. 2.4, FOSC = 7.159090 MHz.Actual Rate (K) = 2.38. 2.4, FOSC = 7.159090",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.% Error = -0.83. 2.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 46. 2.4, FOSC = 5.068800 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 5.068800 MHz.% Error = 0.00. 2.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 32. 2.4, FOSC = 4.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 4.000000 MHz.% Error = 0.16. 2.4, FOSC = 4.000000 MHz.SPBRG value (decimal) = 25. 9.6, FOSC = 8.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 8.000000 MHz.% Error = 0.16.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n9.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 12. 9.6, FOSC = 7.159090 MHz.Actual Rate (K) = 9.32. 9.6, FOSC = 7.159090 MHz.% Error = -2.90. 9.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 11. 9.6, FOSC = 5.068800 MHz.Actual Rate (K) = 9.90. 9.6, FOSC = 5.068800 MHz.% Error = 3.13. 9.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = 7. 9.6, FOSC = 4.000000 MHz.Actual Rate (K) = 8.93. 9.6, FOSC = 4.000000 MHz.% Error = -6.99. 9.6, FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n4.000000 MHz.SPBRG value (decimal) = 6. 19.2, FOSC = 8.000000 MHz.Actual Rate (K) = 17.86. 19.2, FOSC = 8.000000 MHz.% Error = -6.99. 19.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 6. 19.2, FOSC = 7.159090 MHz.Actual Rate (K) = 18.64. 19.2, FOSC = 7.159090 MHz.% Error = -2.90. 19.2, FOSC = 7.159090 MHz.SPBRG value (decimal) = 5. 19.2, FOSC = 5.068800 MHz.Actual Rate (K) = 19.80. 19.2, FOSC = 5.068800 MHz.% Error = 3.13. 19.2, FOSC = 5.068800 MHz.SPBRG value",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n(decimal) = 3. 19.2, FOSC = 4.000000 MHz.Actual Rate (K) = 20.83. 19.2, FOSC = 4.000000 MHz.% Error = 8.51. 19.2, FOSC = 4.000000 MHz.SPBRG value (decimal) = 2. 38.4, FOSC = 8.000000 MHz.Actual Rate (K) = 41.67. 38.4, FOSC = 8.000000 MHz.% Error = 8.51. 38.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 2. 38.4, FOSC = 7.159090 MHz.Actual Rate (K) = 37.29. 38.4, FOSC = 7.159090 MHz.% Error = -2.90. 38.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 2. 38.4, FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n5.068800 MHz.Actual Rate (K) = 39.60. 38.4, FOSC = 5.068800 MHz.% Error = 3.13. 38.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 1. 38.4, FOSC = 4.000000 MHz.Actual Rate (K) = 31.25. 38.4, FOSC = 4.000000 MHz.% Error = -18.62. 38.4, FOSC = 4.000000 MHz.SPBRG value (decimal) = 1. 57.6, FOSC = 8.000000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 8.000000 MHz.% Error = 8.51. 57.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 1. 57.6, FOSC = 7.159090 MHz.Actual Rate (K)",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n= 55.93. 57.6, FOSC = 7.159090 MHz.% Error = -2.90. 57.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 1. 57.6, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 57.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 57.6, FOSC = 4.000000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 4.000000 MHz.% Error = 8.51. 57.6, FOSC = 4.000000 MHz.SPBRG value (decimal) = 0. GLYPH<151>, FOSC = 8.000000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n(K) = GLYPH<151>. GLYPH<151>, FOSC = 8.000000 MHz.% Error = GLYPH<151>. GLYPH<151>, FOSC = 8.000000 MHz.SPBRG value (decimal) = GLYPH<151>. GLYPH<151>, FOSC = 7.159090 MHz.Actual Rate (K) = GLYPH<151>. GLYPH<151>, FOSC = 7.159090 MHz.% Error = GLYPH<151>. GLYPH<151>, FOSC = 7.159090 MHz.SPBRG value (decimal) = GLYPH<151>. GLYPH<151>, FOSC = 5.068800 MHz.Actual Rate (K) = 79.20. GLYPH<151>, FOSC = 5.068800 MHz.% Error = 3.13. GLYPH<151>, FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n5.068800 MHz.SPBRG value (decimal) = 0. GLYPH<151>, FOSC = 4.000000 MHz.Actual Rate (K) = GLYPH<151>. GLYPH<151>, FOSC = 4.000000 MHz.% Error = GLYPH<151>. GLYPH<151>, FOSC = 4.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 8.000000 MHz.Actual Rate (K) = 125.00. 115.2, FOSC = 8.000000 MHz.% Error = 8.51. 115.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 0. 115.2, FOSC = 7.159090 MHz.Actual Rate (K) = 111.86. 115.2, FOSC = 7.159090 MHz.% Error = -2.90.",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n115.2, FOSC = 7.159090 MHz.SPBRG value (decimal) = 0. 115.2, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 115.2, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 115.2, FOSC = 5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 4.000000 MHz.Actual Rate (K) = GLYPH<151>. 115.2, FOSC = 4.000000 MHz.% Error = GLYPH<151>. 115.2, FOSC = 4.000000 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n0.3, FOSC = 3.579545 MHz.Actual Rate (K) = 0.30. 0.3, FOSC = 3.579545 MHz.% Error = 0.23. 0.3, FOSC = 3.579545 MHz.SPBRG value (decimal) = 185. 0.3, FOSC = 2.000000 MHz.Actual Rate (K) = 0.30. 0.3, FOSC = 2.000000 MHz.% Error = 0.16. 0.3, FOSC = 2.000000 MHz.SPBRG value (decimal) = 103. 0.3, FOSC = 1.000000 MHz.Actual Rate (K) = 0.30. 0.3, FOSC = 1.000000 MHz.% Error = 0.16. 0.3, FOSC = 1.000000 MHz.SPBRG value (decimal) = 51. 0.3, FOSC =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n0.032768 MHz.Actual Rate (K) = 0.26. 0.3, FOSC = 0.032768 MHz.% Error = -14.67. 0.3, FOSC = 0.032768 MHz.SPBRG value (decimal) = 1. 1.2, FOSC = 3.579545 MHz.Actual Rate (K) = 1.19. 1.2, FOSC = 3.579545 MHz.% Error = -0.83. 1.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 46. 1.2, FOSC = 2.000000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 2.000000 MHz.% Error = 0.16. 1.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 25. 1.2, FOSC = 1.000000 MHz.Actual",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nRate (K) = 1.20. 1.2, FOSC = 1.000000 MHz.% Error = 0.16. 1.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = 12. 1.2, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 1.2, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 1.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 2.4, FOSC = 3.579545 MHz.Actual Rate (K) = 2.43. 2.4, FOSC = 3.579545 MHz.% Error = 1.32. 2.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = 22. 2.4, FOSC = 2.000000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.Actual Rate (K) = 2.40. 2.4, FOSC = 2.000000 MHz.% Error = 0.16. 2.4, FOSC = 2.000000 MHz.SPBRG value (decimal) = 12. 2.4, FOSC = 1.000000 MHz.Actual Rate (K) = 2.23. 2.4, FOSC = 1.000000 MHz.% Error = -6.99. 2.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = 6. 2.4, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 2.4, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 2.4, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 9.6, FOSC = 3.579545",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.Actual Rate (K) = 9.32. 9.6, FOSC = 3.579545 MHz.% Error = -2.90. 9.6, FOSC = 3.579545 MHz.SPBRG value (decimal) = 5. 9.6, FOSC = 2.000000 MHz.Actual Rate (K) = 10.42. 9.6, FOSC = 2.000000 MHz.% Error = 8.51. 9.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = 2. 9.6, FOSC = 1.000000 MHz.Actual Rate (K) = 7.81. 9.6, FOSC = 1.000000 MHz.% Error = -18.62. 9.6, FOSC = 1.000000 MHz.SPBRG value (decimal) = 1. 9.6, FOSC = 0.032768 MHz.Actual Rate (K) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nGLYPH<151>. 9.6, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 9.6, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 19.2, FOSC = 3.579545 MHz.Actual Rate (K) = 18.64. 19.2, FOSC = 3.579545 MHz.% Error = -2.90. 19.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 2. 19.2, FOSC = 2.000000 MHz.Actual Rate (K) = 15.63. 19.2, FOSC = 2.000000 MHz.% Error = -18.62. 19.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 1. 19.2, FOSC = 1.000000 MHz.Actual Rate",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\n(K) = 15.63. 19.2, FOSC = 1.000000 MHz.% Error = -18.62. 19.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = 0. 19.2, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 38.4, FOSC = 3.579545 MHz.Actual Rate (K) = GLYPH<151>. 38.4, FOSC = 3.579545 MHz.% Error = GLYPH<151>. 38.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = GLYPH<151>. 38.4,",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nFOSC = 2.000000 MHz.Actual Rate (K) = 31.25. 38.4, FOSC = 2.000000 MHz.% Error = -18.62. 38.4, FOSC = 2.000000 MHz.SPBRG value (decimal) = 0. 38.4, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 38.4, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 38.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.SPBRG value (decimal) =",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nGLYPH<151>. 57.6, FOSC = 3.579545 MHz.Actual Rate (K) = 55.93. 57.6, FOSC = 3.579545 MHz.% Error = -2.90. 57.6, FOSC = 3.579545 MHz.SPBRG value (decimal) = 0. 57.6, FOSC = 2.000000 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 2.000000 MHz.% Error = GLYPH<151>. 57.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 57.6, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 57.6, FOSC = 1.000000",
    "TABLE 18-3: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , LOW SPEED) 0\nMHz.SPBRG value (decimal) = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n2.4, FOSC = 40.000 MHz.Actual Rate (K) = GLYPH<151>. 2.4, FOSC = 40.000 MHz.% Error = GLYPH<151>. 2.4, FOSC = 40.000 MHz.SPBRG value (decimal) = GLYPH<151>. 2.4, FOSC = 20.000 MHz.Actual Rate (K) = 4.88. 2.4, FOSC = 20.000 MHz.% Error = 103.45. 2.4, FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 16.000 MHz.Actual Rate (K) = 3.91. 2.4, FOSC = 16.000 MHz.% Error = 62.76. 2.4, FOSC = 16.000 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 10.000 MHz.Actual Rate (K) = 2.44.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n2.4, FOSC = 10.000 MHz.% Error = 1.73. 2.4, FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 9.6, FOSC = 40.000 MHz.Actual Rate (K) = 9.77. 9.6, FOSC = 40.000 MHz.% Error = 1.73. 9.6, FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 9.6, FOSC = 20.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 20.000 MHz.% Error = 0.16. 9.6, FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 9.6, FOSC = 16.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 16.000 MHz.% Error = 0.16. 9.6, FOSC = 16.000",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nMHz.SPBRG value (decimal) = 103. 9.6, FOSC = 10.000 MHz.Actual Rate (K) = 9.63. 9.6, FOSC = 10.000 MHz.% Error = 0.16. 9.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 19.2, FOSC = 40.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 40.000 MHz.% Error = 0.16. 19.2, FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 19.2, FOSC = 20.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 20.000 MHz.% Error = 0.16. 19.2, FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 19.2, FOSC = 16.000 MHz.Actual Rate (K) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n19.23. 19.2, FOSC = 16.000 MHz.% Error = 0.16. 19.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 51. 19.2, FOSC = 10.000 MHz.Actual Rate (K) = 18.94. 19.2, FOSC = 10.000 MHz.% Error = -1.36. 19.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 32. 38.4, FOSC = 40.000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 40.000 MHz.% Error = 0.16. 38.4, FOSC = 40.000 MHz.SPBRG value (decimal) = 64. 38.4, FOSC = 20.000 MHz.Actual Rate (K) = 37.88. 38.4, FOSC = 20.000 MHz.% Error = -1.36. 38.4, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n20.000 MHz.SPBRG value (decimal) = 32. 38.4, FOSC = 16.000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 16.000 MHz.% Error = 0.16. 38.4, FOSC = 16.000 MHz.SPBRG value (decimal) = 25. 38.4, FOSC = 10.000 MHz.Actual Rate (K) = 39.06. 38.4, FOSC = 10.000 MHz.% Error = 1.73. 38.4, FOSC = 10.000 MHz.SPBRG value (decimal) = 15. 57.6, FOSC = 40.000 MHz.Actual Rate (K) = 58.14. 57.6, FOSC = 40.000 MHz.% Error = 0.94. 57.6, FOSC = 40.000 MHz.SPBRG value (decimal) = 42. 57.6, FOSC = 20.000 MHz.Actual Rate (K) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n56.82. 57.6, FOSC = 20.000 MHz.% Error = -1.36. 57.6, FOSC = 20.000 MHz.SPBRG value (decimal) = 21. 57.6, FOSC = 16.000 MHz.Actual Rate (K) = 58.82. 57.6, FOSC = 16.000 MHz.% Error = 2.12. 57.6, FOSC = 16.000 MHz.SPBRG value (decimal) = 16. 57.6, FOSC = 10.000 MHz.Actual Rate (K) = 56.82. 57.6, FOSC = 10.000 MHz.% Error = -1.36. 57.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 10. 76.8, FOSC = 40.000 MHz.Actual Rate (K) = 75.76. 76.8, FOSC = 40.000 MHz.% Error = -1.36. 76.8, FOSC",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n= 40.000 MHz.SPBRG value (decimal) = 32. 76.8, FOSC = 20.000 MHz.Actual Rate (K) = 78.13. 76.8, FOSC = 20.000 MHz.% Error = 1.73. 76.8, FOSC = 20.000 MHz.SPBRG value (decimal) = 15. 76.8, FOSC = 16.000 MHz.Actual Rate (K) = 76.92. 76.8, FOSC = 16.000 MHz.% Error = 0.16. 76.8, FOSC = 16.000 MHz.SPBRG value (decimal) = 12. 76.8, FOSC = 10.000 MHz.Actual Rate (K) = 78.13. 76.8, FOSC = 10.000 MHz.% Error = 1.73. 76.8, FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 96.0, FOSC = 40.000 MHz.Actual Rate (K)",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n= 96.15. 96.0, FOSC = 40.000 MHz.% Error = 0.16. 96.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 25. 96.0, FOSC = 20.000 MHz.Actual Rate (K) = 96.15. 96.0, FOSC = 20.000 MHz.% Error = 0.16. 96.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 12. 96.0, FOSC = 16.000 MHz.Actual Rate (K) = 100.00. 96.0, FOSC = 16.000 MHz.% Error = 4.17. 96.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 9. 96.0, FOSC = 10.000 MHz.Actual Rate (K) = 89.29. 96.0, FOSC = 10.000 MHz.% Error = -6.99. 96.0, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n10.000 MHz.SPBRG value (decimal) = 6. 115.2, FOSC = 40.000 MHz.Actual Rate (K) = 113.64. 115.2, FOSC = 40.000 MHz.% Error = -1.36. 115.2, FOSC = 40.000 MHz.SPBRG value (decimal) = 21. 115.2, FOSC = 20.000 MHz.Actual Rate (K) = 113.64. 115.2, FOSC = 20.000 MHz.% Error = -1.36. 115.2, FOSC = 20.000 MHz.SPBRG value (decimal) = 10. 115.2, FOSC = 16.000 MHz.Actual Rate (K) = 111.11. 115.2, FOSC = 16.000 MHz.% Error = -3.55. 115.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 8. 115.2, FOSC = 10.000 MHz.Actual Rate",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n(K) = 125.00. 115.2, FOSC = 10.000 MHz.% Error = 8.51. 115.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 250.0, FOSC = 40.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 40.000 MHz.% Error = 0.00. 250.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 9. 250.0, FOSC = 20.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 20.000 MHz.% Error = 0.00. 250.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 250.0, FOSC = 16.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 16.000 MHz.% Error = 0.00. 250.0,",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nFOSC = 16.000 MHz.SPBRG value (decimal) = 3. 250.0, FOSC = 10.000 MHz.Actual Rate (K) = 208.33. 250.0, FOSC = 10.000 MHz.% Error = -16.67. 250.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 300.0, FOSC = 40.000 MHz.Actual Rate (K) = 312.50. 300.0, FOSC = 40.000 MHz.% Error = 4.17. 300.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 7. 300.0, FOSC = 20.000 MHz.Actual Rate (K) = 312.50. 300.0, FOSC = 20.000 MHz.% Error = 4.17. 300.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 3. 300.0, FOSC = 16.000 MHz.Actual",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nRate (K) = 333.33. 300.0, FOSC = 16.000 MHz.% Error = 11.11. 300.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 2. 300.0, FOSC = 10.000 MHz.Actual Rate (K) = 312.50. 300.0, FOSC = 10.000 MHz.% Error = 4.17. 300.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 1. 500.0, FOSC = 40.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 40.000 MHz.% Error = 0.00. 500.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 4. 500.0, FOSC = 20.000 MHz.Actual Rate (K) = 416.67. 500.0, FOSC = 20.000 MHz.% Error = -16.67.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n500.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 2. 500.0, FOSC = 16.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 16.000 MHz.% Error = 0.00. 500.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 1. 500.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 500.0, FOSC = 10.000 MHz.% Error = GLYPH<151>. 500.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>. 625.0, FOSC = 40.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 40.000 MHz.% Error = 0.00. 625.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 3.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n625.0, FOSC = 20.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 20.000 MHz.% Error = 0.00. 625.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 1. 625.0, FOSC = 16.000 MHz.Actual Rate (K) = GLYPH<151>. 625.0, FOSC = 16.000 MHz.% Error = GLYPH<151>. 625.0, FOSC = 16.000 MHz.SPBRG value (decimal) = GLYPH<151>. 625.0, FOSC = 10.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 10.000 MHz.% Error = 0.00. 625.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 0. 1000.0, FOSC = 40.000 MHz.Actual Rate (K) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n833.33. 1000.0, FOSC = 40.000 MHz.% Error = -16.67. 1000.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 2. 1000.0, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 1000.0, FOSC = 20.000 MHz.% Error = GLYPH<151>. 1000.0, FOSC = 20.000 MHz.SPBRG value (decimal) = GLYPH<151>. 1000.0, FOSC = 16.000 MHz.Actual Rate (K) = 1000.00. 1000.0, FOSC = 16.000 MHz.% Error = 0.00. 1000.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 0. 1000.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 1000.0, FOSC = 10.000 MHz.%",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nError = GLYPH<151>. 1000.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>. 1250.0, FOSC = 40.000 MHz.Actual Rate (K) = 1250.00. 1250.0, FOSC = 40.000 MHz.% Error = 0.00. 1250.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 1. 1250.0, FOSC = 20.000 MHz.Actual Rate (K) = 1250.00. 1250.0, FOSC = 20.000 MHz.% Error = 0.00. 1250.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 0. 1250.0, FOSC = 16.000 MHz.Actual Rate (K) = GLYPH<151>. 1250.0, FOSC = 16.000 MHz.% Error = GLYPH<151>.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n1250.0, FOSC = 16.000 MHz.SPBRG value (decimal) = GLYPH<151>. 1250.0, FOSC = 10.000 MHz.Actual Rate (K) = GLYPH<151>. 1250.0, FOSC = 10.000 MHz.% Error = GLYPH<151>. 1250.0, FOSC = 10.000 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n0.3, FOSC = 8.000000 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 8.000000 MHz.% Error = GLYPH<151>. 0.3, FOSC = 8.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 7.159090 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 7.159090 MHz.% Error = GLYPH<151>. 0.3, FOSC = 7.159090 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 0.3, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 4.000 MHz.Actual Rate (K) = 0.98. 0.3, FOSC = 4.000 MHz.% Error = 225.52. 0.3, FOSC = 4.000 MHz.SPBRG value (decimal) = 255. 1.2, FOSC = 8.000000 MHz.Actual Rate (K) = 1.95. 1.2, FOSC = 8.000000 MHz.% Error = 62.76. 1.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 255. 1.2, FOSC = 7.159090 MHz.Actual Rate (K) = 1.75. 1.2, FOSC = 7.159090 MHz.% Error = 45.65. 1.2, FOSC = 7.159090 MHz.SPBRG value (decimal) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n255. 1.2, FOSC = 5.068800 MHz.Actual Rate (K) = 1.24. 1.2, FOSC = 5.068800 MHz.% Error = 3.13. 1.2, FOSC = 5.068800 MHz.SPBRG value (decimal) = 255. 1.2, FOSC = 4.000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 4.000 MHz.% Error = 0.16. 1.2, FOSC = 4.000 MHz.SPBRG value (decimal) = 207. 2.4, FOSC = 8.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 8.000000 MHz.% Error = 0.16. 2.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 207. 2.4, FOSC = 7.159090 MHz.Actual Rate",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n(K) = 2.41. 2.4, FOSC = 7.159090 MHz.% Error = 0.23. 2.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 185. 2.4, FOSC = 5.068800 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 5.068800 MHz.% Error = 0.00. 2.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 131. 2.4, FOSC = 4.000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 4.000 MHz.% Error = 0.16. 2.4, FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 9.6, FOSC = 8.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n8.000000 MHz.% Error = 0.16. 9.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 51. 9.6, FOSC = 7.159090 MHz.Actual Rate (K) = 9.52. 9.6, FOSC = 7.159090 MHz.% Error = -0.83. 9.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 46. 9.6, FOSC = 5.068800 MHz.Actual Rate (K) = 9.60. 9.6, FOSC = 5.068800 MHz.% Error = 0.00. 9.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = 32. 9.6, FOSC = 4.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 4.000 MHz.% Error = 0.16.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n9.6, FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 19.2, FOSC = 8.000000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 8.000000 MHz.% Error = 0.16. 19.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 25. 19.2, FOSC = 7.159090 MHz.Actual Rate (K) = 19.45. 19.2, FOSC = 7.159090 MHz.% Error = 1.32. 19.2, FOSC = 7.159090 MHz.SPBRG value (decimal) = 22. 19.2, FOSC = 5.068800 MHz.Actual Rate (K) = 18.64. 19.2, FOSC = 5.068800 MHz.% Error = -2.94. 19.2, FOSC = 5.068800",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nMHz.SPBRG value (decimal) = 16. 19.2, FOSC = 4.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 4.000 MHz.% Error = 0.16. 19.2, FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 38.4, FOSC = 8.000000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 8.000000 MHz.% Error = 0.16. 38.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 12. 38.4, FOSC = 7.159090 MHz.Actual Rate (K) = 37.29. 38.4, FOSC = 7.159090 MHz.% Error = -2.90. 38.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 11. 38.4, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n5.068800 MHz.Actual Rate (K) = 39.60. 38.4, FOSC = 5.068800 MHz.% Error = 3.13. 38.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 7. 38.4, FOSC = 4.000 MHz.Actual Rate (K) = 35.71. 38.4, FOSC = 4.000 MHz.% Error = -6.99. 38.4, FOSC = 4.000 MHz.SPBRG value (decimal) = 6. 57.6, FOSC = 8.000000 MHz.Actual Rate (K) = 55.56. 57.6, FOSC = 8.000000 MHz.% Error = -3.55. 57.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 8. 57.6, FOSC = 7.159090 MHz.Actual Rate (K) = 55.93.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n57.6, FOSC = 7.159090 MHz.% Error = -2.90. 57.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 7. 57.6, FOSC = 5.068800 MHz.Actual Rate (K) = 52.80. 57.6, FOSC = 5.068800 MHz.% Error = -8.33. 57.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = 5. 57.6, FOSC = 4.000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 4.000 MHz.% Error = 8.51. 57.6, FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 76.8, FOSC = 8.000000 MHz.Actual Rate (K) = 71.43. 76.8, FOSC = 8.000000 MHz.% Error",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n= -6.99. 76.8, FOSC = 8.000000 MHz.SPBRG value (decimal) = 6. 76.8, FOSC = 7.159090 MHz.Actual Rate (K) = 74.57. 76.8, FOSC = 7.159090 MHz.% Error = -2.90. 76.8, FOSC = 7.159090 MHz.SPBRG value (decimal) = 5. 76.8, FOSC = 5.068800 MHz.Actual Rate (K) = 79.20. 76.8, FOSC = 5.068800 MHz.% Error = 3.13. 76.8, FOSC = 5.068800 MHz.SPBRG value (decimal) = 3. 76.8, FOSC = 4.000 MHz.Actual Rate (K) = 83.33. 76.8, FOSC = 4.000 MHz.% Error = 8.51. 76.8, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n4.000 MHz.SPBRG value (decimal) = 2. 96.0, FOSC = 8.000000 MHz.Actual Rate (K) = 100.00. 96.0, FOSC = 8.000000 MHz.% Error = 4.17. 96.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 4. 96.0, FOSC = 7.159090 MHz.Actual Rate (K) = 89.49. 96.0, FOSC = 7.159090 MHz.% Error = -6.78. 96.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 4. 96.0, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 96.0, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 96.0, FOSC = 5.068800",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nMHz.SPBRG value (decimal) = GLYPH<151>. 96.0, FOSC = 4.000 MHz.Actual Rate (K) = GLYPH<151>. 96.0, FOSC = 4.000 MHz.% Error = GLYPH<151>. 96.0, FOSC = 4.000 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 8.000000 MHz.Actual Rate (K) = 125.00. 115.2, FOSC = 8.000000 MHz.% Error = 8.51. 115.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 3. 115.2, FOSC = 7.159090 MHz.Actual Rate (K) = 111.86. 115.2, FOSC = 7.159090 MHz.% Error = -2.90. 115.2, FOSC = 7.159090 MHz.SPBRG",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nvalue (decimal) = 3. 115.2, FOSC = 5.068800 MHz.Actual Rate (K) = 105.60. 115.2, FOSC = 5.068800 MHz.% Error = -8.33. 115.2, FOSC = 5.068800 MHz.SPBRG value (decimal) = 2. 115.2, FOSC = 4.000 MHz.Actual Rate (K) = 125.00. 115.2, FOSC = 4.000 MHz.% Error = 8.51. 115.2, FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 250.0, FOSC = 8.000000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 8.000000 MHz.% Error = 0.00. 250.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 1. 250.0, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n7.159090 MHz.Actual Rate (K) = 223.72. 250.0, FOSC = 7.159090 MHz.% Error = -10.51. 250.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 1. 250.0, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 250.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 250.0, FOSC = 4.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 4.000 MHz.% Error = 0.00. 250.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 300.0, FOSC = 8.000000",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nMHz.Actual Rate (K) = GLYPH<151>. 300.0, FOSC = 8.000000 MHz.% Error = GLYPH<151>. 300.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 300.0, FOSC = 7.159090 MHz.Actual Rate (K) = GLYPH<151>. 300.0, FOSC = 7.159090 MHz.% Error = GLYPH<151>. 300.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = GLYPH<151>. 300.0, FOSC = 5.068800 MHz.Actual Rate (K) = 316.80. 300.0, FOSC = 5.068800 MHz.% Error = 5.60. 300.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 0. 300.0,",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nFOSC = 4.000 MHz.Actual Rate (K) = GLYPH<151>. 300.0, FOSC = 4.000 MHz.% Error = GLYPH<151>. 300.0, FOSC = 4.000 MHz.SPBRG value (decimal) = GLYPH<151>. 500.0, FOSC = 8.000000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 8.000000 MHz.% Error = 0.00. 500.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 0. 500.0, FOSC = 7.159090 MHz.Actual Rate (K) = 447.44. 500.0, FOSC = 7.159090 MHz.% Error = -10.51. 500.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 0. 500.0, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n5.068800 MHz.Actual Rate (K) = GLYPH<151>. 500.0, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 500.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 500.0, FOSC = 4.000 MHz.Actual Rate (K) = GLYPH<151>. 500.0, FOSC = 4.000 MHz.% Error = GLYPH<151>. 500.0, FOSC = 4.000 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n0.3, FOSC = 3.579545 MHz.Actual Rate (K) = 0.87. 0.3, FOSC = 3.579545 MHz.% Error = 191.30. 0.3, FOSC = 3.579545 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 2.000000 MHz.Actual Rate (K) = 0.49. 0.3, FOSC = 2.000000 MHz.% Error = 62.76. 0.3, FOSC = 2.000000 MHz.SPBRG value (decimal) = 255. 0.3, FOSC = 1.000000 MHz.Actual Rate (K) = 0.30. 0.3, FOSC = 1.000000 MHz.% Error = 0.16. 0.3, FOSC = 1.000000 MHz.SPBRG value (decimal) = 207. 0.3, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n0.032768 MHz.Actual Rate (K) = 0.29. 0.3, FOSC = 0.032768 MHz.% Error = -2.48. 0.3, FOSC = 0.032768 MHz.SPBRG value (decimal) = 6. 1.2, FOSC = 3.579545 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 3.579545 MHz.% Error = 0.23. 1.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 185. 1.2, FOSC = 2.000000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 2.000000 MHz.% Error = 0.16. 1.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 103. 1.2, FOSC = 1.000000 MHz.Actual Rate",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n(K) = 1.20. 1.2, FOSC = 1.000000 MHz.% Error = 0.16. 1.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = 51. 1.2, FOSC = 0.032768 MHz.Actual Rate (K) = 1.02. 1.2, FOSC = 0.032768 MHz.% Error = -14.67. 1.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = 1. 2.4, FOSC = 3.579545 MHz.Actual Rate (K) = 2.41. 2.4, FOSC = 3.579545 MHz.% Error = 0.23. 2.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = 92. 2.4, FOSC = 2.000000 MHz.Actual Rate (K) = 2.40.",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n2.4, FOSC = 2.000000 MHz.% Error = 0.16. 2.4, FOSC = 2.000000 MHz.SPBRG value (decimal) = 51. 2.4, FOSC = 1.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 1.000000 MHz.% Error = 0.16. 2.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = 25. 2.4, FOSC = 0.032768 MHz.Actual Rate (K) = 2.05. 2.4, FOSC = 0.032768 MHz.% Error = -14.67. 2.4, FOSC = 0.032768 MHz.SPBRG value (decimal) = 0. 9.6, FOSC = 3.579545 MHz.Actual Rate (K) = 9.73. 9.6, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n3.579545 MHz.% Error = 1.32. 9.6, FOSC = 3.579545 MHz.SPBRG value (decimal) = 22. 9.6, FOSC = 2.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 2.000000 MHz.% Error = 0.16. 9.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = 12. 9.6, FOSC = 1.000000 MHz.Actual Rate (K) = 8.93. 9.6, FOSC = 1.000000 MHz.% Error = -6.99. 9.6, FOSC = 1.000000 MHz.SPBRG value (decimal) = 6. 9.6, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 9.6, FOSC = 0.032768 MHz.%",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nError = GLYPH<151>. 9.6, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 19.2, FOSC = 3.579545 MHz.Actual Rate (K) = 18.64. 19.2, FOSC = 3.579545 MHz.% Error = -2.90. 19.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 11. 19.2, FOSC = 2.000000 MHz.Actual Rate (K) = 17.86. 19.2, FOSC = 2.000000 MHz.% Error = -6.99. 19.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 6. 19.2, FOSC = 1.000000 MHz.Actual Rate (K) = 20.83. 19.2, FOSC = 1.000000 MHz.% Error =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n8.51. 19.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = 2. 19.2, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 38.4, FOSC = 3.579545 MHz.Actual Rate (K) = 37.29. 38.4, FOSC = 3.579545 MHz.% Error = -2.90. 38.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = 5. 38.4, FOSC = 2.000000 MHz.Actual Rate (K) = 41.67. 38.4, FOSC = 2.000000 MHz.%",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nError = 8.51. 38.4, FOSC = 2.000000 MHz.SPBRG value (decimal) = 2. 38.4, FOSC = 1.000000 MHz.Actual Rate (K) = 31.25. 38.4, FOSC = 1.000000 MHz.% Error = -18.62. 38.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = 1. 38.4, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 57.6, FOSC = 3.579545 MHz.Actual Rate (K) = 55.93. 57.6, FOSC = 3.579545",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nMHz.% Error = -2.90. 57.6, FOSC = 3.579545 MHz.SPBRG value (decimal) = 3. 57.6, FOSC = 2.000000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 2.000000 MHz.% Error = 8.51. 57.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = 1. 57.6, FOSC = 1.000000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 1.000000 MHz.% Error = 8.51. 57.6, FOSC = 1.000000 MHz.SPBRG value (decimal) = 0. 57.6, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.% Error =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nGLYPH<151>. 57.6, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 76.8, FOSC = 3.579545 MHz.Actual Rate (K) = 74.57. 76.8, FOSC = 3.579545 MHz.% Error = -2.90. 76.8, FOSC = 3.579545 MHz.SPBRG value (decimal) = 2. 76.8, FOSC = 2.000000 MHz.Actual Rate (K) = GLYPH<151>. 76.8, FOSC = 2.000000 MHz.% Error = GLYPH<151>. 76.8, FOSC = 2.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 76.8, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 76.8, FOSC",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n= 1.000000 MHz.% Error = GLYPH<151>. 76.8, FOSC = 1.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 76.8, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 76.8, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 76.8, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 3.579545 MHz.Actual Rate (K) = 111.86. 115.2, FOSC = 3.579545 MHz.% Error = -2.90. 115.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 1. 115.2, FOSC = 2.000000 MHz.Actual Rate (K) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n125.00. 115.2, FOSC = 2.000000 MHz.% Error = 8.51. 115.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 0. 115.2, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 115.2, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 115.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 115.2, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 115.2, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 115.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 250.0, FOSC =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\n3.579545 MHz.Actual Rate (K) = 223.72. 250.0, FOSC = 3.579545 MHz.% Error = -10.51. 250.0, FOSC = 3.579545 MHz.SPBRG value (decimal) = 0. 250.0, FOSC = 2.000000 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 2.000000 MHz.% Error = GLYPH<151>. 250.0, FOSC = 2.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 250.0, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 250.0, FOSC = 1.000000 MHz.SPBRG value (decimal) =",
    "TABLE 18-4: BAUD RATES FOR ASYNCHRONOUS MODE (BRGH =  , HIGH SPEED) 1\nGLYPH<151>. 250.0, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 250.0, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n9.6, FOSC = 40.000 MHz.Actual Rate (K) = GLYPH<151>. 9.6, FOSC = 40.000 MHz.% Error = GLYPH<151>. 9.6, FOSC = 40.000 MHz.SPBRG value (decimal) = GLYPH<151>. 9.6, FOSC = 20.000 MHz.Actual Rate (K) = GLYPH<151>. 9.6, FOSC = 20.000 MHz.% Error = GLYPH<151>. 9.6, FOSC = 20.000 MHz.SPBRG value (decimal) = GLYPH<151>. 9.6, FOSC = 16.000 MHz.Actual Rate (K) = 15.63. 9.6, FOSC = 16.000 MHz.% Error = 62.76. 9.6, FOSC = 16.000 MHz.SPBRG value (decimal) = 255. 9.6, FOSC = 10.000 MHz.Actual Rate",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(K) = 9.77. 9.6, FOSC = 10.000 MHz.% Error = 1.73. 9.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 255. 19.2, FOSC = 40.000 MHz.Actual Rate (K) = GLYPH<151>. 19.2, FOSC = 40.000 MHz.% Error = GLYPH<151>. 19.2, FOSC = 40.000 MHz.SPBRG value (decimal) = GLYPH<151>. 19.2, FOSC = 20.000 MHz.Actual Rate (K) = 19.53. 19.2, FOSC = 20.000 MHz.% Error = 1.73. 19.2, FOSC = 20.000 MHz.SPBRG value (decimal) = 255. 19.2, FOSC = 16.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 16.000 MHz.% Error = 0.16.",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n19.2, FOSC = 16.000 MHz.SPBRG value (decimal) = 207. 19.2, FOSC = 10.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 10.000 MHz.% Error = 0.16. 19.2, FOSC = 10.000 MHz.SPBRG value (decimal) = 129. 38.4, FOSC = 40.000 MHz.Actual Rate (K) = 39.06. 38.4, FOSC = 40.000 MHz.% Error = 1.73. 38.4, FOSC = 40.000 MHz.SPBRG value (decimal) = 255. 38.4, FOSC = 20.000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 20.000 MHz.% Error = 0.16. 38.4, FOSC = 20.000 MHz.SPBRG value (decimal) = 129. 38.4, FOSC = 16.000 MHz.Actual Rate",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(K) = 38.46. 38.4, FOSC = 16.000 MHz.% Error = 0.16. 38.4, FOSC = 16.000 MHz.SPBRG value (decimal) = 103. 38.4, FOSC = 10.000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 10.000 MHz.% Error = 0.16. 38.4, FOSC = 10.000 MHz.SPBRG value (decimal) = 64. 57.6, FOSC = 40.000 MHz.Actual Rate (K) = 57.47. 57.6, FOSC = 40.000 MHz.% Error = -0.22. 57.6, FOSC = 40.000 MHz.SPBRG value (decimal) = 173. 57.6, FOSC = 20.000 MHz.Actual Rate (K) = 57.47. 57.6, FOSC = 20.000 MHz.% Error = -0.22. 57.6, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n20.000 MHz.SPBRG value (decimal) = 86. 57.6, FOSC = 16.000 MHz.Actual Rate (K) = 57.97. 57.6, FOSC = 16.000 MHz.% Error = 0.64. 57.6, FOSC = 16.000 MHz.SPBRG value (decimal) = 68. 57.6, FOSC = 10.000 MHz.Actual Rate (K) = 58.14. 57.6, FOSC = 10.000 MHz.% Error = 0.94. 57.6, FOSC = 10.000 MHz.SPBRG value (decimal) = 42. 76.8, FOSC = 40.000 MHz.Actual Rate (K) = 76.92. 76.8, FOSC = 40.000 MHz.% Error = 0.16. 76.8, FOSC = 40.000 MHz.SPBRG value (decimal) = 129. 76.8, FOSC = 20.000 MHz.Actual Rate (K) = 76.92.",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n76.8, FOSC = 20.000 MHz.% Error = 0.16. 76.8, FOSC = 20.000 MHz.SPBRG value (decimal) = 64. 76.8, FOSC = 16.000 MHz.Actual Rate (K) = 76.92. 76.8, FOSC = 16.000 MHz.% Error = 0.16. 76.8, FOSC = 16.000 MHz.SPBRG value (decimal) = 51. 76.8, FOSC = 10.000 MHz.Actual Rate (K) = 75.76. 76.8, FOSC = 10.000 MHz.% Error = -1.36. 76.8, FOSC = 10.000 MHz.SPBRG value (decimal) = 32. 96.0, FOSC = 40.000 MHz.Actual Rate (K) = 96.15. 96.0, FOSC = 40.000 MHz.% Error = 0.16. 96.0, FOSC = 40.000 MHz.SPBRG value",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(decimal) = 103. 96.0, FOSC = 20.000 MHz.Actual Rate (K) = 96.15. 96.0, FOSC = 20.000 MHz.% Error = 0.16. 96.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 51. 96.0, FOSC = 16.000 MHz.Actual Rate (K) = 95.24. 96.0, FOSC = 16.000 MHz.% Error = -0.79. 96.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 41. 96.0, FOSC = 10.000 MHz.Actual Rate (K) = 96.15. 96.0, FOSC = 10.000 MHz.% Error = 0.16. 96.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 25. 250.0, FOSC = 40.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n40.000 MHz.% Error = 0.00. 250.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 39. 250.0, FOSC = 20.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 20.000 MHz.% Error = 0.00. 250.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 19. 250.0, FOSC = 16.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 16.000 MHz.% Error = 0.00. 250.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 15. 250.0, FOSC = 10.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 10.000 MHz.% Error = 0.00. 250.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 9. 300.0,",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nFOSC = 40.000 MHz.Actual Rate (K) = 303.03. 300.0, FOSC = 40.000 MHz.% Error = 1.01. 300.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 32. 300.0, FOSC = 20.000 MHz.Actual Rate (K) = 294.12. 300.0, FOSC = 20.000 MHz.% Error = -1.96. 300.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 16. 300.0, FOSC = 16.000 MHz.Actual Rate (K) = 307.69. 300.0, FOSC = 16.000 MHz.% Error = 2.56. 300.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 12. 300.0, FOSC = 10.000 MHz.Actual Rate (K) = 312.50. 300.0, FOSC = 10.000 MHz.% Error =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n4.17. 300.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 7. 500.0, FOSC = 40.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 40.000 MHz.% Error = 0.00. 500.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 19. 500.0, FOSC = 20.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 20.000 MHz.% Error = 0.00. 500.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 9. 500.0, FOSC = 16.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 16.000 MHz.% Error = 0.00. 500.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 7. 500.0, FOSC = 10.000",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nMHz.Actual Rate (K) = 500.00. 500.0, FOSC = 10.000 MHz.% Error = 0.00. 500.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 4. 625.0, FOSC = 40.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 40.000 MHz.% Error = 0.00. 625.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 15. 625.0, FOSC = 20.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 20.000 MHz.% Error = 0.00. 625.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 7. 625.0, FOSC = 16.000 MHz.Actual Rate (K) = 666.67. 625.0, FOSC = 16.000 MHz.% Error = 6.67. 625.0,",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nFOSC = 16.000 MHz.SPBRG value (decimal) = 5. 625.0, FOSC = 10.000 MHz.Actual Rate (K) = 625.00. 625.0, FOSC = 10.000 MHz.% Error = 0.00. 625.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 3. 1000.0, FOSC = 40.000 MHz.Actual Rate (K) = 1000.00. 1000.0, FOSC = 40.000 MHz.% Error = 0.00. 1000.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 9. 1000.0, FOSC = 20.000 MHz.Actual Rate (K) = 1000.00. 1000.0, FOSC = 20.000 MHz.% Error = 0.00. 1000.0, FOSC = 20.000 MHz.SPBRG value (decimal) = 4. 1000.0, FOSC = 16.000 MHz.Actual Rate (K) =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n1000.00. 1000.0, FOSC = 16.000 MHz.% Error = 0.00. 1000.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 3. 1000.0, FOSC = 10.000 MHz.Actual Rate (K) = 833.33. 1000.0, FOSC = 10.000 MHz.% Error = -16.67. 1000.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 2. 1250.0, FOSC = 40.000 MHz.Actual Rate (K) = 1250.00. 1250.0, FOSC = 40.000 MHz.% Error = 0.00. 1250.0, FOSC = 40.000 MHz.SPBRG value (decimal) = 7. 1250.0, FOSC = 20.000 MHz.Actual Rate (K) = 1250.00. 1250.0, FOSC = 20.000 MHz.% Error = 0.00. 1250.0,",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nFOSC = 20.000 MHz.SPBRG value (decimal) = 3. 1250.0, FOSC = 16.000 MHz.Actual Rate (K) = 1333.33. 1250.0, FOSC = 16.000 MHz.% Error = 6.67. 1250.0, FOSC = 16.000 MHz.SPBRG value (decimal) = 2. 1250.0, FOSC = 10.000 MHz.Actual Rate (K) = 1250.00. 1250.0, FOSC = 10.000 MHz.% Error = 0.00. 1250.0, FOSC = 10.000 MHz.SPBRG value (decimal) = 1",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n2.4, FOSC = 8.000000 MHz.Actual Rate (K) = 7.81. 2.4, FOSC = 8.000000 MHz.% Error = 225.52. 2.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 7.159090 MHz.Actual Rate (K) = 6.99. 2.4, FOSC = 7.159090 MHz.% Error = 191.30. 2.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 5.068800 MHz.Actual Rate (K) = 4.95. 2.4, FOSC = 5.068800 MHz.% Error = 106.25. 2.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 255. 2.4, FOSC = 4.000 MHz.Actual Rate (K)",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n= 3.91. 2.4, FOSC = 4.000 MHz.% Error = 62.76. 2.4, FOSC = 4.000 MHz.SPBRG value (decimal) = 255. 9.6, FOSC = 8.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 8.000000 MHz.% Error = 0.16. 9.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 207. 9.6, FOSC = 7.159090 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 7.159090 MHz.% Error = 0.23. 9.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 185. 9.6, FOSC = 5.068800 MHz.Actual Rate (K) = 9.60. 9.6, FOSC = 5.068800 MHz.% Error =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n0.00. 9.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = 131. 9.6, FOSC = 4.000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 4.000 MHz.% Error = 0.16. 9.6, FOSC = 4.000 MHz.SPBRG value (decimal) = 103. 19.2, FOSC = 8.000000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 8.000000 MHz.% Error = 0.16. 19.2, FOSC = 8.000000 MHz.SPBRG value (decimal) = 103. 19.2, FOSC = 7.159090 MHz.Actual Rate (K) = 19.24. 19.2, FOSC = 7.159090 MHz.% Error = 0.23. 19.2, FOSC = 7.159090 MHz.SPBRG value (decimal)",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n= 92. 19.2, FOSC = 5.068800 MHz.Actual Rate (K) = 19.20. 19.2, FOSC = 5.068800 MHz.% Error = 0.00. 19.2, FOSC = 5.068800 MHz.SPBRG value (decimal) = 65. 19.2, FOSC = 4.000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 4.000 MHz.% Error = 0.16. 19.2, FOSC = 4.000 MHz.SPBRG value (decimal) = 51. 38.4, FOSC = 8.000000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 8.000000 MHz.% Error = 0.16. 38.4, FOSC = 8.000000 MHz.SPBRG value (decimal) = 51. 38.4, FOSC = 7.159090 MHz.Actual Rate (K) =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n38.08. 38.4, FOSC = 7.159090 MHz.% Error = -0.83. 38.4, FOSC = 7.159090 MHz.SPBRG value (decimal) = 46. 38.4, FOSC = 5.068800 MHz.Actual Rate (K) = 38.40. 38.4, FOSC = 5.068800 MHz.% Error = 0.00. 38.4, FOSC = 5.068800 MHz.SPBRG value (decimal) = 32. 38.4, FOSC = 4.000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 4.000 MHz.% Error = 0.16. 38.4, FOSC = 4.000 MHz.SPBRG value (decimal) = 25. 57.6, FOSC = 8.000000 MHz.Actual Rate (K) = 57.14. 57.6, FOSC = 8.000000 MHz.% Error =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n-0.79. 57.6, FOSC = 8.000000 MHz.SPBRG value (decimal) = 34. 57.6, FOSC = 7.159090 MHz.Actual Rate (K) = 57.73. 57.6, FOSC = 7.159090 MHz.% Error = 0.23. 57.6, FOSC = 7.159090 MHz.SPBRG value (decimal) = 30. 57.6, FOSC = 5.068800 MHz.Actual Rate (K) = 57.60. 57.6, FOSC = 5.068800 MHz.% Error = 0.00. 57.6, FOSC = 5.068800 MHz.SPBRG value (decimal) = 21. 57.6, FOSC = 4.000 MHz.Actual Rate (K) = 58.82. 57.6, FOSC = 4.000 MHz.% Error = 2.12. 57.6, FOSC = 4.000 MHz.SPBRG value",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(decimal) = 16. 76.8, FOSC = 8.000000 MHz.Actual Rate (K) = 76.92. 76.8, FOSC = 8.000000 MHz.% Error = 0.16. 76.8, FOSC = 8.000000 MHz.SPBRG value (decimal) = 25. 76.8, FOSC = 7.159090 MHz.Actual Rate (K) = 77.82. 76.8, FOSC = 7.159090 MHz.% Error = 1.32. 76.8, FOSC = 7.159090 MHz.SPBRG value (decimal) = 22. 76.8, FOSC = 5.068800 MHz.Actual Rate (K) = 74.54. 76.8, FOSC = 5.068800 MHz.% Error = -2.94. 76.8, FOSC = 5.068800 MHz.SPBRG value (decimal) = 16. 76.8, FOSC = 4.000",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nMHz.Actual Rate (K) = 76.92. 76.8, FOSC = 4.000 MHz.% Error = 0.16. 76.8, FOSC = 4.000 MHz.SPBRG value (decimal) = 12. 96.0, FOSC = 8.000000 MHz.Actual Rate (K) = 95.24. 96.0, FOSC = 8.000000 MHz.% Error = -0.79. 96.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 20. 96.0, FOSC = 7.159090 MHz.Actual Rate (K) = 94.20. 96.0, FOSC = 7.159090 MHz.% Error = -1.88. 96.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 18. 96.0, FOSC = 5.068800 MHz.Actual Rate (K) = 97.48. 96.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n5.068800 MHz.% Error = 1.54. 96.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 12. 96.0, FOSC = 4.000 MHz.Actual Rate (K) = 100.00. 96.0, FOSC = 4.000 MHz.% Error = 4.17. 96.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 9. 250.0, FOSC = 8.000000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 8.000000 MHz.% Error = 0.00. 250.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 7. 250.0, FOSC = 7.159090 MHz.Actual Rate (K) = 255.68. 250.0, FOSC = 7.159090 MHz.% Error = 2.27. 250.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n7.159090 MHz.SPBRG value (decimal) = 6. 250.0, FOSC = 5.068800 MHz.Actual Rate (K) = 253.44. 250.0, FOSC = 5.068800 MHz.% Error = 1.38. 250.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 4. 250.0, FOSC = 4.000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 4.000 MHz.% Error = 0.00. 250.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 3. 300.0, FOSC = 8.000000 MHz.Actual Rate (K) = 285.71. 300.0, FOSC = 8.000000 MHz.% Error = -4.76. 300.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 6. 300.0,",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nFOSC = 7.159090 MHz.Actual Rate (K) = 298.30. 300.0, FOSC = 7.159090 MHz.% Error = -0.57. 300.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 5. 300.0, FOSC = 5.068800 MHz.Actual Rate (K) = 316.80. 300.0, FOSC = 5.068800 MHz.% Error = 5.60. 300.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 3. 300.0, FOSC = 4.000 MHz.Actual Rate (K) = 333.33. 300.0, FOSC = 4.000 MHz.% Error = 11.11. 300.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 2. 500.0, FOSC = 8.000000 MHz.Actual Rate (K) = 500.00.",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n500.0, FOSC = 8.000000 MHz.% Error = 0.00. 500.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 3. 500.0, FOSC = 7.159090 MHz.Actual Rate (K) = 447.44. 500.0, FOSC = 7.159090 MHz.% Error = -10.51. 500.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 3. 500.0, FOSC = 5.068800 MHz.Actual Rate (K) = 422.40. 500.0, FOSC = 5.068800 MHz.% Error = -15.52. 500.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 2. 500.0, FOSC = 4.000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 4.000 MHz.% Error =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n0.00. 500.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 1. 625.0, FOSC = 8.000000 MHz.Actual Rate (K) = 666.67. 625.0, FOSC = 8.000000 MHz.% Error = 6.67. 625.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 2. 625.0, FOSC = 7.159090 MHz.Actual Rate (K) = 596.59. 625.0, FOSC = 7.159090 MHz.% Error = -4.55. 625.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 2. 625.0, FOSC = 5.068800 MHz.Actual Rate (K) = 633.60. 625.0, FOSC = 5.068800 MHz.% Error = 1.38. 625.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n5.068800 MHz.SPBRG value (decimal) = 1. 625.0, FOSC = 4.000 MHz.Actual Rate (K) = GLYPH<151>. 625.0, FOSC = 4.000 MHz.% Error = GLYPH<151>. 625.0, FOSC = 4.000 MHz.SPBRG value (decimal) = GLYPH<151>. 1000.0, FOSC = 8.000000 MHz.Actual Rate (K) = 1000.00. 1000.0, FOSC = 8.000000 MHz.% Error = 0.00. 1000.0, FOSC = 8.000000 MHz.SPBRG value (decimal) = 1. 1000.0, FOSC = 7.159090 MHz.Actual Rate (K) = 894.89. 1000.0, FOSC = 7.159090 MHz.% Error = -10.51. 1000.0, FOSC = 7.159090 MHz.SPBRG value",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(decimal) = 1. 1000.0, FOSC = 5.068800 MHz.Actual Rate (K) = GLYPH<151>. 1000.0, FOSC = 5.068800 MHz.% Error = GLYPH<151>. 1000.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = GLYPH<151>. 1000.0, FOSC = 4.000 MHz.Actual Rate (K) = 1000.00. 1000.0, FOSC = 4.000 MHz.% Error = 0.00. 1000.0, FOSC = 4.000 MHz.SPBRG value (decimal) = 0. 1250.0, FOSC = 8.000000 MHz.Actual Rate (K) = GLYPH<151>. 1250.0, FOSC = 8.000000 MHz.% Error = GLYPH<151>. 1250.0, FOSC = 8.000000 MHz.SPBRG value (decimal) =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nGLYPH<151>. 1250.0, FOSC = 7.159090 MHz.Actual Rate (K) = 1789.77. 1250.0, FOSC = 7.159090 MHz.% Error = 43.18. 1250.0, FOSC = 7.159090 MHz.SPBRG value (decimal) = 0. 1250.0, FOSC = 5.068800 MHz.Actual Rate (K) = 1267.20. 1250.0, FOSC = 5.068800 MHz.% Error = 1.38. 1250.0, FOSC = 5.068800 MHz.SPBRG value (decimal) = 0. 1250.0, FOSC = 4.000 MHz.Actual Rate (K) = GLYPH<151>. 1250.0, FOSC = 4.000 MHz.% Error = GLYPH<151>. 1250.0, FOSC = 4.000 MHz.SPBRG value (decimal) =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nGLYPH<151>",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n0.3, FOSC = 3.579545 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 3.579545 MHz.% Error = GLYPH<151>. 0.3, FOSC = 3.579545 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 2.000000 MHz.Actual Rate (K) = GLYPH<151>. 0.3, FOSC = 2.000000 MHz.% Error = GLYPH<151>. 0.3, FOSC = 2.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 0.3, FOSC = 1.000000 MHz.Actual Rate (K) = 0.98. 0.3, FOSC = 1.000000 MHz.% Error = 225.52. 0.3, FOSC = 1.000000 MHz.SPBRG value",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n(decimal) = 255. 0.3, FOSC = 0.032768 MHz.Actual Rate (K) = 0.30. 0.3, FOSC = 0.032768 MHz.% Error = 1.14. 0.3, FOSC = 0.032768 MHz.SPBRG value (decimal) = 26. 1.2, FOSC = 3.579545 MHz.Actual Rate (K) = GLYPH<151>. 1.2, FOSC = 3.579545 MHz.% Error = GLYPH<151>. 1.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = GLYPH<151>. 1.2, FOSC = 2.000000 MHz.Actual Rate (K) = 1.95. 1.2, FOSC = 2.000000 MHz.% Error = 62.76. 1.2, FOSC = 2.000000 MHz.SPBRG value (decimal) =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n255. 1.2, FOSC = 1.000000 MHz.Actual Rate (K) = 1.20. 1.2, FOSC = 1.000000 MHz.% Error = 0.16. 1.2, FOSC = 1.000000 MHz.SPBRG value (decimal) = 207. 1.2, FOSC = 0.032768 MHz.Actual Rate (K) = 1.17. 1.2, FOSC = 0.032768 MHz.% Error = -2.48. 1.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = 6. 2.4, FOSC = 3.579545 MHz.Actual Rate (K) = 3.50. 2.4, FOSC = 3.579545 MHz.% Error = 45.65. 2.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = 255. 2.4, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n2.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 2.000000 MHz.% Error = 0.16. 2.4, FOSC = 2.000000 MHz.SPBRG value (decimal) = 207. 2.4, FOSC = 1.000000 MHz.Actual Rate (K) = 2.40. 2.4, FOSC = 1.000000 MHz.% Error = 0.16. 2.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = 103. 2.4, FOSC = 0.032768 MHz.Actual Rate (K) = 2.73. 2.4, FOSC = 0.032768 MHz.% Error = 13.78. 2.4, FOSC = 0.032768 MHz.SPBRG value (decimal) = 2. 9.6, FOSC = 3.579545 MHz.Actual Rate (K) = 9.62.",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n9.6, FOSC = 3.579545 MHz.% Error = 0.23. 9.6, FOSC = 3.579545 MHz.SPBRG value (decimal) = 92. 9.6, FOSC = 2.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 2.000000 MHz.% Error = 0.16. 9.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = 51. 9.6, FOSC = 1.000000 MHz.Actual Rate (K) = 9.62. 9.6, FOSC = 1.000000 MHz.% Error = 0.16. 9.6, FOSC = 1.000000 MHz.SPBRG value (decimal) = 25. 9.6, FOSC = 0.032768 MHz.Actual Rate (K) = 8.19. 9.6, FOSC = 0.032768 MHz.% Error",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n= -14.67. 9.6, FOSC = 0.032768 MHz.SPBRG value (decimal) = 0. 19.2, FOSC = 3.579545 MHz.Actual Rate (K) = 19.04. 19.2, FOSC = 3.579545 MHz.% Error = -0.83. 19.2, FOSC = 3.579545 MHz.SPBRG value (decimal) = 46. 19.2, FOSC = 2.000000 MHz.Actual Rate (K) = 19.23. 19.2, FOSC = 2.000000 MHz.% Error = 0.16. 19.2, FOSC = 2.000000 MHz.SPBRG value (decimal) = 25. 19.2, FOSC = 1.000000 MHz.Actual Rate (K) = 19,.23. 19.2, FOSC = 1.000000 MHz.% Error = 0.16. 19.2, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n1.000000 MHz.SPBRG value (decimal) = 12. 19.2, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 19.2, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 38.4, FOSC = 3.579545 MHz.Actual Rate (K) = 38.91. 38.4, FOSC = 3.579545 MHz.% Error = 1.32. 38.4, FOSC = 3.579545 MHz.SPBRG value (decimal) = 22. 38.4, FOSC = 2.000000 MHz.Actual Rate (K) = 38.46. 38.4, FOSC = 2.000000 MHz.% Error = 0.16. 38.4, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n2.000000 MHz.SPBRG value (decimal) = 12. 38.4, FOSC = 1.000000 MHz.Actual Rate (K) = 35.71. 38.4, FOSC = 1.000000 MHz.% Error = -6.99. 38.4, FOSC = 1.000000 MHz.SPBRG value (decimal) = 6. 38.4, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 38.4, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 57.6, FOSC = 3.579545 MHz.Actual Rate (K) = 55.93. 57.6, FOSC = 3.579545 MHz.% Error = -2.90. 57.6, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n3.579545 MHz.SPBRG value (decimal) = 15. 57.6, FOSC = 2.000000 MHz.Actual Rate (K) = 55.56. 57.6, FOSC = 2.000000 MHz.% Error = -3.55. 57.6, FOSC = 2.000000 MHz.SPBRG value (decimal) = 8. 57.6, FOSC = 1.000000 MHz.Actual Rate (K) = 62.50. 57.6, FOSC = 1.000000 MHz.% Error = 8.51. 57.6, FOSC = 1.000000 MHz.SPBRG value (decimal) = 3. 57.6, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 57.6, FOSC = 0.032768 MHz.SPBRG",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nvalue (decimal) = GLYPH<151>. 76.8, FOSC = 3.579545 MHz.Actual Rate (K) = 74.57. 76.8, FOSC = 3.579545 MHz.% Error = -2.90. 76.8, FOSC = 3.579545 MHz.SPBRG value (decimal) = 11. 76.8, FOSC = 2.000000 MHz.Actual Rate (K) = 71.43. 76.8, FOSC = 2.000000 MHz.% Error = -6.99. 76.8, FOSC = 2.000000 MHz.SPBRG value (decimal) = 6. 76.8, FOSC = 1.000000 MHz.Actual Rate (K) = 83.33. 76.8, FOSC = 1.000000 MHz.% Error = 8.51. 76.8, FOSC = 1.000000 MHz.SPBRG value (decimal) = 2. 76.8,",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\nFOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 76.8, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 76.8, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 96.0, FOSC = 3.579545 MHz.Actual Rate (K) = 99.43. 96.0, FOSC = 3.579545 MHz.% Error = 3.57. 96.0, FOSC = 3.579545 MHz.SPBRG value (decimal) = 8. 96.0, FOSC = 2.000000 MHz.Actual Rate (K) = 100.00. 96.0, FOSC = 2.000000 MHz.% Error = 4.17. 96.0, FOSC = 2.000000 MHz.SPBRG value (decimal) = 4. 96.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n1.000000 MHz.Actual Rate (K) = GLYPH<151>. 96.0, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 96.0, FOSC = 1.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 96.0, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 96.0, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 96.0, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 250.0, FOSC = 3.579545 MHz.Actual Rate (K) = 223.72. 250.0, FOSC = 3.579545 MHz.% Error = -10.51. 250.0, FOSC = 3.579545 MHz.SPBRG value (decimal) = 3.",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n250.0, FOSC = 2.000000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 2.000000 MHz.% Error = 0.00. 250.0, FOSC = 2.000000 MHz.SPBRG value (decimal) = 1. 250.0, FOSC = 1.000000 MHz.Actual Rate (K) = 250.00. 250.0, FOSC = 1.000000 MHz.% Error = 0.00. 250.0, FOSC = 1.000000 MHz.SPBRG value (decimal) = 0. 250.0, FOSC = 0.032768 MHz.Actual Rate (K) = GLYPH<151>. 250.0, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 250.0, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>. 500.0, FOSC",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n= 3.579545 MHz.Actual Rate (K) = 447.44. 500.0, FOSC = 3.579545 MHz.% Error = -10.51. 500.0, FOSC = 3.579545 MHz.SPBRG value (decimal) = 1. 500.0, FOSC = 2.000000 MHz.Actual Rate (K) = 500.00. 500.0, FOSC = 2.000000 MHz.% Error = 0.00. 500.0, FOSC = 2.000000 MHz.SPBRG value (decimal) = 0. 500.0, FOSC = 1.000000 MHz.Actual Rate (K) = GLYPH<151>. 500.0, FOSC = 1.000000 MHz.% Error = GLYPH<151>. 500.0, FOSC = 1.000000 MHz.SPBRG value (decimal) = GLYPH<151>. 500.0, FOSC =",
    "TABLE 18-5: BAUD RATES FOR SYNCHRONOUS MODE (SYNC =  ) 1\n0.032768 MHz.Actual Rate (K) = GLYPH<151>. 500.0, FOSC = 0.032768 MHz.% Error = GLYPH<151>. 500.0, FOSC = 0.032768 MHz.SPBRG value (decimal) = GLYPH<151>",
    "18.3 USART Asynchronous Mode\nIn this mode, the USART uses standard Non-Returnto-Zero (NRZ) format (one Start bit, eight or nine data bits and one Stop bit). The most common data format is 8 bits. An on-chip dedicated 8-bit Baud Rate Generator can be used to derive standard baud rate frequencies  from  the  oscillator.  The  USART  transmits  and receives  the  LSb  first.  The  USARTGLYPH<146>s  transmitter  and receiver are functionally independent but use the same data format and baud rate. The Baud Rate Generator produces a clock, either x16 or x64 of the bit shift rate, depending on bit BRGH (TXSTA<2>). Parity is not supported by the hardware but can be implemented in software (and stored as the ninth data bit). Asynchronous mode functions in all  power-managed modes except Sleep  mode  when  call  clock  sources  are  stopped. When  in  PRI_IDLE  mode,  no  changes  to  the  Baud Rate  Generator  values  are  required;  however,  other power-managed mode clocks may operate at another frequency than the primary clock. Therefore, the Baud Rate generator values may need adjusting.",
    "18.3.1 USART ASYNCHRONOUS TRANSMITTER\nAsynchronous mode is selected by clearing bit, SYNC (TXSTA<4>).\nThe  USART  Asynchronous  module  consists  of  the following important elements:\nGLYPH<149> Baud Rate Generator\nGLYPH<149> Sampling Circuit\nGLYPH<149> Asynchronous Transmitter",
    "18.3.1 USART ASYNCHRONOUS TRANSMITTER\nThe  USART  transmitter  block  diagram  is  shown  in Figure 18-1. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The shift register obtains its data from the Read/Write Transmit Buffer, TXREG. The TXREG register is loaded with data in software. The TSR register is not loaded until the Stop bit has been transmitted from the previous load. As soon as the Stop bit is transmitted, the TSR is loaded with new data from the TXREG register (if available). Once the TXREG register transfers the data to the TSR register (occurs in one TCY), the TXREG register is empty and flag bit, TXIF (PIR1<4>), is set. This interrupt can be enabled/disabled by setting/clearing  enable  bit,  TXIE (PIE1<4>). Flag bit TXIF will be set regardless of the state of enable bit TXIE and cannot be cleared in software. Flag  bit  TXIF  is  not  cleared  immediately  upon loading  the  Transmit  Buffer  register,  TXREG.",
    "18.3.1 USART ASYNCHRONOUS TRANSMITTER\nTXIF becomes valid in the second instruction cycle following the load instruction. Polling TXIF immediately following a load of TXREG will return invalid results. While flag bit TXIF  indicated  the  status  of  the  TXREG  register, another bit,  TRMT (TXSTA<1>), shows the  status of the  TSR  register.  Status  bit  TRMT  is  a  read-only  bit which is set when the TSR register is empty. No interrupt logic is tied to this bit, therefore, the user must poll this bit in order to determine whether the TSR register is empty.\nGLYPH<149> Asynchronous Receiver\nNote 1: The TSR register is not mapped in data memory so it is not available to the user.\n2: Flag  bit,  TXIF,  is  set  when  enable  bit, TXEN, is set.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. TXREG, Bit 7 = USART Transmit Register. TXREG, Bit 6 = USART Transmit Register.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nTXREG, Bit 5 = USART Transmit Register. TXREG, Bit 4 = USART Transmit Register. TXREG, Bit 3 = USART Transmit Register. TXREG, Bit 2 = USART Transmit Register. TXREG, Bit 1 = USART Transmit Register. TXREG, Bit 0 = USART Transmit Register. TXREG, Value on POR, BOR = 0000. TXREG, Value on POR, BOR = 0000. TXREG, Value on all other Resets = 0000. TXREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nLegend: x = unknown, - = unimplemented locations read as GLYPH<145> 0 GLYPH<146> . Shaded cells are not used for asynchronous transmission.",
    "TABLE 18-6: REGISTERS ASSOCIATED WITH ASYNCHRONOUS TRANSMISSION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "18.3.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\nThe receiver block diagram is  shown in Figure 18-4. The data is received on the RC7/RX/DT pin and drives the  data  recovery  block.  The  data  recovery  block  is actually a high-speed shifter, operating at x16 times the baud rate, whereas the main receive serial shifter operates  at  the  bit  rate  or  at  FOSC.  This  mode  would typically be used in RS-232 systems.\nTo set up an Asynchronous Reception:",
    "18.3.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n1. Initialize the SPBRG register for the appropriate baud rate. If a high-speed baud rate is desired, set  bit  BRGH  ( Section 18.2  GLYPH<147>USART  Baud Rate Generator (BRG)GLYPH<148> ).\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, RCIE.\n4. If 9-bit reception is desired, set bit, RX9.\n5. Enable the reception by setting bit, CREN.\n6. Flag bit, RCIF, will be set when reception is complete and an interrupt will be generated if enable bit, RCIE, was set.\n7. Read the RCSTA register to get the ninth bit (if enabled)  and  determine  if  any  error  occurred during reception.\n8. Read  the  8-bit  received  data  by  reading  the RCREG register.\n9. If any error occurred, clear the error by clearing enable bit, CREN.",
    "18.3.3 SETTING UP 9-BIT MODE WITH ADDRESS DETECT\n10. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "FIGURE 18-4: USART RECEIVE BLOCK DIAGRAM\nThis mode would typically be used in RS-485 systems. To  set  up  an  Asynchronous  Reception  with  address detect enable:",
    "FIGURE 18-4: USART RECEIVE BLOCK DIAGRAM\n1. Initialize the SPBRG register for the appropriate baud rate. If a high-speed baud rate is required, set the BRGH bit.\n2. Enable the asynchronous serial port by clearing the SYNC bit and setting the SPEN bit.\n3. If interrupts are required, set the RCEN bit and select the desired priority level with the RCIP bit.\n4. Set the RX9 bit to enable 9-bit reception.\n5. Set the ADDEN bit to enable address detect.\n6. Enable reception by setting the CREN bit.\n7. The  RCIF  bit  will  be  set  when  reception  is complete. The interrupt will be Acknowledged if the RCIE and GIE bits are set.\n8. Read the  RCSTA  register  to  determine  if  any error occurred during reception, as well as read bit 9 of data (if applicable).\n9. Read RCREG to determine if the device is being addressed.\n10. If any error occurred, clear the CREN bit.\n11. If  the  device  has  been  addressed,  clear  the ADDEN bit  to  allow  all  received  data  into  the receive buffer and interrupt the CPU.",
    "PIC18F2220/2320/4220/4320\nTo set up an Asynchronous Transmission:\n1. Initialize the SPBRG register for the appropriate baud rate. If a high-speed baud rate is desired, set  bit  BRGH  ( Section 18.2  GLYPH<147>USART  Baud Rate Generator (BRG)GLYPH<148> ).\n2. Enable the asynchronous serial port by clearing bit, SYNC, and setting bit, SPEN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set Transmit bit, TX9. Can be used as address/data bit.\n5. Enable  the  transmission  by  setting  bit,  TXEN, which will also set bit, TXIF.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Load data to the TXREG  register (starts transmission).\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "FIGURE 18-5: ASYNCHRONOUS RECEPTION\nRX (pin), 1 = Start bit bit 1 bit 0 bit 7/8 Stop bit. RX (pin), 2 = bit 0 Start bit Start bit bit 7/8 Stop bit. Reg Rcv Buffer Reg Rcv Shift, 1 = . Reg Rcv Buffer Reg Rcv Shift, 2 = Word 2. Read Rcv Buffer Reg RCREG, 1 = Word RCREG. Read Rcv Buffer Reg RCREG, 2 = RCREG. RCIF (Interrupt Flag), 1 = . RCIF (Interrupt Flag), 2 = . OERR bit CREN, 1 = . OERR bit CREN, 2 = . Note:, 1 = This timing diagram shows three words appearing on the RX input. The RCREG causing the OERR (Overrun) bit to be set.. Note:, 2 = (Receive Buffer) is read after the third word,",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nINTCON, Bit 7 = GIE/GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. RCREG, Bit 7 = USART Receive Register. RCREG, Bit 6 = USART Receive Register.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nRCREG, Bit 5 = USART Receive Register. RCREG, Bit 4 = USART Receive Register. RCREG, Bit 3 = USART Receive Register. RCREG, Bit 2 = USART Receive Register. RCREG, Bit 1 = USART Receive Register. RCREG, Bit 0 = USART Receive Register. RCREG, Value on POR, BOR = 0000. RCREG, Value on POR, BOR = 0000. RCREG, Value on all other Resets = 0000. RCREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nLegend:\nx = unknown, - = unimplemented locations read as GLYPH<145> 0 GLYPH<146> . Shaded cells are not used for asynchronous reception.",
    "TABLE 18-7: REGISTERS ASSOCIATED WITH ASYNCHRONOUS RECEPTION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "18.4 USART Synchronous Master Mode\nIn Synchronous Master mode, the data is transmitted in a half-duplex manner (i.e., transmission and reception do not occur at the same time). When transmitting data, the reception is inhibited and vice versa. Synchronous mode is entered by setting bit, SYNC (TXSTA<4>). In addition, enable bit, SPEN (RCSTA<7>), is set in order to configure the RC6/TX/CK and RC7/RX/DT I/O pins to  CK  (clock)  and  DT  (data)  lines,  respectively.  The Master mode indicates that the processor transmits the master  clock  on  the  CK  line.  The  Master  mode  is entered by setting bit, CSRC (TXSTA<7>).",
    "18.4.1 USART SYNCHRONOUS MASTER TRANSMISSION\n(PIE1<4>). Flag bit, TXIF, will be set regardless of the state of enable bit, TXIE, and cannot be cleared in software. It will reset only when new data is loaded into the TXREG  register.  While  flag  bit,  TXIF,  indicates  the status  of  the  TXREG  register,  another  bit,  TRMT (TXSTA<1>),  shows  the  status  of  the  TSR  register. TRMT is a read-only bit which is set when the TSR is empty. No interrupt logic is tied to this bit so the user has to poll this bit in order to determine if the TSR register is empty. The TSR is not mapped in data memory so it is not available to the user.\nTo set up a Synchronous Master Transmission:\n- 1. Initialize the SPBRG register for the appropriate baud  rate  ( Section 18.2  GLYPH<147>USART  Baud  Rate Generator (BRG)GLYPH<148> ).",
    "18.4.1 USART SYNCHRONOUS MASTER TRANSMISSION\nThe  USART  transmitter  block  diagram  is  shown  in Figure 18-1. The heart of the transmitter is the Transmit (Serial) Shift Register (TSR). The shift register obtains its data from the Read/Write Transmit Buffer register, TXREG.  The  TXREG  register  is  loaded  with  data  in software. The TSR register is not loaded until the last bit  has  been  transmitted  from  the  previous  load.  As soon as the last bit is transmitted, the TSR is loaded with new data from the TXREG (if available). Once the TXREG register transfers the data to the TSR register (occurs in one TCYCLE), the TXREG is empty and interrupt bit, TXIF (PIR1<4>), is set. The interrupt can be enabled/disabled by setting/clearing  enable bit,  TXIE",
    "18.4.1 USART SYNCHRONOUS MASTER TRANSMISSION\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit, TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. TXREG, Bit 7 = USART Transmit Register. TXREG, Bit 6 = USART Transmit Register.",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nTXREG, Bit 5 = USART Transmit Register. TXREG, Bit 4 = USART Transmit Register. TXREG, Bit 3 = USART Transmit Register. TXREG, Bit 2 = USART Transmit Register. TXREG, Bit 1 = USART Transmit Register. TXREG, Bit 0 = USART Transmit Register. TXREG, Value on POR, BOR = 0000. TXREG, Value on POR, BOR = 0000. TXREG, Value on all other Resets = 0000. TXREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nGLYPH<146> .  Shaded cells are not used for synchronous master transmission.\nLegend: x = unknown, - = unimplemented, read as GLYPH<145> 0",
    "TABLE 18-8: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER TRANSMISSION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "18.4.2 USART SYNCHRONOUS MASTER RECEPTION\nOnce  Synchronous  mode  is  selected,  reception  is enabled by setting either enable bit, SREN (RCSTA<5>), or enable bit, CREN (RCSTA<4>). Data is sampled on the RC7/RX/DT pin on the falling edge of the clock. If enable bit, SREN, is set, only a single word is received. If enable bit, CREN, is set, the reception is continuous until CREN is cleared. If both bits are set, then CREN takes precedence.\nTo set up a Synchronous Master Reception:",
    "18.4.2 USART SYNCHRONOUS MASTER RECEPTION\n1. Initialize the SPBRG register for the appropriate baud  rate  ( Section 18.2  GLYPH<147>USART  Baud  Rate Generator (BRG)GLYPH<148> ).\n2. Enable  the  synchronous  master  serial  port  by setting bits, SYNC, SPEN and CSRC.\n3. Ensure bits, CREN and SREN, are clear.\n4. If interrupts are desired, set enable bit, RCIE.\n5. If 9-bit reception is desired, set bit, RX9.\n6. If a single reception is required, set bit, SREN. For continuous reception, set bit, CREN.\n7. Interrupt flag bit, RCIF, will be set when reception  is  complete  and  an  interrupt  will  be generated if the enable bit, RCIE, was set.\n8. Read the RCSTA register to get the ninth bit (if enabled)  and  determine  if  any  error  occurred during reception.\n9. Read  the  8-bit  received  data  by  reading  the RCREG register.\n10. If any error occurred, clear the error by clearing bit, CREN.",
    "18.4.2 USART SYNCHRONOUS MASTER RECEPTION\n11. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "FIGURE 18-8: SYNCHRONOUS RECEPTION (MASTER MODE, SREN)\nRC7/RX/DT pin, 1 = Q3 Q4 Q1 Q2 Q3 Q4 Q1 Q2 Q3 Q4 Q2 Q1 Q2 Q3 Q4 Q1 Q2 Q3 Q4 Q1 Q2 Q3 Q4Q1 Q2 Q3 Q4 Q1 Q2 Q3 Q4Q1 Q2 Q3 Q4 Q1 Q2 Q3 Q4 bit 0 bit 1 bit 2 bit 3 bit 4 bit 5 bit 6 bit 7 Q1 Q2 Q3 Q4. RC6/TX/CK pin, 1 = . Write to bit SREN, 1 = . SREN bit, 1 = . SREN bit, 1 = GLYPH<145> 0 GLYPH<146>. CREN bit, 1 = GLYPH<145> 0 GLYPH<146>. RCIF bit (Interrupt), 1 = . Read, 1 = . RXREG, 1 = . Note:, 1 = diagram demonstrates Sync Master mode with bit SREN = 1 and bit BRGH = 0 .. RXREG, 1 = ",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. RCREG, Bit 7 = USART Receive Register. RCREG, Bit 6 = USART Receive Register.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nRCREG, Bit 5 = USART Receive Register. RCREG, Bit 4 = USART Receive Register. RCREG, Bit 3 = USART Receive Register. RCREG, Bit 2 = USART Receive Register. RCREG, Bit 1 = USART Receive Register. RCREG, Bit 0 = USART Receive Register. RCREG, Value on POR, BOR = 0000. RCREG, Value on POR, BOR = 0000. RCREG, Value on all other Resets = 0000. RCREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nLegend:\nx = unknown, - = unimplemented, read as GLYPH<145> 0 GLYPH<146> . Shaded cells are not used for synchronous master reception.",
    "TABLE 18-9: REGISTERS ASSOCIATED WITH SYNCHRONOUS MASTER RECEPTION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "18.5 USART Synchronous Slave Mode\nSynchronous Slave mode differs from the Master mode in the fact that the shift clock is supplied externally at the RC6/TX/CK pin (instead of being supplied internally in Master mode). This allows the device to transfer or receive data while in any power-managed mode. Slave mode is entered by clearing bit, CSRC (TXSTA<7>).",
    "18.5.1 USART SYNCHRONOUS SLAVE TRANSMIT\nThe operation of the Synchronous Master and Slave modes  is  identical,  except  in  the  case  of  the  Sleep mode.\nIf  two  words  are  written  to  the  TXREG  and  then  the SLEEP instruction is executed, the following will occur:\na) The  first  word  will  immediately  transfer  to  the TSR register and transmit.\nb) The second word will remain in TXREG register.\nc) Flag bit, TXIF, will not be set.\nd) When the first word has been shifted out of TSR, the  TXREG  register  will  transfer  the  second word to the TSR and flag bit, TXIF, will now be set.\ne) If enable bit, TXIE, is set, the interrupt will wake the  chip  from  Sleep.  If  the  global  interrupt  is enabled, the program will branch to the interrupt vector.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. TXREG, Bit 7 = USART Transmit Register. TXREG, Bit 6 = USART Transmit Register.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nTXREG, Bit 5 = USART Transmit Register. TXREG, Bit 4 = USART Transmit Register. TXREG, Bit 3 = USART Transmit Register. TXREG, Bit 2 = USART Transmit Register. TXREG, Bit 1 = USART Transmit Register. TXREG, Bit 0 = USART Transmit Register. TXREG, Value on POR, BOR = 0000. TXREG, Value on POR, BOR = 0000. TXREG, Value on all other Resets = 0000. TXREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nLegend:\nx = unknown, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used for synchronous slave transmission.",
    "TABLE 18-10: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE TRANSMISSION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.\nTo set up a Synchronous Slave Transmission:\n1. Enable  the  synchronous  slave  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. Clear bits, CREN and SREN.\n3. If interrupts are desired, set enable bit, TXIE.\n4. If 9-bit transmission is desired, set bit, TX9.\n5. Enable the transmission by setting enable bit, TXEN.\n6. If  9-bit  transmission  is  selected,  the  ninth  bit should be loaded in bit TX9D.\n7. Start transmission by loading data to the TXREG register.\n8. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "18.5.2 USART SYNCHRONOUS SLAVE RECEPTION\nTo set up a Synchronous Slave Reception:\nThe operation of the Synchronous Master and Slave modes is identical, except in the case of Sleep or any Idle  mode  and  bit,  SREN,  which  is  a  GLYPH<147>donGLYPH<146>t  careGLYPH<148>  in Slave mode.\nIf  receive  is  enabled  by  setting  bit,  CREN,  prior  to entering Sleep or any Idle mode, then a word may be received while in this power-managed mode. Once the word is received, the RSR register will transfer the data to the RCREG register and if enable bit, RCIE, is set, the  interrupt  generated  will  wake  the  chip  from  the power-managed mode. If the global interrupt is enabled, the program will branch to the interrupt vector.",
    "18.5.2 USART SYNCHRONOUS SLAVE RECEPTION\n1. Enable  the  synchronous  master  serial  port  by setting bits, SYNC and SPEN, and clearing bit, CSRC.\n2. If interrupts are desired, set enable bit, RCIE.\n3. If 9-bit reception is desired, set bit, RX9.\n4. To enable reception, set enable bit, CREN.\n5. Flag  bit,  RCIF,  will  be  set  when  reception  is complete.  An  interrupt will be  generated  if enable bit, RCIE, was set.\n6. Read the RCSTA register to get the ninth bit (if enabled)  and  determine  if  any  error  occurred during reception.\n7. Read  the  8-bit  received  data  by  reading  the RCREG register.\n8. If any error occurred, clear the error by clearing bit, CREN.\n9. If using interrupts, ensure that the GIE and PEIE bits in the INTCON register (INTCON<7:6>) are set.",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 000x. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 000u. PIR1, Bit 7 = PSPIF (1). PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR =",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\n0000. PIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE (1). PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP (1). IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 =",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nCCP1IP. IPR1, Bit 1 = TMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. RCSTA, Bit 7 = SPEN. RCSTA, Bit 6 = RX9. RCSTA, Bit 5 = SREN. RCSTA, Bit 4 = CREN. RCSTA, Bit 3 = ADDEN. RCSTA, Bit 2 = FERR. RCSTA, Bit 1 = OERR. RCSTA, Bit 0 = RX9D. RCSTA, Value on POR, BOR = 0000. RCSTA, Value on POR, BOR = 000x. RCSTA, Value on all other Resets = 0000. RCSTA, Value on all other Resets = 000x. RCREG, Bit 7 = USART Receive Register. RCREG, Bit 6 = USART Receive Register.",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nRCREG, Bit 5 = USART Receive Register. RCREG, Bit 4 = USART Receive Register. RCREG, Bit 3 = USART Receive Register. RCREG, Bit 2 = USART Receive Register. RCREG, Bit 1 = USART Receive Register. RCREG, Bit 0 = USART Receive Register. RCREG, Value on POR, BOR = 0000. RCREG, Value on POR, BOR = 0000. RCREG, Value on all other Resets = 0000. RCREG, Value on all other Resets = 0000. TXSTA, Bit 7 = CSRC. TXSTA, Bit 6 = TX9. TXSTA, Bit 5 = TXEN. TXSTA, Bit 4 = SYNC. TXSTA, Bit 3 = GLYPH<151>. TXSTA, Bit 2 = BRGH. TXSTA, Bit 1 = TRMT. TXSTA, Bit 0 = TX9D. TXSTA, Value on POR, BOR = 0000. TXSTA, Value on POR, BOR = -010. TXSTA, Value on all other Resets =",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\n0000. TXSTA, Value on all other Resets = -010. SPBRG, Bit 7 = Baud Rate Generator Register. SPBRG, Bit 6 = Baud Rate Generator Register. SPBRG, Bit 5 = Baud Rate Generator Register. SPBRG, Bit 4 = Baud Rate Generator Register. SPBRG, Bit 3 = Baud Rate Generator Register. SPBRG, Bit 2 = Baud Rate Generator Register. SPBRG, Bit 1 = Baud Rate Generator Register. SPBRG, Bit 0 = Baud Rate Generator Register. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on POR, BOR = 0000. SPBRG, Value on all other Resets = 0000. SPBRG, Value on all other Resets = 0000\nLegend: x = unknown, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>. Shaded cells are not used for synchronous slave reception.",
    "TABLE 18-11: REGISTERS ASSOCIATED WITH SYNCHRONOUS SLAVE RECEPTION\nNote 1: The PSPIF, PSPIE and PSPIP bits are reserved on the PIC18F2X20 devices; always maintain these bits clear.",
    "19.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nThe Analog-to-Digital (A/D) converter module has 10 inputs  for  the  PIC18F2X20  devices  and  13  for  the PIC18F4X20 devices. This module allows conversion of  an  analog  input  signal  to  a  corresponding  10-bit digital number.\nThe module has five registers:\nGLYPH<149> A/D Result High Register (ADRESH)\nGLYPH<149> A/D Result Low Register (ADRESL)\nGLYPH<149> A/D Control Register 0 (ADCON0)\nGLYPH<149> A/D Control Register 1 (ADCON1)\nGLYPH<149> A/D Control Register 2 (ADCON2)",
    "19.0 10-BIT ANALOG-TO-DIGITAL CONVERTER (A/D) MODULE\nA  new  feature  for  the  A/D  converter  is  the  addition  of programmable acquisition time. This feature allows the user to select a new channel for conversion and setting the GO/DONE bit immediately. When the GO/DONE bit is set, the selected channel is sampled for the programmed acquisition time before a conversion is actually started. This removes the firmware overhead that may have been required to allow for an acquisition (sampling) period (see Register 19-3 and Section 19.3 GLYPH<147> Selecting and Configuring Automatic Acquisition TimeGLYPH<148> ).\nThe ADCON0 register, shown in Register 19-1, controls the operation of the A/D module. The ADCON1 register, shown in Register 19-2, configures the functions of the port pins. The ADCON2 register, shown  in Register 19-3, configures the A/D  clock source, programmed acquisition time and justification.",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/W-0 = CHS3. GLYPH<151>, R/W-0 = CHS2. GLYPH<151>, R/W-0 = CHS1. GLYPH<151>, R/W-0 = CHS0. GLYPH<151>, R/W-0 = GO/DONE. GLYPH<151>, R/W-0 = ADON\nbit 7\nbit 0",
    "REGISTER 19-1: ADCON0: A/D CONTROL REGISTER 0\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5-2\nCHS3:CHS0: Analog Channel Select bits\n0000 = Channel 0 (AN0)\n0001 = Channel 1 (AN1)\n0010 = Channel 2 (AN2)\n0011 = Channel 3 (AN3)\n0100 = Channel 4 (AN4)\n0101 = Channel 5 (AN5) (1,2)\n0110 = Channel 6 (AN6) (1,2)\n0111 = Channel 7 (AN7) (1,2)\n1000 = Channel 8 (AN8)\n1001 = Channel 9 (AN9)\n1010 = Channel 10 (AN10)\n1011 = Channel 11 (AN11)\n1100 = Channel 12 (AN12)\n1101 = Unimplemented (2)\n1110 = Unimplemented (2)\n1111 = Unimplemented (2)\nbit 1\nGO/DONE: A/D Conversion Status bit\nWhen ADON = 1 :\n1 = A/D conversion in progress\n0 = A/D Idle",
    "bit 0\nADON: A/D On bit\n1 = A/D converter module is enabled\n0 = A/D converter module is disabled\nNote 1: These channels are not implemented on the PIC18F2X20 (28-pin) devices.\n2: Performing a conversion on unimplemented channels returns full-scale results.",
    "REGISTER 19-2: ADCON1: A/D CONTROL REGISTER 1\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/W-0 = VCFG1. GLYPH<151>, R/W-0 = VCFG0. GLYPH<151>, R/W-0 (1) = PCFG3. GLYPH<151>, R/W (1) = PCFG2. GLYPH<151>, R/W (1) = PCFG1. GLYPH<151>, R/W (1) = PCFG0. bit 7, U-0 = . bit 7, R/W-0 = . bit 7, R/W-0 = . bit 7, R/W-0 (1) = . bit 7, R/W (1) = . bit 7, R/W (1) = . bit 7, R/W (1) = bit 0",
    "REGISTER 19-2: ADCON1: A/D CONTROL REGISTER 1\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5\nVCFG1: Voltage Reference Configuration bit (VREF- source)\n1 = VREF- (AN2)\n0 = VSS\nbit 4\nVCFG0: Voltage Reference Configuration bit (VREF+ source)\n1 = VREF+ (AN3)\n0 = VDD\nbit 3-0\nPCFG3:PCFG0: A/D Port Configuration Control bits:",
    "bit 7-6\n0000 (1), AN12 = A. 0000 (1), AN11 = A. 0000 (1), AN10 = A. 0000 (1), AN9 = A. 0000 (1), AN8 = A. 0000 (1), AN7 (2) = A. 0000 (1), AN6 (2) = A. 0000 (1), AN5 (2) = A. 0000 (1), AN4 = A. 0000 (1), AN3 = A. 0000 (1), AN2 = A. 0000 (1), AN1 = A. 0000 (1), AN0 = A. 0001, AN12 = A. 0001, AN11 = A. 0001, AN10 = A. 0001, AN9 = A. 0001, AN8 = A. 0001, AN7 (2) = A. 0001, AN6 (2) = A. 0001, AN5 (2) = A. 0001, AN4 = A. 0001, AN3 = A. 0001, AN2 = A. 0001,",
    "bit 7-6\nAN1 = A. 0001, AN0 = A. 0010, AN12 = A. 0010, AN11 = A. 0010, AN10 = A. 0010, AN9 = A. 0010, AN8 = A. 0010, AN7 (2) = A. 0010, AN6 (2) = A. 0010, AN5 (2) = A. 0010, AN4 = A. 0010, AN3 = A. 0010, AN2 = A. 0010, AN1 = A. 0010, AN0 = A. 0011, AN12 = D. 0011, AN11 = A. 0011, AN10 = A. 0011, AN9 = A. 0011, AN8 = A. 0011, AN7 (2) = A. 0011, AN6 (2) = A. 0011, AN5 (2) = A. 0011, AN4 = A. 0011, AN3 = A. 0011, AN2 = A. 0011, AN1 = A. 0011, AN0 = A. 0100, AN12 = D. 0100, AN11",
    "bit 7-6\n= D. 0100, AN10 = A. 0100, AN9 = A. 0100, AN8 = A. 0100, AN7 (2) = A. 0100, AN6 (2) = A. 0100, AN5 (2) = A. 0100, AN4 = A. 0100, AN3 = A. 0100, AN2 = A. 0100, AN1 = A. 0100, AN0 = A. 0101, AN12 = D. 0101, AN11 = D. 0101, AN10 = D. 0101, AN9 = A. 0101, AN8 = A. 0101, AN7 (2) = A. 0101, AN6 (2) = A. 0101, AN5 (2) = A. 0101, AN4 = A. 0101, AN3 = A. 0101, AN2 = A. 0101, AN1 = A. 0101, AN0 = A. 0110, AN12 = D. 0110, AN11 = D. 0110, AN10 = D. 0110, AN9 = D. 0110, AN8 =",
    "bit 7-6\nA. 0110, AN7 (2) = A. 0110, AN6 (2) = A. 0110, AN5 (2) = A. 0110, AN4 = A. 0110, AN3 = A. 0110, AN2 = A. 0110, AN1 = A. 0110, AN0 = A. 0111 (1), AN12 = D. 0111 (1), AN11 = D. 0111 (1), AN10 = D. 0111 (1), AN9 = D. 0111 (1), AN8 = D. 0111 (1), AN7 (2) = A. 0111 (1), AN6 (2) = A. 0111 (1), AN5 (2) = A. 0111 (1), AN4 = A. 0111 (1), AN3 = A. 0111 (1), AN2 = A. 0111 (1), AN1 = A. 0111 (1), AN0 = A. 1000, AN12 = D. 1000, AN11 = D. 1000, AN10 = D. 1000, AN9",
    "bit 7-6\n= D. 1000, AN8 = D. 1000, AN7 (2) = D. 1000, AN6 (2) = A. 1000, AN5 (2) = A. 1000, AN4 = A. 1000, AN3 = A. 1000, AN2 = A. 1000, AN1 = A. 1000, AN0 = A. 1001, AN12 = D. 1001, AN11 = D. 1001, AN10 = D. 1001, AN9 = D. 1001, AN8 = D. 1001, AN7 (2) = D. 1001, AN6 (2) = D. 1001, AN5 (2) = A. 1001, AN4 = A. 1001, AN3 = A. 1001, AN2 = A. 1001, AN1 = A. 1001, AN0 = A. 1010, AN12 = D. 1010, AN11 = D. 1010, AN10 = D. 1010, AN9 = D. 1010, AN8 = D. 1010, AN7 (2) = D. 1010, AN6 (2) = D.",
    "bit 7-6\n1010, AN5 (2) = D. 1010, AN4 = A. 1010, AN3 = A. 1010, AN2 = A. 1010, AN1 = A. 1010, AN0 = A. 1011, AN12 = D. 1011, AN11 = D. 1011, AN10 = D. 1011, AN9 = D. 1011, AN8 = D. 1011, AN7 (2) = D. 1011, AN6 (2) = D. 1011, AN5 (2) = D. 1011, AN4 = D. 1011, AN3 = A. 1011, AN2 = A. 1011, AN1 = A. 1011, AN0 = A. 1100, AN12 = D. 1100, AN11 = D. 1100, AN10 = D. 1100, AN9 = D. 1100, AN8 = D. 1100, AN7 (2) = D. 1100, AN6 (2) = D. 1100, AN5 (2) = D. 1100, AN4 = D. 1100, AN3 = D. 1100, AN2 = A. 1100,",
    "bit 7-6\nAN1 = A. 1100, AN0 = A. 1101, AN12 = D. 1101, AN11 = D. 1101, AN10 = D. 1101, AN9 = D. 1101, AN8 = D. 1101, AN7 (2) = D. 1101, AN6 (2) = D. 1101, AN5 (2) = D. 1101, AN4 = D. 1101, AN3 = D. 1101, AN2 = D. 1101, AN1 = A. 1101, AN0 = A. 1110, AN12 = D. 1110, AN11 = D. 1110, AN10 = D. 1110, AN9 = D. 1110, AN8 = D. 1110, AN7 (2) = D. 1110, AN6 (2) = D. 1110, AN5 (2) = D. 1110, AN4 = D. 1110, AN3 = D. 1110, AN2 = D. 1110, AN1 = D. 1110, AN0 = A. 1111, AN12 = D. 1111, AN11 =",
    "bit 7-6\nD. 1111, AN10 = D. 1111, AN9 = D. 1111, AN8 = D. 1111, AN7 (2) = D. 1111, AN6 (2) = D. 1111, AN5 (2) = D. 1111, AN4 = D. 1111, AN3 = D. 1111, AN2 = D. 1111, AN1 = D. 1111, AN0 = D\nA = Analog input\nD = Digital I/O\nNote 1: The POR value of the PCFG bits depends on the value of the PBADEN Configuration bit. When PBADEN = 1 , PCFG<3:0> = 0000 ; when PBADEN = 0 , PCFG<3:0> = 0111 .\n- 2: AN5 through AN7 are available only in PIC18F4X20 devices.",
    "PIC18F2220/2320/4220/4320\nREGISTER 19-3:",
    "ADCON2: A/D CONTROL REGISTER 2\nADFM, U-0 = GLYPH<151>. ADFM, R/W-0 = ACQT2. ADFM, R/W-0 = ACQT1. ADFM, R/W-0 = ACQT0. ADFM, R/W-0 = ADCS2. ADFM, R/W-0 = ADCS1. ADFM, R/W-0 = ADCS0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "ADCON2: A/D CONTROL REGISTER 2\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7\nADFM: A/D Result Format Select bit\n1 = Right justified\n0 = Left justified\nbit 6\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5-3\nACQT2:ACQT0: A/D Acquisition Time Select bits\n111 = 20 TAD\n110 = 16 TAD\n101 = 12 TAD\n100 = 8 TAD\n011 = 6 TAD\n010 = 4 TAD\n001 = 2 TAD\n000 = 0 TAD (1)",
    "bit 2-0 ADCS2:ADCS0: A/D Conversion Clock Select bits\n111 = FRC (clock derived from A/D RC oscillator) (1)\n110 = FOSC/64\n101 = FOSC/16\n100 = FOSC/4\n011 = FRC (clock derived from A/D RC oscillator) (1)\n010 = FOSC/32\n001 = FOSC/8\n000 = FOSC/2\nNote 1: If the A/D FRC clock source is selected, a delay of one TCY (instruction cycle) is added before the A/D clock starts. This allows the SLEEP instruction to be executed before starting a conversion.",
    "PIC18F2220/2320/4220/4320\nThe analog reference voltage is software selectable to either the deviceGLYPH<146>s positive and negative supply voltage (AVDD and AVSS), or the voltage level on the RA3/AN3/ VREF+ and RA2/AN2/VREF-/CVREF pins.\nA device Reset forces all registers to their Reset state. This forces the A/D module to be turned off and any conversion in progress is aborted.\nThe A/D converter has a unique feature of being able to operate while the device is in Sleep mode. To operate  in  SLEEP,  the  A/D  conversion  clock  must  be derived from the A/DGLYPH<146>s internal RC oscillator.\nThe output of the sample and hold is the input into the converter  which  generates  the  result  via  successive approximation.",
    "PIC18F2220/2320/4220/4320\nEach port pin associated with the A/D converter can be configured as an analog input or as a digital I/O. The ADRESH and ADRESL registers contain the result of the A/D conversion. When the A/D conversion is complete, the result is loaded into the ADRESH/ADRESL registers,  the  GO/DONE  bit  (ADCON0  register)  is cleared and A/D Interrupt Flag bit, ADIF, is set. The block diagram of the A/D module is shown in Figure 19-1.\nThe  value  in  the  ADRESH/ADRESL  registers  is  not modified for a Power-on Reset. The ADRESH/ ADRESL registers will  contain  unknown  data  after  a Power-on Reset.",
    "PIC18F2220/2320/4220/4320\nAfter the A/D module has been configured as desired, the selected channel must be acquired before the conversion  is  started.  The  analog  input  channels  must have  their  corresponding  TRIS  bits  selected  as  an input. To determine acquisition time, see Section 19.1 GLYPH<147>A/D  Acquisition RequirementsGLYPH<148> .  After this acquisition  time  has  elapsed,  the  A/D  conversion  can  be started.  An  acquisition  time  can  be  programmed  to occur between setting the GO/DONE bit and the actual start of the conversion.\nThe following steps should be followed to do an A/D conversion:\n1. Configure the A/D module:\nGLYPH<149> Configure analog pins, voltage reference and digital I/O (ADCON1)\nGLYPH<149> Select A/D input channel (ADCON0)\nGLYPH<149> Select A/D acquisition time (ADCON2)\nGLYPH<149> Select A/D conversion clock (ADCON2)\nGLYPH<149> Turn on A/D module (ADCON0)",
    "FIGURE 19-2: ANALOG INPUT MODEL\n2. Configure A/D interrupt (if desired):\nGLYPH<149> Clear ADIF bit\nGLYPH<149> Set ADIE bit\nGLYPH<149> Set GIE bit\n3. Wait the required acquisition time (if required).\n4. Start conversion:\nGLYPH<149> Set GO/DONE bit (ADCON0 register)\n5. Wait for A/D conversion to complete, by either: GLYPH<149> Polling for the GO/DONE bit to be cleared OR\nGLYPH<149> Waiting for the A/D interrupt\n6. Read A/D Result registers (ADRESH:ADRESL); clear bit ADIF if required.\n7. For next conversion, go to step 1 or step 2, as required.  The  A/D  conversion  time  per  bit  is defined  as  TAD.  A  minimum  wait  of  2  TAD  is required before next acquisition starts.",
    "19.2 A/D VREF+ and VREF- References\nFor the A/D converter to meet its specified accuracy, the Charge Holding Capacitor (CHOLD) must be allowed to fully charge to the input channel voltage level. The analog  input  model  is  shown  in  Figure 19-2.  The  source impedance (RS) and the internal sampling switch (RSS) impedance directly affect the time required to charge the capacitor CHOLD. The sampling switch (RSS) impedance varies over the device voltage (VDD). The source impedance affects the offset voltage at the analog input (due to pin  leakage  current). The  maximum  recommended impedance for  analog  sources  is  2.5  k \u03a9 .  After  the analog input channel is selected (changed), the channel must be sampled for at least the minimum acquisition time before starting a conversion.\nNote:\nWhen the conversion is started, the holding capacitor is disconnected from the input pin.",
    "19.2 A/D VREF+ and VREF- References\nTo calculate the minimum acquisition time, Equation 19-1  may  be  used.  This  equation  assumes that 1/2 LSb error is used (1024 steps for the A/D). The 1/2 LSb error is the maximum error allowed for the A/D to meet its specified resolution.\nExample 19-1  shows  the  calculation  of  the  minimum required acquisition time TACQ. This calculation is based on the following application system assumptions:\nCHOLD\n= 120 pF\nRS\n= 2.5 k \u03a9\nConversion Error\n\u2264 1/2 LSb\nVDD\n= 5V \u2192 Rss = 7 k \u03a9\nTemperature\n= 50 C (system max.) \u00b0\nVHOLD\n=\n0V @ time = 0\nIf external voltage references are used instead of the internal  AVDD  and  AVSS  sources,  the  source  impedance of the VREF+ and VREF- voltage sources must be considered.  During  acquisition,  currents  supplied  by these sources are insignificant. However, during conversion,  the  A/D  module  sinks  and  sources  current through the reference sources.",
    "19.2 A/D VREF+ and VREF- References\nIn order to maintain the A/D accuracy, the voltage reference  source  impedances  should  be  kept  low  to reduce voltage changes. These voltage changes occur as reference  currents flow through  the reference source  impedance. The  maximum  recommended impedance of the VREF+ and VREFexternal reference voltage sources is 75 \u03a9 .",
    "Note:\nWhen using external references, the source impedance of the external voltage references must be less than 75 \u03a9 in order to achieve the specified ADC resolution. A higher  reference  source  impedance  will increase  the  ADC  offset  and  gain  errors. Resistive voltage dividers will not provide a low enough source impedance. To ensure the best possible ADC performance, exter- nal VREF inputs should be buffered with an op amp or other low-impedance circuit.",
    "ACQUISITION TIME\nTACQ, 1 = = Amplifier Settling Time + Holding Capacitor Charging Time + Temperature Coefficient",
    "EQUATION 19-2: MINIMUM A/D HOLDING CAPACITOR\nVHOLD\n=\n(VREF GLYPH<150> (VREF/2048)) GLYPH<149> (1 GLYPH<150> e (-Tc/CHOLD(RIC + RSS + RS)) )\nor\nTC\n=\n-(CHOLD)(RIC + RSS + RS) ln(1/2048)",
    "EXAMPLE 19-1: CALCULATING THE MINIMUM REQUIRED ACQUISITION TIME\nTACQ =\nTAMP + TC + TCOFF\nTAMP =\n5 \u03bc s\nTCOFF =\n(Temp GLYPH<150> 25 \u00b0 C)(0.05 \u03bc s/ \u00b0 C)\n(50 C GLYPH<150> 25 \u00b0 \u00b0 C)(0.05 \u03bc s/ \u00b0 C)\n1.25 \u03bc s\nTemperature coefficient is only required for temperatures > 25 C. Below 25 C, TCOFF = 0 \u00b0 \u00b0 \u03bc s.\nTC GLYPH<150>\n-(CHOLD)(RIC + RSS + RS) ln(1/2047) \u03bc s\n-(120 pF) (1 k \u03a9 + 7 k \u03a9 + 2.5 k \u03a9 ) ln(0.0004883) \u03bc s\n9.61 \u03bc s\nTACQ =\n5 \u03bc s + 1.25 \u03bc s + 9.61 \u03bc s\n12.86 \u03bc s",
    "19.3 Selecting and Configuring Automatic Acquisition Time\nThe  ADCON2  register  allows  the  user  to  select  an acquisition time that occurs each time the GO/DONE bit is set.\nWhen the GO/DONE bit is set, sampling is stopped and a conversion begins. The user is responsible for ensuring the required acquisition time has passed between selecting  the  desired  input  channel  and  setting  the GO/DONE bit. This occurs when the ACQT2:ACQT0 bits (ADCON2<5:3>) remain in their Reset state (GLYPH<145> 000 GLYPH<146>) and  is  compatible  with  devices  that  do  not  offer programmable acquisition times.\nIf desired,  the  ACQT  bits  can  be  set  to  select  a programmable  acquisition  time  for  the  A/D  module. When the GO/DONE bit is set, the A/D module continues  to  sample  the  input  for  the  selected  acquisition time, then automatically begins a conversion. Since the acquisition time is programmed, there may be no need to  wait  for  an  acquisition  time  between  selecting  a channel and setting the GO/DONE bit.",
    "19.4 Selecting the A/D Conversion Clock\nThe A/D conversion time per bit is defined as TAD. The A/D conversion requires 11 TAD per 10-bit conversion. The  source  of  the  A/D  conversion  clock  is  software selectable. There are seven possible options for TAD:\nGLYPH<149> 2 TOSC\nGLYPH<149> 4 TOSC\nGLYPH<149> 8 TOSC\nGLYPH<149> 16 TOSC\nGLYPH<149> 32 TOSC\nGLYPH<149> 64 TOSC\nGLYPH<149> Internal RC Oscillator\nFor correct A/D conversions, the A/D conversion clock (TAD) must be as short as possible, but greater than the minimum TAD (approximately 2 \u03bc s, see parameter #130 for more information).\nTable 19-1 shows the resultant TAD times derived from the  device  operating  frequencies  and  the  A/D  clock source selected.\nIn either case, when the conversion is completed, the GO/DONE bit is cleared, the ADIF flag is set and the A/D  begins  sampling  the  currently  selected  channel again. If  an  acquisition  time  is  programmed,  there  is nothing to indicate if the acquisition time has ended or if the conversion has begun.",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n2 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 000. 2 TOSC, Maximum Device Frequency.PIC18FXX20 = 1.25 MHz. 2 TOSC, Maximum Device Frequency.PIC18LFXX20 (4) = 666 kHz. 4 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 100. 4 TOSC, Maximum Device Frequency.PIC18FXX20 = 2.50 MHz. 4 TOSC, Maximum Device Frequency.PIC18LFXX20 (4) = 1.33 MHz. 8 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 001. 8 TOSC, Maximum Device Frequency.PIC18FXX20 = 5.00 MHz. 8 TOSC, Maximum Device Frequency.PIC18LFXX20 (4) = 2.66 MHz. 16 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 101. 16 TOSC, Maximum Device Frequency.PIC18FXX20 = 10.0 MHz. 16 TOSC, Maximum Device Frequency.PIC18LFXX20 (4)",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\n= 5.33 MHz. 32 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 010. 32 TOSC, Maximum Device Frequency.PIC18FXX20 = 20.0 MHz. 32 TOSC, Maximum Device Frequency.PIC18LFXX20 (4) = 10.65 MHz. 64 TOSC, AD Clock Source (T AD).ADCS2:ADCS0 = 110. 64 TOSC, Maximum Device Frequency.PIC18FXX20 = 40.0 MHz. 64 TOSC, Maximum Device Frequency.PIC18LFXX20 (4) = 21.33 MHz. RC (3), AD Clock Source (T AD).ADCS2:ADCS0 = x11. RC (3), Maximum Device Frequency.PIC18FXX20 = 1.00 MHz (1). RC (3), Maximum Device Frequency.PIC18LFXX20 (4) = 1.00 MHz (2)",
    "TABLE 19-1: TAD vs. DEVICE OPERATING FREQUENCIES\nNote 1: The RC source has a typical TAD time of 4 \u03bc s.\n2: The RC source has a typical TAD time of 6 \u03bc s.\n3: For device frequencies above 1 MHz, the device must be in Sleep for the entire conversion or the A/D accuracy may be out of specification.\n4: Low-power devices only.",
    "19.6 Configuring Analog Port Pins\nThe selection of the automatic acquisition time and A/D conversion  clock  is  determined  in  part  by  the  clock source and frequency while in a power-managed mode.\nIf the A/D is expected to operate while the device is in a power-managed  mode,  the  ACQT2:ACQT0  and ADCS2:ADCS0 bits in ADCON2 should be updated in accordance with the power-managed mode clock that will be used. After the power-managed mode is entered (either  of  the  power-managed  Run  modes),  an  A/D acquisition  or  conversion  may  be  started.  Once  an acquisition or conversion is started, the device should continue to be clocked by the same power-managed mode clock source until the conversion has been completed. If  desired,  the  device  may  be  placed into  the corresponding  power-managed  Idle  mode  during  the conversion.\nIf  the  power-managed  mode  clock  frequency  is  less than  1 MHz,  the  A/D  RC  clock  source  should  be selected.",
    "19.6 Configuring Analog Port Pins\nOperation in Sleep mode requires the A/D RC clock to be selected. If bits ACQT2:ACQT0 are set to GLYPH<145> 000 GLYPH<146>  and a conversion is started, the conversion will be delayed one instruction cycle to allow execution of the SLEEP instruction and entry to Sleep mode. The IDLEN and SCS bits in the OSCCON register must have already been cleared prior to starting the conversion.\nThe ADCON1, TRISA, TRISB and TRISE registers all configure the A/D port pins. The port pins needed as analog inputs must have their corresponding TRIS bits set (input). If the TRIS bit is cleared (output), the digital output level (VOH or VOL) will be converted.\nThe A/D operation is independent of the state of the CHS3:CHS0 bits and the TRIS bits.",
    "19.6 Configuring Analog Port Pins\nNote 1: When reading the PORT register, all pins configured as analog input channels will read as cleared (a low level). Pins configured  as  digital  inputs  will convert  an analog input. Analog levels on a digitally configured input will be accurately converted.\n2: Analog  levels  on  any  pin  defined  as  a digital  input  may  cause  the  digital  input buffer  to  consume  current  out  of  the deviceGLYPH<146>s specification limits.\n3: The  PBADEN  bit  in  the  Configuration register configures PORTB pins to reset as  analog  or  digital  pins  by  controlling how  the  PCFG0  bits  in  ADCON1  are reset.",
    "19.7 A/D Conversions\nFigure 19-3 shows the operation of the A/D converter after the GO/DONE  bit has been set and the ACQT2:ACQT0  bits  are  cleared.  A  conversion  is started after the following instruction to allow entry into Sleep mode before the conversion begins.\nClearing the GO/DONE bit during a conversion will abort the current conversion. The A/D Result register pair will NOT  be  updated  with  the  partially  completed  A/D conversion sample. This means the ADRESH:ADRESL registers  will  continue  to  contain  the  value  of  the  last completed conversion (or the last value written to the ADRESH:ADRESL registers).\nFigure 19-4 shows the operation of the A/D converter after the GO/DONE  bit has been set and the ACQT2:ACQT0 bits are set to GLYPH<145> 010 GLYPH<146> and  selecting  a 4 TAD acquisition time before the conversion starts.\nAfter  the  A/D  conversion  is  completed  or  aborted,  a 2 TAD wait is required before the next acquisition can be started. After this wait, acquisition on the selected channel is automatically started.\nNote:",
    "19.7 A/D Conversions\nThe GO/DONE bit should NOT be set in the same instruction that turns on the A/D.\nFIGURE 19-3: A/D CONVERSION TAD CYCLES (ACQT<2:0> = 000 , TACQ = 0 )\nFIGURE 19-4: A/D CONVERSION TAD CYCLES   (ACQT<2:0> = 010 , TACQ = 4 TAD)",
    "19.8 Use of the CCP2 Trigger\nAn A/D conversion can be started by the GLYPH<147>Special Event TriggerGLYPH<148>  of  the  CCP2  module.  This  requires  that  the CCP2M3:CCP2M0  bits  (CCP2CON<3:0>)  be  programmed as GLYPH<145> 1011 GLYPH<146> and that the A/D module is enabled (ADON bit is set).  When the trigger  occurs,  the GO/ DONE bit will be set, starting the A/D acquisition and conversion and the Timer1 (or Timer3) counter will be reset to zero. Timer1 (or Timer3) is reset to automatically  repeat  the  A/D  acquisition  period  with  minimal software overhead (moving ADRESH/ADRESL to the desired location). The appropriate analog input channel  must  be  selected  and  the  minimum  acquisition period  is  either  timed  by  the  user  or  an  appropriate TACQ time, selected before the GLYPH<147>Special Event TriggerGLYPH<148>, sets the GO/DONE bit (starts a conversion).",
    "19.8 Use of the CCP2 Trigger\nIf the A/D module is not enabled (ADON is cleared), the GLYPH<147>S pecial Event  TriggerGLYPH<148> will  be  ignored  by  the  A/D module  but  will  still  reset  the  Timer1  (or  Timer3) counter.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nINTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR, BOR = 0000. INTCON, Value on POR, BOR = 0000. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 0000. PIR1, Bit 7 = PSPIF. PIR1, Bit 6 = ADIF. PIR1, Bit 5 = RCIF. PIR1, Bit 4 = TXIF. PIR1, Bit 3 = SSPIF. PIR1, Bit 2 = CCP1IF. PIR1, Bit 1 = TMR2IF. PIR1, Bit 0 = TMR1IF. PIR1, Value on POR, BOR = 0000.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nPIR1, Value on POR, BOR = 0000. PIR1, Value on all other Resets = 0000. PIR1, Value on all other Resets = 0000. PIE1, Bit 7 = PSPIE. PIE1, Bit 6 = ADIE. PIE1, Bit 5 = RCIE. PIE1, Bit 4 = TXIE. PIE1, Bit 3 = SSPIE. PIE1, Bit 2 = CCP1IE. PIE1, Bit 1 = TMR2IE. PIE1, Bit 0 = TMR1IE. PIE1, Value on POR, BOR = 0000. PIE1, Value on POR, BOR = 0000. PIE1, Value on all other Resets = 0000. PIE1, Value on all other Resets = 0000. IPR1, Bit 7 = PSPIP. IPR1, Bit 6 = ADIP. IPR1, Bit 5 = RCIP. IPR1, Bit 4 = TXIP. IPR1, Bit 3 = SSPIP. IPR1, Bit 2 = CCP1IP. IPR1, Bit 1 =",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nTMR2IP. IPR1, Bit 0 = TMR1IP. IPR1, Value on POR, BOR = 1111. IPR1, Value on POR, BOR = 1111. IPR1, Value on all other Resets = 1111. IPR1, Value on all other Resets = 1111. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value on POR, BOR = 00-0. PIR2, Value on POR, BOR = 0000. PIR2, Value on all other Resets = 00-0. PIR2, Value on all other Resets = 0000. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 =",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nCMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR, BOR = 00-0. PIE2, Value on POR, BOR = 0000. PIE2, Value on all other Resets = 00-0. PIE2, Value on all other Resets = 0000. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 = LVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR, BOR = 11-1. IPR2, Value on POR, BOR = 1111.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nIPR2, Value on all other Resets = 11-1. IPR2, Value on all other Resets = 1111. ADRESH, Bit 7 = A/D Result Register High Byte. ADRESH, Bit 6 = A/D Result Register High Byte. ADRESH, Bit 5 = A/D Result Register High Byte. ADRESH, Bit 4 = A/D Result Register High Byte. ADRESH, Bit 3 = A/D Result Register High Byte. ADRESH, Bit 2 = A/D Result Register High Byte. ADRESH, Bit 1 = A/D Result Register High Byte. ADRESH, Bit 0 = A/D Result Register High Byte. ADRESH, Value on POR, BOR = xxxx. ADRESH, Value on POR, BOR = xxxx. ADRESH, Value on all other Resets = uuuu. ADRESH, Value on all other Resets = uuuu. ADRESL, Bit 7 = A/D Result Register Low Byte. ADRESL, Bit 6 = A/D Result Register Low Byte. ADRESL, Bit 5 = A/D Result Register Low Byte.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nADRESL, Bit 4 = A/D Result Register Low Byte. ADRESL, Bit 3 = A/D Result Register Low Byte. ADRESL, Bit 2 = A/D Result Register Low Byte. ADRESL, Bit 1 = A/D Result Register Low Byte. ADRESL, Bit 0 = A/D Result Register Low Byte. ADRESL, Value on POR, BOR = xxxx. ADRESL, Value on POR, BOR = xxxx. ADRESL, Value on all other Resets = uuuu. ADRESL, Value on all other Resets = uuuu. ADCON0, Bit 7 = GLYPH<151>. ADCON0, Bit 6 = GLYPH<151>. ADCON0, Bit 5 = CHS3. ADCON0, Bit 4 = CHS3. ADCON0, Bit 3 = CHS1. ADCON0, Bit 2 = CHS0. ADCON0, Bit 1 = GO/DONE. ADCON0, Bit 0 = ADON. ADCON0, Value on POR, BOR = --00.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nADCON0, Value on POR, BOR = 0000. ADCON0, Value on all other Resets = --00. ADCON0, Value on all other Resets = 0000. ADCON1, Bit 7 = GLYPH<151>. ADCON1, Bit 6 = GLYPH<151>. ADCON1, Bit 5 = VCFG1. ADCON1, Bit 4 = VCFG0. ADCON1, Bit 3 = PCFG3. ADCON1, Bit 2 = PCFG2. ADCON1, Bit 1 = PCFG1. ADCON1, Bit 0 = PCFG0. ADCON1, Value on POR, BOR = --00. ADCON1, Value on POR, BOR = 0qqq. ADCON1, Value on all other Resets = --00. ADCON1, Value on all other Resets = 0qqq. ADCON2, Bit 7 = ADFM. ADCON2, Bit 6 = GLYPH<151>. ADCON2, Bit 5 = ACQT2. ADCON2,",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nBit 4 = ACQT1. ADCON2, Bit 3 = ACQT0. ADCON2, Bit 2 = ADCS2. ADCON2, Bit 1 = ADCS1. ADCON2, Bit 0 = ADCS0. ADCON2, Value on POR, BOR = 0-00. ADCON2, Value on POR, BOR = 0000. ADCON2, Value on all other Resets = 0-00. ADCON2, Value on all other Resets = 0000. PORTA, Bit 7 = RA7 (4). PORTA, Bit 6 = RA6 (4). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR, BOR = --0x. PORTA, Value on POR, BOR = 0000. PORTA, Value on all other Resets = --0u. PORTA, Value on all other Resets = 0000.",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nTRISA, Bit 7 = TRISA7 (4) TRISA6 (4). TRISA, Bit 6 = TRISA7 (4) TRISA6 (4). TRISA, Bit 5 = TRISA7 (4) TRISA6 (4). TRISA, Bit 4 = TRISA7 (4) TRISA6 (4). TRISA, Bit 3 = TRISA7 (4) TRISA6 (4). TRISA, Bit 2 = TRISA7 (4) TRISA6 (4). TRISA, Bit 1 = TRISA7 (4) TRISA6 (4). TRISA, Bit 0 = TRISA7 (4) TRISA6 (4). TRISA, Value on POR, BOR = --11. TRISA, Value on POR, BOR = 1111. TRISA, Value on all other Resets = --11. TRISA, Value on all other Resets = 1111. PORTB, Bit 7 = Read PORTB pins, Write LATB Latch. PORTB, Bit 6 = Read PORTB pins, Write LATB Latch. PORTB, Bit 5",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\n= Read PORTB pins, Write LATB Latch. PORTB, Bit 4 = Read PORTB pins, Write LATB Latch. PORTB, Bit 3 = Read PORTB pins, Write LATB Latch. PORTB, Bit 2 = Read PORTB pins, Write LATB Latch. PORTB, Bit 1 = Read PORTB pins, Write LATB Latch. PORTB, Bit 0 = Read PORTB pins, Write LATB Latch. PORTB, Value on POR, BOR = xxxx. PORTB, Value on POR, BOR = xxxx. PORTB, Value on all other Resets = uuuu. PORTB, Value on all other Resets = uuuu. TRISB, Bit 7 = PORTB Data Direction Register. TRISB, Bit 6 = PORTB Data Direction Register. TRISB, Bit 5 = PORTB Data Direction Register. TRISB, Bit 4 = PORTB Data Direction Register. TRISB, Bit 3 = PORTB Data Direction Register. TRISB, Bit 2 = PORTB Data Direction Register. TRISB, Bit 1 = PORTB Data Direction Register. TRISB, Bit 0 = PORTB",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nData Direction Register. TRISB, Value on POR, BOR = 1111. TRISB, Value on POR, BOR = 1111. TRISB, Value on all other Resets = 1111. TRISB, Value on all other Resets = 1111. LATB, Bit 7 = PORTB Output Data Latch. LATB, Bit 6 = PORTB Output Data Latch. LATB, Bit 5 = PORTB Output Data Latch. LATB, Bit 4 = PORTB Output Data Latch. LATB, Bit 3 = PORTB Output Data Latch. LATB, Bit 2 = PORTB Output Data Latch. LATB, Bit 1 = PORTB Output Data Latch. LATB, Bit 0 = PORTB Output Data Latch. LATB, Value on POR, BOR = xxxx. LATB, Value on POR, BOR = xxxx. LATB, Value on all other Resets = uuuu. LATB, Value on all other Resets = uuuu. PORTE (2), Bit 7 = GLYPH<151>. PORTE (2), Bit 6 =",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nGLYPH<151>. PORTE (2), Bit 5 = GLYPH<151>. PORTE (2), Bit 4 = GLYPH<151>. PORTE (2), Bit 3 = RE3 (1). PORTE (2), Bit 2 = Read PORTE pins, Write LATE (4). PORTE (2), Bit 1 = Read PORTE pins, Write LATE (4). PORTE (2), Bit 0 = Read PORTE pins, Write LATE (4). PORTE (2), Value on POR, BOR = ----. PORTE (2), Value on POR, BOR = xxxx. PORTE (2), Value on all other Resets = ----. PORTE (2), Value on all other Resets = uuuu. TRISE (2), Bit 7 = IBF. TRISE (2), Bit 6 = OBE. TRISE (2), Bit 5 = IBOV. TRISE (2), Bit 4 = PSPMODE. TRISE (2), Bit 3 = GLYPH<151>. TRISE (2), Bit 2 = PORTE",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nData Direction. TRISE (2), Bit 1 = PORTE Data Direction. TRISE (2), Bit 0 = PORTE Data Direction. TRISE (2), Value on POR, BOR = 0000. TRISE (2), Value on POR, BOR = -111. TRISE (2), Value on all other Resets = 0000. TRISE (2), Value on all other Resets = -111. LATE (2), Bit 7 = GLYPH<151>. LATE (2), Bit 6 = GLYPH<151>. LATE (2), Bit 5 = GLYPH<151>. LATE (2), Bit 4 = GLYPH<151>. LATE (2), Bit 3 = PORTE Output Data Latch. LATE (2), Bit 2 = PORTE Output Data Latch. LATE (2), Bit 1 = PORTE Output Data Latch. LATE (2), Bit 0 = PORTE Output Data Latch. LATE (2), Value on POR, BOR = ----. LATE (2), Value on POR, BOR = -xxx. LATE (2), Value on",
    "TABLE 19-2: SUMMARY OF A/D REGISTERS\nall other Resets = ----. LATE (2), Value on all other Resets = -uuu\nLegend:\nx = unknown, u = unchanged, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>, q = value depends on condition.\nShaded cells are not used for A/D conversion.\nNote 1:\nThe RE3 port bit is available as an input-only pin only in 40-pin devices and when Master Clear functionality is disabled (CONFIG3H<7>= 0 ).\n2: This register is not implemented on PIC18F2X20 devices and reads back 0x00.\n3: These pins may be configured as port pins depending on the oscillator mode selected.",
    "20.1 Comparator Configuration\nThe comparator module contains two analog comparators.  The inputs and outputs for the comparators are multiplexed with the RA0 through RA5 pins. The onchip  voltage  reference  ( Section 21.0  GLYPH<147>Comparator Voltage Reference ModuleGLYPH<148> ) can also be an input to the comparators.\nThe CMCON  register, shown as Register 20-1, controls  the  comparator  moduleGLYPH<146>s  input  and  output multiplexers. A block diagram of the various comparator configurations is shown in Figure 20-1.\nThere are eight modes of operation for the comparators. The CM bits (CMCON<2:0>) are used to select these modes.  Figure 20-1  shows  the  eight  possible  modes. The  TRISA  register  controls  the  data  direction  of  the comparator pins for each mode. If the Comparator mode is changed, the comparator output level may not be valid for  the  specified  mode  change  delay  shown  in  the Electrical  Specifications  (see Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> ).\nNote:",
    "20.1 Comparator Configuration\nComparator interrupts should be disabled during a Comparator mode change. Otherwise, a false interrupt may occur.",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nC2OUT, R-0 = C1OUT. C2OUT, R/W-0 = C2INV. C2OUT, R/W-0 = C1INV. C2OUT, R/W-0 = CIS. C2OUT, R/W-1 = CM2. C2OUT, R/W-1 = CM1. C2OUT, R/W-1 = CM0. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 20-1: CMCON: COMPARATOR CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7 C2OUT : Comparator 2 Output bit\nWhen C2INV = 0 :\n1 = C2 VIN+ > C2 VIN-\n0 = C2 VIN+ < C2 VIN-\nWhen C2INV = 1 :\n1 = C2 VIN+ < C2 VIN-\n0 = C2 VIN+ > C2 VIN-",
    "bit 6\nC1OUT : Comparator 1 Output bit\nWhen C1INV = 0 :\n1 = C1 VIN+ > C1 VIN-\n0 = C1 VIN+ < C1 VIN-\nWhen C1INV = 1 :\n1 = C1 VIN+ < C1 VIN-\n0 = C1 VIN+ > C1 VIN-\nbit 5\nC2INV : Comparator 2 Output Inversion bit\n1 = C2 output inverted\n0 = C2 output not inverted\nbit 4\nC1INV : Comparator 1 Output Inversion bit\n1 = C1 output inverted\n0 = C1 output not inverted",
    "bit 3\nCIS : Comparator Input Switch bit\nWhen CM2:CM0 = 110 :\n1 = C1 VIN- connects to RA3/AN3\nC2 VIN- connects to RA2/AN2\n0 = C1 VIN- connects to RA0/AN0\nC2 VIN- connects to RA1/AN1",
    "bit 2-0\nCM2:CM0 : Comparator Mode bits\nFigure 20-1 shows the Comparator modes and the CM2:CM0 bit settings.",
    "One Independent Comparator with Output CM<2:0> = 001\nA = Analog Input, port reads zeros always, overrides TRISA bit (2) .\nD = Digital Input.\nCIS (CMCON<3>) is the Comparator Input Switch; CVROE (CVRCON<6>) is the Voltage Reference Output Switch.\nNote 1: RA4 must be configured as an output pin in TRISA<4> when used to output C1OUT. RA5 ignores TRISA<5> when used as an output for C2OUT.\n2: Mode 110 is exception. Comparator input pins obey TRISA bits.",
    "20.2 Comparator Operation\nA single comparator is shown in Figure 20-2, along with the  relationship  between  the  analog  input  levels  and the digital output. When the analog input at VIN+ is less than the analog input VIN-, the output of the comparator is a digital low level. When the analog input at VIN+ is greater  than  the  analog  input  VIN-,  the  output  of  the comparator is a digital high level. The shaded areas of the output of the comparator in Figure 20-2 represent the uncertainty due to input offsets and response time.",
    "20.3 Comparator Reference\nAn external or internal reference signal may be used depending  on  the  comparator  operating  mode.  The analog signal present at VIN- is compared to the signal at  VIN+  and  the  digital  output  of  the  comparator  is adjusted accordingly (Figure 20-2).\nFIGURE 20-2: SINGLE COMPARATOR",
    "20.3.1 EXTERNAL REFERENCE SIGNAL\nWhen  external voltage references are used, the comparator module can be configured to have the comparators operate from the same or different reference sources. However, threshold detector applications may require the same reference. The reference signal must be between VSS and VDD and can be applied to either pin of the comparator(s).",
    "20.3.2 INTERNAL REFERENCE SIGNAL\nThe comparator module also allows the selection of an internally generated voltage reference for the comparators. Section 21.0  GLYPH<147>Comparator  Voltage  Reference ModuleGLYPH<148> contains a detailed description of the comparator voltage reference module that provides this signal. The internal reference signal is used when comparators are  in  mode,  CM2:CM0 = 110 (Figure 20-1).  In  this mode, the  internal  voltage reference  is  applied  to  the VIN+ pin of both comparators.\nDepending on the setting of the CVROE bit (CVRCON<6>),  the  voltage  reference  may  also  be available on pin RA2.",
    "20.4 Comparator Response Time\nResponse time is the minimum time, after selecting a new  reference  voltage  or  input  source,  before  the comparator output has a valid level. If the internal reference is changed, the maximum delay of the internal voltage reference must be considered when using the comparator outputs. Otherwise, the maximum delay of the  comparators  should  be  used  (see  Table 26-2  in Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> ).",
    "20.5 Comparator Outputs\nThe comparator outputs are read through the CMCON register.  These  bits  are  read-only.  The  comparator outputs may also be directly output to the RA4 and RA5 I/O pins. When enabled, multiplexers in the output path of the RA4 and RA5 pins will switch and the output of each pin will be the unsynchronized output of the comparator. The uncertainty of each of the comparators is related to the input offset voltage and the response time given  in  the  specifications.  Figure 20-3  shows  the comparator output block diagram.\nThe TRISA bits will still function as an output enable/ disable for the RA4 and RA5 pins while in this mode.\nThe polarity of the comparator outputs can be changed using the C2INV and C1INV bits (CMCON<4:5>).",
    "20.5 Comparator Outputs\nNote 1: When reading the PORT register, all pins configured as analog inputs will read as a GLYPH<145> 0 GLYPH<146>. Pins  configured  as  digital  inputs  will convert an analog input according to the Schmitt Trigger input specification.\n2: Analog  levels  on  any  pin  defined  as  a digital input may cause the input buffer to consume more current than is specified.",
    "20.6 Comparator Interrupts\nNote:\nThe comparator interrupt flag is set whenever there is a  change  in  the  output  value  of  either  comparator. Software  will  need  to  maintain  information  about  the status of the output bits, as read from CMCON<7:6>, to determine the actual change that occurred. The CMIF bit (PIR registers) is the Comparator Interrupt Flag. The CMIF bit is cleared by firmware. Since it is also possible to write a GLYPH<145> 1 GLYPH<146>  to  this register, a simulated interrupt may be initiated.\nThe CMIE bit (PIE registers) and the PEIE bit (INTCON register) must be set to enable the interrupt. In addition, the GIE bit must also be set. If any of these bits are clear, the interrupt is not enabled, though the CMIF bit will still be set if an interrupt condition occurs.\nIf a change in the CMCON  register (C1OUT or C2OUT) should occur when a read operation is being executed (start of the Q2 cycle), then the CMIF (PIR registers) interrupt flag may not get set.",
    "20.6 Comparator Interrupts\nThe user, in the Interrupt Service Routine, can clear the interrupt in the following manner:\na) Any  read  or  write  of  CMCON  will  end  the mismatch condition.\nb) Clear flag bit CMIF.\nA mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared.",
    "20.7 Comparator Operation in Power-Managed Modes\nWhen a comparator is active and the device is placed in  a  power-managed  mode,  the  comparator  remains active  and  the  interrupt  is  functional  if  enabled.  This interrupt will wake-up  the device from a powermanaged  mode  when  enabled.  Each  operational comparator will consume additional current, as shown in  the  comparator  specifications.  To  minimize  power consumption while in a power-managed mode, turn off the comparators (CM<2:0> = 111 ) before entering the power-managed modes. If the device wakes up from a power-managed  mode,  the  contents  of  the  CMCON register are not affected.",
    "20.8 Effects of a Reset\nA device Reset forces the CMCON register to its Reset state, causing the comparator module to be in the Comparator Reset mode (CM<2:0> = 111) .  This  ensures that all potential inputs are analog inputs. Device current  is  minimized  when  digital  inputs  are  present  at Reset  time.  The  comparators  will  be  powered  down during the Reset interval.",
    "20.9 Analog Input Connection Considerations\nA  simplified  circuit  for  an  analog  input  is  shown  in Figure 20-4. Since the analog pins are connected to a digital output, they have reverse biased diodes to VDD and VSS. Therefore, the analog input must be between VSS and VDD. If the input voltage exceeds this range by more than 0.6V, one of the diodes is forward biased and a latch-up condition may occur. A maximum source impedance of 10 k \u03a9 is  recommended for  the  analog sources.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Value on POR = 0000. CMCON, Value on POR = 0111. CMCON, Value on all other Resets = 0000. CMCON, Value on all other Resets = 0111. CVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = GLYPH<151>. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR = 000-. CVRCON, Value on POR = 0000. CVRCON, Value on all other Resets = 000-.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nCVRCON, Value on all other Resets = 0000. INTCON, Bit 7 = GIE/ GIEH. INTCON, Bit 6 = PEIE/ GIEL. INTCON, Bit 5 = TMR0IE. INTCON, Bit 4 = INT0IE. INTCON, Bit 3 = RBIE. INTCON, Bit 2 = TMR0IF. INTCON, Bit 1 = INT0IF. INTCON, Bit 0 = RBIF. INTCON, Value on POR = 0000. INTCON, Value on POR = 0000. INTCON, Value on all other Resets = 0000. INTCON, Value on all other Resets = 0000. PIR2, Bit 7 = OSCFIF. PIR2, Bit 6 = CMIF. PIR2, Bit 5 = GLYPH<151>. PIR2, Bit 4 = EEIF. PIR2, Bit 3 = BCLIF. PIR2, Bit 2 = LVDIF. PIR2, Bit 1 = TMR3IF. PIR2, Bit 0 = CCP2IF. PIR2, Value",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\non POR = 00-0. PIR2, Value on POR = 0000. PIR2, Value on all other Resets = 00-0. PIR2, Value on all other Resets = 0000. PIE2, Bit 7 = OSCFIE. PIE2, Bit 6 = CMIE. PIE2, Bit 5 = GLYPH<151>. PIE2, Bit 4 = EEIE. PIE2, Bit 3 = BCLIE. PIE2, Bit 2 = LVDIE. PIE2, Bit 1 = TMR3IE. PIE2, Bit 0 = CCP2IE. PIE2, Value on POR = 00-0. PIE2, Value on POR = 0000. PIE2, Value on all other Resets = 00-0. PIE2, Value on all other Resets = 0000. IPR2, Bit 7 = OSCFIP. IPR2, Bit 6 = CMIP. IPR2, Bit 5 = GLYPH<151>. IPR2, Bit 4 = EEIP. IPR2, Bit 3 = BCLIP. IPR2, Bit 2 =",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nLVDIP. IPR2, Bit 1 = TMR3IP. IPR2, Bit 0 = CCP2IP. IPR2, Value on POR = 11-1. IPR2, Value on POR = 1111. IPR2, Value on all other Resets = 11-1. IPR2, Value on all other Resets = 1111. PORTA, Bit 7 = RA7 (1). PORTA, Bit 6 = RA6 (1). PORTA, Bit 5 = RA5. PORTA, Bit 4 = RA4. PORTA, Bit 3 = RA3. PORTA, Bit 2 = RA2. PORTA, Bit 1 = RA1. PORTA, Bit 0 = RA0. PORTA, Value on POR = xx0x. PORTA, Value on POR = 0000. PORTA, Value on all other Resets = xx0x. PORTA, Value on all other Resets = 0000. LATA, Bit 7 = LATA7 (1). LATA, Bit 6 = LATA6 (1). LATA, Bit 5 = Data Output Register.",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nLATA, Bit 4 = Data Output Register. LATA, Bit 3 = Data Output Register. LATA, Bit 2 = Data Output Register. LATA, Bit 1 = Data Output Register. LATA, Bit 0 = Data Output Register. LATA, Value on POR = xxxx. LATA, Value on POR = xxxx. LATA, Value on all other Resets = xxxx. LATA, Value on all other Resets = xxxx. TRISA, Bit 7 = TRISA7 (1). TRISA, Bit 6 = TRISA6 (1). TRISA, Bit 5 = Data Direction Register. TRISA, Bit 4 = Data Direction Register. TRISA, Bit 3 = Data Direction Register. TRISA, Bit 2 = Data Direction Register. TRISA, Bit 1 = Data Direction Register. TRISA, Bit 0 = Data Direction Register. TRISA, Value on POR = 1111. TRISA, Value on POR = 1111. TRISA, Value on all other Resets = 1111. TRISA, Value on all other Resets = 1111\nLegend:",
    "TABLE 20-1: REGISTERS ASSOCIATED WITH COMPARATOR MODULE\nx = unknown, u = unchanged, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>.\nShaded cells are unused by the comparator module.\nNote 1: These pins are enabled based on oscillator configuration (see Configuration Register 1H).",
    "21.0 COMPARATOR VOLTAGE REFERENCE MODULE\nThe comparator voltage reference is a 16-tap resistor ladder network that provides a selectable voltage reference. The resistor ladder is segmented to provide two ranges of CVREF values and has a power-down function to conserve power when the reference is not being used. The CVRCON register controls the operation of the  reference  as  shown  in  Register 21-1.  The  block diagram is given in Figure 21-1.\nThe comparator reference supply voltage comes from VDD and VSS.",
    "21.1 Configuring the Comparator Voltage Reference\nThe comparator voltage reference can output 16 distinct voltage levels for each range. The equations used to calculate  the  output  of  the  comparator  voltage  reference are as follows:",
    "EQUATION 21-1:\n<!-- formula-not-decoded -->\n<!-- formula-not-decoded -->\n<!-- formula-not-decoded -->\nThe settling time of the comparator voltage reference must be considered when changing the CVREF output (see  Table 26-2  in Section 26.0  GLYPH<147>Electrical CharacteristicsGLYPH<148> ).",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nCVREN, R/W-0 = CVROE (1). CVREN, R/W-0 = CVRR. CVREN, U-0 = GLYPH<151>. CVREN, R/W-0 = CVR3. CVREN, R/W-0 = CVR2. CVREN, R/W-0 = CVR1. CVREN, R/W-0 = CVR0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7\nCVREN : Comparator Voltage Reference Enable bit\n1 = CVREF circuit powered on\n0 = CVREF circuit powered down\nbit 6\nCVROE : Comparator VREF Output Enable bit (1)\n1 = CVREF voltage level is also output on the RA2/AN2/VREF-/CVREF pin",
    "REGISTER 21-1: CVRCON: COMPARATOR VOLTAGE REFERENCE CONTROL REGISTER\n0 = CVREF voltage is disconnected from the RA2/AN2/VREF-/CVREF pin\nbit 5\nCVRR : Comparator VREF Range Selection bit\n1 = 0.00 VDD to 0.667 VDD, with VDD/24 step size\n0 = 0.25 VDD to 0.75 VDD, with VDD/32 step size\nbit 4\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 3-0\nCVR3:CVR0: Comparator VREF Value Selection 0 \u2264 VR3:VR0 \u2264 15 bits\nWhen CVRR = 1 :\nCVREF = (CVR<3:0>)\n\u2022\nWhen CVRR = 0 :\n$$CVREF = 1/4   (CVRSRC) + (CVR<3:0> + 8) \u2022 \u2022 VDD 32$$\nVDD\n24\nNote 1: CVROE overrides the TRISA<2> bit setting.",
    "PIC18F2220/2320/4220/4320\nFIGURE 21-1: COMPARATOR VOLTAGE REFERENCE BLOCK DIAGRAM",
    "21.4 Effects of a Reset\nThe full range of voltage reference cannot be realized due to the construction of the module. The transistors on the top and bottom of the resistor ladder network (Figure 21-1) keep CVREF from approaching the reference  source  rails.  The  voltage  reference  is  derived from VDD; therefore, the CVREF output changes with fluctuations  in  VDD.  The  tested  absolute  accuracy  of the  voltage  reference  can  be  found  in Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> .",
    "21.3 Operation in Power-Managed Modes\nThe contents of the CVRCON register are not affected by entry to or exit from power-managed modes. To minimize current consumption in power-managed modes, the voltage reference module should be disabled; however, this can cause an interrupt from the comparators so  the  comparator  interrupt  should  also  be  disabled while the CVRCON register is being modified.\nA device Reset disables the voltage reference by clearing  the  CVRCON  register.  This  also  disconnects  the reference  from  the  RA2  pin,  selects  the  high-voltage range  and  selects  the  lowest  voltage  tap  from  the resistor divider.",
    "21.5 Connection Considerations\nThe voltage reference module operates independently of the comparator module. The output of the reference generator  may  be  output  using  the  RA2  pin  if  the CVROE bit is set. Enabling the voltage reference output onto the RA2 pin, with an input signal present, will increase current consumption.\nThe RA2 pin can be used as a simple D/A output with limited drive capability. Due to the limited current drive capability,  an  external  buffer  must  be  used  on  the voltage  reference  output  for  external  connections  to VREF. Figure 21-2 shows an example buffering technique.",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nCVRCON, Bit 7 = CVREN. CVRCON, Bit 6 = CVROE. CVRCON, Bit 5 = CVRR. CVRCON, Bit 4 = GLYPH<151>. CVRCON, Bit 3 = CVR3. CVRCON, Bit 2 = CVR2. CVRCON, Bit 1 = CVR1. CVRCON, Bit 0 = CVR0. CVRCON, Value on POR = 000- 0000. CVRCON, Value on all other Resets = 000- 0000. CMCON, Bit 7 = C2OUT. CMCON, Bit 6 = C1OUT. CMCON, Bit 5 = C2INV. CMCON, Bit 4 = C1INV. CMCON, Bit 3 = CIS. CMCON, Bit 2 = CM2. CMCON, Bit 1 = CM1. CMCON, Bit 0 = CM0. CMCON, Value on POR = 0000 0111. CMCON, Value on all other Resets = 0000 0111. TRISA, Bit 7 = RA7 (1). TRISA, Bit 6 = RA6 (1).",
    "TABLE 21-1: REGISTERS ASSOCIATED WITH COMPARATOR VOLTAGE REFERENCE\nTRISA, Bit 5 = RA5. TRISA, Bit 4 = RA4. TRISA, Bit 3 = RA3. TRISA, Bit 2 = RA2. TRISA, Bit 1 = RA1. TRISA, Bit 0 = RA0. TRISA, Value on POR = 1111 1111. TRISA, Value on all other Resets = 1111 1111\nLegend:\nx = unknown, u = unchanged, - = unimplemented, read as GLYPH<145> 0 GLYPH<146>.\nShaded cells are not used with the comparator voltage reference.\nNote 1: These pins are enabled based on oscillator configuration (see Configuration Register 1H).",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "22.0 LOW-VOLTAGE DETECT\nIn  many  applications,  the  ability  to  determine  if  the device voltage (VDD) is below a specified voltage level is  a  desirable  feature.  A  window  of  operation  for  the application can be created, where the application software can do GLYPH<147>housekeeping  tasksGLYPH<148>  before  the  device voltage  exits  the  valid  operating  range.  This  can  be done using the Low-Voltage Detect (LVD) module.\nThis  module  is  a  software  programmable  circuitry, where  a  device  voltage  trip  point  can  be  specified. When the voltage of the device becomes lower then the specified point, an interrupt flag is set. If the interrupt is enabled, the program execution will branch to the interrupt vector address and the software can then respond to that interrupt source.\nThe Low-Voltage Detect circuitry is completely under software control. This allows the circuitry to be turned off by the software which  minimizes  the current consumption for the device.",
    "22.0 LOW-VOLTAGE DETECT\nFigure 22-1 shows a possible application voltage curve (typically for batteries). Over time, the device voltage decreases. When the device voltage equals voltage VA, the  LVD  logic  generates  an  interrupt.  This  occurs  at time  TA.  The  application  software  then  has  the  time, until the device voltage is no longer in valid operating range, to shut down the system. Voltage point VB is the minimum  valid  operating  voltage  specification.  This occurs at time TB. The difference, TB GLYPH<150> TA, is the total time for shutdown.\nThe  block  diagram  for  the  LVD  module  is  shown  in Figure 22-2.  A  comparator  uses  an  internally  generated  reference  voltage  as  the  set  point.  When  the selected tap output of the device voltage crosses the set point (is lower than), the LVDIF bit is set.",
    "22.0 LOW-VOLTAGE DETECT\nEach  node  in  the  resistor  divider  represents  a  GLYPH<147>trip pointGLYPH<148>  voltage.  The  GLYPH<147>trip  pointGLYPH<148>  voltage  is  the  minimum supply  voltage  level  at  which  the  device  can  operate before the LVD module asserts an interrupt. When the supply  voltage  is  equal  to  the  trip  point,  the  voltage tapped  off  of  the  resistor  array  is  equal  to  the  1.2V internal reference voltage generated by the voltage reference  module.  The  comparator  then  generates  an interrupt  signal  setting  the  LVDIF  bit.  This  voltage  is software programmable to any one of 16 values (see Figure 22-2). The trip point is selected by programming the LVDL3:LVDL0 bits (LVDCON<3:0>).",
    "FIGURE 22-2: LOW-VOLTAGE DETECT (LVD) BLOCK DIAGRAM\nThe LVD module has an additional feature that allows the  user  to  supply  the  sense  voltage  to  the  module from an external source. This mode is enabled when bits LVDL3:LVDL0 are set to GLYPH<145> 1111 GLYPH<146>. In this state, the comparator input is multiplexed from the external input pin,  LVDIN  (Figure 22-3).  This  gives  users  flexibility because it allows them to configure the Low-Voltage Detect  interrupt  to  occur  at  any  voltage  in  the  valid operating range.\nFIGURE 22-3: LOW-VOLTAGE DETECT (LVD) WITH EXTERNAL INPUT BLOCK DIAGRAM",
    "22.1 Control Register\nThe Low-Voltage Detect Control register controls the operation of the Low-Voltage Detect circuitry.",
    "REGISTER 22-1: LVDCON: LOW-VOLTAGE DETECT CONTROL REGISTER\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R-0 = IRVST. GLYPH<151>, R/W-0 = LVDEN. GLYPH<151>, R/W-0 = LVDL3 (1). GLYPH<151>, R/W-1 = LVDL2 (1). GLYPH<151>, R/W-0 = LVDL1 (1). GLYPH<151>, R/W-1 = LVDL0 (1). bit 7, U-0 = bit 7. bit 7, R-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-1 = bit 7. bit 7, R/W-0 = bit 7. bit 7, R/W-1 = bit 0",
    "REGISTER 22-1: LVDCON: LOW-VOLTAGE DETECT CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown",
    "bit 7-6 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 5\nIRVST: Internal Reference Voltage Stable Flag bit\n1 = Indicates that the Low-Voltage Detect logic will generate the interrupt flag at the specified voltage range\n0 = Indicates that the Low-Voltage Detect logic will not generate the interrupt flag at the specified voltage range and the LVD interrupt should not be enabled\nLVDEN: Low-Voltage Detect Power Enable bit\n1 = Enables LVD, powers up LVD circuit\n0 = Disables LVD, powers down LVD circuit\nLVDL3:LVDL0: Low-Voltage Detection Limit bits (1)\n1111 = External analog input is used (input comes from the LVDIN pin)\n1110 = 4.50V-4.78V\n1101 = 4.20V-4.46V\n1100 = 4.00V-4.26V\n1011 = 3.80V-4.04V\n1010 = 3.60V-3.84V\n1001 = 3.50V-3.72V\n1000 = 3.30V-3.52V\n0111 = 3.00V-3.20V",
    "bit 7-6 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\n0110 = 2.80V-2.98V\n0101 = 2.70V-2.86V\n0100 = 2.50V-2.66V\n0011 = 2.40V-2.55V\n0010 = 2.20V-2.34V\n0001 = 2.00V-2.12V\n0000 = Reserved\nNote 1: LVDL3:LVDL0 modes which result in a trip point below the valid operating voltage of the device are not tested.\nbit 4",
    "22.2 Operation\nDepending on the power source for the device voltage, the voltage normally decreases relatively slowly. This means  that  the  LVD  module  does  not  need  to  be constantly operating. To decrease the current requirements, the LVD circuitry only needs to be enabled for short periods where the voltage is checked. After doing the check, the LVD module may be disabled.\nEach time that the LVD module is enabled, the circuitry requires some time to stabilize. After the circuitry has stabilized, all status flags may be cleared. The module will then indicate the proper state of the system.\nThe  following  steps  are  needed  to  set  up  the  LVD module:",
    "22.2 Operation\n1. Write the value to the LVDL3:LVDL0  bits (LVDCON  register)  which  selects  the  desired LVD trip point.\n2. Ensure  that  LVD  interrupts  are  disabled  (the LVDIE bit is cleared or the GIE bit is cleared).\n3. Enable the LVD module (set the LVDEN bit in the LVDCON register).\n4. Wait for the LVD module to stabilize (the IRVST bit to become set).\n5. Clear  the  LVD  interrupt  flag,  which  may  have falsely  become  set,  until  the  LVD  module  has stabilized (clear the LVDIF bit).\n6. Enable the LVD interrupt (set the LVDIE and the GIE bits).\nFigure 22-4  shows  typical  waveforms  that  the  LVD module may be used to detect.",
    "22.3 Operation During Sleep\nThe internal reference voltage of the LVD module may be used by other internal  circuitry (the  Programmable Brown-out Reset). If these circuits are disabled (lower current consumption), the reference voltage circuit requires a time to become stable before a low-voltage condition can be reliably detected. This time is invariant of system clock speed. This start-up time is specified in electrical specification parameter #36. The low-voltage interrupt flag will not be enabled until a stable reference voltage is reached. Refer to the waveform in Figure 22-4.",
    "22.2.2 CURRENT CONSUMPTION\nWhen the module is enabled, the LVD comparator and voltage divider are enabled and will consume static current. The voltage divider can be tapped from multiple places in the resistor array. Total current consumption, when  enabled,  is  specified  in  electrical  specification parameter #D022B.\nWhen enabled, the LVD circuitry continues to operate during  Sleep.  If  the  device  voltage  crosses  the  trip point, the LVDIF bit will be set and the device will wakeup from Sleep. Device execution will continue from the interrupt vector address if interrupts have been globally enabled.",
    "22.4 Effects of a Reset\nA device Reset forces all registers to their Reset state. This forces the LVD module to be turned off.",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "23.0 SPECIAL FEATURES OF THE CPU\nPIC18F2X20/4X20  devices  include  several  features intended to maximize system reliability and minimize cost through elimination of external components. These are:\nGLYPH<149> Oscillator Selection\nGLYPH<149> Resets:\n-Power-on Reset (POR)\n-Power-up Timer (PWRT)\n-Oscillator Start-up Timer (OST)\n-Brown-out Reset (BOR)\nGLYPH<149> Interrupts\nGLYPH<149> Watchdog Timer (WDT)\nGLYPH<149> Fail-Safe Clock Monitor\nGLYPH<149> Two-Speed Start-up\nGLYPH<149> Code Protection\nGLYPH<149> ID Locations\nGLYPH<149> In-Circuit Serial Programming\nThe  oscillator  can  be  configured  for  the  application depending on frequency, power, accuracy and cost. All of  the  options  are  discussed  in  detail  in Section 2.0 GLYPH<147>Oscillator ConfigurationsGLYPH<148> .\nA complete discussion of device Resets and interrupts is available in previous sections of this data sheet.",
    "23.0 SPECIAL FEATURES OF THE CPU\nIn  addition  to  their  Power-up  and  Oscillator  Start-up Timers provided for Resets, PIC18F2X20/4X20 devices have a Watchdog Timer which is either permanently  enabled  via  the  Configuration  bits  or  software controlled (if configured as disabled).\nThe inclusion of an internal RC oscillator also provides the  additional  benefits  of  a  Fail-Safe  Clock  Monitor (FSCM) and Two-Speed Start-up. FSCM provides for background  monitoring  of  the  peripheral  clock  and automatic switchover in the event of its failure.  TwoSpeed Start-up  enables  code  to  be  executed  almost immediately on start-up while the primary clock source completes its start-up delays.\nAll  of  these  features  are  enabled  and  configured  by setting the appropriate Configuration register bits.",
    "23.1 Configuration Bits\nThe Configuration bits  can  be  programmed  (read  as GLYPH<145> 0 GLYPH<146> )  or left unprogrammed (read as GLYPH<145> 1 GLYPH<146>)  to select various device configurations. These bits are mapped starting at program memory location 300000h.\nThe user will note that address 300000h is beyond the user program memory space. In fact, it belongs to the configuration memory space (300000h-3FFFFFh) which  can  only  be  accessed  using  table  reads  and table writes.",
    "23.1 Configuration Bits\nProgramming the Configuration registers is done in a manner similar to programming the Flash memory. The EECON1 register WR bit starts a self-timed write to the Configuration  register.  In  normal  operation  mode,  a TBLWT instruction,  with  the  TBLPTR  pointing  to  the Configuration  register,  sets  up  the  address  and  the data for the Configuration register write. Setting the WR bit starts a long write to the Configuration register. The Configuration registers are written a byte at a time. To write or erase a configuration cell, a TBLWT instruction can write a GLYPH<145> 1 GLYPH<146> or a GLYPH<145> 0 GLYPH<146>   into the cell. For additional details on Flash programming, refer to Section 6.5 GLYPH<147>Writing to Flash Program MemoryGLYPH<148> .",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n300001h, File Name = CONFIG1H. 300001h, Bit 7 = IESO. 300001h, Bit 6 = FSCM. 300001h, Bit 5 = GLYPH<151>. 300001h, Bit 4 = GLYPH<151>. 300001h, Bit 3 = FOSC3. 300001h, Bit 2 = FOSC2. 300001h, Bit 1 = FOSC1. 300001h, Bit 0 = FOSC0. 300001h, Default/ Unprogrammed Value = 11-- 1111. 300001h, Default/ Unprogrammed Value = . 300002h, File Name = CONFIG2L. 300002h, Bit 7 = GLYPH<151>. 300002h, Bit 6 = GLYPH<151>. 300002h, Bit 5 = GLYPH<151>. 300002h, Bit 4 = GLYPH<151>. 300002h, Bit 3 = BORV1. 300002h, Bit 2 = BORV0.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n300002h, Bit 1 = BOR. 300002h, Bit 0 = PWRT. 300002h, Default/ Unprogrammed Value = ---- 1111. 300002h, Default/ Unprogrammed Value = . 300003h, File Name = CONFIG2H. 300003h, Bit 7 = GLYPH<151>. 300003h, Bit 6 = GLYPH<151>. 300003h, Bit 5 = GLYPH<151>. 300003h, Bit 4 = WDTPS3. 300003h, Bit 3 = WDTPS2. 300003h, Bit 2 = WDTPS1. 300003h, Bit 1 = WDTPS0. 300003h, Bit 0 = WDTEN. 300003h, Default/ Unprogrammed Value = ---1 1111. 300003h, Default/ Unprogrammed Value = . 300005h, File Name = CONFIG3H. 300005h, Bit 7 = MCLRE. 300005h,",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\nBit 6 = GLYPH<151>. 300005h, Bit 5 = GLYPH<151>. 300005h, Bit 4 = GLYPH<151>. 300005h, Bit 3 = GLYPH<151>. 300005h, Bit 2 = GLYPH<151>. 300005h, Bit 1 = PBAD. 300005h, Bit 0 = CCP2MX. 300005h, Default/ Unprogrammed Value = 1--- --11. 300005h, Default/ Unprogrammed Value = . 300006h, File Name = CONFIG4L. 300006h, Bit 7 = DEBUG. 300006h, Bit 6 = GLYPH<151>. 300006h, Bit 5 = GLYPH<151>. 300006h, Bit 4 = GLYPH<151>. 300006h, Bit 3 = GLYPH<151>. 300006h, Bit 2 = LVP. 300006h, Bit 1 = GLYPH<151>.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n300006h, Bit 0 = STVR. 300006h, Default/ Unprogrammed Value = 1--- -1-1. 300006h, Default/ Unprogrammed Value = . 300008h, File Name = CONFIG5L. 300008h, Bit 7 = GLYPH<151>. 300008h, Bit 6 = GLYPH<151>. 300008h, Bit 5 = GLYPH<151>. 300008h, Bit 4 = GLYPH<151>. 300008h, Bit 3 = CP3 (2). 300008h, Bit 2 = CP2 (2). 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300008h, Default/ Unprogrammed Value = ---- 1111. 300008h, Default/ Unprogrammed Value = . 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n300009h, Bit 5 = GLYPH<151>. 300009h, Bit 4 = GLYPH<151>. 300009h, Bit 3 = GLYPH<151>. 300009h, Bit 2 = GLYPH<151>. 300009h, Bit 1 = GLYPH<151>. 300009h, Bit 0 = GLYPH<151>. 300009h, Default/ Unprogrammed Value = 11-- ----. 300009h, Default/ Unprogrammed Value = . 30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = GLYPH<151>. 30000Ah, Bit 6 = GLYPH<151>. 30000Ah, Bit 5 = GLYPH<151>. 30000Ah, Bit 4 = GLYPH<151>. 30000Ah, Bit 3 = WRT3 (2). 30000Ah, Bit 2 = WRT2 (2). 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n30000Ah, Default/ Unprogrammed Value = ---- 1111. 30000Ah, Default/ Unprogrammed Value = . 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = GLYPH<151>. 30000Bh, Bit 3 = GLYPH<151>. 30000Bh, Bit 2 = GLYPH<151>. 30000Bh, Bit 1 = GLYPH<151>. 30000Bh, Bit 0 = GLYPH<151>. 30000Bh, Default/ Unprogrammed Value = 111- ----. 30000Bh, Default/ Unprogrammed Value = . 30000Ch, File Name = CONFIG7L. 30000Ch, Bit 7 = GLYPH<151>. 30000Ch, Bit 6 = GLYPH<151>. 30000Ch, Bit 5 = GLYPH<151>. 30000Ch, Bit 4 =",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\nGLYPH<151>. 30000Ch, Bit 3 = EBTR3 (2). 30000Ch, Bit 2 = EBTR2 (2). 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Ch, Default/ Unprogrammed Value = ---- 1111. 30000Ch, Default/ Unprogrammed Value = . 30000Dh, File Name = CONFIG7H. 30000Dh, Bit 7 = GLYPH<151>. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = GLYPH<151>. 30000Dh, Bit 4 = GLYPH<151>. 30000Dh, Bit 3 = GLYPH<151>. 30000Dh, Bit 2 = GLYPH<151>. 30000Dh, Bit 1 = GLYPH<151>. 30000Dh, Bit 0 = GLYPH<151>. 30000Dh, Default/ Unprogrammed Value = -1-- ----. 30000Dh, Default/",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\nUnprogrammed Value = . 3FFFFEh, File Name = DEVID1 (1). 3FFFFEh, Bit 7 = DEV2. 3FFFFEh, Bit 6 = DEV1. 3FFFFEh, Bit 5 = DEV0. 3FFFFEh, Bit 4 = REV4. 3FFFFEh, Bit 3 = REV3. 3FFFFEh, Bit 2 = REV2. 3FFFFEh, Bit 1 = REV1. 3FFFFEh, Bit 0 = REV0. 3FFFFEh, Default/ Unprogrammed Value = xxxx. 3FFFFEh, Default/ Unprogrammed Value = xxxx (1). 3FFFFFh, File Name = DEVID2 (1). 3FFFFFh, Bit 7 = DEV10. 3FFFFFh, Bit 6 = DEV9. 3FFFFFh, Bit 5 = DEV8. 3FFFFFh, Bit 4 = DEV7. 3FFFFFh, Bit 3 = DEV6. 3FFFFFh, Bit 2 = DEV5. 3FFFFFh, Bit 1 = DEV4.",
    "TABLE 23-1: CONFIGURATION BITS AND DEVICE IDS\n3FFFFFh, Bit 0 = DEV3. 3FFFFFh, Default/ Unprogrammed Value = 0000. 3FFFFFh, Default/ Unprogrammed Value = 0101\nLegend:\n- x = unknown, u = unchanged, - = unimplemented, q = value depends on condition.\nShaded cells are unimplemented, read as GLYPH<145> 0 GLYPH<146>.\nNote\n1: See Register 23-12 for DEVID1 values. DEVID registers are read-only and cannot be programmed by the user.\n2: Unimplemented in PIC18FX220 devices; maintain this bit set.",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nIESO, R/P-1 = FSCM. IESO, U-0 = GLYPH<151>. IESO, U-0 = GLYPH<151>. IESO, R/P-1 = FOSC3. IESO, R/P-1 = FOSC2. IESO, R/P-1 = FOSC1. IESO, R/P-1 = FOSC0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0. bit 7 bit 0, R/P-1 = bit 7 bit 0",
    "REGISTER 23-1: CONFIG1H: CONFIGURATION REGISTER 1 HIGH (BYTE ADDRESS 300001h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7 IESO: Internal/External Switchover bit\n1 = Internal/External Switchover mode enabled\n0 = Internal/External Switchover mode disabled\nbit 6\nFCMEN: Fail-Safe Clock Monitor Enable bit\n1 = Fail-Safe Clock Monitor enabled\n0 = Fail-Safe Clock Monitor disabled\nbit 5-4\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 3-0 FOSC3:FOSC0: Oscillator Selection bits (1)\n11xx = External RC oscillator, CLKO function on RA6\n1001 = Internal oscillator block, CLKO function on RA6 and port function on RA7\n1000 = Internal oscillator block, port function on RA6 and port function on RA7\n0111 = External RC oscillator, port function on RA6\n0110 = HS oscillator, PLL enabled (clock frequency = 4 x FOSC1)\n0101 = EC oscillator, port function on RA6\n0100 = EC oscillator, CLKO function on RA6\n0010 = HS oscillator\n0001 = XT oscillator\n0000 = LP oscillator",
    "CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/P-1 = BORV1. GLYPH<151>, R/P-1 = BORV0. GLYPH<151>, R/P-1 = BOR (1). GLYPH<151>, R/P-1 = PWRTEN (1). bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "CONFIG2L: CONFIGURATION REGISTER 2 LOW (BYTE ADDRESS 300002h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7-4 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 3-2 BORV1:BORV0: Brown-out Reset Voltage bits\n11 = VBOR set to 2.0V\n10 = VBOR set to 2.7V\n01 = VBOR set to 4.2V\n00 = VBOR set to 4.5V\nbit 1\nBOR: Brown-out Reset enable bit (1)\n1 = Brown-out Reset enabled\n0 = Brown-out Reset disabled\nbit 0\nPWRT: Power-up Timer enable bit (1)\n1 = PWRT disabled\n0 = PWRT enabled\nNote 1: The Power-up Timer is decoupled from Brown-out Reset, allowing these features to be independently controlled.",
    "REGISTER 23-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/P-1 = WDTPS3. GLYPH<151>, R/P-1 = WDTPS2. GLYPH<151>, R/P-1 = WDTPS1. GLYPH<151>, R/P-1 = WDTPS0. GLYPH<151>, R/P-1 = WDTEN. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "REGISTER 23-3: CONFIG2H: CONFIGURATION REGISTER 2 HIGH (BYTE ADDRESS 300003h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-5 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 4-1 WDPS<3:0>: Watchdog Timer Postscale Select bits\n1111 = 1:32,768\n1110 = 1:16,384\n1101 = 1:8,192\n1100 = 1:4,096\n1011 = 1:2,048\n1010 = 1:1,024\n1001 = 1:512\n1000 = 1:256\n0111 = 1:128\n0110 = 1:64\n0101 = 1:32\n0100 = 1:16\n0011 = 1:8\n0010 = 1:4\n0001 = 1:2\n0000 = 1:1",
    "bit 0 WDTEN: Watchdog Timer Enable bit\n1 = WDT enabled\n0 = WDT disabled (control is placed on the SWDTEN bit)",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nR/P-1, 1 = U-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = U-0. R/P-1, 6 = R/P-1. R/P-1, 7 = R/P-1. MCLRE, 1 = GLYPH<151>. MCLRE, 2 = GLYPH<151>. MCLRE, 3 = GLYPH<151>. MCLRE, 4 = GLYPH<151>. MCLRE, 5 = GLYPH<151>. MCLRE, 6 = PBAD. MCLRE, 7 = CCP2MX. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nMCLRE:\nMCLR Pin Enable bit\n1 = MCLR pin enabled; RE3 input pin disabled\n0 = MCLR disabled; RE3 input is enabled in 40-pin devices only (PIC18F4X20)\nbit 6-2\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 1\nPBAD: PORTB A/D Enable bit (Affects ADCON1 Reset state. ADCON1 controls PORTB<4:0> pin configuration.)\n1 = PORTB<4:0> pins are configured as analog input channels on Reset\n0 = PORTB<4:0> pins are configured as digital I/O on Reset\nbit 0\nCCP2MX: CCP2 MUX bit",
    "REGISTER 23-4: CONFIG3H: CONFIGURATION REGISTER 3 HIGH (BYTE ADDRESS 300005h)\n1 = CCP2 input/output is multiplexed with RC1\n0 = CCP2 input/output is multiplexed with RB3",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nR/P-1, 1 = U-0. R/P-1, 2 = U-0. R/P-1, 3 = U-0. R/P-1, 4 = U-0. R/P-1, 5 = R/P-1. R/P-1, 6 = U-0. R/P-1, 7 = R/P-1. DEBUG, 1 = GLYPH<151>. DEBUG, 2 = GLYPH<151>. DEBUG, 3 = GLYPH<151>. DEBUG, 4 = GLYPH<151>. DEBUG, 5 = LVP. DEBUG, 6 = GLYPH<151>. DEBUG, 7 = STVR. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\n7 bit 0, 6 = bit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-5: CONFIG4L: CONFIGURATION REGISTER 4 LOW (BYTE ADDRESS 300006h)\nbit 7, 1 = DEBUG: Background Debugger Enable bit 1 = Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 0 = Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug. bit 6-3, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. bit 2, 1 = LVP: Single-Supply ICSPGLYPH<153> Enable bit 1 = Single-Supply ICSP enabled 0 = Single-Supply ICSP disabled. bit 1, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. bit 0, 1 = STVR: Stack Full/Underflow Reset Enable bit 1 = Stack full/underflow will cause Reset 0 = Stack full/underflow will not cause Reset",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nNote 1: Unimplemented in PIC18FX220 devices; maintain this bit set.\n\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/C-1 = CP3 (1). GLYPH<151>, R/C-1 = CP2 (1). GLYPH<151>, R/C-1 = CP1. GLYPH<151>, R/C-1 = CP0. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 7. bit 7, R/C-1 = bit 0",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nLegend:, 1 = Legend:. R = Readable bit C = Clearable bit, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-6: CONFIG5L: CONFIGURATION REGISTER 5 LOW (BYTE ADDRESS 300008h)\nbit 7-4, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. bit 3, 1 = CP3: Code Protection bit (1) 1 = Block 3 (001800-001FFFh) not code-protected 0 = Block 3 (001800-001FFFh) code-protected. bit 2, 1 = CP2: Code Protection bit (1) 1 = Block 2 (001000-0017FFh) not code-protected 0 = Block 2 (001000-0017FFh) code-protected. bit 1, 1 = CP1: Code Protection bit 1 = Block 1 (000800-000FFFh) not code-protected 0 = Block 1 (000800-000FFFh) code-protected. bit 0, 1 = CP0: Code Protection bit 1 = Block 0 (000200-0007FFh) not code-protected 0 = Block 0 (000200-0007FFh) code-protected",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nR/C-1, 1 = R/C-1. R/C-1, 2 = U-0. R/C-1, 3 = U-0. R/C-1, 4 = U-0. R/C-1, 5 = U-0. R/C-1, 6 = U-0. R/C-1, 7 = U-0. CPD, 1 = CPB. CPD, 2 = GLYPH<151>. CPD, 3 = GLYPH<151>. CPD, 4 = GLYPH<151>. CPD, 5 = GLYPH<151>. CPD, 6 = GLYPH<151>. CPD, 7 = GLYPH<151>. bit 7 bit 0, 1 = bit 7 bit 0. bit 7 bit 0, 2 = bit 7 bit 0. bit 7 bit 0, 3 = bit 7 bit 0. bit 7 bit 0, 4 = bit 7 bit 0. bit 7 bit 0, 5 = bit 7 bit 0. bit 7 bit 0, 6 =",
    "REGISTER 23-7: CONFIG5H: CONFIGURATION REGISTER 5 HIGH (BYTE ADDRESS 300009h)\nbit 7 bit 0. bit 7 bit 0, 7 = bit 7 bit 0\nLegend:, 1 = Legend:. R = Readable bit, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state\nbit 7\nCPD: Data EEPROM Code Protection bit\n1 = Data EEPROM is not code-protected\n0 = Data EEPROM is code-protected\nbit 6\nCPB: Boot Block Code Protection bit\n1 = Boot block (000000-0001FFh) is not code-protected\n0 = Boot block (000000-0001FFh) is code-protected\nbit 5-0\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nNote 1: Unimplemented in PIC18FX220 devices; maintain this bit set.\n\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/P-1 = WRT3 (1). GLYPH<151>, R/P-1 = WRT2 (1). GLYPH<151>, R/P-1 = WRT1. GLYPH<151>, R/P-1 = WRT0. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-8: CONFIG6L: CONFIGURATION REGISTER 6 LOW (BYTE ADDRESS 30000Ah)\nbit 7-4, 1 = Unimplemented: Read as GLYPH<145> 0 GLYPH<146>. bit 3, 1 = WRT3: Write Protection bit (1) 1 = Block 3 (001800-001FFFh) not write-protected 0 = Block 3 (001800-001FFFh) write-protected. bit 2, 1 = WRT2: Write Protection bit (1) 1 = Block 2 (001000-0017FFh) not write-protected 0 = Block 2 (001000-0017FFh) write-protected. bit 1, 1 = WRT1: Write Protection bit 1 = Block 1 (000800-000FFFh) not write-protected 0 = Block 1 (000800-000FFFh) write-protected. bit 0, 1 = WRT0: Write Protection bit 1 = Block 0 (000200-0007FFh) not write-protected 0 = Block 0 (000200-0007FFh) write-protected",
    "REGISTER 23-9: CONFIG6H: CONFIGURATION REGISTER 6 HIGH (BYTE ADDRESS 30000Bh)\nWRTD, R/P-1 = WRTB. WRTD, R-1 = WRTC (1). WRTD, U-0 = GLYPH<151>. WRTD, U-0 = GLYPH<151>. WRTD, U-0 = GLYPH<151>. WRTD, U-0 = GLYPH<151>. WRTD, U-0 = GLYPH<151>. bit 7, R/P-1 = . bit 7, R-1 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = bit 0\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7\nWRTD: Data EEPROM Write Protection bit\n1 = Data EEPROM is not write-protected\n0 = Data EEPROM is write-protected\nbit 6\nWRTB: Boot Block Write Protection bit\n1 = Boot block (000000-0001FFh) is not write-protected\n0 = Boot block (000000-0001FFh) is write-protected\nbit 5\nWRTC: Configuration Register Write Protection bit (1)\n1 = Configuration registers (300000-3000FFh) are not write-protected\n0 = Configuration registers (300000-3000FFh) are write-protected\nbit 4-0 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nNote 1: This bit is read-only in normal execution mode; it can be written only in Program mode.",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nNote 1: Unimplemented in PIC18FX220 devices; maintain this bit set.\n\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/P-1 = EBTR3 (1). GLYPH<151>, R/P-1 = EBTR2 (1). GLYPH<151>, R/P-1 = EBTR1. GLYPH<151>, R/P-1 = EBTR0. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, U-0 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 7. bit 7, R/P-1 = bit 0",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\nbit 3, Unimplemented: Read as GLYPH<145> 0 GLYPH<146> = EBTR3: Table Read Protection bit (1) 1 = Block 3 (001800-001FFFh) not protected from table reads executed in other blocks 0 = Block 3 (001800-001FFFh) protected from table reads executed in other blocks. bit 2, Unimplemented: Read as GLYPH<145> 0 GLYPH<146> = EBTR2: Table Read Protection bit (1) 1 = Block 2 (001000-0017FFh) not protected from table reads executed in other blocks 0 = Block 2 (001000-0017FFh) protected from table reads executed in other blocks. bit 1, Unimplemented: Read as GLYPH<145> 0 GLYPH<146> = EBTR1: Table Read Protection bit 1 = Block 1 (000800-000FFFh) not protected from table reads executed in other blocks 0 = Block 1",
    "REGISTER 23-10: CONFIG7L: CONFIGURATION REGISTER 7 LOW (BYTE ADDRESS 30000Ch)\n(000800-000FFFh) protected from table reads executed in other blocks. bit 0, Unimplemented: Read as GLYPH<145> 0 GLYPH<146> = EBTR0: Table Read Protection bit 1 = Block 0 (000200-0007FFh) not protected from table reads executed in other blocks 0 = Block 0 (000200-0007FFh) protected from table reads executed in other blocks",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nGLYPH<151>, R/P-1 = EBTRB. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. bit 7, R/P-1 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = . bit 7, U-0 = bit 0",
    "REGISTER 23-11: CONFIG7H: CONFIGURATION REGISTER 7 HIGH (BYTE ADDRESS 30000Dh)\nLegend:, 1 = Legend:. R = Readable bit P = Programmable bit, 1 = U = Unimplemented bit, read as GLYPH<145> 0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 6\nEBTRB: Boot Block Table Read Protection bit\n1 = Boot block (000000-0001FFh) is not protected from table reads executed in other blocks\n0 = Boot block (000000-0001FFh) is protected from table reads executed in other blocks\nbit 5-0\nUnimplemented: Read as GLYPH<145> 0 GLYPH<146>",
    "REGISTER 23-12: DEVID1: DEVICE ID REGISTER 1 FOR PIC18F2220/2320/4220/4320 DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV2, 1 = DEV1. DEV2, 2 = DEV0. DEV2, 3 = REV4. DEV2, 4 = REV3. DEV2, 5 = REV2. DEV2, 6 = REV1. DEV2, 7 = REV0. bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0\nLegend:, 1 = Legend:. R = Read-only bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-5 DEV2:DEV0: Device ID bits\n000 = PIC18F2320\n001 = PIC18F4320\n100 = PIC18F2220\n101 = PIC18F4220",
    "bit 4-0 REV3:REV0: Revision ID bits\nThese bits are used to indicate the device revision.",
    "REGISTER 23-13: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F2220/2320/4220/4320 DEVICES\nR, 1 = R. R, 2 = R. R, 3 = R. R, 4 = R. R, 5 = R. R, 6 = R. R, 7 = R. DEV10 (1), 1 = DEV9 (1). DEV10 (1), 2 = DEV8 (1). DEV10 (1), 3 = DEV7 (1). DEV10 (1), 4 = DEV6 (1). DEV10 (1), 5 = DEV5 (1). DEV10 (1), 6 = DEV4 (1). DEV10 (1), 7 = DEV3 (1). bit 7, 1 = bit 7. bit 7, 2 = bit 7. bit 7, 3 = bit 7. bit 7, 4 = bit 7. bit 7, 5 = bit 7. bit 7, 6 = bit 7. bit 7, 7 = bit 0",
    "REGISTER 23-13: DEVID2: DEVICE ID REGISTER 2 FOR PIC18F2220/2320/4220/4320 DEVICES\nLegend:, 1 = Legend:. R = Read-only bit P = Programmable, 1 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value when device is unprogrammed, 1 = u = Unchanged from programmed state",
    "bit 7-0 DEV10:DEV3: Device ID bits\nThese bits are used with the DEV2:DEV0 bits in the Device ID Register 1 to identify the part number.\n0000 0101 = PIC18F2220/2320/4220/4320 devices\nNote 1: These values for DEV10:DEV3 may be shared with other devices. The specific device is always identified by using the entire DEV10:DEV0 bit sequence.",
    "23.2 Watchdog Timer (WDT)\nFor PIC18F2X20/4X20 devices, the WDT is driven by the  INTRC  source.  When  the  WDT  is  enabled,  the clock source is also enabled. The nominal WDT period is  4 ms  and  has  the  same  stability  as  the  INTRC oscillator.\nThe 4 ms period of the WDT is multiplied by a 16-bit postscaler. Any  output  of  the  WDT  postscaler  is selected by a multiplexer, controlled by bits in Configuration Register 2H. Available periods range from 4 ms to  131.072 seconds  (2.18  minutes).  The  WDT  and postscaler are cleared when any of the following events occur:  execute  a SLEEP or CLRWDT instruction,  the IRCF  bits  (OSCCON<6:4>)  are  changed  or  a  clock failure has occurred.\nAdjustments to the internal oscillator clock period using the  OSCTUNE  register  also  affect  the  period  of  the WDT by the same factor. For example, if the INTRC period  is  increased  by  3%,  then  the  WDT  period  is increased by 3%.",
    "FIGURE 23-1: WDT BLOCK DIAGRAM\nNote 1: The CLRWDT and SLEEP instructions clear  the  WDT  and  postscaler  counts when executed.\n2: Changing  the  setting  of  the  IRCF  bits (OSCCON<6:4>  clears  the  WDT  and postscaler counts.\n3: When a CLRWDT instruction is executed, the postscaler count will be cleared.",
    "23.2.1 CONTROL REGISTER\nRegister 23-14 shows the WDTCON register. This is a readable and writable register which contains a control bit  that  allows  software  to  override  the  WDT  enable Configuration bit, but only if the Configuration bit has disabled the WDT.",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nGLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, U-0 = GLYPH<151>. GLYPH<151>, R/W-0 = SWDTEN (1). bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, U-0 = bit 7 bit 0. bit 7 bit 0, R/W-0 = bit 7 bit 0",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nLegend:, 1 = Legend:. Legend:, 2 = Legend:. Legend:, 3 = Legend:. R = Readable bit, 1 = W=Writable bit. R = Readable bit, 2 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. R = Readable bit, 3 = U = Unimplemented bit, read as GLYPH<145>0GLYPH<146>. -n = Value at POR, 1 = GLYPH<145>1GLYPH<146> = Bit is set. -n = Value at POR, 2 = GLYPH<145> 0GLYPH<146> = Bit is cleared. -n = Value at POR, 3 = x = Bit is unknown\nbit 7-1 Unimplemented: Read as GLYPH<145> 0 GLYPH<146>\nbit 0\nSWDTEN: Software Controlled Watchdog Timer Enable bit (1)\n1 = Watchdog Timer is on\n0 = Watchdog Timer is off",
    "REGISTER 23-14: WDTCON: WATCHDOG TIMER CONTROL REGISTER\nNote 1: This bit has no effect if the Configuration bit, WDTEN (CONFIG2H<0>), is enabled.",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nCONFIG2H, Bit 7 = GLYPH<151>. CONFIG2H, Bit 6 = GLYPH<151>. CONFIG2H, Bit 5 = GLYPH<151>. CONFIG2H, Bit 4 = WDTPS3. CONFIG2H, Bit 3 = WDTPS2. CONFIG2H, Bit 2 = WDTPS2. CONFIG2H, Bit 1 = WDTPS0. CONFIG2H, Bit 0 = WDTEN. RCON, Bit 7 = IPEN. RCON, Bit 6 = GLYPH<151>. RCON, Bit 5 = GLYPH<151>. RCON, Bit 4 = RI. RCON, Bit 3 = TO. RCON, Bit 2 = PD. RCON, Bit 1 = POR. RCON, Bit 0 = BOR. WDTCON, Bit 7 = GLYPH<151>. WDTCON, Bit 6 = GLYPH<151>. WDTCON, Bit 5 = GLYPH<151>. WDTCON, Bit 4 =",
    "TABLE 23-2: SUMMARY OF WATCHDOG TIMER REGISTERS\nGLYPH<151>. WDTCON, Bit 3 = GLYPH<151>. WDTCON, Bit 2 = GLYPH<151>. WDTCON, Bit 1 = GLYPH<151>. WDTCON, Bit 0 = SWDTEN\nLegend: Shaded cells are not used by the Watchdog Timer.",
    "23.3 Two-Speed Start-up\nThe Two-Speed Start-up feature helps to minimize the latency period from oscillator start-up to code execution by allowing the microcontroller to use the INTRC oscillator as a clock source until the primary clock source is available.  It  is  enabled  by  setting  the  IESO  bit  in Configuration Register 1H (CONFIG1H<7>).\nTwo-Speed Start-up is available only if the primary oscillator  mode  is  LP,  XT,  HS  or  HSPLL  (Crystal-Based modes). Other sources do not require a OST start-up delay; for these, Two-Speed Start-up is disabled.\nWhen enabled, Resets and wake-ups from Sleep mode cause the device to configure itself to run from the internal oscillator block as the clock source, following the time-out of the Power-up Timer after a POR Reset is enabled. This allows almost immediate code execution while the primary oscillator starts and the OST is running. Once the OST times out, the device automatically switches to PRI_RUN mode.",
    "23.3 Two-Speed Start-up\nBecause  the  OSCCON  register  is  cleared  on  Reset events, the INTOSC (or postscaler) clock source is not initially available after a Reset event; the INTRC clock is used directly at its base frequency. To use a higher clock  speed  on  wake-up,  the  INTOSC  or  postscaler clock sources can be selected to provide a higher clock speed by setting bits IFRC2:IFRC0 immediately after\nReset.  For  wake-ups  from  Sleep,  the  INTOSC  or postscaler  clock  sources  can  be  selected  by  setting IFRC2:IFRC0 prior to entering Sleep mode.\nIn all other power-managed modes, Two-Speed Start-up is not used. The device will be clocked by the currently selected  clock  source  until  the  primary  clock  source becomes  available.  The  setting  of  the  IESO  bit  is ignored.",
    "23.3.1 SPECIAL CONSIDERATIONS FOR USING TWO-SPEED START-UP\nWhile using the INTRC oscillator in Two-Speed Start-up, the device still obeys the normal command sequences for  entering  power-managed  modes,  including  serial SLEEP instructions  (refer  to Section 3.1.3  GLYPH<147>Multiple Sleep CommandsGLYPH<148> ). In practice, this means that user code can change the SCS1:SCS0 bit settings and issue SLEEP commands before the OST times out. This would allow an application to briefly wake-up, perform routine GLYPH<147>housekeepingGLYPH<148>  tasks  and  return  to  Sleep  before  the device starts to operate from the primary oscillator.\nUser code can also check if the primary clock source is currently providing the system clocking by checking the status of the OSTS bit (OSCCON<3>). If the bit is set, the  primary  oscillator  is  providing  the  system  clock. Otherwise, the internal oscillator block is providing the clock during wake-up from Reset or Sleep mode.",
    "FIGURE 23-2: TIMING TRANSITION FOR TWO-SPEED START-UP (INTOSC TO HSPLL)\nNote 1: TOST = 1024 TOSC; TPLL = 2 ms (approx). These intervals are not shown to scale.",
    "23.4 Fail-Safe Clock Monitor\nThe Fail-Safe Clock Monitor (FSCM) allows the microcontroller  to  continue  operation,  in  the  event  of  an external  oscillator  failure,  by  automatically  switching the  system  clock  to  the  internal  oscillator  block.  The FSCM  function  is  enabled  by  setting  the  Fail-Safe Clock Monitor Enable bit, FCMEN (CONFIG1H<6>).\nWhen FSCM is enabled, the INTRC oscillator runs at all times to monitor clocks to peripherals and provide an instant backup clock in the event of a clock failure. Clock  monitoring  (shown  in  Figure 23-3)  is  accomplished by creating a sample clock signal, which is the INTRC output divided by 64. This allows ample time between FSCM sample clocks for a peripheral clock edge  to  occur.  The  peripheral  system  clock  and  the sample clock are presented as inputs to the Clock Monitor latch (CM). The CM is set on the falling edge of the system clock source but cleared on the rising edge of the sample clock.",
    "FIGURE 23-3: FSCM BLOCK DIAGRAM\nClock failure is tested on the falling edge of the sample clock. If a sample clock falling edge occurs while CM is still set, a clock failure has been detected (Figure 23-4). This causes the following:\nGLYPH<149> The FSCM generates an oscillator fail interrupt by setting bit, OSCFIF (PIR2<7>)\nGLYPH<149> The system clock source is switched to the internal oscillator block (OSCCON is not updated to show the current clock source GLYPH<150> this is the fail-safe condition)\nGLYPH<149> The WDT is reset\nSince the postscaler frequency from the internal oscillator  block  may  not  be  sufficiently  stable,  it  may  be desirable  to  select  another  clock  configuration  and enter an alternate power-managed mode (see Section 23.3.1  GLYPH<147>Special  Considerations  for  Using Two-Speed  Start-upGLYPH<148> and Section 3.1.3  GLYPH<147>Multiple Sleep  CommandsGLYPH<148> for  more  details).  This  can  be done  to  attempt  a  partial  recovery  or execute  a controlled shutdown.",
    "FIGURE 23-3: FSCM BLOCK DIAGRAM\nTo use a higher clock speed on wake-up, the INTOSC or postscaler clock sources can be selected to provide a  higher  clock  speed  by  setting  bits  IFRC2:IFRC0 immediately after Reset. For wake-ups from Sleep, the INTOSC or postscaler clock sources can be selected by setting IFRC2:IFRC0 prior to entering Sleep mode.\nAdjustments to the internal  oscillator  block  using  the OSCTUNE register also affect the period of the FSCM by the same factor. This can usually be neglected, as the clock frequency being monitored is generally much higher than the sample clock frequency.\nThe FSCM will detect failures of the primary or secondary clock sources only. If  the internal  oscillator  block fails, no failure would be detected, nor would any action be possible.",
    "23.4.1 FSCM AND THE WATCHDOG TIMER\nBoth  the  FSCM  and  the  WDT  are  clocked  by  the INTRC oscillator. Since the WDT operates with a separate divider and counter, disabling the WDT has no effect on the operation of the INTRC oscillator when the FSCM is enabled.\nAs already noted, the clock source is switched to the INTOSC  clock  when  a  clock  failure is detected. Depending on the frequency selected by the IRCF2:IRCF0 bits, this may mean a substantial change in the speed of code execution. If the WDT is enabled with a small prescale value, a decrease in clock speed allows  a  WDT  time-out  to  occur  and  a  subsequent device  Reset.  For  this  reason,  fail-safe  clock  events also reset the WDT and postscaler, allowing it to start timing from when execution speed was changed and decreasing the likelihood of an erroneous time-out.",
    "23.4.2 EXITING FAIL-SAFE OPERATION\nThe fail-safe  condition  is  terminated  by  either  a  device Reset or by entering a power-managed mode. On Reset, the controller starts the primary clock source specified in Configuration  Register  1H  (with  any  required  start-up delays that are required for the oscillator mode, such as OST or PLL timer). The INTOSC multiplexer provides the system  clock  until  the  primary  clock  source  becomes ready (similar to a Two-speed Start-up). The clock system source is then switched to the primary clock (indicated by the OSTS bit in the OSCCON register becoming set). The Fail-Safe  Clock  Monitor  then  resumes  monitoring  the peripheral clock.\nThe primary clock source may never become ready during  start-up.  In  this  case,  operation  is  clocked  by  the INTOSC multiplexer. The OSCCON register will remain in its Reset state until a power-managed mode is entered.\nEntering  a power-managed  mode  by  loading  the OSCCON register and executing a SLEEP instruction will  clear  the  fail-safe  condition.  When  the  fail-safe condition  is  cleared,  the  clock  monitor  will  resume monitoring the peripheral clock.",
    "23.4.4 POR OR WAKE FROM SLEEP\nAs previously mentioned, entering a power-managed mode  clears  the  fail-safe  condition.  By  entering  a power-managed  mode,  the  clock  multiplexer  selects the  clock  source  selected  by  the  OSCCON  register. Fail-safe monitoring of the power-managed  clock source resumes in the power-managed mode.\nIf  an  oscillator  failure  occurs  during  power-managed operation, the subsequent events depend on whether or  not  the  oscillator  failure  interrupt  is  enabled.  If enabled (OSCFIF = 1 ), code execution will be clocked by  the  INTOSC  multiplexer.  An  automatic  transition back to the failed clock source will not occur.\nIf  the interrupt is disabled, the device will not exit the power-managed mode on oscillator failure. Instead, the device will continue to operate as before but clocked by the  INTOSC  multiplexer.  While  in  Idle  mode,  subsequent interrupts will cause the CPU to begin executing instructions while being clocked by the INTOSC multiplexer. The device will not transition to a different clock source until the fail-safe condition is cleared.",
    "23.4.4 POR OR WAKE FROM SLEEP\nThe FSCM is designed to detect oscillator failure at any point  after  the  device  has  exited  Power-on  Reset (POR) or low-power Sleep mode. When the primary system clock is EC, RC or INTRC modes, monitoring can begin immediately following these events.\nFor  oscillator  modes  involving  a  crystal  or  resonator (HS, HSPLL, LP or XT), the situation is somewhat different. Since the oscillator may require a start-up time considerably longer than the FCSM sample clock time, a false clock failure may be detected. To prevent this, the internal oscillator block is automatically configured as  the  system  clock  and  functions  until  the  primary clock  is  stable  (the  OST  and  PLL  timers  have  timed out).  This  is  identical  to  Two-Speed  Start-up  mode. Once the primary clock is stable, the INTRC returns to its role as the FSCM source.",
    "Note:\nThe same logic that prevents false oscillator failure interrupts on POR or wake from Sleep will also prevent the detection of the oscillatorGLYPH<146>s  failure  to  start  at  all  following these  events.  This  can  be  avoided  by monitoring the OSTS bit and using a timing routine to determine if the oscillator is taking  too  long  to  start. Even  so,  no oscillator failure interrupt will be flagged.\nAs noted in Section 23.3.1 GLYPH<147>Special Considerations for Using Two-Speed Start-upGLYPH<148> , it is also possible to select another clock configuration and enter an alternate power-managed mode while waiting for the primary system clock to become stable. When the new powered managed mode is selected, the primary clock is disabled.",
    "23.5 Program Verification and Code Protection\nEach of the five blocks has three code protection bits associated with them. They are:\nThe  overall  structure  of  the  code  protection  on  the PIC18  Flash  devices  differs  significantly  from  other PIC fi devices.\nGLYPH<149> Code-Protect bit (CPn)\nGLYPH<149> Write-Protect bit (WRTn)\nGLYPH<149> External Block Table Read bit (EBTRn)\nThe user program memory is divided into five blocks. One of these is a boot block of 512 bytes. The remainder of the memory is divided into four blocks on binary boundaries.\nFigure 23-5 shows the program memory organization for 4 and 8-Kbyte devices and the specific code protection bit associated with each block. The actual locations of the bits are summarized in Table 23-3.",
    "FIGURE 23-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F2X20/4X20\nBoot Block, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) = Boot Block. Boot Block, Address Range = 000000h 0001FFh. Boot Block, Block Code Protection.Controlled By: = CPB, WRTB, EBTRB. Block 0, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) = Block 0. Block 0, Address Range = 000200h 0007FFh. Block 0, Block Code Protection.Controlled By: = CP0, WRT0, EBTR0. Block 1, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) = Block 1. Block 1, Address Range = 000800h 000FFFh. Block 1, Block Code Protection.Controlled By: = CP1, WRT1, EBTR1. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) = Block 2.",
    "FIGURE 23-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F2X20/4X20\nUnimplemented Read GLYPH<145> 0 GLYPH<146> s, Address Range = 001000h 0017FFh. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, Block Code Protection.Controlled By: = CP2, WRT2, EBTR2. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) = Block 3. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, Address Range = 001800h 001FFFh. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, Block Code Protection.Controlled By: = CP3, WRT3, EBTR3. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, MEMORY SIZE/DEVICE.8 Kbytes (PIC18F2320/4320) =",
    "FIGURE 23-5: CODE-PROTECTED PROGRAM MEMORY FOR PIC18F2X20/4X20\nUnimplemented Read GLYPH<145> 0 GLYPH<146> s. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, Address Range = (Unimplemented Memory. Unimplemented Read GLYPH<145> 0 GLYPH<146> s, Block Code Protection.Controlled By: = (Unimplemented Memory",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n300008h, File Name = CONFIG5L. 300008h, Bit 7 = GLYPH<151>. 300008h, Bit 6 = GLYPH<151>. 300008h, Bit 5 = GLYPH<151>. 300008h, Bit 4 = GLYPH<151>. 300008h, Bit 3 = CP3. 300008h, Bit 2 = CP2. 300008h, Bit 1 = CP1. 300008h, Bit 0 = CP0. 300009h, File Name = CONFIG5H. 300009h, Bit 7 = CPD. 300009h, Bit 6 = CPB. 300009h, Bit 5 = GLYPH<151>. 300009h, Bit 4 = GLYPH<151>. 300009h, Bit 3 = GLYPH<151>. 300009h, Bit 2 = GLYPH<151>. 300009h, Bit 1 = GLYPH<151>. 300009h, Bit 0 = GLYPH<151>.",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n30000Ah, File Name = CONFIG6L. 30000Ah, Bit 7 = GLYPH<151>. 30000Ah, Bit 6 = GLYPH<151>. 30000Ah, Bit 5 = GLYPH<151>. 30000Ah, Bit 4 = GLYPH<151>. 30000Ah, Bit 3 = WRT3. 30000Ah, Bit 2 = WRT2. 30000Ah, Bit 1 = WRT1. 30000Ah, Bit 0 = WRT0. 30000Bh, File Name = CONFIG6H. 30000Bh, Bit 7 = WRTD. 30000Bh, Bit 6 = WRTB. 30000Bh, Bit 5 = WRTC. 30000Bh, Bit 4 = GLYPH<151>. 30000Bh, Bit 3 = GLYPH<151>. 30000Bh, Bit 2 = GLYPH<151>. 30000Bh, Bit 1 = GLYPH<151>. 30000Bh, Bit 0 = GLYPH<151>. 30000Ch, File Name = CONFIG7L. 30000Ch, Bit",
    "TABLE 23-3: SUMMARY OF CODE PROTECTION REGISTERS\n7 = GLYPH<151>. 30000Ch, Bit 6 = GLYPH<151>. 30000Ch, Bit 5 = GLYPH<151>. 30000Ch, Bit 4 = GLYPH<151>. 30000Ch, Bit 3 = EBTR3. 30000Ch, Bit 2 = EBTR2. 30000Ch, Bit 1 = EBTR1. 30000Ch, Bit 0 = EBTR0. 30000Dh, File Name = CONFIG7H. 30000Dh, Bit 7 = GLYPH<151>. 30000Dh, Bit 6 = EBTRB. 30000Dh, Bit 5 = GLYPH<151>. 30000Dh, Bit 4 = GLYPH<151>. 30000Dh, Bit 3 = GLYPH<151>. 30000Dh, Bit 2 = GLYPH<151>. 30000Dh, Bit 1 = GLYPH<151>. 30000Dh, Bit 0 = GLYPH<151>\nLegend: Shaded cells are unimplemented.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nThe program memory may be read to or written from any  location  using  the  table  read  and  table  write instructions.  The  Device  ID  may  be  read  with  table reads.  The  Configuration  registers  may  be  read  and written with the table read and table write instructions.\nA table read instruction that executes from a location outside  of  that  block  is  not  allowed  to  read  and  will result in reading GLYPH<145> 0 GLYPH<146> s. Figures 23-6 through 23-8 illustrate table write and table read protection.\nNote:\nIn normal execution mode, the CPx bits have no direct effect.  CPx  bits  inhibit  external  reads  and  writes.  A block  of  user  memory  may  be  protected  from  table writes if the WRTx Configuration bit is GLYPH<145> 0 GLYPH<146>.  The EBTRx bits  control  table  reads.  For  a  block  of  user  memory with the EBTRx bit set to GLYPH<145> 0 GLYPH<146>, a table read instruction that executes from within that block is allowed to read.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nCode protection bits may only be written to a GLYPH<145> 0 GLYPH<146> from a GLYPH<145> 1 GLYPH<146> state. It is not possible to write a GLYPH<145> 1 GLYPH<146> to a bit in the GLYPH<145> 0 GLYPH<146> state. Code protection bits are only set to GLYPH<145> 1 GLYPH<146> by a full chip erase or block erase function. The full chip erase and block erase functions can only be initiated via ICSP  or an external programmer.",
    "23.5.1 PROGRAM MEMORY CODE PROTECTION\nFIGURE 23-6: TABLE WRITE (WRTx) DISALLOWED\n\nTBLPTR = 0002FFh PC = 0007FEh, Program Memory = 0007FFh TBLWT *. TBLPTR = 0002FFh PC = 0007FEh, Configuration Bit Settings = WRT0, EBTR0 = 01. PC = 0017FEh, Program Memory = 000FFFh 001000h TBLWT *. PC = 0017FEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11. Results: All table writes disabled to Blockn whenever, Program Memory = 0017FFh 001800h 001FFFh. Results: All table writes disabled to Blockn whenever, Configuration Bit Settings = WRT3, EBTR3 = 11. WRTx = 0 ., Program Memory = WRTx = 0 .. WRTx = 0 ., Configuration Bit Settings = WRTx = 0 .",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRx) DISALLOWED\nTBLPTR = 0002FFh, Program Memory = . TBLPTR = 0002FFh, Program Memory = 000000h 0001FFh 000200h. TBLPTR = 0002FFh, Configuration Bit Settings = WRTB, EBTRB = 11. PC = 000FFEh, Program Memory = TBLRD *. PC = 000FFEh, Program Memory = 0007FFh 000800h 000FFFh 001000h 0017FFh 001800h. PC = 000FFEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11 WRT3, EBTR3 = 11. Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of GLYPH<145> 0 GLYPH<146>., Program Memory = . Results: All table reads from external blocks to Blockn are disabled whenever TABLAT register returns a value of GLYPH<145> 0 GLYPH<146>., Program Memory = 001FFFh. Results: All table",
    "FIGURE 23-7: EXTERNAL BLOCK TABLE READ (EBTRx) DISALLOWED\nreads from external blocks to Blockn are disabled whenever TABLAT register returns a value of GLYPH<145> 0 GLYPH<146>., Configuration Bit Settings = EBTRx = 0 .",
    "FIGURE 23-8: EXTERNAL BLOCK TABLE READ (EBTRx) ALLOWED\nTBLPTR = 0002FFh, Program Memory = . TBLPTR = 0002FFh, Configuration Bit Settings = WRT0, EBTR0 = 10. PC = 0007FEh, Program Memory = 0007FFh 000800h 000FFFh 001000h 0017FFh 001800h TBLRD *. PC = 0007FEh, Configuration Bit Settings = WRT1, EBTR1 = 11 WRT2, EBTR2 = 11 WRT3, EBTR3 = 11. Results: Table reads permitted within Blockn, even when EBTRBx = 0 . TABLAT register returns the value of the data at the location TBLPTR., Program Memory = Results: Table reads permitted within Blockn, even when EBTRBx = 0 . TABLAT register returns the value of the data at the location TBLPTR.. Results: Table reads permitted within Blockn, even when EBTRBx = 0 . TABLAT register returns the value of the data at the location TBLPTR., Configuration Bit Settings = Results: Table reads permitted within Blockn, even",
    "FIGURE 23-8: EXTERNAL BLOCK TABLE READ (EBTRx) ALLOWED\nwhen EBTRBx = 0 . TABLAT register returns the value of the data at the location TBLPTR.",
    "23.5.2 DATA EEPROM CODE PROTECTION\nThe entire  data  EEPROM  is  protected  from  external reads and writes by two bits: CPD and WRTD. CPD inhibits  external  reads  and  writes  of  data  EEPROM. WRTD inhibits external writes to data EEPROM. The CPU can continue  to  read  and  write  data  EEPROM regardless of the protection bit settings.",
    "23.5.3 CONFIGURATION REGISTER PROTECTION\nThe  Configuration  registers  can  be  write-protected. The WRTC bit controls protection of the Configuration registers. In normal execution mode, the WRTC bit is readable only. WRTC can only be written via ICSP or an external programmer.",
    "23.6 ID Locations\nEight memory locations (200000h-200007h) are designated as ID locations, where the user can store checksum  or  other  code  identification numbers.  These locations are both readable and writable during normal execution through the TBLRD and TBLWT instructions, or during program/verify. The ID locations can be read when the device is code-protected.",
    "23.7 In-Circuit Serial Programming\nPIC18F2X20/4X20  microcontrollers  can  be  serially programmed while in the end application circuit. This is simply done with two lines for clock and data and three other  lines  for  power,  ground  and  the  programming voltage. This allows customers to manufacture boards with  unprogrammed  devices  and  then  program  the microcontroller just before shipping the product. This also  allows  the  most  recent  firmware  or  a  custom firmware to be programmed (see Table 23-5).",
    "23.8 In-Circuit Debugger\nWhen the DEBUG  bit in Configuration register, CONFIG4L,  is  programmed  to  a  GLYPH<145> 0 GLYPH<146> , the  In-Circuit Debugger functionality is enabled. This function allows simple debugging functions when used with MPLAB fi IDE. When the microcontroller has this feature enabled, some resources are not available for general use. Table 23-4 shows which resources are required by the background debugger.",
    "TABLE 23-4: DEBUGGER RESOURCES\nI/O pins:, 1 = RB6, RB7. Stack:, 1 = 2 levels. Program Memory:, 1 = 512 bytes. Data Memory:, 1 = 10 bytes\nTo use the In-Circuit Debugger function of the microcontroller, the design must implement In-Circuit Serial Programming  connections  to  MCLR/VPP,  VDD,  VSS, RB7  and  RB6.  This  will  interface  to  the  In-Circuit Debugger module available from Microchip or one of the third party development tool companies.",
    "23.9 Low-Voltage ICSP Programming\nThe LVP bit in Configuration Register 4L (CONFIG4L<2>) enables Low-Voltage ICSP Programming (LVP). When LVP is enabled, the microcontroller can  be  programmed  without  requiring  high  voltage being applied to the MCLR/VPP pin, but the RB5/PGM pin is then dedicated to controlling Program mode entry and is not available as a general purpose I/O pin.\nLVP is enabled in erased devices.\nWhile programming using LVP, VDD is applied to the MCLR/VPP pin as in normal execution mode. To enter Programming mode, VDD is applied to the PGM pin.\nNote 1: High-voltage programming is always available,  regardless  of  the  state  of  the LVP bit or the PGM pin, by applying VIHH to the MCLR pin.\n2: When Low-Voltage Programming is enabled,  the  RB5  pin  can  no  longer  be used as a general purpose I/O pin.\n3: When LVP is enabled, externally pull the PGM pin to VSS to allow normal program execution.",
    "23.9 Low-Voltage ICSP Programming\nIf  Low-Voltage  ICSP  Programming  mode  will  not  be used,  the  LVP  bit  can  be  cleared  and  RB5/PGM becomes available as the digital I/O pin, RB5. The LVP bit  may  be  set  or  cleared  only  when  using  standard high-voltage programming (VIHH applied to the MCLR/ VPP pin). Once LVP has been disabled, only the standard high-voltage programming is available and must be used to program the device.\nMemory that is not code-protected can be erased using either a block erase, or erased row by row, then written at any specified VDD. If code-protected memory is to be erased, a block erase is required. If a block erase is to be performed when using Low-Voltage Programming, the device must be supplied with VDD   of 4.5V to 5.5V.",
    "TABLE 23-5: ICSPGLYPH<153>/ICD CONNECTIONS\nPGD, Pin = RB7. PGD, Notes = May require isolation from application circuits. PGC, Pin = RB6. PGC, Notes = May require isolation from application circuits. MCLR, Pin = MCLR. MCLR, Notes = May require isolation from application circuits. VDD, Pin = VDD. VDD, Notes = May require isolation from application circuits. VSS, Pin = VSS. VSS, Notes = May require isolation from application circuits. PGM, Pin = RB5. PGM, Notes = Pull RB5 low if LVP is enabled",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "24.0 INSTRUCTION SET SUMMARY\nThe control instructions may use some of the following operands:\nThe PIC18 instruction set adds many enhancements to the previous PIC MCU instruction sets, while maintaining an easy migration from these PIC MCU instruction sets.\nMost instructions are a single program memory word (16 bits) but there are three instructions that require two program memory locations.\nEach single-word instruction  is  a 16-bit word  divided into an opcode, which specifies the instruction type and one or more operands, which further specify the operation of the instruction.\nThe instruction set is highly orthogonal and is grouped into four basic categories:\nGLYPH<149> Byte-oriented operations\nGLYPH<149> Bit-oriented operations\nGLYPH<149> Literal operations\nGLYPH<149> Control operations\nThe PIC18 instruction set summary in Table 24-2 lists byte-oriented , bit-oriented , literal and control operations. Table 24-1 shows the opcode field descriptions.\nMost byte-oriented instructions have three operands:",
    "24.0 INSTRUCTION SET SUMMARY\n1. The file register (specified by GLYPH<145>fGLYPH<146>)\n2. The destination of the result (specified by GLYPH<145>dGLYPH<146>)\n3. The accessed memory (specified by GLYPH<145>aGLYPH<146>)\nThe  file  register  designator  GLYPH<145>fGLYPH<146> specifies  which  file register is to be used by the instruction.\nThe  destination  designator  GLYPH<145>dGLYPH<146> specifies  where  the result of the operation is to be placed. If GLYPH<145>dGLYPH<146> is zero, the result is placed in the WREG register. If GLYPH<145>dGLYPH<146> is one, the result  is  placed  in  the  file  register  specified  in  the instruction.\nAll bit-oriented instructions have three operands:",
    "24.0 INSTRUCTION SET SUMMARY\n1. The file register (specified by GLYPH<145>fGLYPH<146>)\n2. The bit in the file register (specified by GLYPH<145>bGLYPH<146>)\n3. The accessed memory (specified by GLYPH<145>aGLYPH<146>)\nThe bit field designator GLYPH<145>bGLYPH<146> selects the number of the bit affected by the operation, while the file register designator GLYPH<145>fGLYPH<146> represents the number of the file in which the bit is located.\nThe literal instructions may use some of the following operands:",
    "24.0 INSTRUCTION SET SUMMARY\nGLYPH<149> A literal value to be loaded into a file register (specified by GLYPH<145>kGLYPH<146>)\nGLYPH<149> The desired FSR register to load the literal value into (specified by GLYPH<145>fGLYPH<146>)\nGLYPH<149> No operand required (specified by GLYPH<145>GLYPH<151>GLYPH<146>)\nGLYPH<149> A program memory address (specified by GLYPH<145>nGLYPH<146>)\nGLYPH<149> The mode of the CALL or RETURN instructions (specified by GLYPH<145>sGLYPH<146>)\nGLYPH<149> The mode of the table read and table write instructions (specified by GLYPH<145>mGLYPH<146>)\nGLYPH<149> No operand required (specified by GLYPH<145>GLYPH<151>GLYPH<146>)",
    "24.0 INSTRUCTION SET SUMMARY\nAll instructions are a single word except for three double  word  instructions.  These  three  instructions  were made double word instructions so that all the required information is available in these 32 bits. In the second word,  the  4  MSbs  are  GLYPH<145> 1 GLYPH<146> s.  If  this  second  word  is executed as an instruction (by itself), it will execute as a NOP .\nAll  single-word  instructions  are  executed  in  a  single instruction cycle, unless a conditional test is true or the program counter is changed as a result of the instruction. In these cases, the execution takes two instruction cycles with the additional instruction cycle(s) executed as a NOP .\nThe double word instructions execute in two instruction cycles.\nOne instruction cycle consists of four oscillator periods. Thus, for an oscillator frequency of 4 MHz, the normal instruction execution time is 1 \u03bc s. If a conditional test is true, or the program counter is changed as a result of an instruction, the instruction  execution  time is  2 \u03bc s. Two-word branch instructions (if true) would take 3 \u03bc s.\nFigure 24-1 shows the general formats that the instructions can have.",
    "24.0 INSTRUCTION SET SUMMARY\nAll examples use the format GLYPH<145> nnh GLYPH<146> to represent a hexadecimal  number,  where  GLYPH<145> h GLYPH<146> signifies  a  hexadecimal digit.\nThe  Instruction  Set  Summary,  shown  in  Table 24-2, lists the instructions recognized  by  the  Microchip Assembler (MPASM TM ). Section 24.2 GLYPH<147>Instruction SetGLYPH<148> provides a description of each instruction.",
    "24.1 READ-MODIFY-WRITE OPERATIONS\nAny instruction that specifies a file register as part of the instruction performs a Read-Modify-Write (R-M-W) operation. The register is read, the data is modified and the result is stored according to either the instruction or the destination designator GLYPH<145>dGLYPH<146>. A read operation is performed on a register even if the instruction writes to that register.\nFor example, a GLYPH<147> BCF  PORTB,1 GLYPH<148> instruction  will  read PORTB, clear bit 1 of the data, then write the result back to PORTB. The read operation would have the unintended result that any condition that sets the RBIF flag would be cleared. The R-M-W operation may also copy the level of an input pin to its corresponding output latch.",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\na, Description = RAM access bit: a = 0 : RAM location in Access RAM (BSR register is ignored) a = 1 : RAM bank is specified by BSR register. bbb, Description = Bit address within an 8-bit file register (0 to 7).. BSR, Description = Bank Select Register. Used to select the current RAM bank.. d, Description = Destination select bit: d = 0 : store result in WREG d = 1 : store result in file register f. dest, Description = Destination either the WREG register or the specified register file location.. f, Description = 8-bit register file address (0x00 to 0xFF).. fs, Description = 12-bit register file address (0x000 to 0xFFF). This is the source address.. fd, Description = 12-bit register file address (0x000 to 0xFFF). This is the destination address.. k, Description = Literal field, constant data or label (may be either an 8-bit, 12-bit or a 20-bit value).. label, Description = Label name.. mm *",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\n*+ *- +*, Description = The mode of the TBLPTR register for the table read and table write instructions. Only used with table read and table write instructions: No Change to register (such as TBLPTR with table reads and writes). Post-Increment register (such as TBLPTR with table reads and writes). Post-Decrement register (such as TBLPTR with table reads and writes). Pre-Increment register (such as TBLPTR with table reads and writes). The relative address (2GLYPH<146>s complement number) for relative branch instructions, or. , Description = the direct address Call/Branch and Return instructions.. n PRODH, Description = for. PRODL, Description = Product of Multiply High Byte.. , Description = Product of Multiply Low Byte.. s, Description = Fast Call/Return mode select bit: s = 0 : do not update into/from shadow registers s = 1 : certain registers loaded into/from shadow registers (Fast mode). u, Description = Unused or Unchanged.. WREG, Description = Working register (accumulator).. x, Description =",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\nDonGLYPH<146>t care (GLYPH<145> 0 GLYPH<146> or GLYPH<145> 1 GLYPH<146>). The assembler will generate code with x = 0 . It is the recommended form of use for compatibility with all Microchip software tools.. TBLPTR, Description = 21-bit Table Pointer (points to a Program Memory location).. TABLAT, Description = 8-bit Table Latch.. TOS, Description = Top-of-Stack.. PC, Description = Program Counter.. PCL, Description = Program Counter Low Byte.. PCH, Description = Program Counter High Byte.. PCLATH, Description = Program Counter High Byte Latch.. PCLATU, Description = Program Counter Upper Byte Latch.. GIE, Description = Global Interrupt Enable bit.. WDT, Description = Watchdog Timer.. TO, Description = Time-out bit.. PD, Description = Power-down bit.. C, DC, Z, OV,, Description = ALU Status bits: Carry, Digit Carry, Zero, Overflow, Negative.. [ ], Description = Optional..",
    "TABLE 24-1: OPCODE FIELD DESCRIPTIONS\n( ), Description = Contents.. \u2192, Description = Assigned to.. < >, Description = Register bit field.. italics, Description = User-defined term (font is Courier New).",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\nBYTE-ORIENTED FILE REGISTER OPERATIONS,  = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, Description. = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, Cycles. = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word.MSb = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word. = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word.LSb = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, Status.Affected = BYTE-ORIENTED FILE REGISTER OPERATIONS. BYTE-ORIENTED FILE REGISTER OPERATIONS, Notes. = BYTE-ORIENTED FILE REGISTER OPERATIONS. ADDWF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. ADDWF, Description. = Add WREG and f. ADDWF, Cycles. = . ADDWF, 16-Bit Instruction Word.MSb = 0010. ADDWF, 16-Bit Instruction Word. = 01da. ADDWF, 16-Bit Instruction Word. = ffff. ADDWF, 16-Bit Instruction Word.LSb = ffff. ADDWF, Status.Affected = C, DC, Z, OV, N. ADDWF, Notes. = 1, 2. ADDWFC,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a Add. ADDWFC, Description. = WREG and Carry bit to f 1 1. ADDWFC, Cycles. = . ADDWFC, 16-Bit Instruction Word.MSb = 0010. ADDWFC, 16-Bit Instruction Word. = 00da. ADDWFC, 16-Bit Instruction Word. = ffff. ADDWFC, 16-Bit Instruction Word.LSb = ffff. ADDWFC, Status.Affected = C, DC, Z, OV, N. ADDWFC, Notes. = 1, 2. ANDWF,  = f, d, a AND. ANDWF, Description. = WREG with f. ANDWF, Cycles. = 1. ANDWF, 16-Bit Instruction Word.MSb = 0001. ANDWF, 16-Bit Instruction Word. = 01da. ANDWF, 16-Bit Instruction Word. = ffff. ANDWF, 16-Bit Instruction Word.LSb = ffff. ANDWF, Status.Affected = Z, N. ANDWF, Notes. = 1,2. CLRF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. CLRF, Description. = Clear f. CLRF, Cycles. = 1. CLRF, 16-Bit Instruction Word.MSb = 0110. CLRF, 16-Bit Instruction Word. = 101a. CLRF, 16-Bit Instruction Word. = ffff. CLRF, 16-Bit Instruction Word.LSb = ffff. CLRF, Status.Affected = Z. CLRF, Notes. = 2. COMF,  = f, d, a. COMF, Description. = Complement f. COMF, Cycles. = . COMF, 16-Bit Instruction Word.MSb = 0001. COMF, 16-Bit Instruction Word. = 11da. COMF, 16-Bit Instruction Word. = ffff. COMF, 16-Bit Instruction Word.LSb = ffff. COMF, Status.Affected = Z, N. COMF, Notes. = 1, 2. CPFSEQ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. CPFSEQ, Description. = Compare f with WREG, Skip = 1 1. CPFSEQ, Cycles. = (2 or 3). CPFSEQ, 16-Bit Instruction Word.MSb = 0110. CPFSEQ, 16-Bit Instruction Word. = 001a. CPFSEQ, 16-Bit Instruction Word. = ffff. CPFSEQ, 16-Bit Instruction Word.LSb = ffff. CPFSEQ, Status.Affected = None. CPFSEQ, Notes. = 4. CPFSGT,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. CPFSGT, Description. = Compare f with WREG, Skip > 1. CPFSGT, Cycles. = (2 or 3). CPFSGT, 16-Bit Instruction Word.MSb = 0110. CPFSGT, 16-Bit Instruction Word. = 010a. CPFSGT, 16-Bit Instruction Word. = ffff. CPFSGT, 16-Bit Instruction Word.LSb = ffff. CPFSGT, Status.Affected = None. CPFSGT, Notes. = 4. CPFSLT,  = f, a. CPFSLT, Description. = Compare f with WREG, Skip < 1. CPFSLT, Cycles. = (2 or 3). CPFSLT, 16-Bit Instruction Word.MSb = 0110. CPFSLT, 16-Bit Instruction Word. = 000a. CPFSLT, 16-Bit Instruction Word. = ffff. CPFSLT, 16-Bit Instruction Word.LSb = ffff. CPFSLT, Status.Affected = None. CPFSLT, Notes. = 1, 2. DECF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. DECF, Description. = Decrement f. DECF, Cycles. = 1. DECF, 16-Bit Instruction Word.MSb = 0000. DECF, 16-Bit Instruction Word. = 01da. DECF, 16-Bit Instruction Word. = ffff. DECF, 16-Bit Instruction Word.LSb = ffff. DECF, Status.Affected = C, DC, Z, OV, N. DECF, Notes. = 1, 2, 3, 4. DECFSZ,  = f, d, a. DECFSZ, Description. = Decrement f, Skip if 0. DECFSZ, Cycles. = 1 (2 or 3). DECFSZ, 16-Bit Instruction Word.MSb = 0010. DECFSZ, 16-Bit Instruction Word. = 11da. DECFSZ, 16-Bit Instruction Word. = ffff. DECFSZ, 16-Bit Instruction Word.LSb = ffff. DECFSZ, Status.Affected = None. DECFSZ, Notes. = 1, 2, 3, 4. DCFSNZ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. DCFSNZ, Description. = Decrement f, Skip if Not 0. DCFSNZ, Cycles. = 1 (2 or 3). DCFSNZ, 16-Bit Instruction Word.MSb = 0100. DCFSNZ, 16-Bit Instruction Word. = 11da. DCFSNZ, 16-Bit Instruction Word. = ffff. DCFSNZ, 16-Bit Instruction Word.LSb = ffff. DCFSNZ, Status.Affected = None. DCFSNZ, Notes. = 1, 2. INCF,  = d, a. INCF, Description. = Increment f. INCF, Cycles. = 1. INCF, 16-Bit Instruction Word.MSb = 0010. INCF, 16-Bit Instruction Word. = 10da. INCF, 16-Bit Instruction Word. = ffff. INCF, 16-Bit Instruction Word.LSb = ffff. INCF, Status.Affected = C, DC, Z, OV, N. INCF, Notes. = 1, 2, 3, 4. INCFSZ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, f, d, a. INCFSZ, Description. = Increment f, Skip if 0. INCFSZ, Cycles. = 1 (2 or 3). INCFSZ, 16-Bit Instruction Word.MSb = 0011. INCFSZ, 16-Bit Instruction Word. = 11da. INCFSZ, 16-Bit Instruction Word. = ffff. INCFSZ, 16-Bit Instruction Word.LSb = ffff. INCFSZ, Status.Affected = None. INCFSZ, Notes. = 4. INFSNZ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. INFSNZ, Description. = Increment f, Skip if Not 0. INFSNZ, Cycles. = 1 (2 or 3). INFSNZ, 16-Bit Instruction Word.MSb = 0100. INFSNZ, 16-Bit Instruction Word. = 10da. INFSNZ, 16-Bit Instruction Word. = ffff. INFSNZ, 16-Bit Instruction Word.LSb = ffff. INFSNZ, Status.Affected = None. INFSNZ, Notes. = 1, 2. IORWF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= d, a. IORWF, Description. = Inclusive OR WREG with f. IORWF, Cycles. = 1. IORWF, 16-Bit Instruction Word.MSb = 0001. IORWF, 16-Bit Instruction Word. = 00da. IORWF, 16-Bit Instruction Word. = ffff. IORWF, 16-Bit Instruction Word.LSb = ffff. IORWF, Status.Affected = Z, N. IORWF, Notes. = 1, 2. MOVF,  = f, f, d, a. MOVF, Description. = Move f. MOVF, Cycles. = . MOVF, 16-Bit Instruction Word.MSb = 0101. MOVF, 16-Bit Instruction Word. = 00da. MOVF, 16-Bit Instruction Word. = ffff. MOVF, 16-Bit Instruction Word.LSb = ffff. MOVF, Status.Affected = Z, N. MOVF, Notes. = 1. MOVFF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f s , f d. MOVFF, Description. = Move f s (source) to 1st word f d (destination) 2nd word 1 2. MOVFF, Cycles. = . MOVFF, 16-Bit Instruction Word.MSb = 1100 1111. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word. = ffff. MOVFF, 16-Bit Instruction Word.LSb = ffff ffff. MOVFF, Status.Affected = None. MOVFF, Notes. = . MOVWF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. MOVWF, Description. = Move WREG to f. MOVWF, Cycles. = 1. MOVWF, 16-Bit Instruction Word.MSb = 0110. MOVWF, 16-Bit Instruction Word. = ffff 111a. MOVWF, 16-Bit Instruction Word. = ffff ffff. MOVWF, 16-Bit Instruction Word.LSb = ffff. MOVWF, Status.Affected = None. MOVWF, Notes. = . MULWF,  = f, a. MULWF, Description. = Multiply WREG with f. MULWF, Cycles. = 1. MULWF, 16-Bit Instruction Word.MSb = 0000. MULWF, 16-Bit Instruction Word. = 001a. MULWF, 16-Bit Instruction Word. = ffff. MULWF, 16-Bit Instruction Word.LSb = ffff. MULWF, Status.Affected = None. MULWF, Notes. = . NEGF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. NEGF, Description. = Negate f. NEGF, Cycles. = 1. NEGF, 16-Bit Instruction Word.MSb = 0110. NEGF, 16-Bit Instruction Word. = 110a. NEGF, 16-Bit Instruction Word. = ffff. NEGF, 16-Bit Instruction Word.LSb = ffff. NEGF, Status.Affected = C, DC, Z, OV, N. NEGF, Notes. = 1, 2. RLCF,  = f, d, a. RLCF, Description. = Rotate Left f through Carry. RLCF, Cycles. = 1. RLCF, 16-Bit Instruction Word.MSb = 0011. RLCF, 16-Bit Instruction Word. = 01da. RLCF, 16-Bit Instruction Word. = ffff. RLCF, 16-Bit Instruction Word.LSb = ffff. RLCF, Status.Affected = C, Z, N. RLCF, Notes. = . RLNCF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. RLNCF, Description. = Rotate Left f (No Carry). RLNCF, Cycles. = 1. RLNCF, 16-Bit Instruction Word.MSb = 0100. RLNCF, 16-Bit Instruction Word. = 01da. RLNCF, 16-Bit Instruction Word. = ffff. RLNCF, 16-Bit Instruction Word.LSb = ffff. RLNCF, Status.Affected = Z, N. RLNCF, Notes. = . RRCF,  = f, d, a. RRCF, Description. = Rotate Right f through Carry. RRCF, Cycles. = 1. RRCF, 16-Bit Instruction Word.MSb = 0011. RRCF, 16-Bit Instruction Word. = 00da. RRCF, 16-Bit Instruction Word. = ffff. RRCF, 16-Bit Instruction Word.LSb = ffff. RRCF, Status.Affected = C, Z, N. RRCF, Notes. = 1, 2. RRNCF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. RRNCF, Description. = Rotate Right f (No Carry). RRNCF, Cycles. = 1. RRNCF, 16-Bit Instruction Word.MSb = 0100. RRNCF, 16-Bit Instruction Word. = 00da. RRNCF, 16-Bit Instruction Word. = ffff. RRNCF, 16-Bit Instruction Word.LSb = ffff. RRNCF, Status.Affected = Z, N. RRNCF, Notes. = . SETF,  = f, a. SETF, Description. = Set f. SETF, Cycles. = 1. SETF, 16-Bit Instruction Word.MSb = 0110. SETF, 16-Bit Instruction Word. = 100a. SETF, 16-Bit Instruction Word. = ffff. SETF, 16-Bit Instruction Word.LSb = . SETF, Status.Affected = . SETF, Notes. = . SUBFWB,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. SUBFWB, Description. = Subtract f from WREG with Borrow. SUBFWB, Cycles. = 1. SUBFWB, 16-Bit Instruction Word.MSb = 0101. SUBFWB, 16-Bit Instruction Word. = 01da. SUBFWB, 16-Bit Instruction Word. = ffff. SUBFWB, 16-Bit Instruction Word.LSb = ffff ffff. SUBFWB, Status.Affected = None C, DC, Z, OV, N. SUBFWB, Notes. = 1, 2. SUBWF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. SUBWF, Description. = Subtract WREG from f. SUBWF, Cycles. = 1. SUBWF, 16-Bit Instruction Word.MSb = 0101. SUBWF, 16-Bit Instruction Word. = 11da. SUBWF, 16-Bit Instruction Word. = ffff. SUBWF, 16-Bit Instruction Word.LSb = . SUBWF, Status.Affected = C, DC, Z, OV, N. SUBWF, Notes. = . SUBWFB,  = f, d, a. SUBWFB, Description. = Subtract WREG from f with Borrow. SUBWFB, Cycles. = 1. SUBWFB, 16-Bit Instruction Word.MSb = 0101. SUBWFB, 16-Bit Instruction Word. = 10da. SUBWFB, 16-Bit Instruction Word. = ffff. SUBWFB, 16-Bit Instruction Word.LSb = ffff. SUBWFB, Status.Affected = . SUBWFB, Notes. = . ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. , Description. = Swap Nibbles in f. , Cycles. = . , 16-Bit Instruction Word.MSb = 0011. , 16-Bit Instruction Word. = 10da. , 16-Bit Instruction Word. = ffff. , 16-Bit Instruction Word.LSb = ffff. , Status.Affected = C, DC, Z, OV, N. , Notes. = 1, 2. SWAPF,  = . SWAPF, Description. = Test f, Skip if 0. SWAPF, Cycles. = 1 1 (2 or 3). SWAPF, 16-Bit Instruction Word.MSb = 0110. SWAPF, 16-Bit Instruction Word. = 011a. SWAPF, 16-Bit Instruction Word. = . SWAPF, 16-Bit Instruction Word.LSb = ffff. SWAPF, Status.Affected = None. SWAPF, Notes. = 4. TSTFSZ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, a. TSTFSZ, Description. = . TSTFSZ, Cycles. = . TSTFSZ, 16-Bit Instruction Word.MSb = . TSTFSZ, 16-Bit Instruction Word. = . TSTFSZ, 16-Bit Instruction Word. = ffff. TSTFSZ, 16-Bit Instruction Word.LSb = ffff. TSTFSZ, Status.Affected = None. TSTFSZ, Notes. = 1, 2. XORWF f, d,,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= a. XORWF f, d,, Description. = Exclusive OR WREG with f. XORWF f, d,, Cycles. = 1. XORWF f, d,, 16-Bit Instruction Word.MSb = 0001. XORWF f, d,, 16-Bit Instruction Word. = 10da. XORWF f, d,, 16-Bit Instruction Word. = ffff. XORWF f, d,, 16-Bit Instruction Word.LSb = ffff. XORWF f, d,, Status.Affected = Z, N. XORWF f, d,, Notes. = . BIT-ORIENTED FILE REGISTER OPERATIONS,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, Description. = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, Cycles. = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word.MSb = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word. = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word. = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, 16-Bit Instruction Word.LSb = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, Status.Affected = BIT-ORIENTED FILE REGISTER OPERATIONS. BIT-ORIENTED FILE REGISTER OPERATIONS, Notes. = BIT-ORIENTED FILE REGISTER OPERATIONS. BCF,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, b, a. BCF, Description. = Bit Clear f. BCF, Cycles. = 1. BCF, 16-Bit Instruction Word.MSb = 1001. BCF, 16-Bit Instruction Word. = bbba. BCF, 16-Bit Instruction Word. = ffff. BCF, 16-Bit Instruction Word.LSb = ffff. BCF, Status.Affected = None. BCF, Notes. = 1, 2. BSF,  = f, b, a. BSF, Description. = Bit Set f. BSF, Cycles. = 1. BSF, 16-Bit Instruction Word.MSb = 1000. BSF, 16-Bit Instruction Word. = bbba. BSF, 16-Bit Instruction Word. = ffff. BSF, 16-Bit Instruction Word.LSb = ffff. BSF, Status.Affected = None. BSF, Notes. = 1, 2. BTFSC,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, b, a. BTFSC, Description. = Bit Test f, Skip if Clear. BTFSC, Cycles. = 1 (2 or 3). BTFSC, 16-Bit Instruction Word.MSb = 1011. BTFSC, 16-Bit Instruction Word. = bbba. BTFSC, 16-Bit Instruction Word. = ffff. BTFSC, 16-Bit Instruction Word.LSb = ffff. BTFSC, Status.Affected = None. BTFSC, Notes. = 3, 4. BTFSS,  = f, b, a. BTFSS, Description. = Bit Test f, Skip if Set. BTFSS, Cycles. = 1 (2 or 3). BTFSS, 16-Bit Instruction Word.MSb = 1010. BTFSS, 16-Bit Instruction Word. = bbba. BTFSS, 16-Bit Instruction Word. = ffff. BTFSS, 16-Bit Instruction Word.LSb = ffff. BTFSS, Status.Affected = None. BTFSS, Notes. = 3, 4. BTG,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\n= f, d, a. BTG, Description. = Bit Toggle f. BTG, Cycles. = 1. BTG, 16-Bit Instruction Word.MSb = 0111. BTG, 16-Bit Instruction Word. = bbba. BTG, 16-Bit Instruction Word. = ffff. BTG, 16-Bit Instruction Word.LSb = ffff. BTG, Status.Affected = None. BTG, Notes. = 1, 2",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is GLYPH<145> 1 GLYPH<146>  for a pin configured as input and is driven low by an external device, the data will be written back with a GLYPH<145> 0 GLYPH<146> .\n2: If this instruction is executed on the TMR0 register (and where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are 2-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.\n5: If the table write starts the write cycle to internal memory, the write will continue until terminated.",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\nCONTROL OPERATIONS, Mnemonic,.Operands = CONTROL OPERATIONS. CONTROL OPERATIONS, Description.Description = CONTROL OPERATIONS. CONTROL OPERATIONS, Cycles.Cycles = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.MSb = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word. = CONTROL OPERATIONS. CONTROL OPERATIONS, 16-Bit Instruction Word.LSb = CONTROL OPERATIONS. CONTROL OPERATIONS, Status Affected.Status Affected = CONTROL OPERATIONS. CONTROL OPERATIONS,  = CONTROL OPERATIONS. BC, Mnemonic,.Operands = n. BC, Description.Description = Branch if Carry. BC, Cycles.Cycles = 1 (2). BC, 16-Bit Instruction Word.MSb = 1110. BC, 16-Bit Instruction Word.MSb = 0010. BC, 16-Bit Instruction Word. = nnnn. BC, 16-Bit Instruction Word.LSb = nnnn. BC, Status Affected.Status Affected = None. BC,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . BN, Mnemonic,.Operands = n. BN, Description.Description = Branch if Negative. BN, Cycles.Cycles = 1 (2). BN, 16-Bit Instruction Word.MSb = 1110. BN, 16-Bit Instruction Word.MSb = 0110. BN, 16-Bit Instruction Word. = nnnn. BN, 16-Bit Instruction Word.LSb = nnnn. BN, Status Affected.Status Affected = None. BN,  = . BNC, Mnemonic,.Operands = n. BNC, Description.Description = Branch if Not Carry. BNC, Cycles.Cycles = 1 (2). BNC, 16-Bit Instruction Word.MSb = 1110. BNC, 16-Bit Instruction Word.MSb = 0011. BNC, 16-Bit Instruction Word. = nnnn. BNC, 16-Bit Instruction Word.LSb = nnnn. BNC, Status Affected.Status Affected = None. BNC,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . BNN, Mnemonic,.Operands = n. BNN, Description.Description = Branch if Not Negative. BNN, Cycles.Cycles = 1 (2). BNN, 16-Bit Instruction Word.MSb = 1110. BNN, 16-Bit Instruction Word.MSb = 0111. BNN, 16-Bit Instruction Word. = nnnn. BNN, 16-Bit Instruction Word.LSb = nnnn. BNN, Status Affected.Status Affected = None. BNN,  = . BNOV, Mnemonic,.Operands = n. BNOV, Description.Description = Branch if Not Overflow. BNOV, Cycles.Cycles = 1 (2). BNOV, 16-Bit Instruction Word.MSb = 1110. BNOV, 16-Bit Instruction Word.MSb = 0101. BNOV, 16-Bit Instruction Word. = nnnn. BNOV, 16-Bit Instruction Word.LSb = nnnn. BNOV, Status Affected.Status Affected = None. BNOV,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . BNZ, Mnemonic,.Operands = n. BNZ, Description.Description = Branch if Not Zero. BNZ, Cycles.Cycles = 1 (2). BNZ, 16-Bit Instruction Word.MSb = 1110. BNZ, 16-Bit Instruction Word.MSb = 0001. BNZ, 16-Bit Instruction Word. = nnnn. BNZ, 16-Bit Instruction Word.LSb = nnnn. BNZ, Status Affected.Status Affected = None. BNZ,  = . BOV, Mnemonic,.Operands = n. BOV, Description.Description = Branch if Overflow. BOV, Cycles.Cycles = 1 (2). BOV, 16-Bit Instruction Word.MSb = 1110. BOV, 16-Bit Instruction Word.MSb = 0100. BOV, 16-Bit Instruction Word. = nnnn. BOV, 16-Bit Instruction Word.LSb = nnnn. BOV, Status Affected.Status Affected = None. BOV,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . BRA, Mnemonic,.Operands = n. BRA, Description.Description = Branch Unconditionally. BRA, Cycles.Cycles = 2. BRA, 16-Bit Instruction Word.MSb = 1101. BRA, 16-Bit Instruction Word.MSb = 0nnn. BRA, 16-Bit Instruction Word. = nnnn. BRA, 16-Bit Instruction Word.LSb = nnnn. BRA, Status Affected.Status Affected = None. BRA,  = . BZ, Mnemonic,.Operands = n. BZ, Description.Description = Branch if Zero. BZ, Cycles.Cycles = 1 (2). BZ, 16-Bit Instruction Word.MSb = 1110. BZ, 16-Bit Instruction Word.MSb = 0000. BZ, 16-Bit Instruction Word. = nnnn. BZ, 16-Bit Instruction Word.LSb = nnnn. BZ, Status Affected.Status Affected = None. BZ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . CALL, Mnemonic,.Operands = n, s. CALL, Description.Description = Call Subroutine1st word. CALL, Cycles.Cycles = 2. CALL, 16-Bit Instruction Word.MSb = 1110. CALL, 16-Bit Instruction Word.MSb = 110s. CALL, 16-Bit Instruction Word. = kkkk. CALL, 16-Bit Instruction Word.LSb = kkkk. CALL, Status Affected.Status Affected = None. CALL,  = . , Mnemonic,.Operands = . , Description.Description = 2nd word. , Cycles.Cycles = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word. = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected.Status Affected = . ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . CLRWDT, Mnemonic,.Operands = GLYPH<151>. CLRWDT, Description.Description = Clear Watchdog Timer. CLRWDT, Cycles.Cycles = 1. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word.MSb = 0000. CLRWDT, 16-Bit Instruction Word. = 0000. CLRWDT, 16-Bit Instruction Word.LSb = 0100. CLRWDT, Status Affected.Status Affected = TO, PD. CLRWDT,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . DAW, Mnemonic,.Operands = GLYPH<151>. DAW, Description.Description = Decimal Adjust WREG. DAW, Cycles.Cycles = 1. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word.MSb = 0000. DAW, 16-Bit Instruction Word. = 0000. DAW, 16-Bit Instruction Word.LSb = 0111. DAW, Status Affected.Status Affected = C, DC. DAW,  = . GOTO, Mnemonic,.Operands = n. GOTO, Description.Description = Go to Address 1st word. GOTO, Cycles.Cycles = 2. GOTO, 16-Bit Instruction Word.MSb = 1110. GOTO, 16-Bit Instruction Word.MSb = 1111. GOTO, 16-Bit Instruction Word. = kkkk. GOTO, 16-Bit Instruction Word.LSb = kkkk. GOTO, Status Affected.Status Affected = None. GOTO,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . , Mnemonic,.Operands = . , Description.Description = 2nd word. , Cycles.Cycles = . , 16-Bit Instruction Word.MSb = 1111. , 16-Bit Instruction Word.MSb = kkkk. , 16-Bit Instruction Word. = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected.Status Affected = . ,  = . NOP, Mnemonic,.Operands = GLYPH<151>. NOP, Description.Description = No Operation. NOP, Cycles.Cycles = 1. NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word.MSb = 0000. NOP, 16-Bit Instruction Word. = 0000. NOP, 16-Bit Instruction Word.LSb = 0000. NOP, Status Affected.Status Affected = None. NOP,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . NOP, Mnemonic,.Operands = GLYPH<151>. NOP, Description.Description = No Operation (Note 4). NOP, Cycles.Cycles = 1. NOP, 16-Bit Instruction Word.MSb = 1111. NOP, 16-Bit Instruction Word.MSb = xxxx. NOP, 16-Bit Instruction Word. = xxxx. NOP, 16-Bit Instruction Word.LSb = xxxx. NOP, Status Affected.Status Affected = None. NOP,  = . POP, Mnemonic,.Operands = GLYPH<151>. POP, Description.Description = Pop Top of Return Stack (TOS) 1. POP, Cycles.Cycles = . POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word.MSb = 0000. POP, 16-Bit Instruction Word. = 0000. POP, 16-Bit Instruction Word.LSb = 0110. POP, Status Affected.Status Affected = None. POP,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . PUSH, Mnemonic,.Operands = GLYPH<151>. PUSH, Description.Description = Push Top of Return Stack (TOS) 1. PUSH, Cycles.Cycles = . PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word.MSb = 0000. PUSH, 16-Bit Instruction Word. = 0000. PUSH, 16-Bit Instruction Word.LSb = 0101. PUSH, Status Affected.Status Affected = None. PUSH,  = . RCALL, Mnemonic,.Operands = n. RCALL, Description.Description = Relative Call. RCALL, Cycles.Cycles = 2. RCALL, 16-Bit Instruction Word.MSb = 1101. RCALL, 16-Bit Instruction Word.MSb = 1nnn. RCALL, 16-Bit Instruction Word. = nnnn. RCALL, 16-Bit Instruction Word.LSb = nnnn. RCALL, Status Affected.Status Affected = None. RCALL,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . RESET, Mnemonic,.Operands = . RESET, Description.Description = Software Device Reset. RESET, Cycles.Cycles = 1. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word.MSb = 0000. RESET, 16-Bit Instruction Word. = 1111. RESET, 16-Bit Instruction Word.LSb = 1111. RESET, Status Affected.Status Affected = All. RESET,  = . RETFIE, Mnemonic,.Operands = s. RETFIE, Description.Description = Return from Interrupt Enable. RETFIE, Cycles.Cycles = 2. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word.MSb = 0000. RETFIE, 16-Bit Instruction Word. = 0001. RETFIE, 16-Bit Instruction Word.LSb = 000s. RETFIE, Status Affected.Status Affected = GIE/GIEH, PEIE/GIEL. RETFIE,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . RETLW, Mnemonic,.Operands = k. RETLW, Description.Description = Return with Literal in WREG. RETLW, Cycles.Cycles = 2. RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected.Status Affected = None. RETLW,  = . RETURN, Mnemonic,.Operands = s. RETURN, Description.Description = Return from Subroutine. RETURN, Cycles.Cycles = 2. RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word.MSb = 0000. RETURN, 16-Bit Instruction Word. = 0001. RETURN, 16-Bit Instruction Word.LSb = 001s. RETURN, Status Affected.Status Affected = None. RETURN,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . SLEEP, Mnemonic,.Operands = GLYPH<151>. SLEEP, Description.Description = Go into Standby mode. SLEEP, Cycles.Cycles = 1. SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word.MSb = 0000. SLEEP, 16-Bit Instruction Word. = 0000. SLEEP, 16-Bit Instruction Word.LSb = 0011. SLEEP, Status Affected.Status Affected = TO, PD. SLEEP,  = ",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is GLYPH<145> 1 GLYPH<146>  for a pin configured as input and is driven low by an external device, the data will be written back with a GLYPH<145> 0 GLYPH<146> .\n2: If this instruction is executed on the TMR0 register (and where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are 2-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n5: If the table write starts the write cycle to internal memory, the write will continue until terminated.\nLITERAL OPERATIONS,  = LITERAL OPERATIONS. LITERAL OPERATIONS, Description. = LITERAL OPERATIONS. LITERAL OPERATIONS, Cycles. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.MSb = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word. = LITERAL OPERATIONS. LITERAL OPERATIONS, 16-Bit Instruction Word.LSb = LITERAL OPERATIONS. LITERAL OPERATIONS, Status Affected. = LITERAL OPERATIONS. LITERAL OPERATIONS,  = LITERAL OPERATIONS. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= k k. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, Description. = Add Literal and WREG AND Literal with WREG Inclusive ORLiteral with WREG Move Literal (12-bit) 2nd word to FSRx 1st word Move Literal to BSR<3:0> Move Literal to WREG. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, Cycles. = 1 1 1 2 1 1 1 2. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, 16-Bit Instruction Word.MSb = 0000 0000. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, 16-Bit Instruction Word.MSb = 1111. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, 16-Bit Instruction Word. = kkkk kkkk kkkk. ADDLW ANDLW IORLW LFSR MOVLB",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\nMOVLW MULLW, 16-Bit Instruction Word.LSb = kkkk kkkk kkkk. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW, Status Affected. = C, DC, Z, OV, N Z, N Z, N None None None None None C, DC, Z, OV, N Z, N. ADDLW ANDLW IORLW LFSR MOVLB MOVLW MULLW,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= . ,  = . , Description. = . , Cycles. = . , 16-Bit Instruction Word.MSb = . , 16-Bit Instruction Word.MSb = 1011. , 16-Bit Instruction Word. = . , 16-Bit Instruction Word.LSb = . , Status Affected. = . ,  = . ,  = k. , Description. = . , Cycles. = . , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word.MSb = 1001. , 16-Bit Instruction Word. = . , 16-Bit Instruction Word.LSb = . , Status Affected. = . ,  = . ,  = f, k. , Description. = . , Cycles. = . , 16-Bit Instruction Word.MSb = 1110. , 16-Bit Instruction Word.MSb = 1110. , 16-Bit Instruction Word. = 00ff. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected. = . ,  = . ,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= k. , Description. = . , Cycles. = . , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word.MSb = 0001. , 16-Bit Instruction Word. = 0000. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected. = . ,  = . ,  = k. , Description. = . , Cycles. = . , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word.MSb = 1110. , 16-Bit Instruction Word. = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected. = . ,  = . ,  = k. , Description. = Multiply Literal with WREG. , Cycles. = . , 16-Bit Instruction Word.MSb = 0000. , 16-Bit Instruction Word.MSb = 1101. , 16-Bit Instruction Word. = kkkk. , 16-Bit Instruction Word.LSb = kkkk. , Status Affected. = . ,  = . RETLW,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= k. RETLW, Description. = Return with Literal in WREG. RETLW, Cycles. = . RETLW, 16-Bit Instruction Word.MSb = 0000. RETLW, 16-Bit Instruction Word.MSb = 1100. RETLW, 16-Bit Instruction Word. = kkkk. RETLW, 16-Bit Instruction Word.LSb = kkkk. RETLW, Status Affected. = . RETLW,  = . SUBLW,  = k. SUBLW, Description. = Subtract WREG from Literal. SUBLW, Cycles. = 1. SUBLW, 16-Bit Instruction Word.MSb = 0000. SUBLW, 16-Bit Instruction Word.MSb = 1000. SUBLW, 16-Bit Instruction Word. = kkkk. SUBLW, 16-Bit Instruction Word.LSb = kkkk. SUBLW, Status Affected. = . SUBLW,  = . XORLW,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= k. XORLW, Description. = Exclusive OR Literal with WREG. XORLW, Cycles. = 1. XORLW, 16-Bit Instruction Word.MSb = 0000. XORLW, 16-Bit Instruction Word.MSb = 1010. XORLW, 16-Bit Instruction Word. = kkkk. XORLW, 16-Bit Instruction Word.LSb = kkkk. XORLW, Status Affected. = . XORLW,  = . DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Description. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Cycles. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.MSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, 16-Bit Instruction Word.LSb = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS, Status Affected. = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS,  = DATA MEMORY \u2194 PROGRAM MEMORY OPERATIONS. TBLRD*,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLRD*. TBLRD*, Description. = Table Read Table Read with Post-Increment Table Read with Post-Decrement Table Read with Pre-Increment. TBLRD*, Cycles. = 2. TBLRD*, 16-Bit Instruction Word.MSb = 0000 0000. TBLRD*, 16-Bit Instruction Word.MSb = 0000 0000. TBLRD*, 16-Bit Instruction Word. = 0000 0000. TBLRD*, 16-Bit Instruction Word.LSb = 1000 1001. TBLRD*, Status Affected. = None None None. TBLRD*,  = . TBLRD*+ TBLRD*-,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLRD*+ TBLRD*-. TBLRD*+ TBLRD*-, Description. = Table Write Table Write with Post-Increment Table Write with Post-Decrement. TBLRD*+ TBLRD*-, Cycles. = 2. TBLRD*+ TBLRD*-, 16-Bit Instruction Word.MSb = 0000 0000 0000. TBLRD*+ TBLRD*-, 16-Bit Instruction Word.MSb = . TBLRD*+ TBLRD*-, 16-Bit Instruction Word. = 0000 0000 0000 0000. TBLRD*+ TBLRD*-, 16-Bit Instruction Word.LSb = 1010 1011 1100 1101. TBLRD*+ TBLRD*-, Status Affected. = None None None. TBLRD*+ TBLRD*-,  = . TBLRD+* 0000 0000,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLRD+* 0000 0000. TBLRD+* 0000 0000, Description. = TBLRD+* 0000 0000. TBLRD+* 0000 0000, Cycles. = TBLRD+* 0000 0000. TBLRD+* 0000 0000, 16-Bit Instruction Word.MSb = TBLRD+* 0000 0000. TBLRD+* 0000 0000, 16-Bit Instruction Word.MSb = TBLRD+* 0000 0000. TBLRD+* 0000 0000, 16-Bit Instruction Word. = TBLRD+* 0000 0000. TBLRD+* 0000 0000, 16-Bit Instruction Word.LSb = TBLRD+* 0000 0000. TBLRD+* 0000 0000, Status Affected. = TBLRD+* 0000 0000. TBLRD+* 0000 0000,  = TBLRD+* 0000 0000. TBLWT* (5) 0000,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLWT* (5) 0000. TBLWT* (5) 0000, Description. = TBLWT* (5) 0000. TBLWT* (5) 0000, Cycles. = TBLWT* (5) 0000. TBLWT* (5) 0000, 16-Bit Instruction Word.MSb = TBLWT* (5) 0000. TBLWT* (5) 0000, 16-Bit Instruction Word.MSb = TBLWT* (5) 0000. TBLWT* (5) 0000, 16-Bit Instruction Word. = TBLWT* (5) 0000. TBLWT* (5) 0000, 16-Bit Instruction Word.LSb = TBLWT* (5) 0000. TBLWT* (5) 0000, Status Affected. = TBLWT* (5) 0000. TBLWT* (5) 0000,  = TBLWT* (5) 0000. TBLWT*+ 0000 0000,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, Description. = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, Cycles. = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, 16-Bit Instruction Word.MSb = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, 16-Bit Instruction Word.MSb = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, 16-Bit Instruction Word. = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, 16-Bit Instruction Word.LSb = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000, Status Affected. = TBLWT*+ 0000 0000. TBLWT*+ 0000 0000,  = TBLWT*+ 0000 0000. TBLWT*- 0000 0000 0000 1110 None,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, Description. = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, Cycles. = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, 16-Bit Instruction Word.MSb = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, 16-Bit Instruction Word.MSb = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, 16-Bit Instruction Word. = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None, 16-Bit Instruction Word.LSb = TBLWT*- 0000 0000 0000 1110 None. TBLWT*-",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n0000 0000 0000 1110 None, Status Affected. = TBLWT*- 0000 0000 0000 1110 None. TBLWT*- 0000 0000 0000 1110 None,\n= TBLWT*- 0000 0000 0000 1110 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None,",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n= TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, Description. = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, Cycles. = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, 16-Bit Instruction Word.MSb = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, 16-Bit Instruction Word.MSb = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\nPre-Increment 0000 0000 0000 1111 None, 16-Bit Instruction Word. = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, 16-Bit Instruction Word.LSb = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None, Status Affected. = TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None. TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None,\n= TBLWT+* Table Write with Pre-Increment 0000 0000 0000 1111 None",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\nNote 1: When a PORT register is modified as a function of itself (e.g., MOVF PORTB, 1, 0 ), the value used will be that value present on the pins themselves. For example, if the data latch is GLYPH<145> 1 GLYPH<146>  for a pin configured as input and is driven low by an external device, the data will be written back with a GLYPH<145> 0 GLYPH<146> .\n2: If this instruction is executed on the TMR0 register (and where applicable, d = 1 ), the prescaler will be cleared if assigned.\n3: If Program Counter (PC) is modified or a conditional test is true, the instruction requires two cycles. The second cycle is executed as a NOP .\n4: Some instructions are 2-word instructions. The second word of these instructions will be executed as a NOP unless the first word of the instruction retrieves the information embedded in these 16 bits. This ensures that all program memory locations have a valid instruction.",
    "TABLE 24-2: PIC18FXXX INSTRUCTION SET (CONTINUED)\n5: If the table write starts the write cycle to internal memory, the write will continue until terminated.",
    "24.2 Instruction Set\nSyntax:, ADD Literal to W = [ label ] ADDLW. Syntax:, ADD Literal to W = [ label ] ADDLW. Syntax:, ADD Literal to W = k. Syntax:, ADD Literal to W = k. Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = 0 \u2264 k \u2264 255. Operands:, ADD Literal to W = . Operands:, ADD Literal to W = . Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = (W) + k \u2192 W. Operation:, ADD Literal to W = . Operation:, ADD Literal to W = . Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = N, OV, C, DC, Z. Status Affected:, ADD Literal to W = . Status Affected:, ADD Literal to W = . Encoding:, ADD Literal to W = 0000. Encoding:, ADD Literal to W = 1111. Encoding:, ADD Literal to W = kkkk kkkk. Encoding:, ADD",
    "24.2 Instruction Set\nLiteral to W = . Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal GLYPH<145> kGLYPH<146> and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal GLYPH<145> kGLYPH<146> and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal GLYPH<145> kGLYPH<146> and the result is placed in W.. Description:, ADD Literal to W = The contents of Ware added to the 8-bit literal GLYPH<145> kGLYPH<146> and the result is placed in W.. Words:, ADD Literal to W = 1. Words:, ADD Literal to W = . Words:, ADD Literal to W = . Words:, ADD Literal to W = . Cycles:, ADD Literal to W = 1. Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Cycles:, ADD Literal to W = . Q Cycle Activity:, ADD Literal to W = Q Cycle",
    "24.2 Instruction Set\nActivity:. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q Cycle Activity:, ADD Literal to W = Q Cycle Activity:. Q1, ADD Literal to W = Q2. Q1, ADD Literal to W = Q3. Q1, ADD Literal to W = Q4. Q1, ADD Literal to W = . Decode, ADD Literal to W = Read literal GLYPH<145>kGLYPH<146>. Decode, ADD Literal to W = Process Data. Decode, ADD Literal to W = Write to W. Decode, ADD Literal to W = . Example:, ADD Literal to W = ADDLW. Example:, ADD Literal to W = 0x15. Example:, ADD Literal to W = . Example:, ADD Literal to W = . Before Instruction, ADD Literal to W = Before Instruction. Before Instruction, ADD Literal to W = . Before Instruction, ADD Literal to W = . Before Instruction, ADD Literal to W = . W, ADD Literal to W = 0x10. W, ADD Literal to W = . W, ADD Literal to W =",
    "24.2 Instruction Set\n. W, ADD Literal to W = . After Instruction, ADD Literal to W = After Instruction. After Instruction, ADD Literal to W = . After Instruction, ADD Literal to W = . After Instruction, ADD Literal to W = . W =, ADD Literal to W = 0x25. W =, ADD Literal to W = . W =, ADD Literal to W = . W =, ADD Literal to W = ",
    "24.2 Instruction Set\nSyntax:, ADD Wto f = [ label ] ADDWF. Syntax:, ADD Wto f = [ label ] ADDWF. Syntax:, ADD Wto f = f [,d [,a]]. Syntax:, ADD Wto f = f [,d [,a]]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, ADD Wto f = . Operands:, ADD Wto f = . Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = (W) + (f) \u2192 dest. Operation:, ADD Wto f = . Operation:, ADD Wto f = . Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = N, OV, C, DC, Z. Status Affected:, ADD Wto f = . Status",
    "24.2 Instruction Set\nAffected:, ADD Wto f = . Encoding:, ADD Wto f = 0010. Encoding:, ADD Wto f = 01da. Encoding:, ADD Wto f = ffff. Encoding:, ADD Wto f = ffff. Description:, ADD Wto f = Add Wto register GLYPH<145>f GLYPH<146> . If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR is used.. Description:, ADD Wto f = Add Wto register",
    "24.2 Instruction Set\nGLYPH<145>f GLYPH<146> . If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR is used.. Description:, ADD Wto f = Add Wto register GLYPH<145>f GLYPH<146> . If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is",
    "24.2 Instruction Set\nGLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR is used.. Description:, ADD Wto f = Add Wto register GLYPH<145>f GLYPH<146> . If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access",
    "24.2 Instruction Set\nBank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR is used.. Words:, ADD Wto f = 1. Words:, ADD Wto f = 1. Words:, ADD Wto f = . Words:, ADD Wto f = . Cycles:, ADD Wto f = 1. Cycles:, ADD Wto f = 1. Cycles:, ADD Wto f = . Cycles:, ADD Wto f = . Q Cycle Activity:, ADD Wto f = Q Cycle Activity:. Q Cycle Activity:, ADD Wto f = Q Cycle Activity:. Q Cycle Activity:, ADD Wto f = Q Cycle Activity:. Q Cycle Activity:, ADD Wto f = Q Cycle Activity:. Q1, ADD Wto f = Q2. Q1, ADD Wto f = Q3. Q1, ADD Wto f = . Q1, ADD Wto f = Q4. Decode, ADD Wto f = Read register GLYPH<145>f GLYPH<146>. Decode, ADD Wto f =",
    "24.2 Instruction Set\nData. Decode, ADD Wto f = Process. Decode, ADD Wto f = Write to destination. , ADD Wto f = . , ADD Wto f = . , ADD Wto f = REG, W. , ADD Wto f = . ADDWF, ADD Wto f = . ADDWF, ADD Wto f = . ADDWF, ADD Wto f = . ADDWF, ADD Wto f = . Instruction, ADD Wto f = . Instruction, ADD Wto f = . Instruction, ADD Wto f = . Instruction, ADD Wto f = . , ADD Wto f = =. , ADD Wto f = 0xC2. , ADD Wto f = . , ADD Wto f = . After Instruction, ADD Wto f = . After Instruction, ADD Wto f = . After Instruction, ADD Wto f = . After Instruction, ADD Wto f = . , ADD Wto f = =. , ADD Wto f = . , ADD Wto f = . , ADD Wto f = . =, ADD Wto f = . =, ADD Wto f = 0xC2. =, ADD Wto f",
    "24.2 Instruction Set\n= . =, ADD Wto f = . = 0x17, ADD Wto f = . = 0x17, ADD Wto f = . = 0x17, ADD Wto f = . = 0x17, ADD Wto f = . REG, ADD Wto f = . REG, ADD Wto f = 0xD9. REG, ADD Wto f = . REG, ADD Wto f = . W, ADD Wto f = W. W, ADD Wto f = W. W, ADD Wto f = W. W, ADD Wto f = W. REG, ADD Wto f = REG. REG, ADD Wto f = REG. REG, ADD Wto f = REG. REG, ADD Wto f = REG",
    "ADD W and Carry bit to f\nSyntax:\n[ label ] ADDWFC      f [,d [,a]]\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(W) + (f) + (C) \u2192 dest\nStatus Affected:\nN, OV, C, DC, Z\nEncoding:\n0010\n00da\nffff\nffff\nDescription:",
    "ADD W and Carry bit to f\nAdd W, the Carry flag and data memory location GLYPH<145>fGLYPH<146>. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed in data memory loca- tion GLYPH<145>fGLYPH<146>. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the BSR will not be overridden.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister GLYPH<145>fGLYPH<146>\nProcess Data\nWrite to\ndestination",
    "ADD W and Carry bit to f\nSyntax:, AND Literal with W = [ label ] ANDLW. Syntax:, AND Literal with W = [ label ] ANDLW. Syntax:, AND Literal with W = k. Syntax:, AND Literal with W = . Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = 0 \u2264 k \u2264 255. Operands:, AND Literal with W = . Operands:, AND Literal with W = . Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = (W) .AND. k \u2192 W. Operation:, AND Literal with W = . Operation:, AND Literal with W = . Status Affected:, AND Literal with W = N, Z. Status Affected:, AND Literal with W = N, Z. Status Affected:, AND Literal with W = . Status Affected:, AND Literal with W = . Encoding:, AND Literal with W = 0000. Encoding:, AND Literal with W = 1011. Encoding:, AND Literal with W = kkkk. Encoding:, AND Literal with W = kkkk. Description:, AND",
    "ADD W and Carry bit to f\nLiteral with W = The contents of Ware ANDed with the 8-bit literal GLYPH<145> kGLYPH<146>. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal GLYPH<145> kGLYPH<146>. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal GLYPH<145> kGLYPH<146>. The result is placed in W.. Description:, AND Literal with W = The contents of Ware ANDed with the 8-bit literal GLYPH<145> kGLYPH<146>. The result is placed in W.. Words:, AND Literal with W = 1. Words:, AND Literal with W = . Words:, AND Literal with W = . Words:, AND Literal with W = . Cycles:, AND Literal with W = 1. Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Cycles:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle",
    "ADD W and Carry bit to f\nActivity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q Cycle Activity:, AND Literal with W = . Q1, AND Literal with W = Q2. Q1, AND Literal with W = Q3. Q1, AND Literal with W = . Q1, AND Literal with W = Q4. Decode, AND Literal with W = Read literal GLYPH<145>kGLYPH<146>. Decode, AND Literal with W = Process Data. Decode, AND Literal with W = . Decode, AND Literal with W = Write to W. Example:, AND Literal with W = ANDLW. Example:, AND Literal with W = 0x5F. Example:, AND Literal with W = . Example:, AND Literal with W = . Before Instruction, AND Literal with W = Before Instruction. Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . Before Instruction, AND Literal with W = . W, AND Literal with W = = 0xA3. W, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = . After Instruction, AND",
    "ADD W and Carry bit to f\nLiteral with W = After Instruction. After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . After Instruction, AND Literal with W = . W, AND Literal with W = = 0x03. W, AND Literal with W = . W, AND Literal with W = . W, AND Literal with W = ",
    "Example:\nADDWFC\nREG, W",
    "Before Instruction\nCarry bit\n=\n1\nREG\n=\n0x02\nW\n=\n0x4D\nAfter Instruction\nCarry bit\n=\n0\nREG\n=\n0x02\nW\n=\n0x50",
    "PIC18F2220/2320/4220/4320\nANDWF, 1 = ANDWF. ANDWF, 2 = AND Wwith f. ANDWF, 3 = AND Wwith f. ANDWF, 4 = AND Wwith f. ANDWF, 5 = AND Wwith f. Syntax:, 1 = Syntax:. Syntax:, 2 = [ label ] ANDWF. Syntax:, 3 = [ label ] ANDWF. Syntax:, 4 = f [,d [,a]]. Syntax:, 5 = f [,d [,a]]. Operands:, 1 = Operands:. Operands:, 2 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 4 = . Operands:, 5 = . Operation:, 1 = Operation:. Operation:, 2 = (W) .AND. (f) \u2192 dest. Operation:, 3 = (W) .AND. (f) \u2192 dest. Operation:, 4 =",
    "PIC18F2220/2320/4220/4320\n(W) .AND. (f) \u2192 dest. Operation:, 5 = (W) .AND. (f) \u2192 dest. Status Affected:, 1 = Status Affected:. Status Affected:, 2 = N, Z. Status Affected:, 3 = N, Z. Status Affected:, 4 = N, Z. Status Affected:, 5 = N, Z. Encoding:, 1 = Encoding:. Encoding:, 2 = 0001. Encoding:, 3 = 01da. Encoding:, 4 = ffff. Encoding:, 5 = ffff. Description:, 1 = Description:. Description:, 2 = The contents of Ware ANDGLYPH<146>ed with register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145>f",
    "PIC18F2220/2320/4220/4320\nGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the BSR will not be overridden (default).. Description:, 3 = The contents of Ware ANDGLYPH<146>ed with register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If",
    "PIC18F2220/2320/4220/4320\nGLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the BSR will not be overridden (default).. Description:, 4 = The contents of Ware ANDGLYPH<146>ed with register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the BSR will not be overridden (default).. Description:, 5 =",
    "PIC18F2220/2320/4220/4320\nThe contents of Ware ANDGLYPH<146>ed with register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the BSR will not be overridden (default).. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Words:, 5 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1.",
    "PIC18F2220/2320/4220/4320\nCycles:, 3 = 1. Cycles:, 4 = 1. Cycles:, 5 = 1. Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. Q Cycle Activity:, 5 = Q Cycle Activity:. Q1, 1 = . Q1, 2 = Q2. Q1, 3 = Q3. Q1, 4 = . Q1, 5 = Q4. , 1 = Decode. , 2 = Read register GLYPH<145>f GLYPH<146>. , 3 = Process Data. , 4 = Write. , 5 = to destination",
    "Example:\nANDWF\nREG, W",
    "Before Instruction\nW\n=\n0x17\nREG\n=\n0xC2\nAfter Instruction\nW\n=\n0x02\nREG\n=\n0xC2",
    "Branch if Carry\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\n[ label ]  BC    n\n-128 \u2264 n \u2264 127\nif Carry bit is GLYPH<145> 1 GLYPH<146>, (PC) + 2 + 2n \u2192 PC\nNone\nIf the Carry bit is GLYPH<145> 1 GLYPH<146>, then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\n1\n1(2)\nQ Cycle Activity: If Jump:\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:",
    "Branch if Carry\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = No operation",
    "Example:\nHERE\nBC\nJUMP\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Carry\n=\n1;\nPC\n=\naddress\n(JUMP)\nIf Carry\n=\n0;\nPC\n=\naddress\n(HERE + 2)",
    "Bit Clear f\nSyntax:\n[\nlabel\n]  BCF     f,b[,a]\nOperands:\n0 \u2264 f \u2264 255\n0 \u2264 b \u2264 7\na \u2208 [0,1]\nOperation:\n0 \u2192 f<b>\nStatus Affected:",
    "None\nEncoding:\n1001\nbbba\nffff\nffff\nDescription:\nBit GLYPH<145>bGLYPH<146> in register GLYPH<145>fGLYPH<146> is cleared. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister GLYPH<145>fGLYPH<146>\nProcess\nData\nWrite\nregister GLYPH<145>fGLYPH<146>\nExample:\nBCF\nFLAG_REG,  7\nBefore Instruction FLAG_REG = 0xC7 After Instruction FLAG_REG = 0x47",
    "Branch if Negative\nSyntax:\n[ label ]  BN    n\nOperands:\n-128 \u2264 n \u2264 127\nOperation:\nif Negative bit is GLYPH<145> 1 GLYPH<146> , (PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1110\n0110\nnnnn\nnnnn\nDescription:\nIf the Negative bit is GLYPH<145> 1 GLYPH<146> , then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\nWords:\n1\nCycles:\n1(2)\nQ Cycle Activity: If Jump:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\nGLYPH<145>nGLYPH<146>\nProcess\nData\nWrite to PC\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nIf No Jump:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\nGLYPH<145>nGLYPH<146>\nProcess Data\nNo\noperation",
    "Example:\nHERE\nBN Jump\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf Negative\n=\n1;\nPC\n=\naddress\n(Jump)\nIf Negative\n=\n0;\nPC\n=\naddress (HERE + 2)\nWords:\nCycles:",
    "Branch if Not Carry\nSyntax:\n[\nlabel\n]  BNC    n\nOperands:\n-128 \u2264 n \u2264 127\nOperation:\nif Carry bit is GLYPH<145> 0 GLYPH<146>, (PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1110\n0011\nnnnn\nnnnn\nDescription:\nIf the Carry bit is GLYPH<145> 0 GLYPH<146>, then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\n1\n1(2)\nQ Cycle Activity: If Jump:\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:\nQ1\nDecode\nQ2\nRead literal\nQ4\nQ3\nProcess Data\nNo",
    "Branch if Not Carry\nGLYPH<145>nGLYPH<146>\noperation",
    "Example:\nHERE\nBNC\nJump\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Carry\n=\n0;\nPC\n=\naddress\n(Jump)\nIf Carry\n=\n1;\nPC\n=\naddress\n(HERE + 2)",
    "Branch if Not Negative\nSyntax:\n[\nlabel\n]  BNN    n\nOperands:\n-128 \u2264 n \u2264 127\nOperation:\nif Negative bit is GLYPH<145> 0 GLYPH<146> ,\n(PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1110\n0111\nnnnn\nnnnn\nDescription:\nIf the Negative bit is GLYPH<145> 0 GLYPH<146> , then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\nWords:\n1\nCycles:\n1(2)\nQ Cycle Activity: If Jump:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\nGLYPH<145>nGLYPH<146>\nProcess Data\nWrite to PC\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nIf No Jump:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\nGLYPH<145>nGLYPH<146>\nProcess Data\nNo\noperation",
    "Example:\nHERE\nBNN Jump\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Negative\n=\n0;\nPC\n=\naddress\n(Jump)\nIf Negative\n=\n1;\nPC\n=\naddress\n(HERE + 2)",
    "Branch if Not Overflow\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\n[ label ]  BNOV    n\n-128 \u2264 n \u2264 127\nif Overflow bit is GLYPH<145> 0 GLYPH<146> , (PC) + 2 + 2n \u2192 PC\nNone\n1110\n0101\nnnnn nnnn\nIf the Overflow bit is GLYPH<145> 0 GLYPH<146> , then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\n1\n1(2)\nQ Cycle Activity: If Jump:\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:\nQ1\nDecode\nQ2\nRead literal",
    "Branch if Not Overflow\nQ3\nProcess\nQ4\nNo\nGLYPH<145>nGLYPH<146>\nData operation",
    "Example:\nHERE\nBNOV Jump\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Overflow\n=\n0;\nPC\n=\naddress\n(Jump)\nIf Overflow\n=\n1;\nPC\n=\naddress\n(HERE + 2)",
    "Example:\nSyntax:, Branch if Not Zero = [ label ] BNZ n. Syntax:, Branch if Not Zero = [ label ] BNZ n. Syntax:, Branch if Not Zero = [ label ] BNZ n. Syntax:, Branch if Not Zero = [ label ] BNZ n. Syntax:, Branch if Not Zero = [ label ] BNZ n. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operands:, Branch if Not Zero = -128 \u2264 n \u2264 127. Operation:, Branch if Not Zero = if Zero bit is GLYPH<145> 0 GLYPH<146>, (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is GLYPH<145> 0 GLYPH<146>, (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is GLYPH<145> 0",
    "Example:\nGLYPH<146>, (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is GLYPH<145> 0 GLYPH<146>, (PC) + 2 + 2n \u2192 PC. Operation:, Branch if Not Zero = if Zero bit is GLYPH<145> 0 GLYPH<146>, (PC) + 2 + 2n \u2192 PC. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Status Affected:, Branch if Not Zero = None. Encoding:, Branch if Not Zero = 1110. Encoding:, Branch if Not Zero = 0001. Encoding:, Branch if Not Zero = nnnn. Encoding:, Branch if Not Zero = nnnn. Encoding:, Branch if Not Zero = nnnn. Description:, Branch if Not Zero = If the Zero bit is GLYPH<145> 0 GLYPH<146>, then the program will branch. The 2GLYPH<146>s complement number GLYPH<145>",
    "Example:\n2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is GLYPH<145> 0 GLYPH<146>, then the program will branch. The 2GLYPH<146>s complement number GLYPH<145> 2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is GLYPH<145> 0 GLYPH<146>, then the program will branch. The 2GLYPH<146>s complement number GLYPH<145> 2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not",
    "Example:\nZero = If the Zero bit is GLYPH<145> 0 GLYPH<146>, then the program will branch. The 2GLYPH<146>s complement number GLYPH<145> 2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Description:, Branch if Not Zero = If the Zero bit is GLYPH<145> 0 GLYPH<146>, then the program will branch. The 2GLYPH<146>s complement number GLYPH<145> 2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Words:, Branch if Not Zero = 1. Cycles:, Branch if Not Zero =",
    "Example:\n1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Cycles:, Branch if Not Zero = 1(2). Q Cycle Activity: If Jump:, Branch if Not Zero = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Zero = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Zero = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Zero = Q Cycle Activity: If Jump:. Q Cycle Activity: If Jump:, Branch if Not Zero = Q Cycle Activity: If Jump:. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q4. Q1, Branch if Not Zero = Q4. Decode, Branch if Not Zero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not",
    "Example:\nZero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not Zero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not Zero = Write to PC. Decode, Branch if Not Zero = Write to PC. No operation, Branch if Not Zero = No operation No operation. No operation, Branch if Not Zero = No operation No operation. No operation, Branch if Not Zero = No operation No operation. No operation, Branch if Not Zero = No operation. No operation, Branch if Not Zero = No operation. If No Jump:, Branch if Not Zero = If No Jump:. If No Jump:, Branch if Not Zero = If No Jump:. If No Jump:, Branch if Not Zero = If No Jump:. If No Jump:, Branch if Not Zero = If No Jump:. If No Jump:, Branch if Not Zero = If No Jump:. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q2 Q3. Q1, Branch if Not Zero = Q4.",
    "Example:\nQ1, Branch if Not Zero = Q4. Decode, Branch if Not Zero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not Zero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not Zero = Read literal GLYPH<145>nGLYPH<146> Process Data. Decode, Branch if Not Zero = No operation. Decode, Branch if Not Zero = No operation. Example: HERE, Branch if Not Zero = Example: HERE. Example: HERE, Branch if Not Zero = BNZ. Example: HERE, Branch if Not Zero = Jump. Example: HERE, Branch if Not Zero = Jump. Example: HERE, Branch if Not Zero = . Before Instruction PC, Branch if Not Zero = =. Before Instruction PC, Branch if Not Zero = address (HERE). Before Instruction PC, Branch if Not Zero = . Before Instruction PC, Branch if Not Zero = . Before Instruction PC, Branch if Not Zero = . After Instruction If Zero, Branch if Not Zero = =. After Instruction If Zero, Branch if Not Zero = 0; address 1;. After Instruction If Zero, Branch",
    "Example:\nif Not Zero = (Jump). After Instruction If Zero, Branch if Not Zero = (Jump). After Instruction If Zero, Branch if Not Zero = . PC = If Zero = PC =, Branch if Not Zero = PC = If Zero = PC =. PC = If Zero = PC =, Branch if Not Zero = . PC = If Zero = PC =, Branch if Not Zero = address (HERE. PC = If Zero = PC =, Branch if Not Zero = address (HERE. PC = If Zero = PC =, Branch if Not Zero = + 2)",
    "Unconditional Branch\nSyntax:\n[\nlabel\n]  BRA    n\nOperands:\n-1024 \u2264 n \u2264 1023\nOperation:\n(PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1101\n0nnn\nnnnn\nnnnn\nDescription:\nAdd the 2GLYPH<146>s complement number GLYPH<145> 2nGLYPH<146> to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead literal\nGLYPH<145>nGLYPH<146>\nProcess\nData\nWrite to PC\nNo\noperation\nNo\noperation\nNo\noperation\nNo\noperation\nBefore Instruction PC, HERE = =. Before Instruction PC, BRA = address. Before Instruction PC, Jump = (HERE). After Instruction PC, HERE = =. After Instruction PC, BRA = address. After Instruction PC, Jump = (Jump)",
    "Unconditional Branch\nSyntax:, Bit Set f = [ label ] BSF. Syntax:, Bit Set f = [ label ] BSF. Syntax:, Bit Set f = f,b[,a]. Syntax:, Bit Set f = f,b[,a]. Syntax:, Bit Set f = f,b[,a]. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, Bit Set f = 0 \u2264 f \u2264 255 0 \u2264 b \u2264 7 a \u2208 [0,1]. Operands:, Bit Set f = . Operands:, Bit Set f = . Operands:, Bit Set f = . Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = 1 \u2192 f<b>. Operation:, Bit Set f = . Operation:, Bit Set f = . Operation:, Bit Set f = . Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = None. Status Affected:, Bit Set f = . Status Affected:, Bit Set f = . Status Affected:, Bit Set f = . Encoding:,",
    "Unconditional Branch\nBit Set f = 1000. Encoding:, Bit Set f = bbba. Encoding:, Bit Set f = ffff. Encoding:, Bit Set f = . Encoding:, Bit Set f = ffff. Description:, Bit Set f = Bit GLYPH<145> bGLYPH<146> in register GLYPH<145>f GLYPH<146> is set. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value.. Description:, Bit Set f = Bit GLYPH<145> bGLYPH<146> in register GLYPH<145>f GLYPH<146> is set. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the",
    "Unconditional Branch\nbank will be selected as per the BSR value.. Description:, Bit Set f = Bit GLYPH<145> bGLYPH<146> in register GLYPH<145>f GLYPH<146> is set. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value.. Description:, Bit Set f = Bit GLYPH<145> bGLYPH<146> in register GLYPH<145>f GLYPH<146> is set. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value.. Description:, Bit Set f = Bit GLYPH<145> bGLYPH<146>",
    "Unconditional Branch\nin register GLYPH<145>f GLYPH<146> is set. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value.. Words:, Bit Set f = 1. Words:, Bit Set f = 1. Words:, Bit Set f = . Words:, Bit Set f = . Words:, Bit Set f = . Cycles:, Bit Set f = 1. Cycles:, Bit Set f = 1. Cycles:, Bit Set f = . Cycles:, Bit Set f = . Cycles:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q Cycle Activity:, Bit Set f = . Q1, Bit Set f = Q2. Q1, Bit Set f = Q2. Q1, Bit Set f =",
    "Unconditional Branch\nQ3. Q1, Bit Set f = Q3. Q1, Bit Set f = Q4. Decode, Bit Set f = Read register GLYPH<145>f GLYPH<146>. Decode, Bit Set f = Read register GLYPH<145>f GLYPH<146>. Decode, Bit Set f = Process Data. Decode, Bit Set f = Process Data. Decode, Bit Set f = Write register GLYPH<145>f GLYPH<146>. Example:, Bit Set f = BSF. Example:, Bit Set f = FLAG_REG,. Example:, Bit Set f = FLAG_REG,. Example:, Bit Set f = 7. Example:, Bit Set f = . Before Instruction FLAG_REG =, Bit Set f = Before Instruction FLAG_REG =. Before Instruction FLAG_REG =, Bit Set f = . Before Instruction FLAG_REG =, Bit Set f = . Before Instruction FLAG_REG =, Bit Set f = . Before Instruction FLAG_REG =, Bit Set f = ",
    "PIC18F2220/2320/4220/4320\nBTFSC",
    "Bit Test File, Skip if Clear\nSyntax:\n[ label ]  BTFSC   f,b[,a]\nOperands:\n0 \u2264 f \u2264 255\n0 \u2264 b \u2264 7\na \u2208 [0,1]\nOperation:\nskip if (f<b>) = 0\nStatus Affected:\nNone\nEncoding:\n1011\nbbba\nffff\nffff\nDescription:",
    "Bit Test File, Skip if Clear\nIf bit GLYPH<145>bGLYPH<146> in register GLYPH<145>fGLYPH<146> is GLYPH<145> 0 GLYPH<146>, then the next instruction is skipped. If bit GLYPH<145>bGLYPH<146> is GLYPH<145> 0 GLYPH<146>, then the next instruc- tion fetched during the current instruction execution is discarded and a NOP is executed instead, mak- ing this a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146>  = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Bit Test File, Skip if Set\nSyntax:\n[ label ]  BTFSS  f,b[,a]\nOperands:\n0 \u2264 f \u2264 255\n0 \u2264 b < 7\na \u2208 [0,1]\nOperation:\nskip if (f<b>) = 1\nStatus Affected:\nNone\nEncoding:\n1010\nbbba\nffff\nffff\nDescription:",
    "Bit Test File, Skip if Set\nIf bit GLYPH<145>bGLYPH<146> in register GLYPH<145>fGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the next instruction is skipped. If bit GLYPH<145>bGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the next instruc- tion fetched during the current instruction execution is discarded and a NOP is executed instead, mak- ing this a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146>  = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nIf skip:\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nFALSE\nTRUE\nBTFSC FLAG, 1\n:\n:\nBefore Instruction\nPC\n=\naddress (HERE)\nAfter Instruction\nIf FLAG<1>\n=\n0;\nPC\n=\naddress\n(TRUE)\nIf FLAG<1>\n=\n1;\nPC\n=\naddress (FALSE)\nIf skip:\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE\nBTFSS FLAG, 1\nFALSE\nTRUE\nBefore Instruction\nPC\nAfter Instruction\nIf FLAG<1>\nPC\nIf FLAG<1>\nPC\n=\n=\n=\n=\n=\n:\n:\naddress (HERE)\n0;\naddress\n(FALSE)\n1;\naddress (TRUE)",
    "PIC18F2220/2320/4220/4320\nSyntax:, Bit Toggle f = [ label ] BTG f,b[,a]. Syntax:, Bit Toggle f = [ label ] BTG f,b[,a]. Syntax:, Bit Toggle f = [ label ] BTG f,b[,a]. Syntax:, Bit Toggle f = [ label ] BTG f,b[,a]. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operands:, Bit Toggle f = 0 \u2264 f \u2264 255 0 \u2264 b < 7 a \u2208 [0,1]. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Operation:, Bit Toggle f =",
    "PIC18F2220/2320/4220/4320\n(f<b>) \u2192 f<b>. Operation:, Bit Toggle f = (f<b>) \u2192 f<b>. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Status Affected:, Bit Toggle f = None. Encoding:, Bit Toggle f = 0111. Encoding:, Bit Toggle f = bbba. Encoding:, Bit Toggle f = ffff. Encoding:, Bit Toggle f = ffff. Description:, Bit Toggle f = Bit GLYPH<145> bGLYPH<146> in data memory location GLYPH<145>f GLYPH<146> is inverted. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Bit Toggle",
    "PIC18F2220/2320/4220/4320\nf = Bit GLYPH<145> bGLYPH<146> in data memory location GLYPH<145>f GLYPH<146> is inverted. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Bit Toggle f = Bit GLYPH<145> bGLYPH<146> in data memory location GLYPH<145>f GLYPH<146> is inverted. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Bit Toggle f = Bit GLYPH<145>",
    "PIC18F2220/2320/4220/4320\nbGLYPH<146> in data memory location GLYPH<145>f GLYPH<146> is inverted. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, Bit Toggle f = 1. Words:, Bit Toggle f = 1. Words:, Bit Toggle f = 1. Words:, Bit Toggle f = 1. Cycles:, Bit Toggle f = 1. Cycles:, Bit Toggle f = 1. Cycles:, Bit Toggle f = 1. Cycles:, Bit Toggle f = 1. Q Cycle Activity:, Bit Toggle f = Q Cycle Activity:. Q Cycle Activity:, Bit Toggle f = Q Cycle Activity:. Q Cycle Activity:, Bit Toggle f = Q Cycle Activity:. Q Cycle Activity:, Bit Toggle f = Q Cycle Activity:.",
    "PIC18F2220/2320/4220/4320\nQ1, Bit Toggle f = Q2. Q1, Bit Toggle f = Q3. Q1, Bit Toggle f = Q4. Q1, Bit Toggle f = . Decode, Bit Toggle f = Read register GLYPH<145>f GLYPH<146>. Decode, Bit Toggle f = Process Data. Decode, Bit Toggle f = Write register. Decode, Bit Toggle f = GLYPH<145>f GLYPH<146>. , Bit Toggle f = . , Bit Toggle f = 4. , Bit Toggle f = . , Bit Toggle f = . Example:, Bit Toggle f = BTG. Example:, Bit Toggle f = PORTC,. Example:, Bit Toggle f = . Example:, Bit Toggle f = . Before Instruction: PORTC =, Bit Toggle f = 0111. Before Instruction: PORTC =, Bit Toggle f = 0101. Before Instruction: PORTC =, Bit Toggle f = [0x75]. Before Instruction: PORTC =, Bit Toggle f = . After",
    "PIC18F2220/2320/4220/4320\nInstruction:, Bit Toggle f = After Instruction:. After Instruction:, Bit Toggle f = After Instruction:. After Instruction:, Bit Toggle f = After Instruction:. After Instruction:, Bit Toggle f = After Instruction:. PORTC =, Bit Toggle f = 0110. PORTC =, Bit Toggle f = 0101. PORTC =, Bit Toggle f = [0x65]. PORTC =, Bit Toggle f = ",
    "Branch if Overflow\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:\n[ label ]  BOV    n\n-128 \u2264 n \u2264 127\nif Overflow bit is GLYPH<145> 1 GLYPH<146> ,\n(PC) + 2 + 2n \u2192 PC\nNone\n1110\n0100\nnnnn nnnn\nIf the Overflow bit is GLYPH<145> 1 GLYPH<146> , then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\n1\n1(2)\nQ Cycle Activity: If Jump:\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:",
    "Branch if Overflow\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = No operation",
    "Example:\nHERE\nBOV JUMP\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nIf Overflow\n=\n1;\nPC\n=\naddress\n(JUMP)\nIf Overflow\n=\n0;\nPC\n=\naddress\n(HERE + 2)",
    "PIC18F2220/2320/4220/4320\nBZ",
    "Branch if Zero\nSyntax:\n[\nlabel\n]  BZ    n\nOperands:\n-128 \u2264 n \u2264 127\nOperation:\nif Zero bit is GLYPH<145> 1 GLYPH<146>,\n(PC) + 2 + 2n \u2192 PC\nStatus Affected:\nNone\nEncoding:\n1110\n0000\nnnnn\nnnnn\nDescription:\nIf the Zero bit is GLYPH<145> 1 GLYPH<146>, then the program will branch.\nThe 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> is added to the PC. Since the PC will have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is then a two-cycle instruction.\nWords:\n1\nCycles:\n1(2)\nQ Cycle Activity:\nIf Jump:\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf No Jump:",
    "Branch if Zero\nDecode, Q2 = Read literal GLYPH<145>nGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = No operation\nBefore Instruction, HERE = . Before Instruction, BZ = . Before Instruction, Jump = . PC, HERE = =. PC, BZ = address. PC, Jump = (HERE). After Instruction, HERE = . After Instruction, BZ = . After Instruction, Jump = . If Zero PC, HERE = = =. If Zero PC, BZ = 1; address. If Zero PC, Jump = (Jump). If Zero PC, HERE = = =. If Zero PC, BZ = 0; address. If Zero PC, Jump = (HERE +",
    "Branch if Zero\nSyntax:, Subroutine Call = [ label ] CALL k [,s]. Syntax:, Subroutine Call = [ label ] CALL k [,s]. Syntax:, Subroutine Call = [ label ] CALL k [,s]. Syntax:, Subroutine Call = [ label ] CALL k [,s]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operands:, Subroutine Call = 0 \u2264 k \u2264 1048575 s \u2208 [0,1]. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, (BSR) \u2192 BSRS. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 ,",
    "Branch if Zero\n(W) \u2192 WS, (STATUS) \u2192 STATUSS, (BSR) \u2192 BSRS. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, (BSR) \u2192 BSRS. Operation:, Subroutine Call = (PC) + 4 \u2192 TOS, k \u2192 PC<20:1>; if s = 1 , (W) \u2192 WS, (STATUS) \u2192 STATUSS, (BSR) \u2192 BSRS. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Status Affected:, Subroutine Call = None. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 1110 1111. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = 110s k 19 kkk. Encoding: 1st word (k<7:0>) 2nd",
    "Branch if Zero\nword(k<19:8>), Subroutine Call = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Subroutine Call = kkkk 0 kkkk 8\nDescription:\nSubroutine call of entire 2 Mbyte memory range. First, return address (PC +  4) is pushed onto the return stack. If GLYPH<145>sGLYPH<146> = 1 , the W, STATUS and BSR registers are also pushed into their respective shadow registers, WS, STATUSS and BSRS. If GLYPH<145>sGLYPH<146> = 0 , no update occurs (default). Then, the 20-bit value GLYPH<145>kGLYPH<146> is loaded into PC<20:1>. CALL is a two-cycle instruction.\nWords:\n2\nCycles:\n2\nQ Cycle Activity:",
    "Branch if Zero\nDecode, Q2 = Read literal GLYPH<145>kGLYPH<146><7:0>,. Decode, Q3 = Push PC to stack. Decode, Q4 = Read literal GLYPH<145>kGLYPH<146><19:8>, Write to PC. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation",
    "Example:\nHERE\nCALL   THERE,FAST\nBefore Instruction\nPC\n=\naddress\n(HERE)\nAfter Instruction\nPC\n=\naddress\n(THERE)\nTOS\n=\naddress\n(HERE + 4)\nWS\n=\nW\nBSRS\n=\nBSR\nSTATUSS=\nSTATUS",
    "PIC18F2220/2320/4220/4320\nSyntax:, Clear f = [ label ] CLRF. Syntax:, Clear f = [ label ] CLRF. Syntax:, Clear f = f [,a]. Syntax:, Clear f = f [,a]. Syntax:, Clear f = f [,a]. Syntax:, Clear f = f [,a]. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Clear f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Clear f = . Operands:, Clear f = . Operands:, Clear f = . Operands:, Clear f = . Operation:, Clear f = 000h \u2192 f, 1 \u2192 Z. Operation:, Clear f = 000h \u2192 f, 1 \u2192 Z. Operation:, Clear f = . Operation:, Clear f = . Operation:, Clear f = . Operation:, Clear f = . Status Affected:, Clear f = Z. Status Affected:, Clear f = Z. Status Affected:, Clear f = . Status Affected:, Clear f = . Status Affected:, Clear f",
    "PIC18F2220/2320/4220/4320\n= . Status Affected:, Clear f = . Encoding:, Clear f = 0110. Encoding:, Clear f = 101a. Encoding:, Clear f = ffff. Encoding:, Clear f = . Encoding:, Clear f = ffff. Encoding:, Clear f = ffff. Description:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default)..",
    "PIC18F2220/2320/4220/4320\nDescription:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If",
    "PIC18F2220/2320/4220/4320\nGLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Clear f = Clears the contents of the specified register. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, Clear f = 1. Words:, Clear f = 1. Words:, Clear f = . Words:, Clear f = . Words:, Clear f = . Words:, Clear f = . Cycles:, Clear f = 1. Cycles:, Clear f = 1. Cycles:, Clear f = . Cycles:, Clear f = . Cycles:, Clear f = . Cycles:, Clear f = . Q Cycle Activity:, Clear f = Q Cycle Activity:. Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle",
    "PIC18F2220/2320/4220/4320\nActivity:, Clear f = . Q Cycle Activity:, Clear f = . Q Cycle Activity:, Clear f = . Q1, Clear f = Q2. Q1, Clear f = . Q1, Clear f = Q3. Q1, Clear f = . Q1, Clear f = Q4. Q1, Clear f = Q4. Decode, Clear f = Read. Decode, Clear f = GLYPH<145>f GLYPH<146>. Decode, Clear f = Process Data. Decode, Clear f = . Decode, Clear f = Write register GLYPH<145>f GLYPH<146>. Decode, Clear f = Write register GLYPH<145>f GLYPH<146>. , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = register. , Clear f = register. Example:, Clear f = . Example:, Clear f = . Example:, Clear f = . Example:, Clear f = . Example:, Clear f = . Example:, Clear f = . After, Clear f =",
    "PIC18F2220/2320/4220/4320\n. After, Clear f = . After, Clear f = . After, Clear f = . After, Clear f = CLRF. After, Clear f = CLRF. FLAG_REG, Clear f = =. FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = FLAG_REG. , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = Instruction. , Clear f = Instruction. , Clear f = =. , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = . Before, Clear f = . Before, Clear f = . Before, Clear f = . Before, Clear f = . Before, Clear f = . Before, Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = 0x5A. , Clear",
    "PIC18F2220/2320/4220/4320\nf = . , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = . , Clear f = Instruction. , Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . FLAG_REG, Clear f = . , Clear f = . , Clear f = . , Clear f = 0x00. , Clear f = . , Clear f = . , Clear f = ",
    "PIC18F2220/2320/4220/4320\nSyntax:, Clear Watchdog Timer = [ label ] CLRWDT. Syntax:, Clear Watchdog Timer = [ label ] CLRWDT. Syntax:, Clear Watchdog Timer = [ label ] CLRWDT. Syntax:, Clear Watchdog Timer = [ label ] CLRWDT. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operands:, Clear Watchdog Timer = None. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO,. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO,. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO,. Operation:, Clear Watchdog Timer = 000h \u2192 WDT, 000h \u2192 WDT postscaler, 1 \u2192 TO,. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer =",
    "PIC18F2220/2320/4220/4320\nTO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Status Affected:, Clear Watchdog Timer = TO, PD. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = 0000. Encoding:, Clear Watchdog Timer = . Encoding:, Clear Watchdog Timer = 0000. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set.. Description:, Clear Watchdog Timer = CLRWDT instruction resets the Watchdog Timer. It also resets the postscaler of the WDT. Status bits TO and PD are set..",
    "PIC18F2220/2320/4220/4320\nWords:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Words:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Cycles:, Clear Watchdog Timer = 1. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q Cycle Activity:, Clear Watchdog Timer = Q Cycle Activity:. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q2. Q1, Clear Watchdog Timer = Q3. Q1, Clear Watchdog Timer = Q3. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = No operation. Decode, Clear Watchdog Timer = Process Data. Decode, Clear Watchdog Timer = Process Data. Example: CLRWDT, Clear Watchdog Timer = Example:",
    "PIC18F2220/2320/4220/4320\nCLRWDT. Example: CLRWDT, Clear Watchdog Timer = Example: CLRWDT. Example: CLRWDT, Clear Watchdog Timer = Example: CLRWDT. Example: CLRWDT, Clear Watchdog Timer = Example: CLRWDT. Before Instruction WDT, Clear Watchdog Timer = Before Instruction WDT. Before Instruction WDT, Clear Watchdog Timer = = ?. Before Instruction WDT, Clear Watchdog Timer = . Before Instruction WDT, Clear Watchdog Timer = . After Instruction WDT, Clear Watchdog Timer = After Instruction WDT. After Instruction WDT, Clear Watchdog Timer = = 0x00 =. After Instruction WDT, Clear Watchdog Timer = . After Instruction WDT, Clear Watchdog Timer = . TO, Clear Watchdog Timer = TO. TO, Clear Watchdog Timer = =. TO, Clear Watchdog Timer = 1. TO, Clear Watchdog Timer = 1. PD, Clear Watchdog Timer = PD. PD, Clear Watchdog Timer = =. PD, Clear Watchdog Timer = 1. PD, Clear Watchdog Timer = 1",
    "PIC18F2220/2320/4220/4320\nCOMF, 1 = COMF. COMF, 2 = Complement f. COMF, 3 = Complement f. COMF, 4 = Complement f. Syntax:, 1 = Syntax:. Syntax:, 2 = [ label ] COMF. Syntax:, 3 = [ label ] COMF. Syntax:, 4 = f [,d [,a]]. Operands:, 1 = Operands:. Operands:, 2 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, 4 = . Operation:, 1 = Operation:. Operation:, 2 = \u2192 dest ( f ). Operation:, 3 = \u2192 dest ( f ). Operation:, 4 = . Status Affected:, 1 = Status Affected:. Status Affected:, 2 = N, Z. Status Affected:, 3 = . Status Affected:, 4 = . Encoding:, 1 = Encoding:. Encoding:, 2 = 0001. Encoding:, 3 = 11da.",
    "PIC18F2220/2320/4220/4320\nEncoding:, 4 = ffff. Description:, 1 = Description:. Description:, 2 = The contents of register GLYPH<145>f GLYPH<146> are complemented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, 3 = The contents of register GLYPH<145>f GLYPH<146> are complemented. If GLYPH<145>",
    "PIC18F2220/2320/4220/4320\ndGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, 4 = The contents of register GLYPH<145>f GLYPH<146> are complemented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1",
    "PIC18F2220/2320/4220/4320\nGLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = . Words:, 4 = . Cycles:, 1 = Cycles:. Cycles:, 2 = 1. Cycles:, 3 = . Cycles:, 4 = . Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = Q3. , 1 = Decode. , 2 = Read",
    "PIC18F2220/2320/4220/4320\nregister GLYPH<145>f GLYPH<146>. , 3 = Process Data. , 4 = Process Data. Example:, 1 = Example:. Example:, 2 = COMF. Example:, 3 = REG,. Example:, 4 = W. Before Instruction, 1 = Before Instruction. Before Instruction, 2 = Before Instruction. Before Instruction, 3 = . Before Instruction, 4 = . , 1 = REG. , 2 = = 0x13. , 3 = . , 4 = . After Instruction, 1 = After Instruction. After Instruction, 2 = After Instruction. After Instruction, 3 = . After Instruction, 4 = . , 1 = REG. , 2 = = 0x13. , 3 = . , 4 = ",
    "PIC18F2220/2320/4220/4320\nSyntax:, Compare f with W, Skip if f = W = [ label ] CPFSEQ f [,a]. Syntax:, Compare f with W, Skip if f = W = [ label ] CPFSEQ f [,a]. Syntax:, Compare f with W, Skip if f = W = [ label ] CPFSEQ f [,a]. Syntax:, Compare f with W, Skip if f = W = [ label ] CPFSEQ f [,a]. Syntax:, Compare f with W, Skip if f = W = [ label ] CPFSEQ f [,a]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208",
    "PIC18F2220/2320/4220/4320\n[0,1]. Operands:, Compare f with W, Skip if f = W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Compare f with W, Skip if f = W = (f) GLYPH<150> (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) GLYPH<150> (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) GLYPH<150> (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) GLYPH<150> (W), skip if (f) = (W) (unsigned comparison). Operation:, Compare f with W, Skip if f = W = (f) GLYPH<150> (W), skip if (f) = (W) (unsigned comparison). Status",
    "PIC18F2220/2320/4220/4320\nAffected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Status Affected:, Compare f with W, Skip if f = W = None. Encoding:, Compare f with W, Skip if f = W = 0110. Encoding:, Compare f with W, Skip if f = W = 0110. Encoding:, Compare f with W, Skip if f = W = 001a. Encoding:, Compare f with W, Skip if f = W = ffff. Encoding:, Compare f with W, Skip if f = W = ffff. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If GLYPH<145>f GLYPH<146> = W , then the fetched instruc- tion",
    "PIC18F2220/2320/4220/4320\nis discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If GLYPH<145>f GLYPH<146> = W , then the fetched instruc- tion is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then. Description:, Compare f with W, Skip if f",
    "PIC18F2220/2320/4220/4320\n= W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If GLYPH<145>f GLYPH<146> = W , then the fetched instruc- tion is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If GLYPH<145>f GLYPH<146> = W , then the fetched instruc- tion is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145>",
    "PIC18F2220/2320/4220/4320\naGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then. Description:, Compare f with W, Skip if f = W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If GLYPH<145>f GLYPH<146> = W , then the fetched instruc- tion is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then. Words:, Compare f with W, Skip if f = W = 1. Words:, Compare f with W, Skip if f = W = 1. Words:, Compare",
    "PIC18F2220/2320/4220/4320\nf with W, Skip if f = W = 1. Words:, Compare f with W, Skip if f = W = 1. Words:, Compare f with W, Skip if f = W = 1. Cycles:, Compare f with W, Skip if f = W = 1(2) Note: 3 cycles if skip and followed. Cycles:, Compare f with W, Skip if f = W = 1(2) Note: 3 cycles if skip and followed. Cycles:, Compare f with W, Skip if f = W = 1(2) Note: 3 cycles if skip and followed. Cycles:, Compare f with W, Skip if f = W = 1(2) Note: 3 cycles if skip and followed. Cycles:, Compare f with W, Skip if f = W = 1(2) Note: 3 cycles if skip and followed. Q Cycle Activity:, Compare f with W, Skip if f = W = Q Cycle Activity:. Q Cycle Activity:, Compare f with W, Skip if f = W = Q Cycle Activity:. Q Cycle Activity:, Compare f with W, Skip if f = W = Q Cycle Activity:.",
    "PIC18F2220/2320/4220/4320\nQ Cycle Activity:, Compare f with W, Skip if f = W = Q Cycle Activity:. Q Cycle Activity:, Compare f with W, Skip if f = W = Q Cycle Activity:. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = . Q1, Compare f with W, Skip if f = W = Q4. Decode, Compare f with W, Skip if f = W = Read register GLYPH<145>f GLYPH<146>. Decode, Compare f with W, Skip if f = W = Read register GLYPH<145>f GLYPH<146>. Decode, Compare f with W, Skip if f = W = Process Data. Decode, Compare f with W, Skip if f = W = Process Data. Decode, Compare f with W, Skip if f = W = No operation. If skip:, Compare f",
    "PIC18F2220/2320/4220/4320\nwith W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. If skip:, Compare f with W, Skip if f = W = If skip:. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W = Q4. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No operation. No, Compare f with W, Skip if f = W = No operation. No, Compare f with",
    "PIC18F2220/2320/4220/4320\nW, Skip if f = W = No operation. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. If skip and followed by 2-word instruction:, Compare f with W, Skip if f = W = If skip and followed by 2-word instruction:. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q2. Q1, Compare f with W, Skip if f = W = Q3. Q1, Compare f with W, Skip if f = W =",
    "PIC18F2220/2320/4220/4320\nQ3. Q1, Compare f with W, Skip if f = W = Q4. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No operation. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. No, Compare f with W, Skip if f = W = No. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f = W = operation. operation, Compare f with W, Skip if f =",
    "PIC18F2220/2320/4220/4320\nW = operation. Example:, Compare f with W, Skip if f = W = HERE NEQUAL :. Example:, Compare f with W, Skip if f = W = HERE NEQUAL :. Example:, Compare f with W, Skip if f = W = CPFSEQ REG. Example:, Compare f with W, Skip if f = W = CPFSEQ REG. Example:, Compare f with W, Skip if f = W = CPFSEQ REG. Before Instruction, Compare f with W, Skip if f = W = Before Instruction. Before Instruction, Compare f with W, Skip if f = W = . Before Instruction, Compare f with W, Skip if f = W = . Before Instruction, Compare f with W, Skip if f = W = . Before Instruction, Compare f with W, Skip if f = W = . PC Address =, Compare f with W, Skip if f = W = PC Address =. PC Address =, Compare f with W, Skip if f = W = HERE. PC Address =, Compare f with W, Skip if f = W = HERE. PC Address =, Compare f with W, Skip",
    "PIC18F2220/2320/4220/4320\nif f = W = HERE. PC Address =, Compare f with W, Skip if f = W = HERE. W =, Compare f with W, Skip if f = W = W =. W =, Compare f with W, Skip if f = W = . W =, Compare f with W, Skip if f = W = . W =, Compare f with W, Skip if f = W = . W =, Compare f with W, Skip if f = W = . If REG = PC =, Compare f with W, Skip if f = W = If REG = PC =. If REG = PC =, Compare f with W, Skip if f = W = W;. If REG = PC =, Compare f with W, Skip if f = W = W;. If REG = PC =, Compare f with W, Skip if f = W = W;. If REG = PC =, Compare f with W, Skip if f = W = W;. If REG \u2260, Compare f with W, Skip if f = W = If REG \u2260. If REG \u2260, Compare f with W, Skip if f = W = Address (EQUAL)",
    "PIC18F2220/2320/4220/4320\nW;. If REG \u2260, Compare f with W, Skip if f = W = Address (EQUAL) W;. If REG \u2260, Compare f with W, Skip if f = W = Address (EQUAL) W;. If REG \u2260, Compare f with W, Skip if f = W = Address (EQUAL) W;. PC =, Compare f with W, Skip if f = W = PC =. PC =, Compare f with W, Skip if f = W = Address (NEQUAL). PC =, Compare f with W, Skip if f = W = Address (NEQUAL). PC =, Compare f with W, Skip if f = W = Address (NEQUAL). PC =, Compare f with W, Skip if f = W = Address (NEQUAL)\nCPFSGT",
    "Compare f with W, Skip if f > W\nSyntax:\n[\nlabel\n]   CPFSGT    f [,a]\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\n(f) - ( W),\nskip if (f) > (W)\n(unsigned comparison)\nStatus Affected:\nNone\nEncoding:\n0110\n010a\nffff\nffff\nDescription:\nCompares the contents of data memory location GLYPH<145>fGLYPH<146> to the contents of the W by performing an unsigned subtraction.\nIf the contents of GLYPH<145>fGLYPH<146> are greater than the contents of WREG  then the , fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:",
    "Compare f with W, Skip if f > W\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1\nDecode\nIf skip:\nQ1\nNo\nQ2\nQ3\nQ4\nRead register GLYPH<145>fGLYPH<146>\nQ2\nNo\nProcess\nData\nQ3\nNo operation\noperation operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE      CPFSGT REG\nNGREATER  :\nGREATER   :\nBefore Instruction\nPC\n=\nAddress (HERE)\nW\n=\n?\nAfter Instruction\nIf REG\n>\nW;\nPC\n=\nAddress (GREATER)\nIf REG\n\u2264\nW;\nPC\n=\nAddress (NGREATER)\nNo operation\nQ4\nNo operation",
    "Q Cycle Activity:\nSyntax:, Compare f with W, Skip if f < W = [ label ] CPFSLT. Syntax:, Compare f with W, Skip if f < W = [ label ] CPFSLT. Syntax:, Compare f with W, Skip if f < W = f [,a]. Syntax:, Compare f with W, Skip if f < W = . Operands:, Compare f with W, Skip if f < W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f < W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f < W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Compare f with W, Skip if f < W = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Compare f with W, Skip if f < W = (f) GLYPH<150> ( W), skip if (f) < (W) (unsigned comparison). Operation:, Compare f with W, Skip if f < W = (f)",
    "Q Cycle Activity:\nGLYPH<150> ( W), skip if (f) < (W) (unsigned comparison). Operation:, Compare f with W, Skip if f < W = (f) GLYPH<150> ( W), skip if (f) < (W) (unsigned comparison). Operation:, Compare f with W, Skip if f < W = (f) GLYPH<150> ( W), skip if (f) < (W) (unsigned comparison). Status Affected:, Compare f with W, Skip if f < W = None. Status Affected:, Compare f with W, Skip if f < W = None. Status Affected:, Compare f with W, Skip if f < W = None. Status Affected:, Compare f with W, Skip if f < W = None. Encoding:, Compare f with W, Skip if f < W = 0110. Encoding:, Compare f with W, Skip if f < W = 000a. Encoding:, Compare f with W, Skip if f < W = ffff. Encoding:, Compare f with W, Skip if f < W = ffff. Description:, Compare f with W, Skip if",
    "Q Cycle Activity:\nf < W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If the contents of GLYPH<145>f GLYPH<146> are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR will not be. Description:, Compare f with W, Skip if f < W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If the contents of GLYPH<145>f GLYPH<146> are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If",
    "Q Cycle Activity:\nGLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR will not be. Description:, Compare f with W, Skip if f < W = Compares the contents of data memory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If the contents of GLYPH<145>f GLYPH<146> are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR will not be. Description:, Compare f with W, Skip if f < W = Compares the contents of data",
    "Q Cycle Activity:\nmemory location GLYPH<145> fGLYPH<146> to the contents of Wby performing an unsigned subtraction. If the contents of GLYPH<145>f GLYPH<146> are less than the contents of W, then the fetched instruction is discarded and a NOP is executed instead, making this a two-cycle instruction. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the BSR will not be. Words:, Compare f with W, Skip if f < W = 1. Words:, Compare f with W, Skip if f < W = 1. Words:, Compare f with W, Skip if f < W = 1. Words:, Compare f with W, Skip if f < W = 1. Cycles:, Compare f with W, Skip if f < W = 1(2). Cycles:, Compare f with W, Skip if f < W = 1(2). Cycles:, Compare f",
    "Q Cycle Activity:\nwith W, Skip if f < W = 1(2). Cycles:, Compare f with W, Skip if f < W = 1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nskip:, Q2 = skip:. skip:, Q3 Process = skip:. skip:, Q4 No operation = skip:. Q1, Q2 = Q2. Q1, Q3 Process = Q3. Q1, Q4 No operation = Q4. No operation, Q2 = No operation. No operation, Q3 Process = No operation. No operation, Q4 No operation = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 Process = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 No operation = skip and followed by 2-word instruction:. Q1, Q2 = Q2. Q1, Q3 Process = Q3. Q1, Q4 No operation = Q4. No operation, Q2 = No operation. No operation, Q3 Process = No operation. No operation, Q4 No operation = No operation. No operation, Q2 = No operation. No operation, Q3 Process = No operation. No operation, Q4 No operation = No operation.",
    "Q Cycle Activity:\nExample:, Q2 = Example:. Example:, Q3 Process = Example:. Example:, Q4 No operation = Example:. Before PC, Q2 = Instruction = = ?. Before PC, Q3 Process = Address (HERE). Before PC, Q4 No operation = . After Instruction, Q2 = After Instruction. After Instruction, Q3 Process = After Instruction. After Instruction, Q4 No operation = After Instruction. If REG, Q2 = <. If REG, Q3 Process = W;. If REG, Q4 No operation = . PC, Q2 = =. PC, Q3 Process = Address (LESS). PC, Q4 No operation = . If REG, Q2 = \u2265 W;. If REG, Q3 Process = . If REG, Q4 No operation = . PC, Q2 = =. PC, Q3 Process = Address (NLESS). PC, Q4 No operation = ",
    "Decimal Adjust W Register\nSyntax:\n[ label\n]   DAW\nOperands:\nNone\nOperation:\nIf [W<3:0> >9] or [DC = 1] then, (W<3:0>) + 6 \u2192 W<3:0>; else, ( W<3:0>) \u2192 W<3:0>;\nIf [W<7:4> >9] or [C = 1] then, ( W<7:4>) + 6 \u2192 W<7:4>; else, (W<7:4>) \u2192 W<7:4>\nStatus Affected:\nC, DC\nEncoding:\n0000\n0000\n0000\n0111\nDescription:\nDAW adjusts the eight-bit value in W, resulting from the earlier addi- tion of two variables (each in packed BCD format) and produces a correct packed BCD result. The carry bit may be set by DAW regard- less of its setting prior to the DAW execution.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister W\nProcess\nData\nWrite\nW",
    "Example1:\nDAW",
    "Before Instruction\nW\n=\n0xA5\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n0x05\nC\n=\n1\nDC\n=\n0\nExample 2:\nBefore Instruction\nW\n=\n0xCE\nC\n=\n0\nDC\n=\n0\nAfter Instruction\nW\n=\n0x34\nC\n=\n1\nDC\n=\n0",
    "Before Instruction\nSyntax:, Decrement f = [ label ] DECF. Syntax:, Decrement f = [ label ] DECF. Syntax:, Decrement f = f [,d [,a]]. Syntax:, Decrement f = f [,d [,a]]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Decrement f = . Operands:, Decrement f = . Operation:, Decrement f = (f) GLYPH<150> 1 \u2192 dest. Operation:, Decrement f = (f) GLYPH<150> 1 \u2192 dest. Operation:, Decrement f = . Operation:, Decrement f = . Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = C, DC, N, OV, Z. Status Affected:, Decrement f = .",
    "Before Instruction\nStatus Affected:, Decrement f = . Encoding:, Decrement f = 0000. Encoding:, Decrement f = 01da. Encoding:, Decrement f = ffff. Encoding:, Decrement f = ffff. Description:, Decrement f = Decrement register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Decrement f = Decrement register",
    "Before Instruction\nGLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Decrement f = Decrement register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is",
    "Before Instruction\nGLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Decrement f = Decrement register GLYPH<145>f GLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is stored back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access",
    "Before Instruction\nBank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, Decrement f = 1. Words:, Decrement f = . Words:, Decrement f = . Words:, Decrement f = . Cycles:, Decrement f = 1. Cycles:, Decrement f = . Cycles:, Decrement f = . Cycles:, Decrement f = . Q Cycle Activity:, Decrement f = Q2. Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q Cycle Activity:, Decrement f = . Q1, Decrement f = . Q1, Decrement f = . Q1, Decrement f = Q3. Q1, Decrement f = Q4. Decode, Decrement f = . Decode, Decrement f = Read register GLYPH<145>f GLYPH<146>. Decode, Decrement f = Process Data. Decode,",
    "Before Instruction\nDecrement f = Write to destination. Example: DECF, Decrement f = Example: DECF. Example: DECF, Decrement f = CNT,. Example: DECF, Decrement f = . Example: DECF, Decrement f = . Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = Before Instruction. Before Instruction, Decrement f = . Before Instruction, Decrement f = . CNT Z, Decrement f = = =. CNT Z, Decrement f = 0x01 0. CNT Z, Decrement f = . CNT Z, Decrement f = . After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = After Instruction. After Instruction, Decrement f = . After Instruction, Decrement f = . CNT Z, Decrement f = = =. CNT Z, Decrement f = 0x00 1. CNT Z, Decrement f = . CNT Z, Decrement f = ",
    "PIC18F2220/2320/4220/4320\nDECFSZ",
    "Decrement f, Skip if 0\nSyntax:\n[\nlabel\n]   DECFSZ   f [,d [,a]]\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) GLYPH<150> 1 \u2192 dest,\nskip if result = 0\nStatus Affected:\nNone\nEncoding:\n0010\n11da\nffff\nffff\nDescription:\nThe contents of register GLYPH<145>fGLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> ,  the result is placed back in register GLYPH<145>fGLYPH<146> (default).",
    "Decrement f, Skip if 0\nIf the result is GLYPH<145> 0 GLYPH<146>, the next instruc- tion which is already fetched is dis- carded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nskip:, Q2.Read register GLYPH<145>f GLYPH<146> = skip:. skip:, Q3.Process Data = skip:. skip:, Q4.Write to destination = skip:. Q1, Q2.Read register GLYPH<145>f GLYPH<146> = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register GLYPH<145>f GLYPH<146> = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. skip and followed by 2-word instruction:, Q2.Read register GLYPH<145>f GLYPH<146> = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3.Process Data = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4.Write to destination = skip and followed by 2-word instruction:. Q1, Q2.Read register",
    "Q Cycle Activity:\nGLYPH<145>f GLYPH<146> = Q2. Q1, Q3.Process Data = Q3. Q1, Q4.Write to destination = Q4. No operation, Q2.Read register GLYPH<145>f GLYPH<146> = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. No operation, Q2.Read register GLYPH<145>f GLYPH<146> = No operation. No operation, Q3.Process Data = No operation. No operation, Q4.Write to destination = No operation. Example:, Q2.Read register GLYPH<145>f GLYPH<146> = HERE. Example:, Q3.Process Data = DECFSZ GOTO. Example:, Q4.Write to destination = CNT LOOP. Before Instruction, Q2.Read register GLYPH<145>f GLYPH<146> = Before Instruction. Before Instruction, Q3.Process Data = Before Instruction. Before Instruction, Q4.Write to destination = Before Instruction. PC, Q2.Read register",
    "Q Cycle Activity:\nGLYPH<145>f GLYPH<146> = = Address. PC, Q3.Process Data = (HERE). PC, Q4.Write to destination = . After Instruction, Q2.Read register GLYPH<145>f GLYPH<146> = After Instruction. After Instruction, Q3.Process Data = After Instruction. After Instruction, Q4.Write to destination = After Instruction. CNT If CNT PC, Q2.Read register GLYPH<145>f GLYPH<146> = = CNT GLYPH<150> 1 = 0; = Address \u2260 0; =. CNT If CNT PC, Q3.Process Data = (CONTINUE). CNT If CNT PC, Q4.Write to destination = . If CNT PC, Q2.Read register GLYPH<145>f GLYPH<146> = Address. If CNT PC, Q3.Process Data = (HERE + 2). If CNT PC, Q4.Write to destination = ",
    "Q Cycle Activity:\nSyntax: [ label ] DCFSNZ f [,d [,a]], Decrement f, Skip if not 0 = Syntax: [ label ] DCFSNZ f [,d [,a]]. Syntax: [ label ] DCFSNZ f [,d [,a]], Decrement f, Skip if not 0 = Syntax: [ label ] DCFSNZ f [,d [,a]]. Syntax: [ label ] DCFSNZ f [,d [,a]], Decrement f, Skip if not 0 = Syntax: [ label ] DCFSNZ f [,d [,a]]. Syntax: [ label ] DCFSNZ f [,d [,a]], Decrement f, Skip if not 0 = Syntax: [ label ] DCFSNZ f [,d [,a]]. Syntax: [ label ] DCFSNZ f [,d [,a]], Decrement f, Skip if not 0 = Syntax: [ label ] DCFSNZ f [,d [,a]]. Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208",
    "Q Cycle Activity:\n[0,1], Decrement f, Skip if not 0 = Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1], Decrement f, Skip if not 0 = Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1], Decrement f, Skip if not 0 = Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1], Decrement f, Skip if not 0 = Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands: 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1], Decrement f, Skip if not 0 = Operands: 0 \u2264 f \u2264 255 d \u2208",
    "Q Cycle Activity:\n[0,1] a \u2208 [0,1]. Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0, Decrement f, Skip if not 0 = Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0. Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0, Decrement f, Skip if not 0 = Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0. Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0, Decrement f, Skip if not 0 = Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0. Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0, Decrement f, Skip if not 0 = Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0. Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0,",
    "Q Cycle Activity:\nDecrement f, Skip if not 0 = Operation: (f) GLYPH<150> 1 \u2192 dest, skip if result \u2260 0. Status Affected: None, Decrement f, Skip if not 0 = Status Affected: None. Status Affected: None, Decrement f, Skip if not 0 = Status Affected: None. Status Affected: None, Decrement f, Skip if not 0 = Status Affected: None. Status Affected: None, Decrement f, Skip if not 0 = Status Affected: None. Status Affected: None, Decrement f, Skip if not 0 = Status Affected: None. Encoding:, Decrement f, Skip if not 0 = Encoding:. Encoding:, Decrement f, Skip if not 0 = 0100. Encoding:, Decrement f, Skip if not 0 = 11da. Encoding:, Decrement f, Skip if not 0 = ffff. Encoding:, Decrement f, Skip if not 0 = ffff. Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is",
    "Q Cycle Activity:\nGLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the, Decrement f, Skip if not 0 = Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If",
    "Q Cycle Activity:\nGLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the. Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register",
    "Q Cycle Activity:\nGLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the, Decrement f, Skip if not 0 = Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not",
    "Q Cycle Activity:\nGLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the. Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a",
    "Q Cycle Activity:\ntwo-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the, Decrement f, Skip if not 0 = Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0",
    "Q Cycle Activity:\nGLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the. Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1",
    "Q Cycle Activity:\n, then the, Decrement f, Skip if not 0 = Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the. Description: The contents of register GLYPH<145>f GLYPH<146> are",
    "Q Cycle Activity:\ndecremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the, Decrement f, Skip if not 0 = Description: The contents of register GLYPH<145>f GLYPH<146> are decremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0",
    "Q Cycle Activity:\nGLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the. Words: 1, Decrement f, Skip if not 0 = Words: 1. Words: 1, Decrement f, Skip if not 0 = Words: 1. Words: 1, Decrement f, Skip if not 0 = Words: 1. Words: 1, Decrement f, Skip if not 0 = Words: 1. Words: 1, Decrement f,",
    "Q Cycle Activity:\nSkip if not 0 = Words: 1. Cycles: 1(2) Note: 3 cycles if skip and followed, Decrement f, Skip if not 0 = Cycles: 1(2) Note: 3 cycles if skip and followed. Cycles: 1(2) Note: 3 cycles if skip and followed, Decrement f, Skip if not 0 = Cycles: 1(2) Note: 3 cycles if skip and followed. Cycles: 1(2) Note: 3 cycles if skip and followed, Decrement f, Skip if not 0 = Cycles: 1(2) Note: 3 cycles if skip and followed. Cycles: 1(2) Note: 3 cycles if skip and followed, Decrement f, Skip if not 0 = Cycles: 1(2) Note: 3 cycles if skip and followed. Cycles: 1(2) Note: 3 cycles if skip and followed, Decrement f, Skip if not 0 = Cycles: 1(2) Note: 3 cycles if skip and followed. Q Cycle Activity:, Decrement f, Skip if not 0 = Q Cycle Activity:. Q Cycle Activity:, Decrement f, Skip if not 0 = Q Cycle Activity:. Q Cycle",
    "Q Cycle Activity:\nActivity:, Decrement f, Skip if not 0 = Q Cycle Activity:. Q Cycle Activity:, Decrement f, Skip if not 0 = Q Cycle Activity:. Q Cycle Activity:, Decrement f, Skip if not 0 = Q Cycle Activity:. , Decrement f, Skip if not 0 = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = Q4. Decode, Decrement f, Skip if not 0 = Decode. Decode, Decrement f, Skip if not 0 = Read register GLYPH<145>f GLYPH<146>. Decode, Decrement f, Skip if not 0 = Process Data. Decode, Decrement f, Skip if not 0 = Write to destination. Decode, Decrement f, Skip if not 0 = Write to destination. If skip:, Decrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0",
    "Q Cycle Activity:\n= If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. If skip:, Decrement f, Skip if not 0 = If skip:. , Decrement f, Skip if not 0 = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = Q4. , Decrement f, Skip if not 0 = Q4. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = No. operation operation operation operation skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = operation operation operation operation skip and followed by 2-word instruction:. operation operation operation operation skip and followed by 2-word instruction:, Decrement f, Skip",
    "Q Cycle Activity:\nif not 0 = operation operation operation operation skip and followed by 2-word instruction:. operation operation operation operation skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = operation operation operation operation skip and followed by 2-word instruction:. operation operation operation operation skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = operation operation operation operation skip and followed by 2-word instruction:. operation operation operation operation skip and followed by 2-word instruction:, Decrement f, Skip if not 0 = operation operation operation operation skip and followed by 2-word instruction:. , Decrement f, Skip if not 0 = Q1. , Decrement f, Skip if not 0 = Q2. , Decrement f, Skip if not 0 = Q3. , Decrement f, Skip if not 0 = Q4. , Decrement f, Skip if not 0 = Q4. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0 = No. , Decrement f, Skip if not 0",
    "Q Cycle Activity:\n= No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No operation. , Decrement f, Skip if not 0 = No operation. Example:, Decrement f, Skip if not 0 = Example:. Example:, Decrement f, Skip if not 0 = HERE ZERO NZERO. Example:, Decrement f, Skip if not 0 = DCFSNZ :. Example:, Decrement f, Skip if not 0 = TEMP. Example:, Decrement f, Skip if not 0 = TEMP. Before Instruction TEMP, Decrement f, Skip if not 0 = Before Instruction TEMP. Before Instruction TEMP, Decrement f, Skip if not 0 = . Before Instruction TEMP, Decrement f, Skip if not 0 = = ?. Before Instruction TEMP, Decrement f, Skip if not 0 = . Before Instruction TEMP, Decrement f,",
    "Q Cycle Activity:\nSkip if not 0 = . , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = TEMP. , Decrement f, Skip if not 0 = . , Decrement f, Skip if not 0 = . After Instruction, Decrement f, Skip if not 0 = After Instruction. After Instruction, Decrement f, Skip if not 0 = After Instruction. After Instruction, Decrement f, Skip if not 0 = =. After Instruction, Decrement f, Skip if not 0 = GLYPH<150> 1,. After Instruction, Decrement f, Skip if not 0 = GLYPH<150> 1,. TEMP If TEMP PC, Decrement f, Skip if not 0 = TEMP If TEMP PC. TEMP If TEMP PC, Decrement f, Skip if not 0 = TEMP If TEMP PC. TEMP If TEMP PC, Decrement f, Skip if not 0 = = 0;. TEMP If TEMP PC, Decrement f, Skip if not 0 = Address. TEMP If TEMP",
    "Q Cycle Activity:\nPC, Decrement f, Skip if not 0 = Address. If TEMP PC, Decrement f, Skip if not 0 = If TEMP PC. If TEMP PC, Decrement f, Skip if not 0 = If TEMP PC. If TEMP PC, Decrement f, Skip if not 0 = = \u2260. If TEMP PC, Decrement f, Skip if not 0 = (ZERO) Address (NZERO). If TEMP PC, Decrement f, Skip if not 0 = (ZERO) Address (NZERO)",
    "PIC18F2220/2320/4220/4320\nSyntax:, Unconditional Branch = [ label ] GOTO. Syntax:, Unconditional Branch = [ label ] GOTO. Syntax:, Unconditional Branch = k. Syntax:, Unconditional Branch = . Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = 0 \u2264 k \u2264 1048575. Operands:, Unconditional Branch = . Operands:, Unconditional Branch = . Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = k \u2192 PC<20:1>. Operation:, Unconditional Branch = . Operation:, Unconditional Branch = . Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = None. Status Affected:, Unconditional Branch = . Status Affected:, Unconditional Branch = . Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = 1110 1111. Encoding: 1st word (k<7:0>) 2nd",
    "PIC18F2220/2320/4220/4320\nword(k<19:8>), Unconditional Branch = 1111 k 19 kkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = k 7 kkk kkkk. Encoding: 1st word (k<7:0>) 2nd word(k<19:8>), Unconditional Branch = kkkk 0 kkkk 8. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2 Mbyte memory range. The 20-bit value GLYPH<145>kGLYPH<146> is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2 Mbyte memory range. The 20-bit value GLYPH<145>kGLYPH<146> is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2",
    "PIC18F2220/2320/4220/4320\nMbyte memory range. The 20-bit value GLYPH<145>kGLYPH<146> is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Description:, Unconditional Branch = GOTO allows an unconditional branch anywhere within entire 2 Mbyte memory range. The 20-bit value GLYPH<145>kGLYPH<146> is loaded into PC<20:1>. GOTO is always a two-cycle instruction.. Words:, Unconditional Branch = 2. Words:, Unconditional Branch = . Words:, Unconditional Branch = . Words:, Unconditional Branch = . Cycles:, Unconditional Branch = 2. Cycles:, Unconditional Branch = . Cycles:, Unconditional Branch = . Cycles:, Unconditional Branch = . Q Cycle Activity:, Unconditional Branch = . Q Cycle Activity:, Unconditional Branch = . Q Cycle Activity:, Unconditional Branch = . Q Cycle Activity:, Unconditional Branch = . Q1, Unconditional Branch = Q2. Q1, Unconditional Branch",
    "PIC18F2220/2320/4220/4320\n= Q3. Q1, Unconditional Branch = Q4. Q1, Unconditional Branch = Q4. Decode, Unconditional Branch = Read literal GLYPH<145>kGLYPH<146><7:0>,. Decode, Unconditional Branch = No operation. Decode, Unconditional Branch = Read literal GLYPH<145>kGLYPH<146><19:8>, Write to PC. Decode, Unconditional Branch = Read literal GLYPH<145>kGLYPH<146><19:8>, Write to PC. No, Unconditional Branch = operation. No, Unconditional Branch = No operation No. No, Unconditional Branch = operation No operation. No, Unconditional Branch = operation No operation. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = GOTO THERE. Example:, Unconditional Branch = . Example:, Unconditional Branch = . After Instruction PC = Address, Unconditional Branch = . After Instruction PC = Address, Unconditional Branch = (THERE). After",
    "PIC18F2220/2320/4220/4320\nInstruction PC = Address, Unconditional Branch = . After Instruction PC = Address, Unconditional Branch = ",
    "PIC18F2220/2320/4220/4320\nSyntax:, Increment f = [ label ] INCF. Syntax:, Increment f = [ label ] INCF. Syntax:, Increment f = f [,d [,a]]. Syntax:, Increment f = f [,d [,a]]. Operands:, Increment f = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Increment f = 0 \u2264 f \u2264 255 d \u2208 [0,1] \u2208. Operands:, Increment f = . Operands:, Increment f = . Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = (f) + 1 \u2192 dest. Operation:, Increment f = . Operation:, Increment f = . Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = C, DC, N, OV, Z. Status Affected:, Increment f = . Status Affected:, Increment f = .",
    "PIC18F2220/2320/4220/4320\nEncoding:, Increment f = 0010. Encoding:, Increment f = 10da. Encoding:, Increment f = ffff. Encoding:, Increment f = ffff. Description:, Increment f = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Increment f",
    "PIC18F2220/2320/4220/4320\n= The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Increment f = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>,",
    "PIC18F2220/2320/4220/4320\nthe result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Increment f = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>",
    "PIC18F2220/2320/4220/4320\nfGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, Increment f = 1. Words:, Increment f = 1. Words:, Increment f = . Words:, Increment f = . Cycles:, Increment f = 1. Cycles:, Increment f = 1. Cycles:, Increment f = . Cycles:, Increment f = . Q Cycle Activity:, Increment f = Q Cycle Activity:. Q Cycle Activity:, Increment f = Q Cycle Activity:. Q Cycle Activity:, Increment f = Q Cycle Activity:. Q Cycle Activity:, Increment f = Q Cycle Activity:. Q1, Increment f = Q2. Q1, Increment f =",
    "PIC18F2220/2320/4220/4320\nQ2. Q1, Increment f = Q3 Q4. Q1, Increment f = Q3 Q4. Decode, Increment f = Read register GLYPH<145>f GLYPH<146>. Decode, Increment f = Read register GLYPH<145>f GLYPH<146>. Decode, Increment f = Process Data Write to destination. Decode, Increment f = Process Data Write to destination. Example:, Increment f = INCF. Example:, Increment f = INCF. Example:, Increment f = CNT,. Example:, Increment f = CNT,. Before Instruction, Increment f = Before Instruction. Before Instruction, Increment f = Before Instruction. Before Instruction, Increment f = Before Instruction. Before Instruction, Increment f = Before Instruction. CNT, Increment f = 0xFF. CNT, Increment f = . CNT, Increment f = . CNT, Increment f = . Z, Increment f = =",
    "PIC18F2220/2320/4220/4320\n= 0. Z, Increment f = . Z, Increment f = . Z, Increment f = . C, Increment f = = ?. C, Increment f = . C, Increment f = . C, Increment f = . DC, Increment f = = ?. DC, Increment f = . DC, Increment f = . DC, Increment f = . After Instruction, Increment f = After Instruction. After Instruction, Increment f = After Instruction. After Instruction, Increment f = After Instruction. After Instruction, Increment f = After Instruction. CNT, Increment f = 0x00. CNT, Increment f = . CNT, Increment f = . CNT, Increment f = . Z, Increment f = = = 1. Z, Increment f = . Z, Increment f = . Z, Increment f = . C, Increment f = = 1. C, Increment f = . C, Increment f = . C,",
    "PIC18F2220/2320/4220/4320\nIncrement f = . DC, Increment f = = 1. DC, Increment f = . DC, Increment f = . DC, Increment f = ",
    "Increment f, Skip if 0\nSyntax:\n[\nlabel\n]    INCFSZ    f [,d [,a]]\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f) + 1 \u2192 dest,\nskip if result =\n0\nStatus Affected:\nNone\nEncoding:\n0011\n11da\nffff\nffff\nDescription:\nThe contents of register GLYPH<145>fGLYPH<146> are incremented. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>,  the result is placed back in register GLYPH<145>fGLYPH<146> (default).",
    "Increment f, Skip if 0\nIf the result is GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Increment f, Skip if 0\nSyntax:, Increment f, Skip if Not 0 = [ label ] INFSNZ. Syntax:, Increment f, Skip if Not 0 = [ label ] INFSNZ. Syntax:, Increment f, Skip if Not 0 = f [,d [,a]]. Syntax:, Increment f, Skip if Not 0 = f [,d [,a]]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Increment f, Skip if Not 0 = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260",
    "Increment f, Skip if 0\n0. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Operation:, Increment f, Skip if Not 0 = (f) + 1 \u2192 dest, skip if result \u2260 0. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Status Affected:, Increment f, Skip if Not 0 = None. Encoding:, Increment f, Skip if Not 0 = 0100. Encoding:, Increment f, Skip if Not 0 = 10da. Encoding:, Increment f, Skip if Not 0 = ffff. Encoding:, Increment f, Skip if Not 0 = ffff. Description:, Increment f, Skip if Not 0 = The contents of register GLYPH<145>f GLYPH<146> are",
    "Increment f, Skip if 0\nincremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the. Description:, Increment f, Skip if Not 0 = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145>",
    "Increment f, Skip if 0\ndGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the. Description:, Increment f, Skip if Not 0 = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0",
    "Increment f, Skip if 0\nGLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the. Description:, Increment f, Skip if Not 0 = The contents of register GLYPH<145>f GLYPH<146> are incremented. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W.",
    "Increment f, Skip if 0\nIf GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If the result is not GLYPH<145> 0 GLYPH<146>, the next instruction which is already fetched is discarded and a NOP is executed instead, making it a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the. Words:, Increment f, Skip if Not 0 = 1. Words:, Increment f, Skip if Not 0 = 1. Words:, Increment f, Skip if Not 0 = 1. Words:, Increment f, Skip if Not 0 = 1. Cycles:, Increment f, Skip if Not 0 = 1(2). Cycles:, Increment",
    "Increment f, Skip if 0\nf, Skip if Not 0 = 1(2). Cycles:, Increment f, Skip if Not 0 = 1(2). Cycles:, Increment f, Skip if Not 0 = 1(2)",
    "Q Cycle Activity:\nDecode, Q2 = Read register GLYPH<145>f GLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. If skip:, Q2 = . If skip:, Q3 = . If skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation, No operation = No operation. No operation, No operation = No operation. No operation, No operation = No operation\nExample:\nHERE    INCFSZ   CNT\nNZERO   :\nZERO    :\nBefore Instruction\nPC\n=\nAddress (HERE)\nAfter Instruction\nCNT =\nCNT + 1\nIf CNT\n=\n0;\nPC\n=\nAddress (ZERO)\nIf CNT\n\u2260\n0;\nPC\n=\nAddress (NZERO)\nQ4\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nDecode, Q2 = Read register GLYPH<145>f GLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to destination. skip:, Q2 = . skip:, Q3 = . skip:, Q4 = . Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. skip and followed by 2-word instruction:, Q2 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q3 = skip and followed by 2-word instruction:. skip and followed by 2-word instruction:, Q4 = skip and followed by 2-word instruction:. Q1, Q2 = Q2. Q1, Q3 = Q3. Q1, Q4 = Q4. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation. No operation, Q2 = No operation. No operation,",
    "Q Cycle Activity:\nQ3 = No operation. No operation, Q4 = No operation\nExample:\nHERE    INFSNZ  REG\nZERO\nNZERO\nBefore Instruction\nPC\n=\nAddress (HERE)\nAfter Instruction\nREG\n=\nREG + 1\nIf REG\n\u2260\n0;\nPC\n=\nAddress (NZERO)\nIf REG\n=\n0;\nPC\n=\nAddress (ZERO)",
    "Inclusive OR Literal with W\nSyntax:\n[ label ]    IORLW   k\nOperands:\n0 \u2264 k \u2264 255\nOperation:\n(W) .OR. k \u2192 W\nStatus Affected:\nN, Z\nEncoding:\n0000\n1001\nkkkk\nkkkk\nDescription:\nThe contents of W are ORGLYPH<146>ed with the eight-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nliteral GLYPH<145>kGLYPH<146>\nProcess Data\nWrite to W\nExample:\nIORLW\n0x35\nBefore Instruction\nW\n=\n0x9A\nAfter Instruction\nW\n=\n0xBF",
    "Inclusive OR Literal with W\nSyntax:, Inclusive OR Wwith f = [ label ] IORWF. Syntax:, Inclusive OR Wwith f = [ label ] IORWF. Syntax:, Inclusive OR Wwith f = f [,d [,a]]. Syntax:, Inclusive OR Wwith f = f [,d [,a]]. Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Inclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Inclusive OR Wwith f = . Operands:, Inclusive OR Wwith f = . Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Operation:, Inclusive OR Wwith f = (W) .OR. (f) \u2192 dest. Status Affected:, Inclusive OR Wwith f",
    "Inclusive OR Literal with W\n= N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Status Affected:, Inclusive OR Wwith f = N, Z. Encoding:, Inclusive OR Wwith f = 0001. Encoding:, Inclusive OR Wwith f = 00da. Encoding:, Inclusive OR Wwith f = ffff. Encoding:, Inclusive OR Wwith f = ffff. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register GLYPH<145>f GLYPH<146> . If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR",
    "Inclusive OR Literal with W\nvalue. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register GLYPH<145>f GLYPH<146> . If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register GLYPH<145>f",
    "Inclusive OR Literal with W\nGLYPH<146> . If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Inclusive OR Wwith f = Inclusive OR Wwith register GLYPH<145>f GLYPH<146> . If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145> dGLYPH<146> is",
    "Inclusive OR Literal with W\nGLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Words:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Cycles:, Inclusive OR Wwith f = 1. Q Cycle Activity:, Inclusive OR Wwith f = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Wwith f = Q Cycle Activity:. Q Cycle Activity:, Inclusive OR Wwith f = Q Cycle Activity:. Q",
    "Inclusive OR Literal with W\nCycle Activity:, Inclusive OR Wwith f = Q Cycle Activity:. Q1, Inclusive OR Wwith f = Q2. Q1, Inclusive OR Wwith f = Q2. Q1, Inclusive OR Wwith f = Q3. Q1, Inclusive OR Wwith f = Q4. Decode, Inclusive OR Wwith f = Read register GLYPH<145>f GLYPH<146>. Decode, Inclusive OR Wwith f = Read register GLYPH<145>f GLYPH<146>. Decode, Inclusive OR Wwith f = Process Data. Decode, Inclusive OR Wwith f = Write to destination. Example:, Inclusive OR Wwith f = IORWF. Example:, Inclusive OR Wwith f = RESULT, W. Example:, Inclusive OR Wwith f = RESULT, W. Example:, Inclusive OR Wwith f = RESULT, W. Before Instruction, Inclusive OR Wwith f = Before Instruction. Before Instruction, Inclusive OR Wwith f = Before Instruction. Before Instruction, Inclusive OR Wwith f = Before Instruction. Before Instruction, Inclusive OR Wwith f = Before Instruction. RESULT, Inclusive OR Wwith f = =",
    "Inclusive OR Literal with W\n0x13. RESULT, Inclusive OR Wwith f = . RESULT, Inclusive OR Wwith f = . RESULT, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = = 0x91. W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . After Instruction, Inclusive OR Wwith f = After Instruction. After Instruction, Inclusive OR Wwith f = After Instruction. After Instruction, Inclusive OR Wwith f = After Instruction. After Instruction, Inclusive OR Wwith f = After Instruction. RESULT, Inclusive OR Wwith f = =. RESULT, Inclusive OR Wwith f = 0x13. RESULT, Inclusive OR Wwith f = 0x13. RESULT, Inclusive OR Wwith f = 0x13. W, Inclusive OR Wwith f = = 0x93. W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = . W, Inclusive OR Wwith f = \nLFSR\nSyntax:\nOperands:\nOperation:\nStatus Affected: Encoding:\nDescription:\nWords:\nCycles:\nLoad FSR\n[\nlabel\n]    LFSR   f,k\n0\n\u2264\nf\n\u2264\n2\n0\n\u2264\nk\n\u2264\n4095",
    "Inclusive OR Literal with W\nk \u2192 FSRf\nNone\n1110\n1110\n00ff",
    "PIC18F2220/2320/4220/4320\nk 11 kkk\n1111\n0000\nk 7\nkkk kkkk\nThe 12-bit literal GLYPH<145>kGLYPH<146> is loaded into the file select register pointed to by GLYPH<145>fGLYPH<146>.\n2\n2\nQ Cycle Activity:\nDecode, Q2 = Read literal GLYPH<145>kGLYPH<146> MSB. Decode, Q3 = Process Data. Decode, Q4 = Write literal GLYPH<145>kGLYPH<146> MSB to FSRfH. Decode, Q2 = Read literal GLYPH<145> kGLYPH<146> LSB. Decode, Q3 = Process Data. Decode, Q4 = Write literal GLYPH<145>kGLYPH<146> to FSRfL\nExample:\nLFSR 2, 0x3AB\nAfter Instruction\nFSR2H\n= 0x03\nFSR2L\n= 0xAB",
    "PIC18F2220/2320/4220/4320\nSyntax:, Move f = [ label ]. Syntax:, Move f = MOVF. Syntax:, Move f = f [,d [,a]]. Syntax:, Move f = . Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. Operands:, Move f = 0 \u2264 f \u2264 255. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = d \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. , Move f = a \u2208 [0,1]. Operation:, Move f = f \u2192 dest. Operation:, Move f = f \u2192 dest. Operation:, Move f = f \u2192 dest. Operation:, Move f = f \u2192 dest. Status Affected:, Move f =",
    "PIC18F2220/2320/4220/4320\nN, Z. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Status Affected:, Move f = N, Z. Encoding:, Move f = 0101. Encoding:, Move f = 00da. Encoding:, Move f = ffff. Encoding:, Move f = ffff\nDescription:",
    "PIC18F2220/2320/4220/4320\nThe contents of register GLYPH<145>fGLYPH<146> are moved to a destination dependent upon the status of GLYPH<145>dGLYPH<146>. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> ,  the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146> ,  the result is placed back in register GLYPH<145>fGLYPH<146> (default). Location GLYPH<145>fGLYPH<146> can be anywhere in the 256-byte bank. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).\nWords:\nCycles:\n1\n1\nQ Cycle Activity:",
    "PIC18F2220/2320/4220/4320\nDecode, Q2 = Read register GLYPH<145>f GLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write W\nBefore Instruction, MOVF = Before Instruction. Before Instruction, REG, W = . REG, MOVF = =. REG, REG, W = 0x22. W, MOVF = =. W, REG, W = 0xFF. After Instruction, MOVF = After Instruction. After Instruction, REG, W = . REG, MOVF = =. REG, REG, W = 0x22. W, MOVF = =. W, REG, W = 0x22",
    "PIC18F2220/2320/4220/4320\nSyntax:, Move f to f = [ label ] MOVFF f s ,f d. Syntax:, Move f to f = [ label ] MOVFF f s ,f d. Syntax:, Move f to f = [ label ] MOVFF f s ,f d. Syntax:, Move f to f = [ label ] MOVFF f s ,f d. Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operands:, Move f to f = 0 \u2264 f s \u2264 4095 0 \u2264 f d \u2264 4095. Operation:, Move f to f = (f s ) \u2192 f d. Operation:, Move f to f = (f s ) \u2192 f d. Operation:, Move f to f = (f s ) \u2192 f d. Operation:, Move f to f = (f",
    "PIC18F2220/2320/4220/4320\ns ) \u2192 f d. Status Affected:, Move f to f = None. Status Affected:, Move f to f = None. Status Affected:, Move f to f = None. Status Affected:, Move f to f = None. Encoding: 1st word (source), Move f to f = 1100. Encoding: 1st word (source), Move f to f = ffff. Encoding: 1st word (source), Move f to f = ffff. Encoding: 1st word (source), Move f to f = ffff s. 2nd word (destin.), Move f to f = 1111. 2nd word (destin.), Move f to f = ffff. 2nd word (destin.), Move f to f = ffff. 2nd word (destin.), Move f to f = ffff d\nDescription:",
    "PIC18F2220/2320/4220/4320\nThe contents of source register GLYPH<145>f s GLYPH<146> are moved to destination register GLYPH<145> f d GLYPH<146>. Location of source GLYPH<145>f s GLYPH<146> can be anywhere in the 4096-byte data space (000h to FFFh) and location of destination GLYPH<145>f d GLYPH<146> can also be anywhere from 000h to FFFh. Either source or destination can be W (a useful special situation). MOVFF is particularly useful for transferring a data memory location to a peripheral register (such as the transmit buffer or an I/O port).",
    "PIC18F2220/2320/4220/4320\nSyntax:, Move Literal to Low Nibble in BSR = [ label ] MOVLB. Syntax:, Move Literal to Low Nibble in BSR = . Syntax:, Move Literal to Low Nibble in BSR = k. Syntax:, Move Literal to Low Nibble in BSR = . Operands:, Move Literal to Low Nibble in BSR = 0 \u2264 k \u2264 255. Operands:, Move Literal to Low Nibble in BSR = . Operands:, Move Literal to Low Nibble in BSR = . Operands:, Move Literal to Low Nibble in BSR = . Operation:, Move Literal to Low Nibble in BSR = k \u2192 BSR. Operation:, Move Literal to Low Nibble in BSR = . Operation:, Move Literal to Low Nibble in BSR = . Operation:, Move Literal to Low Nibble in BSR = . Status Affected:, Move Literal to Low Nibble in BSR = None. Status Affected:, Move Literal to Low Nibble in BSR = . Status Affected:, Move Literal to Low Nibble in BSR = . Status Affected:, Move Literal to Low",
    "PIC18F2220/2320/4220/4320\nNibble in BSR = . Encoding:, Move Literal to Low Nibble in BSR = 0000. Encoding:, Move Literal to Low Nibble in BSR = 0001. Encoding:, Move Literal to Low Nibble in BSR = kkkk. Encoding:, Move Literal to Low Nibble in BSR = kkkk. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal GLYPH<145>kGLYPH<146> is loaded into the Bank Select Register (BSR).. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal GLYPH<145>kGLYPH<146> is loaded into the Bank Select Register (BSR).. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal GLYPH<145>kGLYPH<146> is loaded into the Bank Select Register (BSR).. Description:, Move Literal to Low Nibble in BSR = The 8-bit literal GLYPH<145>kGLYPH<146> is loaded into the Bank Select Register",
    "PIC18F2220/2320/4220/4320\n(BSR).. Words:, Move Literal to Low Nibble in BSR = 1. Words:, Move Literal to Low Nibble in BSR = . Words:, Move Literal to Low Nibble in BSR = . Words:, Move Literal to Low Nibble in BSR = . Cycles:, Move Literal to Low Nibble in BSR = 1. Cycles:, Move Literal to Low Nibble in BSR = . Cycles:, Move Literal to Low Nibble in BSR = . Cycles:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q Cycle Activity:, Move Literal to Low Nibble in BSR = . Q1, Move Literal to Low Nibble in BSR = Q2. Q1, Move Literal to Low Nibble in BSR = Q3. Q1, Move Literal to Low Nibble in BSR = Q4. Q1, Move Literal to Low Nibble in",
    "PIC18F2220/2320/4220/4320\nBSR = Q4. Decode, Move Literal to Low Nibble in BSR = Read literal GLYPH<145>kGLYPH<146>. Decode, Move Literal to Low Nibble in BSR = Process Data. Decode, Move Literal to Low Nibble in BSR = Write literal GLYPH<145>kGLYPH<146> to BSR. Decode, Move Literal to Low Nibble in BSR = Write literal GLYPH<145>kGLYPH<146> to BSR. Example:, Move Literal to Low Nibble in BSR = MOVLB 5. Example:, Move Literal to Low Nibble in BSR = . Example:, Move Literal to Low Nibble in BSR = . Example:, Move Literal to Low Nibble in BSR = . Before Instruction BSR register, Move Literal to Low Nibble in BSR = =. Before Instruction BSR register, Move Literal to Low Nibble in BSR = 0x02. Before Instruction BSR register, Move Literal to Low Nibble in BSR = . Before Instruction BSR register, Move Literal to Low Nibble in",
    "PIC18F2220/2320/4220/4320\nBSR = . After Instruction BSR register, Move Literal to Low Nibble in BSR = =. After Instruction BSR register, Move Literal to Low Nibble in BSR = 0x05. After Instruction BSR register, Move Literal to Low Nibble in BSR = . After Instruction BSR register, Move Literal to Low Nibble in BSR = \nThe MOVFF instruction cannot use the PCL, TOSU, TOSH or TOSL as the destination register.\nThe MOVFF instruction should not be used to modify interrupt settings while any interrupt is enabled (see Page 87).\nWords:\n2\nCycles:\n2 (3)\nQ Cycle Activity:\nDecode, Q2 = Read register GLYPH<145>f GLYPH<146> (src). Decode, Q3 = Process Data. Decode, Q4 = No operation. Decode, Q2 = No operation No dummy read. Decode, Q3 = No operation. Decode, Q4 = Write register GLYPH<145>f GLYPH<146> (dest)\nExample:\nMOVFF   REG1, REG2\nBefore Instruction\nREG1\n=",
    "PIC18F2220/2320/4220/4320\n0x33\nREG2\n=\n0x11\nAfter Instruction\nREG1\n= 0x33,\nREG2\n=\n0x33",
    "PIC18F2220/2320/4220/4320\nSyntax:, Move Literal to W = [ label ] MOVLW. Syntax:, Move Literal to W = [ label ] MOVLW. Syntax:, Move Literal to W = k. Syntax:, Move Literal to W = k. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = 0 \u2264 k \u2264 255. Operands:, Move Literal to W = . Operands:, Move Literal to W = . Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = k \u2192 W. Operation:, Move Literal to W = . Operation:, Move Literal to W = . Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = None. Status Affected:, Move Literal to W = . Status Affected:, Move Literal to W = . Encoding:, Move Literal to W = 0000. Encoding:, Move Literal to W = 1110. Encoding:, Move Literal to W = kkkk. Encoding:, Move Literal to W = kkkk. Description:, Move Literal to W = The",
    "PIC18F2220/2320/4220/4320\neight-bit literal GLYPH<145>kGLYPH<146> is loaded into W.. Description:, Move Literal to W = The eight-bit literal GLYPH<145>kGLYPH<146> is loaded into W.. Description:, Move Literal to W = The eight-bit literal GLYPH<145>kGLYPH<146> is loaded into W.. Description:, Move Literal to W = The eight-bit literal GLYPH<145>kGLYPH<146> is loaded into W.. Words:, Move Literal to W = 1. Words:, Move Literal to W = . Words:, Move Literal to W = . Words:, Move Literal to W = . Cycles:, Move Literal to W = 1. Cycles:, Move Literal to W = . Cycles:, Move Literal to W = . Cycles:, Move Literal to W = . Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = Q Cycle Activity:. Q Cycle Activity:, Move Literal to W = . Q Cycle Activity:, Move Literal to W = .",
    "PIC18F2220/2320/4220/4320\nQ1, Move Literal to W = Q2. Q1, Move Literal to W = Q3. Q1, Move Literal to W = . Q1, Move Literal to W = Q4. Decode, Move Literal to W = Read literal GLYPH<145>kGLYPH<146>. Decode, Move Literal to W = Process Data. Decode, Move Literal to W = . Decode, Move Literal to W = Write to W. Example:, Move Literal to W = MOVLW. Example:, Move Literal to W = 0x5A. Example:, Move Literal to W = . Example:, Move Literal to W = . After Instruction, Move Literal to W = After Instruction. After Instruction, Move Literal to W = . After Instruction, Move Literal to W = . After Instruction, Move Literal to W = ",
    "PIC18F2220/2320/4220/4320\nSyntax:, MOVWF = Syntax:. Syntax:, Move Wto f = [ label ] MOVWF f. Syntax:, Move Wto f = [ label ] MOVWF f. Syntax:, Move Wto f = [ label ] MOVWF f. Operands:, MOVWF = Operands:. Operands:, Move Wto f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Move Wto f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Move Wto f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, MOVWF = Operation:. Operation:, Move Wto f = (W) \u2192 f. Operation:, Move Wto f = (W) \u2192 f. Operation:, Move Wto f = (W) \u2192 f. Status Affected:, MOVWF = Status Affected:. Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = None. Status Affected:, Move Wto f = None.",
    "PIC18F2220/2320/4220/4320\nEncoding:, MOVWF = Encoding:. Encoding:, Move Wto f = 0110. Encoding:, Move Wto f = 111a. Encoding:, Move Wto f = ffff. Description:, MOVWF = Description:. Description:, Move Wto f = Move data from Wto register GLYPH<145>f GLYPH<146>. Location GLYPH<145>f GLYPH<146> can be anywhere in the 256-byte bank. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Move Wto f = Move data from Wto register GLYPH<145>f GLYPH<146>. Location GLYPH<145>f GLYPH<146> can be anywhere in the 256-byte bank. If",
    "PIC18F2220/2320/4220/4320\nGLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Move Wto f = Move data from Wto register GLYPH<145>f GLYPH<146>. Location GLYPH<145>f GLYPH<146> can be anywhere in the 256-byte bank. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, over- riding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Words:, MOVWF = Words:. Words:, Move Wto f = 1. Words:, Move Wto f = 1. Words:, Move Wto f =",
    "PIC18F2220/2320/4220/4320\n1. Cycles:, MOVWF = Cycles:. Cycles:, Move Wto f = 1. Cycles:, Move Wto f = 1. Cycles:, Move Wto f = 1. Q Cycle Activity:, MOVWF = Q Cycle Activity:. Q Cycle Activity:, Move Wto f = Q Cycle Activity:. Q Cycle Activity:, Move Wto f = Q Cycle Activity:. Q Cycle Activity:, Move Wto f = Q Cycle Activity:. , MOVWF = Q1. , Move Wto f = Q2. , Move Wto f = Q3. , Move Wto f = . , MOVWF = Decode. , Move Wto f = Read register GLYPH<145>f GLYPH<146>. , Move Wto f = Process Data. , Move Wto f = \nExample:\nMOVWF\nREG\nBefore Instruction\nW\n=\n0x4F\nREG\n=\n0xFF\nAfter Instruction\nW\n=\n0x4F\nREG\n=\n0x4F\nMULLW",
    "Multiply Literal with W\nSyntax:\n[ label\n]    MULLW     k\nOperands:\n0\n\u2264\nk\n\u2264\n255\nOperation:\n(W) x k \u2192 PRODH:PRODL\nStatus Affected:\nNone\nEncoding:\n0000\n1101\nkkkk\nkkkk\nDescription:\nAn unsigned multiplication is carried out between the contents of W and the 8-bit literal GLYPH<145>kGLYPH<146>. The 16-bit result is placed in PRODH:PRODL register pair. PRODH contains the high byte. W is unchanged. None of the Status flags are affected. Note that neither overflow nor carry is possible in this opera- tion. A zero result is possible but not detected.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nliteral GLYPH<145>kGLYPH<146>\nProcess Data\nWrite registers PRODH: PRODL",
    "Example:\nMULLW   0xC4\nBefore Instruction\nW\n=\n0xE2\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n=\n0xE2\nPRODH\n=\n0xAD\nPRODL\n=\n0x08",
    "Example:\nMULWF, 1 = MULWF. MULWF, 2 = Multiply Wwith f. MULWF, 3 = Multiply Wwith f. MULWF, 4 = Multiply Wwith f. Syntax:, 1 = Syntax:. Syntax:, 2 = [ label ] MULWF f [,a]. Syntax:, 3 = [ label ] MULWF f [,a]. Syntax:, 4 = [ label ] MULWF f [,a]. Operands:, 1 = Operands:. Operands:, 2 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, 3 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, 4 = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, 1 = Operation:. Operation:, 2 = (W) x (f) \u2192 PRODH:PRODL. Operation:, 3 = (W) x (f) \u2192 PRODH:PRODL. Operation:, 4 = (W) x (f) \u2192 PRODH:PRODL. Status Affected:, 1 = Status",
    "Example:\nAffected:. Status Affected:, 2 = None. Status Affected:, 3 = None. Status Affected:, 4 = None. Encoding:, 1 = Encoding:. Encoding:, 2 = 0000. Encoding:, 3 = 001a. Encoding:, 4 = ffff. Description:, 1 = Description:. Description:, 2 = An unsigned multiplication is carried out between the contents of Wandthe register file location GLYPH<145>f GLYPH<146>. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand GLYPH<145>f GLYPH<146> are unchanged. None of the Status flags are affected. Note that neither overflow nor carry is possible in this opera- tion. A zero result is possible but not detected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If. Description:, 3 = An unsigned multiplication is carried out between the contents of Wandthe register file location GLYPH<145>f GLYPH<146>.",
    "Example:\nThe 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand GLYPH<145>f GLYPH<146> are unchanged. None of the Status flags are affected. Note that neither overflow nor carry is possible in this opera- tion. A zero result is possible but not detected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If. Description:, 4 = An unsigned multiplication is carried out between the contents of Wandthe register file location GLYPH<145>f GLYPH<146>. The 16-bit result is stored in the PRODH:PRODL register pair. PRODH contains the high byte. Both Wand GLYPH<145>f GLYPH<146> are unchanged. None of the Status flags are affected. Note that neither overflow nor carry is possible in this opera- tion. A zero result is possible but not detected. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0",
    "Example:\nGLYPH<146> , the Access Bank will be selected, overriding the BSR value. If. Words:, 1 = Words:. Words:, 2 = 1. Words:, 3 = 1. Words:, 4 = 1. Cycles:, 1 = Cycles:. Cycles:, 2 = 1. Cycles:, 3 = 1. Cycles:, 4 = 1. Q Cycle Activity:, 1 = Q Cycle Activity:. Q Cycle Activity:, 2 = Q Cycle Activity:. Q Cycle Activity:, 3 = Q Cycle Activity:. Q Cycle Activity:, 4 = Q Cycle Activity:. , 1 = Q1. , 2 = Q2. , 3 = Q3. , 4 = . , 1 = Decode. , 2 = Read register GLYPH<145>f GLYPH<146>. , 3 = Process Data. , 4 = \nMULWF   REG\nBefore Instruction\nW\n=\n0xC4\nREG\n=\n0xB5\nPRODH\n=\n?\nPRODL\n=\n?\nAfter Instruction\nW\n= 0xC4\nREG\n=\n0xB5\nPRODH\n=\n0x8A\nPRODL\n=\n0x94",
    "PIC18F2220/2320/4220/4320\nSyntax:, Negate f = [ label ]. Syntax:,  = NEGF. Syntax:,  = [,a]. Syntax:,  = f. Operands:, Negate f = 0 f 255 a \u2208 [0,1]. Operands:,  = . Operands:,  = \u2264 \u2264. Operands:,  = . Operation:, Negate f = ( f ) + 1 \u2192 f. Operation:,  = . Operation:,  = . Operation:,  = . Status Affected:, Negate f = N, OV, C, DC, Z. Status Affected:,  = . Status Affected:,  = . Status Affected:,  = . Encoding:, Negate f = 0110. Encoding:,  = 110a. Encoding:,  = ffff ffff. Encoding:,",
    "PIC18F2220/2320/4220/4320\n= . Description:, Negate f = Location GLYPH<145> fGLYPH<146> is negated using twoGLYPH<146>s complement. The result is placed in the data memory location GLYPH<145>f GLYPH<146>. If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSRvalue. If GLYPH<145>aGLYPH<146> = 1 , then the bank will be selected as per the BSR value.. Description:,  = . Description:,  = . Description:,  = . Words:, Negate f = . Words:,  = . Words:,  = 1. Words:,  = . Cycles:, Negate f = . Cycles:,  = . Cycles:,  = 1. Cycles:,  = . Q Cycle Activity:, Negate f = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q Cycle Activity:,  = . Q1, Negate f = Q2. Q1,",
    "PIC18F2220/2320/4220/4320\n= Q3. Q1,  = Q4. Q1,  = . Decode, Negate f = Read. Decode,  = Process Data. Decode,  = Write register GLYPH<145>f GLYPH<146>. Decode,  = . Example:, Negate f = NEGF. Example:,  = . Example:,  = register GLYPH<145>f GLYPH<146>. Example:,  = . , Negate f = . ,  = . ,  = REG,. ,  = . Before, Negate f = . Before,  = . Before,  = . Before,  = . After REG =, Negate f = 1100. After REG =,  = . After REG =,  = . After REG =,  = . , Negate f = . ,  = 0110. ,  = . ,  = . , Negate f = . ,  = 0011. ,  = . ,  = . , Negate f = =. ,  = . ,  = . ,  = . , Negate f = . ,  = 1010. ,  = . ,  = . , Negate f = . ,  = . ,",
    "PIC18F2220/2320/4220/4320\n= [0x3A]. ,  = . , Negate f = REG. ,  = . ,  = . ,  = . , Negate f = Instruction. ,  = . ,  = . ,  = . , Negate f = Instruction. ,  = . ,  = . ,  = . , Negate f = . ,  = . ,  = . ,  = [0xC6]",
    "PIC18F2220/2320/4220/4320\nSyntax:, No Operation = [ label ] NOP. Syntax:, No Operation = [ label ] NOP. Syntax:, No Operation = [ label ] NOP. Syntax:, No Operation = [ label ] NOP. Operands:, No Operation = None. Operands:, No Operation = None. Operands:, No Operation = None. Operands:, No Operation = None. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Operation:, No Operation = No operation. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Status Affected:, No Operation = None. Encoding:, No Operation = 0000 1111. Encoding:, No Operation = 0000 xxxx. Encoding:, No Operation = 0000 xxxx. Encoding:, No Operation = 0000 xxxx. Description:, No Operation = No operation.. Description:, No Operation = No operation.. Description:, No Operation = No operation.. Description:, No Operation = No operation..",
    "PIC18F2220/2320/4220/4320\nWords:, No Operation = 1. Words:, No Operation = 1. Words:, No Operation = 1. Words:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Cycles:, No Operation = 1. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q Cycle Activity:, No Operation = Q Cycle Activity:. Q1, No Operation = Q2. Q1, No Operation = Q3. Q1, No Operation = . Q1, No Operation = Q4. Decode, No Operation = No operation. Decode, No Operation = No operation. Decode, No Operation = . Decode, No Operation = No operation\nExample:\nNone.",
    "PIC18F2220/2320/4220/4320\nSyntax:, Pop Top of Return Stack = [ label ] POP. Syntax:, Pop Top of Return Stack = [ label ] POP. Syntax:, Pop Top of Return Stack = [ label ] POP. Syntax:, Pop Top of Return Stack = [ label ] POP. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operands:, Pop Top of Return Stack = None. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Operation:, Pop Top of Return Stack = (TOS) \u2192 bit bucket. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Status Affected:, Pop Top of Return Stack = None. Encoding:, Pop Top of Return Stack = 0000. Encoding:, Pop Top of Return Stack =",
    "PIC18F2220/2320/4220/4320\n0000. Encoding:, Pop Top of Return Stack = 0000. Encoding:, Pop Top of Return Stack = 0110. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previ- ous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previ- ous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and is discarded. The TOS value then becomes the previ- ous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Description:, Pop Top of Return Stack = The TOS value is pulled off the return stack and",
    "PIC18F2220/2320/4220/4320\nis discarded. The TOS value then becomes the previ- ous value that was pushed onto the return stack. This instruction is provided to enable the user to properly manage the return stack to incorporate a software stack.. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Words:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Cycles:, Pop Top of Return Stack = 1. Q Cycle Activity: Q1, Pop Top of Return Stack = Q2. Q Cycle Activity: Q1, Pop Top of Return Stack = Q3. Q Cycle Activity: Q1, Pop Top of Return Stack = . Q Cycle Activity: Q1, Pop Top of Return Stack = Q4. Decode, Pop Top of Return Stack = No operation. Decode, Pop Top of Return Stack = POP TOS value. Decode, Pop Top of Return Stack = POP TOS value. Decode, Pop Top of Return",
    "PIC18F2220/2320/4220/4320\nStack = No operation. Example:, Pop Top of Return Stack = POP GOTO. Example:, Pop Top of Return Stack = NEW =. Example:, Pop Top of Return Stack = 0x0031A2 0x014332. Example:, Pop Top of Return Stack = . Before Instruction TOS Stack (1 level down) After Instruction, Pop Top of Return Stack = Before Instruction TOS Stack (1 level down) After Instruction. Before Instruction TOS Stack (1 level down) After Instruction, Pop Top of Return Stack = =. Before Instruction TOS Stack (1 level down) After Instruction, Pop Top of Return Stack = . Before Instruction TOS Stack (1 level down) After Instruction, Pop Top of Return Stack = . TOS PC, Pop Top of Return Stack = TOS PC. TOS PC, Pop Top of Return Stack = = =. TOS PC, Pop Top of Return Stack = 0x014332 NEW. TOS PC, Pop Top of Return Stack = ",
    "PIC18F2220/2320/4220/4320\nSyntax:, Push Top of Return Stack = [ label ] PUSH. Syntax:, Push Top of Return Stack = [ label ] PUSH. Syntax:, Push Top of Return Stack = [ label ] PUSH. Syntax:, Push Top of Return Stack = [ label ] PUSH. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operands:, Push Top of Return Stack = None. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Operation:, Push Top of Return Stack = (PC + 2) \u2192 TOS. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Status Affected:, Push Top of Return Stack = None. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of",
    "PIC18F2220/2320/4220/4320\nReturn Stack = 0000. Encoding:, Push Top of Return Stack = 0000. Encoding:, Push Top of Return Stack = 0101. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows to implement a software stack by modifying TOS, and then push it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows to implement a software stack by modifying TOS, and then push it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows to implement a software stack by modifying TOS, and then push it onto the return stack.. Description:, Push Top of Return Stack = The PC + 2 is pushed onto the top of the return stack. The previous TOS value is pushed down on the stack. This instruction allows",
    "PIC18F2220/2320/4220/4320\nto implement a software stack by modifying TOS, and then push it onto the return stack.. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Words:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Cycles:, Push Top of Return Stack = 1. Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q Cycle Activity:, Push Top of Return Stack = . Q1, Push Top of Return Stack = Q2. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q3. Q1, Push Top of Return Stack = Q4. Decode, Push Top of Return Stack = PUSH PC+2 onto return stack. Decode, Push Top of Return Stack = No operation. Decode, Push Top of Return Stack =",
    "PIC18F2220/2320/4220/4320\nNo operation. Decode, Push Top of Return Stack = No operation. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Example:, Push Top of Return Stack = PUSH. Before Instruction TOS, Push Top of Return Stack = Before Instruction TOS. Before Instruction TOS, Push Top of Return Stack = = =. Before Instruction TOS, Push Top of Return Stack = 0x00345A 0x000124. Before Instruction TOS, Push Top of Return Stack = 0x00345A 0x000124. After Instruction PC, Push Top of Return Stack = After Instruction PC. After Instruction PC, Push Top of Return Stack = =. After Instruction PC, Push Top of Return Stack = 0x000126. After Instruction PC, Push Top of Return Stack = 0x000126. TOS Stack (1 level down), Push Top of Return Stack = TOS Stack (1 level down). TOS Stack (1 level down), Push Top of Return Stack = = =. TOS Stack (1 level",
    "PIC18F2220/2320/4220/4320\ndown), Push Top of Return Stack = 0x000126 0x00345A. TOS Stack (1 level down), Push Top of Return Stack = 0x000126 0x00345A",
    "PIC18F2220/2320/4220/4320\nSyntax:, Relative Call = [ label ] RCALL n. Syntax:, Relative Call = [ label ] RCALL n. Syntax:, Relative Call = [ label ] RCALL n. Syntax:, Relative Call = [ label ] RCALL n. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operands:, Relative Call = -1024 \u2264 n \u2264 1023. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Operation:, Relative Call = (PC) + 2 \u2192 TOS, (PC) + 2 + 2n \u2192 PC. Status Affected:, Relative Call = None. Status Affected:, Relative Call = None. Status Affected:,",
    "PIC18F2220/2320/4220/4320\nRelative Call = None. Status Affected:, Relative Call = None. Encoding:, Relative Call = 1101. Encoding:, Relative Call = 1nnn. Encoding:, Relative Call = nnnn. Encoding:, Relative Call = nnnn. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> to the PC. Since the PCwill have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> to the PC. Since the PCwill have incremented to fetch the next instruction, the new address",
    "PIC18F2220/2320/4220/4320\nwill be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> to the PC. Since the PCwill have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Description:, Relative Call = Subroutine call with a jump up to 1K from the current location. First, return address (PC+2) is pushed onto the stack. Then, add the 2GLYPH<146>s complement number GLYPH<145>2nGLYPH<146> to the PC. Since the PCwill have incremented to fetch the next instruction, the new address will be PC + 2 + 2n. This instruction is a two-cycle instruction.. Words:, Relative Call = 1. Words:, Relative Call =",
    "PIC18F2220/2320/4220/4320\n1. Words:, Relative Call = 1. Words:, Relative Call = 1. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Cycles:, Relative Call = 2. Q Cycle Activity: Q1, Relative Call = Q2. Q Cycle Activity: Q1, Relative Call = Q3. Q Cycle Activity: Q1, Relative Call = Q3. Q Cycle Activity: Q1, Relative Call = Q4. Decode, Relative Call = Read literal GLYPH<145>nGLYPH<146> Push PC to stack. Decode, Relative Call = Process Data. Decode, Relative Call = Process Data. Decode, Relative Call = Write to PC. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = No operation. No operation, Relative Call = No operation",
    "PIC18F2220/2320/4220/4320\nSyntax:, Reset = [ label ] RESET. Syntax:, Reset = [ label ] RESET. Syntax:, Reset = [ label ] RESET. Syntax:, Reset = [ label ] RESET. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operands:, Reset = None. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Operation:, Reset = Reset all registers and flags that are affected by a MCLR Reset.. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Status Affected:, Reset = All. Encoding:, Reset = 0000. Encoding:, Reset = 0000. Encoding:, Reset = 1111. Encoding:, Reset = 1111. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This",
    "PIC18F2220/2320/4220/4320\ninstruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Description:, Reset = This instruction provides a way to execute a MCLR Reset in software.. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Words:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Cycles:, Reset = 1. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q Cycle Activity:, Reset = Q Cycle Activity:. Q1, Reset = Q2. Q1, Reset = Q3. Q1, Reset = . Q1, Reset = Q4. Decode, Reset = Start reset. Decode, Reset = No operation. Decode, Reset = . Decode, Reset = No operation. Example:, Reset = RESET. Example:, Reset = RESET. Example:, Reset = RESET. Example:,",
    "PIC18F2220/2320/4220/4320\nReset = RESET. After Instruction, Reset = After Instruction. After Instruction, Reset = Reset Value. After Instruction, Reset = Reset Value. After Instruction, Reset = Reset Value\nExample:\nHERE\nRCALL Jump\nBefore Instruction\nPC = Address (HERE)\nAfter Instruction\nPC =\nAddress\n(Jump)\nTOS =\nAddress\n(HERE + 2)",
    "PIC18F2220/2320/4220/4320\nSyntax:, RETFIE = Syntax:. Syntax:, Return from Interrupt = [ label ] RETFIE [s]. Syntax:, Return from Interrupt = [ label ] RETFIE [s]. Syntax:, Return from Interrupt = [ label ] RETFIE [s]. Operands:, RETFIE = Operands:. Operands:, Return from Interrupt = s \u2208 [0,1]. Operands:, Return from Interrupt = s \u2208 [0,1]. Operands:, Return from Interrupt = s \u2208 [0,1]. Operation:, RETFIE = Operation:. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192",
    "PIC18F2220/2320/4220/4320\nBSR,. Operation:, Return from Interrupt = (TOS) \u2192 PC, 1 \u2192 GIE/GIEH or PEIE/GIEL; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR,. Status Affected:, RETFIE = Status Affected:. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Status Affected:, Return from Interrupt = GIE/GIEH, PEIE/GIEL.. Encoding:, RETFIE = Encoding:. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0000. Encoding:, Return from Interrupt = 0001. Description:, RETFIE = Description:. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If GLYPH<145>",
    "PIC18F2220/2320/4220/4320\nsGLYPH<146> = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If GLYPH<145>sGLYPH<146> = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If GLYPH<145> sGLYPH<146> = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If GLYPH<145>sGLYPH<146> = 0 , no update of these registers occurs (default).. Description:, Return from Interrupt = Return from Interrupt. Stack is popped and Top-of-Stack (TOS) is loaded into the PC. Interrupts are enabled by setting either the high or low-priority global interrupt enable bit. If GLYPH<145>",
    "PIC18F2220/2320/4220/4320\nsGLYPH<146> = 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If GLYPH<145>sGLYPH<146> = 0 , no update of these registers occurs (default).. Words:, RETFIE = Words:. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Words:, Return from Interrupt = 1. Cycles:, RETFIE = Cycles:. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Cycles:, Return from Interrupt = 2. Q Cycle Activity:, RETFIE = Q Cycle Activity:. Q Cycle Activity:, Return from Interrupt = Q Cycle Activity:. Q Cycle Activity:, Return from Interrupt = Q Cycle Activity:. Q Cycle Activity:, Return from Interrupt = Q Cycle Activity:. , RETFIE = Q1. , Return from Interrupt = Q2. , Return from Interrupt = Q3. , Return from Interrupt = . , RETFIE = Decode. , Return from Interrupt = No operation. , Return",
    "PIC18F2220/2320/4220/4320\nfrom Interrupt = No operation. , Return from Interrupt = No operation. , RETFIE = No operation. , Return from Interrupt = No operation. , Return from Interrupt = No operation. , Return from Interrupt = No operation",
    "Example:\nRETFIE  1\nAfter Interrupt\nPC\n=\nTOS\nW\n=\nWS\nBSR\n=\nBSRS\nSTATUS\n=\nSTATUSS\nGIE/GIEH, PEIE/GIEL\n=\n1",
    "Example:\nSyntax:, Return Literal to W = [ label ] RETLW k. Syntax:, Return Literal to W = [ label ] RETLW k. Syntax:, Return Literal to W = [ label ] RETLW k. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operands:, Return Literal to W = 0 \u2264 k \u2264 255. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Operation:, Return Literal to W = k \u2192 W, (TOS) \u2192 PC, PCLATU, PCLATH are unchanged. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Status Affected:, Return Literal to W = None. Encoding:, Return Literal to W = 0000. Encoding:, Return Literal to W = 1100. Encoding:, Return Literal to W = kkkk kkkk. Description:, Return Literal",
    "Example:\nto W = Wis loaded with the eight-bit literal GLYPH<145> kGLYPH<146>. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal GLYPH<145> kGLYPH<146>. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Description:, Return Literal to W = Wis loaded with the eight-bit literal GLYPH<145> kGLYPH<146>. The program counter is loaded from the top of the stack (the return address). The high address latch (PCLATH) remains unchanged.. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Words:, Return Literal to W = 1. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Cycles:, Return Literal to W = 2. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q Cycle",
    "Example:\nActivity:, Return Literal to W = Q Cycle Activity:. Q Cycle Activity:, Return Literal to W = Q Cycle Activity:. Q1, Return Literal to W = Q2. Q1, Return Literal to W = Q3. Q1, Return Literal to W = Q4. Decode, Return Literal to W = Read literal GLYPH<145>kGLYPH<146>. Decode, Return Literal to W = Process Data. Decode, Return Literal to W = pop PC from stack, Write to W. No operation, Return Literal to W = No operation. No operation, Return Literal to W = No operation. No operation, Return Literal to W = No operation\nCALL TABLE\n; W contains table\n; offset value\n; W now has\n; table value\n:\nTABLE\nADDWF PCL\n; W = offset\nRETLW k0\n; Begin table\nRETLW k1\n;\n:\n:\nRETLW kn\n; End of table",
    "Before Instruction\nW\n=\n0x07\nAfter Instruction\nW\n=\nvalue of kn",
    "PIC18F2220/2320/4220/4320\nSyntax:, Return from Subroutine = [ label ] RETURN [s]. Operands:, Return from Subroutine = s \u2208 [0,1]. Operation:, Return from Subroutine = (TOS) \u2192 PC; if s = 1 , (WS) \u2192 W, (STATUSS) \u2192 STATUS, (BSRS) \u2192 BSR, PCLATU, PCLATH are\nStatus Affected:",
    "None\nEncoding:\n0000\n0000\n0001\n001s\nDescription:\nReturn from subroutine. The stack is popped and the top of the stack (TOS) is loaded into the program counter. If GLYPH<145>sGLYPH<146>= 1 , the contents of the shadow registers WS, STATUSS and BSRS are loaded into their corresponding registers, W, STATUS and BSR. If GLYPH<145>sGLYPH<146> = 0 , no update of these registers occurs (default).\nWords:\n1\nCycles:\n2\nQ Cycle Activity:\nDecode, Q2 = No operation. Decode, Q3 = Process Data. Decode, Q4 = pop PC from stack. No operation, Q2 = No operation. No operation, Q3 = No operation. No operation, Q4 = No operation\nExample:\nRETURN\nAfter Interrupt PC = TOS",
    "None\nSyntax:, Rotate Left f through Carry = [ label ]. Syntax:, Rotate Left f through Carry = RLCF. Syntax:, Rotate Left f through Carry = f [,d [,a]]. Syntax:, Rotate Left f through Carry = f [,d [,a]]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Left f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n+1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n+1>,",
    "None\n(f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n+1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Operation:, Rotate Left f through Carry = (f<n>) \u2192 dest<n+1>, (f<7>) \u2192 C, (C) \u2192 dest<0>. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = C, N, Z. Status Affected:, Rotate Left f through Carry = C, N, Z. Encoding:, Rotate Left f through Carry = 0011. Encoding:, Rotate Left f through Carry = 01da. Encoding:, Rotate Left f through Carry = ffff. Encoding:, Rotate Left f through Carry = ffff. Description:, Rotate Left f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the left through the Carry Flag.",
    "None\nIf GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Rotate Left f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the left through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145>",
    "None\n1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Rotate Left f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the left through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0",
    "None\nGLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default).. Description:, Rotate Left f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the left through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> = 1 , then the bank will be selected as per the BSR value (default)..",
    "None\nWords:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Words:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Cycles:, Rotate Left f through Carry = 1. Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Q Cycle Activity: Q1, Rotate Left f through Carry = . Decode, Rotate Left f through Carry = Q2 Read register GLYPH<145>f GLYPH<146>. Decode, Rotate Left f through Carry = Q3. Decode, Rotate Left f through Carry = Q3. Decode, Rotate Left f through Carry = Q4. , Rotate Left f through Carry = . , Rotate Left f through Carry = Process Data. , Rotate Left f through Carry = Process Data. , Rotate Left f through Carry = Write to destination. Example:, Rotate Left f through Carry =",
    "None\nExample:. Example:, Rotate Left f through Carry = Example:. Example:, Rotate Left f through Carry = Example:. Example:, Rotate Left f through Carry = Example:. Before Instruction, Rotate Left f through Carry = RLCF. Before Instruction, Rotate Left f through Carry = REG,. Before Instruction, Rotate Left f through Carry = W. Before Instruction, Rotate Left f through Carry = . REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = REG = 1110 0110 C = 0 After Instruction. REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = REG = 1110 0110 C = 0 After Instruction. REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = REG = 1110 0110 C = 0 After Instruction. REG = 1110 0110 C = 0 After Instruction, Rotate Left f through Carry = REG = 1110 0110 C = 0 After Instruction. REG, Rotate Left f through Carry = = 1110. REG, Rotate Left f through Carry = 0110. REG, Rotate Left f through Carry = . REG, Rotate Left f through Carry = . W C, Rotate Left f through Carry =",
    "None\n= 1100 =. W C, Rotate Left f through Carry = 1100. W C, Rotate Left f through Carry = . W C, Rotate Left f through Carry = ",
    "PIC18F2220/2320/4220/4320\nRLNCF",
    "Rotate Left f (no carry)\nSyntax:\n[ label ] RLNCF     f [,d [,a]]\nOperands:\n0 \u2264 f \u2264 255\nd \u2208 [0,1]\na \u2208 [0,1]\nOperation:\n(f<n>) \u2192 dest<n + 1>,\n(f<7>) \u2192 dest<0>\nStatus Affected:\nN, Z\nEncoding:\n0100\n01da\nffff\nffff\nDescription:",
    "Rotate Left f (no carry)\nThe contents of register GLYPH<145>fGLYPH<146> are rotated one bit to the left. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145> f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nRead\nregister GLYPH<145>fGLYPH<146>\nProcess\nData\nWrite to\ndestination",
    "Example:\nRLNCF\nREG\nBefore Instruction\nREG\n=\n1010 1011\nAfter Instruction\nREG\n=\n0101 0111\nregister f",
    "Example:\nSyntax:, Rotate Right f through Carry = [ label ] RRCF. Syntax:, Rotate Right f through Carry = . Syntax:, Rotate Right f through Carry = f [,d [,a]]. Syntax:, Rotate Right f through Carry = f [,d [,a]]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f through Carry = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n GLYPH<150> 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n",
    "Example:\nGLYPH<150> 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n GLYPH<150> 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Operation:, Rotate Right f through Carry = (f<n>) \u2192 dest<n GLYPH<150> 1>, (f<0>) \u2192 C, (C) \u2192 dest<7>. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Status Affected:, Rotate Right f through Carry = C, N, Z. Encoding:, Rotate Right f through Carry = 0011. Encoding:, Rotate Right f through Carry = 00da. Encoding:, Rotate Right f through Carry = ffff. Encoding:, Rotate Right f through Carry = ffff. Description:, Rotate Right f through Carry = The contents of register",
    "Example:\nGLYPH<145>f GLYPH<146> are rotated one bit to the right through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Rotate Right f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the right through the Carry Flag. If GLYPH<145> dGLYPH<146> is",
    "Example:\nGLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Rotate Right f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the right through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1",
    "Example:\nGLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Rotate Right f through Carry = The contents of register GLYPH<145>f GLYPH<146> are rotated one bit to the right through the Carry Flag. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145> fGLYPH<146> (default). If GLYPH<145>aGLYPH<146>",
    "Example:\nis GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Words:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Cycles:, Rotate Right f through Carry = 1. Q Cycle Activity: Q1, Rotate Right f through Carry = . Q Cycle Activity: Q1, Rotate Right f through Carry = . Q Cycle Activity: Q1, Rotate Right f through Carry = . Q Cycle Activity: Q1, Rotate Right f through Carry = . Decode, Rotate Right f through Carry = Q2. Decode, Rotate Right f through Carry = Q3. Decode, Rotate Right f through Carry = Q3.",
    "Example:\nDecode, Rotate Right f through Carry = Q4. , Rotate Right f through Carry = Read register GLYPH<145>f GLYPH<146>. , Rotate Right f through Carry = Process Data. , Rotate Right f through Carry = Process Data. , Rotate Right f through Carry = Write to destination. Example:, Rotate Right f through Carry = RRCF. Example:, Rotate Right f through Carry = REG, W. Example:, Rotate Right f through Carry = . Example:, Rotate Right f through Carry = . Before Instruction REG = 1110 0110 C = 0, Rotate Right f through Carry = Before Instruction REG = 1110 0110 C = 0. Before Instruction REG = 1110 0110 C = 0, Rotate Right f through Carry = Before Instruction REG = 1110 0110 C = 0. Before Instruction REG = 1110 0110 C = 0, Rotate Right f through Carry = Before Instruction REG = 1110 0110 C = 0. Before Instruction REG = 1110 0110 C = 0, Rotate Right f through Carry = Before Instruction REG = 1110 0110 C = 0. After Instruction REG, Rotate Right f through Carry = = 1110. After Instruction REG, Rotate Right f through",
    "Example:\nCarry = 0110. After Instruction REG, Rotate Right f through Carry = . After Instruction REG, Rotate Right f through Carry = . W C, Rotate Right f through Carry = = 0111 = 0. W C, Rotate Right f through Carry = 0011. W C, Rotate Right f through Carry = . W C, Rotate Right f through Carry = \n1101 0111\nQ3",
    "PIC18F2220/2320/4220/4320\nSyntax:, Rotate Right f (no carry) = [ label ] RRNCF f [,d [,a]]. Syntax:, Rotate Right f (no carry) = [ label ] RRNCF f [,d [,a]]. Syntax:, Rotate Right f (no carry) = [ label ] RRNCF f [,d [,a]]. Syntax:, Rotate Right f (no carry) = [ label ] RRNCF f [,d [,a]]. Operands:, Rotate Right f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Rotate Right f (no carry) = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Rotate Right f",
    "PIC18F2220/2320/4220/4320\n(no carry) = (f<n>) \u2192 dest<n-1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n-1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n-1>, (f<0>) \u2192 dest<7>. Operation:, Rotate Right f (no carry) = (f<n>) \u2192 dest<n-1>, (f<0>) \u2192 dest<7>. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Status Affected:, Rotate Right f (no carry) = N, Z. Encoding:, Rotate Right f (no carry) = 0100. Encoding:, Rotate Right f (no carry) = 00da.",
    "PIC18F2220/2320/4220/4320\nEncoding:, Rotate Right f (no carry) = ffff. Encoding:, Rotate Right f (no carry) = ffff. Description:, Rotate Right f (no carry) = The contents of register GLYPH<145>f GLYPH<146> are. Description:, Rotate Right f (no carry) = The contents of register GLYPH<145>f GLYPH<146> are. Description:, Rotate Right f (no carry) = The contents of register GLYPH<145>f GLYPH<146> are. Description:, Rotate Right f (no carry) = The contents of register GLYPH<145>f GLYPH<146> are",
    "PIC18F2220/2320/4220/4320\nThe contents of register GLYPH<145>fGLYPH<146> are rotated one bit to the right. If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146>,  the result is placed in W. If GLYPH<145>dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is placed back in register GLYPH<145>fGLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nDecode\nQ2\nQ4\nRead\nProcess register GLYPH<145>fGLYPH<146>\nData\nExample 1:\nRRNCF   REG, 1, 0",
    "PIC18F2220/2320/4220/4320\nBefore Instruction\nREG\n=\nAfter Instruction\nREG\n=\n1110 1011\nExample 2:\nRRNCF   REG, W\nBefore Instruction\nW\n=\n?\nREG\n=\n1101 0111\nAfter Instruction\nW\n=\n1110 1011\nREG\n=\n1101 0111\nWrite to destination",
    "PIC18F2220/2320/4220/4320\nSyntax:, Set f = [ label ] SETF f [,a]. Syntax:, Set f = [ label ] SETF f [,a]. Syntax:, Set f = [ label ] SETF f [,a]. Syntax:, Set f = [ label ] SETF f [,a]. Syntax:, Set f = [ label ] SETF f [,a]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operands:, Set f = 0 \u2264 f \u2264 255 a \u2208 [0,1]. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Operation:, Set f = FFh \u2192 f. Status",
    "PIC18F2220/2320/4220/4320\nAffected:, Set f = None. Status Affected:, Set f = None. Status Affected:, Set f = None. Status Affected:, Set f = None. Status Affected:, Set f = None. Encoding:, Set f = 0110. Encoding:, Set f = 100a. Encoding:, Set f = 100a. Encoding:, Set f = ffff. Encoding:, Set f = ffff. Description:, Set f = The contents of the specified regis- ter are set to FFh. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Set f = The contents of the specified regis- ter are set to FFh. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0",
    "PIC18F2220/2320/4220/4320\nGLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Set f = The contents of the specified regis- ter are set to FFh. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Set f = The contents of the specified regis- ter are set to FFh. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If",
    "PIC18F2220/2320/4220/4320\nGLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Set f = The contents of the specified regis- ter are set to FFh. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, over- riding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Words:, Set f = 1. Words:, Set f = 1. Words:, Set f = 1. Words:, Set f = 1. Words:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Cycles:, Set f = 1. Q Cycle Activity:, Set f = . Q",
    "PIC18F2220/2320/4220/4320\nCycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q Cycle Activity:, Set f = . Q1, Set f = Q2. Q1, Set f = Q2. Q1, Set f = Q3. Q1, Set f = Q3. Q1, Set f = Q4. Decode, Set f = Read register GLYPH<145>f GLYPH<146>. Decode, Set f = Read register GLYPH<145>f GLYPH<146>. Decode, Set f = Process Data. Decode, Set f = Process Data. Decode, Set f = Write register GLYPH<145>f GLYPH<146>. Example: SETF Before Instruction, Set f = Example: SETF Before Instruction. Example: SETF Before Instruction, Set f = . Example: SETF Before Instruction, Set f = . Example: SETF Before Instruction, Set f = . Example: SETF Before Instruction, Set f = . After Instruction REG =, Set f = After Instruction REG =. After Instruction REG",
    "PIC18F2220/2320/4220/4320\n=, Set f = . After Instruction REG =, Set f = . After Instruction REG =, Set f = . After Instruction REG =, Set f = ",
    "Enter Sleep mode\nSyntax:\n[\nlabel\n]\nSLEEP\nOperands:\nNone\nOperation:\n00h \u2192 WDT,\n0 \u2192 WDT postscaler,\n1\n\u2192\nTO,\n0 \u2192 PD\nStatus Affected:\nTO, PD\nEncoding:\n0000\n0000\n0000\n0011\nDescription:\nThe Power-Down status bit (PD) is cleared. The Time-out status bit (TO) is set. Watchdog Timer and its postscaler are cleared. The processor is put into Sleep mode with the oscillator stopped.\nWords:\n1\nCycles:\n1\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nDecode\nNo\noperation\nProcess\nData\nGo to\nSleep",
    "Example:\nSLEEP\nBefore Instruction\nTO\n=\n?\nPD\n=\n?\nAfter Instruction\nTO\n=\n1 GLYPH<134>\nPD\n=\n0\n- GLYPH<134>   If WDT causes wake-up, this bit is cleared.",
    "Example:\nSyntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Syntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Syntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Syntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Syntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Syntax:, Subtract f from Wwith Borrow = [ label ] SUBFWB f [,d [,a]]. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208.",
    "Example:\nOperands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208. Operands:, Subtract f from Wwith Borrow = 0 \u2264 f \u2264 255 \u2208. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f) GLYPH<150> (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f) GLYPH<150> (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f) GLYPH<150> (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f) GLYPH<150> (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f) GLYPH<150> (C) \u2192 dest. Operation:, Subtract f from Wwith Borrow = (W) GLYPH<150> (f)",
    "Example:\nGLYPH<150> (C) \u2192 dest. Status Affected:, Subtract f from Wwith Borrow = . Status Affected:, Subtract f from Wwith Borrow = . Status Affected:, Subtract f from Wwith Borrow = . Status Affected:, Subtract f from Wwith Borrow = . Status Affected:, Subtract f from Wwith Borrow = . Status Affected:, Subtract f from Wwith Borrow = . Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da ffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da ffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da",
    "Example:\nffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da ffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da ffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Encoding:, Subtract f from Wwith Borrow = N, OV, C, DC, Z 0101 01da ffff ffff Subtract register GLYPH<145>f GLYPH<146> and carry flag (borrow) from W(2GLYPH<146>s complement. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract",
    "Example:\nf from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Words:, Subtract f from Wwith Borrow = 1. Q Cycle, Subtract f from Wwith Borrow = . Q Cycle, Subtract f from Wwith Borrow = . Q Cycle, Subtract f from Wwith Borrow = . Q Cycle, Subtract f from Wwith Borrow = . Q Cycle, Subtract f from Wwith Borrow = . Q Cycle, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Activity: Q1, Subtract f from Wwith Borrow = . Decode, Subtract f from Wwith Borrow = . Decode, Subtract f from",
    "Example:\nWwith Borrow = . Decode, Subtract f from Wwith Borrow = . Decode, Subtract f from Wwith Borrow = . Decode, Subtract f from Wwith Borrow = . Decode, Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = Q2 Q3 Q4 Read Process Write to. , Subtract f from Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. , Subtract f from Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. , Subtract f",
    "Example:\nfrom Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. , Subtract f from Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. , Subtract f from Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. , Subtract f from Wwith Borrow = register GLYPH<145>f GLYPH<146> Data destination SUBFWB REG Instruction. REG, Subtract f from Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 0x03. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = =. W, Subtract f from Wwith Borrow = 0x02. W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith",
    "Example:\nBorrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = =. C, Subtract f from Wwith Borrow = 0x01. C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . After, Subtract f from Wwith Borrow = . Instruction, Subtract f from Wwith Borrow = =. Instruction, Subtract f from Wwith Borrow = . Instruction, Subtract f from Wwith Borrow = . Instruction, Subtract f from Wwith Borrow = . Instruction, Subtract f from Wwith Borrow = . Instruction, Subtract f from Wwith Borrow = . REG, Subtract f",
    "Example:\nfrom Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 0xFF. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = =. W, Subtract f from Wwith Borrow = 0x02. W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = =. C, Subtract f from Wwith Borrow = 0x00. C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = 0x00. Z,",
    "Example:\nSubtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . Z, Subtract f from Wwith Borrow = . N, Subtract f from Wwith Borrow = =. N, Subtract f from Wwith Borrow = 0x01. N, Subtract f from Wwith Borrow = ; result. N, Subtract f from Wwith Borrow = is. N, Subtract f from Wwith Borrow = negative. N, Subtract f from Wwith Borrow = . Example 2: SUBFWB REG, 0, 0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. Example 2: SUBFWB REG, 0, 0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. Example 2: SUBFWB REG, 0, 0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. Example 2: SUBFWB REG, 0,",
    "Example:\n0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. Example 2: SUBFWB REG, 0, 0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. Example 2: SUBFWB REG, 0, 0 Before Instruction, Subtract f from Wwith Borrow = Example 2: SUBFWB REG, 0, 0 Before Instruction. REG, Subtract f from Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 2. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = =. W, Subtract f from Wwith Borrow = 5. W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = .",
    "Example:\nC, Subtract f from Wwith Borrow = =. C, Subtract f from Wwith Borrow = 1. C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. REG, Subtract f from Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 2. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = =. W,",
    "Example:\nSubtract f from Wwith Borrow = 3. W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = =. C, Subtract f from Wwith Borrow = 1. C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . C, Subtract f from Wwith Borrow = . Z N, Subtract f from Wwith Borrow = = =. Z N, Subtract f from Wwith Borrow = 0 0. Z N, Subtract f from Wwith Borrow = . Z N, Subtract f from Wwith Borrow = . Z N, Subtract f from Wwith Borrow = . Z N, Subtract f from Wwith Borrow = . Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction.",
    "Example:\nExample 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. Example 3: SUBFWB REG, 1, 0 Before Instruction, Subtract f from Wwith Borrow = Example 3: SUBFWB REG, 1, 0 Before Instruction. , Subtract f from Wwith Borrow = =. , Subtract f from Wwith Borrow = 1. , Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = . , Subtract f from Wwith Borrow = . ,",
    "Example:\nSubtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 2. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W C, Subtract f from Wwith Borrow = =. W C, Subtract f from Wwith Borrow = 0. W C, Subtract f from Wwith Borrow = . W C, Subtract f from Wwith Borrow = . W C, Subtract f from Wwith Borrow = . W C, Subtract f from Wwith Borrow = . After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction. After Instruction, Subtract f from Wwith Borrow = After Instruction.",
    "Example:\nREG, Subtract f from Wwith Borrow = =. REG, Subtract f from Wwith Borrow = 0. REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . REG, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = =. W, Subtract f from Wwith Borrow = 2. W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . W, Subtract f from Wwith Borrow = . C Z, Subtract f from Wwith Borrow = =. C Z, Subtract f from Wwith Borrow = 1. C Z, Subtract f from Wwith Borrow = . C Z, Subtract f from Wwith Borrow = . C Z, Subtract f from Wwith Borrow = . C Z, Subtract f from Wwith Borrow = . N, Subtract f from Wwith Borrow = = =. N, Subtract f from Wwith Borrow = 1",
    "Example:\n; 0. N, Subtract f from Wwith Borrow = result is. N, Subtract f from Wwith Borrow = zero. N, Subtract f from Wwith Borrow = . N, Subtract f from Wwith Borrow = ",
    "SUBLW\nSyntax:\nOperands:\nOperation:\nStatus Affected:\nEncoding:\nDescription:\nWords:\nCycles:",
    "Subtract W from Literal\n[ label ] SUBLW   k\n0 \u2264 k \u2264 255\nk GLYPH<150> (W)\n\u2192 W\nN, OV, C, DC, Z\n0000\n1000\nkkkk kkkk\nW is subtracted from the eight-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.\n1\n1\nQ Cycle Activity:\nDecode, Q2 = Read literal GLYPH<145>kGLYPH<146>. Decode, Q3 = Process Data. Decode, Q4 = Write to W",
    "Example 1:\nSUBLW\n0x02\nBefore Instruction\nW\n=\nC\n=\nAfter Instruction\nW\n=\nC\nZ\nN\n=\n=\n=\n1\n?\n1\n1\n0\n0\nExample 2:\nSUBLW",
    "Before Instruction\nW\n=\nC\n=\nAfter Instruction\nW\n=\nC\nZ\nN\n=\n=\n=\n2\n?\n0\n1\n1\n0\nExample 3:\nSUBLW\nBefore Instruction\nW\n=\nC\n=\n3\n?\nAfter Instruction\nW\n=\nFF\n; (2GLYPH<146>s complement)\nC\n=\n0\n; result is negative\nZ\n=\n0\nN\n=\n1",
    "Before Instruction\nSyntax:, Subtract Wfrom f = [ label ] SUBWF. Syntax:, Subtract Wfrom f = [ label ] SUBWF. Syntax:, Subtract Wfrom f = [ label ] SUBWF. Syntax:, Subtract Wfrom f = f [,d [,a]]. Syntax:, Subtract Wfrom f = f [,d [,a]]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f = . Operands:, Subtract Wfrom f = . Operation:, Subtract Wfrom f = (f) GLYPH<150> (W) \u2192 dest. Operation:, Subtract Wfrom",
    "Before Instruction\nf = (f) GLYPH<150> (W) \u2192 dest. Operation:, Subtract Wfrom f = (f) GLYPH<150> (W) \u2192 dest. Operation:, Subtract Wfrom f = . Operation:, Subtract Wfrom f = . Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f = . Status Affected:, Subtract Wfrom f = . Encoding:, Subtract Wfrom f = 0101 11da. Encoding:, Subtract Wfrom f = 0101 11da. Encoding:, Subtract Wfrom f = 0101 11da. Encoding:, Subtract Wfrom f = ffff. Encoding:, Subtract Wfrom f = ffff. Description:, Subtract Wfrom f = Subtract",
    "Before Instruction\nWfrom register GLYPH<145>f GLYPH<146> (2GLYPH<146>s complement method). If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If = GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f = Subtract Wfrom register GLYPH<145>f GLYPH<146> (2GLYPH<146>s complement method). If",
    "Before Instruction\nGLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If = GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f = Subtract Wfrom register GLYPH<145>f GLYPH<146> (2GLYPH<146>s complement method). If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If",
    "Before Instruction\nGLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If = GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f = Subtract Wfrom register GLYPH<145>f GLYPH<146> (2GLYPH<146>s complement method). If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register",
    "Before Instruction\nGLYPH<145>f GLYPH<146> (default). If = GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f = Subtract Wfrom register GLYPH<145>f GLYPH<146> (2GLYPH<146>s complement method). If GLYPH<145>dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If = GLYPH<145>aGLYPH<146> is",
    "Before Instruction\nGLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146>, then the bank will be selected as per the BSR value (default).. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Words:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = 1. Cycles:, Subtract Wfrom f = . Cycles:, Subtract Wfrom f = . Decode, Subtract Wfrom f = Read. Decode, Subtract Wfrom f = . Decode, Subtract Wfrom f = . Decode, Subtract Wfrom f = Q4 Process.",
    "Before Instruction\nDecode, Subtract Wfrom f = Write to. Example 1:, Subtract Wfrom f = register GLYPH<145>f GLYPH<146> Data SUBWF. Example 1:, Subtract Wfrom f = register GLYPH<145>f GLYPH<146> Data SUBWF. Example 1:, Subtract Wfrom f = register GLYPH<145>f GLYPH<146> Data SUBWF. Example 1:, Subtract Wfrom f = . Example 1:, Subtract Wfrom f = . Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = 3. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract",
    "Before Instruction\nWfrom f = . W, Subtract Wfrom f = = =. W, Subtract Wfrom f = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = ?. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . After, Subtract Wfrom f = =. After, Subtract Wfrom f = . After, Subtract Wfrom f = . After, Subtract Wfrom f = . After, Subtract Wfrom f = . Instruction, Subtract Wfrom f = Instruction. Instruction, Subtract Wfrom f = Instruction. Instruction, Subtract Wfrom f = Instruction. Instruction, Subtract Wfrom f = Instruction. Instruction, Subtract Wfrom f = Instruction. REG, Subtract Wfrom f = =. REG, Subtract",
    "Before Instruction\nWfrom f = 1. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = positive. W, Subtract Wfrom f = . C, Subtract Wfrom f = = result. C, Subtract Wfrom f = 1 ;. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . Z N, Subtract Wfrom f = = =. Z N, Subtract Wfrom f = 0 0. Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Z N, Subtract Wfrom f = . Example 2: SUBWF REG, W Before Instruction, Subtract Wfrom f = Example 2: SUBWF REG, W Before Instruction. Example",
    "Before Instruction\n2: SUBWF REG, W Before Instruction, Subtract Wfrom f = Example 2: SUBWF REG, W Before Instruction. Example 2: SUBWF REG, W Before Instruction, Subtract Wfrom f = Example 2: SUBWF REG, W Before Instruction. Example 2: SUBWF REG, W Before Instruction, Subtract Wfrom f = Example 2: SUBWF REG, W Before Instruction. Example 2: SUBWF REG, W Before Instruction, Subtract Wfrom f = Example 2: SUBWF REG, W Before Instruction. REG, Subtract Wfrom f = =. REG, Subtract Wfrom f = 2. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = 2. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = =.",
    "Before Instruction\nC, Subtract Wfrom f = ?. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = . REG, Subtract Wfrom f = =. REG, Subtract Wfrom f = 2. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W C, Subtract Wfrom f = = 0 =. W C, Subtract Wfrom f = 1 ; result 1. W C, Subtract Wfrom f = . W C, Subtract Wfrom f = zero. W C, Subtract Wfrom f = . N, Subtract Wfrom f = =. N, Subtract Wfrom f = 0.",
    "Before Instruction\nN, Subtract Wfrom f = . N, Subtract Wfrom f = . N, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . Example 3:, Subtract Wfrom f = . SUBWF REG, Subtract Wfrom f = SUBWF REG. SUBWF REG, Subtract Wfrom f = SUBWF REG. SUBWF REG, Subtract Wfrom f = SUBWF REG. SUBWF REG, Subtract Wfrom f = SUBWF REG. SUBWF REG, Subtract Wfrom f = SUBWF REG. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f = Before Instruction. Before Instruction, Subtract Wfrom f",
    "Before Instruction\n= Before Instruction. REG, Subtract Wfrom f = =. REG, Subtract Wfrom f = 0x01. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . REG, Subtract Wfrom f = . W, Subtract Wfrom f = =. W, Subtract Wfrom f = 0x02. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C, Subtract Wfrom f = =. C, Subtract Wfrom f = ?. C, Subtract Wfrom f = . C, Subtract Wfrom f = . C, Subtract Wfrom f = . After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. After Instruction, Subtract Wfrom f = After Instruction. REG,",
    "Before Instruction\nSubtract Wfrom f = = 0xFFh. REG, Subtract Wfrom f = . REG, Subtract Wfrom f = ;(2GLYPH<146>s complement). REG, Subtract Wfrom f = ;(2GLYPH<146>s complement). REG, Subtract Wfrom f = ;(2GLYPH<146>s complement). W, Subtract Wfrom f = =. W, Subtract Wfrom f = 0x02. W, Subtract Wfrom f = . W, Subtract Wfrom f = . W, Subtract Wfrom f = . C Z, Subtract Wfrom f = =. C Z, Subtract Wfrom f = 0x00. C Z, Subtract Wfrom f = . C Z, Subtract Wfrom f = negative. C Z, Subtract Wfrom f = . N, Subtract Wfrom f = = =. N, Subtract Wfrom f = 0x00 0x01. N, Subtract Wfrom",
    "Before Instruction\nf = . N, Subtract Wfrom f = . N, Subtract Wfrom f = \n; result is positive\n0x02\n; result is zero\n0x02",
    "PIC18F2220/2320/4220/4320\nSyntax:, SUBWFB = Syntax:. Syntax:, Subtract Wfrom f with Borrow = [ label ] SUBWFB. Syntax:, Subtract Wfrom f with Borrow = [ label ] SUBWFB. Syntax:, Subtract Wfrom f with Borrow = f [,d [,a]]. Operands:, SUBWFB = Operands:. Operands:, Subtract Wfrom f with Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f with Borrow = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Subtract Wfrom f with Borrow = . Operation:, SUBWFB = Operation:. Operation:, Subtract Wfrom f with Borrow = (f) GLYPH<150> (W) GLYPH<150> (C) \u2192 dest. Operation:, Subtract Wfrom f with Borrow = (f) GLYPH<150> (W)",
    "PIC18F2220/2320/4220/4320\nGLYPH<150> (C) \u2192 dest. Operation:, Subtract Wfrom f with Borrow = (f) GLYPH<150> (W) GLYPH<150> (C) \u2192 dest. Status Affected:, SUBWFB = Status Affected:. Status Affected:, Subtract Wfrom f with Borrow = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f with Borrow = N, OV, C, DC, Z. Status Affected:, Subtract Wfrom f with Borrow = N, OV, C, DC, Z. Encoding:, SUBWFB = Encoding:. Encoding:, Subtract Wfrom f with Borrow = 0101. Encoding:, Subtract Wfrom f with Borrow = 10da. Encoding:, Subtract Wfrom f with Borrow = ffff. Description:, SUBWFB = Description:. Description:, Subtract Wfrom f with Borrow = Subtract Wandthe Carry flag (bor- row) from register GLYPH<145>",
    "PIC18F2220/2320/4220/4320\nfGLYPH<146> (2GLYPH<146> s complement method). If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSRvalue. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f with Borrow = Subtract Wandthe Carry flag (bor- row) from register GLYPH<145> fGLYPH<146> (2GLYPH<146> s complement",
    "PIC18F2220/2320/4220/4320\nmethod). If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSRvalue. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Subtract Wfrom f with Borrow = Subtract Wandthe Carry flag (bor- row) from register GLYPH<145> fGLYPH<146> (2GLYPH<146> s complement method). If GLYPH<145> dGLYPH<146>",
    "PIC18F2220/2320/4220/4320\nis GLYPH<145> 0 GLYPH<146> , the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145> aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSRvalue. If GLYPH<145> aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Words:, SUBWFB = Words:. Words:, Subtract Wfrom f with Borrow = 1. Words:, Subtract Wfrom f with Borrow = 1. Words:, Subtract Wfrom f with Borrow = 1. Cycles:, SUBWFB = Cycles:. Cycles:, Subtract Wfrom f with Borrow = 1.",
    "PIC18F2220/2320/4220/4320\nCycles:, Subtract Wfrom f with Borrow = 1. Cycles:, Subtract Wfrom f with Borrow = 1. Q Cycle Activity:, SUBWFB = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom f with Borrow = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom f with Borrow = Q Cycle Activity:. Q Cycle Activity:, Subtract Wfrom f with Borrow = Q Cycle Activity:. , SUBWFB = Q1. , Subtract Wfrom f with Borrow = Q2. , Subtract Wfrom f with Borrow = Q3. , Subtract Wfrom f with Borrow = . , SUBWFB = Decode. , Subtract Wfrom f with Borrow = Read register GLYPH<145>f GLYPH<146>. , Subtract Wfrom f with Borrow = Process Data. , Subtract Wfrom f with Borrow = ",
    "Example 1:\nSUBWFB  REG, 1, 0",
    "Before Instruction\nREG\n=\n0x19\n(0001 1001)\nW\n=\n0x0D\n(0000 1101)\nC\n=\n0x01\nAfter Instruction\nREG\n=\n0x0C\n(0000 1011)\nW\n=\n0x0D\n(0000 1101)\nC\n=\n0x01\nZ\n=\n0x00\nN\n=\n0x00\n; result is positive\nExample 2:\nSUBWFB\nREG, 0, 0\nBefore Instruction\nREG\n=\n0x1B\n(0001 1011)\nW\n=\n0x1A\n(0001 1010)\nC\n=\n0x00\nAfter Instruction\nREG\n=\n0x1B\n(0001 1011)\nW\n=\n0x00\nC\n=\n0x01\nZ\n=\n0x01\n; result is zero\nN\n=\n0x00",
    "Example 3:\nSUBWFB  REG, 1, 0\nBefore Instruction\nREG\n=\n0x03\n(0000 0011)\nW\n=\n0x0E\n(0000 1101)\nC\n=\n0x01\nAfter Instruction\nREG\n=\n0xF5\n(1111 0100)\n; [2GLYPH<146>s comp]\nW\n=\n0x0E\n(0000 1101)\nC\n=\n0x00\nZ\n=\n0x00\nN\n=\n0x01\n; result is negative",
    "PIC18F2220/2320/4220/4320\nSyntax:, Swap f = [ label ] SWAPF f [,d [,a]]. Syntax:, Swap f = [ label ] SWAPF f [,d [,a]]. Syntax:, Swap f = [ label ] SWAPF f [,d [,a]]. Syntax:, Swap f = [ label ] SWAPF f [,d [,a]]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Swap f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f =",
    "PIC18F2220/2320/4220/4320\n(f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Operation:, Swap f = (f<3:0>) \u2192 dest<7:4>, (f<7:4>) \u2192 dest<3:0>. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Status Affected:, Swap f = None. Encoding:, Swap f = 0011. Encoding:, Swap f = 10da. Encoding:, Swap f = ffff. Encoding:, Swap f = ffff. Description:, Swap f = The upper and lower nibbles of reg- ister GLYPH<145>f GLYPH<146> are exchanged. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0",
    "PIC18F2220/2320/4220/4320\nGLYPH<146>, the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Swap f = The upper and lower nibbles of reg- ister GLYPH<145>f GLYPH<146> are exchanged. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1",
    "PIC18F2220/2320/4220/4320\nGLYPH<146> , the result is placed in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Swap f = The upper and lower nibbles of reg- ister GLYPH<145>f GLYPH<146> are exchanged. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed in register GLYPH<145>f GLYPH<146> (default). If",
    "PIC18F2220/2320/4220/4320\nGLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Description:, Swap f = The upper and lower nibbles of reg- ister GLYPH<145>f GLYPH<146> are exchanged. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is placed in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146> , the result is placed in register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> , the Access Bank will be selected,",
    "PIC18F2220/2320/4220/4320\noverriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).. Words:, Swap f = 1. Words:, Swap f = 1. Words:, Swap f = 1. Words:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1. Cycles:, Swap f = 1. Q Cycle Activity:, Swap f = . Q Cycle Activity:, Swap f = . Q Cycle Activity:, Swap f = . Q Cycle Activity:, Swap f = . Q1, Swap f = Q2. Q1, Swap f = Q3. Q1, Swap f = Q4. Q1, Swap f = Q4. Decode, Swap f = Read register GLYPH<145>f GLYPH<146>. Decode, Swap f = Process Data. Decode, Swap f = Write to destination. Decode, Swap f = Write to destination. Example:,",
    "PIC18F2220/2320/4220/4320\nSwap f = SWAPF. Example:, Swap f = REG. Example:, Swap f = . Example:, Swap f = . Before Instruction, Swap f = Before Instruction. Before Instruction, Swap f = Before Instruction. Before Instruction, Swap f = Before Instruction. Before Instruction, Swap f = Before Instruction. REG, Swap f = 0x53. REG, Swap f = . REG, Swap f = . REG, Swap f = . After Instruction REG = 0x35, Swap f = After Instruction REG = 0x35. After Instruction REG = 0x35, Swap f = After Instruction REG = 0x35. After Instruction REG = 0x35, Swap f = After Instruction REG = 0x35. After Instruction REG = 0x35, Swap f = After Instruction REG = 0x35",
    "PIC18F2220/2320/4220/4320\nSyntax:, Table Read = [ label ] TBLRD ( *; *+; *-; +*). Syntax:, Table Read = [ label ] TBLRD ( *; *+; *-; +*). Syntax:, Table Read = [ label ] TBLRD ( *; *+; *-; +*). Syntax:, Table Read = [ label ] TBLRD ( *; *+; *-; +*). Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operands:, Table Read = None. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) +1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) -1 \u2192 TBLPTR; if TBLRD",
    "PIC18F2220/2320/4220/4320\n+*, (TBLPTR) +1 \u2192 TBLPTR, \u2192. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) +1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) -1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) +1 \u2192 TBLPTR, \u2192. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) +1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) -1 \u2192 TBLPTR;",
    "PIC18F2220/2320/4220/4320\nif TBLRD +*, (TBLPTR) +1 \u2192 TBLPTR, \u2192. Operation:, Table Read = if TBLRD *, (Prog Mem (TBLPTR)) \u2192 TABLAT, TBLPTR - No Change; if TBLRD *+, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) +1 \u2192 TBLPTR; if TBLRD *-, (Prog Mem (TBLPTR)) \u2192 TABLAT, (TBLPTR) -1 \u2192 TBLPTR; if TBLRD +*, (TBLPTR) +1 \u2192 TBLPTR, \u2192. Status Affected:None, Table Read = Status Affected:None. Status Affected:None, Table Read = Status Affected:None. Status Affected:None, Table Read = Status Affected:None. Status Affected:None, Table Read = Status Affected:None. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 0000. Encoding:, Table Read = 10nn * *+ *-. Description:, Table Read",
    "PIC18F2220/2320/4220/4320\n= This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2 Mbyte address range. TBLPTR[0] = 0 : Least Significant. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2 Mbyte address range. TBLPTR[0] = 0 : Least Significant. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2 Mbyte address range.",
    "PIC18F2220/2320/4220/4320\nTBLPTR[0] = 0 : Least Significant. Description:, Table Read = This instruction is used to read the contents of Program Memory (P.M.). To address the program memory, a pointer called Table Pointer (TBLPTR) is used. The TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2 Mbyte address range. TBLPTR[0] = 0 : Least Significant. , Table Read = . , Table Read = . , Table Read = Byte of Program Memory Word. , Table Read = Byte of Program Memory Word. , Table Read = TBLPTR[0] = 1. , Table Read = TBLPTR[0] = 1. , Table Read = Most Significant Byte of Program. , Table Read = Most Significant Byte of Program. , Table Read = Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: GLYPH<149> no change GLYPH<149> post-increment GLYPH<149> post-decrement. , Table Read = Memory Word The TBLRD instruction can modify the value",
    "PIC18F2220/2320/4220/4320\nof TBLPTR as follows: GLYPH<149> no change GLYPH<149> post-increment GLYPH<149> post-decrement. , Table Read = Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: GLYPH<149> no change GLYPH<149> post-increment GLYPH<149> post-decrement. , Table Read = Memory Word The TBLRD instruction can modify the value of TBLPTR as follows: GLYPH<149> no change GLYPH<149> post-increment GLYPH<149> post-decrement. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Words:, Table Read = 1. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Cycles:, Table Read = 2. Q Cycle Activity:, Table Read = Q Cycle Activity:. Q Cycle Activity:, Table Read = Q Cycle Activity:. Q Cycle Activity:, Table Read =",
    "PIC18F2220/2320/4220/4320\nQ Cycle Activity:. Q Cycle Activity:, Table Read = Q Cycle Activity:. Q1, Table Read = Q2. Q1, Table Read = . Q1, Table Read = Q3. Q1, Table Read = Q4. , Table Read = Decode. , Table Read = No operation. , Table Read = No operation. , Table Read = No operation. No, Table Read = operation. No, Table Read = No operation (Read Program Memory). No, Table Read = No operation. No, Table Read = No operation (Write TABLAT)",
    "PIC18F2220/2320/4220/4320\nExample1:, Table Read = TBLRD. Example1:, (contGLYPH<146>d) = ;. Example1:,  = . Before Instruction, Table Read = Before Instruction. Before Instruction, (contGLYPH<146>d) = Before Instruction. Before Instruction,  = Before Instruction. TABLAT, Table Read = TABLAT. TABLAT, (contGLYPH<146>d) = =. TABLAT,  = 0x55. TBLPTR, Table Read = TBLPTR. TBLPTR, (contGLYPH<146>d) = =. TBLPTR,  = 0x00A356. MEMORY(0x00A356), Table Read = MEMORY(0x00A356). MEMORY(0x00A356), (contGLYPH<146>d) = =. MEMORY(0x00A356),  = 0x34. After Instruction, Table Read = After Instruction. After Instruction, (contGLYPH<146>d) = After Instruction. After Instruction,",
    "PIC18F2220/2320/4220/4320\n= After Instruction. TABLAT, Table Read = TABLAT. TABLAT, (contGLYPH<146>d) = =. TABLAT,  = 0x34. TBLPTR, Table Read = TBLPTR. TBLPTR, (contGLYPH<146>d) = =. TBLPTR,  = 0x00A357. Example2:, Table Read = TBLRD +*. Example2:, (contGLYPH<146>d) = ;. Example2:,  = . Before Instruction, Table Read = Before Instruction. Before Instruction, (contGLYPH<146>d) = Before Instruction. Before Instruction,  = Before Instruction. TABLAT, Table Read = TABLAT. TABLAT, (contGLYPH<146>d) = =. TABLAT,  = 0xAA. TBLPTR, Table Read = TBLPTR. TBLPTR, (contGLYPH<146>d) = =. TBLPTR,",
    "PIC18F2220/2320/4220/4320\n= 0x01A357. MEMORY(0x01A357), Table Read = MEMORY(0x01A357). MEMORY(0x01A357), (contGLYPH<146>d) = =. MEMORY(0x01A357),  = 0x12. MEMORY(0x01A358), Table Read = MEMORY(0x01A358). MEMORY(0x01A358), (contGLYPH<146>d) = =. MEMORY(0x01A358),  = 0x34. After Instruction, Table Read = After Instruction. After Instruction, (contGLYPH<146>d) = After Instruction. After Instruction,  = After Instruction. TABLAT, Table Read = TABLAT. TABLAT, (contGLYPH<146>d) = =. TABLAT,  = 0x34. TBLPTR, Table Read = TBLPTR. TBLPTR, (contGLYPH<146>d) = =. TBLPTR,  = 0x01A358",
    "PIC18F2220/2320/4220/4320\nSyntax:, Table Write = [ label ] TBLWT ( *; *+; *-; +*). Operands:, Table Write = None. Operation:, Table Write = if TBLWT*, (TABLAT) \u2192 Holding Register, TBLPTR - No Change; if TBLWT*+, (TABLAT) \u2192 Holding Register, (TBLPTR) +1 \u2192 TBLPTR; if TBLWT*-, (TABLAT) \u2192 Holding Register, (TBLPTR) -1 \u2192 TBLPTR; if TBLWT+*, (TBLPTR) +1 \u2192 TBLPTR, (TABLAT) \u2192 Holding Register\nStatus Affected: None\nEncoding:\n0000, 1 = 0000. 0000, 2 = 0000. 0000, 3 = 11nn nn=0 * =1 *+\nDescription:",
    "PIC18F2220/2320/4220/4320\nThis instruction uses the 3 LSBs of TBLPTR to determine which of the 8 holding registers the TABLAT is written to. The holding registers are used to program the contents of Program Memory (P.M.). (Refer to Section 6.0 GLYPH<147>Flash Program MemoryGLYPH<148> for additional details on programming Flash memory.)\nThe TBLPTR (a 21-bit pointer) points to each byte in the program memory. TBLPTR has a 2 MBtye address range. The LSb of the TBLPTR selects which byte of the program memory location to access.\nTBLPTR[0] = 0 : Least Significant Byte of Program Memory Word\nTBLPTR[0] = 1\n: Most Significant\nByte of Program\nMemory Word\nThe TBLWT instruction can modify the value of TBLPTR as follows:\nGLYPH<149> no change\nGLYPH<149> post-increment\nGLYPH<149> post-decrement\nGLYPH<149> pre-increment",
    "TBLWT Table Write  (Continued)\nWords:\n1\nCycles: 2\nQ Cycle Activity:\nQ1\nQ2\nQ3\nQ4\nNo operation, No operation = No operation (Read TABLAT). No operation, No operation = No operation. No operation, No operation = No operation (Write to Holding Register )",
    "Example1:\nTBLWT  *+;",
    "Example 2:\nBefore Instruction\nTABLAT TBLPTR HOLDING REGISTER (0x00A356)\n=\n0x55\n=\n0x00A356\n=\n0xFF\nAfter Instructions (table write completion)\nTABLAT\n=\n0x55\nTBLPTR\n= 0x00A357\nHOLDING REGISTER\n(0x00A356)\n=\n0x55\nTBLWT  +*;\nBefore Instruction\nTABLAT\n=\n0x34\nTBLPTR\n= 0x01389A\nHOLDING REGISTER\n(0x01389A)\n=\n0xFF\nHOLDING REGISTER\n(0x01389B)\n= 0xFF\nAfter Instruction (table write completion)\nTABLAT\n=\n0x34\nTBLPTR\n= 0x01389B\nHOLDING REGISTER\n(0x01389A)\n=\n0xFF\nHOLDING REGISTER\n(0x01389B)\n=\n0x34",
    "PIC18F2220/2320/4220/4320\nTSTFSZ",
    "Test f, Skip if 0\nSyntax:\n[ label ] TSTFSZ  f [,a]\nOperands:\n0 \u2264 f \u2264 255\na \u2208 [0,1]\nOperation:\nskip if f = 0\nStatus Affected:\nNone\nEncoding:\n0110\n011a\nffff\nffff\nDescription:\nIf GLYPH<145>fGLYPH<146> = 0 , the next instruction, fetched during the current instruc- tion execution is discarded and a NOP is executed, making this a two-cycle instruction. If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146> ,  the Access Bank will be selected, over- riding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the BSR value (default).\nWords:\n1\nCycles:\n1(2)\nNote:\n3 cycles if skip and followed by a 2-word instruction.",
    "Q Cycle Activity:\nQ1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = Q4. Decode, 1 = Read register GLYPH<145>f GLYPH<146>. Decode, 2 = Process Data. Decode, 3 = No operation",
    "If skip:\nQ1, 1 = Q2. Q1, 2 = Q3. Q1, 3 = Q4. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nIf skip and followed by 2-word instruction:\nQ1\nQ2\nQ3\nNo operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation. No operation, 1 = No operation. No operation, 2 = No operation. No operation, 3 = No operation\nExample:\nHERE    TSTFSZ  CNT\nNZERO    :\nZERO   :\nBefore Instruction\nPC = Address (HERE)\nAfter Instruction\nIf CNT\n= 0x00,\nPC\n=\nAddress\n(ZERO)\nIf CNT\n\u2260\n0x00,\nPC\n=\nAddress\n(NZERO)\nQ4",
    "If skip:\nSyntax:, Exclusive OR Literal with W = [ label ] XORLW. Syntax:, Exclusive OR Literal with W = [ label ] XORLW. Syntax:, Exclusive OR Literal with W = k. Syntax:, Exclusive OR Literal with W = . Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Exclusive OR Literal with W = 0 \u2264 k \u2264 255. Operands:, Exclusive OR Literal with W = . Operands:, Exclusive OR Literal with W = . Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Operation:, Exclusive OR Literal with W = (W) .XOR. k \u2192 W. Operation:, Exclusive OR Literal with W = . Operation:, Exclusive OR Literal with W = . Status Affected:, Exclusive OR Literal with W = N, Z. Status Affected:, Exclusive OR Literal with W = . Status Affected:, Exclusive OR Literal with W = . Status Affected:, Exclusive OR Literal with W = . Encoding:, Exclusive OR Literal with W = 0000. Encoding:, Exclusive OR Literal with W = 1010. Encoding:, Exclusive OR Literal with W = kkkk.",
    "If skip:\nEncoding:, Exclusive OR Literal with W = kkkk. Description:, Exclusive OR Literal with W = The contents of Ware XORGLYPH<146>ed with the 8-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORGLYPH<146>ed with the 8-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORGLYPH<146>ed with the 8-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.. Description:, Exclusive OR Literal with W = The contents of Ware XORGLYPH<146>ed with the 8-bit literal GLYPH<145>kGLYPH<146>. The result is placed in W.. Words:, Exclusive OR Literal with W = 1. Words:, Exclusive OR Literal with W = . Words:, Exclusive OR Literal with W = . Words:, Exclusive OR Literal with W = . Cycles:, Exclusive OR Literal with",
    "If skip:\nW = 1. Cycles:, Exclusive OR Literal with W = . Cycles:, Exclusive OR Literal with W = . Cycles:, Exclusive OR Literal with W = . Q Cycle Activity: Q1, Exclusive OR Literal with W = Q2. Q Cycle Activity: Q1, Exclusive OR Literal with W = Q3. Q Cycle Activity: Q1, Exclusive OR Literal with W = . Q Cycle Activity: Q1, Exclusive OR Literal with W = Q4. Decode, Exclusive OR Literal with W = Read literal GLYPH<145>kGLYPH<146>. Decode, Exclusive OR Literal with W = Process Data. Decode, Exclusive OR Literal with W = . Decode, Exclusive OR Literal with W = Write to W",
    "Example:\nXORLW\n0xAF\nBefore Instruction\nW\n=\n0xB5\nAfter Instruction\nW\n=\n0x1A",
    "PIC18F2220/2320/4220/4320\nSyntax:, Exclusive OR Wwith f = [ label ] XORWF. Syntax:, Exclusive OR Wwith f = [ label ] XORWF. Syntax:, Exclusive OR Wwith f = f [,d [,a]]. Syntax:, Exclusive OR Wwith f = f [,d [,a]]. Operands:, Exclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Exclusive OR Wwith f = 0 \u2264 f \u2264 255 d \u2208 [0,1] a \u2208 [0,1]. Operands:, Exclusive OR Wwith f = . Operands:, Exclusive OR Wwith f = . Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \u2192 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \u2192 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f) \u2192 dest. Operation:, Exclusive OR Wwith f = (W) .XOR. (f)",
    "PIC18F2220/2320/4220/4320\n\u2192 dest. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Status Affected:, Exclusive OR Wwith f = N, Z. Encoding:, Exclusive OR Wwith f = 0001. Encoding:, Exclusive OR Wwith f = 10da. Encoding:, Exclusive OR Wwith f = ffff. Encoding:, Exclusive OR Wwith f = ffff. Description:, Exclusive OR Wwith f = Exclusive OR the contents of W with register GLYPH<145> fGLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in the register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is",
    "PIC18F2220/2320/4220/4320\nGLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the. Description:, Exclusive OR Wwith f = Exclusive OR the contents of W with register GLYPH<145> fGLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in the register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is",
    "PIC18F2220/2320/4220/4320\nGLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the. Description:, Exclusive OR Wwith f = Exclusive OR the contents of W with register GLYPH<145> fGLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in the register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the. Description:, Exclusive OR Wwith f = Exclusive OR the contents of W with register",
    "PIC18F2220/2320/4220/4320\nGLYPH<145> fGLYPH<146>. If GLYPH<145> dGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the result is stored in W. If GLYPH<145> dGLYPH<146> is GLYPH<145> 1 GLYPH<146>, the result is stored back in the register GLYPH<145>f GLYPH<146> (default). If GLYPH<145>aGLYPH<146> is GLYPH<145> 0 GLYPH<146>, the Access Bank will be selected, overriding the BSR value. If GLYPH<145>aGLYPH<146> is GLYPH<145> 1 GLYPH<146> , then the bank will be selected as per the. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Words:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR",
    "PIC18F2220/2320/4220/4320\nWwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Cycles:, Exclusive OR Wwith f = 1. Q Cycle Activity: Q1, Exclusive OR Wwith f = . Q Cycle Activity: Q1, Exclusive OR Wwith f = . Q Cycle Activity: Q1, Exclusive OR Wwith f = . Q Cycle Activity: Q1, Exclusive OR Wwith f = . , Exclusive OR Wwith f = Q2. , Exclusive OR Wwith f = Q3. , Exclusive OR Wwith f = . , Exclusive OR Wwith f = Q4. Decode, Exclusive OR Wwith f = . Decode, Exclusive OR Wwith f = Read register GLYPH<145>f GLYPH<146>. Decode, Exclusive OR Wwith f = Process Data. Decode, Exclusive OR Wwith f = Write to destination. Example:, Exclusive OR Wwith f = XORWF. Example:, Exclusive OR Wwith f = REG. Example:, Exclusive OR Wwith f = . Example:, Exclusive OR Wwith f = . Before Instruction, Exclusive OR Wwith f = Before Instruction. Before Instruction,",
    "PIC18F2220/2320/4220/4320\nExclusive OR Wwith f = Before Instruction. Before Instruction, Exclusive OR Wwith f = Before Instruction. Before Instruction, Exclusive OR Wwith f = Before Instruction. REG, Exclusive OR Wwith f = =. REG, Exclusive OR Wwith f = 0xAF. REG, Exclusive OR Wwith f = . REG, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = =. W, Exclusive OR Wwith f = 0xB5. W, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = . After Instruction, Exclusive OR Wwith f = After Instruction. After Instruction, Exclusive OR Wwith f = After Instruction. After Instruction, Exclusive OR Wwith f = After Instruction. After Instruction, Exclusive OR Wwith f = After Instruction. REG, Exclusive OR Wwith f = =. REG, Exclusive OR Wwith f = 0x1A. REG, Exclusive OR Wwith f = . REG, Exclusive OR Wwith f = . W, Exclusive OR Wwith f = =. W, Exclusive OR Wwith f = 0xB5. W, Exclusive OR Wwith f = . W, Exclusive OR Wwith f",
    "PIC18F2220/2320/4220/4320\n= \nNOTES:",
    "25.0 DEVELOPMENT SUPPORT\nThe  PIC fi microcontrollers  are  supported  with  a  full range of hardware and software development tools:",
    "25.1 MPLAB Integrated Development Environment Software\nGLYPH<149> Integrated Development Environment\n-MPLAB fi  IDE Software\nGLYPH<149> Assemblers/Compilers/Linkers\n-MPASM TM  Assembler\n-MPLAB C18 and MPLAB C30 C Compilers\n-MPLINK TM  Object Linker/ MPLIB TM  Object Librarian\n-MPLAB ASM30 Assembler/Linker/Library\nGLYPH<149> Simulators\n-MPLAB SIM Software Simulator\nGLYPH<149> Emulators\n-MPLAB ICE 2000 In-Circuit Emulator\n-MPLAB REAL ICEGLYPH<153> In-Circuit Emulator\nGLYPH<149> In-Circuit Debugger\n-MPLAB ICD 2\nGLYPH<149> Device Programmers\n-PICSTART fi  Plus Development Programmer\n-MPLAB PM3 Device Programmer\n-PICkitGLYPH<153> 2 Development Programmer\nGLYPH<149> Low-Cost Demonstration and Development Boards and Evaluation Kits\nThe MPLAB IDE software brings an ease of software development previously unseen in the 8/16-bit microcontroller  market.  The  MPLAB  IDE  is  a  Windows fi operating system-based application that contains:",
    "25.1 MPLAB Integrated Development Environment Software\nGLYPH<149> A single graphical interface to all debugging tools\n-Simulator\n-Programmer (sold separately)\n-Emulator (sold separately)\n-In-Circuit Debugger (sold separately)\nGLYPH<149> A full-featured editor with color-coded context\nGLYPH<149> A multiple project manager\nGLYPH<149> Customizable data windows with direct edit of contents\nGLYPH<149> High-level source code debugging\nGLYPH<149> Visual device initializer for easy register initialization\nGLYPH<149> Mouse over variable inspection\nGLYPH<149> Drag and drop variables from source to watch windows\nGLYPH<149> Extensive on-line help\nGLYPH<149> Integration of select third party tools, such as HI-TECH Software C Compilers and IAR C Compilers\nThe MPLAB IDE allows you to:",
    "25.1 MPLAB Integrated Development Environment Software\nGLYPH<149> Edit your source files (either assembly or C)\nGLYPH<149> One touch assemble (or compile) and download to PIC MCU emulator and simulator tools (automatically updates all project information)\nGLYPH<149> Debug using:\n-Source files (assembly or C)\n-Mixed assembly and C\n-Machine code\nMPLAB  IDE  supports  multiple  debugging  tools  in  a single development paradigm, from the cost-effective simulators,  through  low-cost  in-circuit  debuggers,  to full-featured  emulators.  This  eliminates  the  learning curve when upgrading to tools with increased flexibility and power.",
    "25.2 MPASM Assembler\nThe  MPASM  Assembler  is  a  full-featured,  universal macro assembler for all PIC MCUs.",
    "25.5 MPLAB ASM30 Assembler, Linker and Librarian\nThe MPASM Assembler generates relocatable object files for the MPLINK Object Linker, Intel fi standard HEX files,  MAP  files  to  detail  memory  usage  and  symbol reference, absolute LST files that contain source lines and  generated  machine  code  and  COFF  files  for debugging.\nThe MPASM Assembler features include:\nGLYPH<149> Integration into MPLAB IDE projects\nGLYPH<149> User-defined macros to streamline assembly code\nGLYPH<149> Conditional assembly for multi-purpose source files\nGLYPH<149> Directives that allow complete control over the assembly process",
    "25.3 MPLAB C18 and MPLAB C30 C Compilers\nThe MPLAB C18 and MPLAB C30 Code Development Systems are complete ANSI C compilers for MicrochipGLYPH<146>s PIC18 and PIC24 families of microcontrollers and the dsPIC30 and dsPIC33 family of digital signal controllers. These  compilers  provide powerful integration capabilities, superior code optimization and ease of use not found with other compilers.\nFor easy source level debugging, the compilers provide symbol information that is optimized to the MPLAB IDE debugger.",
    "25.4 MPLINK Object Linker/ MPLIB Object Librarian\nThe  MPLINK  Object  Linker  combines relocatable objects  created  by  the  MPASM  Assembler  and  the MPLAB C18 C Compiler. It can link relocatable objects from  precompiled  libraries,  using  directives  from  a linker script.\nThe MPLIB Object Librarian manages the creation and modification of library files of precompiled code. When a routine from a library is called from a source file, only the modules that contain that routine will be linked in with  the  application.  This  allows  large  libraries  to  be used efficiently in many different applications.\nThe object linker/library features include:\nGLYPH<149> Efficient linking of single libraries instead of many smaller files\nGLYPH<149> Enhanced code maintainability by grouping related modules together\nGLYPH<149> Flexible creation of libraries with easy module listing, replacement, deletion and extraction",
    "25.4 MPLINK Object Linker/ MPLIB Object Librarian\nMPLAB ASM30 Assembler produces relocatable machine  code  from  symbolic  assembly  language  for dsPIC30F devices. MPLAB C30 C Compiler uses the assembler  to  produce  its  object  file.  The  assembler generates  relocatable  object  files  that  can  then  be archived or linked with other relocatable object files and archives to create an executable file. Notable features of the assembler include:\nGLYPH<149> Support for the entire dsPIC30F instruction set\nGLYPH<149> Support for fixed-point and floating-point data\nGLYPH<149> Command line interface\nGLYPH<149> Rich directive set\nGLYPH<149> Flexible macro language\nGLYPH<149> MPLAB IDE compatibility",
    "25.6 MPLAB SIM Software Simulator\nThe  MPLAB  SIM  Software  Simulator  allows  code development in a PC-hosted environment by simulating the PIC MCUs and dsPIC fi  DSCs on an instruction level. On any given instruction, the data areas can be examined or modified and stimuli can be applied from a comprehensive stimulus controller. Registers can be logged to files for further run-time analysis. The trace buffer and logic analyzer display extend the power of the simulator to record and track program execution, actions on I/O, most peripherals and internal registers.\nThe  MPLAB  SIM  Software  Simulator  fully  supports symbolic debugging using the MPLAB  C18  and MPLAB  C30  C Compilers,  and  the MPASM  and MPLAB ASM30 Assemblers.  The software  simulator offers the flexibility to develop and debug code outside of the hardware laboratory environment, making it an excellent, economical software development tool.",
    "25.7 MPLAB ICE 2000 High-Performance In-Circuit Emulator\nThe MPLAB ICE 2000 In-Circuit Emulator is intended to  provide  the  product  development  engineer  with  a complete microcontroller design tool set for PIC microcontrollers. Software control of the MPLAB ICE 2000 In-Circuit Emulator is advanced by the MPLAB Integrated  Development  Environment,  which  allows editing,  building,  downloading and  source  debugging from a single environment.\nThe  MPLAB  ICE  2000  is  a  full-featured  emulator system with enhanced trace, trigger and data monitoring features. Interchangeable processor modules allow the system to be easily reconfigured for emulation of different  processors.  The  architecture  of  the  MPLAB ICE  2000  In-Circuit  Emulator  allows  expansion  to support new PIC microcontrollers.\nThe MPLAB ICE 2000 In-Circuit Emulator system has been designed as a real-time emulation system with advanced  features  that  are  typically  found  on  more expensive  development  tools.  The  PC  platform  and Microsoft fi Windows fi   32-bit  operating  system  were chosen  to  best  make  these  features  available  in  a simple, unified application.",
    "25.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB  REAL  ICE  In-Circuit Emulator System  is MicrochipGLYPH<146>s next  generation  high-speed  emulator  for Microchip Flash DSC and MCU devices. It debugs and programs PIC fi  Flash MCUs and dsPIC fi  Flash DSCs with the easy-to-use, powerful graphical user interface of the MPLAB Integrated Development Environment (IDE), included with each kit.\nThe MPLAB REAL ICE probe is connected to the design engineerGLYPH<146>s PC using a high-speed USB 2.0 interface and is connected  to  the  target  with  either  a  connector compatible  with  the  popular  MPLAB  ICD  2  system (RJ11) or with the new high-speed, noise tolerant, LowVoltage Differential Signal (LVDS) interconnection (CAT5).",
    "25.8 MPLAB REAL ICE In-Circuit Emulator System\nMPLAB REAL ICE is field upgradeable through future firmware downloads  in MPLAB  IDE.  In  upcoming releases of MPLAB IDE, new devices will be supported, and new features will be added, such as software breakpoints  and  assembly  code  trace.  MPLAB  REAL  ICE offers significant advantages over competitive emulators including low-cost, full-speed emulation, real-time variable watches, trace analysis, complex breakpoints, a ruggedized probe interface and long (up to three meters) interconnection cables.",
    "25.9 MPLAB ICD 2 In-Circuit Debugger\nMicrochipGLYPH<146>s  In-Circuit  Debugger,  MPLAB  ICD  2,  is  a powerful, low-cost, run-time development tool, connecting to the host PC via an RS-232 or high-speed USB  interface.  This  tool  is  based  on  the  Flash  PIC MCUs and can be used to develop for these and other PIC MCUs and dsPIC DSCs. The MPLAB ICD 2 utilizes the  in-circuit  debugging  capability  built  into  the Flash devices. This feature, along with MicrochipGLYPH<146>s In-Circuit Serial  Programming TM   (ICSP TM )  protocol,  offers  costeffective, in-circuit Flash debugging from the graphical user interface of the MPLAB Integrated Development Environment. This enables a designer to develop and debug source code by setting breakpoints, single stepping  and  watching  variables,  and  CPU  status  and peripheral  registers.  Running  at  full  speed  enables testing hardware and applications in real time. MPLAB ICD 2 also serves as a development programmer for selected PIC devices.",
    "25.10 MPLAB PM3 Device Programmer\nThe MPLAB PM3 Device Programmer is a universal, CE compliant device programmer with programmable voltage verification at VDDMIN and VDDMAX for maximum  reliability.  It  features  a  large  LCD  display (128 x 64) for menus and error messages and a modular,  detachable  socket  assembly  to  support  various package types. The ICSPGLYPH<153> cable assembly is included as a standard item. In Stand-Alone mode, the MPLAB PM3 Device Programmer can read, verify and program PIC devices without a PC connection. It can also set code  protection in this mode.  The  MPLAB  PM3 connects to the host PC via an RS-232 or USB cable. The MPLAB PM3 has high-speed communications and optimized  algorithms  for  quick  programming  of  large memory devices and incorporates an SD/MMC card for file storage and secure data applications.",
    "25.13 Demonstration, Development and Evaluation Boards\nThe PICSTART Plus Development Programmer is an easy-to-use, low-cost, prototype programmer. It connects to the PC via a COM (RS-232) port. MPLAB Integrated Development Environment software makes using the programmer simple and efficient. The PICSTART  Plus  Development  Programmer  supports most  PIC  devices  in  DIP  packages  up  to  40  pins. Larger pin count devices, such as the PIC16C92X and PIC17C76X, may be supported with an adapter socket. The PICSTART Plus Development Programmer is CE compliant.",
    "25.12 PICkit 2 Development Programmer\nThe PICkitGLYPH<153> 2 Development Programmer is a low-cost programmer and selected Flash device debugger with an  easy-to-use  interface  for  programming  many  of MicrochipGLYPH<146>s baseline, mid-range and PIC18F families of Flash memory microcontrollers. The PICkit 2 Starter Kit includes  a  prototyping  development  board,  twelve sequential  lessons,  software  and  HI-TECHGLYPH<146>s  PICCGLYPH<153> Lite C compiler, and is designed to help get up to speed quickly using PIC fi microcontrollers.  The  kit  provides everything needed to program, evaluate and develop applications using  MicrochipGLYPH<146>s powerful,  mid-range Flash memory family of microcontrollers.\nA  wide  variety  of demonstration,  development  and evaluation  boards  for  various  PIC  MCUs  and  dsPIC DSCs allows quick application development on fully functional systems. Most boards include prototyping areas for adding custom circuitry and provide application firmware and source code for examination and modification.",
    "25.12 PICkit 2 Development Programmer\nThe boards support a variety of features, including LEDs, temperature sensors, switches, speakers, RS-232 interfaces, LCD displays, potentiometers and additional EEPROM memory.\nThe  demonstration  and  development  boards  can  be used in teaching environments, for prototyping custom circuits and for learning about various microcontroller applications.\nIn addition to the PICDEMGLYPH<153> and dsPICDEMGLYPH<153> demonstration/development board series of circuits, Microchip has a line of evaluation kits and demonstration software for  analog  filter  design,  KEELOQ fi security  ICs,  CAN, IrDA fi , PowerSmart  battery  management,  SEEVAL fi evaluation system, Sigma-Delta ADC, flow rate sensing, plus many more.\nCheck the Microchip web page (www.microchip.com) for  the  complete  list  of  demonstration,  development and evaluation kits.",
    "Absolute Maximum Ratings  (GLYPH<134>)\nAmbient temperature under bias.............................................................................................................-55GLYPH<176>C to +125GLYPH<176>C",
    "Absolute Maximum Ratings  (GLYPH<134>)\nStorage temperature .............................................................................................................................. -65GLYPH<176>C to +150GLYPH<176>C\nVoltage on any pin with respect to VSS (except VDD, MCLR and RA4) .......................................... -0.3V to (VDD + 0.3V)",
    "Absolute Maximum Ratings  (GLYPH<134>)\nVoltage on VDD with respect to VSS  .........................................................................................................  -0.3V to +7.5V\nVoltage on MCLR with respect to VSS (Note 2)\n......................................................................................... 0V to +13.25V",
    "Absolute Maximum Ratings  (GLYPH<134>)\nVoltage on RA4 with respect to VSS............................................................................................................... 0V to +8.5V\nTotal power dissipation (Note 1)",
    "Absolute Maximum Ratings  (GLYPH<134>)\n...............................................................................................................................1.0W",
    "Absolute Maximum Ratings  (GLYPH<134>)\nMaximum current out of VSS pin ...........................................................................................................................300 mA",
    "Absolute Maximum Ratings  (GLYPH<134>)\nMaximum current into VDD pin ..............................................................................................................................250 mA\nInput clamp current, IIK (VI < 0 or VI > VDD)",
    "Absolute Maximum Ratings  (GLYPH<134>)\n...................................................................................................................... \u00b1\n20 mA\nOutput clamp current, IOK (VO < 0 or VO > VDD)",
    "Absolute Maximum Ratings  (GLYPH<134>)\n.............................................................................................................. \u00b1\n20 mA\nMaximum output current sunk by any I/O pin..........................................................................................................25 mA",
    "Absolute Maximum Ratings  (GLYPH<134>)\nMaximum output current sourced by any I/O pin ....................................................................................................25 mA\nMaximum current sunk by all ports .......................................................................................................................200 mA",
    "Absolute Maximum Ratings  (GLYPH<134>)\nMaximum current sourced by all ports ..................................................................................................................200 mA\nNote 1: Power dissipation is calculated as follows:\nPdis = VDD x {IDD -\u2211 IOH} + \u2211 {(VDD-VOH) x IOH} + \u2211 (VOl x IOL)",
    "Absolute Maximum Ratings  (GLYPH<134>)\n- 2: Voltage spikes below VSS at the MCLR/VPP pin, inducing currents greater than 80 mA, may cause latch-up. Thus, a series resistor of 50-100 \u03a9 should be used when applying a GLYPH<147>lowGLYPH<148> level to the MCLR/VPP pin, rather than pulling this pin directly to VSS.\nGLYPH<134> NOTICE: Stresses above those listed under GLYPH<147>Absolute Maximum RatingsGLYPH<148> may cause permanent damage to the device. This is a stress rating only and functional operation of the device at those or any other conditions above those indicated in the operation listings of this specification is not implied. Exposure to maximum rating conditions for extended periods may affect device reliability.",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nD001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VDD. D001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = Supply Voltage. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = Supply Voltage. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = Supply Voltage. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = Supply Voltage. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = Supply Voltage. D001, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated)",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = Supply Voltage. D001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VDD. D001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = PIC18LF2X20/4X20. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 2.0. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = GLYPH<151>. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 5.5.",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nD001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D001, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = HS, XT, RC and LP Osc mode. D001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VDD. D001, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = PIC18F2X20/4X20. D001, Standard",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nOperating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 4.2. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = GLYPH<151>. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 5.5. D001, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D001, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = . D002, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VDR. D002,",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nPIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = RAM Data Retention Voltage (1). D002, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 1.5. D002, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = GLYPH<151>. D002, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = GLYPH<151>. D002, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D002, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nextended.Conditions = . D003, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VPOR. D003, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = VDD Start Voltage to ensure internal Power-on Reset signal. D003, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = GLYPH<151>. D003, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = GLYPH<151>. D003, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 0.7. D003, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D003, (unless otherwise stated) -40GLYPH<176>C \u2264",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nTA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = See section on Power-on Reset for details. D004, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = SVDD. D004, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = VDD Rise Rate to ensure internal Power-on Reset signal. D004, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 0.05. D004, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ =",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nGLYPH<151>. D004, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = GLYPH<151>. D004, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V/ms. D004, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = See section on Power-on Reset for details. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n(Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\ntemperature.Units = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = Brown-out Reset Voltage GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n(Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to +125GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to +125GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to +125GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n+125GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to +125GLYPH<176>C). D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to +125GLYPH<176>C). D005A D005B, PIC18LF2220/2320/4220/4320",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n(Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 11. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = N/A. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = N/A. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = N/A. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nTA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = Reserved. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 10. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 2.45. D005A D005B, Standard Operating Conditions Operating",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\ntemperature.Standard Operating Conditions Operating temperature.Typ = 2.72. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 2.99. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = . D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B,",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nPIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 01. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 3.80. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.22. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 4.64. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nindustrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = . D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 00. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 4.09. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.54. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max =",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n4.99. D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = . D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = VBOR. D005A D005B, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic =",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nPIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D005A D005B, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units =",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nPIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D005A D005B, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to +85GLYPH<176>C). , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n(Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 1x. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = Reserved. , PIC18LF2220/2320/4220/4320",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n(Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 01. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 3.80. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.22. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 4.64. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n+125GLYPH<176>C for extended.Conditions = (Note 2). , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 00. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 4.09. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.54. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 4.99. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nstated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = (Note 2). D005C, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . D005C, PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to +125GLYPH<176>C). D005C, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n+125GLYPH<176>C). D005C, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to +125GLYPH<176>C). D005C, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to +125GLYPH<176>C). D005C, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to +125GLYPH<176>C). D005C, (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to +125GLYPH<176>C). , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 1x. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = N/A. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\ntemperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = Reserved. , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 01. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Min = 3.80. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.22.",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n, Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 4.64. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = (Note 2). , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Symbol = . , PIC18LF2220/2320/4220/4320 (Industrial).PIC18F2220/2320/4220/4320 (Industrial, Extended).Characteristic = BORV1:BORV0 = 00. , Standard Operating Conditions Operating",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\ntemperature.Standard Operating Conditions Operating temperature.Min = 4.09. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Typ = 4.54. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Max = 4.99. , Standard Operating Conditions Operating temperature.Standard Operating Conditions Operating temperature.Units = V. , (unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions = (Note 2)\nLegend:",
    "Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nShading of rows is to assist in readability of the table.\nNote 1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n2: When BOR is on and BORV<1:0> = 0x , the device will operate correctly at 40 MHz for any VDD at which the BOR allows execution.",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2220/2320/4220/4320\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD005D, Symbol = VBOR. D005D, Characteristic = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Min = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Typ = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Max = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Units = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Conditions = Brown-out Reset Voltage GLYPH<151> Date codes above 0417xxx. D005D, Symbol = . D005D, Characteristic = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n+85GLYPH<176>C). D005D, Min = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D005D, Typ = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D005D, Max = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D005D, Units = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D005D, Conditions = PIC18LF2X20/4X20 Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C).",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD005D, Symbol = . D005D, Characteristic = BORV1:BORV0 = 11. D005D, Min = N/A. D005D, Typ = N/A. D005D, Max = N/A. D005D, Units = V. D005D, Conditions = Reserved. D005D, Symbol = . D005D, Characteristic = BORV1:BORV0 = 10. D005D, Min = 2.50. D005D, Typ = 2.72. D005D, Max = 2.94. D005D, Units = V. D005D, Conditions = . D005D, Symbol = . D005D, Characteristic = BORV1:BORV0 = 01. D005D, Min = 3.88. D005D, Typ = 4.22.",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD005D, Max = 4.56. D005D, Units = V. D005D, Conditions = . D005D, Symbol = . D005D, Characteristic = BORV1:BORV0 = 00. D005D, Min = 4.18. D005D, Typ = 4.54. D005D, Max = 4.90. D005D, Units = V. D005D, Conditions = . D005F, Symbol = . D005F, Characteristic = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Min = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Typ =",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Max = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Units = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Conditions = PIC18LF2X20/4X20 Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D005F, Symbol = . D005F, Characteristic = BORV1:BORV0 = 11. D005F, Min = N/A. D005F, Typ = N/A. D005F, Max =",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nN/A. D005F, Units = V. D005F, Conditions = Reserved. D005F, Symbol = . D005F, Characteristic = BORV1:BORV0 = 10. D005F, Min = 2.34. D005F, Typ = 2.72. D005F, Max = 3.10. D005F, Units = V. D005F, Conditions = . D005F, Symbol = . D005F, Characteristic = BORV1:BORV0 = 01. D005F, Min = 3.63. D005F, Typ = 4.22. D005F, Max = 4.81. D005F, Units = V. D005F, Conditions = . D005F, Symbol = . D005F, Characteristic = BORV1:BORV0 = 00. D005F, Min",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= 3.90. D005F, Typ = 4.54. D005F, Max = 5.18. D005F, Units = V. D005F, Conditions = . D005G, Symbol = . D005G, Characteristic = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D005G, Min = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D005G, Typ = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D005G, Max = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D005G,",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nUnits = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D005G, Conditions = PIC18F2X20/4X20 Industrial (-10GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = BORV1:BORV0 = 1x. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. , Conditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 01. , Min = 3.88. , Typ = 4.22. , Max = 4.56. , Units = V. , Conditions = (Note 2). , Symbol = . , Characteristic = BORV1:BORV0 = 00. , Min = 4.18. , Typ = 4.54.",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Max = 4.90. , Units = V. , Conditions = (Note 2). D005H, Symbol = . D005H, Characteristic = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D005H, Min = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D005H, Typ = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D005H, Max = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D005H, Units = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n-10GLYPH<176>C). D005H, Conditions = PIC18F2X20/4X20 Industrial (-40GLYPH<176>C to -10GLYPH<176>C). , Symbol = . , Characteristic = BORV1:BORV0 = 1x. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. , Conditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 01. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. , Conditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 00. , Min = 3.90. , Typ = 4.54. , Max = 5.18. , Units = V. , Conditions = (Note 2). D005J, Symbol",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= . D005J, Characteristic = PIC18F2X20/4X20 Extended (-10GLYPH<176>C to +85GLYPH<176>C). D005J, Min = PIC18F2X20/4X20 Extended (-10GLYPH<176>C to +85GLYPH<176>C). D005J, Typ = PIC18F2X20/4X20 Extended (-10GLYPH<176>C to +85GLYPH<176>C). D005J, Max = PIC18F2X20/4X20 Extended (-10GLYPH<176>C to +85GLYPH<176>C). D005J, Units = PIC18F2X20/4X20 Extended (-10GLYPH<176>C to +85GLYPH<176>C). D005J, Conditions = PIC18F2X20/4X20 Extended",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n(-10GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = BORV1:BORV0 = 1x. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. , Conditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 01. , Min = 3.88. , Typ = 4.22. , Max = 4.56. , Units = V. , Conditions = (Note 2). , Symbol = . , Characteristic = BORV1:BORV0 = 00. , Min = 4.18. , Typ = 4.54. , Max = 4.90. , Units = V. , Conditions = (Note 2). D005K, Symbol = . D005K, Characteristic = PIC18F2X20/4X20 Extended",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n(-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D005K, Min = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D005K, Typ = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D005K, Max = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C).",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD005K, Units = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D005K, Conditions = PIC18F2X20/4X20 Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). , Symbol = . , Characteristic = BORV1:BORV0 = 1x. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. , Conditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 01. , Min = N/A. , Typ = N/A. , Max = N/A. , Units = V. ,",
    "26.1 DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nConditions = Reserved. , Symbol = . , Characteristic = BORV1:BORV0 = 00. , Min = 3.90. , Typ = 4.54. , Max = 5.18. , Units = V. , Conditions = (Note 2)\nLegend:\nShading of rows is to assist in readability of the table.\nNote\n1: This is the limit to which VDD can be lowered in Sleep mode, or during a device Reset, without losing RAM data.\n2: When BOR is on and BORV<1:0> = 0x , the device will operate correctly at 40 MHz for any VDD at which the BOR allows execution.",
    "26.2\nDC Characteristics: Power-Down and Supply Current\nPIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nPIC18LF2220/2320/4220/4320\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2220/2320/4220/4320\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.2\nPower-down Current (I PD) (1), Typ = . Power-down Current (I PD) (1), Max = . Power-down Current (I PD) (1), Units = . Power-down Current (I PD) (1), Conditions = . Power-down Current (I PD) (1), Conditions = . Power-down Current (I PD) (1), Conditions = . PIC18LF2X20/4X20, Typ = 0.1. PIC18LF2X20/4X20, Max = 0.5. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 2.0V ( Sleep mode). PIC18LF2X20/4X20, Typ = 0.1. PIC18LF2X20/4X20, Max = 0.5.",
    "26.2\nPIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = +25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = +25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 2.0V ( Sleep mode). PIC18LF2X20/4X20, Typ = 0.2. PIC18LF2X20/4X20, Max = 1.7. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 2.0V ( Sleep mode). PIC18LF2X20/4X20, Typ = 0.1. PIC18LF2X20/4X20, Max = 0.5. PIC18LF2X20/4X20, Units =",
    "26.2\n\u03bc A. PIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V ( Sleep mode). PIC18LF2X20/4X20, Typ = 0.1. PIC18LF2X20/4X20, Max = 0.5. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = +25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = +25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V ( Sleep mode). PIC18LF2X20/4X20, Typ = 0.3. PIC18LF2X20/4X20, Max = 1.7. PIC18LF2X20/4X20, Units = \u03bc A.",
    "26.2\nPIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V ( Sleep mode). All devices, Typ = 0.1. All devices, Max = 2.0. All devices, Units = \u03bc A. All devices, Conditions = -40GLYPH<176>C. All devices, Conditions = -40GLYPH<176>C. All devices, Conditions = VDD = 5.0V ( Sleep mode). All devices, Typ = 0.1. All devices, Max = 2.0. All devices, Units = \u03bc A. All devices, Conditions = +25GLYPH<176>C. All devices, Conditions = +25GLYPH<176>C. All devices, Conditions = VDD = 5.0V ( Sleep mode). All devices, Typ = 0.4. All devices, Max = 6.5. All devices, Units = \u03bc A. All devices, Conditions =",
    "26.2\n+85GLYPH<176>C. All devices, Conditions = +85GLYPH<176>C. All devices, Conditions = VDD = 5.0V ( Sleep mode). Extended devices, Typ = 11.2. Extended devices, Max = 50. Extended devices, Units = \u03bc A. Extended devices, Conditions = +125GLYPH<176>C. Extended devices, Conditions = +125GLYPH<176>C. Extended devices, Conditions = VDD = 5.0V ( Sleep mode). Supply Current (I DD) (2,3), Typ = . Supply Current (I DD) (2,3), Max = . Supply Current (I DD) (2,3), Units = . Supply Current (I DD) (2,3), Conditions = . Supply Current (I DD) (2,3), Conditions = . Supply Current (I DD) (2,3), Conditions = . PIC18LF2X20/4X20, Typ = 11. PIC18LF2X20/4X20, Max = 25. PIC18LF2X20/4X20, Units = \u03bc A.",
    "26.2\nPIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V. PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). PIC18LF2X20/4X20, Typ = 13. PIC18LF2X20/4X20, Max = 25. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = +25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V. PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). PIC18LF2X20/4X20, Typ = 14. PIC18LF2X20/4X20, Max = 25. PIC18LF2X20/4X20, Units = \u03bc A.",
    "26.2\nPIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = VDD = 3.0V. PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). PIC18LF2X20/4X20, Typ = 34. PIC18LF2X20/4X20, Max = 40. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = -40GLYPH<176>C. PIC18LF2X20/4X20, Conditions = . PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). PIC18LF2X20/4X20, Typ = 28. PIC18LF2X20/4X20, Max = 40. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions =",
    "26.2\n+25GLYPH<176>C. PIC18LF2X20/4X20, Conditions = . PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). PIC18LF2X20/4X20, Typ = 25. PIC18LF2X20/4X20, Max = 40. PIC18LF2X20/4X20, Units = \u03bc A. PIC18LF2X20/4X20, Conditions = +85GLYPH<176>C. PIC18LF2X20/4X20, Conditions = . PIC18LF2X20/4X20, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). All devices, Typ = 77. All devices, Max = 80. All devices, Units = \u03bc A. All devices, Conditions = -40GLYPH<176>C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). All devices, Typ =",
    "26.2\n62. All devices, Max = 80. All devices, Units = \u03bc A. All devices, Conditions = +25GLYPH<176>C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). All devices, Typ = 53. All devices, Max = 80. All devices, Units = \u03bc A. All devices, Conditions = +85GLYPH<176>C. All devices, Conditions = VDD = 5.0V. All devices, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source). Extended devices, Typ = 50. Extended devices, Max = 80. Extended devices, Units = \u03bc A. Extended devices, Conditions = +125GLYPH<176>C. Extended devices, Conditions = VDD = 5.0V. Extended devices, Conditions = FOSC = 31 kHz ( RC_RUN mode, internal oscillator source)\nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "26.2\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "26.2\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C\n\u2264\nTA\n\u2264\n+85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 100. , Max = 220. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 110. , Max = 220. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 120. , Max = 220.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 180. , Max = 330. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 180. , Max = 330. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2X20/4X20. , Typ = 170. , Max = 330. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = All devices. , Typ = 340. , Max = 550. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = All devices. , Typ = 330. , Max = 550. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = All devices. ,",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nTyp = 310. , Max = 550. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = Extended devices. , Typ = 410. , Max = 650. , Units = \u03bc A. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 350. , Max = 600. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2X20/4X20. , Typ = 360. , Max = 600. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 370. , Max = 600. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 580. , Max = 900. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nsource). , Device = PIC18LF2X20/4X20. , Typ = 580. , Max = 900. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 560. , Max = 900. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = . , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = All devices. , Typ = 1.1. , Max = 1.8. , Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = All",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\ndevices. , Typ = 1.1. , Max = 1.8. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = All devices. , Typ = 1.0. , Max = 1.8. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source). , Device = Extended devices. , Typ = 1.2. , Max = 1.8. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 4 MHz ( RC_RUN mode, internal oscillator source)",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "26.2\nDC Characteristics: Power-Down and Supply Current\nPIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C\n\u2264\nTA\n\u2264\n+85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.2\nSupply, Device = Current (I DD) (2,3). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . Supply, Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 4.7. , Max = 8. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 4.6. , Max = 8. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 5.1. , Max = 11. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions =",
    "26.2\nVDD = 2.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 6.9. , Max = 11. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 6.3. , Max = 11. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 6.8. , Max = 15. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 31",
    "26.2\nkHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 12. , Max = 16. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 10. , Max = 16. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 10. , Max = 22. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = Extended devices. , Typ = 25. , Max = 75. , Units = \u03bc A. , Conditions =",
    "26.2\n+125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 31 kHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 49. , Max = 150. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 52. , Max = 150. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 56. , Max = 150. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions",
    "26.2\n= FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 73. , Max = 180. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 77. , Max = 180. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = PIC18LF2X20/4X20. , Typ = 77. , Max = 180. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = . , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 130. , Max = 300. , Units = \u03bc",
    "26.2\nA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 130. , Max = 300. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = All devices. , Typ = 130. , Max = 300. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator source). , Device = Extended devices. , Typ = 350. , Max = 435. , Units = \u03bc A. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 1 MHz ( RC_IDLE mode, internal oscillator",
    "26.2\nsource)",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2220/2320/4220/4320\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 140. , Max = 275. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . , Typ = 140. , Max = 275. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . , Typ = 150. , Max = 275. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 220. , Max = 375.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 220. , Max = 375. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 210. , Max = 375. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 390. , Max = 800. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = . , Typ = 400. , Max = 800. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n5.0V. , Conditions = . , Device = . , Typ = 380. , Max = 800. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 410. , Max = 800. , Units = \u03bc A. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 150. , Max = 250. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . , Typ = 150. , Max = 250. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . ,",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nTyp = 160. , Max = 250. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 340. , Max = 350. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 300. , Max = 350. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 280. , Max = 350. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 0.72. , Max = 1.0. ,",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nUnits = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = . , Typ = 0.63. , Max = 1.0. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = . , Typ = 0.57. , Max = 1.0. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 0.53. , Max = 1.0. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = ",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nLegend: Shading of rows is to assist in readability of the table.\nNote 1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "PIC18F2220/2320/4220/4320\n26.2\nDC Characteristics: Power-Down and Supply Current PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320 (Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18F2220/2320/4220/4320\n, Device = Supply Current (I DD) (2,3). , Typ = Supply Current (I DD) (2,3). , Max = Supply Current (I DD) (2,3). , Units = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Conditions = Supply Current (I DD) (2,3). , Device = PIC18LF2X20/4X20. , Typ = 440. , Max = 600. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 450. , Max = 600. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 460.",
    "PIC18F2220/2320/4220/4320\n, Max = 600. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 0.80. , Max = 1.0. , Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 0.78. , Max = 1.0. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 0.77. , Max = 1.0. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 1.6. , Max = 2.0.",
    "PIC18F2220/2320/4220/4320\n, Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.5. , Max = 2.0. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 1.5. , Max = 2.0. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 1.5. , Max = 2.0. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 6.3. , Max = 9.0. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 4.2V. , Conditions",
    "PIC18F2220/2320/4220/4320\n= FOSC = 25 MHZ ( PRI_RUN , EC oscillator). , Device = Extended devices. , Typ = 7.9. , Max = 10.0. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 25 MHZ ( PRI_RUN , EC oscillator). , Device = All devices. , Typ = 9.5. , Max = 12. , Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 9.7. , Max = 12. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 4.2V. , Conditions = . , Device = All devices. , Typ = 9.9. , Max = 12. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 4.2V. , Conditions = .",
    "PIC18F2220/2320/4220/4320\n, Device = All devices. , Typ = 11.9. , Max = 15. , Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 12.1. , Max = 15. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 12.3. , Max = 15. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = ",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2220/2320/4220/4320\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nStandard Operating Conditions (unless otherwise stated)\n(Industrial, Extended)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Device = Supply Current (I DD) (2,3). , Typ = . , Max = . , Units = . , Conditions = . , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 37. , Max = 50. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 37. , Max = 50. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 38. , Max = 60. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2X20/4X20. , Typ = 58. , Max = 80. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 59. , Max = 80. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 60. , Max = 100. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 110. , Max = 180. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= . , Device = All devices. , Typ = 110. , Max = 180. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 110. , Max = 180. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 125. , Max = 300. , Units = \u03bc A. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 140. , Max = 180. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. ,",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nTyp = 140. , Max = 180. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 140. , Max = 180. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 220. , Max = 280. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 230. , Max = 280. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n, Typ = 230. , Max = 280. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = All devices. , Typ = 410. , Max = 525. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 420. , Max = 525. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 430. , Max = 525. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 450. , Max = 800. , Units = \u03bc A. , Conditions",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices. , Typ = 2.2. , Max = 3.0. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 4.2V. , Conditions = FOSC = 25 MHZ ( PRI_IDLE , EC oscillator). , Device = Extended devices. , Typ = 2.7. , Max = 3.5. , Units = mA. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = FOSC = 25 MHZ ( PRI_IDLE , EC oscillator)",
    "Legend:\nShading of rows is to assist in readability of the table.\nNote\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "Legend:\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "26.2 DC Characteristics: Power-Down and Supply Current\nPIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264\n+85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264\n+125GLYPH<176>C for extended",
    "26.2 DC Characteristics: Power-Down and Supply Current\nSupply, Device = Current (I DD) (2,3). Supply, Typ = . Supply, Max = . Supply, Units = . Supply, Conditions = . Supply, Conditions = . Supply, Conditions = . , Device = All devices. , Typ = 3.1. , Max = 4.1. , Units = mA. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 4.2 V. , Conditions = . , Device = All devices. , Typ = 3.2. , Max = 4.1. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 4.2 V. , Conditions = . , Device = All devices. , Typ = 3.3. , Max = 4.1. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 4.2 V. , Conditions = . , Device = All devices. , Typ = 4.4. , Max = 5.1. , Units = mA. , Conditions = -40GLYPH<176>C. ,",
    "26.2 DC Characteristics: Power-Down and Supply Current\nConditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 4.6. , Max = 5.1. , Units = mA. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 4.6. , Max = 5.1. , Units = mA. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 9. , Max = 15. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 10. , Max = 15. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device =",
    "26.2 DC Characteristics: Power-Down and Supply Current\nPIC18LF2X20/4X20. , Typ = 13. , Max = 18. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 22. , Max = 30. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 21. , Max = 30. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = . , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 20. , Max = 35. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = . , Conditions = . , Device = All devices. , Typ = 50. , Max = 80. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. ,",
    "26.2 DC Characteristics: Power-Down and Supply Current\nConditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 50. , Max = 80. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 45. , Max = 85. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 5.1. , Max = 9. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 5.8. , Max = 9. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20.",
    "26.2 DC Characteristics: Power-Down and Supply Current\n, Typ = 7.9. , Max = 11. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = = 3.0V. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 7.9. , Max = 12. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 8.9. , Max = 12. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD. , Conditions = . , Device = PIC18LF2X20/4X20. , Typ = 10.5. , Max = 14. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD. , Conditions = . , Device = All devices. , Typ = 13. , Max = 20. , Units = \u03bc A. , Conditions = -40GLYPH<176>C.",
    "26.2 DC Characteristics: Power-Down and Supply Current\n, Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 16. , Max = 20. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = All devices. , Typ = 18. , Max = 25. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "26.2 DC Characteristics: Power-Down and Supply Current\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "26.2 DC Characteristics: Power-Down and Supply Current\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C\n\u2264\nTA\n\u2264\n+85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD022 ( \u0394 I WDT), Device = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Typ = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Max = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Units = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Conditions = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Conditions = Module",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nDifferential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). D022 ( \u0394 I WDT), Conditions = Module Differential Currents ( \u0394 I WDT, \u0394 I BOR, \u0394 I LVD, \u0394 I OSCB, \u0394 I AD). , Device = Watchdog Timer. , Typ = 1.5. , Max = 3.8. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . , Typ = 2.2. , Max = 3.8. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 2.0V. , Conditions = . , Device = . , Typ = 2.7. , Max = 4.0. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n2.0V. , Conditions = . , Device = . , Typ = 2.3. , Max = 4.6. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 2.7. , Max = 4.6. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 3.1. , Max = 4.8. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 3.0V. , Conditions = . , Device = . , Typ = 3.0. , Max = 10.0. , Units = \u03bc A. , Conditions = -40GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= . , Typ = 3.3. , Max = 10.0. , Units = \u03bc A. , Conditions = +25GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = . , Typ = 3.9. , Max = 10.0. , Units = \u03bc A. , Conditions = +85GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . , Device = Extended devices only. , Typ = 4.0. , Max = 13.0. , Units = \u03bc A. , Conditions = +125GLYPH<176>C. , Conditions = VDD = 5.0V. , Conditions = . D022A ( \u0394 I BOR), Device = Brown-out Reset. D022A ( \u0394 I BOR), Typ = 35. D022A ( \u0394 I BOR), Max = 50. D022A ( \u0394 I BOR), Units =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n\u03bc A. D022A ( \u0394 I BOR), Conditions = -40GLYPH<176>C to +85GLYPH<176>C. D022A ( \u0394 I BOR), Conditions = VDD = 3.0V. D022A ( \u0394 I BOR), Conditions = . D022A ( \u0394 I BOR), Device = . D022A ( \u0394 I BOR), Typ = 42. D022A ( \u0394 I BOR), Max = 60. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40GLYPH<176>C to +85GLYPH<176>C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = . D022A ( \u0394 I BOR), Device = Extended devices only. D022A ( \u0394",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nI BOR), Typ = 46. D022A ( \u0394 I BOR), Max = 65. D022A ( \u0394 I BOR), Units = \u03bc A. D022A ( \u0394 I BOR), Conditions = -40GLYPH<176>C to +125GLYPH<176>C. D022A ( \u0394 I BOR), Conditions = VDD = 5.0V. D022A ( \u0394 I BOR), Conditions = . D022B ( \u0394 I LVD), Device = Low-Voltage Detect. D022B ( \u0394 I LVD), Typ = 31. D022B ( \u0394 I LVD), Max = 45. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40GLYPH<176>C to +85GLYPH<176>C. D022B ( \u0394 I LVD), Conditions = VDD =",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n2.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device = . D022B ( \u0394 I LVD), Typ = 33. D022B ( \u0394 I LVD), Max = 50. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40GLYPH<176>C to +85GLYPH<176>C. D022B ( \u0394 I LVD), Conditions = VDD = 3.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device = . D022B ( \u0394 I LVD), Typ = 42. D022B ( \u0394 I LVD), Max = 60. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n= . D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD), Conditions = . D022B ( \u0394 I LVD), Device = Extended devices only. D022B ( \u0394 I LVD), Typ = 46. D022B ( \u0394 I LVD), Max = 65. D022B ( \u0394 I LVD), Units = \u03bc A. D022B ( \u0394 I LVD), Conditions = -40GLYPH<176>C to +125GLYPH<176>C. D022B ( \u0394 I LVD), Conditions = VDD = 5.0V. D022B ( \u0394 I LVD), Conditions = \nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "26.2 DC Characteristics: Power-Down and Supply Current\nPIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.2 DC Characteristics: Power-Down and Supply Current\nD025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.1. D025 ( \u0394 I OSCB), Max = 2.2. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = -40 \u00b0 C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 1.8. D025 ( \u0394 I OSCB), Max = 2.2. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = +25GLYPH<176>C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB), Conditions",
    "26.2 DC Characteristics: Power-Down and Supply Current\n= 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.1. D025 ( \u0394 I OSCB), Max = 2.2. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = +85GLYPH<176>C. D025 ( \u0394 I OSCB), Conditions = VDD = 2.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.2. D025 ( \u0394 I OSCB), Max = 3.8. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = -40 \u00b0 C. D025 ( \u0394 I OSCB), Conditions = VDD = 3.0V.",
    "26.2 DC Characteristics: Power-Down and Supply Current\nD025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.6. D025 ( \u0394 I OSCB), Max = 3.8. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = +25GLYPH<176>C. D025 ( \u0394 I OSCB), Conditions = VDD = 3.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 2.9. D025 ( \u0394 I OSCB), Max = 3.8. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = +85GLYPH<176>C. D025 ( \u0394 I",
    "26.2 DC Characteristics: Power-Down and Supply Current\nOSCB), Conditions = VDD = 3.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.0. D025 ( \u0394 I OSCB), Max = 6.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = -40 \u00b0 C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.2. D025 ( \u0394 I OSCB), Max = 6.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions =",
    "26.2 DC Characteristics: Power-Down and Supply Current\n+25GLYPH<176>C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D025 ( \u0394 I OSCB), Device = Timer1 Oscillator. D025 ( \u0394 I OSCB), Typ = 3.4. D025 ( \u0394 I OSCB), Max = 7.0. D025 ( \u0394 I OSCB), Units = \u03bc A. D025 ( \u0394 I OSCB), Conditions = +85GLYPH<176>C. D025 ( \u0394 I OSCB), Conditions = VDD = 5.0V. D025 ( \u0394 I OSCB), Conditions = 32 kHz on Timer1 (4). D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026",
    "26.2 DC Characteristics: Power-Down and Supply Current\n( \u0394 I AD), Conditions = -40 \u00b0 C to +85 \u00b0 C. D026 ( \u0394 I AD), Conditions = VDD = 2.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40 \u00b0 C to +85 \u00b0 C. D026 ( \u0394 I AD), Conditions = VDD = 3.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = A/D Converter. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 2.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394",
    "26.2 DC Characteristics: Power-Down and Supply Current\nI AD), Conditions = -40 \u00b0 C to +85 \u00b0 C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting. D026 ( \u0394 I AD), Device = Extended devices only. D026 ( \u0394 I AD), Typ = 1.0. D026 ( \u0394 I AD), Max = 8.0. D026 ( \u0394 I AD), Units = \u03bc A. D026 ( \u0394 I AD), Conditions = -40 \u00b0 C to +125 \u00b0 C. D026 ( \u0394 I AD), Conditions = VDD = 5.0V. D026 ( \u0394 I AD), Conditions = A/D on, not converting\nLegend:\nShading of rows is to assist in readability of the table.\nNote",
    "26.2 DC Characteristics: Power-Down and Supply Current\n1: The power-down current in Sleep mode does not depend on the oscillator type. Power-down current is measured with the part in Sleep mode, with all I/O pins in high-impedance state and tied to VDD or VSS and all features that add delta current disabled (such as WDT, Timer1 Oscillator, BOR, etc.).\n2: The supply current is mainly a function of operating voltage, frequency and mode. Other factors, such as I/O pin loading and switching rate, oscillator type and circuit, internal code execution pattern and temperature, also have an impact on the current consumption.\nThe test conditions for all IDD measurements in active operation mode are:\nOSC1 = external square wave, from rail-to-rail; all I/O pins tri-stated, pulled to VDD;\nMCLR = VDD; WDT enabled/disabled as specified.",
    "26.2 DC Characteristics: Power-Down and Supply Current\n3: For RC oscillator configurations, current through REXT is not included. The current through the resistor can be estimated by the formula Ir = VDD/2REXT (mA) with REXT in k \u03a9 .\n4: Standard low-cost 32 kHz crystals have an operating temperature range of -10GLYPH<176>C to +70GLYPH<176>C. Extended temperature crystals are available at a much higher cost.",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nDC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nD030 D030A D031, Symbol = VIL. D030 D030A D031, Characteristic = Input Low Voltage I/O Ports: with TTL Buffer. D030 D030A D031, Min = VSS GLYPH<151> VSS VSS VSS VSS. D030 D030A D031, Max = 0.15 VDD 0.8 0.2 VDD 0.3 VDD 0.2 VDD 0.2 VDD. D030 D030A D031, Units = V V V V V V. D030 D030A D031, Conditions = VDD < 4.5V 4.5V \u2264 VDD \u2264 5.5V. D032 D032A D033, Symbol = VIH. D032 D032A D033, Characteristic = MCLR OSC1 and T1OSI OSC1 Input High Voltage I/O Ports:",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\nwith TTL Buffer. D032 D032A D033, Min = VSS. D032 D032A D033, Max = 0.2 VDD. D032 D032A D033, Units = V. D032 D032A D033, Conditions = LP, XT, HS, HSPLL modes (1) EC mode (1). D040 D040A D041, Symbol = . D040 D040A D041, Characteristic = with Schmitt Trigger Buffer RC3 and RC4. D040 D040A D041, Min = 0.25 VDD + 0.8V 2.0 0.8 VDD 0.7 VDD. D040 D040A D041, Max = VDD VDD VDD VDD. D040 D040A D041, Units = V V V V. D040 D040A D041, Conditions",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n= VDD < 4.5V 4.5V \u2264 VDD \u2264 5.5V. D042 D042A, Symbol = . D042 D042A, Characteristic = MCLR OSC1 and T1OSI. D042 D042A, Min = 0.8 VDD 1.6. D042 D042A, Max = VDD VDD. D042 D042A, Units = V V. D042 D042A, Conditions = LP, XT, HS, HSPLL (1). D043, Symbol = I IL. D043, Characteristic = OSC1 Input Leakage Current (2,3). D043, Min = 0.8 VDD. D043, Max = VDD. D043, Units = V. D043, Conditions = modes EC mode (1). D060, Symbol = . D060, Characteristic = I/O Ports. D060, Min",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n= GLYPH<151>. D060, Max = \u00b1 0.2. D060, Units = \u03bc A. D060, Conditions = VSS \u2264 VPIN \u2264 VDD, Pin at high-impedance. D061, Symbol = . D061, Characteristic = MCLR, RA4. D061, Min = GLYPH<151>. D061, Max = \u00b1 1.0. D061, Units = \u03bc A. D061, Conditions = Vss \u2264 VPIN \u2264 VDD. D063, Symbol = . D063, Characteristic = OSC1. D063, Min = GLYPH<151>. D063, Max = \u00b1 1.0. D063, Units = \u03bc A. D063, Conditions = Vss \u2264 VPIN \u2264 VDD. , Symbol = PU. , Characteristic = Weak Pull-up Current. , Min = . , Max = .",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)\n, Units = . , Conditions = . D070, Symbol = I. D070, Characteristic = . D070, Min = 50. D070, Max = . D070, Units = \u03bc A. D070, Conditions = VDD = 5V, VPIN = VSS. , Symbol = I PURB. , Characteristic = PORTB Weak Pull-up Current. , Min = . , Max = 400. , Units = . , Conditions = \nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC fi device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.\n4: Parameter is characterized but not tested.",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nDC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nD080, Symbol = VOL. D080, Characteristic = Output Low Voltage I/O Ports. D080, Min = GLYPH<151>. D080, Max = 0.6. D080, Units = V. D080, Conditions = I OL = 8.5 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D080A, Symbol = . D080A, Characteristic = . D080A, Min = GLYPH<151>. D080A, Max = 0.6. D080A, Units = V. D080A, Conditions = I OL = 7.0 mA, VDD = 4.5V, -40 \u00b0 C to +125 \u00b0 C. D083, Symbol = . D083, Characteristic = OSC2/CLKO (RC mode). D083, Min = GLYPH<151>. D083,",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nMax = 0.6. D083, Units = V. D083, Conditions = I OL = 1.6 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D083A, Symbol = . D083A, Characteristic = . D083A, Min = GLYPH<151>. D083A, Max = 0.6. D083A, Units = V. D083A, Conditions = I OL = 1.2 mA, VDD = 4.5V, -40 \u00b0 C to +125 \u00b0 C. D090, Symbol = VOH. D090, Characteristic = Output High Voltage (3) I/O Ports. D090, Min = VDD GLYPH<150> 0.7. D090, Max = GLYPH<151>. D090, Units = V. D090, Conditions = I OH =",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n-3.0 mA, VDD = 4.5V, -40 \u00b0 C to +85 \u00b0 C. D090A, Symbol = . D090A, Characteristic = . D090A, Min = VDD GLYPH<150> 0.7. D090A, Max = GLYPH<151>. D090A, Units = V. D090A, Conditions = I OH = -2.5 mA, VDD = 4.5V, -40 \u00b0 C to +125 \u00b0 C. D092, Symbol = . D092, Characteristic = OSC2/CLKO (RC mode). D092, Min = VDD GLYPH<150> 0.7. D092, Max = GLYPH<151>. D092, Units = V. D092, Conditions = I OH = -1.3 mA, VDD = 4.5V, -40 \u00b0 C to",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n+85 \u00b0 C. D092A, Symbol = . D092A, Characteristic = . D092A, Min = VDD GLYPH<150> 0.7. D092A, Max = GLYPH<151>. D092A, Units = V. D092A, Conditions = I OH = -1.0 mA, VDD = 4.5V, -40 \u00b0 C to +125 \u00b0 C. D150, Symbol = VOD. D150, Characteristic = Open-Drain High Voltage. D150, Min = GLYPH<151>. D150, Max = 8.5. D150, Units = V. D150, Conditions = RA4 pin. D100 (4), Symbol = COSC2. D100 (4), Characteristic = on Output Pins OSC2 Pin. D100 (4), Min = GLYPH<151>. D100",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\n(4), Max = 15. D100 (4), Units = pF. D100 (4), Conditions = In XT, HS and LP modes when external clock is used to drive OSC1. D101, Symbol = CIO. D101, Characteristic = All I/O Pins and OSC2 (in RC mode). D101, Min = GLYPH<151>. D101, Max = 50. D101, Units = pF. D101, Conditions = To meet the AC Timing Specifications. D102, Symbol = CB. D102, Characteristic = SCL, SDA. D102, Min = GLYPH<151>. D102, Max = 400. D102, Units = pF. D102, Conditions = In I 2 C mode",
    "26.3 DC Characteristics: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial) (Continued)\nNote 1: In RC oscillator configuration, the OSC1/CLKI pin is a Schmitt Trigger input. It is not recommended that the PIC fi device be driven with an external clock while in RC mode.\n2: The leakage current on the MCLR pin is strongly dependent on the applied voltage level. The specified levels represent normal operating conditions. Higher leakage current may be measured at different input voltages.\n3: Negative current is defined as current sourced by the pin.\n4: Parameter is characterized but not tested.",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nDC Characteristics\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\n, Sym = . , Characteristic = Internal Program Memory Programming Specifications. , Min = . , TypGLYPH<134> = . , Max = . , Units = . , Conditions = . D110, Sym = VPP. D110, Characteristic = Voltage on MCLR/VPP pin. D110, Min = 9.00. D110, TypGLYPH<134> = GLYPH<151>. D110, Max = 13.25. D110, Units = V. D110, Conditions = (Note 2). D112, Sym = I PP. D112, Characteristic = Current into MCLR/VPP pin. D112, Min = GLYPH<151>. D112, TypGLYPH<134> = GLYPH<151>. D112, Max = 300. D112, Units = \u03bc A. D112, Conditions = . D113, Sym = I DDP. D113, Characteristic = Supply Current during Programming. D113, Min = GLYPH<151>. D113,",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nTypGLYPH<134> = GLYPH<151>. D113, Max = 1.0. D113, Units = mA. D113, Conditions = . , Sym = . , Characteristic = Data EEPROM Memory. , Min = . , TypGLYPH<134> = . , Max = . , Units = . , Conditions = . D120, Sym = ED. D120, Characteristic = Byte Endurance. D120, Min = 100K 10K. D120, TypGLYPH<134> = 1M 100K. D120, Max = GLYPH<151>. D120, Units = E/W E/W. D120, Conditions = -40 \u00b0 C to +85 \u00b0 C -40 \u00b0 C to +125 \u00b0 C. D121, Sym = VDRW. D121, Characteristic = VDD for Read/Write. D121, Min = VMIN. D121, TypGLYPH<134> = GLYPH<151>. D121, Max = 5.5. D121, Units = V.",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nD121, Conditions = Using EECON to read/write VMIN = Minimum operating voltage. D122, Sym = TDEW. D122, Characteristic = Erase/Write Cycle Time. D122, Min = GLYPH<151>. D122, TypGLYPH<134> = 4. D122, Max = GLYPH<151>. D122, Units = ms. D122, Conditions = . D123, Sym = TRETD. D123, Characteristic = Characteristic Retention. D123, Min = 40. D123, TypGLYPH<134> = GLYPH<151>. D123, Max = GLYPH<151>. D123, Units = Year. D123, Conditions = Provided no other specifications are violated. D124, Sym = TREF. D124, Characteristic = Number of Total Erase/Write Cycles before Refresh (1). D124, Min = 1M 100K. D124, TypGLYPH<134> = 10M 1M. D124, Max = GLYPH<151>",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nGLYPH<151>. D124, Units = E/W E/W. D124, Conditions = -40GLYPH<176>C to +85GLYPH<176>C -40 \u00b0 C to +125 \u00b0 C. , Sym = . , Characteristic = Program Flash Memory. , Min = . , TypGLYPH<134> = . , Max = . , Units = . , Conditions = . D130, Sym = EP. D130, Characteristic = Cell Endurance. D130, Min = 10K 1K. D130, TypGLYPH<134> = 100K 10K. D130, Max = GLYPH<151>. D130, Units = E/W E/W. D130, Conditions = -40 \u00b0 C to +85 \u00b0 C -40 \u00b0 C to +125 \u00b0 C. D131, Sym = VPR. D131, Characteristic = VDD for Read. D131, Min = VMIN. D131, TypGLYPH<134> = GLYPH<151>. D131, Max = 5.5.",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nD131, Units = V. D131, Conditions = VMIN = Minimum operating voltage. D132, Sym = VIE. D132, Characteristic = VDD for Block Erase. D132, Min = 4.5. D132, TypGLYPH<134> = GLYPH<151>. D132, Max = 5.5. D132, Units = V. D132, Conditions = Using ICSP port. D132A, Sym = VIW. D132A, Characteristic = VDD for Externally Timed Erase or Write. D132A, Min = 4.5. D132A, TypGLYPH<134> = GLYPH<151>. D132A, Max = 5.5. D132A, Units = V. D132A, Conditions = Using ICSP port. D132B, Sym = VPEW. D132B, Characteristic = VDD for Self-Timed Write. D132B, Min = VMIN. D132B, TypGLYPH<134> = GLYPH<151>.",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nD132B, Max = 5.5. D132B, Units = V. D132B, Conditions = VMIN = Minimum operating voltage. D133, Sym = TIE. D133, Characteristic = ICSP Block Erase Cycle Time. D133, Min = GLYPH<151>. D133, TypGLYPH<134> = 4. D133, Max = GLYPH<151>. D133, Units = ms. D133, Conditions = VDD > 4.5V. D133A, Sym = TIW. D133A, Characteristic = ICSP Erase or Write Cycle Time (externally timed). D133A, Min = 1. D133A, TypGLYPH<134> = GLYPH<151>. D133A, Max = GLYPH<151>. D133A, Units = ms. D133A, Conditions = VDD > 4.5V. D133A, Sym = TIW. D133A, Characteristic = Self-Timed Write Cycle Time. D133A, Min =",
    "TABLE 26-1: MEMORY PROGRAMMING REQUIREMENTS\nGLYPH<151>. D133A, TypGLYPH<134> = 2. D133A, Max = GLYPH<151>. D133A, Units = ms. D133A, Conditions = . D134, Sym = TRETD. D134, Characteristic = Characteristic Retention. D134, Min = 40. D134, TypGLYPH<134> = GLYPH<151>. D134, Max = GLYPH<151>. D134, Units = Year. D134, Conditions = Provided no other specifications are violated\nGLYPH<134> Data in GLYPH<147>TypGLYPH<148> column is at 5.0V, 25GLYPH<176>C unless otherwise stated. These parameters are for design guidance only and are not tested.\nNote 1: Refer to Section 7.8 GLYPH<147>Using the Data EEPROMGLYPH<148> for a more detailed discussion on data EEPROM endurance.\n2: Required only if Low-Voltage Programming is disabled.",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40GLYPH<176>C < TA < +125GLYPH<176>C, unless otherwise stated.",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nD300, Sym = VIOFF. D300, Characteristics = Input Offset Voltage. D300, Min = GLYPH<151>. D300, Typ = -5.0. D300, Max = -10. D300, Units = mV. D300, Comments = . D301, Sym = VICM. D301, Characteristics = Input Common Mode Voltage*. D301, Min = 0. D301, Typ = GLYPH<151>. D301, Max = VDD GLYPH<150> 1.5. D301, Units = V. D301, Comments = . D302, Sym = CMRR. D302, Characteristics = Common Mode Rejection Ratio*. D302, Min = 55. D302, Typ = GLYPH<151>. D302, Max = GLYPH<151>. D302, Units = dB. D302, Comments = . 300 300A, Sym = TRESP. 300 300A, Characteristics = Response Time (1)*. 300 300A, Min =",
    "TABLE 26-2: COMPARATOR SPECIFICATIONS\nGLYPH<151>. 300 300A, Typ = 150. 300 300A, Max = 400 600. 300 300A, Units = ns ns. 300 300A, Comments = PIC18FXX20 PIC18LFXX20. 301, Sym = TMC2OV. 301, Characteristics = Comparator Mode Change to Output Valid*. 301, Min = GLYPH<151>. 301, Typ = GLYPH<151>. 301, Max = 10. 301, Units = \u03bc s. 301, Comments = \n* These parameters are characterized but not tested.\nNote 1: Response time measured with one comparator input at (VDD GLYPH<150> 1.5)/2, while the other input transitions from VSS to VDD.",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nOperating Conditions: 3.0V < VDD < 5.5V, -40GLYPH<176>C < TA < +125GLYPH<176>C, unless otherwise stated.",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\nD310, Sym = VRES. D310, Characteristics = Resolution. D310, Min = VDD/24. D310, Typ = GLYPH<151>. D310, Max = VDD/32. D310, Units = LSb. D310, Comments = . D311, Sym = VRAA. D311, Characteristics = Absolute Accuracy. D311, Min = GLYPH<151>. D311, Typ = GLYPH<151>. D311, Max = 1/2 1/2. D311, Units = LSb LSb. D311, Comments = Low Range (VRR = 1 ) High Range (VRR = 0 ). D312, Sym = VRUR. D312, Characteristics = Unit Resistor Value (R) *. D312, Min = GLYPH<151>. D312, Typ = 2k. D312, Max = GLYPH<151>. D312, Units = \u03a9. D312, Comments = . 310, Sym = TSET.",
    "TABLE 26-3: VOLTAGE REFERENCE SPECIFICATIONS\n310, Characteristics = Settling Time (1)*. 310, Min = GLYPH<151>. 310, Typ = GLYPH<151>. 310, Max = 10. 310, Units = \u03bc s. 310, Comments = \n* These parameters are characterized but not tested.\nNote 1: Settling time measured while VRR = 1 and VR<3:0> transitions from GLYPH<145> 0000 GLYPH<146>  to GLYPH<145> 1111 GLYPH<146> .",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\n, Symbol = VLVD. , Characteristic = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. , Characteristic = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. , Min = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. , TypGLYPH<134> = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. , Max = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. , Units = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes from 0351xxx to 0417xxx, inclusive. D420A, Symbol = . D420A, Characteristic =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\nPIC18LF2X20/4X20. D420A, Characteristic = PIC18LF2X20/4X20. D420A, Min = Industrial Low Voltage (-40GLYPH<176>C to +85GLYPH<176>C). D420A, TypGLYPH<134> = Industrial Low Voltage (-40GLYPH<176>C to +85GLYPH<176>C). D420A, Max = Industrial Low Voltage (-40GLYPH<176>C to +85GLYPH<176>C). D420A, Units = Industrial Low Voltage (-40GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0000. , Min = N/A. , TypGLYPH<134> = N/A. , Max = N/A. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0001. , Min = N/A. ,",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\nTypGLYPH<134> = N/A. , Max = N/A. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0010. , Min = 2.08. , TypGLYPH<134> = 2.26. , Max = 2.44. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0011. , Min = 2.26. , TypGLYPH<134> = 2.45. , Max = 2.65. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0100. , Min = 2.35. , TypGLYPH<134> = 2.55. , Max = 2.76. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0101. , Min = 2.55. , TypGLYPH<134> = 2.77. , Max = 2.99. , Units = V. , Symbol",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\n= . , Characteristic = . , Characteristic = LVDL<3:0> = 0110. , Min = 2.64. , TypGLYPH<134> = 2.87. , Max = 3.10. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 0111. , Min = 2.82. , TypGLYPH<134> = 3.07. , Max = 3.31. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1000. , Min = 3.09. , TypGLYPH<134> = 3.36. , Max = 3.63. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1001. , Min = 3.29. , TypGLYPH<134> = 3.57. , Max = 3.86. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1010. , Min =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\n3.38. , TypGLYPH<134> = 3.67. , Max = 3.96. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1011. , Min = 3.56. , TypGLYPH<134> = 3.87. , Max = 4.18. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1100. , Min = 3.75. , TypGLYPH<134> = 4.07. , Max = 4.40. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.93. , TypGLYPH<134> = 4.28. , Max = 4.62. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min = 4.23. , TypGLYPH<134> = 4.60. , Max = 4.96. , Units =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\nV. D420B, Symbol = . D420B, Characteristic = PIC18F2X20/4X20. D420B, Characteristic = PIC18F2X20/4X20. D420B, Min = Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D420B, TypGLYPH<134> = Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D420B, Max = Industrial (-40GLYPH<176>C to +85GLYPH<176>C). D420B, Units = Industrial (-40GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1011. , Min = 3.56. , TypGLYPH<134> = 3.87. , Max = 4.18. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1100. , Min =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\n3.75. , TypGLYPH<134> = 4.07. , Max = 4.40. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.93. , TypGLYPH<134> = 4.28. , Max = 4.62. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min = 4.23. , TypGLYPH<134> = 4.60. , Max = 4.96. , Units = V. D420C, Symbol = . D420C, Characteristic = PIC18F2X20/4X20. D420C, Characteristic = PIC18F2X20/4X20. D420C, Min = Extended (-40GLYPH<176>C to +125GLYPH<176>C). D420C, TypGLYPH<134> = Extended (-40GLYPH<176>C to +125GLYPH<176>C).",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\nD420C, Max = Extended (-40GLYPH<176>C to +125GLYPH<176>C). D420C, Units = Extended (-40GLYPH<176>C to +125GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1011. , Min = 3.41. , TypGLYPH<134> = 3.87. , Max = 4.33. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1100. , Min = 3.58. , TypGLYPH<134> = 4.07. , Max = 4.56. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.77. , TypGLYPH<134> = 4.28. , Max = 4.79. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS\n4.04. , TypGLYPH<134> = 4.60. , Max = 5.15. , Units = V\nLegend:\nShading of rows is to assist in readability of the table.\n- GLYPH<134> Production tested at TAMB = 25GLYPH<176>C. Specifications over temperature limits ensured by characterization.",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nPIC18LF2220/2320/4220/4320\n(Industrial)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C\n\u2264\nTA\n\u2264\n+85GLYPH<176>C for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nD420D, Symbol.VLVD = . D420D, Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = PIC18LF2X20/4X20. D420D, Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = PIC18LF2X20/4X20. D420D, Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D420D, TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D420D, Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151>",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nDate codes above 0417xxx = Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). D420D, Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-10GLYPH<176>C to +85GLYPH<176>C). , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0000. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Max.LVD",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nVoltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0001. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A.",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n, Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0010. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.08. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.26. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.44. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n= V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0011. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.26. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.45. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.65. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nGLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0100. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.35. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.55. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.76. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0101. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.55. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.77. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.99. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n0110. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.64. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.87. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.10. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0111. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n0417xxx = 2.82. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.07. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.31. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1000. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.09. , TypGLYPH<134>.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = 3.36. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.63. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1001. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.29. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.57. , Max.LVD",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nVoltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.86. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1010. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.38. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.67. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.96.",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n, Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1011. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.56. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.87. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.18. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n= V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1100. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.75. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.07. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.40. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nGLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1101. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.93. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.28. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.62. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1110. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.23. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.60. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.96. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. D420F, Symbol.VLVD = . D420F, Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = PIC18LF2X20/4X20. D420F, Characteristic.LVD Voltage on VDD Transition High-to-Low",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nGLYPH<151> Date codes above 0417xxx = PIC18LF2X20/4X20. D420F, Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D420F, TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D420F, Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage (-40GLYPH<176>C to -10GLYPH<176>C). D420F, Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = Industrial Low Voltage",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n(-40GLYPH<176>C to -10GLYPH<176>C). , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0000. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = .",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n, Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0001. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = N/A. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n= . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0010. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 1.99. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.26. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.53. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n0417xxx = LVDL<3:0> = 0011. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.16. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.45. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.75. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0100. , Min.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = 2.25. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.55. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.86. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0101. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.43. ,",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nTypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.77. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.10. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0110. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.53. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nabove 0417xxx = 2.87. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.21. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 0111. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.70. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.07. , Max.LVD Voltage on VDD Transition High-to-Low",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nGLYPH<151> Date codes above 0417xxx = 3.43. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1000. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 2.96. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.36. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.77. , Units.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1001. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.14. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.57. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.00. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD =",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n. , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1010. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.23. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.67. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.11. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\n0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1011. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.41. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.87. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.34. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\ncodes above 0417xxx = LVDL<3:0> = 1100. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 3.58. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.07. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.56. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1101. , Min.LVD Voltage on VDD Transition",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nHigh-to-Low GLYPH<151> Date codes above 0417xxx = 3.76. , TypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.28. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.79. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V. , Symbol.VLVD = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = . , Characteristic.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = LVDL<3:0> = 1110. , Min.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.04. ,",
    "TABLE 26-4: LOW-VOLTAGE DETECT CHARACTERISTICS (CONTINUED)\nTypGLYPH<134>.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 4.60. , Max.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = 5.15. , Units.LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx = V\nLegend:\nShading of rows is to assist in readability of the table.\n- GLYPH<134> Production tested at TAMB = 25GLYPH<176>C. Specifications over temperature limits ensured by characterization.",
    "PIC18LF2220/2320/4220/4320\nStandard Operating Conditions (unless otherwise stated)\n(Industrial)\nPIC18F2220/2320/4220/4320\n(Industrial, Extended)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial\nStandard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended",
    "PIC18LF2220/2320/4220/4320\n, Symbol = VLVD. , Characteristic = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. , Characteristic = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. , Min = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. , TypGLYPH<134> = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. , Max = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. , Units = LVD Voltage on VDD Transition High-to-Low GLYPH<151> Date codes above 0417xxx. D420G, Symbol = . D420G, Characteristic = PIC18F2X20/4X20. D420G, Characteristic = PIC18F2X20/4X20. D420G, Min = Industrial",
    "PIC18LF2220/2320/4220/4320\n(-10GLYPH<176>C to +85GLYPH<176>C). D420G, TypGLYPH<134> = Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D420G, Max = Industrial (-10GLYPH<176>C to +85GLYPH<176>C). D420G, Units = Industrial (-10GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.93. , TypGLYPH<134> = 4.28. , Max = 4.62. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min = 4.23. , TypGLYPH<134> = 4.60. , Max = 4.96. , Units = V. D420H, Symbol = . D420H, Characteristic =",
    "PIC18LF2220/2320/4220/4320\nPIC18F2X20/4X20. D420H, Characteristic = PIC18F2X20/4X20. D420H, Min = Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D420H, TypGLYPH<134> = Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D420H, Max = Industrial (-40GLYPH<176>C to -10GLYPH<176>C). D420H, Units = Industrial (-40GLYPH<176>C to -10GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.76. , TypGLYPH<134> = 4.28. , Max = 4.79. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min = 4.04. , TypGLYPH<134> =",
    "PIC18LF2220/2320/4220/4320\n4.60. , Max = 5.15. , Units = V. D420J, Symbol = . D420J, Characteristic = PIC18F2X20/4X20. D420J, Characteristic = PIC18F2X20/4X20. D420J, Min = Extended (-10GLYPH<176>C to +85GLYPH<176>C). D420J, TypGLYPH<134> = Extended (-10GLYPH<176>C to +85GLYPH<176>C). D420J, Max = Extended (-10GLYPH<176>C to +85GLYPH<176>C). D420J, Units = Extended (-10GLYPH<176>C to +85GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.94. , TypGLYPH<134> = 4.28. , Max = 4.62. , Units = V. , Symbol = . , Characteristic = . ,",
    "PIC18LF2220/2320/4220/4320\nCharacteristic = LVDL<3:0> = 1110. , Min = 4.23. , TypGLYPH<134> = 4.60. , Max = 4.96. , Units = V. D420K, Symbol = . D420K, Characteristic = PIC18F2X20/4X20. D420K, Characteristic = PIC18F2X20/4X20. D420K, Min = Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D420K, TypGLYPH<134> = Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D420K, Max = Extended (-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). D420K, Units = Extended",
    "PIC18LF2220/2320/4220/4320\n(-40GLYPH<176>C to -10GLYPH<176>C, +85GLYPH<176>C to +125GLYPH<176>C). , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1101. , Min = 3.77. , TypGLYPH<134> = 4.28. , Max = 4.79. , Units = V. , Symbol = . , Characteristic = . , Characteristic = LVDL<3:0> = 1110. , Min = 4.05. , TypGLYPH<134> = 4.60. , Max = 5.15. , Units = V\nLegend:\nShading of rows is to assist in readability of the table.\n- GLYPH<134> Production tested at TAMB = 25GLYPH<176>C. Specifications over temperature limits ensured by characterization.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nThe  timing  parameter  symbols  have  been  created following one of the following formats:",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nT, 1. TppS2ppS 2. TppS = T. T, 3. TCC:ST 4. Ts = . T, (I 2 C specifications only) (I 2 C specifications only) = . F, 1. TppS2ppS 2. TppS = Frequency. F, 3. TCC:ST 4. Ts = T. F, (I 2 C specifications only) (I 2 C specifications only) = Time. Lowercase letters (pp) and their meanings:, 1. TppS2ppS 2. TppS = Lowercase letters (pp) and their meanings:. Lowercase letters (pp) and their meanings:, 3. TCC:ST 4. Ts = . Lowercase letters (pp) and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = . pp, 1. TppS2ppS 2. TppS = pp. pp, 3. TCC:ST 4. Ts = . pp, (I 2 C specifications only) (I 2 C specifications only) = . cc, 1. TppS2ppS 2. TppS = CCP1. cc, 3. TCC:ST",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n4. Ts = osc. cc, (I 2 C specifications only) (I 2 C specifications only) = OSC1. ck, 1. TppS2ppS 2. TppS = CLKO. ck, 3. TCC:ST 4. Ts = rd. ck, (I 2 C specifications only) (I 2 C specifications only) = RD. cs, 1. TppS2ppS 2. TppS = CS. cs, 3. TCC:ST 4. Ts = rw. cs, (I 2 C specifications only) (I 2 C specifications only) = RD or WR. di, 1. TppS2ppS 2. TppS = SDI. di, 3. TCC:ST 4. Ts = sc. di, (I 2 C specifications only) (I 2 C specifications only) = SCK. do, 1. TppS2ppS 2. TppS = SDO. do, 3. TCC:ST 4. Ts = ss. do, (I 2 C specifications only) (I 2 C specifications only) = SS. dt, 1. TppS2ppS 2. TppS = Data in. dt, 3.",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nTCC:ST 4. Ts = t0. dt, (I 2 C specifications only) (I 2 C specifications only) = T0CKI. io, 1. TppS2ppS 2. TppS = I/O port. io, 3. TCC:ST 4. Ts = t1. io, (I 2 C specifications only) (I 2 C specifications only) = T1CKI. mc, 1. TppS2ppS 2. TppS = MCLR. mc, 3. TCC:ST 4. Ts = wr. mc, (I 2 C specifications only) (I 2 C specifications only) = WR. Uppercase letters and their meanings:, 1. TppS2ppS 2. TppS = Uppercase letters and their meanings:. Uppercase letters and their meanings:, 3. TCC:ST 4. Ts = . Uppercase letters and their meanings:, (I 2 C specifications only) (I 2 C specifications only) = . S, 1. TppS2ppS 2. TppS = S. S, 3. TCC:ST 4. Ts = . S, (I 2 C specifications only) (I 2 C specifications",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\nonly) = . F, 1. TppS2ppS 2. TppS = Fall. F, 3. TCC:ST 4. Ts = P. F, (I 2 C specifications only) (I 2 C specifications only) = Period. H, 1. TppS2ppS 2. TppS = High. H, 3. TCC:ST 4. Ts = R. H, (I 2 C specifications only) (I 2 C specifications only) = Rise. I, 1. TppS2ppS 2. TppS = Invalid (High-impedance). I, 3. TCC:ST 4. Ts = V. I, (I 2 C specifications only) (I 2 C specifications only) = Valid. L, 1. TppS2ppS 2. TppS = Low. L, 3. TCC:ST 4. Ts = Z. L, (I 2 C specifications only) (I 2 C specifications only) = High-impedance. I 2 C only, 1. TppS2ppS 2. TppS = I 2 C only. I 2 C only, 3. TCC:ST 4. Ts = . I 2 C only,",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n(I 2 C specifications only) (I 2 C specifications only) = . AA, 1. TppS2ppS 2. TppS = output access. AA, 3. TCC:ST 4. Ts = High. AA, (I 2 C specifications only) (I 2 C specifications only) = High. BUF, 1. TppS2ppS 2. TppS = Bus free. BUF, 3. TCC:ST 4. Ts = Low. BUF, (I 2 C specifications only) (I 2 C specifications only) = Low. TCC:ST (I 2 C specifications only), 1. TppS2ppS 2. TppS = TCC:ST (I 2 C specifications only). TCC:ST (I 2 C specifications only), 3. TCC:ST 4. Ts = . TCC:ST (I 2 C specifications only), (I 2 C specifications only) (I 2 C specifications only) = . CC, 1. TppS2ppS 2. TppS = CC. CC, 3. TCC:ST 4. Ts = . CC, (I 2 C specifications only) (I 2 C specifications only)",
    "26.4.1 TIMING PARAMETER SYMBOLOGY\n= . HD, 1. TppS2ppS 2. TppS = Hold. HD, 3. TCC:ST 4. Ts = SU. HD, (I 2 C specifications only) (I 2 C specifications only) = Setup. ST, 1. TppS2ppS 2. TppS = ST. ST, 3. TCC:ST 4. Ts = ST. ST, (I 2 C specifications only) (I 2 C specifications only) = ST. DAT, 1. TppS2ppS 2. TppS = DATA input hold. DAT, 3. TCC:ST 4. Ts = STO. DAT, (I 2 C specifications only) (I 2 C specifications only) = Stop condition. STA, 1. TppS2ppS 2. TppS = Start condition. STA, 3. TCC:ST 4. Ts = . STA, (I 2 C specifications only) (I 2 C specifications only) = ",
    "26.4.2 TIMING CONDITIONS\nNote:\nThe temperature and voltages specified in Table 26-5 apply  to  all timing  specifications  unless  otherwise noted. Figure 26-5 specifies the load conditions for the timing specifications.\nBecause of space limitations, the generic terms GLYPH<147>PIC18FXX20GLYPH<148> and GLYPH<147>PIC18LFXX20GLYPH<148> are used throughout this section to refer to the  PIC18F2220/2320/4220/4320  and PIC18LF2220/2320/4220/4320 families of devices specifically and only those devices.",
    "TABLE 26-5: TEMPERATURE AND VOLTAGE SPECIFICATIONS GLYPH<150> AC\nAC CHARACTERISTICS\nStandard Operating Conditions (unless otherwise stated)\nOperating temperature\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C   for industrial\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C   for extended\nOperating voltage VDD range as described in DC spec Section 26.1 and Section 26.3 .\nLF parts operate up to industrial temperatures only.",
    "FIGURE 26-5: LOAD CONDITIONS FOR DEVICE TIMING SPECIFICATIONS\nVDD/2 CL RL VSS, Load Condition 2 = Pin VSS CL for all pins except OSC2/CLKO and including D and E outputs as ports",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\n1A, Symbol = FOSC. 1A, Characteristic = External CLKI Frequency (1) Oscillator Frequency (1). 1A, Min = DC DC DC 0.1 4 4 4 5. 1A, Max = 40 25 4 1 25 10 6.25 33. 1A, Units = MHz MHz MHz MHz MHz MHz MHz kHz. 1A, Conditions = EC, ECIO (industrial) EC, ECIO (extended) RC osc XT osc HS osc HS + PLL osc (industrial) HS + PLL osc (extended) LP Osc mode. 1, Symbol = TOSC. 1, Characteristic = External CLKI Period (1) Oscillator Period (1). 1, Min = 25 40 250 1 40 100 160 30. 1, Max = GLYPH<151> GLYPH<151> GLYPH<151> GLYPH<151> 250 250 250 GLYPH<151>. 1, Units = ns ns ns \u03bc s ns ns ns \u03bc s. 1, Conditions = EC, ECIO (industrial) EC, ECIO (extended) RC osc XT osc HS osc HS + PLL",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nosc (industrial) HS + PLL osc (extended). 2, Symbol = TCY. 2, Characteristic = Instruction Cycle Time (1). 2, Min = 100 160. 2, Max = GLYPH<151> GLYPH<151>. 2, Units = ns ns. 2, Conditions = TCY = 4/FOSC (industrial) TCY = 4/FOSC (extended). 3, Symbol = TOSL, TOSH. 3, Characteristic = External Clock in (OSC1) High or Low Time. 3, Min = 30 2.5 10. 3, Max = GLYPH<151> GLYPH<151> GLYPH<151>. 3, Units = ns \u03bc s ns. 3, Conditions = XT osc LP osc HS osc. 4, Symbol = TOSR, TOSF. 4, Characteristic = External Clock in (OSC1) Rise or Fall Time. 4, Min = GLYPH<151> GLYPH<151> GLYPH<151>. 4, Max = 20 50 7.5. 4, Units = ns ns ns. 4, Conditions =",
    "TABLE 26-6: EXTERNAL CLOCK TIMING REQUIREMENTS\nXT osc LP osc HS osc\nNote 1: Instruction cycle period (TCY) equals four times the input oscillator time base period for all configurations except PLL. All specified values are based on characterization data for that particular oscillator type under standard operating conditions with the device executing code. Exceeding these specified limits may result in an unstable oscillator operation and/or higher than expected current consumption. All devices are tested to operate at GLYPH<147>min.GLYPH<148> values with an external clock applied to the OSC1/CLKI pin. When an external clock input is used, the GLYPH<147>max.GLYPH<148> cycle time limit is GLYPH<147>DCGLYPH<148> (no clock) for all devices.",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nF10, Sym = FOSC. F10, Characteristic = Oscillator Frequency Range. F10, Min = 4. F10, TypGLYPH<134> = GLYPH<151>. F10, Max = 10. F10, Units = MHz. F10, Conditions = HS mode only. F11, Sym = FSYS. F11, Characteristic = On-Chip VCO System Frequency. F11, Min = 16. F11, TypGLYPH<134> = GLYPH<151>. F11, Max = 40. F11, Units = MHz. F11, Conditions = HS mode only. F12, Sym = t PLL. F12, Characteristic = PLL Start-up Time (Lock Time). F12, Min = GLYPH<151>. F12, TypGLYPH<134> = GLYPH<151>. F12, Max = 2. F12, Units = ms. F12, Conditions = . F13, Sym = \u0394 CLK. F13, Characteristic =",
    "TABLE 26-7: PLL CLOCK TIMING SPECIFICATIONS (VDD = 4.2V TO 5.5V)\nCLKO Stability (Jitter). F13, Min = -2. F13, TypGLYPH<134> = GLYPH<151>. F13, Max = +2. F13, Units = %. F13, Conditions = \n- GLYPH<134> Data in GLYPH<147>TypGLYPH<148> column is at 5V , 25 \u00b0 C unless otherwise stated. These parameters are for design guidance only and are not tested.",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nF14, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF2220/2320/4220/4320. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -2. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz,",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +/-1. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 2. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz,",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n250 kHz, 125 kHz (1) = %. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +25GLYPH<176>C. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3V. F14, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F15, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F15, Standard Operating Conditions (unless otherwise stated) Operating temperature",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -5. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz,",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n500 kHz, 250 kHz, 125 kHz (1) = 5. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10GLYPH<176>C to +85GLYPH<176>C. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3V. F15, Standard Operating Conditions (unless otherwise stated) Operating temperature",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F16, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F16, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10. F16, Standard Operating Conditions (unless otherwise stated) Operating",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\ntemperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F16, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 10. F16, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n-40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. F16, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40GLYPH<176>C to +85GLYPH<176>C. F16, Standard Operating Conditions (unless otherwise stated) Operating temperature",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n-40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3V. F16, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F17, PIC18LF1220/1320 (Industrial).PIC18F1220/1320",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n(Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18F2220/2320/4220/4320. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -2. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) =",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+/-1. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 2. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. F17, Standard Operating Conditions (unless otherwise",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nstated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = +25GLYPH<176>C. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nMHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5V. F17, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F18, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\ntemperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -5. F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 5. F18, Standard Operating Conditions (unless otherwise stated) Operating",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\ntemperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz,",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n500 kHz, 250 kHz, 125 kHz (1) = -10GLYPH<176>C to +85GLYPH<176>C. F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5V. F18, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nMHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F19, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -10. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n= 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 10. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz,",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = %. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40GLYPH<176>C to +85GLYPH<176>C. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nindustrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5V. F19, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . , PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n(2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nindustrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nkHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). , Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = INTRC Accuracy @Freq = 31 kHz (2). F20, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18LF2220/2320/4220/4320. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 26.562. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n(1) = 35.938. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = kHz. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nextended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40GLYPH<176>C to +85GLYPH<176>C. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 2.7-3.3V. F20, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = . F21, PIC18LF1220/1320 (Industrial).PIC18F1220/1320 (Industrial, Extended).Device.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = PIC18F2220/2320/4220/4320. F21, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Min.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 26.562. F21, Standard Operating Conditions",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n(unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Typ.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = GLYPH<151>. F21, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.Standard Operating Conditions Operating temperature.Max.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = 35.938. F21, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\n+85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Units.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = kHz. F21, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended..INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = -40GLYPH<176>C to +85GLYPH<176>C. F21, Standard Operating Conditions (unless otherwise",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nstated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial.(unless otherwise stated) -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial -40GLYPH<176>C \u2264 TA \u2264 +125GLYPH<176>C for extended.Conditions.INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = VDD = 4.5-5.5V. F21, Standard Operating Conditions (unless otherwise stated) Operating temperature -40GLYPH<176>C \u2264 TA \u2264 +85GLYPH<176>C for industrial...INTOSC Accuracy @Freq = 8 MHz, 4 MHz, 2 MHz, 1 MHz, 500 kHz, 250 kHz, 125 kHz (1) = ",
    "TABLE 26-8: INTERNAL RC ACCURACY: PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial, Extended)\nLegend: Shading of rows is to assist in readability of the table.\nNote\n1: Frequency calibrated at 25GLYPH<176>C. OSCTUNE register can be used to compensate for temperature drift.\n2: INTRC frequency after calibration.\n3: Change of INTRC frequency as VDD changes.",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n10, Symbol = TOSH2CKL. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Characteristic = OSC1 \u2191 to CLKO \u2193. 10, Min = GLYPH<151>. 10, Typ = 75. 10, Max = 200. 10, Units = ns. 10, Conditions = (1). 11, Symbol = TOSH2CKH. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Characteristic = OSC1 \u2191 to CLKO \u2191. 11, Min = GLYPH<151>. 11, Typ = 75. 11, Max = 200. 11, Units = ns. 11, Conditions = (1). 12, Symbol = TCKR. 12, Characteristic = CLKO Rise Time. 12, Characteristic = CLKO Rise Time. 12, Min = GLYPH<151>. 12, Typ = 35. 12, Max = 100. 12, Units = ns. 12, Conditions = (1). 13, Symbol = TCKF. 13, Characteristic = CLKO Fall Time. 13, Characteristic = CLKO Fall Time. 13, Min =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nGLYPH<151>. 13, Typ = 35. 13, Max = 100. 13, Units = ns. 13, Conditions = (1). 14, Symbol = TCKL2IOV. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Characteristic = CLKO \u2193 to Port Out Valid. 14, Min = GLYPH<151>. 14, Typ = GLYPH<151>. 14, Max = 0.5 TCY + 20. 14, Units = ns. 14, Conditions = (1). 15, Symbol = TIOV2CKH. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Characteristic = Port In Valid before CLKO \u2191. 15, Min = 0.25 TCY + 25. 15, Typ = GLYPH<151>. 15, Max = GLYPH<151>. 15, Units = ns. 15, Conditions = (1). 16, Symbol = TCKH2IOI. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Characteristic = Port In Hold after CLKO \u2191. 16, Min = 0. 16,",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nTyp = GLYPH<151>. 16, Max = GLYPH<151>. 16, Units = ns. 16, Conditions = (1). 17, Symbol = TOSH2IOV. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Characteristic = OSC1 \u2191 (Q1 cycle) to Port Out Valid. 17, Min = GLYPH<151>. 17, Typ = 50. 17, Max = 150. 17, Units = ns. 17, Conditions = . 18, Symbol = TOSH2IOI. 18, Characteristic = OSC1 \u2191 (Q2 cycle) to Port Input Invalid. 18, Characteristic = PIC18 F XX20. 18, Min = 100. 18, Typ = GLYPH<151>. 18, Max = GLYPH<151>. 18, Units = ns. 18, Conditions = . 18A, Symbol = TOSH2IOI. 18A, Characteristic = OSC1 \u2191 (Q2 cycle) to Port Input Invalid. 18A, Characteristic = PIC18 LF XX20. 18A, Min = 200.",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\n18A, Typ = GLYPH<151>. 18A, Max = GLYPH<151>. 18A, Units = ns. 18A, Conditions = . 19, Symbol = TIOV2OSH. 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup time). 19, Characteristic = Port Input Valid to OSC1 \u2191 (I/O in setup time). 19, Min = 0. 19, Typ = GLYPH<151>. 19, Max = GLYPH<151>. 19, Units = ns. 19, Conditions = . 20, Symbol = TIOR. 20, Characteristic = Port Output Rise Time. 20, Characteristic = PIC18 F XX20. 20, Min = GLYPH<151>. 20, Typ = 10. 20, Max = 25. 20, Units = ns. 20, Conditions = . 20A, Symbol = TIOR. 20A, Characteristic = Port Output Rise Time. 20A, Characteristic = PIC18 LF XX20. 20A, Min = GLYPH<151>. 20A, Typ =",
    "TABLE 26-9: CLKO AND I/O TIMING REQUIREMENTS\nGLYPH<151>. 20A, Max = 60. 20A, Units = ns. 20A, Conditions = . 21, Symbol = TIOF. 21, Characteristic = Port Output Fall Time. 21, Characteristic = PIC18 F XX20. 21, Min = GLYPH<151>. 21, Typ = 10. 21, Max = 25. 21, Units = ns. 21, Conditions = . 21A, Symbol = TIOF. 21A, Characteristic = Port Output Fall Time. 21A, Characteristic = PIC18 LF XX20. 21A, Min = GLYPH<151>. 21A, Typ = GLYPH<151>. 21A, Max = 60. 21A, Units = ns. 21A, Conditions = \nNote 1: Measurements are taken in RC mode, where CLKO output is 4 x TOSC.",
    "TABLE 26-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS\n30, Symbol = TMCL. 30, Characteristic = MCLR Pulse Width (low). 30, Min = 2. 30, Typ = GLYPH<151>. 30, Max = GLYPH<151>. 30, Units = \u03bc s. 30, Conditions = . 31, Symbol = TWDT. 31, Characteristic = Watchdog Timer Time-out Period (no postscaler). 31, Min = 3.48. 31, Typ = 4.00. 31, Max = 4.71. 31, Units = ms. 31, Conditions = . 32, Symbol = TOST. 32, Characteristic = Oscillation Start-up Timer Period. 32, Min = 1024 TOSC. 32, Typ = GLYPH<151>. 32, Max = 1024 TOSC. 32, Units = GLYPH<151>. 32, Conditions = TOSC = OSC1 period. 33, Symbol = TPWRT. 33, Characteristic = Power-up Timer Period. 33, Min = 57.0. 33, Typ",
    "TABLE 26-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS\n= 65.5. 33, Max = 77.2. 33, Units = ms. 33, Conditions = . 34, Symbol = TIOZ. 34, Characteristic = I/O High-Impedance from MCLR Low or Watchdog Timer Reset. 34, Min = GLYPH<151>. 34, Typ = 2. 34, Max = GLYPH<151>. 34, Units = \u03bc s. 34, Conditions = . 35, Symbol = TBOR. 35, Characteristic = Brown-out Reset Pulse Width. 35, Min = 200. 35, Typ = GLYPH<151>. 35, Max = GLYPH<151>. 35, Units = \u03bc s. 35, Conditions = VDD \u2264 BVDD (see D005A). 36, Symbol = TIVRST. 36, Characteristic = Time for Internal Reference Voltage to become stable. 36, Min = GLYPH<151>. 36, Typ = 20. 36, Max = 50. 36, Units = \u03bc s. 36, Conditions = . 37, Symbol =",
    "TABLE 26-10: RESET, WATCHDOG TIMER, OSCILLATOR START-UP TIMER, POWER-UP TIMER AND BROWN-OUT RESET REQUIREMENTS\nTLVD. 37, Characteristic = Low-Voltage Detect Pulse Width. 37, Min = 200. 37, Typ = GLYPH<151>. 37, Max = GLYPH<151>. 37, Units = \u03bc s. 37, Conditions = VDD \u2264 VLVD",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\n40, Symbol = TT0H. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = T0CKI High Pulse Width. 40, Characteristic = No prescaler. 40, Min = 0.5 TCY + 20. 40, Max = GLYPH<151>. 40, Units = ns. 40, Conditions = . 40, Symbol = TT0H. 40, Characteristic = . 40, Characteristic = . 40, Characteristic = With prescaler. 40, Min = 10. 40, Max = GLYPH<151>. 40, Units = ns. 40, Conditions = . 41, Symbol = TT0L. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = T0CKI Low Pulse Width. 41, Characteristic = No prescaler. 41, Min = 0.5 TCY + 20. 41, Max = GLYPH<151>. 41, Units = ns. 41, Conditions = . 41, Symbol = TT0L. 41, Characteristic = . 41, Characteristic = . 41, Characteristic = With prescaler. 41, Min = 10. 41, Max =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nGLYPH<151>. 41, Units = ns. 41, Conditions = . 42, Symbol = TT0P. 42, Characteristic = T0CKI Period. 42, Characteristic = T0CKI Period. 42, Characteristic = No prescaler. 42, Min = TCY + 10. 42, Max = GLYPH<151>. 42, Units = ns. 42, Conditions = . 42, Symbol = TT0P. 42, Characteristic = . 42, Characteristic = . 42, Characteristic = With prescaler. 42, Min = Greater of: 20 ns or TCY + 40 N. 42, Max = GLYPH<151>. 42, Units = ns. 42, Conditions = N = prescale value (1, 2, 4,..., 256). 45, Symbol = TT1H. 45, Characteristic = T1CKI. 45, Characteristic = Synchronous, no prescaler. 45, Characteristic = Synchronous, no prescaler. 45, Min = 0.5 TCY + 20. 45, Max = GLYPH<151>. 45, Units = ns. 45,",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nConditions = . 45, Symbol = TT1H. 45, Characteristic = T1CKI. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 F XX20. 45, Min = 10. 45, Max = GLYPH<151>. 45, Units = ns. 45, Conditions = . 45, Symbol = TT1H. 45, Characteristic = T1CKI. 45, Characteristic = Synchronous, with prescaler. 45, Characteristic = PIC18 LF XX20. 45, Min = 25. 45, Max = GLYPH<151>. 45, Units = ns. 45, Conditions = . 45, Symbol = TT1H. 45, Characteristic = T1CKI. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 F XX20. 45, Min = 30. 45, Max = GLYPH<151>. 45, Units = ns. 45, Conditions = . 45, Symbol = TT1H. 45, Characteristic = T1CKI. 45, Characteristic = Asynchronous. 45, Characteristic = PIC18 LF XX20. 45,",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nMin = 50. 45, Max = GLYPH<151>. 45, Units = ns. 45, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T1CKI. 46, Characteristic = Synchronous, no prescaler. 46, Characteristic = Synchronous, no prescaler. 46, Min = 0.5 TCY + 5. 46, Max = GLYPH<151>. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T1CKI. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 F XX20. 46, Min = 10. 46, Max = GLYPH<151>. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T1CKI. 46, Characteristic = Synchronous, with prescaler. 46, Characteristic = PIC18 LF XX20. 46, Min = 25. 46, Max = GLYPH<151>. 46, Units = ns. 46, Conditions = . 46,",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nSymbol = TT1L. 46, Characteristic = T1CKI. 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 F XX20. 46, Min = 30. 46, Max = GLYPH<151>. 46, Units = ns. 46, Conditions = . 46, Symbol = TT1L. 46, Characteristic = T1CKI. 46, Characteristic = Asynchronous. 46, Characteristic = PIC18 LF XX20. 46, Min = 50. 46, Max = GLYPH<151>. 46, Units = ns. 46, Conditions = . 47, Symbol = TT1P. 47, Characteristic = T1CKI Input Period. 47, Characteristic = Synchronous. 47, Characteristic = Synchronous. 47, Min = Greater of: 20 ns or TCY + 40 N. 47, Max = GLYPH<151>. 47, Units = ns. 47, Conditions = N = prescale value (1, 2, 4, 8). 47, Symbol = TT1P. 47, Characteristic = T1CKI Input Period. 47, Characteristic =",
    "TABLE 26-11: TIMER0 AND TIMER1 EXTERNAL CLOCK REQUIREMENTS\nAsynchronous. 47, Characteristic = Asynchronous. 47, Min = 60. 47, Max = GLYPH<151>. 47, Units = ns. 47, Conditions = . , Symbol = FT1. , Characteristic = T1CKI Oscillator Input Frequency Range. , Characteristic = T1CKI Oscillator Input Frequency Range. , Characteristic = T1CKI Oscillator Input Frequency Range. , Min = DC. , Max = 50. , Units = kHz. , Conditions = . 48, Symbol = TCKE2TMRI Delay from External T1CKI Clock Edge to Timer Increment. 48, Characteristic = TCKE2TMRI Delay from External T1CKI Clock Edge to Timer Increment. 48, Characteristic = TCKE2TMRI Delay from External T1CKI Clock Edge to Timer Increment. 48, Characteristic = TCKE2TMRI Delay from External T1CKI Clock Edge to Timer Increment. 48, Min = 2 TOSC. 48, Max = 7 TOSC. 48, Units = GLYPH<151>. 48, Conditions = ",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n50, Symbol = TCCL. 50, Characteristic = CCPx Input Low Time. 50, Characteristic = No prescaler. 50, Characteristic = No prescaler. 50, Min = 0.5 TCY + 20. 50, Max = GLYPH<151>. 50, Units = ns. 50, Conditions = . 50, Symbol = TCCL. 50, Characteristic = CCPx Input Low Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 F XX20. 50, Min = 10. 50, Max = GLYPH<151>. 50, Units = ns. 50, Conditions = . 50, Symbol = TCCL. 50, Characteristic = CCPx Input Low Time. 50, Characteristic = With prescaler. 50, Characteristic = PIC18 LF XX20. 50, Min = 20. 50, Max = GLYPH<151>. 50, Units = ns. 50, Conditions = . 51, Symbol = TCCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = No prescaler. 51, Characteristic = No prescaler.",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\n51, Min = 0.5 TCY + 20. 51, Max = GLYPH<151>. 51, Units = ns. 51, Conditions = . 51, Symbol = TCCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 F XX20. 51, Min = 10. 51, Max = GLYPH<151>. 51, Units = ns. 51, Conditions = . 51, Symbol = TCCH. 51, Characteristic = CCPx Input High Time. 51, Characteristic = With prescaler. 51, Characteristic = PIC18 LF XX20. 51, Min = 20. 51, Max = GLYPH<151>. 51, Units = ns. 51, Conditions = . 52, Symbol = TCCP. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Characteristic = CCPx Input Period. 52, Min = 3 TCY + 40 N. 52, Max = GLYPH<151>. 52, Units = ns. 52, Conditions = N =",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nprescale value (1,4 or 16). 53, Symbol = TCCR. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = CCPx Output Fall Time. 53, Characteristic = PIC18 F XX20. 53, Min = GLYPH<151>. 53, Max = 25. 53, Units = ns. 53, Conditions = . 53, Symbol = TCCR. 53, Characteristic = . 53, Characteristic = . 53, Characteristic = PIC18 LF XX20. 53, Min = GLYPH<151>. 53, Max = 45. 53, Units = ns. 53, Conditions = . 54, Symbol = TCCF. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = CCPx Output Fall Time. 54, Characteristic = PIC18 F XX20. 54, Min = GLYPH<151>. 54, Max = 25. 54, Units = ns. 54, Conditions = . 54, Symbol = TCCF. 54, Characteristic = . 54, Characteristic = . 54, Characteristic = PIC18 LF XX20. 54, Min =",
    "TABLE 26-12: CAPTURE/COMPARE/PWM REQUIREMENTS (ALL CCP MODULES)\nGLYPH<151>. 54, Max = 45. 54, Units = ns. 54, Conditions = ",
    "TABLE 26-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4X20)\n62, Symbol = TDTV2WRH. 62, Characteristic = Data In Valid Before WR \u2191 or CS \u2191 (setup time). 62, Characteristic = Data In Valid Before WR \u2191 or CS \u2191 (setup time). 62, Min = 20. 62, Max = GLYPH<151>. 62, Units = ns. 62, Conditions = . 63, Symbol = TWRH2DTI. 63, Characteristic = WR \u2191 or CS \u2191 to DataGLYPH<150>In Invalid (hold time). 63, Characteristic = PIC18 F XX20. 63, Min = 20. 63, Max = GLYPH<151>. 63, Units = ns. 63, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XX20. , Min = 35. , Max = GLYPH<151>. , Units = ns. , Conditions = . 64, Symbol = TRDL2DTV. 64, Characteristic = RD \u2193 and CS \u2193 to DataGLYPH<150>Out Valid. 64, Characteristic = RD \u2193 and CS \u2193 to DataGLYPH<150>Out Valid. 64, Min",
    "TABLE 26-13: PARALLEL SLAVE PORT REQUIREMENTS (PIC18F4X20)\n= GLYPH<151>. 64, Max = 80. 64, Units = ns. 64, Conditions = . 65, Symbol = TRDH2DTI. 65, Characteristic = RD \u2191 or CS \u2193 to DataGLYPH<150>Out Invalid. 65, Characteristic = RD \u2191 or CS \u2193 to DataGLYPH<150>Out Invalid. 65, Min = 10. 65, Max = 30. 65, Units = ns. 65, Conditions = . 66, Symbol = TIBFINH. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Characteristic = Inhibit of the IBF Flag bit being Cleared from WR \u2191 or CS \u2191. 66, Min = GLYPH<151>. 66, Max = 3 TCY. 66, Units = . 66, Conditions = ",
    "FIGURE 26-13: EXAMPLE SPI MASTER MODE TIMING (CKE = 0\n)",
    "TABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )\n70, Symbol = TSSL2SCH, TSSL2SCL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = GLYPH<151>. 70, Units = ns. 70, Conditions = . 71, Symbol = TSCH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = GLYPH<151>. 71, Units = ns. 71, Conditions = . 71A, Symbol = TSCH. 71A, Characteristic = SCK Input High Time (Slave mode). 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = GLYPH<151>. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TSCL. 72, Characteristic = SCK Input Low Time (Slave mode). 72, Characteristic = Continuous. 72, Min =",
    "TABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )\n1.25 TCY + 30. 72, Max = GLYPH<151>. 72, Units = ns. 72, Conditions = . 72A, Symbol = TSCL. 72A, Characteristic = SCK Input Low Time (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = GLYPH<151>. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol = TDIV2SCH, TDIV2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = GLYPH<151>. 73, Units = ns. 73, Conditions = . 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A,",
    "TABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )\nMax = GLYPH<151>. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TSCH2DIL, TSCL2DIL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = GLYPH<151>. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XX20. 75, Min = GLYPH<151>. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XX20. 75, Min = GLYPH<151>. 75, Max = 45. 75, Units = ns. 75, Conditions = . 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic =",
    "TABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )\nSDO Data Output Fall Time. 76, Min = GLYPH<151>. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XX20. 78, Min = GLYPH<151>. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XX20. 78, Min = GLYPH<151>. 78, Max = 45. 78, Units = ns. 78, Conditions = . 79, Symbol = TSCF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = GLYPH<151>. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TSCH2DOV, TSCL2DOV. 80, Characteristic",
    "TABLE 26-14: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 0 )\n= SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XX20. 80, Min = GLYPH<151>. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TSCH2DOV, TSCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XX20. 80, Min = GLYPH<151>. 80, Max = 100. 80, Units = ns. 80, Conditions = \nNote 1: Requires the use of Parameter # 73A.\n2: Only if Parameter # 71A and # 72A are used.",
    "FIGURE 26-14: EXAMPLE SPI MASTER MODE TIMING (CKE = 1\n)",
    "TABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )\n71, Symbol = TSCH. 71, Characteristic = SCK Input High Time (Slave mode). 71, Characteristic = Continuous. 71, Min = 1.25 TCY + 30. 71, Max = GLYPH<151>. 71, Units = ns. 71, Conditions = . 71A, Symbol = . 71A, Characteristic = . 71A, Characteristic = Single Byte. 71A, Min = 40. 71A, Max = GLYPH<151>. 71A, Units = ns. 71A, Conditions = (Note 1). 72, Symbol = TSCL. 72, Characteristic = SCK Input Low Time. 72, Characteristic = Continuous. 72, Min = 1.25 TCY + 30. 72, Max = GLYPH<151>. 72, Units = ns. 72, Conditions = . 72A, Symbol = . 72A, Characteristic = (Slave mode). 72A, Characteristic = Single Byte. 72A, Min = 40. 72A, Max = GLYPH<151>. 72A, Units = ns. 72A, Conditions = (Note 1). 73, Symbol",
    "TABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )\n= TDIV2SCH, TDIV2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = GLYPH<151>. 73, Units = ns. 73, Conditions = . 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the 1st Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = GLYPH<151>. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TSCH2DIL, TSCL2DIL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = GLYPH<151>. 74, Units = ns. 74, Conditions",
    "TABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )\n= . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XX20. 75, Min = GLYPH<151>. 75, Max = 25. 75, Units = ns. 75, Conditions = . , Symbol = . , Characteristic = . , Characteristic = PIC18 LF XX20. , Min = . , Max = 45. , Units = ns. , Conditions = . 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = GLYPH<151>. 76, Max = 25. 76, Units = ns. 76, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time. 78, Characteristic = PIC18 F XX20. 78, Min = GLYPH<151>. 78, Max = 25. 78, Units = ns. 78, Conditions = . , Symbol = . , Characteristic = (Master mode). , Characteristic = PIC18 LF XX20. , Min = . , Max = 45.",
    "TABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )\n, Units = ns. , Conditions = . 79, Symbol = TSCF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = GLYPH<151>. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TSCH2DOV,. 80, Characteristic = SDO Data Output Valid after. 80, Characteristic = PIC18 F XX20. 80, Min = GLYPH<151>. 80, Max = 50. 80, Units = ns. 80, Conditions = . , Symbol = TSCL2DOV. , Characteristic = SCK Edge. , Characteristic = PIC18 LF XX20. , Min = . , Max = 100. , Units = ns. , Conditions = . 81, Symbol = TDOV2SCH, TDOV2SCL. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Characteristic = SDO Data Output Setup to SCK Edge. 81, Min = TCY. 81, Max =",
    "TABLE 26-15: EXAMPLE SPI MODE REQUIREMENTS (MASTER MODE, CKE = 1 )\nGLYPH<151>. 81, Units = ns. 81, Conditions = \nNote 1: Requires the use of Parameter # 73A.\n2: Only if Parameter # 71A and # 72A are used.",
    "FIGURE 26-15: EXAMPLE SPI SLAVE MODE TIMING (CKE = 0\n)",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n)\n70, Symbol = TSSL2SCH, TSSL2SCL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = GLYPH<151>. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TSCH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = GLYPH<151>. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TSCH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = GLYPH<151>. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TSCL. 72",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = GLYPH<151>. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TSCL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = GLYPH<151>. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73, Symbol = TDIV2SCH, TDIV2SCL. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Characteristic = Setup Time of SDI Data Input to SCK Edge. 73, Min = 100. 73, Max = GLYPH<151>. 73, Units = ns. 73, Conditions = . 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the First",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nClock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = GLYPH<151>. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TSCH2DIL, TSCL2DIL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = GLYPH<151>. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XX20. 75, Min = GLYPH<151>. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XX20. 75, Min = . 75, Max",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n= 45. 75, Units = ns. 75, Conditions = . 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = GLYPH<151>. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TSSH2DOZ. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XX20. 78, Min = GLYPH<151>. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XX20. 78, Min = . 78, Max = 45.",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\n78, Units = ns. 78, Conditions = . 79, Symbol = TSCF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = GLYPH<151>. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol = TSCH2DOV,. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XX20. 80, Characteristic = SDO Data Output Valid after SCK Edge PIC18 F XX20. 80, Min = GLYPH<151>. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TSCH2DOV,. 80, Characteristic = TSCL2DOV. 80, Characteristic = PIC18 LF XX20. 80, Min = . 80, Max = 100. 80, Units = ns. 80, Conditions = . 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK Edge. 83, Characteristic =",
    "TABLE 26-16: EXAMPLE SPI MODE REQUIREMENTS (SLAVE MODE TIMING, CKE = 0\nSS \u2191 after SCK Edge. 83, Min = 1.5 TCY + 40. 83, Max = GLYPH<151>. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter # 73A.\n2: Only if Parameter # 71A and # 72A are used.",
    "FIGURE 26-16: EXAMPLE SPI SLAVE MODE TIMING (CKE = 1\n)",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n)",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n70, Symbol = TSSL2SCH, TSSL2SCL. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Characteristic = SS \u2193 to SCK \u2193 or SCK \u2191 Input. 70, Min = TCY. 70, Max = GLYPH<151>. 70, Units = ns. 70, Conditions = . 71 71A, Symbol = TSCH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Continuous. 71 71A, Min = 1.25 TCY + 30. 71 71A, Max = GLYPH<151>. 71 71A, Units = ns. 71 71A, Conditions = . 71 71A, Symbol = TSCH. 71 71A, Characteristic = SCK Input High Time (Slave mode). 71 71A, Characteristic = Single Byte. 71 71A, Min = 40. 71 71A, Max = GLYPH<151>. 71 71A, Units = ns. 71 71A, Conditions = (Note 1). 72 72A, Symbol = TSCL. 72 72A, Characteristic =",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nSCK Input Low Time (Slave mode). 72 72A, Characteristic = Continuous. 72 72A, Min = 1.25 TCY + 30. 72 72A, Max = GLYPH<151>. 72 72A, Units = ns. 72 72A, Conditions = . 72 72A, Symbol = TSCL. 72 72A, Characteristic = SCK Input Low Time (Slave mode). 72 72A, Characteristic = Single Byte. 72 72A, Min = 40. 72 72A, Max = GLYPH<151>. 72 72A, Units = ns. 72 72A, Conditions = (Note 1). 73A, Symbol = TB2B. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Characteristic = Last Clock Edge of Byte 1 to the First Clock Edge of Byte 2. 73A, Min = 1.5 TCY + 40. 73A, Max = GLYPH<151>. 73A, Units = ns. 73A, Conditions = (Note 2). 74, Symbol = TSCH2DIL,",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nTSCL2DIL. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Characteristic = Hold Time of SDI Data Input to SCK Edge. 74, Min = 100. 74, Max = GLYPH<151>. 74, Units = ns. 74, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 F XX20. 75, Min = GLYPH<151>. 75, Max = 25. 75, Units = ns. 75, Conditions = . 75, Symbol = TDOR. 75, Characteristic = SDO Data Output Rise Time. 75, Characteristic = PIC18 LF XX20. 75, Min = . 75, Max = 45. 75, Units = ns. 75, Conditions = . 76, Symbol = TDOF. 76, Characteristic = SDO Data Output Fall Time. 76, Characteristic = SDO Data Output Fall Time. 76, Min = GLYPH<151>. 76, Max = 25. 76, Units = ns. 76, Conditions = . 77, Symbol = TSSH2DOZ.",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\n77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Characteristic = SS \u2191 to SDO Output High-Impedance. 77, Min = 10. 77, Max = 50. 77, Units = ns. 77, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 F XX20. 78, Min = GLYPH<151>. 78, Max = 25. 78, Units = ns. 78, Conditions = . 78, Symbol = TSCR. 78, Characteristic = SCK Output Rise Time (Master mode). 78, Characteristic = PIC18 LF XX20. 78, Min = GLYPH<151>. 78, Max = 45. 78, Units = ns. 78, Conditions = . 79, Symbol = TSCF. 79, Characteristic = SCK Output Fall Time (Master mode). 79, Characteristic = SCK Output Fall Time (Master mode). 79, Min = GLYPH<151>. 79, Max = 25. 79, Units = ns. 79, Conditions = . 80, Symbol =",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nTSCH2DOV, TSCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 F XX20. 80, Min = GLYPH<151>. 80, Max = 50. 80, Units = ns. 80, Conditions = . 80, Symbol = TSCH2DOV, TSCL2DOV. 80, Characteristic = SDO Data Output Valid after SCK Edge. 80, Characteristic = PIC18 LF XX20. 80, Min = GLYPH<151>. 80, Max = 100. 80, Units = ns. 80, Conditions = . 82, Symbol = TSSL2DOV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 F XX20. 82, Min = GLYPH<151>. 82, Max = 50. 82, Units = ns. 82, Conditions = . 82, Symbol = TSSL2DOV. 82, Characteristic = SDO Data Output Valid after SS \u2193 Edge. 82, Characteristic = PIC18 LF XX20. 82, Min =",
    "TABLE 26-17: EXAMPLE SPI SLAVE MODE REQUIREMENTS (CKE = 1\nGLYPH<151>. 82, Max = 100. 82, Units = ns. 82, Conditions = . 83, Symbol = TscH2ssH, TscL2ssH. 83, Characteristic = SS \u2191 after SCK edge. 83, Characteristic = SS \u2191 after SCK edge. 83, Min = 1.5 TCY + 40. 83, Max = GLYPH<151>. 83, Units = ns. 83, Conditions = \nNote 1: Requires the use of Parameter # 73A.\n2: Only if Parameter # 71A and # 72A are used.",
    "TABLE 26-18: I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\n90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4700. 90, Max = GLYPH<151>. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. , Symbol = . , Characteristic = . , Characteristic = 400 kHz mode. , Min = 600. , Max = GLYPH<151>. , Units = . , Conditions = . 91, Symbol = THD:STA. 91, Characteristic = Start Condition. 91, Characteristic = 100 kHz mode. 91, Min = 4000. 91, Max = GLYPH<151>. 91, Units = ns. 91, Conditions = After this period, the first. , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = GLYPH<151>. , Units = . , Conditions = clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition. 92, Characteristic = 100 kHz mode. 92, Min =",
    "TABLE 26-18: I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS (SLAVE MODE)\n4700. 92, Max = GLYPH<151>. 92, Units = ns. 92, Conditions = . , Symbol = . , Characteristic = Setup Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = GLYPH<151>. , Units = . , Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Stop Condition. 93, Characteristic = 100 kHz mode. 93, Min = 4000. 93, Max = GLYPH<151>. 93, Units = ns. 93, Conditions = . , Symbol = . , Characteristic = Hold Time. , Characteristic = 400 kHz mode. , Min = 600. , Max = GLYPH<151>. , Units = . , Conditions = ",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 4.0. 100, Max = GLYPH<151>. 100, Units = \u03bc s. 100, Conditions = PIC18FXX20 must operate at a minimum of 1.5 MHz. 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 0.6. 100, Max = GLYPH<151>. 100, Units = \u03bc s. 100, Conditions = PIC18FXX20 must operate at a minimum of 10 MHz. 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = MSSP module. 100, Min = 1.5 TCY. 100, Max = GLYPH<151>. 100, Units = . 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 4.7. 101, Max = GLYPH<151>. 101, Units = \u03bc s.",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n101, Conditions = PIC18FXX20 must operate at a minimum of 1.5 MHz. 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 1.3. 101, Max = GLYPH<151>. 101, Units = \u03bc s. 101, Conditions = PIC18FXX20 must operate at a minimum of 10 MHz. 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = MSSP module. 101, Min = 1.5 TCY. 101, Max = GLYPH<151>. 101, Units = . 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = GLYPH<151>. 102, Max = 1000. 102, Units = ns. 102, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 + 0.1 CB. 102, Max =",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = GLYPH<151>. 103, Max = 300. 103, Units = ns. 103, Conditions = . 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 4.7. 90, Max = GLYPH<151>. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode.",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n90, Min = 0.6. 90, Max = GLYPH<151>. 90, Units = \u03bc s. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 4.0. 91, Max = GLYPH<151>. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 0.6. 91, Max = GLYPH<151>. 91, Units = \u03bc s. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = GLYPH<151>. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT.",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = \u03bc s. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode. 107, Min = 250. 107, Max = GLYPH<151>. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = GLYPH<151>. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 4.7. 92, Max = GLYPH<151>. 92, Units = \u03bc s. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time.",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\n92, Characteristic = 400 kHz mode. 92, Min = 0.6. 92, Max = GLYPH<151>. 92, Units = \u03bc s. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = GLYPH<151>. 109, Max = 3500. 109, Units = ns. 109, Conditions = (Note 1). 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = GLYPH<151>. 109, Max = GLYPH<151>. 109, Units = ns. 109, Conditions = (Note 1). 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = GLYPH<151>. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\nTime. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = GLYPH<151>. 110, Units = \u03bc s. 110, Conditions = Time the bus must be free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = GLYPH<151>. D102, Max = 400. D102, Units = pF. D102, Conditions = ",
    "TABLE 26-19: I 2 CGLYPH<153> BUS DATA REQUIREMENTS (SLAVE MODE)\nNote 1: As a transmitter, the device must provide this internal minimum delay time to bridge the undefined region (min. 300 ns) of the falling edge of SCL to avoid unintended generation of Start or Stop conditions.\n2: A fast mode I 2 C bus device can be used in a standard mode I 2 C bus system but the requirement, TSU:DAT \u2265 250 ns, must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, TR max. + TSU:DAT = 1000 + 250 = 1250 ns (according to the standard mode I 2 C bus specification), before the SCL line is released.",
    "TABLE 26-20: MASTER SSP I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS\n\nNote 1: Maximum pin capacitance = 10 pF for all I 2 C pins.",
    "TABLE 26-20: MASTER SSP I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS\n90, Symbol = TSU:STA. 90, Characteristic = Start condition. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = GLYPH<151>. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Setup time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG + 1). 90, Max = GLYPH<151>. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Setup time. 90, Characteristic = 1 MHz mode (1). 90, Min = 2(T OSC)(BRG + 1). 90, Max = GLYPH<151>. 90, Units = ns. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start condition. 91, Characteristic =",
    "TABLE 26-20: MASTER SSP I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS\n100 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = GLYPH<151>. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Hold time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG + 1). 91, Max = GLYPH<151>. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Hold time. 91, Characteristic = 1 MHz mode (1). 91, Min = 2(T OSC)(BRG + 1). 91, Max = GLYPH<151>. 91, Units = ns. 91, Conditions = After this period, the first clock pulse is generated. 92, Symbol = TSU:STO. 92, Characteristic = Stop condition. 92, Characteristic = 100 kHz mode. 92, Min =",
    "TABLE 26-20: MASTER SSP I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS\n2(T OSC)(BRG + 1). 92, Max = GLYPH<151>. 92, Units = ns. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Setup time. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG + 1). 92, Max = GLYPH<151>. 92, Units = ns. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Setup time. 92, Characteristic = 1 MHz mode (1). 92, Min = 2(T OSC)(BRG + 1). 92, Max = GLYPH<151>. 92, Units = ns. 92, Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Stop condition. 93, Characteristic = 100 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = GLYPH<151>. 93, Units = ns. 93, Conditions = . 93, Symbol =",
    "TABLE 26-20: MASTER SSP I 2 CGLYPH<153> BUS START/STOP BITS REQUIREMENTS\nTHD:STO. 93, Characteristic = Hold time. 93, Characteristic = 400 kHz mode. 93, Min = 2(T OSC)(BRG + 1). 93, Max = GLYPH<151>. 93, Units = ns. 93, Conditions = . 93, Symbol = THD:STO. 93, Characteristic = Hold time. 93, Characteristic = 1 MHz mode (1). 93, Min = 2(T OSC)(BRG + 1). 93, Max = GLYPH<151>. 93, Units = ns. 93, Conditions = ",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\n100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 100 kHz mode. 100, Min = 2(T OSC)(BRG +1). 100, Max = GLYPH<151>. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 400 kHz mode. 100, Min = 2(T OSC)(BRG +1). 100, Max = GLYPH<151>. 100, Units = ms. 100, Conditions = . 100, Symbol = THIGH. 100, Characteristic = Clock High Time. 100, Characteristic = 1 MHz mode (1). 100, Min = 2(T OSC)(BRG +1). 100, Max = GLYPH<151>. 100, Units = ms. 100, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 100 kHz mode. 101, Min = 2(T OSC)(BRG +1). 101, Max = GLYPH<151>.",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\n101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 400 kHz mode. 101, Min = 2(T OSC)(BRG +1). 101, Max = GLYPH<151>. 101, Units = ms. 101, Conditions = . 101, Symbol = TLOW. 101, Characteristic = Clock Low Time. 101, Characteristic = 1 MHz mode (1). 101, Min = 2(T OSC)(BRG +1). 101, Max = GLYPH<151>. 101, Units = ms. 101, Conditions = . 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 100 kHz mode. 102, Min = GLYPH<151>. 102, Max = 1000. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 400 kHz mode. 102, Min = 20 +",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\n0.1 CB. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 102, Symbol = TR. 102, Characteristic = SDA and SCL Rise Time. 102, Characteristic = 1 MHzmode (1). 102, Min = GLYPH<151>. 102, Max = 300. 102, Units = ns. 102, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 100 kHz mode. 103, Min = GLYPH<151>. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol = TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 400 kHz mode. 103, Min = 20 + 0.1 CB. 103, Max = 300. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 103, Symbol",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\n= TF. 103, Characteristic = SDA and SCL Fall Time. 103, Characteristic = 1 MHzmode (1). 103, Min = GLYPH<151>. 103, Max = 100. 103, Units = ns. 103, Conditions = CB is specified to be from 10 to 400 pF. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 100 kHz mode. 90, Min = 2(T OSC)(BRG +1). 90, Max = GLYPH<151>. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 400 kHz mode. 90, Min = 2(T OSC)(BRG +1). 90, Max = GLYPH<151>. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 90, Symbol = TSU:STA. 90, Characteristic = Start Condition Setup Time. 90, Characteristic = 1",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\nMHzmode (1). 90, Min = 2(T OSC)(BRG +1). 90, Max = GLYPH<151>. 90, Units = ms. 90, Conditions = Only relevant for Repeated Start condition. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 100 kHz mode. 91, Min = 2(T OSC)(BRG +1). 91, Max = GLYPH<151>. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 400 kHz mode. 91, Min = 2(T OSC)(BRG +1). 91, Max = GLYPH<151>. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 91, Symbol = THD:STA. 91, Characteristic = Start Condition Hold Time. 91, Characteristic = 1 MHzmode (1). 91,",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\nMin = 2(T OSC)(BRG +1). 91, Max = GLYPH<151>. 91, Units = ms. 91, Conditions = After this period, the first clock pulse is generated. 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 100 kHz mode. 106, Min = 0. 106, Max = GLYPH<151>. 106, Units = ns. 106, Conditions = . 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 400 kHz mode. 106, Min = 0. 106, Max = 0.9. 106, Units = ms. 106, Conditions = . 106, Symbol = THD:DAT. 106, Characteristic = Data Input Hold Time. 106, Characteristic = 1 MHzmode (1). 106, Min = TBD. 106, Max = GLYPH<151>. 106, Units = ns. 106, Conditions = . 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 100 kHz mode.",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\n107, Min = 250. 107, Max = GLYPH<151>. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 400 kHz mode. 107, Min = 100. 107, Max = GLYPH<151>. 107, Units = ns. 107, Conditions = (Note 2). 107, Symbol = TSU:DAT. 107, Characteristic = Data Input Setup Time. 107, Characteristic = 1 MHzmode (1). 107, Min = TBD. 107, Max = GLYPH<151>. 107, Units = ns. 107, Conditions = (Note 2). 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 100 kHz mode. 92, Min = 2(T OSC)(BRG +1). 92, Max = GLYPH<151>. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\nTime. 92, Characteristic = 400 kHz mode. 92, Min = 2(T OSC)(BRG +1). 92, Max = GLYPH<151>. 92, Units = ms. 92, Conditions = . 92, Symbol = TSU:STO. 92, Characteristic = Stop Condition Setup Time. 92, Characteristic = 1 MHzmode (1). 92, Min = 2(T OSC)(BRG +1). 92, Max = GLYPH<151>. 92, Units = ms. 92, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 100 kHz mode. 109, Min = GLYPH<151>. 109, Max = 3500. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid from Clock. 109, Characteristic = 400 kHz mode. 109, Min = GLYPH<151>. 109, Max = 1000. 109, Units = ns. 109, Conditions = . 109, Symbol = TAA. 109, Characteristic = Output Valid",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\nfrom Clock. 109, Characteristic = 1 MHzmode (1). 109, Min = GLYPH<151>. 109, Max = GLYPH<151>. 109, Units = ns. 109, Conditions = . 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 100 kHz mode. 110, Min = 4.7. 110, Max = GLYPH<151>. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 400 kHz mode. 110, Min = 1.3. 110, Max = GLYPH<151>. 110, Units = ms. 110, Conditions = Time the bus must be free before a new transmission can start. 110, Symbol = TBUF. 110, Characteristic = Bus Free Time. 110, Characteristic = 1 MHzmode (1). 110, Min = TBD. 110, Max = GLYPH<151>. 110, Units = ms. 110, Conditions = Time the bus must",
    "TABLE 26-21: MASTER SSP I 2 CGLYPH<153> BUS DATA REQUIREMENTS\nbe free before a new transmission can start. D102, Symbol = CB. D102, Characteristic = Bus Capacitive Loading. D102, Characteristic = Bus Capacitive Loading. D102, Min = GLYPH<151>. D102, Max = 400. D102, Units = pF. D102, Conditions = \nNote\n1: Maximum pin capacitance = 10 pF for all I 2 C pins.\n2: A fast mode I 2 C bus device can be used in a standard mode I 2 C bus system, but parameter #107 \u2265 250 ns, must then be met. This will automatically be the case if the device does not stretch the LOW period of the SCL signal. If such a device does stretch the LOW period of the SCL signal, it must output the next data bit to the SDA line, parameter #102 + parameter #107 = 1000 + 250 = 1250 ns (for 100 kHz mode), before the SCL line is released.",
    "TABLE 26-22: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n120, Symbol = TCKH2DTV. 120, Characteristic = SYNC XMIT (MASTER & SLAVE) Clock High to Data Out Valid. 120, Characteristic = PIC18 F XX20. 120, Min = GLYPH<151>. 120, Max = 40. 120, Units = ns. 120, Conditions = . 120, Symbol = TCKH2DTV. 120, Characteristic = . 120, Characteristic = PIC18 LF XX20. 120, Min = GLYPH<151>. 120, Max = 100. 120, Units = ns. 120, Conditions = . 121, Symbol = TCKRF. 121, Characteristic = Clock Out Rise Time and Fall Time. 121, Characteristic = PIC18 F XX20. 121, Min = GLYPH<151>. 121, Max = 20. 121, Units = ns. 121, Conditions = . 121, Symbol = TCKRF. 121, Characteristic = (Master mode). 121, Characteristic = PIC18 LF XX20. 121, Min = GLYPH<151>. 121, Max = 50. 121, Units = ns. 121, Conditions = . 122, Symbol = TDTRF.",
    "TABLE 26-22: USART SYNCHRONOUS TRANSMISSION REQUIREMENTS\n122, Characteristic = Data Out Rise Time and Fall Time. 122, Characteristic = PIC18 F XX20. 122, Min = GLYPH<151>. 122, Max = 20. 122, Units = ns. 122, Conditions = . 122, Symbol = TDTRF. 122, Characteristic = . 122, Characteristic = PIC18 LF XX20. 122, Min = GLYPH<151>. 122, Max = 50. 122, Units = ns. 122, Conditions = ",
    "TABLE 26-23: USART SYNCHRONOUS RECEIVE REQUIREMENTS\n125, Symbol = TDTV2CKL. 125, Characteristic = SYNC RCV (MASTER & SLAVE) Data Hold before CK \u2193 (DT hold time). 125, Min = 10. 125, Max = GLYPH<151>. 125, Units = ns. 125, Conditions = . 126, Symbol = TCKL2DTL. 126, Characteristic = Data Hold after CK \u2193 (DT hold time). 126, Min = 15. 126, Max = GLYPH<151>. 126, Units = ns. 126, Conditions = ",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nPIC18F2220/2320/4220/4320 (EXTENDED)\nPIC18LF2220/2320/4220/4320 (INDUSTRIAL)",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nA01, Symbol = NR. A01, Characteristic = Resolution. A01, Characteristic = Resolution. A01, Min = GLYPH<151>. A01, Typ = GLYPH<151>. A01, Max = 10. A01, Units = bit. A01, Conditions = \u0394 VREF \u2265 3.0V. A03, Symbol = EIL. A03, Characteristic = Integral Linearity Error. A03, Characteristic = Integral Linearity Error. A03, Min = GLYPH<151>. A03, Typ = GLYPH<151>. A03, Max = <-1. A03, Units = LSb. A03, Conditions = \u0394 VREF \u2265 3.0V. A04, Symbol = EDL. A04, Characteristic = Differential Linearity Error. A04, Characteristic = Differential Linearity Error. A04, Min = GLYPH<151>. A04, Typ = GLYPH<151>.",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nA04, Max = <-1. A04, Units = LSb. A04, Conditions = \u0394 VREF \u2265 3.0V. A06, Symbol = EOFF. A06, Characteristic = Offset Error. A06, Characteristic = Offset Error. A06, Min = GLYPH<151>. A06, Typ = GLYPH<151>. A06, Max = <-1. A06, Units = LSb. A06, Conditions = \u0394 VREF \u2265 3.0V. A07, Symbol = EGN. A07, Characteristic = Gain Error. A07, Characteristic = Gain Error. A07, Min = GLYPH<151>. A07, Typ = GLYPH<151>. A07, Max = <-1. A07, Units = LSb. A07, Conditions = \u0394 VREF \u2265 3.0V. A10, Symbol = GLYPH<151>. A10, Characteristic =",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nMonotonicity. A10, Characteristic = Monotonicity. A10, Min = guaranteed (2). A10, Typ = guaranteed (2). A10, Max = guaranteed (2). A10, Units = GLYPH<151>. A10, Conditions = . A20, Symbol = \u0394 VREF. A20, Characteristic = Reference Voltage Range (VREFH GLYPH<150> VREFL). A20, Characteristic = Reference Voltage Range (VREFH GLYPH<150> VREFL). A20, Min = 3. A20, Typ = GLYPH<151>. A20, Max = AVDD GLYPH<150> AVSS. A20, Units = V. A20, Conditions = For 10-bit resolution. A21, Symbol = VREFH. A21, Characteristic = Reference Voltage High. A21, Characteristic = Reference Voltage High. A21, Min = AVSS + 3.0V. A21, Typ = GLYPH<151>. A21,",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nMax = AVDD + 0.3V. A21, Units = V. A21, Conditions = For 10-bit resolution. A22, Symbol = VREFL. A22, Characteristic = Reference Voltage Low. A22, Characteristic = Reference Voltage Low. A22, Min = AVSS GLYPH<150> 0.3V. A22, Typ = GLYPH<151>. A22, Max = AVDD GLYPH<150> 3.0V. A22, Units = V. A22, Conditions = For 10-bit resolution. A25, Symbol = VAIN. A25, Characteristic = Analog Input Voltage. A25, Characteristic = Analog Input Voltage. A25, Min = VREFL. A25, Typ = GLYPH<151>. A25, Max = VREFH. A25, Units = V. A25, Conditions = . A28, Symbol = AVDD. A28, Characteristic = Analog Supply Voltage. A28, Characteristic = Analog Supply Voltage. A28, Min = VDD",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nGLYPH<150> 0.3. A28, Typ = GLYPH<151>. A28, Max = VDD + 0.3. A28, Units = V. A28, Conditions = Tie to VDD. A29, Symbol = AVSS. A29, Characteristic = Analog Supply Voltage. A29, Characteristic = Analog Supply Voltage. A29, Min = VSS GLYPH<150> 0.3. A29, Typ = GLYPH<151>. A29, Max = VSS + 0.3. A29, Units = V. A29, Conditions = Tie to VSS. A30, Symbol = ZAIN. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Characteristic = Recommended Impedance of Analog Voltage Source. A30, Min = GLYPH<151>. A30, Typ = GLYPH<151>. A30, Max = 2.5 (4). A30, Units = k \u03a9. A30, Conditions = . A40, Symbol =",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nI AD. A40, Characteristic = A/D Current from VDD. A40, Characteristic = PIC18 F XX20. A40, Min = GLYPH<151>. A40, Typ = GLYPH<151>. A40, Max = 180 (5). A40, Units = \u03bc A. A40, Conditions = Average current during conversion (1). A40, Symbol = I AD. A40, Characteristic = A/D Current from VDD. A40, Characteristic = PIC18 LF XX20. A40, Min = GLYPH<151>. A40, Typ = GLYPH<151>. A40, Max = 90 (5). A40, Units = \u03bc A. A40, Conditions = Average current during conversion (1). A50, Symbol = I REF. A50, Characteristic = VREF Input Current (3). A50, Characteristic = VREF Input Current (3). A50, Min = GLYPH<151> GLYPH<151>. A50,",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nTyp = GLYPH<151> GLYPH<151>. A50, Max = -5 (5) -150 (5). A50, Units = \u03bc A \u03bc A. A50, Conditions = During VAIN acquisition. During A/D conversion cycle.",
    "TABLE 26-24: A/D CONVERTER CHARACTERISTICS: PIC18F2220/2320/4220/4320 (INDUSTRIAL)\nNote 1: When A/D is off, it will not consume any current other than minor leakage current. The power-down current spec includes any such leakage from the A/D module.\n2: The A/D conversion result never decreases with an increase in the input voltage and has no missing codes.\n3: VREFH current is from RA3/AN3/VREF+ pin or AVDD, whichever is selected as the VREFH source. VREFL current is from RA2/AN2/VREF- pin or AVSS, whichever is selected as the VREFL source.\n4: Assume quiet environment. If adjacent pins have high-frequency signals (analog or digital), ZAIN may need to be reduced to as low as 1 k \u03a9 to fight crosstalk effects.\n5: For guidance only.",
    "FIGURE 26-23: A/D CONVERSION TIMING\nNote 1: If the A/D clock source is selected as RC, a time of TCY is added before the A/D clock starts. This allows the SLEEP instruction to be executed.\n2: This is a minimal RC delay (typically 100 ns), which also disconnects the holding capacitor from the analog input.",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\n130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XX20. 130, Min = 1.6. 130, Max = 20 (2). 130, Units = \u03bc s. 130, Conditions = TOSC based, VREF \u2265 3.0V. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XX20. 130, Min = 3.0. 130, Max = 20 (2). 130, Units = \u03bc s. 130, Conditions = TOSC based, VREF full range. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 F XX20. 130, Min = 2.0. 130, Max = 6.0. 130, Units = \u03bc s. 130, Conditions = A/D RC mode. 130, Symbol = TAD. 130, Characteristic = A/D Clock Period. 130, Characteristic = PIC18 LF XX20. 130, Min = 3.0. 130, Max = 9.0. 130, Units = \u03bc s. 130, Conditions = A/D",
    "TABLE 26-25: A/D CONVERSION REQUIREMENTS\nRC mode. 131, Symbol = TCNV. 131, Characteristic = Conversion Time (not including acquisition time) (1). 131, Characteristic = Conversion Time (not including acquisition time) (1). 131, Min = 11. 131, Max = 12. 131, Units = TAD. 131, Conditions = \nNote 1: ADRES register may be read on the following TCY cycle.\n2: The time of the A/D clock period is dependent on the device frequency and the TAD clock divider.",
    "27.0 DC AND AC CHARACTERISTICS GRAPHS AND TABLES\nNote:\nThe graphs and tables provided following this note are a statistical summary based on a limited number of samples and are provided for informational purposes only. The performance characteristics listed herein are not tested or guaranteed. In some graphs or tables, the data presented may be outside the specified operating range (e.g., outside specified power supply range) and therefore, outside the warranted range.\nGLYPH<147>T ypicalGLYPH<148>  represents the mean of the distribution at 25 \u00b0 C. GLYPH<147>MaximumGLYPH<148> or GLYPH<147>minimumGLYPH<148> represents (mean + 3 \u03c3 ) or (mean GLYPH<150> 3 \u03c3 ) respectively, where \u03c3 is a standard deviation, over the whole temperature range.",
    "FIGURE 27-1: TYPICAL IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, +25GLYPH<176>C\n0.4, 1 = Typical: statistical mean @25GLYPH<176>C Maximum: mean + 3 \u03c3 (-40GLYPH<176>C to +125GLYPH<176>C) Minimum: mean GLYPH<150> 3 \u03c3 (-40GLYPH<176>C to +125GLYPH<176>C). 0.3 I DD (mA), 1 = 0.2 4.0V 4.5V 3.5V. 0.1, 1 = 2.5V. , 1 = 2.0V. , 1 = 0.0 0.00 0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.18 0.20. FOSC (MHz), 1 = ",
    "FIGURE 27-2: MAXIMUM IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, -40GLYPH<176>C TO +85GLYPH<176>C\n0.6 0.7, 1 = Typical: statistical mean @25GLYPH<176>C Maximum: mean + 3 \u03c3 (-40GLYPH<176>C to +125GLYPH<176>C) Minimum: mean GLYPH<150> 3 \u03c3 (-40GLYPH<176>C to +125GLYPH<176>C). 0.6 0.7, 2 = 5.5V. 0.6 0.7, 3 = . 0.6 0.7, 4 = . 0.6 0.7, 5 = . 0.6 0.7, 6 = . 0.5, 1 = . 0.5, 2 = . 0.5, 3 = 4.5V. 0.5, 4 = 5.0V. 0.5, 5 = . 0.5, 6 = . 0.2 0.3, 1 = . 0.2 0.3, 2 = . 0.2 0.3, 3 = 4.0V.",
    "FIGURE 27-2: MAXIMUM IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, -40GLYPH<176>C TO +85GLYPH<176>C\n0.2 0.3, 4 = 3.0V 3.5V. 0.2 0.3, 5 = . 0.2 0.3, 6 = . 0.1, 1 = . 0.1, 2 = . 0.1, 3 = . 0.1, 4 = . 0.1, 5 = . 0.1, 6 = . 0.0 0.00 0.04 0.06 0.08 0.10, 1 = 0.02. 0.0 0.00 0.04 0.06 0.08 0.10, 2 = . 0.0 0.00 0.04 0.06 0.08 0.10, 3 = 2.0V. 0.0 0.00 0.04 0.06 0.08 0.10, 4 = . 0.0 0.00 0.04 0.06 0.08 0.10, 5 = 0.16 0.18. 0.0 0.00 0.04 0.06",
    "FIGURE 27-2: MAXIMUM IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, -40GLYPH<176>C TO +85GLYPH<176>C\n0.08 0.10, 6 = 0.20. FOSC (MHz), 1 = . FOSC (MHz), 2 = . FOSC (MHz), 3 = . FOSC (MHz), 4 = . FOSC (MHz), 5 = . FOSC (MHz), 6 = ",
    "FIGURE 27-3: MAXIMUM IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, -40GLYPH<176>C TO +125GLYPH<176>C\nFIGURE 27-4: TYPICAL IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, +25GLYPH<176>C",
    "PIC18F2220/2320/4220/4320\nFIGURE 27-5: MAXIMUM IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, -40GLYPH<176>C TO +125GLYPH<176>C\nFIGURE 27-6: TYPICAL IDD vs. FOSC OVER VDD PRI_RUN, EC MODE, +25GLYPH<176>C\nFIGURE 27-8: TYPICAL IDD vs. FOSC OVER VDD PRI_IDLE, EC MODE, +25GLYPH<176>C\nFIGURE 27-10: MAXIMUM IDD vs. FOSC OVER VDD PRI_IDLE, EC MODE, -40GLYPH<176>C TO +125GLYPH<176>C\nFIGURE 27-11: TYPICAL IDD vs. FOSC OVER VDD PRI_IDLE, EC MODE, +25GLYPH<176>C yp _\nFIGURE 27-12: MAXIMUM IDD vs. FOSC OVER VDD PRI_IDLE, EC MODE, -40GLYPH<176>C TO +125GLYPH<176>C",
    "PIC18F2220/2320/4220/4320\nFIGURE 27-14: MAXIMUM IDD vs. FOSC OVER VDD PRI_IDLE, EC MODE, -40GLYPH<176>C TO +125GLYPH<176>C\nFIGURE 27-15: TYPICAL IPD vs. VDD (+25GLYPH<176>C), 125 kHz TO 8 MHz RC_RUN MODE, ALL PERIPHERALS DISABLED\nFIGURE 27-16: MAXIMUM IPD vs. VDD (-40GLYPH<176>C TO +125GLYPH<176>C), 125 kHz TO 8 MHz RC_RUN, ALL PERIPHERALS DISABLED\nFIGURE 27-17: TYPICAL AND MAXIMUM IPD vs. VDD (-40GLYPH<176>C TO +125GLYPH<176>C), 31.25 kHz RC_RUN, ALL PERIPHERALS DISABLED\nFIGURE 27-18: TYPICAL IPD vs. VDD (+25GLYPH<176>C), 125 kHz TO 8 MHz RC_IDLE MODE, ALL PERIPHERALS DISABLED",
    "PIC18F2220/2320/4220/4320\nFIGURE 27-19: MAXIMUM IPD vs. VDD (-40GLYPH<176>C TO +125GLYPH<176>C), 125 kHz TO 8 MHz RC_IDLE, ALL PERIPHERALS DISABLED\nFIGURE 27-20: TYPICAL AND MAXIMUM IPD vs. VDD (-40GLYPH<176>C TO +125GLYPH<176>C), 31.25 kHz RC_IDLE, ALL PERIPHERALS DISABLED\nFIGURE 27-21: IPD SEC_RUN MODE, -10GLYPH<176>C TO +70GLYPH<176>C 32.768 kHz XTAL 2 X 22 pF, ALL PERIPHERALS DISABLED\nFIGURE 27-22: IPD SEC_IDLE, -10GLYPH<176>C TO +70GLYPH<176>C 32.768 kHz 2 X 22 pF, ALL PERIPHERALS DISABLED\nFIGURE 27-23: TOTAL IPD, -40GLYPH<176>C TO +125GLYPH<176>C SLEEP MODE, ALL PERIPHERALS DISABLED",
    "PIC18F2220/2320/4220/4320\nFIGURE 27-24: VOH vs. IOH OVER TEMPERATURE (-40GLYPH<176>C TO +125GLYPH<176>C), VDD = 3.0V\nFIGURE 27-26: VOL vs. IOL OVER TEMPERATURE (-40GLYPH<176>C TO +125GLYPH<176>C), VDD = 3.0V ( )\nFIGURE 27-28: \u0394 IPD TIMER1 OSCILLATOR, -10GLYPH<176>C TO +70GLYPH<176>C SLEEP MODE, TMR1 COUNTER DISABLED\nFIGURE 27-29: \u0394 IPD FSCM vs. VDD OVER TEMPERATURE PRI_IDLE, EC OSCILLATOR AT 32 kHz, -40GLYPH<176>C TO +125GLYPH<176>C\nFIGURE 27-30: \u0394 IPD WDT, -40GLYPH<176>C TO +125GLYPH<176>C SLEEP MODE, ALL PERIPHERALS DISABLED\nFIGURE 27-31: \u0394 IPD LVD vs. VDD SLEEP MODE, LVD = 2.00V-2.12V",
    "PIC18F2220/2320/4220/4320\nFIGURE 27-32: \u0394 IPD BOR vs. VDD, -40GLYPH<176>C TO +125GLYPH<176>C SLEEP MODE, BOR ENABLED AT 2.00V-2.16V\n\u0394\nFIGURE 27-34: AVERAGE FOSC vs. VDD FOR VARIOUS RGLYPH<146>S EXTERNAL RC MODE, C = 20 pF, TEMPERATURE = +25GLYPH<176>C\nFIGURE 27-35:\nAVERAGE FOSC vs. VDD FOR VARIOUS RGLYPH<146>S EXTERNAL RC MODE,\nC = 100 pF, TEMPERATURE = +25GLYPH<176>C\nFIGURE 27-36: AVERAGE FOSC vs. VDD FOR VARIOUS RGLYPH<146>S EXTERNAL RC MODE, C = 300 pF, TEMPERATURE = +25GLYPH<176>C",
    "Legend:\nXX...X\nCustomer-specific information\nY\nYY\nWW\nYear code (last digit of calendar year)\nYear code (last 2 digits of calendar year)\nWeek code (week of January 1 is week GLYPH<145>01GLYPH<146>)\nAlphanumeric traceability code\nPb-free JEDEC designator for Matte Tin (Sn)\n*\nThis package is Pb-free. The Pb-free JEDEC designator (     ) can be found on the outer packaging for this package. 3 e",
    "Note :\nIn the event the full Microchip part number cannot be marked on one line, it will be  carried  over  to  the  next  line,  thus  limiting  the  number  of  available characters for customer-specific information.",
    "44-Lead TQFP\n44-Lead QFN\nExample",
    "28.2 Package Details\nThe following sections give the technical details of the packages.",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g49/g82/g87/g72/g29",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng3/g70/g88/g85/g85/g72/g81/g87/g3/g83/g68/g70",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng78/g68/g74/g72/g3/g71/g85/g68/g90/g76/g81/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng74/g86/g15/g3/g83/g79/g72/g68/g86/g72/g3/g86",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng72/g72/g3/g87/g75/g72/g3/g48/g76/g70/g85/g82",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/\ng70/g75/g76/g83/g3/g51/g68/g70/g78/g68/g74/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng76/g81/g74/g3/g54",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng82/g81/g3/g79/g82/g70/g68/g87/g72/g71/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng68/g87/g3",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng82/g80/g18/g83/g68/g70/g78/g68/g74/g76/g81/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g54/g78/g76/g81/g81/g92/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g54/g51/g12/g3/g177/g3/g22/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g54/g51/g39/g44/g51/g64\ng74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g21/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g21/g27. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g21/g27. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g19/g19/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g19/g19/g3/g37/g54/g38. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g55 /g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g19/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g22/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g24/g19. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g20/g24. /g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g177. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g21/g28/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g22/g20/g19. /g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g22/g22/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g21/g23/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g21/g27/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g28/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g20/g17/g22/g23/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g20/g17/g22/g25/g24. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g20/g17/g23/g19/g19. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20 /g20/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g20/g22/g19. /g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g24/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g19/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g20/g19. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g20/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69/g20. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g17/g19/g23/g19. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g24/g19. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g26/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g17/g19/g20/g23. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g17/g19/g20/g27. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g21/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72/g37.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/g3/g134, /g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g23/g22/g19",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g17/g19/g20/g19/g5/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g26/g19/g37",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g49/g82/g87/g72/g29",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng70/g88/g85/g85/g72/g81/g87/g3/g83/g68/g70/g78/g68",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng74/g72/g3/g71/g85/g68/g90/g76/g81/g74/g86/g15/g3/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng83/g79/g72/g68/g86/g72/g3/g86/g72/g72/g3/g87/g75",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/\ng72/g3/g48/g76/g70/g85/g82/g70/g75/g76/g83/g3/g51/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng68/g70/g78/g68/g74/g76/g81/g74/g3/g54",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/g82/g81",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/\ng3/g79/g82/g70/g68/g87/g72/g71/g3/g68/g87/g3",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/g82/",
    "/g21/g27/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g54/g80/g68/g79/g79/g3/g50/g88/g87/g79/g76/g81/g72/g3/g11/g54/g50/g12/g3/g177/g3/g58/g76/g71/g72/g15/g3/g26/g17/g24/g19/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g54/g50/g44/g38/g64\ng80/g18/g83/g68/g70/g78/g68/g74/g76/g81/g74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g21/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g21/g27. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g21/g27. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g21/g26/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17/g21/g26/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g26/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g21/g17/g25/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g21/g17/g19/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g20/g19. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3/g134, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g22/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g22/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g19/g17/g22/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g26/g17/g24/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g26/g17/g24/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g26/g17/g24/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g26/g17/g28/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g26/g17/g28/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g26/g17/g28/g19/g3/g37/g54/g38. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g75.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g24. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g177. /g38/g75/g68/g80/g73/g72/g85/g3/g11/g82/g83/g87/g76/g82/g81/g68/g79/g12, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g26/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g23/g19. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g26. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47/g20. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g23/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55",
    "/g49/g82/g87/g72/g86/g29\n/g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g27/g131. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g20/g27.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g22.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g24/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g24/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g24/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g24/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g24/g131\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g19/g17/g20/g24/g3/g80/g80/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g24/g21/g37",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g49/g82/g87/g72/g29",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g41/g82/g85/g3/g87/g75/g72/g3/g80/g82/g86/g87/g3/g70/g88/g85/g85/g72/g81/g87/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng83/g68/g70/g78/g68/g74/g72/g3/g71/g85/g68/g90/g76/g81/g74/g86/g15/g3/g83/g79/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72/g68/g86/g72/g3/g86/g72/g72/g3/g87/g75/g72/g3/g48/g76/g70/g85/g82/g70/g75/g76/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng83/g3/g51/g68/g70/g78/g68/g74/g76/g81/g74/g3/g54",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g83/g72/g70/g76/g73/g76/g70/g68/g87/g76/g82/g81/g3/g79/g82/g70/g68/g87/g72/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng71/g3/g68/g87/g3\n/g75/g87/g87/g83/g29/g18/g18/g90/g90/g90",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/g76/g83/g17/g70/g82/g80/g18/g83/g68/g70/g78/g68/g74",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng76/g81/g74\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g23/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g23/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g23/g19. /g51/g76/g87/g70/g75,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g72. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g44/g49 =",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g17/g20/g19/g19/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g49/g50/g48 =",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g17/g20/g19/g19/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g44/g49/g38/g43/g40/g54./g48/g36/g59 =",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g17/g20/g19/g19/g3/g37/g54/g38. /g55",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g36. /g55",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177. /g55",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177. /g55",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g82/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/g72,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g24/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng81/g72/g86/g86,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g36/g21.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng81/g72/g86/g86,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20/g21/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng81/g72/g86/g86,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng81/g72/g86/g86,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g20/g28/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng72,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g36/g20.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng72,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g20/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng72,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g37/g68/g86/g72/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng72,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g58/g76/g71/g87/g75,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g40.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g58/g76/g71/g87/g75,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g24/g28/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g58/g76/g71/g87/g75,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g54/g75/g82/g88/g79/g71/g72/g85/g3/g87/g82/g3/g54/g75/g82/g88/g79/g71/g72/g85/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g58/g76/g71/g87/g75,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g25/g21/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g40/g20.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g23/g27/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g24/g27/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g20/g17/g28/g27/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g21/g17/g19/g28/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g47.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g20 /g20/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g55/g76/g83/g3/g87/g82/g3/g54/g72/g68/g87/g76/g81/g74/g3/g51/g79/g68/g81/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng72,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g21/g19/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g19/g27.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g20/g24.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g69/g20. /g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g22/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g83/g83/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g26/g19.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n= /g69. /g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g17/g19/g20/g23.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g47/g82/g90/g72/g85/g3/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75,",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g19/g21/g22.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g134,\n/g56/g81/g76/g87/g86.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86\n= /g72/g37.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g134,\n/g44/g49/g38/g43/g40/g54./g48/g44/g49 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g134,\n/g44/g49/g38/g43/g40/g54./g49/g50/g48 = /g177.",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g50/g89/g72/g85/g68/g79/g79/g3/g53/g82/g90/g3/g54/g83/g68/g70/g76/g81/g74/g3/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng3/g134,\n/g44/g49/g38/g43/g40/g54./g48/g36/g59 = /g17/g26/g19/g19\n- /g20/g17",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\ng71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3",
    "/g23/g19/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g39/g88/g68/g79/g3/g44/g81/g16/g47/g76/g81/g72/g3/g11/g51/g12/g3/g177/g3/g25/g19/g19/g3/g80/g76/g79/g3/g37/g82/g71/g92/g3/g62/g51/g39/g44/g51/g64\n/\ng68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g134/g3/g54/g76/g74/g81/g76/g73/g76/g70/g68/g81/g87/g3/g38/g75/g68/g85/g68/g70/g87/g72/g85/g76/g86/g87/g76/g70/g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/g71",
    "/g49/g82/g87/g72/g86/g29\n/\ng3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g17/g19/g20/g19/g5/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g20/g25/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g49/g82/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g41/g82/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g87/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g3/g80/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng82/g86/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g70/g88/g85",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng85/g72/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g74/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g71/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g90/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng81/g74/g86/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng15/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng79/g72/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng86/g72/g3/g86",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng72/g72/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g75/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g48/g76/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng85/g82/g70/g75",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng76/g83/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng51/g68/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng78/g68/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g81/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g83/g72/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g73/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g82/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g79/g82/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g75/g87/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng83/g29/g18/g18",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng90/g90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g17/g80/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g85/g82/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng75/g76/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng17/g70/g82/g80",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng18/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g78/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74\nc",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g47/g72/g68/g71/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g23.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g27/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g27/g19/g3/g37/g54/g38. /g47/g72/g68/g71/g3/g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g27/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g177.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g28/g24. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g19/g19. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g54/g87/g68/g81/g71/g82/g73/g73/g3/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g20/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g23/g24. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g25/g19. /g41/g82/g82/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g26/g24. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47/g20. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g83/g85/g76/g81/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g19/g3/g53/g40/g41. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g73. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g22/g17/g24/g131. /g41/g82/g82/g87/g3/g36/g81/g74/g79/g72, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g26/g131. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g21/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g21/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g20. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39/g20.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g19/g17/g19/g19/g3/g37/g54/g38. /g48/g82/g79/g71/g72/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g19/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g70. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 =",
    "/g49/g82/g87/g72/g86/g29\n/g19/g17/g19/g28. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g47/g72/g68/g71/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g21/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g22/g26. /g47/g72/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g23/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g68. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20 /g20/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g55 /g82/g83, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g22/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g20 /g20/g131.",
    "/g49/g82/g87/g72/g86/g29\n/g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g20/g21/g131. /g48/g82/g79/g71/g3/g39/g85/g68/g73/g87/g3/g36/g81/g74/g79/g72/g3/g37/g82/g87/g87/g82/g80,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g22/g131\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g38/g75/g68/g80/g73/g72/g85/g86/g3/g68/g87/g3/g70/g82/g85/g81/g72/g85/g86/g3/g68/g85/g72/g3/g82/g83/g87/g76/g82/g81/g68/g79/g30/g3/g86/g76/g93/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92 /g17\n/g22/g17",
    "/g49/g82/g87/g72/g86/g29\n/g39/g76/g80/g72/g81/g86/g76/g82/g81/g86/g3/g39/g20/g3/g68/g81/g71/g3/g40/g20/g3/g71/g82/g3/g81/g82/g87/g3/g76/g81/g70/g79/g88/g71/g72/g3/g80/g82/g79/g71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g17/g3/g48/g82/g79/",
    "/g49/g82/g87/g72/g86/g29\ng71/g3/g73/g79/g68/g86/g75/g3/g82/g85/g3/g83/g85/g82/g87/g85/g88/g86/g76/g82/g81/g86/g3/g86/g75/g68/g79/g79/g3/g81/g82/g87/g3/g72/g91/g70/g72/g72/g71/g3/g19/g17/g21/g24/g3/g80/g80/g3/g83/g72/g85/g3/g86/g76/g71/g72/g17",
    "/g49/g82/g87/g72/g86/g29\n/g23/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g19/g26/g25/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g49/g82/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g41/g82/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g87/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g3/g80/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng82/g86/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g70/g88/g85",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng85/g72/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g74/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g71/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g90/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng81/g74/g86/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng15/g3/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng79/g72/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng86/g72/g3/g86",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng72/g72/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng87/g75/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g48/g76/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng85/g82/g70/g75",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng76/g83/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng51/g68/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng78/g68/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g81/g74/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g83/g72/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g73/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng76/g82/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng3/g79/g82/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g68/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g75/g87/g87/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng83/g29/g18/g18",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng90/g90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/g17/g80/g76/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g85/g82/g70",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng75/g76/g83/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng17/g70/g82/g80",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\n/\ng18/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng70/g78/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g55/g75/g76/g81/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g83/g68/g70/g78/g3/g11/g51/g55/g12/g3/g177/g3/g20/g19/g91/g20/g19/g91/g20/g3/g80/g80/g3/g37/g82/g71/g92 /g15/g3/g21/g17/g19/g19/g3/g80/g80/g3/g62/g55/g52/g41/g51/g64\ng74",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g49/g82/g87/g72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g41/g82/g85/g3/g87/g75/g72/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng80/g82/g86/g87/g3/g70/g88/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g72/g81/g87/g3/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng70/g78/g68/g74/g72/g3/g71/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g68/g90/g76/g81/g74/g86/g15",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g83/g79/g72/g68/g86/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng3/g86/g72/g72/g3/g87/g75/g72",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g48/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g3/g51/g68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g74/g76/g81/g74/g3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g83/g72/g70/g76/g73/g76/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g76/g82/g81/g3/g79/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng82/g70/g68/g87/g72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g75/g87/g87/g83/g29/g18/g18/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g17/g70/g82/g80/g18/g83",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g70/g78/g68/g74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng74",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g49. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g23/g23.",
    "/g49/g82/g87/g72/g86/g29\n/g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g23/g23. /g49/g88/g80/g69/g72/g85/g3/g82/g73/g3/g51/g76/g81/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g23/g23. /g51/g76/g87/g70/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g72. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g19/g17/g25/g24/g3/g37/g54/g38. /g51/g76/g87/g70/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g25/g24/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g27/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g28/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g43/g72/g76/g74/g75/g87, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g20/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g20. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g19/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g19/g21. /g54/g87/g68/g81/g71/g82/g73/g73/g3, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g19/g24.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g36/g22/g19/g17/g21/g19/g3/g53/g40/g41. /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = . /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = . /g38/g82/g81/g87/g68/g70/g87/g3/g55/g75/g76/g70/g78/g81/g72/g86/g86,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = . /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g27/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g27/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g27/g17/g19/g19/g3/g37/g54/g38. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g40/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g22/g19. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g25/g17/g23/g24. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g25/g17/g27/g19. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g27/g17/g19/g19/g3/g37/g54/g38.",
    "/g49/g82/g87/g72/g86/g29\n/g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g27/g17/g19/g19/g3/g37/g54/g38. /g50/g89/g72/g85/g68/g79/g79/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 =",
    "/g49/g82/g87/g72/g86/g29\n/g27/g17/g19/g19/g3/g37/g54/g38. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g39/g21.",
    "/g49/g82/g87/g72/g86/g29\n/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g25/g17/g22/g19. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 =",
    "/g49/g82/g87/g72/g86/g29\n/g25/g17/g23/g24. /g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g25/g17/g27/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g69. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g24. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g22/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g58/g76/g71/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g22/g27. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75,",
    "/g49/g82/g87/g72/g86/g29\n/g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g47. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g22/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g19/g17/g23/g19. /g38/g82/g81/g87/g68/g70/g87/g3/g47/g72/g81/g74/g87/g75, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g19/g17/g24/g19.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g56/g81/g76/g87/g86./g39/g76/g80/g72/g81/g86/g76/g82/g81/g3/g47/g76/g80/g76/g87/g86 = /g46.",
    "/g49/g82/g87/g72/g86/g29\n/g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g44/g49 = /g19/g17/g21/g19. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71,",
    "/g49/g82/g87/g72/g86/g29\n/g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g49/g50/g48 = /g177. /g38/g82/g81/g87/g68/g70/g87/g16/g87/g82/g16/g40/g91/g83/g82/g86/g72/g71/g3/g51/g68/g71, /g48/g44/g47/g47/g44/g48/g40/g55/g40/g53/g54./g48/g36/g59 = /g177",
    "/g49/g82/g87/g72/g86/g29\n/g20/g17 /g51/g76/g81/g3/g20/g3/g89/g76/g86/g88/g68/g79/g3/g76/g81/g71/g72/g91/g3/g73/g72/g68/g87/g88/g85/g72/g3/g80/g68/g92/g3/g89/g68/g85/g92",
    "/g49/g82/g87/g72/g86/g29\n/g15/g3/g69/g88/g87/g3/g80/g88/g86/g87/g3/g69/g72/g3/g79/g82/g70/g68/g87/g72/g71/g3/g90/g76/g87/g75/g76/g81/g3/g87/g75/g72/g3/g75/g68/g87/g70/g75/g72/g71/g3/g68/g85/g72/g68/g17",
    "/g49/g82/g87/g72/g86/g29\n/g21/g17 /g51/g68/g70/g78/g68/g74/g72/g3/g76/g86/g3/g86/g68/g90/g3/g86/g76/g81/g74/g88/g79/g68/g87/g72/g71/g17",
    "/g49/g82/g87/g72/g86/g29\n/g22/g17 /g39/g76/g80/g72/g81/g86/g76/g82/g81/g76/g81/g74/g3/g68/g81/g71/g3/g87/g82/g79/g72/g85/g68/g81/g70/g76/g81/g74/g3/g83/g72/g85/g3/g36/g54/g48/g40/g3/g60/g20/g23/g17/g24/g48/g17\n/g37/g54/g38/g29",
    "/g49/g82/g87/g72/g86/g29\n/g37/g68/g86/g76/g70/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g17/g3/g55/g75/g72/g82/g85/g72/g87/g76/g70/g68/g79/g79/g92/g3/g72/g91/g68/g70/g87/g3/g89/g68/g79/g88/g72/g3/g86/g75/g82/g90/g81/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/",
    "/g49/g82/g87/g72/g86/g29\ng72/g86/g17\n/g53/g40/g41/g29",
    "/g49/g82/g87/g72/g86/g29\n/g53/g72/g73/g72/g85/g72/g81/g70/g72/g3/g39/g76/g80/g72/g81/g86/g76/g82/g81/g15/g3/g88/g86/g88/g68/g79/g79/g92/g3/g90/g76/g87/g75/g82/g88/g87/g3/g87/g82/g79/g72/g85/g68/g81/g70/g72/g15/g3/g73/g82/g85/g3/g76/g81/g73/g82/g85/g80/g68/g87/g76/g82/g81/g3/",
    "/g49/g82/g87/g72/g86/g29\ng83/g88/g85/g83/g82/g86/g72/g86/g3/g82/g81/g79/g92\n/g17\n/g48/g76/g70/g85/g82/g70/g75/g76/g83 /g55 /g72/g70/g75/g81/g82/g79/g82/g74/g92 /g39/g85/g68/g90/g76/g81/g74 /g38/g19/g23/g16/g20/g19/g22/g37",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g49/g82/g87/g72/g29",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g41/g82/g85/g3/g87/g75/g72/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng80/g82/g86/g87/g3/g70/g88/g85/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g72/g81/g87/g3/g83/g68/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng70/g78/g68/g74/g72/g3/g71/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng85/g68/g90/g76/g81/g74/g86/g15",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g83/g79/g72/g68/g86/g72/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng3/g86/g72/g72/g3/g87/g75/g72",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng3/g48/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g3/g51/g68/g70/g78/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g74/g76/g81/g74/g3/g54",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g83/g72/g70/g76/g73/g76/g70/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g76/g82/g81/g3/g79/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng82/g70/g68/g87/g72/g71/g3/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g87/g3",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g75/g87/g87/g83/g29/g18/g18/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/\ng90/g90",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/g17/g80/g76/g70/g85/g82/g70/g75/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng76/g83/g17/g70/g82/g80/g18/g83",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\n/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng68/g70/g78/g68/g74/g76/g81/",
    "/g23/g23/g16/g47/g72/g68/g71/g3/g51/g79/g68/g86/g87/g76/g70/g3/g52/g88/g68/g71/g3/g41/g79/g68/g87/g15/g3/g49/g82/g3/g47/g72/g68/g71/g3/g51/g68/g70/g78/g68/g74/g72/g3/g11/g48/g47/g12/g3/g177/g3/g27/g91/g27/g3/g80/g80/g3/g37/g82/g71/g92/g3/g62/g52/g41/g49/g64\ng74",
    "PIC18F2220/2320/4220/4320\nNOTES:",
    "Revision A (June 2002)\nOriginal data sheet for PIC18F2X20/4X20 devices.",
    "Revision B (October 2002)\nThis  revision  includes  major  changes  to Section 2.0 GLYPH<147>Oscillator ConfigurationsGLYPH<148> and Section 3.0 GLYPH<147>Power-Managed  ModesGLYPH<148> ,  updates to the Electrical Specifications in Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> and minor corrections to the data sheet text.",
    "Revision C (October 2003)\nThis revision includes updates to the Electrical Specifications in Section 26.0 GLYPH<147>Electrical CharacteristicsGLYPH<148> and to the  DC Characteristics  Graphs and Charts  in Section 27.0  GLYPH<147>DC  and  AC  Characteristics  Graphs and TablesGLYPH<148> and minor corrections to the data sheet text.",
    "Revision D (October 2006)\nThis revision includes updates to the packaging diagrams.\nThis revision includes updates to the packaging diagrams.",
    "Revision F (February 2007)\nThis revision includes updates to the packaging diagrams.",
    "Revision G (December 2007)\nGLYPH<149> Modified OSCTUNE register data and added OSCTUN2 register data to Section 2.6 GLYPH<147>Internal Oscillator BlockGLYPH<148> and Table 4-3 and Table 5-1.\nGLYPH<149> Changed Brown-out Voltage values in Section 26.1 GLYPH<147>DC Characteristics: Supply Voltage PIC18F2220/2320/4220/4320 (Industrial) PIC18LF2220/2320/4220/4320 (Industrial)GLYPH<148> .\nGLYPH<149> Updated low-voltage detect values in Table 26-4.",
    "Revision G (December 2007)\nGLYPH<149> Removed RE3 pin references for PIC18F2220/2320 devices in Section 1.0 GLYPH<147>Device OverviewGLYPH<148> , Section 5.0 GLYPH<147>Memory OrganizationGLYPH<148> , Section 10.0 GLYPH<147>I/O PortsGLYPH<148> , Section 19.0 GLYPH<147>10-bit Analog-to-Digital Converter (A/D) ModuleGLYPH<148> and Section 23.0 GLYPH<147>Special Features of the CPUGLYPH<148> .\nGLYPH<149> Made minor changes to Section 17.3.3 GLYPH<147>Enabling SPI I/OGLYPH<148> ; Table 1-2, Table 1-3, Table 3-3, Table 12-1 and Table 26-2; Figure 12-3 and Figure 16-1; Example 10-1 and Example 10-2; and Table 21-1 and Table 23-1.",
    "APPENDIX B: DEVICE DIFFERENCES\nThe differences between the devices listed in this data sheet are shown in Table B-1.",
    "TABLE B-1: DEVICE DIFFERENCES\nProgram Memory (Bytes), PIC18F2220 = 4096. Program Memory (Bytes), PIC18F2320 = 8192. Program Memory (Bytes), PIC18F4220 = 4096. Program Memory (Bytes), PIC18F4320 = 8192. Program Memory (Instructions), PIC18F2220 = 2048. Program Memory (Instructions), PIC18F2320 = 4096. Program Memory (Instructions), PIC18F4220 = 2048. Program Memory (Instructions), PIC18F4320 = 4096. Interrupt Sources, PIC18F2220 = 19. Interrupt Sources, PIC18F2320 = 19. Interrupt Sources, PIC18F4220 = 20. Interrupt Sources, PIC18F4320 = 20. I/O Ports, PIC18F2220 = Ports A, B, C, (E). I/O Ports, PIC18F2320 = Ports A, B, C, (E). I/O Ports, PIC18F4220 = Ports A, B, C, D, E. I/O Ports, PIC18F4320 = Ports",
    "TABLE B-1: DEVICE DIFFERENCES\nA, B, C, D, E. Capture/Compare/PWM Modules, PIC18F2220 = 2. Capture/Compare/PWM Modules, PIC18F2320 = 2. Capture/Compare/PWM Modules, PIC18F4220 = 1. Capture/Compare/PWM Modules, PIC18F4320 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F2220 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F2320 = 0. Enhanced Capture/Compare/ PWM Modules, PIC18F4220 = 1. Enhanced Capture/Compare/ PWM Modules, PIC18F4320 = 1. Parallel Communications (PSP), PIC18F2220 = No. Parallel Communications (PSP), PIC18F2320 = No. Parallel Communications (PSP), PIC18F4220 = Yes. Parallel Communications (PSP), PIC18F4320 = Yes. 10-bit Analog-to-Digital Module, PIC18F2220 = 10 Input Channels. 10-bit Analog-to-Digital Module, PIC18F2320 = 10 Input",
    "TABLE B-1: DEVICE DIFFERENCES\nChannels. 10-bit Analog-to-Digital Module, PIC18F4220 = 13 Input Channels. 10-bit Analog-to-Digital Module, PIC18F4320 = 13 Input Channels. Packages, PIC18F2220 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F2320 = 28-Pin SPDIP 28-Pin SOIC. Packages, PIC18F4220 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN. Packages, PIC18F4320 = 40-Pin PDIP 44-Pin TQFP 44-Pin QFN",
    "APPENDIX C: CONVERSION CONSIDERATIONS\nThis  appendix  discusses  the  considerations  for  converting from previous versions of a device to the ones listed in this data sheet. Typically, these changes are due to the differences in the process technology used. An  example  of  this  type  of  conversion  is  from  a PIC16C74A to a PIC16C74B.\nNot Applicable\nAPPENDIX D:\nMIGRATION FROM BASELINE TO ENHANCED DEVICES\nThis section discusses how to migrate from a Baseline device (i.e., PIC16C5X) to an Enhanced MCU device (i.e., PIC18FXXX).\nThe  following  are  the  list  of  modifications  over  the PIC16C5X microcontroller family:\nNot Currently Available",
    "PIC18F2220/2320/4220/4320\nAPPENDIX E:\nMIGRATION FROM MID-RANGE TO ENHANCED DEVICES\nAPPENDIX F:\nMIGRATION FROM HIGH-END TO ENHANCED DEVICES\nA detailed  discussion of the  differences between  the mid-range  MCU  devices  (i.e.,  PIC16CXXX)  and  the enhanced  devices  (i.e.,  PIC18FXXX)  is  provided  in AN716,  GLYPH<147>Migrating  Designs  from  PIC16C74A/74B  to PIC18C442.GLYPH<148> The  changes  discussed,  while  device specific,  are  generally  applicable  to  all  mid-range  to enhanced device migrations.\nThis Application Note is available as Literature Number DS00716.\nA  detailed  discussion  of  the  migration  pathway  and differences between the high-end MCU devices (i.e., PIC17CXXX) and the enhanced devices (i.e., PIC18FXXX)  is  provided  in AN726,  GLYPH<147>PIC17CXXX  to PIC18CXXX  Migration.GLYPH<148> This Application Note is available as Literature Number DS00726.",
    "A\nA/D, 1 = ................................................................................... 211. A/D Converter Interrupt, Configuring ........................................, 1 = ....................... 215. Acquisition Requirements, 1 = 216. ADCON0 Register, 1 = .................................................... 211. ADCON1 Register, 1 =",
    "A\n.................................................... 211. ADCON2 Register, 1 = .................................................... 211. ADRESH Register, 1 = ............................................ 211 , 214. ADRESL Register, 1 = .................................................... 211. Analog Port Pins, Configuring, 1 =",
    "A\n.................................. 218. Associated Registers ..............................................., 1 = 220. Automatic Acquisition Time, 1 = ...................................... 217. Configuring the Module, 1 = ............................................ 215. Conversion Clock (Tad) ..........................................., 1 = 217. Conversion Status (GO/DONE Bit), 1 =",
    "A\n.......................... 214. Conversions, 1 = ............................................................. 219. Converter Characteristics ........................................, 1 = 345. Operation in Power-Managed Modes, 1 = ...................... 218. Special Event Trigger (CCP) ............................, 1 = 136 , 220. Use of the CCP2 Trigger",
    "A\n.......................................... Vref+ and Vref- References, 1 = 220 ..................................... 216. Maximum Ratings, 1 = . Absolute, 1 = ............................................. 305. AC (Timing) Characteristics ............................................. Load Conditions for Device, 1 = 326 Timing 327. Specifications",
    "A\n..................................................., 1 = 326. Parameter Symbology ............................................. Temperature and Voltage Specifications, 1 = ................. 327. Timing Conditions, 1 = .................................................... 327. Access Bank, 1 =",
    "A\n...................................................................... 65. ACKSTAT Status Flag, 1 = ..................................................... 185. ADCON0 Register ............................................................, 1 = 211. GO/DONE Bit ADCON1 Register",
    "A\n............................................................, 1 = ........................................................... 214 211. ADCON2 Register ............................................................................, 1 =",
    "A\n............................................................ 211. ADDLW, 1 = 263. Addressable Universal Synchronous Asynchronous Receiver Transmitter. See USART, 1 = . ADRESL Register, 1 = 211. , 1 = ............................................................. ADRESH Register, 1 = 211 , 214. .................................................... Analog-to-Digital Converter. See ANDLW, 1 = A/D.",
    "A\n............................................................................ 264 ............................................................................ 265. Assembler MPASM, 1 = ................................................... ANDWF, 1 = . Assembler, 1 = 302. Bank Select Register (BSR) Baud Rate Generator BC",
    "A\n.................................................................................... BCF, 1 = ............................................... 65 ....................................................... 181.",
    "A\n.................................................................................. BF Status, 1 = 265. , 1 = 266 .................................................................. Flag, 1 = 185. Block Diagrams, 1 = . A/D ........................................................................... Analog Input Model Baud Rate",
    "A\nGenerator, 1 = 214 .................................................. 215 ............................................... 181. Comparator I/O Operating, 1 = 135 222. Capture Mode Operation ........................................., 1 = ............................. Modes Comparator Output .................................................., 1 = 224.",
    "A\nComparator Voltage, 1 = 228. Reference Compare Mode Operation ......................................., 1 = ............................... 136\nExternal Power-on Reset Circuit",
    "A\n(Slow VDD Power-up), 1 = ........................................ 44. Fail-Safe Clock Monitor ..........................................., 1 = 249. Generic I/O Port Operation, 1 = ...................................... 101. Interrupt Logic, 1 = ............................................................ 88. Low-Voltage Detect (LVD), 1 =",
    "A\n....................................... 232. Low-Voltage Detect (LVD) with External Input, 1 = ........ 232. MCLR/Vpp/RE3 Pin ................................................., 1 = 112. MSSP (I 2 C Master Mode), 1 = ........................................ 179. MSSP (I 2 C Mode), 1 = .................................................... 164. MSSP (SPI Mode),",
    "A\n1 = ................................................... 155. On-Chip Reset Circuit, 1 = ................................................ 43. PIC18F2220/2320, 1 = ....................................................... 9. PIC18F4220/4320, 1 = ..................................................... 10. PLL, 1 =",
    "A\n............................................................................ 20. PORTC (Peripheral Output Override), 1 = ...................... 107. PORTD and PORTE (Parallel Slave Port), 1 = ............... 114. PWM (Enhanced), 1 = .................................................... 143. PWM (Standard)",
    "A\n......................................................, 1 = 138. RA3:RA0 and RA5 Pins, 1 = ........................................... 102. RA4/T0CKI Pin, 1 = ........................................................ 102. RA6 Pin, 1 =",
    "A\n................................................................... 102. RA7 Pin, 1 = ................................................................... 102. RB2:RB0 Pins, 1 = .......................................................... 105. RB3/CCP2 Pin, 1 =",
    "A\n......................................................... 105. RB4 Pin, 1 = ................................................................... 105. RD4:RD0 Pins, 1 = ......................................................... 110. RD7:RD5 Pins, 1 =",
    "A\n......................................................... 109. RE2:RE0 Pins, 1 = .......................................................... 111. Reads from Flash Program Memory, 1 = .......................... 75. System Clock ............................................................., 1 = 26. Table Read Operation, 1 =",
    "A\n............................................... 71. Table Write Operation, 1 = ................................................ 72. Table Writes to Flash Program Memory, 1 = .................... 77. Timer0 in 16-Bit Mode, 1 = ............................................. 118. Timer0 in 8-Bit Mode ..............................................., 1 = 118. Timer1,",
    "A\n1 = ..................................................................... 122. Timer1 (16-Bit Read/Write Mode), 1 = ............................ 122. Timer2 ....................................................................., 1 = 128. Timer3",
    "A\n....................................................................., 1 = 130. Timer3 (16-Bit Read/Write USART Receive ......................................................., 1 = Mode) ............................ 130 204. USART Transmit, 1 = ...................................................... 202. Watchdog Timer, 1 =",
    "A\n...................................................... 246. BN ...................................................................................., 1 = 266. BNC ................................................................................., 1 = 267. BNN",
    "A\n................................................................................., 1 = 267. BNOV ..............................................................................., 1 = 268. BNZ, 1 = 268.",
    "A\n.................................................................................. BOR. See Brown-out Reset., 1 = . BOV ................................................................................. BRA",
    "A\n................................................................................., 1 = 271. See Baud Rate, 1 = 269. Generator., 1 = , 237. BRG. Brown-out Reset (BOR) ..............................................44 BSF .................................................................................. BTFSC, 1 = 269",
    "A\n............................................................................. 270. BTFSS ................................................................................., 1 = ............................................................................. 270. BTG BZ",
    "A\n...................................................................................., 1 = 271 272",
    "C\nMPLAB C30, 302 = ............................................................. 302. CALL ................................................................................, 302 = 272. Capture (CCP Module) ....................................................., 302 = 135. Associated Registers, 302 =",
    "C\n............................................... 137. CCP Pin Configuration ............................................., 302 = 135. CCPR1H:CCPR1L Registers, 302 = ................................... 135. Software Interrupt ....................................................., 302 = 135. Timer1/Timer3 Mode Selection, 302 = ................................",
    "C\n135. Capture (ECCP Module) .................................................., 302 = 142. Capture/Compare/PWM (CCP) ........................................, 302 = . , 302 = 133. Capture Mode. See Capture. CCP1, 302 = ........................................................................ 134. CCPR1H Register CCPR1L Register, 302 =",
    "C\n............................................ 134 ............................................ 134. CCP2 ........................................................................, 302 = 134. CCPR2H Register, 302 = ............................................ 134. CCPR2L Register, 302 = 134.",
    "C\n............................................ Compare Mode. See Compare. Interaction of Two CCP, 302 = ............................. 134. Modules PWM Mode. See PWM. Timer Resources ......................................................, 302 = 134. Clock Sources ...................................................................., 302 = 25. Selection Using OSCCON Register, 302 =",
    "C\n........................... 25. Clocking Scheme/Instruction Cycle ...................................., 302 = 57. CLRF ................................................................................, 302 = 273. , 302 = 273. CLRWDT, 302 = . .......................................................................... Code Examples 16 x 16",
    "C\nSigned Multiply Routine 16 x 16 Unsigned Multiply Routine, 302 = ................................. 86 ............................. 86. 8 x 8 Signed Multiply Routine ....................................., 302 = 85. 8 x 8 Unsigned Multiply Routine ................................., 302 = 85. Changing Between Capture, 302 = ................... 135. Prescalers Computed GOTO Using an Offset Value, 302 = ................... 59. Data EEPROM Read",
    "C\n................................................., 302 = 83. Data EEPROM Refresh Routine, 302 = ................................ 84. Data EEPROM Write .................................................., 302 = 83. Erasing a Flash Program Memory Row, 302 = ..................... 76. Fast Register Stack ...................................................., 302 = 56. How to Clear RAM",
    "C\n(Bank 1) Using Indirect Addressing ............................................, 302 = 66. Implementing a Real-Time Clock Using a Timer1 Interrupt Service .................................. ...................................................., 302 = 125. Initializing PORTA Initializing PORTB, 302 = 101. ...................................................., 302 = 104. Initializing PORTC, 302 = 107.",
    "C\n.................................................... Initializing PORTD .................................................... Initializing PORTE, 302 = 109. .................................................... Loading the SSPBUF (SSPSR) Register, 302 = 111. Reading a Flash Program Memory Word, 302 = ................. 158 ................... 75. Saving STATUS, WREG and BSR, 302 = 99. Registers in RAM",
    "C\n............................................... Writing to Flash Program Memory ......................., 302 = 78 GLYPH<150> 79 237. Code Protection ......................................................., 302 = , 252 274. COMF ..............................................................................., 302 = . Comparator, 302 = 221.",
    "C\n...................................................................... Analog Input Connection, 302 = ................. 225. Considerations Associated Registers ............................................... ............................................................, 302 = 226. Configuration Effects of a Reset, 302 = 221",
    "C\n..................................................... 225. Interrupts .................................................................., 302 = 224. Operation, 302 = . ................................................................. Operation in Power-Managed Modes, 302 = 223. , 302 = ...................... 225",
    "C\nOutputs, 1 = .................................................................... 223. Reference, 1 = ................................................................ 223. Response Time, 1 = ........................................................ 223. Comparator Specifications, 1 =",
    "C\n............................................... 322. Comparator Voltage Reference, 1 = ....................................... 227. Accuracy and Error .................................................., 1 = 228. Associated Registers, 1 = ............................................... 229. Configuring, 1 =",
    "C\n.............................................................. 227. Connection Considerations, 1 = ...................................... 228. Effects of a Reset, 1 = .................................................... 228. Operation in Power-Managed Modes, 1 = ...................... 228. Compare (CCP Module), 1 =",
    "C\n.................................................. 136. Associated Registers, 1 = ............................................... 137. CCP Pin Configuration, 1 = ............................................. 136. CCPR1 Register, 1 = ...................................................... 136. Software Interrupt, 1 =",
    "C\n.................................................... 136. Special Event Trigger, 1 = .......................................136 , 220. Timer1/Timer3 Mode Selection, 1 = ................................ 136. Compare (ECCP Mode), 1 = ................................................... 142. Computed GOTO, 1 =",
    "C\n............................................................... 59. Configuration Bits, 1 = ............................................................ 237. Configuration Register Protection, 1 = 255. Context Saving During Interrupts, 1 = .................................... ....................................... 99. Control Registers, 1 =",
    "C\n............................................. 72. EECON1 and EECON2 Conversion Considerations, 1 = .............................................. 377. CPFSEQ .........................................................................., 1 = 274. CPFSGT, 1 =",
    "C\n.......................................................................... 275. CPFSLT ..........................................................................., 1 = 275. Crystal Oscillator/Ceramic Resonator, 1 = ................................ 19. Customer Change Notification Service .........................................., 1 =",
    "C\n............................ 389. Customer Notification Service, 1 = 389. Customer, 1 = . , 1 = 389. D, 1 = . Support ............................................................ Data EEPROM Code Protection Data EEPROM Memory, 1 = ...................................... 255 ..................................................... 81",
    "C\n................................................. 84 81. Associated Registers EEADR Register ........................................................, 1 = . EECON1 and EECON2 Registers, 1 = 81. Operation During Code-Protect ................................., 1 = ............................. 84. Protection Against Spurious Write",
    "C\n....................................................................., 1 = ............................. 83. Reading, 1 = 83. Using .........................................................................., 1 = 84. Write Verify, 1 = 83.",
    "C\n................................................................ Writing ........................................................................, 1 = 83. Data Memory ..................................................................... General Purpose Registers, 1 = 59. , 1 =",
    "C\n....................................... 59 ......................................... Map for PIC18F2X20/4X20, 1 = 60. Special Function Registers, 1 = 61. DAW ................................................................................, 1 = ......................................... DC and AC Characteristics, 1 = 276. Graphs and Tables",
    "C\n.................................................. DC Characteristics ..........................................................., 1 = 347 319 ............................ 310 ......................................................... 308. Supply Voltage DCFSNZ",
    "C\n.........................................................................., 1 = 277 276. DECF, 1 = . ............................................................................... DECFSZ, 1 = 277 .......................................................",
    "C\n.......................................................................... Development Support, 1 = 301 376. Device Differences ..........................................................., 1 = .................................................................. 7. Device Overview, 1 =",
    "C\n........................................................... 8. Features, 1 = . (table) New Core Features, 1 = ...................................................... 7. Other Special Features Direct Addressing ..............................................................., 1 = ................................................ 7 67",
    "I\nAuto-Shutdown, ............................................................................... 141 = ........................................................ 149. And Automatic Restart, ............................................................................... 141 =",
    "I\n..................................... 151. Capture and Compare Modes, ............................................................................... 141 = .................................. 142. Outputs ....................................................................,",
    "I\n............................................................................... 141 = 142. Standard PWM Mode, ............................................................................... 141 = ............................................... 142. Start-up Considerations",
    "I\n..........................................., ............................................................................... 141 = 151. Effects of Power-Managed Modes on, ............................................................................... 141 = . Various Clock Sources,",
    "I\n............................................................................... 141 = ............................................... 28. Electrical Characteristics, ............................................................................... 141 = 305.",
    "I\n.................................................. Enhanced Capture/Compare/PWM (ECCP) ...................., ............................................................................... 141 = 141. Capture Mode. See Capture (ECCP Module). PWM Mode. See PWM (ECCP Module). Enhanced CCP Auto-Shutdown .......................................,",
    "I\n............................................................................... 141 = 149. Enhanced PWM Mode. See PWM, ............................................................................... 141 = (ECCP Module). ........ 143. Equations,",
    "I\n............................................................................... 141 = . Calculating the Minimum Required Acquisition Time ......................................, ............................................................................... 141 = 216. 16 x 16 Signed Multiplication Algorithm,",
    "I\n............................................................................... 141 = ..................... 86. 16 x 16 Unsigned Multiplication Algorithm, ............................................................................... 141 = ................. 86. A/D Acquisition Time",
    "I\n................................................, ............................................................................... 141 = 216. A/D Minimum Holding Capacitor, ............................................................................... 141 = .............................. 216.",
    "I\nErrata, ............................................................................... 141 = ................................................................................... 5. External Clock Input, ............................................................................... 141 =",
    "I\n21. , ............................................................................... 141 = ............................................................ Fail-Safe Clock Monitor, ............................................................................... 141 =",
    "I\n............................................ 237 , 249. Interrupts in Power-Managed Modes, ............................................................................... 141 = ....................... 251. POR or Wake from Sleep, ............................................................................... 141 =",
    "I\n........................................ 251. WDT During Oscillator Failure, ............................................................................... 141 = ................................. 249. Fast Register Stack, ............................................................................... 141 =",
    "I\n............................................................ 56. Firmware Instructions, ............................................................................... 141 = ....................................................... 257. Associated Registers,",
    "I\n............................................................................... 141 = ................................................. 79. Control Registers, ............................................................................... 141 =",
    "I\n....................................................... 72. Erase Sequence ........................................................, ............................................................................... 141 = 76. Erasing",
    "I\n......................................................................., ............................................................................... 141 = 76. Operation During Code-Protect, ............................................................................... 141 =",
    "I\n................................. 79. Reading, ............................................................................... 141 = ...................................................................... 75. TABLAT Register,",
    "I\n............................................................................... 141 = ....................................................... 74. Table Pointer ..............................................................,",
    "I\n............................................................................... 141 = 74. Boundaries Based on Operation, ............................................................................... 141 = ........................ 74. Table Pointer Boundaries ..........................................,",
    "I\n............................................................................... 141 = 74. Table Reads and Table Writes, ............................................................................... 141 = .................................. 71. Unexpected Termination of Write Operation,",
    "I\n............................................................................... 141 = .............. 79. Write Verify to, ............................................................................... 141 = ................................................................ 79. Writing,",
    "I\n............................................................................... 141 = 77. .................................................................... FSCM. See Fail-Safe Clock Monitor., ............................................................................... 141 = . G,",
    "I\n............................................................................... 141 = . GOTO, ............................................................................... 141 = ............................................................................... 278. H,",
    "I\n............................................................................... 141 = . Hardware Multiplier, ............................................................................... 141 = ............................................................ 85. Introduction,",
    "I\n............................................................................... 141 = ................................................................ 85 ................................................................... 85. Performance Comparison HSPLL",
    "I\n................................................................................, ............................................................................... 141 = .......................................... 85 20",
    "I\nI 2 C Mode, ........................................................................... 101 = . ACK Pulse, ........................................................................... 101 = ........................................................168 , 169. Acknowledge Sequence Timing,",
    "I\n........................................................................... 101 = .............................. 188. Baud Rate Generator .............................................., ........................................................................... 101 = 181. Bus Collision During a Repeated,",
    "I\n........................................................................... 101 = . Start Condition ................................................., ........................................................................... 101 = 192. Bus Collision During a Start Condition,",
    "I\n........................................................................... 101 = ..................... 190. Bus Collision During a Stop Condition, ........................................................................... 101 = ..................... 193. Clock Arbitration Clock Stretching,",
    "I\n........................................................................... 101 = ...................................................... 182 174. Effect of a Reset, ........................................................................... 101 =",
    "I\n...................................................... 189. General Call Address Support, ........................................................................... 101 = ................................. 178. Master Mode, ........................................................................... 101 = 179.",
    "I\n............................................................ Master Mode (Reception, 7-Bit Address), ........................................................................... 101 = ................. 187. Master Mode Operation, ........................................................................... 101 =",
    "I\n........................................... 180. Master Mode Reception, ........................................................................... 101 = ........................................... 185. , ........................................................................... 101 = Timing",
    "I\n....... 184. Master Mode Repeated Start Condition Master Mode Start Condition Timing ......................., ........................................................................... 101 = 183. ....................................., ........................................................................... 101 = 185. Master Mode Transmission,",
    "I\n........................................................................... 101 = . Multi-Master Communication, Bus Collision, ........................................................................... 101 = . and Bus Arbitration ...................................................,",
    "I\n........................................................................... 101 = .......................................... 189. Multi-Master Mode, ........................................................................... 101 = 189. Operation,",
    "I\n........................................................................... 101 = ................................................................. 168. Operation in Power-Managed Mode ........................, ........................................................................... 101 = 189.",
    "I\nRead/Write Bit Information, ........................................................................... 101 = (R/W Bit) ................168 , 169. Registers ................................................................. Serial Clock (RC3/SCK/SCL),",
    "I\n........................................................................... 101 = 164 169. Slave Mode .............................................................., ........................................................................... 101 = 168. Addressing,",
    "I\n........................................................................... 101 = ....................................................... 168. Reception, ........................................................................... 101 =",
    "I\n........................................................ 169. Transmission, ........................................................................... 101 = ................................................... 169. Stop Condition Timing,",
    "I\n........................................................................... 101 = ............................................. 188. ID Locations, ........................................................................... 101 =",
    "I\n..............................................................237 , 255 278. INCF ................................................................................, ........................................................................... 101 = . INCFSZ",
    "I\n............................................................................ In-Circuit Debugger In-Circuit Serial Programming, ........................................................................... 101 = 279 .......................................................... 255 (ICSP) .......................237 ,",
    "I\n255. Operation ..................................................................., ........................................................................... 101 = 66 ........................................... 67. Indirect Addressing Operation Indirect File Operand",
    "I\n........................................................., ........................................................................... 101 = . , ........................................................................... 101 = 59. INFSNZ",
    "I\n............................................................................, ........................................................................... 101 = 279. Initialization Conditions for all Instruction Cycle ................................................................,",
    "I\n........................................................................... 101 = Registers .......................46 GLYPH<150> 49. Instruction Flow/Pipelining, ........................................................................... 101 = 57 ................................................. 57. Instruction Format",
    "I\n............................................................, ........................................................................... 101 = 259. ..................................................................,",
    "I\n........................................................................... 101 = 257. Instruction Set, ........................................................................... 101 = 263. ADDLW, ........................................................................... 101 =",
    "I\n..................................................................... ADDWF, ........................................................................... 101 = .................................................................... 263. ADDWFC,",
    "I\n........................................................................... 101 = ................................................................. 264 264. ANDLW ANDWF, ........................................................................... 101 =",
    "I\n.................................................................... .................................................................... 265. ............................................................................,",
    "I\n........................................................................... 101 = 265. BC, ........................................................................... 101 = . , ........................................................................... 101 =",
    "I\n......................................................................... 266. BCF BN, ........................................................................... 101 = ............................................................................ 266. BNC BNN,",
    "I\n........................................................................... 101 = 267 267. BNOV, ........................................................................... 101 = ...................................................................... 268.",
    "I\n......................................................................... ........................................................................., ........................................................................... 101 = 268. BNZ,",
    "I\n........................................................................... 101 = ......................................................................... ......................................................................... 271. BOV,",
    "I\n........................................................................... 101 = ......................................................................... 269. BRA BSF, ........................................................................... 101 =",
    "I\n.......................................................................... 269",
    "PIC18F2220/2320/4220/4320\nBTFSC, 1 = ..................................................................... 270. BTFSS, 1 = ...................................................................... 270. BTG, 1 = .......................................................................... 271. BZ",
    "PIC18F2220/2320/4220/4320\n............................................................................., 1 = 272. CALL, 1 = ........................................................................ 272. CLRF, 1 = ........................................................................ 273.",
    "PIC18F2220/2320/4220/4320\nCLRWDT, 1 = .................................................................. 273. COMF ......................................................................., 1 = 274. CPFSEQ, 1 = .................................................................. 274. CPFSGT, 1 =",
    "PIC18F2220/2320/4220/4320\n................................................................... 275. CPFSLT, 1 = ................................................................... 275. DAW ........................................................................., 1 = 276. DECF",
    "PIC18F2220/2320/4220/4320\n......................................................................., 1 = 276. DECFSZ, 1 = ................................................................... 277. GOTO ......................................................................., 1 = 278. INCF",
    "PIC18F2220/2320/4220/4320\n........................................................................., 1 = 278 .................................................................... 279. INCFSZ, 1 = .................................................................... 279. INFSNZ, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................................................... 280. IORLW, 1 = . IORWF, 1 = ..................................................................... 280. LFSR, 1 = ........................................................................ 281. MOVF, 1 =",
    "PIC18F2220/2320/4220/4320\n....................................................................... 281. MOVFF, 1 = ..................................................................... 282. MOVLB, 1 = ..................................................................... 282. MOVLW MOVWF, 1 =",
    "PIC18F2220/2320/4220/4320\n.................................................................... 283 ................................................................... 283. MULLW, 1 = .................................................................... 284. MULWF, 1 =",
    "PIC18F2220/2320/4220/4320\n.................................................................... 284. NEGF, 1 = ....................................................................... 285. NOP, 1 = ......................................................................... 285. POP, 1 =",
    "PIC18F2220/2320/4220/4320\n.......................................................................... 286. PUSH, 1 = ....................................................................... 286. RCALL, 1 = ...................................................................... 287. Reset",
    "PIC18F2220/2320/4220/4320\n........................................................................, 1 = 287 .................................................................... 288. RETFIE RETLW, 1 = ..................................................................... 288. RETURN, 1 =",
    "PIC18F2220/2320/4220/4320\n.................................................................. 289. RLCF ........................................................................, 1 = 289. RLNCF, 1 = ..................................................................... 290",
    "PIC18F2220/2320/4220/4320\n........................................................................ RRCF RRNCF, 1 = 290. SETF, 1 = ..................................................................... 291 ........................................................................ 291. SLEEP, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................................... 292. SUBFWB, 1 = .................................................................. 292. SUBLW, 1 = .................................................................... 293. SUBWF, 1 =",
    "PIC18F2220/2320/4220/4320\n.................................................................... 293. SUBWFB, 1 = .................................................................. 294. SWAPF, 1 = .................................................................... 295. TBLRD, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................................................... 296. TBLWT, 1 = ..................................................................... 297. TSTFSZ, 1 = .................................................................... 298. XORLW, 1 =",
    "PIC18F2220/2320/4220/4320\n.................................................................... 298. XORWF, 1 = 299 ......................................................... .................................................................... Summary Table, 1 = 260. INTCON Register RBIF Bit, 1 = .",
    "PIC18F2220/2320/4220/4320\n...................................................................., 1 = 104 89. INTCON Registers ............................................................. Inter-Integrated Circuit. See I 2 C., 1 = 22. Internal Oscillator Block ....................................................., 1 = . Internal RC Oscillator Use with WDT",
    "PIC18F2220/2320/4220/4320\n.........................................................., 1 = 246. Internet Address ..............................................................., 1 = 389",
    "PIC18F2220/2320/4220/4320\nInterrupt Sources, 1 = ............................................................. 237. A/D Conversion Complete, 1 = ....................................... 215. Capture Complete (CCP) ........................................., 1 = 135. Compare Complete (CCP) ......................................., 1 = 136. Interrupt-on-Change (RB7:RB4), 1 =",
    "PIC18F2220/2320/4220/4320\n.............................. 104. INTx Pin, 1 = ..................................................................... 99. PORTB, Interrupt-on-Change, 1 = .................................... 99. TMR0 ........................................................................., 1 = 99.",
    "PIC18F2220/2320/4220/4320\nTMR1 Overflow, 1 = ........................................................ 121. TMR2 to PR2 Match, 1 = ................................................ 128. TMR2 to PR2 Match (PWM), 1 = .............................127 , 138. TMR3 Overflow .................................................129, 1 = , 131. USART",
    "PIC18F2220/2320/4220/4320\nReceive/Transmit Complete, 1 = ....................... 195. Interrupts ............................................................................, 1 = . , 1 = 87. Interrupts, Enable Bits CCP1 Enable (CCP1IE Bit), 1 = ..................................... 135. Interrupts, Flag Bits, 1 = . CCP1 Flag (CCP1IF Bit), 1 = ..........................................",
    "PIC18F2220/2320/4220/4320\n135. CCP1IF Flag (CCP1IF Bit), 1 = ....................................... 136. Interrupt-on-Change (RB7:RB4) Flag (RBIF Bit) ........................................................., 1 = 104. INTOSC Frequency, 1 = 40. Drift .................................................... INTOSC, INTRC. See Internal Oscillator Block. IORLW",
    "PIC18F2220/2320/4220/4320\n............................................................................., 1 = 280. IORWF ............................................................................., 1 = 280. IPR Registers, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................................................... 96. L, 1 = . LFSR ................................................................................, 1 = 281. Look-up Tables, 1 = .................................................................. 59. Low-Voltage",
    "PIC18F2220/2320/4220/4320\nDetect, 1 = ......................................................... 231. Characteristics, 1 = ......................................................... 323. Effects of a Reset, 1 = .................................................... 235. Operation, 1 =",
    "PIC18F2220/2320/4220/4320\n................................................................. 234. Current Consumption ......................................., 1 = 235. Reference Voltage Set Point, 1 = ........................... 235. Operation During Sleep ..........................................., 1 = 235. Low-Voltage ICSP Programming, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................... 255. See Low-Voltage Detect., 1 = ......................................... LVD., 1 = 231. M, 1 = . Master Synchronous Serial Port (MSSP). See MSSP. Master Synchronous Serial Port. See MSSP Memory Organization, 1 = ......................................................... 53. Data Memory, 1 = 59.",
    "PIC18F2220/2320/4220/4320\n............................................................. Program Memory, 1 = ....................................................... 53. Memory Programming Requirements, 1 = .............................. 321. Microchip Internet Web Site ............................................., 1 = 389. Migration from Baseline to Enhanced Devices, 1 =",
    "PIC18F2220/2320/4220/4320\n................ 377. Migration from High-End to Enhanced Devices, 1 = ............... 378. Migration from Mid-Range to Enhanced, 1 = Devices ............ 378. MOVF .............................................................................., 1 = 281. MOVFF ............................................................................, 1 =",
    "PIC18F2220/2320/4220/4320\n282. MOVLB ............................................................................, 1 = 282. MOVLW ..........................................................................., 1 = 283. MOVWF",
    "PIC18F2220/2320/4220/4320\n..........................................................................., 1 = 283. MPLAB ASM30 Assembler, Linker, Librarian, 1 = .................. 302. MPLAB ICD 2 In-Circuit Debugger .................................., 1 = 303. MPLAB ICE 2000 High-Performance, 1 = 303. Universal In-Circuit Emulator ..................................., 1 = . MPLAB PM3 Device Programmer, 1 = 303.",
    "PIC18F2220/2320/4220/4320\n................................... MPLAB REAL ICE In-Circuit Emulator, 1 = 303. System, 1 = ................",
    "PIC18F2220/2320/4220/4320\nMPLINK Object Linker/MPLIB Object Librarian, 1 = ............... 302. MSSP, 1 = 155. ............................................................................... Control Registers (General), 1 = ..................................... 155. Enabling SPI I/O, 1 = ...................................................... 159. I 2 C Master Mode, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................... 179. I 2 C Mode 2 2, 1 = . I C Mode. See I C I 2 C Slave Mode ........................................................, 1 = 168. Operation, 1 = ................................................................. 158. Overview, 1 = 155.",
    "PIC18F2220/2320/4220/4320\n.................................................................. Slave Select Control, 1 = ................................................ 161. SPI Master Mode, 1 = ..................................................... 160. SPI Master/Slave Connection, 1 = .................................. 159. SPI Mode, 1 =",
    "PIC18F2220/2320/4220/4320\n................................................................. 155. SPI Slave Mode, 1 = ....................................................... 161. SSPBUF Register, 1 = .................................................... 160. SSPSR Register, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................... 160. TMR2 Output for Clock Shift, 1 = ............................ 127 , 128. Typical Connection ............................................................................, 1 = .................................................. 159. MULLW MULWF, 1 =",
    "PIC18F2220/2320/4220/4320\n284. NEGF ..............................................................................., 1 = . , 1 = ............................................................................ 284. N, 1 = . , 1 = 285. NOP",
    "PIC18F2220/2320/4220/4320\n................................................................................., 1 = 285. O, 1 = . Opcode Field Descriptions, 1 = ............................................... 258. Oscillator Configuration, 1 = ...................................................... 19. EC ECIO, 1 =",
    "PIC18F2220/2320/4220/4320\n.............................................................................. 19 .......................................................................... 19. HS .............................................................................., 1 = 19.",
    "PIC18F2220/2320/4220/4320\nHSPLL, 1 = ........................................................................ 19. Internal Oscillator Block, 1 = ............................................. 22. INTIO1, 1 = ....................................................................... 19. INTIO2, 1 =",
    "PIC18F2220/2320/4220/4320\n....................................................................... 19. LP, 1 = ............................................................................... 19. RC .............................................................................., 1 = 19.",
    "PIC18F2220/2320/4220/4320\nRCIO, 1 = .......................................................................... 19. XT .............................................................................., 1 = 19. Oscillator Selection .......................................................... Oscillator Start-up Timer, 1 = 237 44",
    "PIC18F2220/2320/4220/4320\n, 237. Oscillator Switching, 1 = ............................................................ 25 ........................................................... Oscillator Transitions, 1 = 28. Oscillator, Timer1, 1 = ..................................................... 121 , 131. Oscillator, Timer3, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................. 129. P, 1 = . Packaging Information, 1 = ..................................................... 365. Details, 1 = ...................................................................... 367. Parallel Slave Port (PSP), 1 =",
    "PIC18F2220/2320/4220/4320\n......................................... 109 , 114. , 1 = ............................................... 115. CS (Chip Select), 1 = .............................................. , 114. PORTD ...................................................................., 1 = 113. Associated Registers, 1 = 114 113 , 114. RD (Read",
    "PIC18F2220/2320/4220/4320\nInput) RE0/AN5/RD Pin, 1 = ............................................... ...................................................... 113. RE1/AN6/WR Pin, 1 = ..................................................... 113. RE2/AN7/CS Pin, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................... 113. Select (PSPMODE Bit), 1 = .................................... 109 , 114. WR (Write Input) .............................................., 1 = 113 , 114 .................... 304. PICSTART Plus Development, 1 = Programmer. PIE Registers, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................................................... 94. Pin Functions MCLR/Vpp/RE3, 1 = ................................................... 11 , 14. OSC1/CLKI/RA7, 1 = .................................................. 11 , 14",
    "PIC18F2220/2320/4220/4320\nOSC2/CLKO/RA6, 1 = .................................................11 , 14. RA0/AN0, 1 = ...............................................................11 , 14. RA1/AN1, 1 = ...............................................................11 , 14. RA2/AN2/Vref-/CVref, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................11 , 14. RA3/AN3/Vref+, 1 = .....................................................11 , 14. RA4/T0CKI/C1OUT, 1 = ..............................................11 , 14. RA5/AN4/SS/LVDIN/C2OUT, 1 = ................................11 , 14. RB0/AN12/INT0, 1",
    "PIC18F2220/2320/4220/4320\n= ....................................................12 , 15. RB1/AN10/INT1, 1 = ....................................................12 , 15. RB2/AN8/INT2, 1 = ......................................................12 , 15. RB3/AN9/CCP2, 1 =",
    "PIC18F2220/2320/4220/4320\n....................................................12 , 15. RB4/AN11/KBI0, 1 = ....................................................12 , 15. RB5/KBI1/PGM, 1 = .....................................................12 , 15. RB6/KBI2/PGC, 1 =",
    "PIC18F2220/2320/4220/4320\n.....................................................12 , 15. RB7/KBI3/PGD, 1 = .......................................................... 12. RB7/PGD, 1 = ................................................................... 15. RC0/T1OSO/T1CKI, 1 =",
    "PIC18F2220/2320/4220/4320\n..............................................13 , 16. RC1/T1OSI/CCP2, 1 = .................................................13 , 16. RC2/CCP1/P1A, 1 = ....................................................13 , 16. RC3/SCK/SCL, 1 =",
    "PIC18F2220/2320/4220/4320\n......................................................13 , 16. RC4/SDI/SDA, 1 = .......................................................13 , 16. RC5/SDO, 1 = ..............................................................13 , 16. RC6/TX/CK, 1 =",
    "PIC18F2220/2320/4220/4320\n...........................................................13 , 16. RC7/RX/DT, 1 = ...........................................................13 , 16. RD0/PSP0, 1 = ................................................................. 17. RD1/PSP1, 1 =",
    "PIC18F2220/2320/4220/4320\n................................................................. 17. RD2/PSP2 RD3/PSP3, 1 = ................................................................. 17 17. RD4/PSP4, 1 = ................................................................. 17. RD5/PSP5/P1B, 1 =",
    "PIC18F2220/2320/4220/4320\n......................................................... 17. RD6/PSP6/P1C, 1 = ......................................................... 17. RD7/PSP7/P1D ........................................................., 1 = 17. RE0/AN5/RD",
    "PIC18F2220/2320/4220/4320\n.............................................................., 1 = 18. RE1/AN6/WR, 1 = ............................................................. 18. RE2/AN7/CS, 1 = .............................................................. 18. RE3, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................................ 18. VDD, 1 = , 18. Vss ........................................................................13, 1 = .......................................................................13 , 18. Pinout",
    "PIC18F2220/2320/4220/4320\nI/O Descriptions, 1 = . PIC18F2220/2320, 1 = ..................................................... 11. PIC18F4220/4320, 1 = ..................................................... 14. PIR Registers ....................................................................., 1 = 92. PLL Lock Time-out, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................. 44. Pointer, FSRn POP ................................................................................., 1 = .................................................................... 66 286. POR. See Power-on Reset., 1 = . PORTA, 1 = .",
    "PIC18F2220/2320/4220/4320\nAssociated Registers, 1 = ............................................... 103. LATA Register, 1 = ......................................................... 101. PORTA Register, 1 = ...................................................... 101. TRISA Register, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................................ 101. PORTB, 1 = . Associated Registers, 1 = ............................................... 106. LATB Register, 1 = ......................................................... 104. PORTB Register, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................... 104. RB7:RB4 Interrupt-on-Change Flag (RBIF Bit), 1 = ........ 104. TRISB Register, 1 = ........................................................ 104. PORTC, 1 = . Associated Registers, 1 = ............................................... 108. LATC Register",
    "PIC18F2220/2320/4220/4320\n........................................................., 1 = 107. PORTC Register TRISC Register ........................................................, 1 = ...................................................... 107 107",
    "PIC18F2220/2320/4220/4320\nPORTD, 1 = ............................................... 110. Associated Registers .........................................................., 1 = 109. LATD Register, 1 = . Parallel Slave Port (PSP) Function, 1 = .......................... 109. PORTD Register, 1 = ...................................................... 109. TRISD Register, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................................ 109. PORTE, 1 = . Analog Port Pins, 1 = ...................................................... 113. Associated Registers, 1 = ............................................... 113. LATE Register, 1 = ..........................................................",
    "PIC18F2220/2320/4220/4320\n111. PORTE Register, 1 = ...................................................... 111. PSP Mode Select (PSPMODE Bit), 1 = .......................... 109. RE0/AN5/RD Pin, 1 = ...................................................... 113. RE1/AN6/WR Pin, 1 = ..................................................... 113.",
    "PIC18F2220/2320/4220/4320\nRE2/AN7/CS Pin, 1 = ...................................................... 113. TRISE Register, 1 = ........................................................ 111. Postscaler, WDT, 1 = . Assignment (PSA Bit), 1 = ............................................... 119. Rate Select (T0PS2:T0PS0 Bits), 1 =",
    "PIC18F2220/2320/4220/4320\n............................. 119. Power-Managed Modes ......................................................................, 1 = ..................................................... 29. Entering, 1 = 30. Idle Modes, 1 = .................................................................. 31.",
    "PIC18F2220/2320/4220/4320\nRun Modes, 1 = ................................................................. 36. Sleep Mode ................................................................, 1 = 31. Summary (table), 1 = ......................................................... 29. Wake from",
    "PIC18F2220/2320/4220/4320\n.................................................................., 1 = 38 237. Power-up Delays, 1 = ................................................................ 28. Power-up Timer (PWRT) ......................................, 1 = 28 , 44 , 237. Prescaler, Capture, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................................... 135. Prescaler, Timer0, 1 = ............................................................. 119. Assignment (PSA Bit), 1 = ............................................... 119. Rate Select (T0PS2:T0PS0, 1 = Bits) ............................. 119.",
    "PIC18F2220/2320/4220/4320\nPrescaler, Timer2 ............................................................., 1 = 139. Product Identification System, 1 = ........................................... 391. Program Counter, 1 = . PCL Register, 1 = .............................................................. 56. PCLATH Register, 1 =",
    "PIC18F2220/2320/4220/4320\n....................................................... 56. PCLATU Register, 1 = ....................................................... 56. Program Memory, 1 = . Instructions ................................................................., 1 = 58. Two-Word, 1 =",
    "PIC18F2220/2320/4220/4320\n.......................................................... 58. Interrupt Vector .........................................................., 1 = 53. Map and Stack for PIC18F2220/4220, 1 = ........................ 53. Map and Stack for PIC18F2320/4320, 1 = ........................ 53 53. Reset Vector",
    "PIC18F2220/2320/4220/4320\n.............................................................. Protection, 1 = 253. Program Memory Code, 1 = .................................... , 1 = 252. Program Verification ......................................................... Program Verification and Code, 1 = Protection 252. Programming, Device, 1 = . Associated Registers ............................................... Instructions",
    "PIC18F2220/2320/4220/4320\n..................................., 1 = 257. Pulse-Width Modulation. See PWM and PWM (ECCP Module). PUSH ............................................................................... PUSH and POP Instructions, 1 = (CCP Module) 286 .............................................. 55. PWM (CCP Module)",
    "PIC18F2220/2320/4220/4320\n........................................................., 1 = 138. Associated Registers, 1 = ............................................... 139. CCPR1H:CCPR1L Registers, 1 = ................................... 138. Duty Cycle, 1 = ................................................................ 138. Example Frequencies/Resolutions,",
    "PIC18F2220/2320/4220/4320\n1 = ........................... 139 138. Period ......................................................................., 1 = ........................................ 139. Setup for PWM Operation TMR2 to PR2 Match ........................................., 1 = 127 , 138",
    "PIC18F2220/2320/4220/4320\nPWM (ECCP Module) ......................................................, 1 = 143. Associated Registers, 1 = 153. Direction Change in Full-Bridge Output Mode ...................................................., 1 = 147. Effects of a Reset, 1 = 152. Full-Bridge Application Example, 1 = 147. Full-Bridge Mode, 1 = 146. Half-Bridge Mode, 1 = 145. Half-Bridge Output Mode Applications Example ......, 1 = 145. Operation in Power-Managed Modes ......................, 1 = 152. Operation with Fail-Safe Clock Monitor, 1 = 152. Output Configurations",
    "PIC18F2220/2320/4220/4320\n.............................................., 1 = 143. Output Relationships (Active-High State), 1 = 144. Output Relationships (Active-Low State), 1 = 144. Programmable Dead-Band Delay, 1 = 149. Setup for Operation, 1 = 152. Shoot-Through Current, 1 = 149. Start-up Considerations, 1 = 151",
    "Q\nQ Clock ............................................................................ 139",
    "R\nRAM. See Data Memory., 1 = . RC Oscillator, 1 = ...................................................................... 21. RCIO Oscillator Mode, 1 = ................................................ 21. RCALL ............................................................................., 1 = 287. RCON Register, 1 = . Bit Status During Initialization, 1 =",
    "R\n.................................... 45. Bits and Positions ......................................................, 1 = 45. RCSTA Register .................................................................., 1 = . SPEN Bit, 1 = 195. Reader Response, 1 = ............................................................ 390. Register File, 1 =",
    "R\n....................................................................... 59. Registers, 1 = . ADCON0 (A/D Control 0), 1 = ......................................... 211. ADCON1 (A/D Control 1), 1 = ......................................... 212. ADCON2 (A/D Control 2) ........................................., 1 = 213. CCP1CON (ECCP",
    "R\nControl), 1 = ..................................... 141. CCPxCON (CCPx Control) ......................................, 1 = 133. CMCON (Comparator Control), 1 = ................................ 221. CONFIG1H (Configuration 1 High), 1 = .......................... 238. CONFIG2H (Configuration 2 High), 1 = .......................... 240. CONFIG2L (Configuration 2 Low), 1 =",
    "R\n........................... 239. CONFIG3H (Configuration 3 High), 1 = .......................... 241. CONFIG4L (Configuration 4 Low), 1 = ........................... 241. CONFIG5H (Configuration 5 High), 1 = .......................... 242. CONFIG5L (Configuration 5 Low), 1 = ........................... 242. CONFIG6H (Configuration 6 High), 1 = .......................... 243. CONFIG6L (Configuration 6 Low), 1 =",
    "R\n........................... 243. CONFIG7H (Configuration 7 High), 1 = .......................... 244. CONFIG7L (Configuration 7 Low), 1 = ........................... 244. CVRCON (Comparator Voltage Reference Control) .........................................., 1 = 227. DEVID1 (Device ID 1), 1 = .............................................. 245. DEVID2 (Device ID 2), 1 = 245.",
    "R\n.............................................. ECCPAS (Enhanced Capture/Compare/PWM Auto-Shutdown Control) .................................., 1 = 150. EECON1 (Data EEPROM Control 1), 1 = ....................73 , 82. INTCON (Interrupt Control), 1 = ........................................ 89. INTCON2 (Interrupt Control 2), 1 = ................................... 90. INTCON3 (Interrupt Control 3), 1 =",
    "R\n................................... 91. IPR1 (Peripheral Interrupt Priority 1), 1 = ......................... 96. IPR2 (Peripheral Interrupt Priority, 1 = 2) ......................... 97. LVDCON (Low-Voltage Detect Control), 1 = .................. 233. OSCCON (Oscillator Control), 1 = .................................... 27",
    "PIC18F2220/2320/4220/4320\nOSCTUN2 (INTRC Oscillator Tuning), 1 = ........................ 24. PIE1 (Peripheral Interrupt Enable 1), 1 = .......................... 94. PIE2 (Peripheral Interrupt Enable 2), 1 = .......................... 95. PIR1 (Peripheral Interrupt Request (Flag) 1) ............................................................., 1 = 92. PIR2 (Peripheral Interrupt Request (Flag) 2)",
    "PIC18F2220/2320/4220/4320\n............................................................., 1 = 93. PWM1CON (PWM Configuration), 1 = ............................ 149. RCON (Reset Control), 1 = ......................................... 69 , 98. RCSTA (Receive Status and Control), 1 = ...................... 197. SSPCON1 (MSSP Control 1, I 2 C Mode), 1 = ................. 166. SSPCON1",
    "PIC18F2220/2320/4220/4320\n(MSSP Control 1, SPI Mode), 1 = ................. 157. SSPCON2 (MSSP Control 2, I 2 C Master Mode) ............................................., 1 = 167. SSPSTAT (MSSP Status, I 2 C Mode), 1 = ....................... 165. SSPSTAT (MSSP Status, SPI Mode), 1 = ...................... 156. STATUS, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................................................... 68. STKPTR (Stack Pointer), 1 = ............................................ 55. Summary, 1 = .............................................................. 62 GLYPH<150> 64. T0CON (Timer0 Control), 1 =",
    "PIC18F2220/2320/4220/4320\n.......................................... 117. T1CON (Timer1 Control), 1 = .......................................... 121. T2CON (Timer2 Control), 1 = .......................................... 127. T3CON (Timer3 Control), 1 = .......................................... 129. TRISE, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................................... 112. TXSTA (Transmit Status and Control), 1 = ..................... 196. WDTCON (Watchdog Timer Control) ......................., 1 = 247. Reset, 1 = .......................................................................... 43 , 287. Resets, 1 =",
    "PIC18F2220/2320/4220/4320\n.............................................................................. 237. RETFIE, 1 = ............................................................................ 288. RETLW, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................................. 288. RETURN, 1 = .......................................................................... 289. Return Address Stack, 1 = ........................................................ 54. Return Stack Pointer (STKPTR), 1 =",
    "PIC18F2220/2320/4220/4320\n........................................ 54. Revision History, 1 = ............................................................... 375. RLCF, 1 = ................................................................................ 289. RLNCF, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................................. 290. RRCF, 1 = ............................................................................... 290. RRNCF, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................................................. 291",
    "S\nSCI. See USART, 1 = . SCK, 1 = .................................................................................. 155. SDI, 1 = ................................................................................... 155. SDO, 1 =",
    "S\n................................................................................. 155. Serial Clock (SCK) Pin, 1 = ..................................................... 155. Serial Communication Interface. See USART., 1 = . Serial Data In (SDI) Pin, 1 = .................................................... 155. Serial Data Out (SDO) Pin, 1 =",
    "S\n............................................... 155. Serial Peripheral Interface. See SPI Mode. ................................................................................, 1 = . SETF, 1 = 291. Shoot-Through Current, 1 = .................................................... 149. Slave Select (SS) Pin, 1 =",
    "S\n....................................................... 155. SLEEP, 1 = .............................................................................. 292. Sleep, 1 = . OSC1 and OSC2 Pin States, 1 = ...................................... 28. Software Simulator (MPLAB SIM), 1 = .................................... 302. Special Event Trigger. See Compare (CCP",
    "S\nModule)., 1 = . Special Features of the CPU, 1 = ............................................ 237. Special Function Registers, 1 = ................................................ 61. Map, 1 = ............................................................................ 61\nSPI Mode\nAssociated Registers ............................................... 163",
    "S\nBus Mode Compatibility ........................................... 163\nEffects of a Reset\n....................................................\n163\nMaster in Power-Managed Modes ........................... 163\nMaster Mode ............................................................ 160\nMaster/Slave Connection ......................................... 159\nRegisters",
    "S\n................................................................. 156\nSerial Clock .............................................................. 155\nSerial Data In ........................................................... 155\nSerial Data Out ........................................................ 155",
    "S\nSlave in Power-Managed Modes ............................. 163\nSlave Mode .............................................................. 161\nSlave Select ............................................................. 155\nSPI Clock ................................................................. 160",
    "S\nSS .................................................................................... 155\nSSPOV Status Flag ......................................................... 185\nSSPSTAT Register\nR/W Bit\n.............................................................168\n,\n169",
    "S\nStack Full/Underflow Resets .............................................. 55\nSUBFWB ......................................................................... 292\nSUBLW ............................................................................ 293",
    "S\nSUBWF ............................................................................ 293\nSUBWFB ......................................................................... 294\nSWAPF ............................................................................ 295",
    "T\nT0CON Register, 1 = . PSA Bit, 1 = .................................................................... 119. T0CS Bit, 1 = .................................................................. 119. T0PS2:T0PS0 Bits, 1 = ................................................... 119. T0SE Bit, 1 =",
    "T\n.................................................................. 119. TABLAT Register, 1 = ............................................................... 74. Table Pointer Operations (table), 1 = ........................................ 74. Table Reads/Table Writes ................................................., 1 = 59. TBLPTR Register, 1",
    "T\n= ............................................................... 74. TBLRD, 1 = ............................................................................. 296. TBLWT, 1 = ............................................................................. 297. Time-out in Various Situations (table), 1 =",
    "T\n................................ 45. Time-out Sequence, 1 = ........................................................... 44. Timer0, 1 = .............................................................................. 117. 16-Bit Mode Timer Reads and Writes, 1 = ...................... 119. Associated Registers",
    "T\n..............................................., 1 = 119. Clock Source Edge Select (T0SE Bit), 1 = ..................... 119. Clock Source Select (T0CS Bit) ..............................., 1 = 119. Interrupt, 1 = ................................................................... 119. Operation, 1 =",
    "T\n................................................................. 119. Prescaler. See Prescaler, Timer0. Switching Prescaler Assignment ............................., 1 = 119. Timer1, 1 = .............................................................................. 121. 16-Bit Read/Write Mode, 1 = ..........................................",
    "T\n124. Associated Registers ..............................................., 1 = 125. Interrupt, 1 = ................................................................... 124. Operation, 1 = ................................................................. 122. Oscillator, 1 =",
    "T\n...........................................................121 , 123. Oscillator Layout Considerations, 1 = ............................. 123. Overflow Interrupt, 1 = .................................................... 121. Resetting, Using a Special Event Trigger Output (CCP) ..................................................., 1 = 124. Special Event Trigger (CCP)",
    "T\n..................................., 1 = 136. TMR1H Register ......................................................, 1 = 121. TMR1L Register, 1 = ....................................................... 121. Use as a Real-Time Clock, 1 = ....................................... 124",
    "PIC18F2220/2320/4220/4320\nTimer2, 1 = .............................................................................. 127. Associated Registers ............................................., 1 = ............................................... 128. MSSP Clock Shift, 1 = 127 , 128. Operation",
    "PIC18F2220/2320/4220/4320\n................................................................., 1 = 127 , 138. Postscaler. See Postscaler, Timer2. PR2 Register .................................................... Prescaler. See Prescaler, Timer2., 1 = 127. TMR2 Register ......................................................... .................., 1 = 127.",
    "PIC18F2220/2320/4220/4320\nTMR2 to PR2 Match Interrupt 127, 1 = 128 , 138. Timer3 .............................................................................., 1 = 129. Associated Registers, 1 = ............................................... 131. Operation, 1 = ................................................................. 130. Oscillator",
    "PIC18F2220/2320/4220/4320\n.........................................................., 1 = 129 , 131. Overflow Interrupt ............................................., 1 = 129 , 131. Resetting, Using a Special Event Trigger Output (CCP) ..................................................., 1 = 131. TMR3H Register",
    "PIC18F2220/2320/4220/4320\n......................................................, 1 = 129. TMR3L Register ......................................................., 1 = 129. Timing Diagrams, 1 = . A/D Conversion ........................................................, 1 = 346. Acknowledge Sequence, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................... 188. Asynchronous Reception, 1 = ......................................... 205. Asynchronous Transmission, 1 = .................................... 203. Asynchronous Transmission (Back to Back), 1 = ............ 203. Baud Rate Generator with Clock Arbitration BRG Reset Due to SDA Arbitration During, 1 = ............ 182. Start Condition",
    "PIC18F2220/2320/4220/4320\n................................................., 1 = 191. Brown-out Reset (BOR) ........................................... Bus Collision During a Repeated Start, 1 = 331. Bus Collision During a Repeated Start Condition (Case 2) ..........................................., 1 = 192. Bus Collision During a Stop Condition (Case 1) ..........................................., 1 = 193. Bus Collision During a Stop Condition (Case",
    "PIC18F2220/2320/4220/4320\n2) ..........................................., 1 = 193. Bus Collision During Start Condition (SCL = 0), 1 = 191. ......................................... Bus Collision During Start Condition (SDA Only) ......................................., 1 = 190. Bus Collision for Transmit and Acknowledge ................................, 1 = ........... 189 333. Capture/Compare/PWM (CCP), 1 = 330. CLKO and I/O",
    "PIC18F2220/2320/4220/4320\n........................................................... Clock Synchronization, 1 = 175. .............................................. Clock, Instruction Cycle, 1 = 57. .............................................. Example SPI Master Mode (CKE = 0), 1 = ..................... 335. Example SPI Master Mode (CKE = 1), 1 =",
    "PIC18F2220/2320/4220/4320\n...................... Example SPI Slave Mode (CKE = 0) ......................., 1 = 336 337. Example SPI Slave Mode (CKE = 1) ......................., 1 = 338. External Clock (All Modes Except PLL), 1 = . (FSCM) .............................., 1 = ................... 328 250. Fail-Safe Clock Monitor First Start Bit",
    "PIC18F2220/2320/4220/4320\n............................................................, 1 = ........................................... Full-Bridge PWM Output, 1 = 183 146. Half-Bridge PWM Output, 1 = .......................................... 145. I 2 C Bus Data ............................................................ 2, 1 =",
    "PIC18F2220/2320/4220/4320\n340. I C Bus Start/Stop Bits 2, 1 = 339. ............................................. I C Master Mode, 1 = . (Transmission, 7 or 10-Bit Address) ........................................., 1 = 186 ....... I 2 C Slave Mode (Transmission, 10-Bit Address) I 2 C Slave Mode (Transmission, 7-Bit Address), 1 = 173 ........ 171. I 2 C Slave Mode with SEN = 0 (Reception, 10-Bit Address) ................................................, 1 = 172. I 2",
    "PIC18F2220/2320/4220/4320\nC Slave Mode with SEN = 0, 1 = . (Reception, 7-Bit Address) .................................................., 1 = 170",
    "PIC18F2220/2320/4220/4320\nI 2 C Slave Mode with SEN = 1 (Reception, 10-Bit Address) ................................................, 1 = 177. I 2 C Slave Mode with SEN = 1 (Reception, 7-Bit Address) .................................................., 1 = 176. Low-Voltage Detect ................................................., 1 = 234. Low-Voltage Detect Characteristics, 1 = ......................... 322. Master SSP I 2 C Bus",
    "PIC18F2220/2320/4220/4320\nData ........................................, 1 = 342. Master SSP I 2 C Bus Start/Stop Bits, 1 = ........................ 342. Parallel Slave Port (PIC18F4X20), 1 = ........................... 334. Parallel Slave Port (PSP) Read, 1 = ............................... 115. Parallel Slave Port (PSP) Write ..............................., 1 = 115. PWM Auto-Shutdown (PRSEN = 0, Auto-Restart Disabled)",
    "PIC18F2220/2320/4220/4320\n.................................... 1,, 1 = 151. PWM Auto-Shutdown (PRSEN = Auto-Restart Enabled) ..................................... PWM Direction Change ..........................................., 1 = 151 148. PWM Direction Change at Near 100% Duty Cycle ............................................., 1 = 148. PWM Output",
    "PIC18F2220/2320/4220/4320\n............................................................, 1 = 138. Repeat Start Condition, 1 = 184. ............................................ Reset, Watchdog Timer (WDT), Oscillator Start-up Timer (OST), Power-up Timer (PWRT) ..........., 1 = 331. Slave Mode General Call Address Sequence (7 or 10-Bit Addressing Mode) ........................., 1 = 178. Slave Synchronization",
    "PIC18F2220/2320/4220/4320\n............................................. Slow Rise Time (MCLR Tied to VDD,, 1 = 161. VDD Rise > TPWRT) ............................................, 1 = 51. SPI Mode (Master Mode) ........................................., 1 = 160. SPI Mode (Slave Mode with CKE = 0), 1 = ..................... 162. SPI Mode (Slave Mode with CKE = 1)",
    "PIC18F2220/2320/4220/4320\n....................., 1 = 162. Stop Condition Receive or Transmit Mode, 1 = .............. 188. Synchronous Transmission ..................................... Synchronous Transmission (Through, 1 = 206 .......... 207. TXEN) Time-out Sequence on POR w/, 1 = ..................... 51. PLL Enabled (MCLR Tied to VDD) Time-out Sequence on Power-up (MCLR Not Tied to VDD): Case 1, 1 = ....................... 50. Time-out Sequence on Power-up (MCLR Not Tied to VDD): Case 2, 1 = 50.",
    "PIC18F2220/2320/4220/4320\n....................... Time-out Sequence on Power-up, 1 = 50. (MCLR Tied to VDD, VDD Rise TPWRT), 1 = .............. 332. Timer0 and Timer1 External Clock .......................... Transition for Entry to SEC_IDLE Mode ...................., 1 = 34. Transition for Entry to SEC_RUN Mode, 1 = .................... 36. Transition for Entry to Sleep Mode, 1 = ............................ 32. Transition for Two-Speed Start-up, 1 = . (INTOSC to HSPLL)",
    "PIC18F2220/2320/4220/4320\n........................................, 1 = 248. Transition for Wake from PRI_IDLE Mode Transition for Wake from RC_RUN Mode, 1 = ................ 33. (RC_RUN to PRI_RUN) ....................................., 1 = 35. Transition for Wake from SEC_RUN Mode (HSPLL) ................................., 1 = 34. Transition to PRI_IDLE Mode, 1 = .................................... 33. Transition to RC_IDLE Mode, 1 =",
    "PIC18F2220/2320/4220/4320\n..................................... 35. Transition to RC_RUN Mode, 1 = ..................................... 37. USART Synchronous Receive (Master/Slave), 1 = ........ 344. USART Synchronous Reception, 1 = 208. (Master Mode, SREN) ..................................... USART SynchronousTransmission (Master/Slave), 1 = . 344",
    "PIC18F2220/2320/4220/4320\nTiming Diagrams and Specifications, 1 = ................................ 328. A/D Conversion Requirements, 1 = ................................ 346. Capture/Compare/PWM Requirements, 1 = ................... 334. CLKO and I/O Requirements, 1 = ................................... 330. DC Characteristics - Internal RC Accuracy, 1 = .............. 329. Example SPI Mode Requirements (Master Mode, CKE = 0) .................................., 1 = 336. Example",
    "PIC18F2220/2320/4220/4320\nSPI Mode Requirements (Master Mode, CKE = 1) .................................., 1 = 337. Example SPI Mode Requirements (Slave Mode, CKE = 0) ...................................., 1 = 338. Example SPI Slave Mode Requirements (CKE =, 1 = 1) .................................. 339. External Clock Requirements, 1 = .................................. 328. I 2 C Bus Data Requirements (Slave Mode), 1 = .............. 341. Master SSP I 2 C Bus Data Requirements, 1 =",
    "PIC18F2220/2320/4220/4320\n................ 343. Master SSP I 2 C Bus Start/Stop Bits Requirements ..................................................., 1 = 342. Parallel Slave Port Requirements (PIC18F4X20) .................................................., 1 = 335. PLL Clock ................................................................., 1 = 329. Reset, Watchdog Timer, Oscillator Start-up Timer,",
    "PIC18F2220/2320/4220/4320\nPower-up Timer and Brown-out ........................................, 1 = 332. Reset Requirements Timer0 and Timer1 External Clock Requirements ..................................................., 1 = 333. USART Synchronous Receive Requirements, 1 = ......... 344. USART Synchronous Transmission Requirements ..................................................., 1 = 344",
    "PIC18F2220/2320/4220/4320\n........................................................... Top-of-Stack Access TRISE Register, 1 = 54. PSPMODE Bit, 1 = .......................................................... 109. TSTFSZ ............................................................................ Two-Speed Start-up, 1 = 298 237 , 248. Two-Word Instructions Example Cases",
    "PIC18F2220/2320/4220/4320\n.........................................................., 1 = 58. TXSTA Register BRGH Bit, 1 = ................................................................. 198. U USART ............................................................................., 1 = 195. Asynchronous Mode",
    "PIC18F2220/2320/4220/4320\n................................................, 1 = 202. Associated Registers, Receive, 1 = ........................ 205. Associated Registers, Transmit, 1 = ....................... 203. Receiver ..........................................................., 1 = 204. Transmitter, 1 = .......................................................",
    "PIC18F2220/2320/4220/4320\n202. Baud Rate Generator (BRG), 1 = .................................... 198. Associated Registers Baud Rate Formula, 1 = ....................................... 198 198. .......................................... Baud Rates, Asynchronous Mode (BRGH = 0, Low Speed), 1 = 199. .......................... Baud Rates, Asynchronous Mode (BRGH = 1, High Speed) ........................., 1 =",
    "PIC18F2220/2320/4220/4320\n200. Baud Rates, Synchronous Mode (SYNC = 1) .............................................., 1 = 201. High Baud Rate Select (BRGH Bit) .................. Operation in Power-Managed Mode, 1 = 198. .........................................................., 1 = ................ 198. Sampling, 1 = 198",
    "PIC18F2220/2320/4220/4320\nSerial Port Enable (SPEN Bit), 1 = ................................. 195. Setting Up 9-Bit Mode with Address Detect, 1 = ............. 204. Synchronous Master Mode, 1 = ...................................... 206. Associated Registers, Reception, 1 = ..................... 208. Associated Registers, Transmit, 1 = ....................... 207. Reception, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................................ 208. Transmission, 1 = ................................................... 206. Synchronous Slave Mode, 1 = ........................................ 209. Associated Registers, Receive, 1 = ........................ 210. Associated Registers, Transmit, 1 = ....................... 209. Reception, 1 =",
    "PIC18F2220/2320/4220/4320\n........................................................ 210. Transmission, 1 = ................................................... 209. V, 1 = . Voltage Reference Specifications, 1 = .................................... 322. W, 1 = . Watchdog Timer (WDT), 1 = ............................................237 , 246. Associated Registers, 1 =",
    "PIC18F2220/2320/4220/4320\n............................................... 247. Control Register, 1 = ....................................................... 246. During Oscillator Failure, 1 = .......................................... 249. Programming Considerations, 1 = .................................. 246. WCOL, 1 =",
    "PIC18F2220/2320/4220/4320\n.............................................................................. 183. WCOL Status Flag, 1 = ............................................ 183 , 185 , 188. WWWAddress, 1 = ................................................................ 389. WWW, On-Line Support, 1 =",
    "PIC18F2220/2320/4220/4320\n...................................................... 5. X, 1 = . XORLW, 1 = ............................................................................ 298. XORWF, 1 = ........................................................................... 299\nNOTES:",
    "CUSTOMER SUPPORT\nMicrochip provides online support via our WWW site at www.microchip.com. This web site is used as a means to make  files and  information  easily available to customers. Accessible by using your favorite Internet browser, the web site contains the following information:\nGLYPH<149> Product Support GLYPH<150> Data sheets and errata, application notes and sample programs, design resources, userGLYPH<146>s guides and hardware support documents, latest software releases and archived software\nGLYPH<149> General Technical Support GLYPH<150> Frequently Asked Questions (FAQ), technical support requests, online discussion groups, Microchip consultant program member listing\nGLYPH<149> Business of Microchip GLYPH<150> Product selector and ordering guides, latest Microchip press releases, listing of seminars and events, listings of Microchip sales offices, distributors and factory representatives",
    "CUSTOMER CHANGE NOTIFICATION SERVICE\nMicrochipGLYPH<146>s  customer  notification  service  helps  keep customers current on Microchip products. Subscribers will receive  e-mail  notification  whenever  there  are changes,  updates,  revisions  or  errata  related  to  a specified product family or development tool of interest.\nTo register, access the Microchip web site at www.microchip.com, click on Customer Change Notification and follow the registration instructions.\nUsers  of  Microchip  products  can  receive  assistance through several channels:\nGLYPH<149> Distributor or Representative\nGLYPH<149> Local Sales Office\nGLYPH<149> Field Application Engineer (FAE)\nGLYPH<149> Technical Support\nGLYPH<149> Development Systems Information Line\nCustomers should contact their distributor, representative  or  field  application  engineer  (FAE)  for support. Local sales offices are also available to help customers.  A  listing  of  sales  offices  and  locations  is included in the back of this document.\nTechnical support is available through the web site at: http://support.microchip.com",
    "READER RESPONSE\nIt is our intention to provide you with the best documentation possible to ensure successful use of your Microchip product.  If you wish to provide your comments on organization, clarity, subject matter, and ways in which our documentation can better serve you, please FAX your comments to the Technical Publications Manager at (480) 792-4150.\nPlease list the following information, and use this outline to provide us with your comments about this document.\nTo:\nTechnical Publications Manager\nRE:\nReader Response\nTotal Pages Sent ________\nFrom:\nName\nCompany\nAddress\nCity / State / ZIP / Country\nTelephone: (_______) _________ - _________\nApplication (optional):\nWould you like a reply?       Y         N\nDevice:  PIC18F2220/2320/4220/4320\nLiterature Number:  DS39599G\nQuestions:\nFAX: (______) _________ - _________\n1. What are the best features of this document?\n2. How does this document meet your hardware and software development needs?",
    "READER RESPONSE\n3. Do you find the organization of this document easy to follow? If not, why?\n4. What additions to the document do you think would enhance the structure and subject?\n5. What deletions from the document could be made without affecting the overall usefulness?\n6. Is there any incorrect or misleading information (what and where)?\n7. How would you improve this document?",
    "PIC18F2220/2320/4220/4320 PRODUCT IDENTIFICATION SYSTEM\nTo order or obtain information, e.g., on pricing or delivery, refer to the factory or the listed sales office.",
    "PIC18F2220/2320/4220/4320 PRODUCT IDENTIFICATION SYSTEM\nDevice, - = PIC18F2220/2320/4220/4320 (1) , PIC18F2220/2320/4220/4320T (1,2) ; VDD range 4.2V to 5.5V PIC18LF2220/2320/4220/4320 (1) , PIC18LF2220/2320/4220/4320T (1,2) ;. Device, X Temperature Range = PIC18F2220/2320/4220/4320 (1) , PIC18F2220/2320/4220/4320T (1,2) ; VDD range 4.2V to 5.5V PIC18LF2220/2320/4220/4320 (1) , PIC18LF2220/2320/4220/4320T (1,2) ;. Device, /XX Package = PIC18F2220/2320/4220/4320 (1) , PIC18F2220/2320/4220/4320T (1,2) ; VDD",
    "PIC18F2220/2320/4220/4320 PRODUCT IDENTIFICATION SYSTEM\nrange 4.2V to 5.5V PIC18LF2220/2320/4220/4320 (1) , PIC18LF2220/2320/4220/4320T (1,2) ;. Device, XXX Pattern = PIC18F2220/2320/4220/4320 (1) , PIC18F2220/2320/4220/4320T (1,2) ; VDD range 4.2V to 5.5V PIC18LF2220/2320/4220/4320 (1) , PIC18LF2220/2320/4220/4320T (1,2) ;. Temperature Range, - = I =. Temperature Range, X Temperature Range = -40 \u00b0 C to +85 \u00b0 C (Industrial). Temperature Range, /XX Package = -40 \u00b0 C to +85 \u00b0 C (Industrial). Temperature Range, XXX Pattern = -40 \u00b0 C to +85 \u00b0 C (Industrial). Package, - = PT = TQFP (Thin Quad SO = SOIC SP = Skinny Plastic DIP P = PDIP",
    "PIC18F2220/2320/4220/4320 PRODUCT IDENTIFICATION SYSTEM\nML = QFN. Package, X Temperature Range = Flatpack). Package, /XX Package = Flatpack). Package, XXX Pattern = Flatpack). Pattern, - = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, X Temperature Range = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, /XX Package = QTP, SQTP, Code or Special Requirements (blank otherwise). Pattern, XXX Pattern = QTP, SQTP, Code or Special Requirements (blank otherwise)",
    "Examples:\na) PIC18LF4320-I/P 301 = Industrial temp., PDIP  package,  Extended  VDD  limits, QTP pattern #301.\nb) PIC18LF2220-I/SO  =  Industrial  temp., SOIC package, Extended VDD limits.\nc) PIC18F4220-I/P = Industrial temp., PDIP package, normal VDD limits.\nNote 1:\nF = Standard Voltage Range LF = Wide Voltage Range\n2: T = in tape and reel GLYPH<150> SOIC and TQFP packages only.",
    "AMERICAS\nCorporate Office 2355 West Chandler Blvd. Chandler, AZ  85224-6199 Tel:  480-792-7200 Fax:  480-792-7277 Technical Support: http://support.microchip.com Web Address: www.microchip.com\nAtlanta Duluth, GA Tel: 678-957-9614 Fax: 678-957-1455",
    "Boston\nWestborough, MA Tel: 774-760-0087 Fax: 774-760-0088",
    "Chicago\nItasca, IL\nTel: 630-285-0071\nFax: 630-285-0075\nDallas Addison, TX Tel: 972-818-7423 Fax: 972-818-2924\nDetroit Farmington Hills, MI Tel: 248-538-2250 Fax: 248-538-2260\nKokomo Kokomo, IN Tel: 765-864-8360 Fax: 765-864-8387\nLos Angeles Mission Viejo, CA Tel: 949-462-9523 Fax: 949-462-9608\nSanta Clara Santa Clara, CA Tel: 408-961-6444 Fax: 408-961-6445\nToronto Mississauga, Ontario, Canada Tel: 905-673-0699 Fax:  905-673-6509",
    "ASIA/PACIFIC\nAsia Pacific Office Suites 3707-14, 37th Floor Tower 6, The Gateway Harbour City, Kowloon Hong Kong Tel: 852-2401-1200 Fax: 852-2401-3431\nAustralia - Sydney Tel: 61-2-9868-6733 Fax: 61-2-9868-6755\nChina - Beijing Tel: 86-10-8528-2100 Fax: 86-10-8528-2104\nChina - Chengdu Tel: 86-28-8665-5511 Fax: 86-28-8665-7889\nChina - Fuzhou Tel: 86-591-8750-3506 Fax: 86-591-8750-3521\nChina - Hong Kong SAR Tel: 852-2401-1200 Fax: 852-2401-3431\nChina - Nanjing Tel: 86-25-8473-2460 Fax: 86-25-8473-2470\nChina - Qingdao Tel: 86-532-8502-7355 Fax: 86-532-8502-7205",
    "ASIA/PACIFIC\nChina - Shanghai Tel: 86-21-5407-5533 Fax: 86-21-5407-5066\nChina - Shenyang Tel: 86-24-2334-2829 Fax: 86-24-2334-2393\nChina - Shenzhen Tel: 86-755-8203-2660 Fax: 86-755-8203-1760\nChina - Shunde Tel: 86-757-2839-5507 Fax: 86-757-2839-5571\nChina - Wuhan Tel: 86-27-5980-5300 Fax: 86-27-5980-5118",
    "China - Xian\nTel: 86-29-8833-7252 Fax: 86-29-8833-7256\nIndia - Bangalore Tel: 91-80-4182-8400 Fax: 91-80-4182-8422\nIndia - New Delhi Tel: 91-11-4160-8631 Fax: 91-11-4160-8632",
    "India - Pune\nTel: 91-20-2566-1512 Fax: 91-20-2566-1513\nJapan - Yokohama Tel: 81-45-471- 6166 Fax: 81-45-471-6122",
    "Korea - Daegu\nTel: 82-53-744-4301\nFax: 82-53-744-4302\nKorea - Seoul Tel: 82-2-554-7200 Fax: 82-2-558-5932 or 82-2-558-5934",
    "Malaysia - Kuala Lumpur\nTel: 60-3-6201-9857 Fax: 60-3-6201-9859\nMalaysia - Penang Tel: 60-4-227-8870 Fax: 60-4-227-4068",
    "Philippines - Manila\nTel: 63-2-634-9065 Fax: 63-2-634-9069",
    "Singapore\nTel:  65-6334-8870 Fax: 65-6334-8850\nTaiwan - Hsin Chu Tel: 886-3-572-9526 Fax: 886-3-572-6459",
    "Taiwan - Kaohsiung\nTel: 886-7-536-4818\nFax: 886-7-536-4803",
    "Taiwan - Taipei\nTel: 886-2-2500-6610 Fax: 886-2-2508-0102\nThailand - Bangkok Tel: 66-2-694-1351 Fax: 66-2-694-1350",
    "EUROPE\nAustria - Wels Tel: 43-7242-2244-39 Fax: 43-7242-2244-393\nDenmark - Copenhagen\nTel: 45-4450-2828\nFax: 45-4485-2829\nFrance - Paris Tel: 33-1-69-53-63-20 Fax: 33-1-69-30-90-79\nGermany - Munich Tel: 49-89-627-144-0 Fax: 49-89-627-144-44",
    "Italy - Milan\nTel: 39-0331-742611 Fax: 39-0331-466781",
    "Netherlands - Drunen\nTel: 31-416-690399 Fax: 31-416-690340\nSpain - Madrid Tel: 34-91-708-08-90 Fax: 34-91-708-08-91\nUK - Wokingham Tel: 44-118-921-5869 Fax: 44-118-921-5820",
    "Mouser Electronics\nAuthorized Distributor\nClick to View Pricing, Inventory, Delivery & Lifecycle Information:",
    "Microchip:\nPIC18F4320-E/ML\u00a0 PIC18F4220-I/P\u00a0 PIC18F4320-I/P\u00a0 PIC18LF4320-I/PT\u00a0 PIC18F2220-E/SP\u00a0 PIC18LF4320-I/ML PIC18F2220-E/SO\u00a0 PIC18LF4220-I/P\u00a0 PIC18F4220-I/ML\u00a0 PIC18F4220-I/PT\u00a0 PIC18F4320-I/ML\u00a0 PIC18F4320-I/PT PIC18F2320-I/SP\u00a0 PIC18F2320-I/SO\u00a0 PIC18F2220-I/SP\u00a0 PIC18F2220-I/SO\u00a0 PIC18LF2220-I/SO\u00a0 PIC18LF2220-I/SP PIC18F2320T-I/SO\u00a0 PIC18LF2320-I/SP\u00a0 PIC18LF2320-I/SO\u00a0 PIC18LF4320T-I/PT\u00a0 PIC18F4320T-I/PT\u00a0 PIC18LF4220I/PT"
]